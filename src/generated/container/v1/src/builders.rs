// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

pub mod cluster_manager {
    use crate::Result;
    use std::sync::Arc;

    /// Common implementation for [crate::client::ClusterManager] request builders.
    #[derive(Clone, Debug)]
    pub struct RequestBuilder<R: std::default::Default> {
        stub: Arc<dyn crate::stubs::dynamic::ClusterManager>,
        request: R,
        options: gax::options::RequestOptions,
    }

    impl<R> RequestBuilder<R>
    where
        R: std::default::Default,
    {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self {
                stub,
                request: R::default(),
                options: gax::options::RequestOptions::default(),
            }
        }
    }

    /// The request builder for a ClusterManager::list_clusters call.
    #[derive(Clone, Debug)]
    pub struct ListClusters(RequestBuilder<crate::model::ListClustersRequest>);

    impl ListClusters {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListClustersRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListClustersResponse> {
            (*self.0.stub)
                .list_clusters(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::ListClustersRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::ListClustersRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [parent][crate::model::ListClustersRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListClusters {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::get_cluster call.
    #[derive(Clone, Debug)]
    pub struct GetCluster(RequestBuilder<crate::model::GetClusterRequest>);

    impl GetCluster {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetClusterRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Cluster> {
            (*self.0.stub)
                .get_cluster(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::GetClusterRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::GetClusterRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::GetClusterRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [name][crate::model::GetClusterRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetCluster {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::create_cluster call.
    #[derive(Clone, Debug)]
    pub struct CreateCluster(RequestBuilder<crate::model::CreateClusterRequest>);

    impl CreateCluster {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateClusterRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .create_cluster(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::CreateClusterRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::CreateClusterRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster][crate::model::CreateClusterRequest::cluster].
        pub fn set_cluster<T: Into<std::option::Option<crate::model::Cluster>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.cluster = v.into();
            self
        }

        /// Sets the value of [parent][crate::model::CreateClusterRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CreateCluster {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::update_cluster call.
    #[derive(Clone, Debug)]
    pub struct UpdateCluster(RequestBuilder<crate::model::UpdateClusterRequest>);

    impl UpdateCluster {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateClusterRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .update_cluster(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::UpdateClusterRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::UpdateClusterRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::UpdateClusterRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [update][crate::model::UpdateClusterRequest::update].
        pub fn set_update<T: Into<std::option::Option<crate::model::ClusterUpdate>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update = v.into();
            self
        }

        /// Sets the value of [name][crate::model::UpdateClusterRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for UpdateCluster {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::update_node_pool call.
    #[derive(Clone, Debug)]
    pub struct UpdateNodePool(RequestBuilder<crate::model::UpdateNodePoolRequest>);

    impl UpdateNodePool {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateNodePoolRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .update_node_pool(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::UpdateNodePoolRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::UpdateNodePoolRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::UpdateNodePoolRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [node_pool_id][crate::model::UpdateNodePoolRequest::node_pool_id].
        pub fn set_node_pool_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.node_pool_id = v.into();
            self
        }

        /// Sets the value of [node_version][crate::model::UpdateNodePoolRequest::node_version].
        pub fn set_node_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.node_version = v.into();
            self
        }

        /// Sets the value of [image_type][crate::model::UpdateNodePoolRequest::image_type].
        pub fn set_image_type<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.image_type = v.into();
            self
        }

        /// Sets the value of [name][crate::model::UpdateNodePoolRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [workload_metadata_config][crate::model::UpdateNodePoolRequest::workload_metadata_config].
        pub fn set_workload_metadata_config<
            T: Into<std::option::Option<crate::model::WorkloadMetadataConfig>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.workload_metadata_config = v.into();
            self
        }

        /// Sets the value of [upgrade_settings][crate::model::UpdateNodePoolRequest::upgrade_settings].
        pub fn set_upgrade_settings<
            T: Into<std::option::Option<crate::model::node_pool::UpgradeSettings>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.upgrade_settings = v.into();
            self
        }

        /// Sets the value of [tags][crate::model::UpdateNodePoolRequest::tags].
        pub fn set_tags<T: Into<std::option::Option<crate::model::NetworkTags>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.tags = v.into();
            self
        }

        /// Sets the value of [taints][crate::model::UpdateNodePoolRequest::taints].
        pub fn set_taints<T: Into<std::option::Option<crate::model::NodeTaints>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.taints = v.into();
            self
        }

        /// Sets the value of [labels][crate::model::UpdateNodePoolRequest::labels].
        pub fn set_labels<T: Into<std::option::Option<crate::model::NodeLabels>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.labels = v.into();
            self
        }

        /// Sets the value of [linux_node_config][crate::model::UpdateNodePoolRequest::linux_node_config].
        pub fn set_linux_node_config<
            T: Into<std::option::Option<crate::model::LinuxNodeConfig>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.linux_node_config = v.into();
            self
        }

        /// Sets the value of [kubelet_config][crate::model::UpdateNodePoolRequest::kubelet_config].
        pub fn set_kubelet_config<T: Into<std::option::Option<crate::model::NodeKubeletConfig>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.kubelet_config = v.into();
            self
        }

        /// Sets the value of [node_network_config][crate::model::UpdateNodePoolRequest::node_network_config].
        pub fn set_node_network_config<
            T: Into<std::option::Option<crate::model::NodeNetworkConfig>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.node_network_config = v.into();
            self
        }

        /// Sets the value of [gcfs_config][crate::model::UpdateNodePoolRequest::gcfs_config].
        pub fn set_gcfs_config<T: Into<std::option::Option<crate::model::GcfsConfig>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.gcfs_config = v.into();
            self
        }

        /// Sets the value of [confidential_nodes][crate::model::UpdateNodePoolRequest::confidential_nodes].
        pub fn set_confidential_nodes<
            T: Into<std::option::Option<crate::model::ConfidentialNodes>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.confidential_nodes = v.into();
            self
        }

        /// Sets the value of [gvnic][crate::model::UpdateNodePoolRequest::gvnic].
        pub fn set_gvnic<T: Into<std::option::Option<crate::model::VirtualNIC>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.gvnic = v.into();
            self
        }

        /// Sets the value of [etag][crate::model::UpdateNodePoolRequest::etag].
        pub fn set_etag<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }

        /// Sets the value of [fast_socket][crate::model::UpdateNodePoolRequest::fast_socket].
        pub fn set_fast_socket<T: Into<std::option::Option<crate::model::FastSocket>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.fast_socket = v.into();
            self
        }

        /// Sets the value of [logging_config][crate::model::UpdateNodePoolRequest::logging_config].
        pub fn set_logging_config<
            T: Into<std::option::Option<crate::model::NodePoolLoggingConfig>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.logging_config = v.into();
            self
        }

        /// Sets the value of [resource_labels][crate::model::UpdateNodePoolRequest::resource_labels].
        pub fn set_resource_labels<T: Into<std::option::Option<crate::model::ResourceLabels>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.resource_labels = v.into();
            self
        }

        /// Sets the value of [windows_node_config][crate::model::UpdateNodePoolRequest::windows_node_config].
        pub fn set_windows_node_config<
            T: Into<std::option::Option<crate::model::WindowsNodeConfig>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.windows_node_config = v.into();
            self
        }

        /// Sets the value of [machine_type][crate::model::UpdateNodePoolRequest::machine_type].
        pub fn set_machine_type<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.machine_type = v.into();
            self
        }

        /// Sets the value of [disk_type][crate::model::UpdateNodePoolRequest::disk_type].
        pub fn set_disk_type<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.disk_type = v.into();
            self
        }

        /// Sets the value of [disk_size_gb][crate::model::UpdateNodePoolRequest::disk_size_gb].
        pub fn set_disk_size_gb<T: Into<i64>>(mut self, v: T) -> Self {
            self.0.request.disk_size_gb = v.into();
            self
        }

        /// Sets the value of [resource_manager_tags][crate::model::UpdateNodePoolRequest::resource_manager_tags].
        pub fn set_resource_manager_tags<
            T: Into<std::option::Option<crate::model::ResourceManagerTags>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.resource_manager_tags = v.into();
            self
        }

        /// Sets the value of [containerd_config][crate::model::UpdateNodePoolRequest::containerd_config].
        pub fn set_containerd_config<
            T: Into<std::option::Option<crate::model::ContainerdConfig>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.containerd_config = v.into();
            self
        }

        /// Sets the value of [queued_provisioning][crate::model::UpdateNodePoolRequest::queued_provisioning].
        pub fn set_queued_provisioning<
            T: Into<std::option::Option<crate::model::node_pool::QueuedProvisioning>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.queued_provisioning = v.into();
            self
        }

        /// Sets the value of [locations][crate::model::UpdateNodePoolRequest::locations].
        pub fn set_locations<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.0.request.locations = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [accelerators][crate::model::UpdateNodePoolRequest::accelerators].
        pub fn set_accelerators<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::AcceleratorConfig>,
        {
            use std::iter::Iterator;
            self.0.request.accelerators = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [storage_pools][crate::model::UpdateNodePoolRequest::storage_pools].
        pub fn set_storage_pools<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.0.request.storage_pools = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl gax::options::RequestBuilder for UpdateNodePool {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::set_node_pool_autoscaling call.
    #[derive(Clone, Debug)]
    pub struct SetNodePoolAutoscaling(RequestBuilder<crate::model::SetNodePoolAutoscalingRequest>);

    impl SetNodePoolAutoscaling {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SetNodePoolAutoscalingRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .set_node_pool_autoscaling(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::SetNodePoolAutoscalingRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::SetNodePoolAutoscalingRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::SetNodePoolAutoscalingRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [node_pool_id][crate::model::SetNodePoolAutoscalingRequest::node_pool_id].
        pub fn set_node_pool_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.node_pool_id = v.into();
            self
        }

        /// Sets the value of [autoscaling][crate::model::SetNodePoolAutoscalingRequest::autoscaling].
        pub fn set_autoscaling<T: Into<std::option::Option<crate::model::NodePoolAutoscaling>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.autoscaling = v.into();
            self
        }

        /// Sets the value of [name][crate::model::SetNodePoolAutoscalingRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SetNodePoolAutoscaling {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::set_logging_service call.
    #[derive(Clone, Debug)]
    pub struct SetLoggingService(RequestBuilder<crate::model::SetLoggingServiceRequest>);

    impl SetLoggingService {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SetLoggingServiceRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .set_logging_service(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::SetLoggingServiceRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::SetLoggingServiceRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::SetLoggingServiceRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [logging_service][crate::model::SetLoggingServiceRequest::logging_service].
        pub fn set_logging_service<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.logging_service = v.into();
            self
        }

        /// Sets the value of [name][crate::model::SetLoggingServiceRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SetLoggingService {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::set_monitoring_service call.
    #[derive(Clone, Debug)]
    pub struct SetMonitoringService(RequestBuilder<crate::model::SetMonitoringServiceRequest>);

    impl SetMonitoringService {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SetMonitoringServiceRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .set_monitoring_service(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::SetMonitoringServiceRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::SetMonitoringServiceRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::SetMonitoringServiceRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [monitoring_service][crate::model::SetMonitoringServiceRequest::monitoring_service].
        pub fn set_monitoring_service<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.monitoring_service = v.into();
            self
        }

        /// Sets the value of [name][crate::model::SetMonitoringServiceRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SetMonitoringService {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::set_addons_config call.
    #[derive(Clone, Debug)]
    pub struct SetAddonsConfig(RequestBuilder<crate::model::SetAddonsConfigRequest>);

    impl SetAddonsConfig {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SetAddonsConfigRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .set_addons_config(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::SetAddonsConfigRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::SetAddonsConfigRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::SetAddonsConfigRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [addons_config][crate::model::SetAddonsConfigRequest::addons_config].
        pub fn set_addons_config<T: Into<std::option::Option<crate::model::AddonsConfig>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.addons_config = v.into();
            self
        }

        /// Sets the value of [name][crate::model::SetAddonsConfigRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SetAddonsConfig {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::set_locations call.
    #[derive(Clone, Debug)]
    pub struct SetLocations(RequestBuilder<crate::model::SetLocationsRequest>);

    impl SetLocations {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SetLocationsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .set_locations(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::SetLocationsRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::SetLocationsRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::SetLocationsRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [name][crate::model::SetLocationsRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [locations][crate::model::SetLocationsRequest::locations].
        pub fn set_locations<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.0.request.locations = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl gax::options::RequestBuilder for SetLocations {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::update_master call.
    #[derive(Clone, Debug)]
    pub struct UpdateMaster(RequestBuilder<crate::model::UpdateMasterRequest>);

    impl UpdateMaster {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateMasterRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .update_master(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::UpdateMasterRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::UpdateMasterRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::UpdateMasterRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [master_version][crate::model::UpdateMasterRequest::master_version].
        pub fn set_master_version<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.master_version = v.into();
            self
        }

        /// Sets the value of [name][crate::model::UpdateMasterRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for UpdateMaster {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::set_master_auth call.
    #[derive(Clone, Debug)]
    pub struct SetMasterAuth(RequestBuilder<crate::model::SetMasterAuthRequest>);

    impl SetMasterAuth {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SetMasterAuthRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .set_master_auth(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::SetMasterAuthRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::SetMasterAuthRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::SetMasterAuthRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [action][crate::model::SetMasterAuthRequest::action].
        pub fn set_action<T: Into<crate::model::set_master_auth_request::Action>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.action = v.into();
            self
        }

        /// Sets the value of [update][crate::model::SetMasterAuthRequest::update].
        pub fn set_update<T: Into<std::option::Option<crate::model::MasterAuth>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update = v.into();
            self
        }

        /// Sets the value of [name][crate::model::SetMasterAuthRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SetMasterAuth {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::delete_cluster call.
    #[derive(Clone, Debug)]
    pub struct DeleteCluster(RequestBuilder<crate::model::DeleteClusterRequest>);

    impl DeleteCluster {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteClusterRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .delete_cluster(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::DeleteClusterRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::DeleteClusterRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::DeleteClusterRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [name][crate::model::DeleteClusterRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DeleteCluster {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::list_operations call.
    #[derive(Clone, Debug)]
    pub struct ListOperations(RequestBuilder<crate::model::ListOperationsRequest>);

    impl ListOperations {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListOperationsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListOperationsResponse> {
            (*self.0.stub)
                .list_operations(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::ListOperationsRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::ListOperationsRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [parent][crate::model::ListOperationsRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListOperations {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::get_operation call.
    #[derive(Clone, Debug)]
    pub struct GetOperation(RequestBuilder<crate::model::GetOperationRequest>);

    impl GetOperation {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetOperationRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .get_operation(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::GetOperationRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::GetOperationRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [operation_id][crate::model::GetOperationRequest::operation_id].
        pub fn set_operation_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.operation_id = v.into();
            self
        }

        /// Sets the value of [name][crate::model::GetOperationRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetOperation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::cancel_operation call.
    #[derive(Clone, Debug)]
    pub struct CancelOperation(RequestBuilder<crate::model::CancelOperationRequest>);

    impl CancelOperation {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CancelOperationRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<wkt::Empty> {
            (*self.0.stub)
                .cancel_operation(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::CancelOperationRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::CancelOperationRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [operation_id][crate::model::CancelOperationRequest::operation_id].
        pub fn set_operation_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.operation_id = v.into();
            self
        }

        /// Sets the value of [name][crate::model::CancelOperationRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CancelOperation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::get_server_config call.
    #[derive(Clone, Debug)]
    pub struct GetServerConfig(RequestBuilder<crate::model::GetServerConfigRequest>);

    impl GetServerConfig {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetServerConfigRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ServerConfig> {
            (*self.0.stub)
                .get_server_config(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::GetServerConfigRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::GetServerConfigRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [name][crate::model::GetServerConfigRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetServerConfig {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::get_json_web_keys call.
    #[derive(Clone, Debug)]
    pub struct GetJSONWebKeys(RequestBuilder<crate::model::GetJSONWebKeysRequest>);

    impl GetJSONWebKeys {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetJSONWebKeysRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::GetJSONWebKeysResponse> {
            (*self.0.stub)
                .get_json_web_keys(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [parent][crate::model::GetJSONWebKeysRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetJSONWebKeys {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::list_node_pools call.
    #[derive(Clone, Debug)]
    pub struct ListNodePools(RequestBuilder<crate::model::ListNodePoolsRequest>);

    impl ListNodePools {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListNodePoolsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListNodePoolsResponse> {
            (*self.0.stub)
                .list_node_pools(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::ListNodePoolsRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::ListNodePoolsRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::ListNodePoolsRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [parent][crate::model::ListNodePoolsRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListNodePools {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::get_node_pool call.
    #[derive(Clone, Debug)]
    pub struct GetNodePool(RequestBuilder<crate::model::GetNodePoolRequest>);

    impl GetNodePool {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetNodePoolRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::NodePool> {
            (*self.0.stub)
                .get_node_pool(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::GetNodePoolRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::GetNodePoolRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::GetNodePoolRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [node_pool_id][crate::model::GetNodePoolRequest::node_pool_id].
        pub fn set_node_pool_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.node_pool_id = v.into();
            self
        }

        /// Sets the value of [name][crate::model::GetNodePoolRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetNodePool {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::create_node_pool call.
    #[derive(Clone, Debug)]
    pub struct CreateNodePool(RequestBuilder<crate::model::CreateNodePoolRequest>);

    impl CreateNodePool {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateNodePoolRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .create_node_pool(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::CreateNodePoolRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::CreateNodePoolRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::CreateNodePoolRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [node_pool][crate::model::CreateNodePoolRequest::node_pool].
        pub fn set_node_pool<T: Into<std::option::Option<crate::model::NodePool>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.node_pool = v.into();
            self
        }

        /// Sets the value of [parent][crate::model::CreateNodePoolRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CreateNodePool {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::delete_node_pool call.
    #[derive(Clone, Debug)]
    pub struct DeleteNodePool(RequestBuilder<crate::model::DeleteNodePoolRequest>);

    impl DeleteNodePool {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteNodePoolRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .delete_node_pool(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::DeleteNodePoolRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::DeleteNodePoolRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::DeleteNodePoolRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [node_pool_id][crate::model::DeleteNodePoolRequest::node_pool_id].
        pub fn set_node_pool_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.node_pool_id = v.into();
            self
        }

        /// Sets the value of [name][crate::model::DeleteNodePoolRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DeleteNodePool {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::complete_node_pool_upgrade call.
    #[derive(Clone, Debug)]
    pub struct CompleteNodePoolUpgrade(
        RequestBuilder<crate::model::CompleteNodePoolUpgradeRequest>,
    );

    impl CompleteNodePoolUpgrade {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CompleteNodePoolUpgradeRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<wkt::Empty> {
            (*self.0.stub)
                .complete_node_pool_upgrade(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::CompleteNodePoolUpgradeRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CompleteNodePoolUpgrade {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::rollback_node_pool_upgrade call.
    #[derive(Clone, Debug)]
    pub struct RollbackNodePoolUpgrade(
        RequestBuilder<crate::model::RollbackNodePoolUpgradeRequest>,
    );

    impl RollbackNodePoolUpgrade {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::RollbackNodePoolUpgradeRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .rollback_node_pool_upgrade(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::RollbackNodePoolUpgradeRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::RollbackNodePoolUpgradeRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::RollbackNodePoolUpgradeRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [node_pool_id][crate::model::RollbackNodePoolUpgradeRequest::node_pool_id].
        pub fn set_node_pool_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.node_pool_id = v.into();
            self
        }

        /// Sets the value of [name][crate::model::RollbackNodePoolUpgradeRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [respect_pdb][crate::model::RollbackNodePoolUpgradeRequest::respect_pdb].
        pub fn set_respect_pdb<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.respect_pdb = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for RollbackNodePoolUpgrade {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::set_node_pool_management call.
    #[derive(Clone, Debug)]
    pub struct SetNodePoolManagement(RequestBuilder<crate::model::SetNodePoolManagementRequest>);

    impl SetNodePoolManagement {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SetNodePoolManagementRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .set_node_pool_management(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::SetNodePoolManagementRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::SetNodePoolManagementRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::SetNodePoolManagementRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [node_pool_id][crate::model::SetNodePoolManagementRequest::node_pool_id].
        pub fn set_node_pool_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.node_pool_id = v.into();
            self
        }

        /// Sets the value of [management][crate::model::SetNodePoolManagementRequest::management].
        pub fn set_management<T: Into<std::option::Option<crate::model::NodeManagement>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.management = v.into();
            self
        }

        /// Sets the value of [name][crate::model::SetNodePoolManagementRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SetNodePoolManagement {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::set_labels call.
    #[derive(Clone, Debug)]
    pub struct SetLabels(RequestBuilder<crate::model::SetLabelsRequest>);

    impl SetLabels {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SetLabelsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .set_labels(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::SetLabelsRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::SetLabelsRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::SetLabelsRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [label_fingerprint][crate::model::SetLabelsRequest::label_fingerprint].
        pub fn set_label_fingerprint<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.label_fingerprint = v.into();
            self
        }

        /// Sets the value of [name][crate::model::SetLabelsRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [resource_labels][crate::model::SetLabelsRequest::resource_labels].
        pub fn set_resource_labels<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<std::string::String>,
        {
            self.0.request.resource_labels =
                v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl gax::options::RequestBuilder for SetLabels {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::set_legacy_abac call.
    #[derive(Clone, Debug)]
    pub struct SetLegacyAbac(RequestBuilder<crate::model::SetLegacyAbacRequest>);

    impl SetLegacyAbac {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SetLegacyAbacRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .set_legacy_abac(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::SetLegacyAbacRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::SetLegacyAbacRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::SetLegacyAbacRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [enabled][crate::model::SetLegacyAbacRequest::enabled].
        pub fn set_enabled<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.enabled = v.into();
            self
        }

        /// Sets the value of [name][crate::model::SetLegacyAbacRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SetLegacyAbac {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::start_ip_rotation call.
    #[derive(Clone, Debug)]
    pub struct StartIPRotation(RequestBuilder<crate::model::StartIPRotationRequest>);

    impl StartIPRotation {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::StartIPRotationRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .start_ip_rotation(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::StartIPRotationRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::StartIPRotationRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::StartIPRotationRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [name][crate::model::StartIPRotationRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [rotate_credentials][crate::model::StartIPRotationRequest::rotate_credentials].
        pub fn set_rotate_credentials<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.rotate_credentials = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for StartIPRotation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::complete_ip_rotation call.
    #[derive(Clone, Debug)]
    pub struct CompleteIPRotation(RequestBuilder<crate::model::CompleteIPRotationRequest>);

    impl CompleteIPRotation {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CompleteIPRotationRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .complete_ip_rotation(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::CompleteIPRotationRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::CompleteIPRotationRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::CompleteIPRotationRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [name][crate::model::CompleteIPRotationRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CompleteIPRotation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::set_node_pool_size call.
    #[derive(Clone, Debug)]
    pub struct SetNodePoolSize(RequestBuilder<crate::model::SetNodePoolSizeRequest>);

    impl SetNodePoolSize {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SetNodePoolSizeRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .set_node_pool_size(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::SetNodePoolSizeRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::SetNodePoolSizeRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::SetNodePoolSizeRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [node_pool_id][crate::model::SetNodePoolSizeRequest::node_pool_id].
        pub fn set_node_pool_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.node_pool_id = v.into();
            self
        }

        /// Sets the value of [node_count][crate::model::SetNodePoolSizeRequest::node_count].
        pub fn set_node_count<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.node_count = v.into();
            self
        }

        /// Sets the value of [name][crate::model::SetNodePoolSizeRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SetNodePoolSize {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::set_network_policy call.
    #[derive(Clone, Debug)]
    pub struct SetNetworkPolicy(RequestBuilder<crate::model::SetNetworkPolicyRequest>);

    impl SetNetworkPolicy {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SetNetworkPolicyRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .set_network_policy(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::SetNetworkPolicyRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::SetNetworkPolicyRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::SetNetworkPolicyRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [network_policy][crate::model::SetNetworkPolicyRequest::network_policy].
        pub fn set_network_policy<T: Into<std::option::Option<crate::model::NetworkPolicy>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.network_policy = v.into();
            self
        }

        /// Sets the value of [name][crate::model::SetNetworkPolicyRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SetNetworkPolicy {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::set_maintenance_policy call.
    #[derive(Clone, Debug)]
    pub struct SetMaintenancePolicy(RequestBuilder<crate::model::SetMaintenancePolicyRequest>);

    impl SetMaintenancePolicy {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SetMaintenancePolicyRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Operation> {
            (*self.0.stub)
                .set_maintenance_policy(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [project_id][crate::model::SetMaintenancePolicyRequest::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::SetMaintenancePolicyRequest::zone].
        pub fn set_zone<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.zone = v.into();
            self
        }

        /// Sets the value of [cluster_id][crate::model::SetMaintenancePolicyRequest::cluster_id].
        pub fn set_cluster_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.cluster_id = v.into();
            self
        }

        /// Sets the value of [maintenance_policy][crate::model::SetMaintenancePolicyRequest::maintenance_policy].
        pub fn set_maintenance_policy<
            T: Into<std::option::Option<crate::model::MaintenancePolicy>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.maintenance_policy = v.into();
            self
        }

        /// Sets the value of [name][crate::model::SetMaintenancePolicyRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SetMaintenancePolicy {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::list_usable_subnetworks call.
    #[derive(Clone, Debug)]
    pub struct ListUsableSubnetworks(RequestBuilder<crate::model::ListUsableSubnetworksRequest>);

    impl ListUsableSubnetworks {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListUsableSubnetworksRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListUsableSubnetworksResponse> {
            (*self.0.stub)
                .list_usable_subnetworks(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        #[cfg(feature = "unstable-stream")]
        pub async fn stream(
            self,
        ) -> gax::paginator::Paginator<crate::model::ListUsableSubnetworksResponse, gax::error::Error>
        {
            let token = gax::paginator::extract_token(&self.0.request.page_token);
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListUsableSubnetworksRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [filter][crate::model::ListUsableSubnetworksRequest::filter].
        pub fn set_filter<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListUsableSubnetworksRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListUsableSubnetworksRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListUsableSubnetworks {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ClusterManager::check_autopilot_compatibility call.
    #[derive(Clone, Debug)]
    pub struct CheckAutopilotCompatibility(
        RequestBuilder<crate::model::CheckAutopilotCompatibilityRequest>,
    );

    impl CheckAutopilotCompatibility {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ClusterManager>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CheckAutopilotCompatibilityRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::CheckAutopilotCompatibilityResponse> {
            (*self.0.stub)
                .check_autopilot_compatibility(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::CheckAutopilotCompatibilityRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CheckAutopilotCompatibility {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }
}
