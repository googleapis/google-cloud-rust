// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

/// A dyn-compatible, crate-private version of `ClusterManager`.
#[async_trait::async_trait]
pub trait ClusterManager: std::fmt::Debug + Send + Sync {
    async fn list_clusters(
        &self,
        req: crate::model::ListClustersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListClustersResponse>;

    async fn get_cluster(
        &self,
        req: crate::model::GetClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Cluster>;

    async fn create_cluster(
        &self,
        req: crate::model::CreateClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn update_cluster(
        &self,
        req: crate::model::UpdateClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn update_node_pool(
        &self,
        req: crate::model::UpdateNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn set_node_pool_autoscaling(
        &self,
        req: crate::model::SetNodePoolAutoscalingRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn set_logging_service(
        &self,
        req: crate::model::SetLoggingServiceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn set_monitoring_service(
        &self,
        req: crate::model::SetMonitoringServiceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn set_addons_config(
        &self,
        req: crate::model::SetAddonsConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn set_locations(
        &self,
        req: crate::model::SetLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn update_master(
        &self,
        req: crate::model::UpdateMasterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn set_master_auth(
        &self,
        req: crate::model::SetMasterAuthRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn delete_cluster(
        &self,
        req: crate::model::DeleteClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn list_operations(
        &self,
        req: crate::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListOperationsResponse>;

    async fn get_operation(
        &self,
        req: crate::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn cancel_operation(
        &self,
        req: crate::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    async fn get_server_config(
        &self,
        req: crate::model::GetServerConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ServerConfig>;

    async fn get_json_web_keys(
        &self,
        req: crate::model::GetJSONWebKeysRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GetJSONWebKeysResponse>;

    async fn list_node_pools(
        &self,
        req: crate::model::ListNodePoolsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListNodePoolsResponse>;

    async fn get_node_pool(
        &self,
        req: crate::model::GetNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::NodePool>;

    async fn create_node_pool(
        &self,
        req: crate::model::CreateNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn delete_node_pool(
        &self,
        req: crate::model::DeleteNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn complete_node_pool_upgrade(
        &self,
        req: crate::model::CompleteNodePoolUpgradeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    async fn rollback_node_pool_upgrade(
        &self,
        req: crate::model::RollbackNodePoolUpgradeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn set_node_pool_management(
        &self,
        req: crate::model::SetNodePoolManagementRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn set_labels(
        &self,
        req: crate::model::SetLabelsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn set_legacy_abac(
        &self,
        req: crate::model::SetLegacyAbacRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn start_ip_rotation(
        &self,
        req: crate::model::StartIPRotationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn complete_ip_rotation(
        &self,
        req: crate::model::CompleteIPRotationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn set_node_pool_size(
        &self,
        req: crate::model::SetNodePoolSizeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn set_network_policy(
        &self,
        req: crate::model::SetNetworkPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn set_maintenance_policy(
        &self,
        req: crate::model::SetMaintenancePolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation>;

    async fn list_usable_subnetworks(
        &self,
        req: crate::model::ListUsableSubnetworksRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListUsableSubnetworksResponse>;

    async fn check_autopilot_compatibility(
        &self,
        req: crate::model::CheckAutopilotCompatibilityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CheckAutopilotCompatibilityResponse>;
}

/// All implementations of [crate::stubs::ClusterManager] also implement [ClusterManager].
#[async_trait::async_trait]
impl<T: crate::stubs::ClusterManager> ClusterManager for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn list_clusters(
        &self,
        req: crate::model::ListClustersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListClustersResponse> {
        T::list_clusters(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_cluster(
        &self,
        req: crate::model::GetClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Cluster> {
        T::get_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_cluster(
        &self,
        req: crate::model::CreateClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::create_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_cluster(
        &self,
        req: crate::model::UpdateClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::update_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_node_pool(
        &self,
        req: crate::model::UpdateNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::update_node_pool(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_node_pool_autoscaling(
        &self,
        req: crate::model::SetNodePoolAutoscalingRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::set_node_pool_autoscaling(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_logging_service(
        &self,
        req: crate::model::SetLoggingServiceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::set_logging_service(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_monitoring_service(
        &self,
        req: crate::model::SetMonitoringServiceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::set_monitoring_service(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_addons_config(
        &self,
        req: crate::model::SetAddonsConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::set_addons_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_locations(
        &self,
        req: crate::model::SetLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::set_locations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_master(
        &self,
        req: crate::model::UpdateMasterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::update_master(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_master_auth(
        &self,
        req: crate::model::SetMasterAuthRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::set_master_auth(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_cluster(
        &self,
        req: crate::model::DeleteClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::delete_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: crate::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListOperationsResponse> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: crate::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: crate::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::cancel_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_server_config(
        &self,
        req: crate::model::GetServerConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ServerConfig> {
        T::get_server_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_json_web_keys(
        &self,
        req: crate::model::GetJSONWebKeysRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GetJSONWebKeysResponse> {
        T::get_json_web_keys(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_node_pools(
        &self,
        req: crate::model::ListNodePoolsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListNodePoolsResponse> {
        T::list_node_pools(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_node_pool(
        &self,
        req: crate::model::GetNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::NodePool> {
        T::get_node_pool(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_node_pool(
        &self,
        req: crate::model::CreateNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::create_node_pool(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_node_pool(
        &self,
        req: crate::model::DeleteNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::delete_node_pool(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn complete_node_pool_upgrade(
        &self,
        req: crate::model::CompleteNodePoolUpgradeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::complete_node_pool_upgrade(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn rollback_node_pool_upgrade(
        &self,
        req: crate::model::RollbackNodePoolUpgradeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::rollback_node_pool_upgrade(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_node_pool_management(
        &self,
        req: crate::model::SetNodePoolManagementRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::set_node_pool_management(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_labels(
        &self,
        req: crate::model::SetLabelsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::set_labels(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_legacy_abac(
        &self,
        req: crate::model::SetLegacyAbacRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::set_legacy_abac(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn start_ip_rotation(
        &self,
        req: crate::model::StartIPRotationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::start_ip_rotation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn complete_ip_rotation(
        &self,
        req: crate::model::CompleteIPRotationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::complete_ip_rotation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_node_pool_size(
        &self,
        req: crate::model::SetNodePoolSizeRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::set_node_pool_size(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_network_policy(
        &self,
        req: crate::model::SetNetworkPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::set_network_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_maintenance_policy(
        &self,
        req: crate::model::SetMaintenancePolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Operation> {
        T::set_maintenance_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_usable_subnetworks(
        &self,
        req: crate::model::ListUsableSubnetworksRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListUsableSubnetworksResponse> {
        T::list_usable_subnetworks(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn check_autopilot_compatibility(
        &self,
        req: crate::model::CheckAutopilotCompatibilityRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CheckAutopilotCompatibilityResponse> {
        T::check_autopilot_compatibility(self, req, options).await
    }
}
