// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Container Analysis API.
///
/// # Service Description
///
/// [Grafeas](https://grafeas.io) API.
///
/// Retrieves analysis results of Cloud components such as Docker container
/// images.
///
/// Analysis results are stored as a series of occurrences. An `Occurrence`
/// contains information about a specific analysis instance on a resource. An
/// occurrence refers to a `Note`. A note contains details describing the
/// analysis and is generally stored in a separate project, called a `Provider`.
/// Multiple occurrences can refer to the same note.
///
/// For example, an SSL vulnerability could affect multiple images. In this case,
/// there would be one note for the vulnerability and an occurrence for each
/// image with the vulnerability referring to that note.
///
/// # Configuration
///
/// `Grafeas` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Grafeas` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Grafeas` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Grafeas {
    inner: Arc<dyn crate::stubs::dynamic::Grafeas>,
}

impl Grafeas {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Grafeas + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Grafeas>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Grafeas> {
        crate::transport::Grafeas::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Grafeas> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Grafeas::new)
    }

    /// Gets the specified occurrence.
    pub fn get_occurrence(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::grafeas::GetOccurrence {
        crate::builders::grafeas::GetOccurrence::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists occurrences for the specified project.
    pub fn list_occurrences(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::grafeas::ListOccurrences {
        crate::builders::grafeas::ListOccurrences::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Deletes the specified occurrence. For example, use this method to delete an
    /// occurrence when the occurrence is no longer applicable for the given
    /// resource.
    pub fn delete_occurrence(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::grafeas::DeleteOccurrence {
        crate::builders::grafeas::DeleteOccurrence::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a new occurrence.
    pub fn create_occurrence(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::grafeas::CreateOccurrence {
        crate::builders::grafeas::CreateOccurrence::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates new occurrences in batch.
    pub fn batch_create_occurrences(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::grafeas::BatchCreateOccurrences {
        crate::builders::grafeas::BatchCreateOccurrences::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the specified occurrence.
    pub fn update_occurrence(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::grafeas::UpdateOccurrence {
        crate::builders::grafeas::UpdateOccurrence::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets the note attached to the specified occurrence. Consumer projects can
    /// use this method to get a note that belongs to a provider project.
    pub fn get_occurrence_note(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::grafeas::GetOccurrenceNote {
        crate::builders::grafeas::GetOccurrenceNote::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets the specified note.
    pub fn get_note(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::grafeas::GetNote {
        crate::builders::grafeas::GetNote::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists notes for the specified project.
    pub fn list_notes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::grafeas::ListNotes {
        crate::builders::grafeas::ListNotes::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Deletes the specified note.
    pub fn delete_note(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::grafeas::DeleteNote {
        crate::builders::grafeas::DeleteNote::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a new note.
    pub fn create_note(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::grafeas::CreateNote {
        crate::builders::grafeas::CreateNote::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Creates new notes in batch.
    pub fn batch_create_notes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::grafeas::BatchCreateNotes {
        crate::builders::grafeas::BatchCreateNotes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the specified note.
    pub fn update_note(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::grafeas::UpdateNote {
        crate::builders::grafeas::UpdateNote::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists occurrences referencing the specified note. Provider projects can use
    /// this method to get all occurrences across consumer projects referencing the
    /// specified note.
    pub fn list_note_occurrences(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::grafeas::ListNoteOccurrences {
        crate::builders::grafeas::ListNoteOccurrences::new(self.inner.clone()).set_name(name.into())
    }
}
