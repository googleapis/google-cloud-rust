// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [StorageTransferService](super::stubs::StorageTransferService) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct StorageTransferService<T>
where
    T: super::stubs::StorageTransferService + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> StorageTransferService<T>
where
    T: super::stubs::StorageTransferService + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stubs::StorageTransferService for StorageTransferService<T>
where
    T: super::stubs::StorageTransferService + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn get_google_service_account(
        &self,
        req: crate::model::GetGoogleServiceAccountRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::GoogleServiceAccount> {
        self.inner.get_google_service_account(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_transfer_job(
        &self,
        req: crate::model::CreateTransferJobRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::TransferJob> {
        self.inner.create_transfer_job(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_transfer_job(
        &self,
        req: crate::model::UpdateTransferJobRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::TransferJob> {
        self.inner.update_transfer_job(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_transfer_job(
        &self,
        req: crate::model::GetTransferJobRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::TransferJob> {
        self.inner.get_transfer_job(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_transfer_jobs(
        &self,
        req: crate::model::ListTransferJobsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListTransferJobsResponse> {
        self.inner.list_transfer_jobs(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn pause_transfer_operation(
        &self,
        req: crate::model::PauseTransferOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.pause_transfer_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn resume_transfer_operation(
        &self,
        req: crate::model::ResumeTransferOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.resume_transfer_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn run_transfer_job(
        &self,
        req: crate::model::RunTransferJobRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.run_transfer_job(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_transfer_job(
        &self,
        req: crate::model::DeleteTransferJobRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.delete_transfer_job(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_agent_pool(
        &self,
        req: crate::model::CreateAgentPoolRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::AgentPool> {
        self.inner.create_agent_pool(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_agent_pool(
        &self,
        req: crate::model::UpdateAgentPoolRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::AgentPool> {
        self.inner.update_agent_pool(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_agent_pool(
        &self,
        req: crate::model::GetAgentPoolRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::AgentPool> {
        self.inner.get_agent_pool(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_agent_pools(
        &self,
        req: crate::model::ListAgentPoolsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListAgentPoolsResponse> {
        self.inner.list_agent_pools(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_agent_pool(
        &self,
        req: crate::model::DeleteAgentPoolRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.delete_agent_pool(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::ListOperationsResponse> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.get_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.cancel_operation(req, options).await
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        self.inner.get_polling_error_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}
