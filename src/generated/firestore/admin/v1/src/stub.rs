// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::FirestoreAdmin].
///
/// Application developers may need to implement this trait to mock
/// `client::FirestoreAdmin`.  In other use-cases, application developers only
/// use `client::FirestoreAdmin` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait FirestoreAdmin: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::FirestoreAdmin::create_index].
    fn create_index(
        &self,
        _req: crate::model::CreateIndexRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::FirestoreAdmin::list_indexes].
    fn list_indexes(
        &self,
        _req: crate::model::ListIndexesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListIndexesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListIndexesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::FirestoreAdmin::get_index].
    fn get_index(
        &self,
        _req: crate::model::GetIndexRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Index>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Index>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::FirestoreAdmin::delete_index].
    fn delete_index(
        &self,
        _req: crate::model::DeleteIndexRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::FirestoreAdmin::get_field].
    fn get_field(
        &self,
        _req: crate::model::GetFieldRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Field>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Field>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::FirestoreAdmin::update_field].
    fn update_field(
        &self,
        _req: crate::model::UpdateFieldRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::FirestoreAdmin::list_fields].
    fn list_fields(
        &self,
        _req: crate::model::ListFieldsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListFieldsResponse>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ListFieldsResponse>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::FirestoreAdmin::export_documents].
    fn export_documents(
        &self,
        _req: crate::model::ExportDocumentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::FirestoreAdmin::import_documents].
    fn import_documents(
        &self,
        _req: crate::model::ImportDocumentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::FirestoreAdmin::bulk_delete_documents].
    fn bulk_delete_documents(
        &self,
        _req: crate::model::BulkDeleteDocumentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::FirestoreAdmin::create_database].
    fn create_database(
        &self,
        _req: crate::model::CreateDatabaseRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::FirestoreAdmin::get_database].
    fn get_database(
        &self,
        _req: crate::model::GetDatabaseRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Database>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Database>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::FirestoreAdmin::list_databases].
    fn list_databases(
        &self,
        _req: crate::model::ListDatabasesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListDatabasesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListDatabasesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::FirestoreAdmin::update_database].
    fn update_database(
        &self,
        _req: crate::model::UpdateDatabaseRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::FirestoreAdmin::delete_database].
    fn delete_database(
        &self,
        _req: crate::model::DeleteDatabaseRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::FirestoreAdmin::create_user_creds].
    fn create_user_creds(
        &self,
        _req: crate::model::CreateUserCredsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::UserCreds>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::UserCreds>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::FirestoreAdmin::get_user_creds].
    fn get_user_creds(
        &self,
        _req: crate::model::GetUserCredsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::UserCreds>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::UserCreds>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::FirestoreAdmin::list_user_creds].
    fn list_user_creds(
        &self,
        _req: crate::model::ListUserCredsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListUserCredsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListUserCredsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::FirestoreAdmin::enable_user_creds].
    fn enable_user_creds(
        &self,
        _req: crate::model::EnableUserCredsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::UserCreds>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::UserCreds>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::FirestoreAdmin::disable_user_creds].
    fn disable_user_creds(
        &self,
        _req: crate::model::DisableUserCredsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::UserCreds>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::UserCreds>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::FirestoreAdmin::reset_user_password].
    fn reset_user_password(
        &self,
        _req: crate::model::ResetUserPasswordRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::UserCreds>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::UserCreds>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::FirestoreAdmin::delete_user_creds].
    fn delete_user_creds(
        &self,
        _req: crate::model::DeleteUserCredsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::FirestoreAdmin::get_backup].
    fn get_backup(
        &self,
        _req: crate::model::GetBackupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Backup>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Backup>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::FirestoreAdmin::list_backups].
    fn list_backups(
        &self,
        _req: crate::model::ListBackupsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListBackupsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListBackupsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::FirestoreAdmin::delete_backup].
    fn delete_backup(
        &self,
        _req: crate::model::DeleteBackupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::FirestoreAdmin::restore_database].
    fn restore_database(
        &self,
        _req: crate::model::RestoreDatabaseRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::FirestoreAdmin::create_backup_schedule].
    fn create_backup_schedule(
        &self,
        _req: crate::model::CreateBackupScheduleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::BackupSchedule>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::BackupSchedule>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::FirestoreAdmin::get_backup_schedule].
    fn get_backup_schedule(
        &self,
        _req: crate::model::GetBackupScheduleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::BackupSchedule>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::BackupSchedule>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::FirestoreAdmin::list_backup_schedules].
    fn list_backup_schedules(
        &self,
        _req: crate::model::ListBackupSchedulesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListBackupSchedulesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListBackupSchedulesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::FirestoreAdmin::update_backup_schedule].
    fn update_backup_schedule(
        &self,
        _req: crate::model::UpdateBackupScheduleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::BackupSchedule>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::BackupSchedule>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::FirestoreAdmin::delete_backup_schedule].
    fn delete_backup_schedule(
        &self,
        _req: crate::model::DeleteBackupScheduleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::FirestoreAdmin::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::FirestoreAdmin::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::FirestoreAdmin::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::FirestoreAdmin::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        std::sync::Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        std::sync::Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
