// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use crate::Result;
use std::sync::Arc;

/// An implementation of [crate::traits::SecretManagerService] to make requests with.
///
/// `SecretManagerService` has various configuration parameters, but the defaults
/// are set to work with most applications.
///
/// `SecretManagerService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SecretManagerService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
///
/// Stores sensitive data such as API keys, passwords, and certificates.
/// Provides convenience while improving security.
#[derive(Clone, Debug)]
pub struct SecretManagerService {
    inner: Arc<dyn crate::traits::dyntraits::SecretManagerService>,
}

impl SecretManagerService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(crate::ConfigBuilder::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: crate::ConfigBuilder) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::traits::SecretManagerService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: crate::ConfigBuilder,
    ) -> Result<Arc<dyn crate::traits::dyntraits::SecretManagerService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: crate::ConfigBuilder,
    ) -> Result<impl crate::traits::SecretManagerService> {
        crate::transport::SecretManagerService::new(conf).await
    }

    async fn build_with_tracing(
        conf: crate::ConfigBuilder,
    ) -> Result<impl crate::traits::SecretManagerService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::SecretManagerService::new)
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations<IntoProject>(
        &self,
        project: IntoProject,
    ) -> crate::builders::ListLocations
    where
        IntoProject: Into<String>,
    {
        crate::builders::ListLocations::new(self.inner.clone()).set_project(project.into())
    }

    /// Gets information about a location.
    pub fn get_location<IntoProject, IntoLocation>(
        &self,
        project: IntoProject,
        location: IntoLocation,
    ) -> crate::builders::GetLocation
    where
        IntoProject: Into<String>,
        IntoLocation: Into<String>,
    {
        crate::builders::GetLocation::new(self.inner.clone())
            .set_project(project.into())
            .set_location(location.into())
    }

    /// Lists Secrets.
    pub fn list_secrets<IntoProject>(&self, project: IntoProject) -> crate::builders::ListSecrets
    where
        IntoProject: Into<String>,
    {
        crate::builders::ListSecrets::new(self.inner.clone()).set_project(project.into())
    }

    /// Creates a new Secret containing no SecretVersions.
    pub fn create_secret<IntoProject>(&self, project: IntoProject) -> crate::builders::CreateSecret
    where
        IntoProject: Into<String>,
    {
        crate::builders::CreateSecret::new(self.inner.clone()).set_project(project.into())
    }

    /// Lists Secrets.
    pub fn list_secrets_by_project_and_location<IntoProject, IntoLocation>(
        &self,
        project: IntoProject,
        location: IntoLocation,
    ) -> crate::builders::ListSecretsByProjectAndLocation
    where
        IntoProject: Into<String>,
        IntoLocation: Into<String>,
    {
        crate::builders::ListSecretsByProjectAndLocation::new(self.inner.clone())
            .set_project(project.into())
            .set_location(location.into())
    }

    /// Creates a new Secret containing no SecretVersions.
    pub fn create_secret_by_project_and_location<IntoProject, IntoLocation>(
        &self,
        project: IntoProject,
        location: IntoLocation,
    ) -> crate::builders::CreateSecretByProjectAndLocation
    where
        IntoProject: Into<String>,
        IntoLocation: Into<String>,
    {
        crate::builders::CreateSecretByProjectAndLocation::new(self.inner.clone())
            .set_project(project.into())
            .set_location(location.into())
    }

    /// Creates a new SecretVersion containing secret data and attaches
    /// it to an existing Secret.
    pub fn add_secret_version<IntoProject, IntoSecret>(
        &self,
        project: IntoProject,
        secret: IntoSecret,
    ) -> crate::builders::AddSecretVersion
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
    {
        crate::builders::AddSecretVersion::new(self.inner.clone())
            .set_project(project.into())
            .set_secret(secret.into())
    }

    /// Creates a new SecretVersion containing secret data and attaches
    /// it to an existing Secret.
    pub fn add_secret_version_by_project_and_location_and_secret<
        IntoProject,
        IntoSecret,
        IntoLocation,
    >(
        &self,
        project: IntoProject,
        secret: IntoSecret,
        location: IntoLocation,
    ) -> crate::builders::AddSecretVersionByProjectAndLocationAndSecret
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
        IntoLocation: Into<String>,
    {
        crate::builders::AddSecretVersionByProjectAndLocationAndSecret::new(self.inner.clone())
            .set_project(project.into())
            .set_secret(secret.into())
            .set_location(location.into())
    }

    /// Gets metadata for a given Secret.
    pub fn get_secret<IntoProject, IntoSecret>(
        &self,
        project: IntoProject,
        secret: IntoSecret,
    ) -> crate::builders::GetSecret
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
    {
        crate::builders::GetSecret::new(self.inner.clone())
            .set_project(project.into())
            .set_secret(secret.into())
    }

    /// Deletes a Secret.
    pub fn delete_secret<IntoProject, IntoSecret>(
        &self,
        project: IntoProject,
        secret: IntoSecret,
    ) -> crate::builders::DeleteSecret
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
    {
        crate::builders::DeleteSecret::new(self.inner.clone())
            .set_project(project.into())
            .set_secret(secret.into())
    }

    /// Updates metadata of an existing Secret.
    pub fn update_secret<IntoProject, IntoSecret>(
        &self,
        project: IntoProject,
        secret: IntoSecret,
    ) -> crate::builders::UpdateSecret
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
    {
        crate::builders::UpdateSecret::new(self.inner.clone())
            .set_project(project.into())
            .set_secret(secret.into())
    }

    /// Gets metadata for a given Secret.
    pub fn get_secret_by_project_and_location_and_secret<IntoProject, IntoLocation, IntoSecret>(
        &self,
        project: IntoProject,
        location: IntoLocation,
        secret: IntoSecret,
    ) -> crate::builders::GetSecretByProjectAndLocationAndSecret
    where
        IntoProject: Into<String>,
        IntoLocation: Into<String>,
        IntoSecret: Into<String>,
    {
        crate::builders::GetSecretByProjectAndLocationAndSecret::new(self.inner.clone())
            .set_project(project.into())
            .set_location(location.into())
            .set_secret(secret.into())
    }

    /// Deletes a Secret.
    pub fn delete_secret_by_project_and_location_and_secret<IntoProject, IntoLocation, IntoSecret>(
        &self,
        project: IntoProject,
        location: IntoLocation,
        secret: IntoSecret,
    ) -> crate::builders::DeleteSecretByProjectAndLocationAndSecret
    where
        IntoProject: Into<String>,
        IntoLocation: Into<String>,
        IntoSecret: Into<String>,
    {
        crate::builders::DeleteSecretByProjectAndLocationAndSecret::new(self.inner.clone())
            .set_project(project.into())
            .set_location(location.into())
            .set_secret(secret.into())
    }

    /// Updates metadata of an existing Secret.
    pub fn update_secret_by_project_and_location_and_secret<IntoProject, IntoLocation, IntoSecret>(
        &self,
        project: IntoProject,
        location: IntoLocation,
        secret: IntoSecret,
    ) -> crate::builders::UpdateSecretByProjectAndLocationAndSecret
    where
        IntoProject: Into<String>,
        IntoLocation: Into<String>,
        IntoSecret: Into<String>,
    {
        crate::builders::UpdateSecretByProjectAndLocationAndSecret::new(self.inner.clone())
            .set_project(project.into())
            .set_location(location.into())
            .set_secret(secret.into())
    }

    /// Lists SecretVersions. This call does not return secret
    /// data.
    pub fn list_secret_versions<IntoProject, IntoSecret>(
        &self,
        project: IntoProject,
        secret: IntoSecret,
    ) -> crate::builders::ListSecretVersions
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
    {
        crate::builders::ListSecretVersions::new(self.inner.clone())
            .set_project(project.into())
            .set_secret(secret.into())
    }

    /// Lists SecretVersions. This call does not return secret
    /// data.
    pub fn list_secret_versions_by_project_and_location_and_secret<
        IntoProject,
        IntoLocation,
        IntoSecret,
    >(
        &self,
        project: IntoProject,
        location: IntoLocation,
        secret: IntoSecret,
    ) -> crate::builders::ListSecretVersionsByProjectAndLocationAndSecret
    where
        IntoProject: Into<String>,
        IntoLocation: Into<String>,
        IntoSecret: Into<String>,
    {
        crate::builders::ListSecretVersionsByProjectAndLocationAndSecret::new(self.inner.clone())
            .set_project(project.into())
            .set_location(location.into())
            .set_secret(secret.into())
    }

    /// Gets metadata for a SecretVersion.
    ///
    /// `projects/_*_/secrets/_*_/versions/latest` is an alias to the most recently
    /// created SecretVersion.
    pub fn get_secret_version<IntoProject, IntoSecret, IntoVersion>(
        &self,
        project: IntoProject,
        secret: IntoSecret,
        version: IntoVersion,
    ) -> crate::builders::GetSecretVersion
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
        IntoVersion: Into<String>,
    {
        crate::builders::GetSecretVersion::new(self.inner.clone())
            .set_project(project.into())
            .set_secret(secret.into())
            .set_version(version.into())
    }

    /// Gets metadata for a SecretVersion.
    ///
    /// `projects/_*_/secrets/_*_/versions/latest` is an alias to the most recently
    /// created SecretVersion.
    pub fn get_secret_version_by_project_and_location_and_secret_and_version<
        IntoProject,
        IntoLocation,
        IntoSecret,
        IntoVersion,
    >(
        &self,
        project: IntoProject,
        location: IntoLocation,
        secret: IntoSecret,
        version: IntoVersion,
    ) -> crate::builders::GetSecretVersionByProjectAndLocationAndSecretAndVersion
    where
        IntoProject: Into<String>,
        IntoLocation: Into<String>,
        IntoSecret: Into<String>,
        IntoVersion: Into<String>,
    {
        crate::builders::GetSecretVersionByProjectAndLocationAndSecretAndVersion::new(
            self.inner.clone(),
        )
        .set_project(project.into())
        .set_location(location.into())
        .set_secret(secret.into())
        .set_version(version.into())
    }

    /// Accesses a SecretVersion. This call returns the secret data.
    ///
    /// `projects/_*_/secrets/_*_/versions/latest` is an alias to the most recently
    /// created SecretVersion.
    pub fn access_secret_version<IntoProject, IntoSecret, IntoVersion>(
        &self,
        project: IntoProject,
        secret: IntoSecret,
        version: IntoVersion,
    ) -> crate::builders::AccessSecretVersion
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
        IntoVersion: Into<String>,
    {
        crate::builders::AccessSecretVersion::new(self.inner.clone())
            .set_project(project.into())
            .set_secret(secret.into())
            .set_version(version.into())
    }

    /// Accesses a SecretVersion. This call returns the secret data.
    ///
    /// `projects/_*_/secrets/_*_/versions/latest` is an alias to the most recently
    /// created SecretVersion.
    pub fn access_secret_version_by_project_and_location_and_secret_and_version<
        IntoProject,
        IntoLocation,
        IntoSecret,
        IntoVersion,
    >(
        &self,
        project: IntoProject,
        location: IntoLocation,
        secret: IntoSecret,
        version: IntoVersion,
    ) -> crate::builders::AccessSecretVersionByProjectAndLocationAndSecretAndVersion
    where
        IntoProject: Into<String>,
        IntoLocation: Into<String>,
        IntoSecret: Into<String>,
        IntoVersion: Into<String>,
    {
        crate::builders::AccessSecretVersionByProjectAndLocationAndSecretAndVersion::new(
            self.inner.clone(),
        )
        .set_project(project.into())
        .set_location(location.into())
        .set_secret(secret.into())
        .set_version(version.into())
    }

    /// Disables a SecretVersion.
    ///
    /// Sets the state of the SecretVersion to
    /// DISABLED.
    pub fn disable_secret_version<IntoProject, IntoSecret, IntoVersion>(
        &self,
        project: IntoProject,
        secret: IntoSecret,
        version: IntoVersion,
    ) -> crate::builders::DisableSecretVersion
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
        IntoVersion: Into<String>,
    {
        crate::builders::DisableSecretVersion::new(self.inner.clone())
            .set_project(project.into())
            .set_secret(secret.into())
            .set_version(version.into())
    }

    /// Disables a SecretVersion.
    ///
    /// Sets the state of the SecretVersion to
    /// DISABLED.
    pub fn disable_secret_version_by_project_and_location_and_secret_and_version<
        IntoProject,
        IntoSecret,
        IntoVersion,
        IntoLocation,
    >(
        &self,
        project: IntoProject,
        secret: IntoSecret,
        version: IntoVersion,
        location: IntoLocation,
    ) -> crate::builders::DisableSecretVersionByProjectAndLocationAndSecretAndVersion
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
        IntoVersion: Into<String>,
        IntoLocation: Into<String>,
    {
        crate::builders::DisableSecretVersionByProjectAndLocationAndSecretAndVersion::new(
            self.inner.clone(),
        )
        .set_project(project.into())
        .set_secret(secret.into())
        .set_version(version.into())
        .set_location(location.into())
    }

    /// Enables a SecretVersion.
    ///
    /// Sets the state of the SecretVersion to
    /// ENABLED.
    pub fn enable_secret_version<IntoProject, IntoSecret, IntoVersion>(
        &self,
        project: IntoProject,
        secret: IntoSecret,
        version: IntoVersion,
    ) -> crate::builders::EnableSecretVersion
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
        IntoVersion: Into<String>,
    {
        crate::builders::EnableSecretVersion::new(self.inner.clone())
            .set_project(project.into())
            .set_secret(secret.into())
            .set_version(version.into())
    }

    /// Enables a SecretVersion.
    ///
    /// Sets the state of the SecretVersion to
    /// ENABLED.
    pub fn enable_secret_version_by_project_and_location_and_secret_and_version<
        IntoProject,
        IntoSecret,
        IntoVersion,
        IntoLocation,
    >(
        &self,
        project: IntoProject,
        secret: IntoSecret,
        version: IntoVersion,
        location: IntoLocation,
    ) -> crate::builders::EnableSecretVersionByProjectAndLocationAndSecretAndVersion
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
        IntoVersion: Into<String>,
        IntoLocation: Into<String>,
    {
        crate::builders::EnableSecretVersionByProjectAndLocationAndSecretAndVersion::new(
            self.inner.clone(),
        )
        .set_project(project.into())
        .set_secret(secret.into())
        .set_version(version.into())
        .set_location(location.into())
    }

    /// Destroys a SecretVersion.
    ///
    /// Sets the state of the SecretVersion to
    /// DESTROYED and irrevocably destroys the
    /// secret data.
    pub fn destroy_secret_version<IntoProject, IntoSecret, IntoVersion>(
        &self,
        project: IntoProject,
        secret: IntoSecret,
        version: IntoVersion,
    ) -> crate::builders::DestroySecretVersion
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
        IntoVersion: Into<String>,
    {
        crate::builders::DestroySecretVersion::new(self.inner.clone())
            .set_project(project.into())
            .set_secret(secret.into())
            .set_version(version.into())
    }

    /// Destroys a SecretVersion.
    ///
    /// Sets the state of the SecretVersion to
    /// DESTROYED and irrevocably destroys the
    /// secret data.
    pub fn destroy_secret_version_by_project_and_location_and_secret_and_version<
        IntoProject,
        IntoSecret,
        IntoVersion,
        IntoLocation,
    >(
        &self,
        project: IntoProject,
        secret: IntoSecret,
        version: IntoVersion,
        location: IntoLocation,
    ) -> crate::builders::DestroySecretVersionByProjectAndLocationAndSecretAndVersion
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
        IntoVersion: Into<String>,
        IntoLocation: Into<String>,
    {
        crate::builders::DestroySecretVersionByProjectAndLocationAndSecretAndVersion::new(
            self.inner.clone(),
        )
        .set_project(project.into())
        .set_secret(secret.into())
        .set_version(version.into())
        .set_location(location.into())
    }

    /// Sets the access control policy on the specified secret. Replaces any
    /// existing policy.
    ///
    /// Permissions on SecretVersions are enforced according
    /// to the policy set on the associated Secret.
    pub fn set_iam_policy<IntoProject, IntoSecret>(
        &self,
        project: IntoProject,
        secret: IntoSecret,
    ) -> crate::builders::SetIamPolicy
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
    {
        crate::builders::SetIamPolicy::new(self.inner.clone())
            .set_project(project.into())
            .set_secret(secret.into())
    }

    /// Sets the access control policy on the specified secret. Replaces any
    /// existing policy.
    ///
    /// Permissions on SecretVersions are enforced according
    /// to the policy set on the associated Secret.
    pub fn set_iam_policy_by_project_and_location_and_secret<
        IntoProject,
        IntoSecret,
        IntoLocation,
    >(
        &self,
        project: IntoProject,
        secret: IntoSecret,
        location: IntoLocation,
    ) -> crate::builders::SetIamPolicyByProjectAndLocationAndSecret
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
        IntoLocation: Into<String>,
    {
        crate::builders::SetIamPolicyByProjectAndLocationAndSecret::new(self.inner.clone())
            .set_project(project.into())
            .set_secret(secret.into())
            .set_location(location.into())
    }

    /// Gets the access control policy for a secret.
    /// Returns empty policy if the secret exists and does not have a policy set.
    pub fn get_iam_policy<IntoProject, IntoSecret>(
        &self,
        project: IntoProject,
        secret: IntoSecret,
    ) -> crate::builders::GetIamPolicy
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
    {
        crate::builders::GetIamPolicy::new(self.inner.clone())
            .set_project(project.into())
            .set_secret(secret.into())
    }

    /// Gets the access control policy for a secret.
    /// Returns empty policy if the secret exists and does not have a policy set.
    pub fn get_iam_policy_by_project_and_location_and_secret<
        IntoProject,
        IntoLocation,
        IntoSecret,
    >(
        &self,
        project: IntoProject,
        location: IntoLocation,
        secret: IntoSecret,
    ) -> crate::builders::GetIamPolicyByProjectAndLocationAndSecret
    where
        IntoProject: Into<String>,
        IntoLocation: Into<String>,
        IntoSecret: Into<String>,
    {
        crate::builders::GetIamPolicyByProjectAndLocationAndSecret::new(self.inner.clone())
            .set_project(project.into())
            .set_location(location.into())
            .set_secret(secret.into())
    }

    /// Returns permissions that a caller has for the specified secret.
    /// If the secret does not exist, this call returns an empty set of
    /// permissions, not a NOT_FOUND error.
    ///
    /// Note: This operation is designed to be used for building permission-aware
    /// UIs and command-line tools, not for authorization checking. This operation
    /// may "fail open" without warning.
    pub fn test_iam_permissions<IntoProject, IntoSecret>(
        &self,
        project: IntoProject,
        secret: IntoSecret,
    ) -> crate::builders::TestIamPermissions
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
    {
        crate::builders::TestIamPermissions::new(self.inner.clone())
            .set_project(project.into())
            .set_secret(secret.into())
    }

    /// Returns permissions that a caller has for the specified secret.
    /// If the secret does not exist, this call returns an empty set of
    /// permissions, not a NOT_FOUND error.
    ///
    /// Note: This operation is designed to be used for building permission-aware
    /// UIs and command-line tools, not for authorization checking. This operation
    /// may "fail open" without warning.
    pub fn test_iam_permissions_by_project_and_location_and_secret<
        IntoProject,
        IntoSecret,
        IntoLocation,
    >(
        &self,
        project: IntoProject,
        secret: IntoSecret,
        location: IntoLocation,
    ) -> crate::builders::TestIamPermissionsByProjectAndLocationAndSecret
    where
        IntoProject: Into<String>,
        IntoSecret: Into<String>,
        IntoLocation: Into<String>,
    {
        crate::builders::TestIamPermissionsByProjectAndLocationAndSecret::new(self.inner.clone())
            .set_project(project.into())
            .set_secret(secret.into())
            .set_location(location.into())
    }
}
