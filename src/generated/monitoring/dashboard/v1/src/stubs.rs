// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application responds. Such applications should define mocks that
//! implement one of the traits defined in this module, initialize the client
//! with an instance of this mock in their tests, and verify their application
//! responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Manages Stackdriver dashboards. A dashboard is an arrangement of data display
/// widgets in a specific layout.
///
/// # Mocking
///
/// Application developers may use this trait to mock the monitoring clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait DashboardsService: std::fmt::Debug + Send + Sync {
    /// Creates a new custom dashboard. For examples on how you can use this API to
    /// create dashboards, see [Managing dashboards by
    /// API](https://cloud.google.com/monitoring/dashboards/api-dashboard). This
    /// method requires the `monitoring.dashboards.create` permission on the
    /// specified project. For more information about permissions, see [Cloud
    /// Identity and Access Management](https://cloud.google.com/iam).
    fn create_dashboard(
        &self,
        _req: crate::model::CreateDashboardRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Dashboard>> + Send {
        std::future::ready::<crate::Result<crate::model::Dashboard>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Lists the existing dashboards.
    ///
    /// This method requires the `monitoring.dashboards.list` permission
    /// on the specified project. For more information, see
    /// [Cloud Identity and Access Management](https://cloud.google.com/iam).
    fn list_dashboards(
        &self,
        _req: crate::model::ListDashboardsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListDashboardsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListDashboardsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Fetches a specific dashboard.
    ///
    /// This method requires the `monitoring.dashboards.get` permission
    /// on the specified dashboard. For more information, see
    /// [Cloud Identity and Access Management](https://cloud.google.com/iam).
    fn get_dashboard(
        &self,
        _req: crate::model::GetDashboardRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Dashboard>> + Send {
        std::future::ready::<crate::Result<crate::model::Dashboard>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Deletes an existing custom dashboard.
    ///
    /// This method requires the `monitoring.dashboards.delete` permission
    /// on the specified dashboard. For more information, see
    /// [Cloud Identity and Access Management](https://cloud.google.com/iam).
    fn delete_dashboard(
        &self,
        _req: crate::model::DeleteDashboardRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Replaces an existing custom dashboard with a new definition.
    ///
    /// This method requires the `monitoring.dashboards.update` permission
    /// on the specified dashboard. For more information, see
    /// [Cloud Identity and Access Management](https://cloud.google.com/iam).
    fn update_dashboard(
        &self,
        _req: crate::model::UpdateDashboardRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Dashboard>> + Send {
        std::future::ready::<crate::Result<crate::model::Dashboard>>(Err(Error::other(
            "unimplemented",
        )))
    }
}
