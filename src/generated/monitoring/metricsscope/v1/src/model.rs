// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate lazy_static;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Represents a [Metrics
/// Scope](https://cloud.google.com/monitoring/settings#concept-scope) in Cloud
/// Monitoring, which specifies one or more Google projects and zero or more AWS
/// accounts to monitor together.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MetricsScope {
    /// Immutable. The resource name of the Monitoring Metrics Scope.
    /// On input, the resource name can be specified with the
    /// scoping project ID or number. On output, the resource name is
    /// specified with the scoping project number.
    /// Example:
    /// `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The time when this `Metrics Scope` was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time when this `Metrics Scope` record was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The list of projects monitored by this `Metrics Scope`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub monitored_projects: std::vec::Vec<crate::model::MonitoredProject>,
}

impl MetricsScope {
    /// Sets the value of [name][crate::model::MetricsScope::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::MetricsScope::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::MetricsScope::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [monitored_projects][crate::model::MetricsScope::monitored_projects].
    pub fn set_monitored_projects<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::MonitoredProject>,
    {
        use std::iter::Iterator;
        self.monitored_projects = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for MetricsScope {
    fn typename() -> &'static str {
        "type.googleapis.com/google.monitoring.metricsscope.v1.MetricsScope"
    }
}

/// A [project being
/// monitored](https://cloud.google.com/monitoring/settings/multiple-projects#create-multi)
/// by a `Metrics Scope`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MonitoredProject {
    /// Immutable. The resource name of the `MonitoredProject`. On input, the resource name
    /// includes the scoping project ID and monitored project ID. On output, it
    /// contains the equivalent project numbers.
    /// Example:
    /// `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The time when this `MonitoredProject` was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,
}

impl MonitoredProject {
    /// Sets the value of [name][crate::model::MonitoredProject::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::MonitoredProject::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }
}

impl wkt::message::Message for MonitoredProject {
    fn typename() -> &'static str {
        "type.googleapis.com/google.monitoring.metricsscope.v1.MonitoredProject"
    }
}

/// Request for the `GetMetricsScope` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetMetricsScopeRequest {
    /// Required. The resource name of the `Metrics Scope`.
    /// Example:
    /// `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetMetricsScopeRequest {
    /// Sets the value of [name][crate::model::GetMetricsScopeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetMetricsScopeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.monitoring.metricsscope.v1.GetMetricsScopeRequest"
    }
}

/// Request for the `ListMetricsScopesByMonitoredProject` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListMetricsScopesByMonitoredProjectRequest {
    /// Required. The resource name of the `Monitored Project` being requested.
    /// Example:
    /// `projects/{MONITORED_PROJECT_ID_OR_NUMBER}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub monitored_resource_container: std::string::String,
}

impl ListMetricsScopesByMonitoredProjectRequest {
    /// Sets the value of [monitored_resource_container][crate::model::ListMetricsScopesByMonitoredProjectRequest::monitored_resource_container].
    pub fn set_monitored_resource_container<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.monitored_resource_container = v.into();
        self
    }
}

impl wkt::message::Message for ListMetricsScopesByMonitoredProjectRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.monitoring.metricsscope.v1.ListMetricsScopesByMonitoredProjectRequest"
    }
}

/// Response for the `ListMetricsScopesByMonitoredProject` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListMetricsScopesByMonitoredProjectResponse {
    /// A set of all metrics scopes that the specified monitored project has been
    /// added to.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub metrics_scopes: std::vec::Vec<crate::model::MetricsScope>,
}

impl ListMetricsScopesByMonitoredProjectResponse {
    /// Sets the value of [metrics_scopes][crate::model::ListMetricsScopesByMonitoredProjectResponse::metrics_scopes].
    pub fn set_metrics_scopes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::MetricsScope>,
    {
        use std::iter::Iterator;
        self.metrics_scopes = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListMetricsScopesByMonitoredProjectResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.monitoring.metricsscope.v1.ListMetricsScopesByMonitoredProjectResponse"
    }
}

/// Request for the `CreateMonitoredProject` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateMonitoredProjectRequest {
    /// Required. The resource name of the existing `Metrics Scope` that will monitor this
    /// project.
    /// Example:
    /// `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The initial `MonitoredProject` configuration.
    /// Specify only the `monitored_project.name` field. All other fields are
    /// ignored. The `monitored_project.name` must be in the format:
    /// `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}`
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub monitored_project: std::option::Option<crate::model::MonitoredProject>,
}

impl CreateMonitoredProjectRequest {
    /// Sets the value of [parent][crate::model::CreateMonitoredProjectRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [monitored_project][crate::model::CreateMonitoredProjectRequest::monitored_project].
    pub fn set_monitored_project<
        T: std::convert::Into<std::option::Option<crate::model::MonitoredProject>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.monitored_project = v.into();
        self
    }
}

impl wkt::message::Message for CreateMonitoredProjectRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.monitoring.metricsscope.v1.CreateMonitoredProjectRequest"
    }
}

/// Request for the `DeleteMonitoredProject` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteMonitoredProjectRequest {
    /// Required. The resource name of the `MonitoredProject`.
    /// Example:
    /// `locations/global/metricsScopes/{SCOPING_PROJECT_ID_OR_NUMBER}/projects/{MONITORED_PROJECT_ID_OR_NUMBER}`
    ///
    /// Authorization requires the following [Google
    /// IAM](https://cloud.google.com/iam) permissions on both the `Metrics Scope`
    /// and on the `MonitoredProject`: `monitoring.metricsScopes.link`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteMonitoredProjectRequest {
    /// Sets the value of [name][crate::model::DeleteMonitoredProjectRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteMonitoredProjectRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.monitoring.metricsscope.v1.DeleteMonitoredProjectRequest"
    }
}

/// Contains metadata for longrunning operation for the edit Metrics Scope
/// endpoints.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OperationMetadata {
    /// Current state of the batch operation.
    pub state: crate::model::operation_metadata::State,

    /// The time when the batch request was received.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// The time when the operation result was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,
}

impl OperationMetadata {
    /// Sets the value of [state][crate::model::OperationMetadata::state].
    pub fn set_state<T: std::convert::Into<crate::model::operation_metadata::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::OperationMetadata::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }
}

impl wkt::message::Message for OperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.monitoring.metricsscope.v1.OperationMetadata"
    }
}

/// Defines additional types related to OperationMetadata
pub mod operation_metadata {
    #[allow(unused_imports)]
    use super::*;

    /// Batch operation states.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(std::borrow::Cow<'static, str>);

    impl State {
        /// Creates a new State instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [State](State)
    pub mod state {
        use super::State;

        /// Invalid.
        pub const STATE_UNSPECIFIED: State = State::new("STATE_UNSPECIFIED");

        /// Request has been received.
        pub const CREATED: State = State::new("CREATED");

        /// Request is actively being processed.
        pub const RUNNING: State = State::new("RUNNING");

        /// The batch processing is done.
        pub const DONE: State = State::new("DONE");

        /// The batch processing was cancelled.
        pub const CANCELLED: State = State::new("CANCELLED");
    }

    impl std::convert::From<std::string::String> for State {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}
