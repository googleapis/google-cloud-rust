// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Service Usage API.
///
/// # Service Description
///
/// Enables services that service consumers want to use on Google Cloud Platform,
/// lists the available or enabled services, or disables services that service
/// consumers no longer use.
///
/// See [Service Usage API](https://cloud.google.com/service-usage/docs/overview)
///
/// # Configuration
///
/// `ServiceUsage` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ServiceUsage` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ServiceUsage` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ServiceUsage {
    inner: Arc<dyn crate::stubs::dynamic::ServiceUsage>,
}

impl ServiceUsage {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::ServiceUsage + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::ServiceUsage>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ServiceUsage> {
        crate::transport::ServiceUsage::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ServiceUsage> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::ServiceUsage::new)
    }

    /// Enable a service so that it can be used with a project.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn enable_service(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::service_usage::EnableService {
        crate::builders::service_usage::EnableService::new(self.inner.clone()).set_name(name.into())
    }

    /// Disable a service so that it can no longer be used with a project.
    /// This prevents unintended usage that may cause unexpected billing
    /// charges or security leaks.
    ///
    /// It is not valid to call the disable method on a service that is not
    /// currently enabled. Callers will receive a `FAILED_PRECONDITION` status if
    /// the target service is not currently enabled.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn disable_service(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::service_usage::DisableService {
        crate::builders::service_usage::DisableService::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Returns the service configuration and enabled state for a given service.
    pub fn get_service(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::service_usage::GetService {
        crate::builders::service_usage::GetService::new(self.inner.clone()).set_name(name.into())
    }

    /// List all services available to the specified project, and the current
    /// state of those services with respect to the project. The list includes
    /// all public services, all services for which the calling user has the
    /// `servicemanagement.services.bind` permission, and all services that have
    /// already been enabled on the project. The list can be filtered to
    /// only include services in a specific state, for example to only include
    /// services enabled on the project.
    ///
    /// WARNING: If you need to query enabled services frequently or across
    /// an organization, you should use
    /// [Cloud Asset Inventory
    /// API](https://cloud.google.com/asset-inventory/docs/apis), which provides
    /// higher throughput and richer filtering capability.
    pub fn list_services(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::service_usage::ListServices {
        crate::builders::service_usage::ListServices::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Enable multiple services on a project. The operation is atomic: if enabling
    /// any service fails, then the entire batch fails, and no state changes occur.
    /// To enable a single service, use the `EnableService` method instead.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_enable_services(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::service_usage::BatchEnableServices {
        crate::builders::service_usage::BatchEnableServices::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the service configurations and enabled states for a given list of
    /// services.
    pub fn batch_get_services(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::service_usage::BatchGetServices {
        crate::builders::service_usage::BatchGetServices::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(&self) -> crate::builders::service_usage::ListOperations {
        crate::builders::service_usage::ListOperations::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::service_usage::GetOperation {
        crate::builders::service_usage::GetOperation::new(self.inner.clone()).set_name(name.into())
    }
}
