// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [CloudQuotas](super::stub::CloudQuotas) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct CloudQuotas<T>
where
    T: super::stub::CloudQuotas + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> CloudQuotas<T>
where
    T: super::stub::CloudQuotas + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stub::CloudQuotas for CloudQuotas<T>
where
    T: super::stub::CloudQuotas + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn list_quota_infos(
        &self,
        req: crate::model::ListQuotaInfosRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListQuotaInfosResponse>> {
        self.inner.list_quota_infos(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_quota_info(
        &self,
        req: crate::model::GetQuotaInfoRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::QuotaInfo>> {
        self.inner.get_quota_info(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_quota_preferences(
        &self,
        req: crate::model::ListQuotaPreferencesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListQuotaPreferencesResponse>> {
        self.inner.list_quota_preferences(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_quota_preference(
        &self,
        req: crate::model::GetQuotaPreferenceRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::QuotaPreference>> {
        self.inner.get_quota_preference(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_quota_preference(
        &self,
        req: crate::model::CreateQuotaPreferenceRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::QuotaPreference>> {
        self.inner.create_quota_preference(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_quota_preference(
        &self,
        req: crate::model::UpdateQuotaPreferenceRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::QuotaPreference>> {
        self.inner.update_quota_preference(req, options).await
    }
}
