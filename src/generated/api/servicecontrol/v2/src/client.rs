// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;

/// Implements a client for the Service Control API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_api_servicecontrol_v2::client::ServiceController;
/// let client = ServiceController::builder().build().await?;
/// // use `client` to make requests to the Service Control API.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// [Service Control API
/// v2](https://cloud.google.com/service-infrastructure/docs/service-control/access-control)
///
/// Private Preview. This feature is only available for approved services.
///
/// This API provides admission control and telemetry reporting for services
/// that are integrated with [Service
/// Infrastructure](https://cloud.google.com/service-infrastructure).
///
/// # Configuration
///
/// To configure `ServiceController` use the `with_*` methods in the type returned
/// by [builder()][ServiceController::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://servicecontrol.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::service_controller::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::service_controller::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `ServiceController` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ServiceController` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct ServiceController {
    inner: std::sync::Arc<dyn super::stub::dynamic::ServiceController>,
}

impl ServiceController {
    /// Returns a builder for [ServiceController].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_api_servicecontrol_v2::client::ServiceController;
    /// let client = ServiceController::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::service_controller::ClientBuilder {
        gax::client_builder::internal::new_builder(
            super::builder::service_controller::client::Factory,
        )
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::ServiceController + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<std::sync::Arc<dyn super::stub::dynamic::ServiceController>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::ServiceController> {
        super::transport::ServiceController::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::ServiceController> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::ServiceController::new)
    }

    /// Private Preview. This feature is only available for approved services.
    ///
    /// This method provides admission control for services that are integrated
    /// with [Service
    /// Infrastructure](https://cloud.google.com/service-infrastructure). It checks
    /// whether an operation should be allowed based on the service configuration
    /// and relevant policies. It must be called before the operation is executed.
    /// For more information, see
    /// [Admission
    /// Control](https://cloud.google.com/service-infrastructure/docs/admission-control).
    ///
    /// NOTE: The admission control has an expected policy propagation delay of
    /// 60s. The caller **must** not depend on the most recent policy changes.
    ///
    /// NOTE: The admission control has a hard limit of 1 referenced resources
    /// per call. If an operation refers to more than 1 resources, the caller
    /// must call the Check method multiple times.
    ///
    /// This method requires the `servicemanagement.services.check` permission
    /// on the specified service. For more information, see
    /// [Service Control API Access
    /// Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
    pub fn check(
        &self,
        service_name: impl Into<std::string::String>,
    ) -> super::builder::service_controller::Check {
        super::builder::service_controller::Check::new(self.inner.clone())
            .set_service_name(service_name.into())
    }

    /// Private Preview. This feature is only available for approved services.
    ///
    /// This method provides telemetry reporting for services that are integrated
    /// with [Service
    /// Infrastructure](https://cloud.google.com/service-infrastructure). It
    /// reports a list of operations that have occurred on a service. It must be
    /// called after the operations have been executed. For more information, see
    /// [Telemetry
    /// Reporting](https://cloud.google.com/service-infrastructure/docs/telemetry-reporting).
    ///
    /// NOTE: The telemetry reporting has a hard limit of 1000 operations and 1MB
    /// per Report call. It is recommended to have no more than 100 operations per
    /// call.
    ///
    /// This method requires the `servicemanagement.services.report` permission
    /// on the specified service. For more information, see
    /// [Service Control API Access
    /// Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
    pub fn report(
        &self,
        service_name: impl Into<std::string::String>,
    ) -> super::builder::service_controller::Report {
        super::builder::service_controller::Report::new(self.inner.clone())
            .set_service_name(service_name.into())
    }
}
