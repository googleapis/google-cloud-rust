// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Service Control API.
///
/// # Service Description
///
/// [Service Control API
/// v2](https://cloud.google.com/service-infrastructure/docs/service-control/access-control)
///
/// Private Preview. This feature is only available for approved services.
///
/// This API provides admission control and telemetry reporting for services
/// that are integrated with [Service
/// Infrastructure](https://cloud.google.com/service-infrastructure).
///
/// # Configuration
///
/// `ServiceController` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ServiceController` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ServiceController` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ServiceController {
    inner: Arc<dyn crate::stubs::dynamic::ServiceController>,
}

impl ServiceController {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::ServiceController + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::ServiceController>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ServiceController> {
        crate::transport::ServiceController::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ServiceController> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::ServiceController::new)
    }

    /// Private Preview. This feature is only available for approved services.
    ///
    /// This method provides admission control for services that are integrated
    /// with [Service
    /// Infrastructure](https://cloud.google.com/service-infrastructure). It checks
    /// whether an operation should be allowed based on the service configuration
    /// and relevant policies. It must be called before the operation is executed.
    /// For more information, see
    /// [Admission
    /// Control](https://cloud.google.com/service-infrastructure/docs/admission-control).
    ///
    /// NOTE: The admission control has an expected policy propagation delay of
    /// 60s. The caller **must** not depend on the most recent policy changes.
    ///
    /// NOTE: The admission control has a hard limit of 1 referenced resources
    /// per call. If an operation refers to more than 1 resources, the caller
    /// must call the Check method multiple times.
    ///
    /// This method requires the `servicemanagement.services.check` permission
    /// on the specified service. For more information, see
    /// [Service Control API Access
    /// Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
    pub fn check(
        &self,
        service_name: impl Into<std::string::String>,
    ) -> crate::builders::service_controller::Check {
        crate::builders::service_controller::Check::new(self.inner.clone())
            .set_service_name(service_name.into())
    }

    /// Private Preview. This feature is only available for approved services.
    ///
    /// This method provides telemetry reporting for services that are integrated
    /// with [Service
    /// Infrastructure](https://cloud.google.com/service-infrastructure). It
    /// reports a list of operations that have occurred on a service. It must be
    /// called after the operations have been executed. For more information, see
    /// [Telemetry
    /// Reporting](https://cloud.google.com/service-infrastructure/docs/telemetry-reporting).
    ///
    /// NOTE: The telemetry reporting has a hard limit of 1000 operations and 1MB
    /// per Report call. It is recommended to have no more than 100 operations per
    /// call.
    ///
    /// This method requires the `servicemanagement.services.report` permission
    /// on the specified service. For more information, see
    /// [Service Control API Access
    /// Control](https://cloud.google.com/service-infrastructure/docs/service-control/access-control).
    pub fn report(
        &self,
        service_name: impl Into<std::string::String>,
    ) -> crate::builders::service_controller::Report {
        crate::builders::service_controller::Report::new(self.inner.clone())
            .set_service_name(service_name.into())
    }
}
