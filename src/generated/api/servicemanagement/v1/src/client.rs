// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Service Management API.
///
/// # Service Description
///
/// [Google Service Management
/// API](https://cloud.google.com/service-infrastructure/docs/overview)
///
/// # Configuration
///
/// `ServiceManager` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ServiceManager` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ServiceManager` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ServiceManager {
    inner: Arc<dyn crate::stubs::dynamic::ServiceManager>,
}

impl ServiceManager {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::ServiceManager + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::ServiceManager>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ServiceManager> {
        crate::transport::ServiceManager::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ServiceManager> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::ServiceManager::new)
    }

    /// Lists managed services.
    ///
    /// Returns all public services. For authenticated users, also returns all
    /// services the calling user has "servicemanagement.services.get" permission
    /// for.
    pub fn list_services(&self) -> crate::builders::service_manager::ListServices {
        crate::builders::service_manager::ListServices::new(self.inner.clone())
    }

    /// Gets a managed service. Authentication is required unless the service is
    /// public.
    pub fn get_service(
        &self,
        service_name: impl Into<std::string::String>,
    ) -> crate::builders::service_manager::GetService {
        crate::builders::service_manager::GetService::new(self.inner.clone())
            .set_service_name(service_name.into())
    }

    /// Creates a new managed service.
    ///
    /// A managed service is immutable, and is subject to mandatory 30-day
    /// data retention. You cannot move a service or recreate it within 30 days
    /// after deletion.
    ///
    /// One producer project can own no more than 500 services. For security and
    /// reliability purposes, a production service should be hosted in a
    /// dedicated producer project.
    ///
    /// Operation<response: ManagedService>
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_service(&self) -> crate::builders::service_manager::CreateService {
        crate::builders::service_manager::CreateService::new(self.inner.clone())
    }

    /// Deletes a managed service. This method will change the service to the
    /// `Soft-Delete` state for 30 days. Within this period, service producers may
    /// call
    /// [UndeleteService][google.api.servicemanagement.v1.ServiceManager.UndeleteService]
    /// to restore the service. After 30 days, the service will be permanently
    /// deleted.
    ///
    /// Operation<response: google.protobuf.Empty>
    ///
    /// [google.api.servicemanagement.v1.ServiceManager.UndeleteService]: crate::client::ServiceManager::undelete_service
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_service(
        &self,
        service_name: impl Into<std::string::String>,
    ) -> crate::builders::service_manager::DeleteService {
        crate::builders::service_manager::DeleteService::new(self.inner.clone())
            .set_service_name(service_name.into())
    }

    /// Revives a previously deleted managed service. The method restores the
    /// service using the configuration at the time the service was deleted.
    /// The target service must exist and must have been deleted within the
    /// last 30 days.
    ///
    /// Operation<response: UndeleteServiceResponse>
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn undelete_service(
        &self,
        service_name: impl Into<std::string::String>,
    ) -> crate::builders::service_manager::UndeleteService {
        crate::builders::service_manager::UndeleteService::new(self.inner.clone())
            .set_service_name(service_name.into())
    }

    /// Lists the history of the service configuration for a managed service,
    /// from the newest to the oldest.
    pub fn list_service_configs(
        &self,
        service_name: impl Into<std::string::String>,
    ) -> crate::builders::service_manager::ListServiceConfigs {
        crate::builders::service_manager::ListServiceConfigs::new(self.inner.clone())
            .set_service_name(service_name.into())
    }

    /// Gets a service configuration (version) for a managed service.
    pub fn get_service_config(
        &self,
        service_name: impl Into<std::string::String>,
        config_id: impl Into<std::string::String>,
    ) -> crate::builders::service_manager::GetServiceConfig {
        crate::builders::service_manager::GetServiceConfig::new(self.inner.clone())
            .set_service_name(service_name.into())
            .set_config_id(config_id.into())
    }

    /// Creates a new service configuration (version) for a managed service.
    /// This method only stores the service configuration. To roll out the service
    /// configuration to backend systems please call
    /// [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
    ///
    /// Only the 100 most recent service configurations and ones referenced by
    /// existing rollouts are kept for each service. The rest will be deleted
    /// eventually.
    ///
    /// [google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout]: crate::client::ServiceManager::create_service_rollout
    pub fn create_service_config(
        &self,
        service_name: impl Into<std::string::String>,
    ) -> crate::builders::service_manager::CreateServiceConfig {
        crate::builders::service_manager::CreateServiceConfig::new(self.inner.clone())
            .set_service_name(service_name.into())
    }

    /// Creates a new service configuration (version) for a managed service based
    /// on
    /// user-supplied configuration source files (for example: OpenAPI
    /// Specification). This method stores the source configurations as well as the
    /// generated service configuration. To rollout the service configuration to
    /// other services,
    /// please call
    /// [CreateServiceRollout][google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout].
    ///
    /// Only the 100 most recent configuration sources and ones referenced by
    /// existing service configurtions are kept for each service. The rest will be
    /// deleted eventually.
    ///
    /// Operation<response: SubmitConfigSourceResponse>
    ///
    /// [google.api.servicemanagement.v1.ServiceManager.CreateServiceRollout]: crate::client::ServiceManager::create_service_rollout
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn submit_config_source(
        &self,
        service_name: impl Into<std::string::String>,
    ) -> crate::builders::service_manager::SubmitConfigSource {
        crate::builders::service_manager::SubmitConfigSource::new(self.inner.clone())
            .set_service_name(service_name.into())
    }

    /// Lists the history of the service configuration rollouts for a managed
    /// service, from the newest to the oldest.
    pub fn list_service_rollouts(
        &self,
        service_name: impl Into<std::string::String>,
    ) -> crate::builders::service_manager::ListServiceRollouts {
        crate::builders::service_manager::ListServiceRollouts::new(self.inner.clone())
            .set_service_name(service_name.into())
    }

    /// Gets a service configuration
    /// [rollout][google.api.servicemanagement.v1.Rollout].
    ///
    /// [google.api.servicemanagement.v1.Rollout]: crate::model::Rollout
    pub fn get_service_rollout(
        &self,
        service_name: impl Into<std::string::String>,
        rollout_id: impl Into<std::string::String>,
    ) -> crate::builders::service_manager::GetServiceRollout {
        crate::builders::service_manager::GetServiceRollout::new(self.inner.clone())
            .set_service_name(service_name.into())
            .set_rollout_id(rollout_id.into())
    }

    /// Creates a new service configuration rollout. Based on rollout, the
    /// Google Service Management will roll out the service configurations to
    /// different backend services. For example, the logging configuration will be
    /// pushed to Google Cloud Logging.
    ///
    /// Please note that any previous pending and running Rollouts and associated
    /// Operations will be automatically cancelled so that the latest Rollout will
    /// not be blocked by previous Rollouts.
    ///
    /// Only the 100 most recent (in any state) and the last 10 successful (if not
    /// already part of the set of 100 most recent) rollouts are kept for each
    /// service. The rest will be deleted eventually.
    ///
    /// Operation<response: Rollout>
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_service_rollout(
        &self,
        service_name: impl Into<std::string::String>,
    ) -> crate::builders::service_manager::CreateServiceRollout {
        crate::builders::service_manager::CreateServiceRollout::new(self.inner.clone())
            .set_service_name(service_name.into())
    }

    /// Generates and returns a report (errors, warnings and changes from
    /// existing configurations) associated with
    /// GenerateConfigReportRequest.new_value
    ///
    /// If GenerateConfigReportRequest.old_value is specified,
    /// GenerateConfigReportRequest will contain a single ChangeReport based on the
    /// comparison between GenerateConfigReportRequest.new_value and
    /// GenerateConfigReportRequest.old_value.
    /// If GenerateConfigReportRequest.old_value is not specified, this method
    /// will compare GenerateConfigReportRequest.new_value with the last pushed
    /// service configuration.
    pub fn generate_config_report(&self) -> crate::builders::service_manager::GenerateConfigReport {
        crate::builders::service_manager::GenerateConfigReport::new(self.inner.clone())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::service_manager::SetIamPolicy {
        crate::builders::service_manager::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::service_manager::GetIamPolicy {
        crate::builders::service_manager::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::service_manager::TestIamPermissions {
        crate::builders::service_manager::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Lists service operations that match the specified filter in the request.
    pub fn list_operations(&self) -> crate::builders::service_manager::ListOperations {
        crate::builders::service_manager::ListOperations::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::service_manager::GetOperation {
        crate::builders::service_manager::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
