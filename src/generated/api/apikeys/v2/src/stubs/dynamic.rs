// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use std::sync::Arc;

/// A dyn-compatible, crate-private version of [super::ApiKeys].
#[async_trait::async_trait]
pub trait ApiKeys: std::fmt::Debug + Send + Sync {
    async fn create_key(
        &self,
        req: crate::model::CreateKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_keys(
        &self,
        req: crate::model::ListKeysRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListKeysResponse>;

    async fn get_key(
        &self,
        req: crate::model::GetKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Key>;

    async fn get_key_string(
        &self,
        req: crate::model::GetKeyStringRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GetKeyStringResponse>;

    async fn update_key(
        &self,
        req: crate::model::UpdateKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_key(
        &self,
        req: crate::model::DeleteKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn undelete_key(
        &self,
        req: crate::model::UndeleteKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn lookup_key(
        &self,
        req: crate::model::LookupKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::LookupKeyResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [super::ApiKeys] also implement [ApiKeys].
#[async_trait::async_trait]
impl<T: super::ApiKeys> ApiKeys for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn create_key(
        &self,
        req: crate::model::CreateKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_key(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_keys(
        &self,
        req: crate::model::ListKeysRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListKeysResponse> {
        T::list_keys(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_key(
        &self,
        req: crate::model::GetKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Key> {
        T::get_key(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_key_string(
        &self,
        req: crate::model::GetKeyStringRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GetKeyStringResponse> {
        T::get_key_string(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_key(
        &self,
        req: crate::model::UpdateKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_key(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_key(
        &self,
        req: crate::model::DeleteKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_key(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn undelete_key(
        &self,
        req: crate::model::UndeleteKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::undelete_key(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn lookup_key(
        &self,
        req: crate::model::LookupKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::LookupKeyResponse> {
        T::lookup_key(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        T::get_polling_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}
