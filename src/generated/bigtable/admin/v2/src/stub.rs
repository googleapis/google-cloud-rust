// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::BigtableInstanceAdmin].
///
/// Application developers may need to implement this trait to mock
/// `client::BigtableInstanceAdmin`.  In other use-cases, application developers only
/// use `client::BigtableInstanceAdmin` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait BigtableInstanceAdmin: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::BigtableInstanceAdmin::create_instance].
    fn create_instance(
        &self,
        _req: crate::model::CreateInstanceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableInstanceAdmin::get_instance].
    fn get_instance(
        &self,
        _req: crate::model::GetInstanceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Instance>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Instance>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::BigtableInstanceAdmin::list_instances].
    fn list_instances(
        &self,
        _req: crate::model::ListInstancesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListInstancesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListInstancesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::BigtableInstanceAdmin::update_instance].
    fn update_instance(
        &self,
        _req: crate::model::Instance,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Instance>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Instance>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::BigtableInstanceAdmin::partial_update_instance].
    fn partial_update_instance(
        &self,
        _req: crate::model::PartialUpdateInstanceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableInstanceAdmin::delete_instance].
    fn delete_instance(
        &self,
        _req: crate::model::DeleteInstanceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::BigtableInstanceAdmin::create_cluster].
    fn create_cluster(
        &self,
        _req: crate::model::CreateClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableInstanceAdmin::get_cluster].
    fn get_cluster(
        &self,
        _req: crate::model::GetClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Cluster>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Cluster>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::BigtableInstanceAdmin::list_clusters].
    fn list_clusters(
        &self,
        _req: crate::model::ListClustersRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListClustersResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListClustersResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::BigtableInstanceAdmin::update_cluster].
    fn update_cluster(
        &self,
        _req: crate::model::Cluster,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableInstanceAdmin::partial_update_cluster].
    fn partial_update_cluster(
        &self,
        _req: crate::model::PartialUpdateClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableInstanceAdmin::delete_cluster].
    fn delete_cluster(
        &self,
        _req: crate::model::DeleteClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::BigtableInstanceAdmin::create_app_profile].
    fn create_app_profile(
        &self,
        _req: crate::model::CreateAppProfileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::AppProfile>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::AppProfile>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::BigtableInstanceAdmin::get_app_profile].
    fn get_app_profile(
        &self,
        _req: crate::model::GetAppProfileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::AppProfile>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::AppProfile>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::BigtableInstanceAdmin::list_app_profiles].
    fn list_app_profiles(
        &self,
        _req: crate::model::ListAppProfilesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListAppProfilesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListAppProfilesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::BigtableInstanceAdmin::update_app_profile].
    fn update_app_profile(
        &self,
        _req: crate::model::UpdateAppProfileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableInstanceAdmin::delete_app_profile].
    fn delete_app_profile(
        &self,
        _req: crate::model::DeleteAppProfileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::BigtableInstanceAdmin::get_iam_policy].
    fn get_iam_policy(
        &self,
        _req: iam_v1::model::GetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<iam_v1::model::Policy>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<iam_v1::model::Policy>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::BigtableInstanceAdmin::set_iam_policy].
    fn set_iam_policy(
        &self,
        _req: iam_v1::model::SetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<iam_v1::model::Policy>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<iam_v1::model::Policy>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::BigtableInstanceAdmin::test_iam_permissions].
    fn test_iam_permissions(
        &self,
        _req: iam_v1::model::TestIamPermissionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::BigtableInstanceAdmin::list_hot_tablets].
    fn list_hot_tablets(
        &self,
        _req: crate::model::ListHotTabletsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListHotTabletsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListHotTabletsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::BigtableInstanceAdmin::create_logical_view].
    fn create_logical_view(
        &self,
        _req: crate::model::CreateLogicalViewRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableInstanceAdmin::get_logical_view].
    fn get_logical_view(
        &self,
        _req: crate::model::GetLogicalViewRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::LogicalView>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::LogicalView>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableInstanceAdmin::list_logical_views].
    fn list_logical_views(
        &self,
        _req: crate::model::ListLogicalViewsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListLogicalViewsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListLogicalViewsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::BigtableInstanceAdmin::update_logical_view].
    fn update_logical_view(
        &self,
        _req: crate::model::UpdateLogicalViewRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableInstanceAdmin::delete_logical_view].
    fn delete_logical_view(
        &self,
        _req: crate::model::DeleteLogicalViewRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::BigtableInstanceAdmin::create_materialized_view].
    fn create_materialized_view(
        &self,
        _req: crate::model::CreateMaterializedViewRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableInstanceAdmin::get_materialized_view].
    fn get_materialized_view(
        &self,
        _req: crate::model::GetMaterializedViewRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::MaterializedView>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::MaterializedView>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableInstanceAdmin::list_materialized_views].
    fn list_materialized_views(
        &self,
        _req: crate::model::ListMaterializedViewsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListMaterializedViewsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListMaterializedViewsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::BigtableInstanceAdmin::update_materialized_view].
    fn update_materialized_view(
        &self,
        _req: crate::model::UpdateMaterializedViewRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableInstanceAdmin::delete_materialized_view].
    fn delete_materialized_view(
        &self,
        _req: crate::model::DeleteMaterializedViewRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::BigtableInstanceAdmin::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::BigtableInstanceAdmin::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableInstanceAdmin::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::BigtableInstanceAdmin::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}

/// Defines the trait used to implement [super::client::BigtableTableAdmin].
///
/// Application developers may need to implement this trait to mock
/// `client::BigtableTableAdmin`.  In other use-cases, application developers only
/// use `client::BigtableTableAdmin` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait BigtableTableAdmin: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::BigtableTableAdmin::create_table].
    fn create_table(
        &self,
        _req: crate::model::CreateTableRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Table>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Table>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::BigtableTableAdmin::create_table_from_snapshot].
    fn create_table_from_snapshot(
        &self,
        _req: crate::model::CreateTableFromSnapshotRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableTableAdmin::list_tables].
    fn list_tables(
        &self,
        _req: crate::model::ListTablesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListTablesResponse>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::ListTablesResponse>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableTableAdmin::get_table].
    fn get_table(
        &self,
        _req: crate::model::GetTableRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Table>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Table>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::BigtableTableAdmin::update_table].
    fn update_table(
        &self,
        _req: crate::model::UpdateTableRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableTableAdmin::delete_table].
    fn delete_table(
        &self,
        _req: crate::model::DeleteTableRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::BigtableTableAdmin::undelete_table].
    fn undelete_table(
        &self,
        _req: crate::model::UndeleteTableRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableTableAdmin::create_authorized_view].
    fn create_authorized_view(
        &self,
        _req: crate::model::CreateAuthorizedViewRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableTableAdmin::list_authorized_views].
    fn list_authorized_views(
        &self,
        _req: crate::model::ListAuthorizedViewsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListAuthorizedViewsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListAuthorizedViewsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::BigtableTableAdmin::get_authorized_view].
    fn get_authorized_view(
        &self,
        _req: crate::model::GetAuthorizedViewRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::AuthorizedView>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::AuthorizedView>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableTableAdmin::update_authorized_view].
    fn update_authorized_view(
        &self,
        _req: crate::model::UpdateAuthorizedViewRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableTableAdmin::delete_authorized_view].
    fn delete_authorized_view(
        &self,
        _req: crate::model::DeleteAuthorizedViewRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::BigtableTableAdmin::modify_column_families].
    fn modify_column_families(
        &self,
        _req: crate::model::ModifyColumnFamiliesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Table>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Table>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::BigtableTableAdmin::drop_row_range].
    fn drop_row_range(
        &self,
        _req: crate::model::DropRowRangeRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::BigtableTableAdmin::generate_consistency_token].
    fn generate_consistency_token(
        &self,
        _req: crate::model::GenerateConsistencyTokenRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::GenerateConsistencyTokenResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::GenerateConsistencyTokenResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::BigtableTableAdmin::check_consistency].
    fn check_consistency(
        &self,
        _req: crate::model::CheckConsistencyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::CheckConsistencyResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::CheckConsistencyResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::BigtableTableAdmin::snapshot_table].
    fn snapshot_table(
        &self,
        _req: crate::model::SnapshotTableRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableTableAdmin::get_snapshot].
    fn get_snapshot(
        &self,
        _req: crate::model::GetSnapshotRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Snapshot>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Snapshot>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::BigtableTableAdmin::list_snapshots].
    fn list_snapshots(
        &self,
        _req: crate::model::ListSnapshotsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListSnapshotsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListSnapshotsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::BigtableTableAdmin::delete_snapshot].
    fn delete_snapshot(
        &self,
        _req: crate::model::DeleteSnapshotRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::BigtableTableAdmin::create_backup].
    fn create_backup(
        &self,
        _req: crate::model::CreateBackupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableTableAdmin::get_backup].
    fn get_backup(
        &self,
        _req: crate::model::GetBackupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Backup>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Backup>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::BigtableTableAdmin::update_backup].
    fn update_backup(
        &self,
        _req: crate::model::UpdateBackupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Backup>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Backup>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::BigtableTableAdmin::delete_backup].
    fn delete_backup(
        &self,
        _req: crate::model::DeleteBackupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::BigtableTableAdmin::list_backups].
    fn list_backups(
        &self,
        _req: crate::model::ListBackupsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListBackupsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListBackupsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::BigtableTableAdmin::restore_table].
    fn restore_table(
        &self,
        _req: crate::model::RestoreTableRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableTableAdmin::copy_backup].
    fn copy_backup(
        &self,
        _req: crate::model::CopyBackupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableTableAdmin::get_iam_policy].
    fn get_iam_policy(
        &self,
        _req: iam_v1::model::GetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<iam_v1::model::Policy>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<iam_v1::model::Policy>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::BigtableTableAdmin::set_iam_policy].
    fn set_iam_policy(
        &self,
        _req: iam_v1::model::SetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<iam_v1::model::Policy>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<iam_v1::model::Policy>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::BigtableTableAdmin::test_iam_permissions].
    fn test_iam_permissions(
        &self,
        _req: iam_v1::model::TestIamPermissionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::BigtableTableAdmin::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::BigtableTableAdmin::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::BigtableTableAdmin::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::BigtableTableAdmin::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
