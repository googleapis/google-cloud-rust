// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Bigtable Admin API.
///
/// # Service Description
///
/// Service for creating, configuring, and deleting Cloud Bigtable Instances and
/// Clusters. Provides access to the Instance and Cluster schemas only, not the
/// tables' metadata or data stored in those tables.
///
/// # Configuration
///
/// `BigtableInstanceAdmin` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `BigtableInstanceAdmin` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `BigtableInstanceAdmin` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct BigtableInstanceAdmin {
    inner: Arc<dyn crate::stubs::dynamic::BigtableInstanceAdmin>,
}

impl BigtableInstanceAdmin {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::BigtableInstanceAdmin + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::BigtableInstanceAdmin>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::BigtableInstanceAdmin> {
        crate::transport::BigtableInstanceAdmin::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::BigtableInstanceAdmin> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::BigtableInstanceAdmin::new)
    }

    /// Create an instance within a project.
    ///
    /// Note that exactly one of Cluster.serve_nodes and
    /// Cluster.cluster_config.cluster_autoscaling_config can be set. If
    /// serve_nodes is set to non-zero, then the cluster is manually scaled. If
    /// cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is
    /// enabled.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_instance(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::CreateInstance {
        crate::builders::bigtable_instance_admin::CreateInstance::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets information about an instance.
    pub fn get_instance(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::GetInstance {
        crate::builders::bigtable_instance_admin::GetInstance::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about instances in a project.
    pub fn list_instances(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::ListInstances {
        crate::builders::bigtable_instance_admin::ListInstances::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an instance within a project. This method updates only the display
    /// name and type for an Instance. To update other Instance properties, such as
    /// labels, use PartialUpdateInstance.
    pub fn update_instance(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::UpdateInstance {
        crate::builders::bigtable_instance_admin::UpdateInstance::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Partially updates an instance within a project. This method can modify all
    /// fields of an Instance and is the preferred way to update an Instance.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn partial_update_instance(
        &self,
        instance: impl Into<crate::model::Instance>,
    ) -> crate::builders::bigtable_instance_admin::PartialUpdateInstance {
        crate::builders::bigtable_instance_admin::PartialUpdateInstance::new(self.inner.clone())
            .set_instance(instance.into())
    }

    /// Delete an instance from a project.
    pub fn delete_instance(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::DeleteInstance {
        crate::builders::bigtable_instance_admin::DeleteInstance::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a cluster within an instance.
    ///
    /// Note that exactly one of Cluster.serve_nodes and
    /// Cluster.cluster_config.cluster_autoscaling_config can be set. If
    /// serve_nodes is set to non-zero, then the cluster is manually scaled. If
    /// cluster_config.cluster_autoscaling_config is non-empty, then autoscaling is
    /// enabled.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_cluster(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::CreateCluster {
        crate::builders::bigtable_instance_admin::CreateCluster::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets information about a cluster.
    pub fn get_cluster(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::GetCluster {
        crate::builders::bigtable_instance_admin::GetCluster::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about clusters in an instance.
    pub fn list_clusters(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::ListClusters {
        crate::builders::bigtable_instance_admin::ListClusters::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a cluster within an instance.
    ///
    /// Note that UpdateCluster does not support updating
    /// cluster_config.cluster_autoscaling_config. In order to update it, you
    /// must use PartialUpdateCluster.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_cluster(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::UpdateCluster {
        crate::builders::bigtable_instance_admin::UpdateCluster::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Partially updates a cluster within a project. This method is the preferred
    /// way to update a Cluster.
    ///
    /// To enable and update autoscaling, set
    /// cluster_config.cluster_autoscaling_config. When autoscaling is enabled,
    /// serve_nodes is treated as an OUTPUT_ONLY field, meaning that updates to it
    /// are ignored. Note that an update cannot simultaneously set serve_nodes to
    /// non-zero and cluster_config.cluster_autoscaling_config to non-empty, and
    /// also specify both in the update_mask.
    ///
    /// To disable autoscaling, clear cluster_config.cluster_autoscaling_config,
    /// and explicitly set a serve_node count via the update_mask.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn partial_update_cluster(
        &self,
        cluster: impl Into<crate::model::Cluster>,
    ) -> crate::builders::bigtable_instance_admin::PartialUpdateCluster {
        crate::builders::bigtable_instance_admin::PartialUpdateCluster::new(self.inner.clone())
            .set_cluster(cluster.into())
    }

    /// Deletes a cluster from an instance.
    pub fn delete_cluster(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::DeleteCluster {
        crate::builders::bigtable_instance_admin::DeleteCluster::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates an app profile within an instance.
    pub fn create_app_profile(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::CreateAppProfile {
        crate::builders::bigtable_instance_admin::CreateAppProfile::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets information about an app profile.
    pub fn get_app_profile(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::GetAppProfile {
        crate::builders::bigtable_instance_admin::GetAppProfile::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about app profiles in an instance.
    pub fn list_app_profiles(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::ListAppProfiles {
        crate::builders::bigtable_instance_admin::ListAppProfiles::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an app profile within an instance.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_app_profile(
        &self,
        app_profile: impl Into<crate::model::AppProfile>,
    ) -> crate::builders::bigtable_instance_admin::UpdateAppProfile {
        crate::builders::bigtable_instance_admin::UpdateAppProfile::new(self.inner.clone())
            .set_app_profile(app_profile.into())
    }

    /// Deletes an app profile from an instance.
    pub fn delete_app_profile(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::DeleteAppProfile {
        crate::builders::bigtable_instance_admin::DeleteAppProfile::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets the access control policy for an instance resource. Returns an empty
    /// policy if an instance exists but does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::GetIamPolicy {
        crate::builders::bigtable_instance_admin::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Sets the access control policy on an instance resource. Replaces any
    /// existing policy.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::SetIamPolicy {
        crate::builders::bigtable_instance_admin::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that the caller has on the specified instance resource.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::TestIamPermissions {
        crate::builders::bigtable_instance_admin::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Lists hot tablets in a cluster, within the time range provided. Hot
    /// tablets are ordered based on CPU usage.
    pub fn list_hot_tablets(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::ListHotTablets {
        crate::builders::bigtable_instance_admin::ListHotTablets::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::ListOperations {
        crate::builders::bigtable_instance_admin::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::GetOperation {
        crate::builders::bigtable_instance_admin::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::DeleteOperation {
        crate::builders::bigtable_instance_admin::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_instance_admin::CancelOperation {
        crate::builders::bigtable_instance_admin::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Cloud Bigtable Admin API.
///
/// # Service Description
///
/// Service for creating, configuring, and deleting Cloud Bigtable tables.
///
/// Provides access to the table schemas only, not the data stored within
/// the tables.
///
/// # Configuration
///
/// `BigtableTableAdmin` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `BigtableTableAdmin` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `BigtableTableAdmin` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct BigtableTableAdmin {
    inner: Arc<dyn crate::stubs::dynamic::BigtableTableAdmin>,
}

impl BigtableTableAdmin {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::BigtableTableAdmin + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::BigtableTableAdmin>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::BigtableTableAdmin> {
        crate::transport::BigtableTableAdmin::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::BigtableTableAdmin> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::BigtableTableAdmin::new)
    }

    /// Creates a new table in the specified instance.
    /// The table can be created with a full set of initial column families,
    /// specified in the request.
    pub fn create_table(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::CreateTable {
        crate::builders::bigtable_table_admin::CreateTable::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a new table from the specified snapshot. The target table must
    /// not exist. The snapshot and the table must be in the same instance.
    ///
    /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
    /// feature is not currently available to most Cloud Bigtable customers. This
    /// feature might be changed in backward-incompatible ways and is not
    /// recommended for production use. It is not subject to any SLA or deprecation
    /// policy.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_table_from_snapshot(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::CreateTableFromSnapshot {
        crate::builders::bigtable_table_admin::CreateTableFromSnapshot::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all tables served from a specified instance.
    pub fn list_tables(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::ListTables {
        crate::builders::bigtable_table_admin::ListTables::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets metadata information about the specified table.
    pub fn get_table(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::GetTable {
        crate::builders::bigtable_table_admin::GetTable::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a specified table.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_table(
        &self,
        table: impl Into<crate::model::Table>,
    ) -> crate::builders::bigtable_table_admin::UpdateTable {
        crate::builders::bigtable_table_admin::UpdateTable::new(self.inner.clone())
            .set_table(table.into())
    }

    /// Permanently deletes a specified table and all of its data.
    pub fn delete_table(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::DeleteTable {
        crate::builders::bigtable_table_admin::DeleteTable::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Restores a specified table which was accidentally deleted.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn undelete_table(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::UndeleteTable {
        crate::builders::bigtable_table_admin::UndeleteTable::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new AuthorizedView in a table.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_authorized_view(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::CreateAuthorizedView {
        crate::builders::bigtable_table_admin::CreateAuthorizedView::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all AuthorizedViews from a specific table.
    pub fn list_authorized_views(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::ListAuthorizedViews {
        crate::builders::bigtable_table_admin::ListAuthorizedViews::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets information from a specified AuthorizedView.
    pub fn get_authorized_view(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::GetAuthorizedView {
        crate::builders::bigtable_table_admin::GetAuthorizedView::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates an AuthorizedView in a table.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_authorized_view(
        &self,
        authorized_view: impl Into<crate::model::AuthorizedView>,
    ) -> crate::builders::bigtable_table_admin::UpdateAuthorizedView {
        crate::builders::bigtable_table_admin::UpdateAuthorizedView::new(self.inner.clone())
            .set_authorized_view(authorized_view.into())
    }

    /// Permanently deletes a specified AuthorizedView.
    pub fn delete_authorized_view(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::DeleteAuthorizedView {
        crate::builders::bigtable_table_admin::DeleteAuthorizedView::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Performs a series of column family modifications on the specified table.
    /// Either all or none of the modifications will occur before this method
    /// returns, but data requests received prior to that point may see a table
    /// where only some modifications have taken effect.
    pub fn modify_column_families(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::ModifyColumnFamilies {
        crate::builders::bigtable_table_admin::ModifyColumnFamilies::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Permanently drop/delete a row range from a specified table. The request can
    /// specify whether to delete all rows in a table, or only those that match a
    /// particular prefix.
    pub fn drop_row_range(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::DropRowRange {
        crate::builders::bigtable_table_admin::DropRowRange::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Generates a consistency token for a Table, which can be used in
    /// CheckConsistency to check whether mutations to the table that finished
    /// before this call started have been replicated. The tokens will be available
    /// for 90 days.
    pub fn generate_consistency_token(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::GenerateConsistencyToken {
        crate::builders::bigtable_table_admin::GenerateConsistencyToken::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Checks replication consistency based on a consistency token, that is, if
    /// replication has caught up based on the conditions specified in the token
    /// and the check request.
    pub fn check_consistency(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::CheckConsistency {
        crate::builders::bigtable_table_admin::CheckConsistency::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new snapshot in the specified cluster from the specified
    /// source table. The cluster and the table must be in the same instance.
    ///
    /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
    /// feature is not currently available to most Cloud Bigtable customers. This
    /// feature might be changed in backward-incompatible ways and is not
    /// recommended for production use. It is not subject to any SLA or deprecation
    /// policy.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn snapshot_table(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::SnapshotTable {
        crate::builders::bigtable_table_admin::SnapshotTable::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets metadata information about the specified snapshot.
    ///
    /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
    /// feature is not currently available to most Cloud Bigtable customers. This
    /// feature might be changed in backward-incompatible ways and is not
    /// recommended for production use. It is not subject to any SLA or deprecation
    /// policy.
    pub fn get_snapshot(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::GetSnapshot {
        crate::builders::bigtable_table_admin::GetSnapshot::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all snapshots associated with the specified cluster.
    ///
    /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
    /// feature is not currently available to most Cloud Bigtable customers. This
    /// feature might be changed in backward-incompatible ways and is not
    /// recommended for production use. It is not subject to any SLA or deprecation
    /// policy.
    pub fn list_snapshots(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::ListSnapshots {
        crate::builders::bigtable_table_admin::ListSnapshots::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Permanently deletes the specified snapshot.
    ///
    /// Note: This is a private alpha release of Cloud Bigtable snapshots. This
    /// feature is not currently available to most Cloud Bigtable customers. This
    /// feature might be changed in backward-incompatible ways and is not
    /// recommended for production use. It is not subject to any SLA or deprecation
    /// policy.
    pub fn delete_snapshot(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::DeleteSnapshot {
        crate::builders::bigtable_table_admin::DeleteSnapshot::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Starts creating a new Cloud Bigtable Backup.  The returned backup
    /// [long-running operation][google.longrunning.Operation] can be used to
    /// track creation of the backup. The
    /// [metadata][google.longrunning.Operation.metadata] field type is
    /// [CreateBackupMetadata][google.bigtable.admin.v2.CreateBackupMetadata]. The
    /// [response][google.longrunning.Operation.response] field type is
    /// [Backup][google.bigtable.admin.v2.Backup], if successful. Cancelling the
    /// returned operation will stop the creation and delete the backup.
    ///
    /// [google.bigtable.admin.v2.Backup]: crate::model::Backup
    /// [google.bigtable.admin.v2.CreateBackupMetadata]: crate::model::CreateBackupMetadata
    /// [google.longrunning.Operation]: longrunning::model::Operation
    /// [google.longrunning.Operation.metadata]: longrunning::model::Operation::metadata
    /// [google.longrunning.Operation.response]: longrunning::model::Operation::result
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_backup(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::CreateBackup {
        crate::builders::bigtable_table_admin::CreateBackup::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets metadata on a pending or completed Cloud Bigtable Backup.
    pub fn get_backup(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::GetBackup {
        crate::builders::bigtable_table_admin::GetBackup::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a pending or completed Cloud Bigtable Backup.
    pub fn update_backup(
        &self,
        backup: impl Into<crate::model::Backup>,
    ) -> crate::builders::bigtable_table_admin::UpdateBackup {
        crate::builders::bigtable_table_admin::UpdateBackup::new(self.inner.clone())
            .set_backup(backup.into())
    }

    /// Deletes a pending or completed Cloud Bigtable backup.
    pub fn delete_backup(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::DeleteBackup {
        crate::builders::bigtable_table_admin::DeleteBackup::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists Cloud Bigtable backups. Returns both completed and pending
    /// backups.
    pub fn list_backups(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::ListBackups {
        crate::builders::bigtable_table_admin::ListBackups::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Create a new table by restoring from a completed backup.  The
    /// returned table [long-running operation][google.longrunning.Operation] can
    /// be used to track the progress of the operation, and to cancel it.  The
    /// [metadata][google.longrunning.Operation.metadata] field type is
    /// [RestoreTableMetadata][google.bigtable.admin.v2.RestoreTableMetadata].  The
    /// [response][google.longrunning.Operation.response] type is
    /// [Table][google.bigtable.admin.v2.Table], if successful.
    ///
    /// [google.bigtable.admin.v2.RestoreTableMetadata]: crate::model::RestoreTableMetadata
    /// [google.bigtable.admin.v2.Table]: crate::model::Table
    /// [google.longrunning.Operation]: longrunning::model::Operation
    /// [google.longrunning.Operation.metadata]: longrunning::model::Operation::metadata
    /// [google.longrunning.Operation.response]: longrunning::model::Operation::result
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn restore_table(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::RestoreTable {
        crate::builders::bigtable_table_admin::RestoreTable::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Copy a Cloud Bigtable backup to a new backup in the destination cluster
    /// located in the destination instance and project.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn copy_backup(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::CopyBackup {
        crate::builders::bigtable_table_admin::CopyBackup::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets the access control policy for a Table or Backup resource.
    /// Returns an empty policy if the resource exists but does not have a policy
    /// set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::GetIamPolicy {
        crate::builders::bigtable_table_admin::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Sets the access control policy on a Table or Backup resource.
    /// Replaces any existing policy.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::SetIamPolicy {
        crate::builders::bigtable_table_admin::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that the caller has on the specified Table or Backup
    /// resource.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::TestIamPermissions {
        crate::builders::bigtable_table_admin::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::ListOperations {
        crate::builders::bigtable_table_admin::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::GetOperation {
        crate::builders::bigtable_table_admin::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::DeleteOperation {
        crate::builders::bigtable_table_admin::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::bigtable_table_admin::CancelOperation {
        crate::builders::bigtable_table_admin::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
