// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application responds. Such applications should define mocks that
//! implement one of the traits defined in this module, initialize the client
//! with an instance of this mock in their tests, and verify their application
//! responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// An interface for managing Identity and Access Management (IAM) policies.
///
/// # Mocking
///
/// Application developers may use this trait to mock the iam clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait Policies: std::fmt::Debug + Send + Sync {
    /// Retrieves the policies of the specified kind that are attached to a
    /// resource.
    ///
    /// The response lists only policy metadata. In particular, policy rules are
    /// omitted.
    fn list_policies(
        &self,
        _req: crate::model::ListPoliciesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListPoliciesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListPoliciesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Gets a policy.
    fn get_policy(
        &self,
        _req: crate::model::GetPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Policy>> + Send {
        std::future::ready::<crate::Result<crate::model::Policy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Creates a policy.
    fn create_policy(
        &self,
        _req: crate::model::CreatePolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Updates the specified policy.
    ///
    /// You can update only the rules and the display name for the policy.
    ///
    /// To update a policy, you should use a read-modify-write loop:
    ///
    /// . Use [GetPolicy][google.iam.v2.Policies.GetPolicy] to read the current version of the policy.
    /// . Modify the policy as needed.
    /// . Use `UpdatePolicy` to write the updated policy.
    ///
    /// This pattern helps prevent conflicts between concurrent updates.
    ///
    /// [google.iam.v2.Policies.GetPolicy]: crate::client::Policies::get_policy
    fn update_policy(
        &self,
        _req: crate::model::UpdatePolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Deletes a policy. This action is permanent.
    fn delete_policy(
        &self,
        _req: crate::model::DeletePolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Returns the polling policy.
    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_policy::PollingPolicy>;

    /// Returns the polling backoff policy.
    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}
