// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;

/// Implements a client for the Identity and Access Management (IAM) API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_iam_v2::client::Policies;
/// let client = Policies::builder().build().await?;
/// // use `client` to make requests to the Identity and Access Management (IAM) API.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// An interface for managing Identity and Access Management (IAM) policies.
///
/// # Configuration
///
/// To configure `Policies` use the `with_*` methods in the type returned
/// by [builder()][Policies::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://iam.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::policies::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::policies::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `Policies` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Policies` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct Policies {
    inner: std::sync::Arc<dyn super::stub::dynamic::Policies>,
}

impl Policies {
    /// Returns a builder for [Policies].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_iam_v2::client::Policies;
    /// let client = Policies::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::policies::ClientBuilder {
        gax::client_builder::internal::new_builder(super::builder::policies::client::Factory)
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::Policies + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<std::sync::Arc<dyn super::stub::dynamic::Policies>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::Policies> {
        super::transport::Policies::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::Policies> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Policies::new)
    }

    /// Retrieves the policies of the specified kind that are attached to a
    /// resource.
    ///
    /// The response lists only policy metadata. In particular, policy rules are
    /// omitted.
    pub fn list_policies(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::policies::ListPolicies {
        super::builder::policies::ListPolicies::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Gets a policy.
    pub fn get_policy(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::policies::GetPolicy {
        super::builder::policies::GetPolicy::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a policy.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_policy(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::policies::CreatePolicy {
        super::builder::policies::CreatePolicy::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates the specified policy.
    ///
    /// You can update only the rules and the display name for the policy.
    ///
    /// To update a policy, you should use a read-modify-write loop:
    ///
    /// . Use [GetPolicy][google.iam.v2.Policies.GetPolicy] to read the current version of the policy.
    /// . Modify the policy as needed.
    /// . Use `UpdatePolicy` to write the updated policy.
    ///
    /// This pattern helps prevent conflicts between concurrent updates.
    ///
    /// [google.iam.v2.Policies.GetPolicy]: crate::client::Policies::get_policy
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_policy(
        &self,
        policy: impl Into<crate::model::Policy>,
    ) -> super::builder::policies::UpdatePolicy {
        super::builder::policies::UpdatePolicy::new(self.inner.clone()).set_policy(policy.into())
    }

    /// Deletes a policy. This action is permanent.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_policy(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::policies::DeletePolicy {
        super::builder::policies::DeletePolicy::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::policies::GetOperation {
        super::builder::policies::GetOperation::new(self.inner.clone()).set_name(name.into())
    }
}
