// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [PolicyBindings](super::stub::PolicyBindings) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct PolicyBindings<T>
where
    T: super::stub::PolicyBindings + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> PolicyBindings<T>
where
    T: super::stub::PolicyBindings + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stub::PolicyBindings for PolicyBindings<T>
where
    T: super::stub::PolicyBindings + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn create_policy_binding(
        &self,
        req: crate::model::CreatePolicyBindingRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.create_policy_binding(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_policy_binding(
        &self,
        req: crate::model::GetPolicyBindingRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::PolicyBinding> {
        self.inner.get_policy_binding(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_policy_binding(
        &self,
        req: crate::model::UpdatePolicyBindingRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.update_policy_binding(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_policy_binding(
        &self,
        req: crate::model::DeletePolicyBindingRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_policy_binding(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_policy_bindings(
        &self,
        req: crate::model::ListPolicyBindingsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListPolicyBindingsResponse> {
        self.inner.list_policy_bindings(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn search_target_policy_bindings(
        &self,
        req: crate::model::SearchTargetPolicyBindingsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::SearchTargetPolicyBindingsResponse> {
        self.inner.search_target_policy_bindings(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.get_operation(req, options).await
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        self.inner.get_polling_error_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}

/// Implements a [PrincipalAccessBoundaryPolicies](super::stub::PrincipalAccessBoundaryPolicies) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct PrincipalAccessBoundaryPolicies<T>
where
    T: super::stub::PrincipalAccessBoundaryPolicies + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> PrincipalAccessBoundaryPolicies<T>
where
    T: super::stub::PrincipalAccessBoundaryPolicies + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stub::PrincipalAccessBoundaryPolicies for PrincipalAccessBoundaryPolicies<T>
where
    T: super::stub::PrincipalAccessBoundaryPolicies + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn create_principal_access_boundary_policy(
        &self,
        req: crate::model::CreatePrincipalAccessBoundaryPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner
            .create_principal_access_boundary_policy(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn get_principal_access_boundary_policy(
        &self,
        req: crate::model::GetPrincipalAccessBoundaryPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::PrincipalAccessBoundaryPolicy> {
        self.inner
            .get_principal_access_boundary_policy(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn update_principal_access_boundary_policy(
        &self,
        req: crate::model::UpdatePrincipalAccessBoundaryPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner
            .update_principal_access_boundary_policy(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn delete_principal_access_boundary_policy(
        &self,
        req: crate::model::DeletePrincipalAccessBoundaryPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner
            .delete_principal_access_boundary_policy(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn list_principal_access_boundary_policies(
        &self,
        req: crate::model::ListPrincipalAccessBoundaryPoliciesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListPrincipalAccessBoundaryPoliciesResponse> {
        self.inner
            .list_principal_access_boundary_policies(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn search_principal_access_boundary_policy_bindings(
        &self,
        req: crate::model::SearchPrincipalAccessBoundaryPolicyBindingsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::SearchPrincipalAccessBoundaryPolicyBindingsResponse> {
        self.inner
            .search_principal_access_boundary_policy_bindings(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.get_operation(req, options).await
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        self.inner.get_polling_error_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}
