// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

pub mod iam {
    use crate::Result;
    use std::sync::Arc;

    /// Common implementation for [crate::client::Iam] request builders.
    #[derive(Clone, Debug)]
    pub struct RequestBuilder<R: std::default::Default> {
        stub: Arc<dyn crate::stubs::dynamic::Iam>,
        request: R,
        options: gax::options::RequestOptions,
    }

    impl<R> RequestBuilder<R>
    where
        R: std::default::Default,
    {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self {
                stub,
                request: R::default(),
                options: gax::options::RequestOptions::default(),
            }
        }
    }

    /// The request builder for a Iam::list_service_accounts call.
    #[derive(Clone, Debug)]
    pub struct ListServiceAccounts(RequestBuilder<crate::model::ListServiceAccountsRequest>);

    impl ListServiceAccounts {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListServiceAccountsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListServiceAccountsResponse> {
            (*self.0.stub)
                .list_service_accounts(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        #[cfg(feature = "unstable-stream")]
        pub async fn stream(
            self,
        ) -> gax::paginator::Paginator<crate::model::ListServiceAccountsResponse, gax::error::Error>
        {
            let token = gax::paginator::extract_token(&self.0.request.page_token);
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [name][crate::model::ListServiceAccountsRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListServiceAccountsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListServiceAccountsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListServiceAccounts {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::get_service_account call.
    #[derive(Clone, Debug)]
    pub struct GetServiceAccount(RequestBuilder<crate::model::GetServiceAccountRequest>);

    impl GetServiceAccount {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetServiceAccountRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ServiceAccount> {
            (*self.0.stub)
                .get_service_account(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::GetServiceAccountRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetServiceAccount {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::create_service_account call.
    #[derive(Clone, Debug)]
    pub struct CreateServiceAccount(RequestBuilder<crate::model::CreateServiceAccountRequest>);

    impl CreateServiceAccount {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateServiceAccountRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ServiceAccount> {
            (*self.0.stub)
                .create_service_account(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::CreateServiceAccountRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [account_id][crate::model::CreateServiceAccountRequest::account_id].
        pub fn set_account_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.account_id = v.into();
            self
        }

        /// Sets the value of [service_account][crate::model::CreateServiceAccountRequest::service_account].
        pub fn set_service_account<T: Into<std::option::Option<crate::model::ServiceAccount>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.service_account = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CreateServiceAccount {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::update_service_account call.
    #[derive(Clone, Debug)]
    pub struct UpdateServiceAccount(RequestBuilder<crate::model::ServiceAccount>);

    impl UpdateServiceAccount {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ServiceAccount>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ServiceAccount> {
            (*self.0.stub)
                .update_service_account(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::ServiceAccount::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [project_id][crate::model::ServiceAccount::project_id].
        pub fn set_project_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project_id = v.into();
            self
        }

        /// Sets the value of [unique_id][crate::model::ServiceAccount::unique_id].
        pub fn set_unique_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.unique_id = v.into();
            self
        }

        /// Sets the value of [email][crate::model::ServiceAccount::email].
        pub fn set_email<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.email = v.into();
            self
        }

        /// Sets the value of [display_name][crate::model::ServiceAccount::display_name].
        pub fn set_display_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.display_name = v.into();
            self
        }

        /// Sets the value of [etag][crate::model::ServiceAccount::etag].
        pub fn set_etag<T: Into<bytes::Bytes>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }

        /// Sets the value of [description][crate::model::ServiceAccount::description].
        pub fn set_description<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.description = v.into();
            self
        }

        /// Sets the value of [oauth2_client_id][crate::model::ServiceAccount::oauth2_client_id].
        pub fn set_oauth2_client_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.oauth2_client_id = v.into();
            self
        }

        /// Sets the value of [disabled][crate::model::ServiceAccount::disabled].
        pub fn set_disabled<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.disabled = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for UpdateServiceAccount {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::patch_service_account call.
    #[derive(Clone, Debug)]
    pub struct PatchServiceAccount(RequestBuilder<crate::model::PatchServiceAccountRequest>);

    impl PatchServiceAccount {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::PatchServiceAccountRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ServiceAccount> {
            (*self.0.stub)
                .patch_service_account(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [service_account][crate::model::PatchServiceAccountRequest::service_account].
        pub fn set_service_account<T: Into<std::option::Option<crate::model::ServiceAccount>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.service_account = v.into();
            self
        }

        /// Sets the value of [update_mask][crate::model::PatchServiceAccountRequest::update_mask].
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update_mask = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for PatchServiceAccount {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::delete_service_account call.
    #[derive(Clone, Debug)]
    pub struct DeleteServiceAccount(RequestBuilder<crate::model::DeleteServiceAccountRequest>);

    impl DeleteServiceAccount {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteServiceAccountRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<wkt::Empty> {
            (*self.0.stub)
                .delete_service_account(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::DeleteServiceAccountRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DeleteServiceAccount {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::undelete_service_account call.
    #[derive(Clone, Debug)]
    pub struct UndeleteServiceAccount(RequestBuilder<crate::model::UndeleteServiceAccountRequest>);

    impl UndeleteServiceAccount {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UndeleteServiceAccountRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::UndeleteServiceAccountResponse> {
            (*self.0.stub)
                .undelete_service_account(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::UndeleteServiceAccountRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for UndeleteServiceAccount {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::enable_service_account call.
    #[derive(Clone, Debug)]
    pub struct EnableServiceAccount(RequestBuilder<crate::model::EnableServiceAccountRequest>);

    impl EnableServiceAccount {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::EnableServiceAccountRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<wkt::Empty> {
            (*self.0.stub)
                .enable_service_account(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::EnableServiceAccountRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for EnableServiceAccount {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::disable_service_account call.
    #[derive(Clone, Debug)]
    pub struct DisableServiceAccount(RequestBuilder<crate::model::DisableServiceAccountRequest>);

    impl DisableServiceAccount {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DisableServiceAccountRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<wkt::Empty> {
            (*self.0.stub)
                .disable_service_account(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::DisableServiceAccountRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DisableServiceAccount {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::list_service_account_keys call.
    #[derive(Clone, Debug)]
    pub struct ListServiceAccountKeys(RequestBuilder<crate::model::ListServiceAccountKeysRequest>);

    impl ListServiceAccountKeys {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListServiceAccountKeysRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListServiceAccountKeysResponse> {
            (*self.0.stub)
                .list_service_account_keys(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::ListServiceAccountKeysRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [key_types][crate::model::ListServiceAccountKeysRequest::key_types].
        pub fn set_key_types<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::list_service_account_keys_request::KeyType>,
        {
            use std::iter::Iterator;
            self.0.request.key_types = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl gax::options::RequestBuilder for ListServiceAccountKeys {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::get_service_account_key call.
    #[derive(Clone, Debug)]
    pub struct GetServiceAccountKey(RequestBuilder<crate::model::GetServiceAccountKeyRequest>);

    impl GetServiceAccountKey {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetServiceAccountKeyRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ServiceAccountKey> {
            (*self.0.stub)
                .get_service_account_key(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::GetServiceAccountKeyRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [public_key_type][crate::model::GetServiceAccountKeyRequest::public_key_type].
        pub fn set_public_key_type<T: Into<crate::model::ServiceAccountPublicKeyType>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.public_key_type = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetServiceAccountKey {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::create_service_account_key call.
    #[derive(Clone, Debug)]
    pub struct CreateServiceAccountKey(
        RequestBuilder<crate::model::CreateServiceAccountKeyRequest>,
    );

    impl CreateServiceAccountKey {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateServiceAccountKeyRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ServiceAccountKey> {
            (*self.0.stub)
                .create_service_account_key(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::CreateServiceAccountKeyRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [private_key_type][crate::model::CreateServiceAccountKeyRequest::private_key_type].
        pub fn set_private_key_type<T: Into<crate::model::ServiceAccountPrivateKeyType>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.private_key_type = v.into();
            self
        }

        /// Sets the value of [key_algorithm][crate::model::CreateServiceAccountKeyRequest::key_algorithm].
        pub fn set_key_algorithm<T: Into<crate::model::ServiceAccountKeyAlgorithm>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.key_algorithm = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CreateServiceAccountKey {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::upload_service_account_key call.
    #[derive(Clone, Debug)]
    pub struct UploadServiceAccountKey(
        RequestBuilder<crate::model::UploadServiceAccountKeyRequest>,
    );

    impl UploadServiceAccountKey {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UploadServiceAccountKeyRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ServiceAccountKey> {
            (*self.0.stub)
                .upload_service_account_key(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::UploadServiceAccountKeyRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [public_key_data][crate::model::UploadServiceAccountKeyRequest::public_key_data].
        pub fn set_public_key_data<T: Into<bytes::Bytes>>(mut self, v: T) -> Self {
            self.0.request.public_key_data = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for UploadServiceAccountKey {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::delete_service_account_key call.
    #[derive(Clone, Debug)]
    pub struct DeleteServiceAccountKey(
        RequestBuilder<crate::model::DeleteServiceAccountKeyRequest>,
    );

    impl DeleteServiceAccountKey {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteServiceAccountKeyRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<wkt::Empty> {
            (*self.0.stub)
                .delete_service_account_key(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::DeleteServiceAccountKeyRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DeleteServiceAccountKey {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::disable_service_account_key call.
    #[derive(Clone, Debug)]
    pub struct DisableServiceAccountKey(
        RequestBuilder<crate::model::DisableServiceAccountKeyRequest>,
    );

    impl DisableServiceAccountKey {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DisableServiceAccountKeyRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<wkt::Empty> {
            (*self.0.stub)
                .disable_service_account_key(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::DisableServiceAccountKeyRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DisableServiceAccountKey {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::enable_service_account_key call.
    #[derive(Clone, Debug)]
    pub struct EnableServiceAccountKey(
        RequestBuilder<crate::model::EnableServiceAccountKeyRequest>,
    );

    impl EnableServiceAccountKey {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::EnableServiceAccountKeyRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<wkt::Empty> {
            (*self.0.stub)
                .enable_service_account_key(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::EnableServiceAccountKeyRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for EnableServiceAccountKey {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::sign_blob call.
    #[derive(Clone, Debug)]
    pub struct SignBlob(RequestBuilder<crate::model::SignBlobRequest>);

    impl SignBlob {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SignBlobRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SignBlobResponse> {
            (*self.0.stub)
                .sign_blob(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::SignBlobRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [bytes_to_sign][crate::model::SignBlobRequest::bytes_to_sign].
        pub fn set_bytes_to_sign<T: Into<bytes::Bytes>>(mut self, v: T) -> Self {
            self.0.request.bytes_to_sign = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SignBlob {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::sign_jwt call.
    #[derive(Clone, Debug)]
    pub struct SignJwt(RequestBuilder<crate::model::SignJwtRequest>);

    impl SignJwt {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SignJwtRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SignJwtResponse> {
            (*self.0.stub)
                .sign_jwt(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::SignJwtRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [payload][crate::model::SignJwtRequest::payload].
        pub fn set_payload<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.payload = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SignJwt {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::get_iam_policy call.
    #[derive(Clone, Debug)]
    pub struct GetIamPolicy(RequestBuilder<iam_v1::model::GetIamPolicyRequest>);

    impl GetIamPolicy {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<iam_v1::model::GetIamPolicyRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<iam_v1::model::Policy> {
            (*self.0.stub)
                .get_iam_policy(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [resource][iam_v1::model::GetIamPolicyRequest::resource].
        pub fn set_resource<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.resource = v.into();
            self
        }

        /// Sets the value of [options][iam_v1::model::GetIamPolicyRequest::options].
        pub fn set_options<T: Into<std::option::Option<iam_v1::model::GetPolicyOptions>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.options = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetIamPolicy {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::set_iam_policy call.
    #[derive(Clone, Debug)]
    pub struct SetIamPolicy(RequestBuilder<iam_v1::model::SetIamPolicyRequest>);

    impl SetIamPolicy {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<iam_v1::model::SetIamPolicyRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<iam_v1::model::Policy> {
            (*self.0.stub)
                .set_iam_policy(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [resource][iam_v1::model::SetIamPolicyRequest::resource].
        pub fn set_resource<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.resource = v.into();
            self
        }

        /// Sets the value of [policy][iam_v1::model::SetIamPolicyRequest::policy].
        pub fn set_policy<T: Into<std::option::Option<iam_v1::model::Policy>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.policy = v.into();
            self
        }

        /// Sets the value of [update_mask][iam_v1::model::SetIamPolicyRequest::update_mask].
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update_mask = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SetIamPolicy {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::test_iam_permissions call.
    #[derive(Clone, Debug)]
    pub struct TestIamPermissions(RequestBuilder<iam_v1::model::TestIamPermissionsRequest>);

    impl TestIamPermissions {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<iam_v1::model::TestIamPermissionsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<iam_v1::model::TestIamPermissionsResponse> {
            (*self.0.stub)
                .test_iam_permissions(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [resource][iam_v1::model::TestIamPermissionsRequest::resource].
        pub fn set_resource<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.resource = v.into();
            self
        }

        /// Sets the value of [permissions][iam_v1::model::TestIamPermissionsRequest::permissions].
        pub fn set_permissions<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.0.request.permissions = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl gax::options::RequestBuilder for TestIamPermissions {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::query_grantable_roles call.
    #[derive(Clone, Debug)]
    pub struct QueryGrantableRoles(RequestBuilder<crate::model::QueryGrantableRolesRequest>);

    impl QueryGrantableRoles {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::QueryGrantableRolesRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::QueryGrantableRolesResponse> {
            (*self.0.stub)
                .query_grantable_roles(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        #[cfg(feature = "unstable-stream")]
        pub async fn stream(
            self,
        ) -> gax::paginator::Paginator<crate::model::QueryGrantableRolesResponse, gax::error::Error>
        {
            let token = gax::paginator::extract_token(&self.0.request.page_token);
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [full_resource_name][crate::model::QueryGrantableRolesRequest::full_resource_name].
        pub fn set_full_resource_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.full_resource_name = v.into();
            self
        }

        /// Sets the value of [view][crate::model::QueryGrantableRolesRequest::view].
        pub fn set_view<T: Into<crate::model::RoleView>>(mut self, v: T) -> Self {
            self.0.request.view = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::QueryGrantableRolesRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::QueryGrantableRolesRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for QueryGrantableRoles {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::list_roles call.
    #[derive(Clone, Debug)]
    pub struct ListRoles(RequestBuilder<crate::model::ListRolesRequest>);

    impl ListRoles {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListRolesRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListRolesResponse> {
            (*self.0.stub)
                .list_roles(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        #[cfg(feature = "unstable-stream")]
        pub async fn stream(
            self,
        ) -> gax::paginator::Paginator<crate::model::ListRolesResponse, gax::error::Error> {
            let token = gax::paginator::extract_token(&self.0.request.page_token);
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListRolesRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListRolesRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListRolesRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of [view][crate::model::ListRolesRequest::view].
        pub fn set_view<T: Into<crate::model::RoleView>>(mut self, v: T) -> Self {
            self.0.request.view = v.into();
            self
        }

        /// Sets the value of [show_deleted][crate::model::ListRolesRequest::show_deleted].
        pub fn set_show_deleted<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.show_deleted = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListRoles {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::get_role call.
    #[derive(Clone, Debug)]
    pub struct GetRole(RequestBuilder<crate::model::GetRoleRequest>);

    impl GetRole {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetRoleRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Role> {
            (*self.0.stub)
                .get_role(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::GetRoleRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetRole {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::create_role call.
    #[derive(Clone, Debug)]
    pub struct CreateRole(RequestBuilder<crate::model::CreateRoleRequest>);

    impl CreateRole {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateRoleRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Role> {
            (*self.0.stub)
                .create_role(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [parent][crate::model::CreateRoleRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [role_id][crate::model::CreateRoleRequest::role_id].
        pub fn set_role_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.role_id = v.into();
            self
        }

        /// Sets the value of [role][crate::model::CreateRoleRequest::role].
        pub fn set_role<T: Into<std::option::Option<crate::model::Role>>>(mut self, v: T) -> Self {
            self.0.request.role = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CreateRole {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::update_role call.
    #[derive(Clone, Debug)]
    pub struct UpdateRole(RequestBuilder<crate::model::UpdateRoleRequest>);

    impl UpdateRole {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateRoleRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Role> {
            (*self.0.stub)
                .update_role(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::UpdateRoleRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [role][crate::model::UpdateRoleRequest::role].
        pub fn set_role<T: Into<std::option::Option<crate::model::Role>>>(mut self, v: T) -> Self {
            self.0.request.role = v.into();
            self
        }

        /// Sets the value of [update_mask][crate::model::UpdateRoleRequest::update_mask].
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update_mask = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for UpdateRole {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::delete_role call.
    #[derive(Clone, Debug)]
    pub struct DeleteRole(RequestBuilder<crate::model::DeleteRoleRequest>);

    impl DeleteRole {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteRoleRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Role> {
            (*self.0.stub)
                .delete_role(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::DeleteRoleRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [etag][crate::model::DeleteRoleRequest::etag].
        pub fn set_etag<T: Into<bytes::Bytes>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DeleteRole {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::undelete_role call.
    #[derive(Clone, Debug)]
    pub struct UndeleteRole(RequestBuilder<crate::model::UndeleteRoleRequest>);

    impl UndeleteRole {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UndeleteRoleRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Role> {
            (*self.0.stub)
                .undelete_role(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::UndeleteRoleRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [etag][crate::model::UndeleteRoleRequest::etag].
        pub fn set_etag<T: Into<bytes::Bytes>>(mut self, v: T) -> Self {
            self.0.request.etag = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for UndeleteRole {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::query_testable_permissions call.
    #[derive(Clone, Debug)]
    pub struct QueryTestablePermissions(
        RequestBuilder<crate::model::QueryTestablePermissionsRequest>,
    );

    impl QueryTestablePermissions {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::QueryTestablePermissionsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::QueryTestablePermissionsResponse> {
            (*self.0.stub)
                .query_testable_permissions(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        #[cfg(feature = "unstable-stream")]
        pub async fn stream(
            self,
        ) -> gax::paginator::Paginator<
            crate::model::QueryTestablePermissionsResponse,
            gax::error::Error,
        > {
            let token = gax::paginator::extract_token(&self.0.request.page_token);
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [full_resource_name][crate::model::QueryTestablePermissionsRequest::full_resource_name].
        pub fn set_full_resource_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.full_resource_name = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::QueryTestablePermissionsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::QueryTestablePermissionsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for QueryTestablePermissions {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::query_auditable_services call.
    #[derive(Clone, Debug)]
    pub struct QueryAuditableServices(RequestBuilder<crate::model::QueryAuditableServicesRequest>);

    impl QueryAuditableServices {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::QueryAuditableServicesRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::QueryAuditableServicesResponse> {
            (*self.0.stub)
                .query_auditable_services(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [full_resource_name][crate::model::QueryAuditableServicesRequest::full_resource_name].
        pub fn set_full_resource_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.full_resource_name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for QueryAuditableServices {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Iam::lint_policy call.
    #[derive(Clone, Debug)]
    pub struct LintPolicy(RequestBuilder<crate::model::LintPolicyRequest>);

    impl LintPolicy {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Iam>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::LintPolicyRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::LintPolicyResponse> {
            (*self.0.stub)
                .lint_policy(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [full_resource_name][crate::model::LintPolicyRequest::full_resource_name].
        pub fn set_full_resource_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.full_resource_name = v.into();
            self
        }

        /// Sets the value of `lint_object`.
        pub fn set_lint_object<T: Into<Option<crate::model::lint_policy_request::LintObject>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.lint_object = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for LintPolicy {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }
}
