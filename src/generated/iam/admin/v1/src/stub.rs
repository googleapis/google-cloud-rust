// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::Iam].
///
/// Application developers may need to implement this trait to mock
/// `client::Iam`.  In other use-cases, application developers only
/// use `client::Iam` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait Iam: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::Iam::list_service_accounts].
    fn list_service_accounts(
        &self,
        _req: crate::model::ListServiceAccountsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListServiceAccountsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListServiceAccountsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Iam::get_service_account].
    fn get_service_account(
        &self,
        _req: crate::model::GetServiceAccountRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ServiceAccount>> + Send {
        std::future::ready::<crate::Result<crate::model::ServiceAccount>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Iam::create_service_account].
    fn create_service_account(
        &self,
        _req: crate::model::CreateServiceAccountRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ServiceAccount>> + Send {
        std::future::ready::<crate::Result<crate::model::ServiceAccount>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Iam::update_service_account].
    fn update_service_account(
        &self,
        _req: crate::model::ServiceAccount,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ServiceAccount>> + Send {
        std::future::ready::<crate::Result<crate::model::ServiceAccount>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Iam::patch_service_account].
    fn patch_service_account(
        &self,
        _req: crate::model::PatchServiceAccountRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ServiceAccount>> + Send {
        std::future::ready::<crate::Result<crate::model::ServiceAccount>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Iam::delete_service_account].
    fn delete_service_account(
        &self,
        _req: crate::model::DeleteServiceAccountRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Iam::undelete_service_account].
    fn undelete_service_account(
        &self,
        _req: crate::model::UndeleteServiceAccountRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::UndeleteServiceAccountResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::UndeleteServiceAccountResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Iam::enable_service_account].
    fn enable_service_account(
        &self,
        _req: crate::model::EnableServiceAccountRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Iam::disable_service_account].
    fn disable_service_account(
        &self,
        _req: crate::model::DisableServiceAccountRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Iam::list_service_account_keys].
    fn list_service_account_keys(
        &self,
        _req: crate::model::ListServiceAccountKeysRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListServiceAccountKeysResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListServiceAccountKeysResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Iam::get_service_account_key].
    fn get_service_account_key(
        &self,
        _req: crate::model::GetServiceAccountKeyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ServiceAccountKey>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ServiceAccountKey>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Iam::create_service_account_key].
    fn create_service_account_key(
        &self,
        _req: crate::model::CreateServiceAccountKeyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ServiceAccountKey>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ServiceAccountKey>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Iam::upload_service_account_key].
    fn upload_service_account_key(
        &self,
        _req: crate::model::UploadServiceAccountKeyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ServiceAccountKey>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ServiceAccountKey>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Iam::delete_service_account_key].
    fn delete_service_account_key(
        &self,
        _req: crate::model::DeleteServiceAccountKeyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Iam::disable_service_account_key].
    fn disable_service_account_key(
        &self,
        _req: crate::model::DisableServiceAccountKeyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Iam::enable_service_account_key].
    fn enable_service_account_key(
        &self,
        _req: crate::model::EnableServiceAccountKeyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Iam::sign_blob].
    fn sign_blob(
        &self,
        _req: crate::model::SignBlobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SignBlobResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::SignBlobResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Iam::sign_jwt].
    fn sign_jwt(
        &self,
        _req: crate::model::SignJwtRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SignJwtResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::SignJwtResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Iam::get_iam_policy].
    fn get_iam_policy(
        &self,
        _req: iam_v1::model::GetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::Policy>> + Send {
        std::future::ready::<crate::Result<iam_v1::model::Policy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Iam::set_iam_policy].
    fn set_iam_policy(
        &self,
        _req: iam_v1::model::SetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::Policy>> + Send {
        std::future::ready::<crate::Result<iam_v1::model::Policy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Iam::test_iam_permissions].
    fn test_iam_permissions(
        &self,
        _req: iam_v1::model::TestIamPermissionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::TestIamPermissionsResponse>> + Send
    {
        std::future::ready::<crate::Result<iam_v1::model::TestIamPermissionsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Iam::query_grantable_roles].
    fn query_grantable_roles(
        &self,
        _req: crate::model::QueryGrantableRolesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::QueryGrantableRolesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::QueryGrantableRolesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Iam::list_roles].
    fn list_roles(
        &self,
        _req: crate::model::ListRolesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListRolesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListRolesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Iam::get_role].
    fn get_role(
        &self,
        _req: crate::model::GetRoleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Role>> + Send {
        std::future::ready::<crate::Result<crate::model::Role>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Iam::create_role].
    fn create_role(
        &self,
        _req: crate::model::CreateRoleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Role>> + Send {
        std::future::ready::<crate::Result<crate::model::Role>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Iam::update_role].
    fn update_role(
        &self,
        _req: crate::model::UpdateRoleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Role>> + Send {
        std::future::ready::<crate::Result<crate::model::Role>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Iam::delete_role].
    fn delete_role(
        &self,
        _req: crate::model::DeleteRoleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Role>> + Send {
        std::future::ready::<crate::Result<crate::model::Role>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Iam::undelete_role].
    fn undelete_role(
        &self,
        _req: crate::model::UndeleteRoleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Role>> + Send {
        std::future::ready::<crate::Result<crate::model::Role>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Iam::query_testable_permissions].
    fn query_testable_permissions(
        &self,
        _req: crate::model::QueryTestablePermissionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::QueryTestablePermissionsResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::QueryTestablePermissionsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Iam::query_auditable_services].
    fn query_auditable_services(
        &self,
        _req: crate::model::QueryAuditableServicesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::QueryAuditableServicesResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::QueryAuditableServicesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Iam::lint_policy].
    fn lint_policy(
        &self,
        _req: crate::model::LintPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::LintPolicyResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::LintPolicyResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }
}
