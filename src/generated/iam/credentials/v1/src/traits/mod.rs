// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dyntraits;

/// A service account is a special type of Google account that belongs to your
/// application or a virtual machine (VM), instead of to an individual end user.
/// Your application assumes the identity of the service account to call Google
/// APIs, so that the users aren't directly involved.
///
/// Service account credentials are used to temporarily assume the identity
/// of the service account. Supported credential types include OAuth 2.0 access
/// tokens, OpenID Connect ID tokens, self-signed JSON Web Tokens (JWTs), and
/// more.
///
/// # Mocking
///
/// Application developers may use this trait to mock the iamcredentials clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait IAMCredentials: std::fmt::Debug + Send + Sync {
    /// Generates an OAuth 2.0 access token for a service account.
    fn generate_access_token(
        &self,
        _req: crate::model::GenerateAccessTokenRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::GenerateAccessTokenResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::GenerateAccessTokenResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Generates an OpenID Connect ID token for a service account.
    fn generate_id_token(
        &self,
        _req: crate::model::GenerateIdTokenRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::GenerateIdTokenResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::GenerateIdTokenResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Signs a blob using a service account's system-managed private key.
    fn sign_blob(
        &self,
        _req: crate::model::SignBlobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SignBlobResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::SignBlobResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Signs a JWT using a service account's system-managed private key.
    fn sign_jwt(
        &self,
        _req: crate::model::SignJwtRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SignJwtResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::SignJwtResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }
}
