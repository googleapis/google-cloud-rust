// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::IAMCredentials].
///
/// Application developers may need to implement this trait to mock
/// `client::IAMCredentials`.  In other use-cases, application developers only
/// use `client::IAMCredentials` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait IAMCredentials: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::IAMCredentials::generate_access_token].
    fn generate_access_token(
        &self,
        _req: crate::model::GenerateAccessTokenRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::GenerateAccessTokenResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::GenerateAccessTokenResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::IAMCredentials::generate_id_token].
    fn generate_id_token(
        &self,
        _req: crate::model::GenerateIdTokenRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::GenerateIdTokenResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::GenerateIdTokenResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::IAMCredentials::sign_blob].
    fn sign_blob(
        &self,
        _req: crate::model::SignBlobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::SignBlobResponse>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::SignBlobResponse>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::IAMCredentials::sign_jwt].
    fn sign_jwt(
        &self,
        _req: crate::model::SignJwtRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::SignJwtResponse>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::SignJwtResponse>>>(
            Err(Error::other("unimplemented")),
        )
    }
}
