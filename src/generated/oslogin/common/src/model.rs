// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate bytes;
extern crate serde;
extern crate serde_with;
extern crate std;
extern crate wkt;

/// The POSIX account information associated with a Google account.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PosixAccount {
    /// Only one POSIX account can be marked as primary.
    pub primary: bool,

    /// The username of the POSIX account.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub username: std::string::String,

    /// The user ID.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub uid: i64,

    /// The default group ID.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub gid: i64,

    /// The path to the home directory for this account.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub home_directory: std::string::String,

    /// The path to the logic shell for this account.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub shell: std::string::String,

    /// The GECOS (user information) entry for this account.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub gecos: std::string::String,

    /// System identifier for which account the username or uid applies to.
    /// By default, the empty value is used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub system_id: std::string::String,

    /// Output only. A POSIX account identifier.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub account_id: std::string::String,

    /// The operating system type where this account applies.
    pub operating_system_type: crate::model::OperatingSystemType,

    /// Output only. The canonical resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl PosixAccount {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [primary][crate::model::PosixAccount::primary].
    pub fn set_primary<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.primary = v.into();
        self
    }

    /// Sets the value of [username][crate::model::PosixAccount::username].
    pub fn set_username<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.username = v.into();
        self
    }

    /// Sets the value of [uid][crate::model::PosixAccount::uid].
    pub fn set_uid<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.uid = v.into();
        self
    }

    /// Sets the value of [gid][crate::model::PosixAccount::gid].
    pub fn set_gid<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.gid = v.into();
        self
    }

    /// Sets the value of [home_directory][crate::model::PosixAccount::home_directory].
    pub fn set_home_directory<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.home_directory = v.into();
        self
    }

    /// Sets the value of [shell][crate::model::PosixAccount::shell].
    pub fn set_shell<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.shell = v.into();
        self
    }

    /// Sets the value of [gecos][crate::model::PosixAccount::gecos].
    pub fn set_gecos<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.gecos = v.into();
        self
    }

    /// Sets the value of [system_id][crate::model::PosixAccount::system_id].
    pub fn set_system_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.system_id = v.into();
        self
    }

    /// Sets the value of [account_id][crate::model::PosixAccount::account_id].
    pub fn set_account_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.account_id = v.into();
        self
    }

    /// Sets the value of [operating_system_type][crate::model::PosixAccount::operating_system_type].
    pub fn set_operating_system_type<T: std::convert::Into<crate::model::OperatingSystemType>>(
        mut self,
        v: T,
    ) -> Self {
        self.operating_system_type = v.into();
        self
    }

    /// Sets the value of [name][crate::model::PosixAccount::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for PosixAccount {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.oslogin.common.PosixAccount"
    }
}

/// The SSH public key information associated with a Google account.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SshPublicKey {
    /// Public key text in SSH format, defined by
    /// <a href="https://www.ietf.org/rfc/rfc4253.txt" target="_blank">RFC4253</a>
    /// section 6.6.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub key: std::string::String,

    /// An expiration time in microseconds since epoch.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub expiration_time_usec: i64,

    /// Output only. The SHA-256 fingerprint of the SSH public key.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub fingerprint: std::string::String,

    /// Output only. The canonical resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl SshPublicKey {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [key][crate::model::SshPublicKey::key].
    pub fn set_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.key = v.into();
        self
    }

    /// Sets the value of [expiration_time_usec][crate::model::SshPublicKey::expiration_time_usec].
    pub fn set_expiration_time_usec<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.expiration_time_usec = v.into();
        self
    }

    /// Sets the value of [fingerprint][crate::model::SshPublicKey::fingerprint].
    pub fn set_fingerprint<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.fingerprint = v.into();
        self
    }

    /// Sets the value of [name][crate::model::SshPublicKey::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for SshPublicKey {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.oslogin.common.SshPublicKey"
    }
}

/// The operating system options for account entries.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct OperatingSystemType(std::borrow::Cow<'static, str>);

impl OperatingSystemType {
    /// Creates a new OperatingSystemType instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [OperatingSystemType](OperatingSystemType)
pub mod operating_system_type {
    use super::OperatingSystemType;

    /// The operating system type associated with the user account information is
    /// unspecified.
    pub const OPERATING_SYSTEM_TYPE_UNSPECIFIED: OperatingSystemType =
        OperatingSystemType::new("OPERATING_SYSTEM_TYPE_UNSPECIFIED");

    /// Linux user account information.
    pub const LINUX: OperatingSystemType = OperatingSystemType::new("LINUX");

    /// Windows user account information.
    pub const WINDOWS: OperatingSystemType = OperatingSystemType::new("WINDOWS");
}

impl std::convert::From<std::string::String> for OperatingSystemType {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

impl std::default::Default for OperatingSystemType {
    fn default() -> Self {
        operating_system_type::OPERATING_SYSTEM_TYPE_UNSPECIFIED
    }
}
