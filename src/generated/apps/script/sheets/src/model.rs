// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate apps_script_type;
extern crate bytes;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate wkt;

/// Sheets add-on manifest.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct SheetsAddOnManifest {
    /// If present, this overrides the configuration from
    /// `addOns.common.homepageTrigger`.
    pub homepage_trigger: std::option::Option<apps_script_type::model::HomepageExtensionPoint>,

    /// Endpoint to execute when file scope authorization is granted
    /// for this document/user pair.
    pub on_file_scope_granted_trigger: std::option::Option<crate::model::SheetsExtensionPoint>,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SheetsAddOnManifest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [homepage_trigger][crate::model::SheetsAddOnManifest::homepage_trigger].
    pub fn set_homepage_trigger<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<apps_script_type::model::HomepageExtensionPoint>,
    {
        self.homepage_trigger = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [homepage_trigger][crate::model::SheetsAddOnManifest::homepage_trigger].
    pub fn set_or_clear_homepage_trigger<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<apps_script_type::model::HomepageExtensionPoint>,
    {
        self.homepage_trigger = v.map(|x| x.into());
        self
    }

    /// Sets the value of [on_file_scope_granted_trigger][crate::model::SheetsAddOnManifest::on_file_scope_granted_trigger].
    pub fn set_on_file_scope_granted_trigger<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::SheetsExtensionPoint>,
    {
        self.on_file_scope_granted_trigger = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [on_file_scope_granted_trigger][crate::model::SheetsAddOnManifest::on_file_scope_granted_trigger].
    pub fn set_or_clear_on_file_scope_granted_trigger<T>(
        mut self,
        v: std::option::Option<T>,
    ) -> Self
    where
        T: std::convert::Into<crate::model::SheetsExtensionPoint>,
    {
        self.on_file_scope_granted_trigger = v.map(|x| x.into());
        self
    }
}

impl wkt::message::Message for SheetsAddOnManifest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.apps.script.type.sheets.SheetsAddOnManifest"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for SheetsAddOnManifest {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __homepage_trigger,
            __on_file_scope_granted_trigger,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for SheetsAddOnManifest")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "homepageTrigger" => Ok(__FieldTag::__homepage_trigger),
                            "homepage_trigger" => Ok(__FieldTag::__homepage_trigger),
                            "onFileScopeGrantedTrigger" => {
                                Ok(__FieldTag::__on_file_scope_granted_trigger)
                            }
                            "on_file_scope_granted_trigger" => {
                                Ok(__FieldTag::__on_file_scope_granted_trigger)
                            }
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = SheetsAddOnManifest;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct SheetsAddOnManifest")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__homepage_trigger => {
                            if !fields.insert(__FieldTag::__homepage_trigger) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for homepage_trigger",
                                ));
                            }
                            result.homepage_trigger = map.next_value::<std::option::Option<
                                apps_script_type::model::HomepageExtensionPoint,
                            >>()?;
                        }
                        __FieldTag::__on_file_scope_granted_trigger => {
                            if !fields.insert(__FieldTag::__on_file_scope_granted_trigger) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for on_file_scope_granted_trigger",
                                ));
                            }
                            result.on_file_scope_granted_trigger = map.next_value::<std::option::Option<crate::model::SheetsExtensionPoint>>()?
                                ;
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for SheetsAddOnManifest {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if self.homepage_trigger.is_some() {
            state.serialize_entry("homepageTrigger", &self.homepage_trigger)?;
        }
        if self.on_file_scope_granted_trigger.is_some() {
            state.serialize_entry(
                "onFileScopeGrantedTrigger",
                &self.on_file_scope_granted_trigger,
            )?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Common format for declaring a Sheets add-on's triggers.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct SheetsExtensionPoint {
    /// Required. The endpoint to execute when this extension point is activated.
    pub run_function: std::string::String,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SheetsExtensionPoint {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [run_function][crate::model::SheetsExtensionPoint::run_function].
    pub fn set_run_function<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.run_function = v.into();
        self
    }
}

impl wkt::message::Message for SheetsExtensionPoint {
    fn typename() -> &'static str {
        "type.googleapis.com/google.apps.script.type.sheets.SheetsExtensionPoint"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for SheetsExtensionPoint {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __run_function,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for SheetsExtensionPoint")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "runFunction" => Ok(__FieldTag::__run_function),
                            "run_function" => Ok(__FieldTag::__run_function),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = SheetsExtensionPoint;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct SheetsExtensionPoint")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__run_function => {
                            if !fields.insert(__FieldTag::__run_function) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for run_function",
                                ));
                            }
                            result.run_function = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for SheetsExtensionPoint {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !self.run_function.is_empty() {
            state.serialize_entry("runFunction", &self.run_function)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}
