// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate apps_script_type;
extern crate bytes;
extern crate serde;
extern crate serde_with;
extern crate std;
extern crate wkt;

/// Calendar add-on manifest.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CalendarAddOnManifest {
    /// Defines an endpoint that will be executed contexts that don't
    /// match a declared contextual trigger. Any cards generated by this function
    /// will always be available to the user, but may be eclipsed by contextual
    /// content when this add-on declares more targeted triggers.
    ///
    /// If present, this overrides the configuration from
    /// `addOns.common.homepageTrigger`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub homepage_trigger: std::option::Option<apps_script_type::model::HomepageExtensionPoint>,

    /// Defines conference solutions provided by this add-on.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub conference_solution: std::vec::Vec<crate::model::ConferenceSolution>,

    /// An endpoint to execute that creates a URL to the add-on's settings page.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub create_settings_url_function: std::string::String,

    /// An endpoint to trigger when an event is opened (viewed/edited).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub event_open_trigger: std::option::Option<crate::model::CalendarExtensionPoint>,

    /// An endpoint to trigger when the open event is updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub event_update_trigger: std::option::Option<crate::model::CalendarExtensionPoint>,

    /// Define the level of data access when an event addon is triggered.
    pub current_event_access: crate::model::calendar_add_on_manifest::EventAccess,
}

impl CalendarAddOnManifest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [homepage_trigger][crate::model::CalendarAddOnManifest::homepage_trigger].
    pub fn set_homepage_trigger<
        T: std::convert::Into<std::option::Option<apps_script_type::model::HomepageExtensionPoint>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.homepage_trigger = v.into();
        self
    }

    /// Sets the value of [create_settings_url_function][crate::model::CalendarAddOnManifest::create_settings_url_function].
    pub fn set_create_settings_url_function<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_settings_url_function = v.into();
        self
    }

    /// Sets the value of [event_open_trigger][crate::model::CalendarAddOnManifest::event_open_trigger].
    pub fn set_event_open_trigger<
        T: std::convert::Into<std::option::Option<crate::model::CalendarExtensionPoint>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.event_open_trigger = v.into();
        self
    }

    /// Sets the value of [event_update_trigger][crate::model::CalendarAddOnManifest::event_update_trigger].
    pub fn set_event_update_trigger<
        T: std::convert::Into<std::option::Option<crate::model::CalendarExtensionPoint>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.event_update_trigger = v.into();
        self
    }

    /// Sets the value of [current_event_access][crate::model::CalendarAddOnManifest::current_event_access].
    pub fn set_current_event_access<
        T: std::convert::Into<crate::model::calendar_add_on_manifest::EventAccess>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.current_event_access = v.into();
        self
    }

    /// Sets the value of [conference_solution][crate::model::CalendarAddOnManifest::conference_solution].
    pub fn set_conference_solution<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ConferenceSolution>,
    {
        use std::iter::Iterator;
        self.conference_solution = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CalendarAddOnManifest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.apps.script.type.calendar.CalendarAddOnManifest"
    }
}

/// Defines additional types related to CalendarAddOnManifest
pub mod calendar_add_on_manifest {
    #[allow(unused_imports)]
    use super::*;

    /// An enum defining the level of data access event triggers require.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct EventAccess(std::borrow::Cow<'static, str>);

    impl EventAccess {
        /// Creates a new EventAccess instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [EventAccess](EventAccess)
    pub mod event_access {
        use super::EventAccess;

        /// Default value when nothing is set for EventAccess.
        pub const UNSPECIFIED: EventAccess = EventAccess::new("UNSPECIFIED");

        /// METADATA gives event triggers the permission to access the metadata of
        /// events such as event id and calendar id.
        pub const METADATA: EventAccess = EventAccess::new("METADATA");

        /// READ gives event triggers access to all provided event fields including
        /// the metadata, attendees, and conference data.
        pub const READ: EventAccess = EventAccess::new("READ");

        /// WRITE gives event triggers access to the metadata of events and the
        /// ability to perform all actions, including adding attendees and setting
        /// conference data.
        pub const WRITE: EventAccess = EventAccess::new("WRITE");

        /// READ_WRITE gives event triggers access to all provided event fields
        /// including the metadata, attendees, and conference data and the ability to
        /// perform all actions.
        pub const READ_WRITE: EventAccess = EventAccess::new("READ_WRITE");
    }

    impl std::convert::From<std::string::String> for EventAccess {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Defines conference related values.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ConferenceSolution {
    /// Required. The endpoint to call when ConferenceData should be created.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub on_create_function: std::string::String,

    /// Required. IDs should be unique across ConferenceSolutions within one
    /// add-on, but this is not strictly enforced. It is up to the add-on developer
    /// to assign them uniquely, otherwise the wrong ConferenceSolution may be
    /// used when the add-on is triggered. While the developer may change the
    /// display name of an add-on, the ID should not be changed.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,

    /// Required. The display name of the ConferenceSolution.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The URL for the logo image of the ConferenceSolution.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub logo_url: std::string::String,
}

impl ConferenceSolution {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [on_create_function][crate::model::ConferenceSolution::on_create_function].
    pub fn set_on_create_function<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.on_create_function = v.into();
        self
    }

    /// Sets the value of [id][crate::model::ConferenceSolution::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [name][crate::model::ConferenceSolution::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [logo_url][crate::model::ConferenceSolution::logo_url].
    pub fn set_logo_url<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.logo_url = v.into();
        self
    }
}

impl wkt::message::Message for ConferenceSolution {
    fn typename() -> &'static str {
        "type.googleapis.com/google.apps.script.type.calendar.ConferenceSolution"
    }
}

/// Common format for declaring a calendar add-on's triggers.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CalendarExtensionPoint {
    /// Required. The endpoint to execute when this extension point is
    /// activated.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub run_function: std::string::String,
}

impl CalendarExtensionPoint {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [run_function][crate::model::CalendarExtensionPoint::run_function].
    pub fn set_run_function<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.run_function = v.into();
        self
    }
}

impl wkt::message::Message for CalendarExtensionPoint {
    fn typename() -> &'static str {
        "type.googleapis.com/google.apps.script.type.calendar.CalendarExtensionPoint"
    }
}
