// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#[allow(unused_imports)]
use super::*;

impl std::fmt::Debug for super::CalendarAddOnManifest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CalendarAddOnManifest");
        debug_struct.field("homepage_trigger", &self.homepage_trigger);
        debug_struct.field("conference_solution", &self.conference_solution);
        debug_struct.field(
            "create_settings_url_function",
            &self.create_settings_url_function,
        );
        debug_struct.field("event_open_trigger", &self.event_open_trigger);
        debug_struct.field("event_update_trigger", &self.event_update_trigger);
        debug_struct.field("current_event_access", &self.current_event_access);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ConferenceSolution {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ConferenceSolution");
        debug_struct.field("on_create_function", &self.on_create_function);
        debug_struct.field("id", &self.id);
        debug_struct.field("name", &self.name);
        debug_struct.field("logo_url", &self.logo_url);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::CalendarExtensionPoint {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CalendarExtensionPoint");
        debug_struct.field("run_function", &self.run_function);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}
