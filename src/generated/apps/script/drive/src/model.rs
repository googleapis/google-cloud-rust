// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate apps_script_type;
extern crate bytes;
extern crate serde;
extern crate serde_with;
extern crate std;
extern crate wkt;

/// Drive add-on manifest.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DriveAddOnManifest {
    /// If present, this overrides the configuration from
    /// `addOns.common.homepageTrigger`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub homepage_trigger: std::option::Option<apps_script_type::model::HomepageExtensionPoint>,

    /// Corresponds to behvior that should execute when items are selected
    /// in relevant Drive view (e.g. the My Drive Doclist).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub on_items_selected_trigger: std::option::Option<crate::model::DriveExtensionPoint>,
}

impl DriveAddOnManifest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [homepage_trigger][crate::model::DriveAddOnManifest::homepage_trigger].
    pub fn set_homepage_trigger<
        T: std::convert::Into<std::option::Option<apps_script_type::model::HomepageExtensionPoint>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.homepage_trigger = v.into();
        self
    }

    /// Sets the value of [on_items_selected_trigger][crate::model::DriveAddOnManifest::on_items_selected_trigger].
    pub fn set_on_items_selected_trigger<
        T: std::convert::Into<std::option::Option<crate::model::DriveExtensionPoint>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.on_items_selected_trigger = v.into();
        self
    }
}

impl wkt::message::Message for DriveAddOnManifest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.apps.script.type.drive.DriveAddOnManifest"
    }
}

/// A generic extension point with common features, e.g. something that simply
/// needs a corresponding run function to work.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DriveExtensionPoint {
    /// Required. The endpoint to execute when this extension point is
    /// activated.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub run_function: std::string::String,
}

impl DriveExtensionPoint {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [run_function][crate::model::DriveExtensionPoint::run_function].
    pub fn set_run_function<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.run_function = v.into();
        self
    }
}

impl wkt::message::Message for DriveExtensionPoint {
    fn typename() -> &'static str {
        "type.googleapis.com/google.apps.script.type.drive.DriveExtensionPoint"
    }
}
