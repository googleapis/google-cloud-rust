// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate bytes;
extern crate serde;
extern crate serde_with;
extern crate std;
extern crate wkt;

/// The encryption state of the device.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct DeviceEncryptionStatus(std::borrow::Cow<'static, str>);

impl DeviceEncryptionStatus {
    /// Creates a new DeviceEncryptionStatus instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [DeviceEncryptionStatus](DeviceEncryptionStatus)
pub mod device_encryption_status {
    use super::DeviceEncryptionStatus;

    /// The encryption status of the device is not specified or not known.
    pub const ENCRYPTION_UNSPECIFIED: DeviceEncryptionStatus =
        DeviceEncryptionStatus::new("ENCRYPTION_UNSPECIFIED");

    /// The device does not support encryption.
    pub const ENCRYPTION_UNSUPPORTED: DeviceEncryptionStatus =
        DeviceEncryptionStatus::new("ENCRYPTION_UNSUPPORTED");

    /// The device supports encryption, but is currently unencrypted.
    pub const UNENCRYPTED: DeviceEncryptionStatus = DeviceEncryptionStatus::new("UNENCRYPTED");

    /// The device is encrypted.
    pub const ENCRYPTED: DeviceEncryptionStatus = DeviceEncryptionStatus::new("ENCRYPTED");
}

impl std::convert::From<std::string::String> for DeviceEncryptionStatus {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

/// The operating system type of the device.
/// Next id: 7
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct OsType(std::borrow::Cow<'static, str>);

impl OsType {
    /// Creates a new OsType instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [OsType](OsType)
pub mod os_type {
    use super::OsType;

    /// The operating system of the device is not specified or not known.
    pub const OS_UNSPECIFIED: OsType = OsType::new("OS_UNSPECIFIED");

    /// A desktop Mac operating system.
    pub const DESKTOP_MAC: OsType = OsType::new("DESKTOP_MAC");

    /// A desktop Windows operating system.
    pub const DESKTOP_WINDOWS: OsType = OsType::new("DESKTOP_WINDOWS");

    /// A desktop Linux operating system.
    pub const DESKTOP_LINUX: OsType = OsType::new("DESKTOP_LINUX");

    /// A desktop ChromeOS operating system.
    pub const DESKTOP_CHROME_OS: OsType = OsType::new("DESKTOP_CHROME_OS");

    /// An Android operating system.
    pub const ANDROID: OsType = OsType::new("ANDROID");

    /// An iOS operating system.
    pub const IOS: OsType = OsType::new("IOS");
}

impl std::convert::From<std::string::String> for OsType {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

/// The degree to which the device is managed by the Cloud organization.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct DeviceManagementLevel(std::borrow::Cow<'static, str>);

impl DeviceManagementLevel {
    /// Creates a new DeviceManagementLevel instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [DeviceManagementLevel](DeviceManagementLevel)
pub mod device_management_level {
    use super::DeviceManagementLevel;

    /// The device's management level is not specified or not known.
    pub const MANAGEMENT_UNSPECIFIED: DeviceManagementLevel =
        DeviceManagementLevel::new("MANAGEMENT_UNSPECIFIED");

    /// The device is not managed.
    pub const NONE: DeviceManagementLevel = DeviceManagementLevel::new("NONE");

    /// Basic management is enabled, which is generally limited to monitoring and
    /// wiping the corporate account.
    pub const BASIC: DeviceManagementLevel = DeviceManagementLevel::new("BASIC");

    /// Complete device management. This includes more thorough monitoring and the
    /// ability to directly manage the device (such as remote wiping). This can be
    /// enabled through the Android Enterprise Platform.
    pub const COMPLETE: DeviceManagementLevel = DeviceManagementLevel::new("COMPLETE");
}

impl std::convert::From<std::string::String> for DeviceManagementLevel {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}
