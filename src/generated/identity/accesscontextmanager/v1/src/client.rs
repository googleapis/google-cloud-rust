// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Access Context Manager API.
///
/// # Service Description
///
/// API for setting [access levels]
/// [google.identity.accesscontextmanager.v1.AccessLevel] and [service
/// perimeters] [google.identity.accesscontextmanager.v1.ServicePerimeter]
/// for Google Cloud projects. Each organization has one [access policy]
/// [google.identity.accesscontextmanager.v1.AccessPolicy] that contains the
/// [access levels] [google.identity.accesscontextmanager.v1.AccessLevel]
/// and [service perimeters]
/// [google.identity.accesscontextmanager.v1.ServicePerimeter]. This
/// [access policy] [google.identity.accesscontextmanager.v1.AccessPolicy] is
/// applicable to all resources in the organization.
/// AccessPolicies
///
/// # Configuration
///
/// `AccessContextManager` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `AccessContextManager` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `AccessContextManager` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct AccessContextManager {
    inner: Arc<dyn crate::stubs::dynamic::AccessContextManager>,
}

impl AccessContextManager {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::AccessContextManager + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::AccessContextManager>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::AccessContextManager> {
        crate::transport::AccessContextManager::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::AccessContextManager> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::AccessContextManager::new)
    }

    /// Lists all [access policies]
    /// [google.identity.accesscontextmanager.v1.AccessPolicy] in an
    /// organization.
    pub fn list_access_policies(
        &self,
    ) -> crate::builders::access_context_manager::ListAccessPolicies {
        crate::builders::access_context_manager::ListAccessPolicies::new(self.inner.clone())
    }

    /// Returns an [access policy]
    /// [google.identity.accesscontextmanager.v1.AccessPolicy] based on the name.
    pub fn get_access_policy(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::GetAccessPolicy {
        crate::builders::access_context_manager::GetAccessPolicy::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates an access policy. This method fails if the organization already has
    /// an access policy. The long-running operation has a successful status
    /// after the access policy propagates to long-lasting storage.
    /// Syntactic and basic semantic errors are returned in `metadata` as a
    /// BadRequest proto.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_access_policy(
        &self,
    ) -> crate::builders::access_context_manager::CreateAccessPolicy {
        crate::builders::access_context_manager::CreateAccessPolicy::new(self.inner.clone())
    }

    /// Updates an [access policy]
    /// [google.identity.accesscontextmanager.v1.AccessPolicy]. The
    /// long-running operation from this RPC has a successful status after the
    /// changes to the [access policy]
    /// [google.identity.accesscontextmanager.v1.AccessPolicy] propagate
    /// to long-lasting storage.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_access_policy(
        &self,
        policy: impl Into<crate::model::AccessPolicy>,
    ) -> crate::builders::access_context_manager::UpdateAccessPolicy {
        crate::builders::access_context_manager::UpdateAccessPolicy::new(self.inner.clone())
            .set_policy(policy.into())
    }

    /// Deletes an [access policy]
    /// [google.identity.accesscontextmanager.v1.AccessPolicy] based on the
    /// resource name. The long-running operation has a successful status after the
    /// [access policy] [google.identity.accesscontextmanager.v1.AccessPolicy]
    /// is removed from long-lasting storage.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_access_policy(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::DeleteAccessPolicy {
        crate::builders::access_context_manager::DeleteAccessPolicy::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all [access levels]
    /// [google.identity.accesscontextmanager.v1.AccessLevel] for an access
    /// policy.
    pub fn list_access_levels(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::ListAccessLevels {
        crate::builders::access_context_manager::ListAccessLevels::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets an [access level]
    /// [google.identity.accesscontextmanager.v1.AccessLevel] based on the resource
    /// name.
    pub fn get_access_level(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::GetAccessLevel {
        crate::builders::access_context_manager::GetAccessLevel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates an [access level]
    /// [google.identity.accesscontextmanager.v1.AccessLevel]. The long-running
    /// operation from this RPC has a successful status after the [access
    /// level] [google.identity.accesscontextmanager.v1.AccessLevel]
    /// propagates to long-lasting storage. If [access levels]
    /// [google.identity.accesscontextmanager.v1.AccessLevel] contain
    /// errors, an error response is returned for the first error encountered.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_access_level(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::CreateAccessLevel {
        crate::builders::access_context_manager::CreateAccessLevel::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an [access level]
    /// [google.identity.accesscontextmanager.v1.AccessLevel]. The long-running
    /// operation from this RPC has a successful status after the changes to
    /// the [access level]
    /// [google.identity.accesscontextmanager.v1.AccessLevel] propagate
    /// to long-lasting storage. If [access levels]
    /// [google.identity.accesscontextmanager.v1.AccessLevel] contain
    /// errors, an error response is returned for the first error encountered.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_access_level(
        &self,
        access_level: impl Into<crate::model::AccessLevel>,
    ) -> crate::builders::access_context_manager::UpdateAccessLevel {
        crate::builders::access_context_manager::UpdateAccessLevel::new(self.inner.clone())
            .set_access_level(access_level.into())
    }

    /// Deletes an [access level]
    /// [google.identity.accesscontextmanager.v1.AccessLevel] based on the resource
    /// name. The long-running operation from this RPC has a successful status
    /// after the [access level]
    /// [google.identity.accesscontextmanager.v1.AccessLevel] has been removed
    /// from long-lasting storage.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_access_level(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::DeleteAccessLevel {
        crate::builders::access_context_manager::DeleteAccessLevel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Replaces all existing [access levels]
    /// [google.identity.accesscontextmanager.v1.AccessLevel] in an [access
    /// policy] [google.identity.accesscontextmanager.v1.AccessPolicy] with
    /// the [access levels]
    /// [google.identity.accesscontextmanager.v1.AccessLevel] provided. This
    /// is done atomically. The long-running operation from this RPC has a
    /// successful status after all replacements propagate to long-lasting
    /// storage. If the replacement contains errors, an error response is returned
    /// for the first error encountered.  Upon error, the replacement is cancelled,
    /// and existing [access levels]
    /// [google.identity.accesscontextmanager.v1.AccessLevel] are not
    /// affected. The Operation.response field contains
    /// ReplaceAccessLevelsResponse. Removing [access levels]
    /// [google.identity.accesscontextmanager.v1.AccessLevel] contained in existing
    /// [service perimeters]
    /// [google.identity.accesscontextmanager.v1.ServicePerimeter] result in an
    /// error.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn replace_access_levels(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::ReplaceAccessLevels {
        crate::builders::access_context_manager::ReplaceAccessLevels::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all [service perimeters]
    /// [google.identity.accesscontextmanager.v1.ServicePerimeter] for an
    /// access policy.
    pub fn list_service_perimeters(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::ListServicePerimeters {
        crate::builders::access_context_manager::ListServicePerimeters::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a [service perimeter]
    /// [google.identity.accesscontextmanager.v1.ServicePerimeter] based on the
    /// resource name.
    pub fn get_service_perimeter(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::GetServicePerimeter {
        crate::builders::access_context_manager::GetServicePerimeter::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a [service perimeter]
    /// [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
    /// long-running operation from this RPC has a successful status after the
    /// [service perimeter]
    /// [google.identity.accesscontextmanager.v1.ServicePerimeter]
    /// propagates to long-lasting storage. If a [service perimeter]
    /// [google.identity.accesscontextmanager.v1.ServicePerimeter] contains
    /// errors, an error response is returned for the first error encountered.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_service_perimeter(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::CreateServicePerimeter {
        crate::builders::access_context_manager::CreateServicePerimeter::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a [service perimeter]
    /// [google.identity.accesscontextmanager.v1.ServicePerimeter]. The
    /// long-running operation from this RPC has a successful status after the
    /// [service perimeter]
    /// [google.identity.accesscontextmanager.v1.ServicePerimeter]
    /// propagates to long-lasting storage. If a [service perimeter]
    /// [google.identity.accesscontextmanager.v1.ServicePerimeter] contains
    /// errors, an error response is returned for the first error encountered.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_service_perimeter(
        &self,
        service_perimeter: impl Into<crate::model::ServicePerimeter>,
    ) -> crate::builders::access_context_manager::UpdateServicePerimeter {
        crate::builders::access_context_manager::UpdateServicePerimeter::new(self.inner.clone())
            .set_service_perimeter(service_perimeter.into())
    }

    /// Deletes a [service perimeter]
    /// [google.identity.accesscontextmanager.v1.ServicePerimeter] based on the
    /// resource name. The long-running operation from this RPC has a successful
    /// status after the [service perimeter]
    /// [google.identity.accesscontextmanager.v1.ServicePerimeter] is removed from
    /// long-lasting storage.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_service_perimeter(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::DeleteServicePerimeter {
        crate::builders::access_context_manager::DeleteServicePerimeter::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Replace all existing [service perimeters]
    /// [google.identity.accesscontextmanager.v1.ServicePerimeter] in an [access
    /// policy] [google.identity.accesscontextmanager.v1.AccessPolicy] with the
    /// [service perimeters]
    /// [google.identity.accesscontextmanager.v1.ServicePerimeter] provided. This
    /// is done atomically. The long-running operation from this RPC has a
    /// successful status after all replacements propagate to long-lasting storage.
    /// Replacements containing errors result in an error response for the first
    /// error encountered. Upon an error, replacement are cancelled and existing
    /// [service perimeters]
    /// [google.identity.accesscontextmanager.v1.ServicePerimeter] are not
    /// affected. The Operation.response field contains
    /// ReplaceServicePerimetersResponse.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn replace_service_perimeters(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::ReplaceServicePerimeters {
        crate::builders::access_context_manager::ReplaceServicePerimeters::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Commits the dry-run specification for all the [service perimeters]
    /// [google.identity.accesscontextmanager.v1.ServicePerimeter] in an
    /// [access policy][google.identity.accesscontextmanager.v1.AccessPolicy].
    /// A commit operation on a service perimeter involves copying its `spec` field
    /// to the `status` field of the service perimeter. Only [service perimeters]
    /// [google.identity.accesscontextmanager.v1.ServicePerimeter] with
    /// `use_explicit_dry_run_spec` field set to true are affected by a commit
    /// operation. The long-running operation from this RPC has a successful
    /// status after the dry-run specifications for all the [service perimeters]
    /// [google.identity.accesscontextmanager.v1.ServicePerimeter] have been
    /// committed. If a commit fails, it causes the long-running operation to
    /// return an error response and the entire commit operation is cancelled.
    /// When successful, the Operation.response field contains
    /// CommitServicePerimetersResponse. The `dry_run` and the `spec` fields are
    /// cleared after a successful commit operation.
    ///
    /// [google.identity.accesscontextmanager.v1.AccessPolicy]: crate::model::AccessPolicy
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn commit_service_perimeters(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::CommitServicePerimeters {
        crate::builders::access_context_manager::CommitServicePerimeters::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all [GcpUserAccessBindings]
    /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] for a
    /// Google Cloud organization.
    pub fn list_gcp_user_access_bindings(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::ListGcpUserAccessBindings {
        crate::builders::access_context_manager::ListGcpUserAccessBindings::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets the [GcpUserAccessBinding]
    /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding] with
    /// the given name.
    pub fn get_gcp_user_access_binding(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::GetGcpUserAccessBinding {
        crate::builders::access_context_manager::GetGcpUserAccessBinding::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a [GcpUserAccessBinding]
    /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding]. If the
    /// client specifies a [name]
    /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.name],
    /// the server ignores it. Fails if a resource already exists with the same
    /// [group_key]
    /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding.group_key].
    /// Completion of this long-running operation does not necessarily signify that
    /// the new binding is deployed onto all affected users, which may take more
    /// time.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_gcp_user_access_binding(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::CreateGcpUserAccessBinding {
        crate::builders::access_context_manager::CreateGcpUserAccessBinding::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a [GcpUserAccessBinding]
    /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
    /// Completion of this long-running operation does not necessarily signify that
    /// the changed binding is deployed onto all affected users, which may take
    /// more time.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_gcp_user_access_binding(
        &self,
        gcp_user_access_binding: impl Into<crate::model::GcpUserAccessBinding>,
    ) -> crate::builders::access_context_manager::UpdateGcpUserAccessBinding {
        crate::builders::access_context_manager::UpdateGcpUserAccessBinding::new(self.inner.clone())
            .set_gcp_user_access_binding(gcp_user_access_binding.into())
    }

    /// Deletes a [GcpUserAccessBinding]
    /// [google.identity.accesscontextmanager.v1.GcpUserAccessBinding].
    /// Completion of this long-running operation does not necessarily signify that
    /// the binding deletion is deployed onto all affected users, which may take
    /// more time.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_gcp_user_access_binding(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::DeleteGcpUserAccessBinding {
        crate::builders::access_context_manager::DeleteGcpUserAccessBinding::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the IAM policy for the specified Access Context Manager
    /// [access policy][google.identity.accesscontextmanager.v1.AccessPolicy].
    /// This method replaces the existing IAM policy on the access policy. The IAM
    /// policy controls the set of users who can perform specific operations on the
    /// Access Context Manager [access
    /// policy][google.identity.accesscontextmanager.v1.AccessPolicy].
    ///
    /// [google.identity.accesscontextmanager.v1.AccessPolicy]: crate::model::AccessPolicy
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::SetIamPolicy {
        crate::builders::access_context_manager::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the IAM policy for the specified Access Context Manager
    /// [access policy][google.identity.accesscontextmanager.v1.AccessPolicy].
    ///
    /// [google.identity.accesscontextmanager.v1.AccessPolicy]: crate::model::AccessPolicy
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::GetIamPolicy {
        crate::builders::access_context_manager::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns the IAM permissions that the caller has on the specified Access
    /// Context Manager resource. The resource can be an
    /// [AccessPolicy][google.identity.accesscontextmanager.v1.AccessPolicy],
    /// [AccessLevel][google.identity.accesscontextmanager.v1.AccessLevel], or
    /// [ServicePerimeter][google.identity.accesscontextmanager.v1.ServicePerimeter
    /// ]. This method does not support other resources.
    ///
    /// [google.identity.accesscontextmanager.v1.AccessLevel]: crate::model::AccessLevel
    /// [google.identity.accesscontextmanager.v1.AccessPolicy]: crate::model::AccessPolicy
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::TestIamPermissions {
        crate::builders::access_context_manager::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::access_context_manager::GetOperation {
        crate::builders::access_context_manager::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
