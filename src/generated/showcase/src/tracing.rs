// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [Compliance](super::stub::Compliance) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct Compliance<T>
where
    T: super::stub::Compliance + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> Compliance<T>
where
    T: super::stub::Compliance + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stub::Compliance for Compliance<T>
where
    T: super::stub::Compliance + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn repeat_data_body(
        &self,
        req: crate::model::RepeatRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::RepeatResponse>> {
        self.inner.repeat_data_body(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn repeat_data_body_info(
        &self,
        req: crate::model::RepeatRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::RepeatResponse>> {
        self.inner.repeat_data_body_info(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn repeat_data_query(
        &self,
        req: crate::model::RepeatRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::RepeatResponse>> {
        self.inner.repeat_data_query(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn repeat_data_simple_path(
        &self,
        req: crate::model::RepeatRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::RepeatResponse>> {
        self.inner.repeat_data_simple_path(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn repeat_data_path_resource(
        &self,
        req: crate::model::RepeatRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::RepeatResponse>> {
        self.inner.repeat_data_path_resource(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn repeat_data_path_trailing_resource(
        &self,
        req: crate::model::RepeatRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::RepeatResponse>> {
        self.inner
            .repeat_data_path_trailing_resource(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn repeat_data_body_put(
        &self,
        req: crate::model::RepeatRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::RepeatResponse>> {
        self.inner.repeat_data_body_put(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn repeat_data_body_patch(
        &self,
        req: crate::model::RepeatRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::RepeatResponse>> {
        self.inner.repeat_data_body_patch(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_enum(
        &self,
        req: crate::model::EnumRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::EnumResponse>> {
        self.inner.get_enum(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn verify_enum(
        &self,
        req: crate::model::EnumResponse,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::EnumResponse>> {
        self.inner.verify_enum(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::ListLocationsResponse>> {
        self.inner.list_locations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::Location>> {
        self.inner.get_location(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        self.inner.set_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        self.inner.get_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>> {
        self.inner.test_iam_permissions(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::ListOperationsResponse>> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        self.inner.get_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.delete_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.cancel_operation(req, options).await
    }
}

/// Implements a [Echo](super::stub::Echo) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct Echo<T>
where
    T: super::stub::Echo + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> Echo<T>
where
    T: super::stub::Echo + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stub::Echo for Echo<T>
where
    T: super::stub::Echo + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn echo(
        &self,
        req: crate::model::EchoRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::EchoResponse>> {
        self.inner.echo(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn echo_error_details(
        &self,
        req: crate::model::EchoErrorDetailsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::EchoErrorDetailsResponse>> {
        self.inner.echo_error_details(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn fail_echo_with_details(
        &self,
        req: crate::model::FailEchoWithDetailsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::FailEchoWithDetailsResponse>> {
        self.inner.fail_echo_with_details(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn paged_expand(
        &self,
        req: crate::model::PagedExpandRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::PagedExpandResponse>> {
        self.inner.paged_expand(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn paged_expand_legacy(
        &self,
        req: crate::model::PagedExpandLegacyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::PagedExpandResponse>> {
        self.inner.paged_expand_legacy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn paged_expand_legacy_mapped(
        &self,
        req: crate::model::PagedExpandRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::PagedExpandLegacyMappedResponse>> {
        self.inner.paged_expand_legacy_mapped(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn wait(
        &self,
        req: crate::model::WaitRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        self.inner.wait(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn block(
        &self,
        req: crate::model::BlockRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::BlockResponse>> {
        self.inner.block(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::ListLocationsResponse>> {
        self.inner.list_locations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::Location>> {
        self.inner.get_location(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        self.inner.set_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        self.inner.get_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>> {
        self.inner.test_iam_permissions(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::ListOperationsResponse>> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        self.inner.get_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.delete_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.cancel_operation(req, options).await
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        self.inner.get_polling_error_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}

/// Implements a [Identity](super::stub::Identity) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct Identity<T>
where
    T: super::stub::Identity + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> Identity<T>
where
    T: super::stub::Identity + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stub::Identity for Identity<T>
where
    T: super::stub::Identity + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn create_user(
        &self,
        req: crate::model::CreateUserRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::User>> {
        self.inner.create_user(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_user(
        &self,
        req: crate::model::GetUserRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::User>> {
        self.inner.get_user(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_user(
        &self,
        req: crate::model::UpdateUserRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::User>> {
        self.inner.update_user(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_user(
        &self,
        req: crate::model::DeleteUserRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.delete_user(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_users(
        &self,
        req: crate::model::ListUsersRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListUsersResponse>> {
        self.inner.list_users(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::ListLocationsResponse>> {
        self.inner.list_locations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::Location>> {
        self.inner.get_location(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        self.inner.set_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        self.inner.get_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>> {
        self.inner.test_iam_permissions(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::ListOperationsResponse>> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        self.inner.get_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.delete_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.cancel_operation(req, options).await
    }
}

/// Implements a [Messaging](super::stub::Messaging) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct Messaging<T>
where
    T: super::stub::Messaging + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> Messaging<T>
where
    T: super::stub::Messaging + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stub::Messaging for Messaging<T>
where
    T: super::stub::Messaging + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn create_room(
        &self,
        req: crate::model::CreateRoomRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Room>> {
        self.inner.create_room(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_room(
        &self,
        req: crate::model::GetRoomRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Room>> {
        self.inner.get_room(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_room(
        &self,
        req: crate::model::UpdateRoomRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Room>> {
        self.inner.update_room(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_room(
        &self,
        req: crate::model::DeleteRoomRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.delete_room(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_rooms(
        &self,
        req: crate::model::ListRoomsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListRoomsResponse>> {
        self.inner.list_rooms(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_blurb(
        &self,
        req: crate::model::CreateBlurbRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Blurb>> {
        self.inner.create_blurb(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_blurb(
        &self,
        req: crate::model::GetBlurbRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Blurb>> {
        self.inner.get_blurb(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_blurb(
        &self,
        req: crate::model::UpdateBlurbRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Blurb>> {
        self.inner.update_blurb(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_blurb(
        &self,
        req: crate::model::DeleteBlurbRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.delete_blurb(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_blurbs(
        &self,
        req: crate::model::ListBlurbsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListBlurbsResponse>> {
        self.inner.list_blurbs(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn search_blurbs(
        &self,
        req: crate::model::SearchBlurbsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        self.inner.search_blurbs(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::ListLocationsResponse>> {
        self.inner.list_locations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::Location>> {
        self.inner.get_location(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        self.inner.set_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        self.inner.get_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>> {
        self.inner.test_iam_permissions(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::ListOperationsResponse>> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        self.inner.get_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.delete_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.cancel_operation(req, options).await
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        self.inner.get_polling_error_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}

/// Implements a [SequenceService](super::stub::SequenceService) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct SequenceService<T>
where
    T: super::stub::SequenceService + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> SequenceService<T>
where
    T: super::stub::SequenceService + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stub::SequenceService for SequenceService<T>
where
    T: super::stub::SequenceService + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn create_sequence(
        &self,
        req: crate::model::CreateSequenceRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Sequence>> {
        self.inner.create_sequence(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_streaming_sequence(
        &self,
        req: crate::model::CreateStreamingSequenceRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::StreamingSequence>> {
        self.inner.create_streaming_sequence(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_sequence_report(
        &self,
        req: crate::model::GetSequenceReportRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::SequenceReport>> {
        self.inner.get_sequence_report(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_streaming_sequence_report(
        &self,
        req: crate::model::GetStreamingSequenceReportRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::StreamingSequenceReport>> {
        self.inner.get_streaming_sequence_report(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn attempt_sequence(
        &self,
        req: crate::model::AttemptSequenceRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.attempt_sequence(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::ListLocationsResponse>> {
        self.inner.list_locations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::Location>> {
        self.inner.get_location(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        self.inner.set_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        self.inner.get_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>> {
        self.inner.test_iam_permissions(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::ListOperationsResponse>> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        self.inner.get_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.delete_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.cancel_operation(req, options).await
    }
}

/// Implements a [Testing](super::stub::Testing) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct Testing<T>
where
    T: super::stub::Testing + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> Testing<T>
where
    T: super::stub::Testing + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stub::Testing for Testing<T>
where
    T: super::stub::Testing + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn create_session(
        &self,
        req: crate::model::CreateSessionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Session>> {
        self.inner.create_session(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_session(
        &self,
        req: crate::model::GetSessionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Session>> {
        self.inner.get_session(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_sessions(
        &self,
        req: crate::model::ListSessionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListSessionsResponse>> {
        self.inner.list_sessions(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_session(
        &self,
        req: crate::model::DeleteSessionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.delete_session(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn report_session(
        &self,
        req: crate::model::ReportSessionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ReportSessionResponse>> {
        self.inner.report_session(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_tests(
        &self,
        req: crate::model::ListTestsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListTestsResponse>> {
        self.inner.list_tests(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_test(
        &self,
        req: crate::model::DeleteTestRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.delete_test(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn verify_test(
        &self,
        req: crate::model::VerifyTestRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::VerifyTestResponse>> {
        self.inner.verify_test(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::ListLocationsResponse>> {
        self.inner.list_locations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::Location>> {
        self.inner.get_location(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        self.inner.set_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        self.inner.get_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>> {
        self.inner.test_iam_permissions(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::ListOperationsResponse>> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        self.inner.get_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.delete_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        self.inner.cancel_operation(req, options).await
    }
}
