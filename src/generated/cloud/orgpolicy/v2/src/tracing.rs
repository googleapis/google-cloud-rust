// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [OrgPolicy](super::stubs::OrgPolicy) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct OrgPolicy<T>
where
    T: super::stubs::OrgPolicy + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> OrgPolicy<T>
where
    T: super::stubs::OrgPolicy + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stubs::OrgPolicy for OrgPolicy<T>
where
    T: super::stubs::OrgPolicy + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn list_constraints(
        &self,
        req: crate::model::ListConstraintsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListConstraintsResponse> {
        self.inner.list_constraints(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_policies(
        &self,
        req: crate::model::ListPoliciesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListPoliciesResponse> {
        self.inner.list_policies(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_policy(
        &self,
        req: crate::model::GetPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Policy> {
        self.inner.get_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_effective_policy(
        &self,
        req: crate::model::GetEffectivePolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Policy> {
        self.inner.get_effective_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_policy(
        &self,
        req: crate::model::CreatePolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Policy> {
        self.inner.create_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_policy(
        &self,
        req: crate::model::UpdatePolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Policy> {
        self.inner.update_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_policy(
        &self,
        req: crate::model::DeletePolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.delete_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_custom_constraint(
        &self,
        req: crate::model::CreateCustomConstraintRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::CustomConstraint> {
        self.inner.create_custom_constraint(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_custom_constraint(
        &self,
        req: crate::model::UpdateCustomConstraintRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::CustomConstraint> {
        self.inner.update_custom_constraint(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_custom_constraint(
        &self,
        req: crate::model::GetCustomConstraintRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::CustomConstraint> {
        self.inner.get_custom_constraint(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_custom_constraints(
        &self,
        req: crate::model::ListCustomConstraintsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListCustomConstraintsResponse> {
        self.inner.list_custom_constraints(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_custom_constraint(
        &self,
        req: crate::model::DeleteCustomConstraintRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.delete_custom_constraint(req, options).await
    }
}
