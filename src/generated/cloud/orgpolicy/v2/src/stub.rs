// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::OrgPolicy].
///
/// Application developers may need to implement this trait to mock
/// `client::OrgPolicy`.  In other use-cases, application developers only
/// use `client::OrgPolicy` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait OrgPolicy: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::OrgPolicy::list_constraints].
    fn list_constraints(
        &self,
        _req: crate::model::ListConstraintsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListConstraintsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListConstraintsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::OrgPolicy::list_policies].
    fn list_policies(
        &self,
        _req: crate::model::ListPoliciesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListPoliciesResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListPoliciesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::OrgPolicy::get_policy].
    fn get_policy(
        &self,
        _req: crate::model::GetPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Policy>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Policy>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::OrgPolicy::get_effective_policy].
    fn get_effective_policy(
        &self,
        _req: crate::model::GetEffectivePolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Policy>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Policy>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::OrgPolicy::create_policy].
    fn create_policy(
        &self,
        _req: crate::model::CreatePolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Policy>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Policy>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::OrgPolicy::update_policy].
    fn update_policy(
        &self,
        _req: crate::model::UpdatePolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Policy>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Policy>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::OrgPolicy::delete_policy].
    fn delete_policy(
        &self,
        _req: crate::model::DeletePolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::OrgPolicy::create_custom_constraint].
    fn create_custom_constraint(
        &self,
        _req: crate::model::CreateCustomConstraintRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::CustomConstraint>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::CustomConstraint>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::OrgPolicy::update_custom_constraint].
    fn update_custom_constraint(
        &self,
        _req: crate::model::UpdateCustomConstraintRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::CustomConstraint>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::CustomConstraint>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::OrgPolicy::get_custom_constraint].
    fn get_custom_constraint(
        &self,
        _req: crate::model::GetCustomConstraintRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::CustomConstraint>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::CustomConstraint>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::OrgPolicy::list_custom_constraints].
    fn list_custom_constraints(
        &self,
        _req: crate::model::ListCustomConstraintsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListCustomConstraintsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListCustomConstraintsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::OrgPolicy::delete_custom_constraint].
    fn delete_custom_constraint(
        &self,
        _req: crate::model::DeleteCustomConstraintRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }
}
