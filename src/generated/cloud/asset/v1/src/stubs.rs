// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::AssetService].
///
/// Application developers may need to implement this trait to mock
/// `client::AssetService`.  In other use-cases, application developers only
/// use `client::AssetService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait AssetService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::AssetService::export_assets].
    fn export_assets(
        &self,
        _req: crate::model::ExportAssetsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AssetService::list_assets].
    fn list_assets(
        &self,
        _req: crate::model::ListAssetsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAssetsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListAssetsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AssetService::batch_get_assets_history].
    fn batch_get_assets_history(
        &self,
        _req: crate::model::BatchGetAssetsHistoryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::BatchGetAssetsHistoryResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::BatchGetAssetsHistoryResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AssetService::create_feed].
    fn create_feed(
        &self,
        _req: crate::model::CreateFeedRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Feed>> + Send {
        std::future::ready::<crate::Result<crate::model::Feed>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::AssetService::get_feed].
    fn get_feed(
        &self,
        _req: crate::model::GetFeedRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Feed>> + Send {
        std::future::ready::<crate::Result<crate::model::Feed>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::AssetService::list_feeds].
    fn list_feeds(
        &self,
        _req: crate::model::ListFeedsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListFeedsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListFeedsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AssetService::update_feed].
    fn update_feed(
        &self,
        _req: crate::model::UpdateFeedRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Feed>> + Send {
        std::future::ready::<crate::Result<crate::model::Feed>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::AssetService::delete_feed].
    fn delete_feed(
        &self,
        _req: crate::model::DeleteFeedRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::AssetService::search_all_resources].
    fn search_all_resources(
        &self,
        _req: crate::model::SearchAllResourcesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SearchAllResourcesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::SearchAllResourcesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AssetService::search_all_iam_policies].
    fn search_all_iam_policies(
        &self,
        _req: crate::model::SearchAllIamPoliciesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SearchAllIamPoliciesResponse>>
    + Send {
        std::future::ready::<crate::Result<crate::model::SearchAllIamPoliciesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AssetService::analyze_iam_policy].
    fn analyze_iam_policy(
        &self,
        _req: crate::model::AnalyzeIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AnalyzeIamPolicyResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::AnalyzeIamPolicyResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AssetService::analyze_iam_policy_longrunning].
    fn analyze_iam_policy_longrunning(
        &self,
        _req: crate::model::AnalyzeIamPolicyLongrunningRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AssetService::analyze_move].
    fn analyze_move(
        &self,
        _req: crate::model::AnalyzeMoveRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AnalyzeMoveResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::AnalyzeMoveResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AssetService::query_assets].
    fn query_assets(
        &self,
        _req: crate::model::QueryAssetsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::QueryAssetsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::QueryAssetsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AssetService::create_saved_query].
    fn create_saved_query(
        &self,
        _req: crate::model::CreateSavedQueryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SavedQuery>> + Send {
        std::future::ready::<crate::Result<crate::model::SavedQuery>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AssetService::get_saved_query].
    fn get_saved_query(
        &self,
        _req: crate::model::GetSavedQueryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SavedQuery>> + Send {
        std::future::ready::<crate::Result<crate::model::SavedQuery>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AssetService::list_saved_queries].
    fn list_saved_queries(
        &self,
        _req: crate::model::ListSavedQueriesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListSavedQueriesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListSavedQueriesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AssetService::update_saved_query].
    fn update_saved_query(
        &self,
        _req: crate::model::UpdateSavedQueryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SavedQuery>> + Send {
        std::future::ready::<crate::Result<crate::model::SavedQuery>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::AssetService::delete_saved_query].
    fn delete_saved_query(
        &self,
        _req: crate::model::DeleteSavedQueryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::AssetService::batch_get_effective_iam_policies].
    fn batch_get_effective_iam_policies(
        &self,
        _req: crate::model::BatchGetEffectiveIamPoliciesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::BatchGetEffectiveIamPoliciesResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::BatchGetEffectiveIamPoliciesResponse>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::AssetService::analyze_org_policies].
    fn analyze_org_policies(
        &self,
        _req: crate::model::AnalyzeOrgPoliciesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AnalyzeOrgPoliciesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::AnalyzeOrgPoliciesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::AssetService::analyze_org_policy_governed_containers].
    fn analyze_org_policy_governed_containers(
        &self,
        _req: crate::model::AnalyzeOrgPolicyGovernedContainersRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::AnalyzeOrgPolicyGovernedContainersResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::AnalyzeOrgPolicyGovernedContainersResponse>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::AssetService::analyze_org_policy_governed_assets].
    fn analyze_org_policy_governed_assets(
        &self,
        _req: crate::model::AnalyzeOrgPolicyGovernedAssetsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::AnalyzeOrgPolicyGovernedAssetsResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::AnalyzeOrgPolicyGovernedAssetsResponse>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::AssetService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
