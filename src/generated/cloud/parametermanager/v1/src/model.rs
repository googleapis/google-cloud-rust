// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate iam_v1;
extern crate lazy_static;
extern crate location;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Message describing Parameter resource
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Parameter {
    /// Identifier. [Output only] The resource name of the Parameter in the format
    /// `projects/*/locations/*/parameters/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. [Output only] Create time stamp
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. [Output only] Update time stamp
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. Labels as key value pairs
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. Specifies the format of a Parameter.
    pub format: crate::model::ParameterFormat,

    /// Output only. [Output-only] policy member strings of a Google Cloud
    /// resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub policy_member: std::option::Option<iam_v1::model::ResourcePolicyMember>,
}

impl Parameter {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Parameter::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Parameter::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Parameter::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [format][crate::model::Parameter::format].
    pub fn set_format<T: std::convert::Into<crate::model::ParameterFormat>>(
        mut self,
        v: T,
    ) -> Self {
        self.format = v.into();
        self
    }

    /// Sets the value of [policy_member][crate::model::Parameter::policy_member].
    pub fn set_policy_member<
        T: std::convert::Into<std::option::Option<iam_v1::model::ResourcePolicyMember>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.policy_member = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::Parameter::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Parameter {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parametermanager.v1.Parameter"
    }
}

/// Message for requesting list of Parameters
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListParametersRequest {
    /// Required. Parent value for ListParametersRequest in the format
    /// `projects/*/locations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    pub page_size: i32,

    /// Optional. A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Filtering results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Hint for how to order the results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListParametersRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListParametersRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListParametersRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListParametersRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListParametersRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListParametersRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListParametersRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parametermanager.v1.ListParametersRequest"
    }
}

/// Message for response to listing Parameters
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListParametersResponse {
    /// The list of Parameters
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub parameters: std::vec::Vec<crate::model::Parameter>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Unordered list. Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListParametersResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListParametersResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [parameters][crate::model::ListParametersResponse::parameters].
    pub fn set_parameters<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Parameter>,
    {
        use std::iter::Iterator;
        self.parameters = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListParametersResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListParametersResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parametermanager.v1.ListParametersResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListParametersResponse {
    type PageItem = crate::model::Parameter;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.parameters
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Message for getting a Parameter
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetParameterRequest {
    /// Required. Name of the resource in the format
    /// `projects/*/locations/*/parameters/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetParameterRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetParameterRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetParameterRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parametermanager.v1.GetParameterRequest"
    }
}

/// Message for creating a Parameter
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateParameterRequest {
    /// Required. Value for parent in the format
    /// `projects/*/locations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Id of the Parameter resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parameter_id: std::string::String,

    /// Required. The Parameter resource being created
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub parameter: std::option::Option<crate::model::Parameter>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateParameterRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateParameterRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [parameter_id][crate::model::CreateParameterRequest::parameter_id].
    pub fn set_parameter_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parameter_id = v.into();
        self
    }

    /// Sets the value of [parameter][crate::model::CreateParameterRequest::parameter].
    pub fn set_parameter<T: std::convert::Into<std::option::Option<crate::model::Parameter>>>(
        mut self,
        v: T,
    ) -> Self {
        self.parameter = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateParameterRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateParameterRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parametermanager.v1.CreateParameterRequest"
    }
}

/// Message for updating a Parameter
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateParameterRequest {
    /// Optional. Field mask is used to specify the fields to be overwritten in the
    /// Parameter resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A mutable field will be overwritten if it is in the
    /// mask. If the user does not provide a mask then all mutable fields present
    /// in the request will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The Parameter resource being updated
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub parameter: std::option::Option<crate::model::Parameter>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl UpdateParameterRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateParameterRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [parameter][crate::model::UpdateParameterRequest::parameter].
    pub fn set_parameter<T: std::convert::Into<std::option::Option<crate::model::Parameter>>>(
        mut self,
        v: T,
    ) -> Self {
        self.parameter = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateParameterRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateParameterRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parametermanager.v1.UpdateParameterRequest"
    }
}

/// Message for deleting a Parameter
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteParameterRequest {
    /// Required. Name of the resource in the format
    /// `projects/*/locations/*/parameters/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl DeleteParameterRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteParameterRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteParameterRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteParameterRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parametermanager.v1.DeleteParameterRequest"
    }
}

/// Message describing ParameterVersion resource
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ParameterVersion {
    /// Identifier. [Output only] The resource name of the ParameterVersion in the
    /// format `projects/*/locations/*/parameters/*/versions/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. [Output only] Create time stamp
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. [Output only] Update time stamp
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. Disabled boolean to determine if a ParameterVersion acts as a
    /// metadata only resource (payload is never returned if disabled is true). If
    /// true any calls will always default to BASIC view even if the user
    /// explicitly passes FULL view as part of the request. A render call on a
    /// disabled resource fails with an error. Default value is False.
    pub disabled: bool,

    /// Required. Immutable. Payload content of a ParameterVersion resource.  This
    /// is only returned when the request provides the View value of FULL (default
    /// for GET request).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub payload: std::option::Option<crate::model::ParameterVersionPayload>,
}

impl ParameterVersion {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ParameterVersion::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ParameterVersion::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::ParameterVersion::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [disabled][crate::model::ParameterVersion::disabled].
    pub fn set_disabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.disabled = v.into();
        self
    }

    /// Sets the value of [payload][crate::model::ParameterVersion::payload].
    pub fn set_payload<
        T: std::convert::Into<std::option::Option<crate::model::ParameterVersionPayload>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.payload = v.into();
        self
    }
}

impl wkt::message::Message for ParameterVersion {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parametermanager.v1.ParameterVersion"
    }
}

/// Message for storing a ParameterVersion resource's payload data
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ParameterVersionPayload {
    /// Required. bytes data for storing payload.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub data: ::bytes::Bytes,
}

impl ParameterVersionPayload {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [data][crate::model::ParameterVersionPayload::data].
    pub fn set_data<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.data = v.into();
        self
    }
}

impl wkt::message::Message for ParameterVersionPayload {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parametermanager.v1.ParameterVersionPayload"
    }
}

/// Message for requesting list of ParameterVersions
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListParameterVersionsRequest {
    /// Required. Parent value for ListParameterVersionsRequest in the format
    /// `projects/*/locations/*/parameters/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    pub page_size: i32,

    /// Optional. A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Filtering results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Hint for how to order the results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListParameterVersionsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListParameterVersionsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListParameterVersionsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListParameterVersionsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListParameterVersionsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListParameterVersionsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListParameterVersionsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parametermanager.v1.ListParameterVersionsRequest"
    }
}

/// Message for response to listing ParameterVersions
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListParameterVersionsResponse {
    /// The list of ParameterVersions
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub parameter_versions: std::vec::Vec<crate::model::ParameterVersion>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Unordered list. Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListParameterVersionsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListParameterVersionsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [parameter_versions][crate::model::ListParameterVersionsResponse::parameter_versions].
    pub fn set_parameter_versions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ParameterVersion>,
    {
        use std::iter::Iterator;
        self.parameter_versions = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListParameterVersionsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListParameterVersionsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parametermanager.v1.ListParameterVersionsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListParameterVersionsResponse {
    type PageItem = crate::model::ParameterVersion;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.parameter_versions
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Message for getting a ParameterVersion
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetParameterVersionRequest {
    /// Required. Name of the resource in the format
    /// `projects/*/locations/*/parameters/*/versions/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. View of the ParameterVersion.
    /// In the default FULL view, all metadata & payload associated with the
    /// ParameterVersion will be returned.
    pub view: crate::model::View,
}

impl GetParameterVersionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetParameterVersionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [view][crate::model::GetParameterVersionRequest::view].
    pub fn set_view<T: std::convert::Into<crate::model::View>>(mut self, v: T) -> Self {
        self.view = v.into();
        self
    }
}

impl wkt::message::Message for GetParameterVersionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parametermanager.v1.GetParameterVersionRequest"
    }
}

/// Message for getting a ParameterVersionRender
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RenderParameterVersionRequest {
    /// Required. Name of the resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl RenderParameterVersionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::RenderParameterVersionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for RenderParameterVersionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parametermanager.v1.RenderParameterVersionRequest"
    }
}

/// Message describing RenderParameterVersionResponse resource
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RenderParameterVersionResponse {
    /// Output only. Resource identifier of a ParameterVersion in the format
    /// `projects/*/locations/*/parameters/*/versions/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parameter_version: std::string::String,

    /// Payload content of a ParameterVersion resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub payload: std::option::Option<crate::model::ParameterVersionPayload>,

    /// Output only. Server generated rendered version of the user provided payload
    /// data (ParameterVersionPayload) which has substitutions of all (if any)
    /// references to a SecretManager SecretVersion resources. This substituion
    /// only works for a Parameter which is in JSON or YAML format.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub rendered_payload: ::bytes::Bytes,
}

impl RenderParameterVersionResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parameter_version][crate::model::RenderParameterVersionResponse::parameter_version].
    pub fn set_parameter_version<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.parameter_version = v.into();
        self
    }

    /// Sets the value of [payload][crate::model::RenderParameterVersionResponse::payload].
    pub fn set_payload<
        T: std::convert::Into<std::option::Option<crate::model::ParameterVersionPayload>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.payload = v.into();
        self
    }

    /// Sets the value of [rendered_payload][crate::model::RenderParameterVersionResponse::rendered_payload].
    pub fn set_rendered_payload<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.rendered_payload = v.into();
        self
    }
}

impl wkt::message::Message for RenderParameterVersionResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parametermanager.v1.RenderParameterVersionResponse"
    }
}

/// Message for creating a ParameterVersion
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateParameterVersionRequest {
    /// Required. Value for parent in the format
    /// `projects/*/locations/*/parameters/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Id of the ParameterVersion resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parameter_version_id: std::string::String,

    /// Required. The ParameterVersion resource being created
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub parameter_version: std::option::Option<crate::model::ParameterVersion>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateParameterVersionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateParameterVersionRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [parameter_version_id][crate::model::CreateParameterVersionRequest::parameter_version_id].
    pub fn set_parameter_version_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.parameter_version_id = v.into();
        self
    }

    /// Sets the value of [parameter_version][crate::model::CreateParameterVersionRequest::parameter_version].
    pub fn set_parameter_version<
        T: std::convert::Into<std::option::Option<crate::model::ParameterVersion>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.parameter_version = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateParameterVersionRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateParameterVersionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parametermanager.v1.CreateParameterVersionRequest"
    }
}

/// Message for updating a ParameterVersion
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateParameterVersionRequest {
    /// Optional. Field mask is used to specify the fields to be overwritten in the
    /// ParameterVersion resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A mutable field will be overwritten if it is in the
    /// mask. If the user does not provide a mask then all mutable fields present
    /// in the request will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The ParameterVersion resource being updated
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub parameter_version: std::option::Option<crate::model::ParameterVersion>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl UpdateParameterVersionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateParameterVersionRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [parameter_version][crate::model::UpdateParameterVersionRequest::parameter_version].
    pub fn set_parameter_version<
        T: std::convert::Into<std::option::Option<crate::model::ParameterVersion>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.parameter_version = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateParameterVersionRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateParameterVersionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parametermanager.v1.UpdateParameterVersionRequest"
    }
}

/// Message for deleting a ParameterVersion
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteParameterVersionRequest {
    /// Required. Name of the resource in the format
    /// `projects/*/locations/*/parameters/*/versions/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl DeleteParameterVersionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteParameterVersionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteParameterVersionRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteParameterVersionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parametermanager.v1.DeleteParameterVersionRequest"
    }
}

/// Option to specify the format of a Parameter resource (UNFORMATTED / YAML /
/// JSON). This option is user specified at the time of creation of the resource
/// and is immutable.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct ParameterFormat(i32);

impl ParameterFormat {
    /// The default / unset value.
    /// The API will default to the UNFORMATTED format.
    pub const PARAMETER_FORMAT_UNSPECIFIED: ParameterFormat = ParameterFormat::new(0);

    /// Unformatted.
    pub const UNFORMATTED: ParameterFormat = ParameterFormat::new(1);

    /// YAML format.
    pub const YAML: ParameterFormat = ParameterFormat::new(2);

    /// JSON format.
    pub const JSON: ParameterFormat = ParameterFormat::new(3);

    /// Creates a new ParameterFormat instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("PARAMETER_FORMAT_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("UNFORMATTED"),
            2 => std::borrow::Cow::Borrowed("YAML"),
            3 => std::borrow::Cow::Borrowed("JSON"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "PARAMETER_FORMAT_UNSPECIFIED" => {
                std::option::Option::Some(Self::PARAMETER_FORMAT_UNSPECIFIED)
            }
            "UNFORMATTED" => std::option::Option::Some(Self::UNFORMATTED),
            "YAML" => std::option::Option::Some(Self::YAML),
            "JSON" => std::option::Option::Some(Self::JSON),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for ParameterFormat {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for ParameterFormat {
    fn default() -> Self {
        Self::new(0)
    }
}

/// Option for requesting only metadata, or user provided payload
/// of a ParameterVersion resource.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct View(i32);

impl View {
    /// The default / unset value.
    /// The API will default to the FULL view..
    pub const VIEW_UNSPECIFIED: View = View::new(0);

    /// Include only the metadata for the resource.
    pub const BASIC: View = View::new(1);

    /// Include metadata & other relevant payload data as well.
    /// This is the default view.
    pub const FULL: View = View::new(2);

    /// Creates a new View instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("VIEW_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("BASIC"),
            2 => std::borrow::Cow::Borrowed("FULL"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "VIEW_UNSPECIFIED" => std::option::Option::Some(Self::VIEW_UNSPECIFIED),
            "BASIC" => std::option::Option::Some(Self::BASIC),
            "FULL" => std::option::Option::Some(Self::FULL),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for View {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for View {
    fn default() -> Self {
        Self::new(0)
    }
}
