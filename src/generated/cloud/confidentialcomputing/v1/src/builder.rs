// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

pub mod confidential_computing {
    use crate::Result;
    use std::sync::Arc;

    /// Common implementation for [super::super::client::ConfidentialComputing] request builders.
    #[derive(Clone, Debug)]
    pub(crate) struct RequestBuilder<R: std::default::Default> {
        stub: Arc<dyn super::super::stub::dynamic::ConfidentialComputing>,
        request: R,
        options: gax::options::RequestOptions,
    }

    impl<R> RequestBuilder<R>
    where
        R: std::default::Default,
    {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::ConfidentialComputing>,
        ) -> Self {
            Self {
                stub,
                request: R::default(),
                options: gax::options::RequestOptions::default(),
            }
        }
    }

    /// The request builder for a ConfidentialComputing::create_challenge call.
    #[derive(Clone, Debug)]
    pub struct CreateChallenge(RequestBuilder<crate::model::CreateChallengeRequest>);

    impl CreateChallenge {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::ConfidentialComputing>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateChallengeRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Challenge> {
            (*self.0.stub)
                .create_challenge(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [parent][crate::model::CreateChallengeRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [challenge][crate::model::CreateChallengeRequest::challenge].
        pub fn set_challenge<T: Into<std::option::Option<crate::model::Challenge>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.challenge = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for CreateChallenge {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ConfidentialComputing::verify_attestation call.
    #[derive(Clone, Debug)]
    pub struct VerifyAttestation(RequestBuilder<crate::model::VerifyAttestationRequest>);

    impl VerifyAttestation {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::ConfidentialComputing>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::VerifyAttestationRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::VerifyAttestationResponse> {
            (*self.0.stub)
                .verify_attestation(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [challenge][crate::model::VerifyAttestationRequest::challenge].
        pub fn set_challenge<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.challenge = v.into();
            self
        }

        /// Sets the value of [gcp_credentials][crate::model::VerifyAttestationRequest::gcp_credentials].
        pub fn set_gcp_credentials<T: Into<std::option::Option<crate::model::GcpCredentials>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.gcp_credentials = v.into();
            self
        }

        /// Sets the value of [tpm_attestation][crate::model::VerifyAttestationRequest::tpm_attestation].
        pub fn set_tpm_attestation<T: Into<std::option::Option<crate::model::TpmAttestation>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.tpm_attestation = v.into();
            self
        }

        /// Sets the value of [confidential_space_info][crate::model::VerifyAttestationRequest::confidential_space_info].
        pub fn set_confidential_space_info<
            T: Into<std::option::Option<crate::model::ConfidentialSpaceInfo>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.confidential_space_info = v.into();
            self
        }

        /// Sets the value of [token_options][crate::model::VerifyAttestationRequest::token_options].
        pub fn set_token_options<T: Into<std::option::Option<crate::model::TokenOptions>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.token_options = v.into();
            self
        }

        /// Sets the value of [attester][crate::model::VerifyAttestationRequest::attester].
        pub fn set_attester<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.attester = v.into();
            self
        }

        /// Sets the value of `tee_attestation`.
        pub fn set_tee_attestation<
            T: Into<Option<crate::model::verify_attestation_request::TeeAttestation>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.tee_attestation = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for VerifyAttestation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ConfidentialComputing::list_locations call.
    #[derive(Clone, Debug)]
    pub struct ListLocations(RequestBuilder<location::model::ListLocationsRequest>);

    impl ListLocations {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::ConfidentialComputing>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<location::model::ListLocationsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<location::model::ListLocationsResponse> {
            (*self.0.stub)
                .list_locations(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<location::model::ListLocationsResponse, gax::error::Error>
        {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [name][location::model::ListLocationsRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [filter][location::model::ListLocationsRequest::filter].
        pub fn set_filter<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }

        /// Sets the value of [page_size][location::model::ListLocationsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][location::model::ListLocationsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for ListLocations {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ConfidentialComputing::get_location call.
    #[derive(Clone, Debug)]
    pub struct GetLocation(RequestBuilder<location::model::GetLocationRequest>);

    impl GetLocation {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::ConfidentialComputing>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<location::model::GetLocationRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<location::model::Location> {
            (*self.0.stub)
                .get_location(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][location::model::GetLocationRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for GetLocation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }
}
