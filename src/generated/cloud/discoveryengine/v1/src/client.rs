// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Discovery Engine API.
///
/// # Service Description
///
/// Service for Auto-Completion.
///
/// # Configuration
///
/// `CompletionService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `CompletionService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `CompletionService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct CompletionService {
    inner: Arc<dyn super::stubs::dynamic::CompletionService>,
}

impl CompletionService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::CompletionService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::CompletionService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::CompletionService> {
        super::transport::CompletionService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::CompletionService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::CompletionService::new)
    }

    /// Completes the specified user input with keyword suggestions.
    pub fn complete_query(
        &self,
        data_store: impl Into<std::string::String>,
    ) -> super::builders::completion_service::CompleteQuery {
        super::builders::completion_service::CompleteQuery::new(self.inner.clone())
            .set_data_store(data_store.into())
    }

    /// Imports all
    /// [SuggestionDenyListEntry][google.cloud.discoveryengine.v1.SuggestionDenyListEntry]
    /// for a DataStore.
    ///
    /// [google.cloud.discoveryengine.v1.SuggestionDenyListEntry]: crate::model::SuggestionDenyListEntry
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_suggestion_deny_list_entries(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::completion_service::ImportSuggestionDenyListEntries {
        super::builders::completion_service::ImportSuggestionDenyListEntries::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Permanently deletes all
    /// [SuggestionDenyListEntry][google.cloud.discoveryengine.v1.SuggestionDenyListEntry]
    /// for a DataStore.
    ///
    /// [google.cloud.discoveryengine.v1.SuggestionDenyListEntry]: crate::model::SuggestionDenyListEntry
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn purge_suggestion_deny_list_entries(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::completion_service::PurgeSuggestionDenyListEntries {
        super::builders::completion_service::PurgeSuggestionDenyListEntries::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Imports
    /// [CompletionSuggestion][google.cloud.discoveryengine.v1.CompletionSuggestion]s
    /// for a DataStore.
    ///
    /// [google.cloud.discoveryengine.v1.CompletionSuggestion]: crate::model::CompletionSuggestion
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_completion_suggestions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::completion_service::ImportCompletionSuggestions {
        super::builders::completion_service::ImportCompletionSuggestions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Permanently deletes all
    /// [CompletionSuggestion][google.cloud.discoveryengine.v1.CompletionSuggestion]s
    /// for a DataStore.
    ///
    /// [google.cloud.discoveryengine.v1.CompletionSuggestion]: crate::model::CompletionSuggestion
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn purge_completion_suggestions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::completion_service::PurgeCompletionSuggestions {
        super::builders::completion_service::PurgeCompletionSuggestions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::completion_service::ListOperations {
        super::builders::completion_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::completion_service::GetOperation {
        super::builders::completion_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::completion_service::CancelOperation {
        super::builders::completion_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Discovery Engine API.
///
/// # Service Description
///
/// Service for performing CRUD operations on Controls.
/// Controls allow for custom logic to be implemented in the serving path.
/// Controls need to be attached to a Serving Config to be considered during a
/// request.
///
/// # Configuration
///
/// `ControlService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ControlService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ControlService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ControlService {
    inner: Arc<dyn super::stubs::dynamic::ControlService>,
}

impl ControlService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::ControlService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::ControlService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::ControlService> {
        super::transport::ControlService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::ControlService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::ControlService::new)
    }

    /// Creates a Control.
    ///
    /// By default 1000 controls are allowed for a data store.
    /// A request can be submitted to adjust this limit.
    /// If the [Control][google.cloud.discoveryengine.v1.Control] to create already
    /// exists, an ALREADY_EXISTS error is returned.
    ///
    /// [google.cloud.discoveryengine.v1.Control]: crate::model::Control
    pub fn create_control(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::control_service::CreateControl {
        super::builders::control_service::CreateControl::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a Control.
    ///
    /// If the [Control][google.cloud.discoveryengine.v1.Control] to delete does
    /// not exist, a NOT_FOUND error is returned.
    ///
    /// [google.cloud.discoveryengine.v1.Control]: crate::model::Control
    pub fn delete_control(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::control_service::DeleteControl {
        super::builders::control_service::DeleteControl::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a Control.
    ///
    /// [Control][google.cloud.discoveryengine.v1.Control] action type cannot be
    /// changed. If the [Control][google.cloud.discoveryengine.v1.Control] to
    /// update does not exist, a NOT_FOUND error is returned.
    ///
    /// [google.cloud.discoveryengine.v1.Control]: crate::model::Control
    pub fn update_control(
        &self,
        control: impl Into<crate::model::Control>,
    ) -> super::builders::control_service::UpdateControl {
        super::builders::control_service::UpdateControl::new(self.inner.clone())
            .set_control(control.into())
    }

    /// Gets a Control.
    pub fn get_control(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::control_service::GetControl {
        super::builders::control_service::GetControl::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists all Controls by their parent
    /// [DataStore][google.cloud.discoveryengine.v1.DataStore].
    ///
    /// [google.cloud.discoveryengine.v1.DataStore]: crate::model::DataStore
    pub fn list_controls(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::control_service::ListControls {
        super::builders::control_service::ListControls::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::control_service::ListOperations {
        super::builders::control_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::control_service::GetOperation {
        super::builders::control_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::control_service::CancelOperation {
        super::builders::control_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Discovery Engine API.
///
/// # Service Description
///
/// Service for conversational search.
///
/// # Configuration
///
/// `ConversationalSearchService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ConversationalSearchService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ConversationalSearchService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ConversationalSearchService {
    inner: Arc<dyn super::stubs::dynamic::ConversationalSearchService>,
}

impl ConversationalSearchService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::ConversationalSearchService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::ConversationalSearchService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::ConversationalSearchService> {
        super::transport::ConversationalSearchService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::ConversationalSearchService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::ConversationalSearchService::new)
    }

    /// Converses a conversation.
    pub fn converse_conversation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::conversational_search_service::ConverseConversation {
        super::builders::conversational_search_service::ConverseConversation::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Creates a Conversation.
    ///
    /// If the [Conversation][google.cloud.discoveryengine.v1.Conversation] to
    /// create already exists, an ALREADY_EXISTS error is returned.
    ///
    /// [google.cloud.discoveryengine.v1.Conversation]: crate::model::Conversation
    pub fn create_conversation(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::conversational_search_service::CreateConversation {
        super::builders::conversational_search_service::CreateConversation::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a Conversation.
    ///
    /// If the [Conversation][google.cloud.discoveryengine.v1.Conversation] to
    /// delete does not exist, a NOT_FOUND error is returned.
    ///
    /// [google.cloud.discoveryengine.v1.Conversation]: crate::model::Conversation
    pub fn delete_conversation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::conversational_search_service::DeleteConversation {
        super::builders::conversational_search_service::DeleteConversation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a Conversation.
    ///
    /// [Conversation][google.cloud.discoveryengine.v1.Conversation] action type
    /// cannot be changed. If the
    /// [Conversation][google.cloud.discoveryengine.v1.Conversation] to update does
    /// not exist, a NOT_FOUND error is returned.
    ///
    /// [google.cloud.discoveryengine.v1.Conversation]: crate::model::Conversation
    pub fn update_conversation(
        &self,
        conversation: impl Into<crate::model::Conversation>,
    ) -> super::builders::conversational_search_service::UpdateConversation {
        super::builders::conversational_search_service::UpdateConversation::new(self.inner.clone())
            .set_conversation(conversation.into())
    }

    /// Gets a Conversation.
    pub fn get_conversation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::conversational_search_service::GetConversation {
        super::builders::conversational_search_service::GetConversation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all Conversations by their parent
    /// [DataStore][google.cloud.discoveryengine.v1.DataStore].
    ///
    /// [google.cloud.discoveryengine.v1.DataStore]: crate::model::DataStore
    pub fn list_conversations(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::conversational_search_service::ListConversations {
        super::builders::conversational_search_service::ListConversations::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Answer query method.
    pub fn answer_query(
        &self,
        serving_config: impl Into<std::string::String>,
    ) -> super::builders::conversational_search_service::AnswerQuery {
        super::builders::conversational_search_service::AnswerQuery::new(self.inner.clone())
            .set_serving_config(serving_config.into())
    }

    /// Gets a Answer.
    pub fn get_answer(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::conversational_search_service::GetAnswer {
        super::builders::conversational_search_service::GetAnswer::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a Session.
    ///
    /// If the [Session][google.cloud.discoveryengine.v1.Session] to create already
    /// exists, an ALREADY_EXISTS error is returned.
    ///
    /// [google.cloud.discoveryengine.v1.Session]: crate::model::Session
    pub fn create_session(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::conversational_search_service::CreateSession {
        super::builders::conversational_search_service::CreateSession::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a Session.
    ///
    /// If the [Session][google.cloud.discoveryengine.v1.Session] to delete does
    /// not exist, a NOT_FOUND error is returned.
    ///
    /// [google.cloud.discoveryengine.v1.Session]: crate::model::Session
    pub fn delete_session(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::conversational_search_service::DeleteSession {
        super::builders::conversational_search_service::DeleteSession::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a Session.
    ///
    /// [Session][google.cloud.discoveryengine.v1.Session] action type cannot be
    /// changed. If the [Session][google.cloud.discoveryengine.v1.Session] to
    /// update does not exist, a NOT_FOUND error is returned.
    ///
    /// [google.cloud.discoveryengine.v1.Session]: crate::model::Session
    pub fn update_session(
        &self,
        session: impl Into<crate::model::Session>,
    ) -> super::builders::conversational_search_service::UpdateSession {
        super::builders::conversational_search_service::UpdateSession::new(self.inner.clone())
            .set_session(session.into())
    }

    /// Gets a Session.
    pub fn get_session(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::conversational_search_service::GetSession {
        super::builders::conversational_search_service::GetSession::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all Sessions by their parent
    /// [DataStore][google.cloud.discoveryengine.v1.DataStore].
    ///
    /// [google.cloud.discoveryengine.v1.DataStore]: crate::model::DataStore
    pub fn list_sessions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::conversational_search_service::ListSessions {
        super::builders::conversational_search_service::ListSessions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::conversational_search_service::ListOperations {
        super::builders::conversational_search_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::conversational_search_service::GetOperation {
        super::builders::conversational_search_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::conversational_search_service::CancelOperation {
        super::builders::conversational_search_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Discovery Engine API.
///
/// # Service Description
///
/// Service for managing [DataStore][google.cloud.discoveryengine.v1.DataStore]
/// configuration.
///
/// [google.cloud.discoveryengine.v1.DataStore]: crate::model::DataStore
///
/// # Configuration
///
/// `DataStoreService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `DataStoreService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DataStoreService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct DataStoreService {
    inner: Arc<dyn super::stubs::dynamic::DataStoreService>,
}

impl DataStoreService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::DataStoreService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::DataStoreService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::DataStoreService> {
        super::transport::DataStoreService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::DataStoreService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::DataStoreService::new)
    }

    /// Creates a [DataStore][google.cloud.discoveryengine.v1.DataStore].
    ///
    /// DataStore is for storing
    /// [Documents][google.cloud.discoveryengine.v1.Document]. To serve these
    /// documents for Search, or Recommendation use case, an
    /// [Engine][google.cloud.discoveryengine.v1.Engine] needs to be created
    /// separately.
    ///
    /// [google.cloud.discoveryengine.v1.DataStore]: crate::model::DataStore
    /// [google.cloud.discoveryengine.v1.Document]: crate::model::Document
    /// [google.cloud.discoveryengine.v1.Engine]: crate::model::Engine
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_data_store(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::data_store_service::CreateDataStore {
        super::builders::data_store_service::CreateDataStore::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a [DataStore][google.cloud.discoveryengine.v1.DataStore].
    ///
    /// [google.cloud.discoveryengine.v1.DataStore]: crate::model::DataStore
    pub fn get_data_store(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::data_store_service::GetDataStore {
        super::builders::data_store_service::GetDataStore::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all the [DataStore][google.cloud.discoveryengine.v1.DataStore]s
    /// associated with the project.
    ///
    /// [google.cloud.discoveryengine.v1.DataStore]: crate::model::DataStore
    pub fn list_data_stores(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::data_store_service::ListDataStores {
        super::builders::data_store_service::ListDataStores::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a [DataStore][google.cloud.discoveryengine.v1.DataStore].
    ///
    /// [google.cloud.discoveryengine.v1.DataStore]: crate::model::DataStore
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_data_store(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::data_store_service::DeleteDataStore {
        super::builders::data_store_service::DeleteDataStore::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a [DataStore][google.cloud.discoveryengine.v1.DataStore]
    ///
    /// [google.cloud.discoveryengine.v1.DataStore]: crate::model::DataStore
    pub fn update_data_store(
        &self,
        data_store: impl Into<crate::model::DataStore>,
    ) -> super::builders::data_store_service::UpdateDataStore {
        super::builders::data_store_service::UpdateDataStore::new(self.inner.clone())
            .set_data_store(data_store.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::data_store_service::ListOperations {
        super::builders::data_store_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::data_store_service::GetOperation {
        super::builders::data_store_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::data_store_service::CancelOperation {
        super::builders::data_store_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Discovery Engine API.
///
/// # Service Description
///
/// Service for ingesting [Document][google.cloud.discoveryengine.v1.Document]
/// information of the customer's website.
///
/// [google.cloud.discoveryengine.v1.Document]: crate::model::Document
///
/// # Configuration
///
/// `DocumentService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `DocumentService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DocumentService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct DocumentService {
    inner: Arc<dyn super::stubs::dynamic::DocumentService>,
}

impl DocumentService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::DocumentService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::DocumentService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::DocumentService> {
        super::transport::DocumentService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::DocumentService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::DocumentService::new)
    }

    /// Gets a [Document][google.cloud.discoveryengine.v1.Document].
    ///
    /// [google.cloud.discoveryengine.v1.Document]: crate::model::Document
    pub fn get_document(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::document_service::GetDocument {
        super::builders::document_service::GetDocument::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets a list of [Document][google.cloud.discoveryengine.v1.Document]s.
    ///
    /// [google.cloud.discoveryengine.v1.Document]: crate::model::Document
    pub fn list_documents(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::document_service::ListDocuments {
        super::builders::document_service::ListDocuments::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a [Document][google.cloud.discoveryengine.v1.Document].
    ///
    /// [google.cloud.discoveryengine.v1.Document]: crate::model::Document
    pub fn create_document(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::document_service::CreateDocument {
        super::builders::document_service::CreateDocument::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a [Document][google.cloud.discoveryengine.v1.Document].
    ///
    /// [google.cloud.discoveryengine.v1.Document]: crate::model::Document
    pub fn update_document(
        &self,
        document: impl Into<crate::model::Document>,
    ) -> super::builders::document_service::UpdateDocument {
        super::builders::document_service::UpdateDocument::new(self.inner.clone())
            .set_document(document.into())
    }

    /// Deletes a [Document][google.cloud.discoveryengine.v1.Document].
    ///
    /// [google.cloud.discoveryengine.v1.Document]: crate::model::Document
    pub fn delete_document(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::document_service::DeleteDocument {
        super::builders::document_service::DeleteDocument::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Bulk import of multiple
    /// [Document][google.cloud.discoveryengine.v1.Document]s. Request processing
    /// may be synchronous. Non-existing items are created.
    ///
    /// Note: It is possible for a subset of the
    /// [Document][google.cloud.discoveryengine.v1.Document]s to be successfully
    /// updated.
    ///
    /// [google.cloud.discoveryengine.v1.Document]: crate::model::Document
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_documents(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::document_service::ImportDocuments {
        super::builders::document_service::ImportDocuments::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Permanently deletes all selected
    /// [Document][google.cloud.discoveryengine.v1.Document]s in a branch.
    ///
    /// This process is asynchronous. Depending on the number of
    /// [Document][google.cloud.discoveryengine.v1.Document]s to be deleted, this
    /// operation can take hours to complete. Before the delete operation
    /// completes, some [Document][google.cloud.discoveryengine.v1.Document]s might
    /// still be returned by
    /// [DocumentService.GetDocument][google.cloud.discoveryengine.v1.DocumentService.GetDocument]
    /// or
    /// [DocumentService.ListDocuments][google.cloud.discoveryengine.v1.DocumentService.ListDocuments].
    ///
    /// To get a list of the [Document][google.cloud.discoveryengine.v1.Document]s
    /// to be deleted, set
    /// [PurgeDocumentsRequest.force][google.cloud.discoveryengine.v1.PurgeDocumentsRequest.force]
    /// to false.
    ///
    /// [google.cloud.discoveryengine.v1.Document]: crate::model::Document
    /// [google.cloud.discoveryengine.v1.DocumentService.GetDocument]: crate::client::DocumentService::get_document
    /// [google.cloud.discoveryengine.v1.DocumentService.ListDocuments]: crate::client::DocumentService::list_documents
    /// [google.cloud.discoveryengine.v1.PurgeDocumentsRequest.force]: crate::model::PurgeDocumentsRequest::force
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn purge_documents(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::document_service::PurgeDocuments {
        super::builders::document_service::PurgeDocuments::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets index freshness metadata for
    /// [Document][google.cloud.discoveryengine.v1.Document]s. Supported for
    /// website search only.
    ///
    /// [google.cloud.discoveryengine.v1.Document]: crate::model::Document
    pub fn batch_get_documents_metadata(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::document_service::BatchGetDocumentsMetadata {
        super::builders::document_service::BatchGetDocumentsMetadata::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::document_service::ListOperations {
        super::builders::document_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::document_service::GetOperation {
        super::builders::document_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::document_service::CancelOperation {
        super::builders::document_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Discovery Engine API.
///
/// # Service Description
///
/// Service for managing [Engine][google.cloud.discoveryengine.v1.Engine]
/// configuration.
///
/// [google.cloud.discoveryengine.v1.Engine]: crate::model::Engine
///
/// # Configuration
///
/// `EngineService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `EngineService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `EngineService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct EngineService {
    inner: Arc<dyn super::stubs::dynamic::EngineService>,
}

impl EngineService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::EngineService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::EngineService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::EngineService> {
        super::transport::EngineService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::EngineService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::EngineService::new)
    }

    /// Creates a [Engine][google.cloud.discoveryengine.v1.Engine].
    ///
    /// [google.cloud.discoveryengine.v1.Engine]: crate::model::Engine
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_engine(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::engine_service::CreateEngine {
        super::builders::engine_service::CreateEngine::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a [Engine][google.cloud.discoveryengine.v1.Engine].
    ///
    /// [google.cloud.discoveryengine.v1.Engine]: crate::model::Engine
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_engine(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::engine_service::DeleteEngine {
        super::builders::engine_service::DeleteEngine::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates an [Engine][google.cloud.discoveryengine.v1.Engine]
    ///
    /// [google.cloud.discoveryengine.v1.Engine]: crate::model::Engine
    pub fn update_engine(
        &self,
        engine: impl Into<crate::model::Engine>,
    ) -> super::builders::engine_service::UpdateEngine {
        super::builders::engine_service::UpdateEngine::new(self.inner.clone())
            .set_engine(engine.into())
    }

    /// Gets a [Engine][google.cloud.discoveryengine.v1.Engine].
    ///
    /// [google.cloud.discoveryengine.v1.Engine]: crate::model::Engine
    pub fn get_engine(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::engine_service::GetEngine {
        super::builders::engine_service::GetEngine::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists all the [Engine][google.cloud.discoveryengine.v1.Engine]s associated
    /// with the project.
    ///
    /// [google.cloud.discoveryengine.v1.Engine]: crate::model::Engine
    pub fn list_engines(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::engine_service::ListEngines {
        super::builders::engine_service::ListEngines::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::engine_service::ListOperations {
        super::builders::engine_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::engine_service::GetOperation {
        super::builders::engine_service::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::engine_service::CancelOperation {
        super::builders::engine_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Discovery Engine API.
///
/// # Service Description
///
/// Service for grounded generation.
///
/// # Configuration
///
/// `GroundedGenerationService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `GroundedGenerationService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `GroundedGenerationService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct GroundedGenerationService {
    inner: Arc<dyn super::stubs::dynamic::GroundedGenerationService>,
}

impl GroundedGenerationService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::GroundedGenerationService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::GroundedGenerationService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::GroundedGenerationService> {
        super::transport::GroundedGenerationService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::GroundedGenerationService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::GroundedGenerationService::new)
    }

    /// Generates grounded content.
    pub fn generate_grounded_content(
        &self,
        location: impl Into<std::string::String>,
    ) -> super::builders::grounded_generation_service::GenerateGroundedContent {
        super::builders::grounded_generation_service::GenerateGroundedContent::new(
            self.inner.clone(),
        )
        .set_location(location.into())
    }

    /// Performs a grounding check.
    pub fn check_grounding(
        &self,
        grounding_config: impl Into<std::string::String>,
    ) -> super::builders::grounded_generation_service::CheckGrounding {
        super::builders::grounded_generation_service::CheckGrounding::new(self.inner.clone())
            .set_grounding_config(grounding_config.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::grounded_generation_service::ListOperations {
        super::builders::grounded_generation_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::grounded_generation_service::GetOperation {
        super::builders::grounded_generation_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::grounded_generation_service::CancelOperation {
        super::builders::grounded_generation_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Discovery Engine API.
///
/// # Service Description
///
/// Service for operations on the
/// [Project][google.cloud.discoveryengine.v1.Project].
///
/// [google.cloud.discoveryengine.v1.Project]: crate::model::Project
///
/// # Configuration
///
/// `ProjectService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ProjectService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ProjectService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ProjectService {
    inner: Arc<dyn super::stubs::dynamic::ProjectService>,
}

impl ProjectService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::ProjectService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::ProjectService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::ProjectService> {
        super::transport::ProjectService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::ProjectService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::ProjectService::new)
    }

    /// Provisions the project resource. During the
    /// process, related systems will get prepared and initialized.
    ///
    /// Caller must read the [Terms for data
    /// use](https://cloud.google.com/retail/data-use-terms), and optionally
    /// specify in request to provide consent to that service terms.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn provision_project(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::project_service::ProvisionProject {
        super::builders::project_service::ProvisionProject::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::project_service::ListOperations {
        super::builders::project_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::project_service::GetOperation {
        super::builders::project_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::project_service::CancelOperation {
        super::builders::project_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Discovery Engine API.
///
/// # Service Description
///
/// Service for ranking text records.
///
/// # Configuration
///
/// `RankService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `RankService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `RankService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct RankService {
    inner: Arc<dyn super::stubs::dynamic::RankService>,
}

impl RankService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::RankService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::RankService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::RankService> {
        super::transport::RankService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::RankService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::RankService::new)
    }

    /// Ranks a list of text records based on the given input query.
    pub fn rank(
        &self,
        ranking_config: impl Into<std::string::String>,
    ) -> super::builders::rank_service::Rank {
        super::builders::rank_service::Rank::new(self.inner.clone())
            .set_ranking_config(ranking_config.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::rank_service::ListOperations {
        super::builders::rank_service::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::rank_service::GetOperation {
        super::builders::rank_service::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::rank_service::CancelOperation {
        super::builders::rank_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Discovery Engine API.
///
/// # Service Description
///
/// Service for making recommendations.
///
/// # Configuration
///
/// `RecommendationService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `RecommendationService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `RecommendationService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct RecommendationService {
    inner: Arc<dyn super::stubs::dynamic::RecommendationService>,
}

impl RecommendationService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::RecommendationService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::RecommendationService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::RecommendationService> {
        super::transport::RecommendationService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::RecommendationService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::RecommendationService::new)
    }

    /// Makes a recommendation, which requires a contextual user event.
    pub fn recommend(
        &self,
        serving_config: impl Into<std::string::String>,
    ) -> super::builders::recommendation_service::Recommend {
        super::builders::recommendation_service::Recommend::new(self.inner.clone())
            .set_serving_config(serving_config.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::recommendation_service::ListOperations {
        super::builders::recommendation_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::recommendation_service::GetOperation {
        super::builders::recommendation_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::recommendation_service::CancelOperation {
        super::builders::recommendation_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Discovery Engine API.
///
/// # Service Description
///
/// Service for managing [Schema][google.cloud.discoveryengine.v1.Schema]s.
///
/// [google.cloud.discoveryengine.v1.Schema]: crate::model::Schema
///
/// # Configuration
///
/// `SchemaService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SchemaService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SchemaService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SchemaService {
    inner: Arc<dyn super::stubs::dynamic::SchemaService>,
}

impl SchemaService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::SchemaService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::SchemaService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::SchemaService> {
        super::transport::SchemaService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::SchemaService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::SchemaService::new)
    }

    /// Gets a [Schema][google.cloud.discoveryengine.v1.Schema].
    ///
    /// [google.cloud.discoveryengine.v1.Schema]: crate::model::Schema
    pub fn get_schema(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::schema_service::GetSchema {
        super::builders::schema_service::GetSchema::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets a list of [Schema][google.cloud.discoveryengine.v1.Schema]s.
    ///
    /// [google.cloud.discoveryengine.v1.Schema]: crate::model::Schema
    pub fn list_schemas(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::schema_service::ListSchemas {
        super::builders::schema_service::ListSchemas::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a [Schema][google.cloud.discoveryengine.v1.Schema].
    ///
    /// [google.cloud.discoveryengine.v1.Schema]: crate::model::Schema
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_schema(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::schema_service::CreateSchema {
        super::builders::schema_service::CreateSchema::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a [Schema][google.cloud.discoveryengine.v1.Schema].
    ///
    /// [google.cloud.discoveryengine.v1.Schema]: crate::model::Schema
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_schema(
        &self,
        schema: impl Into<crate::model::Schema>,
    ) -> super::builders::schema_service::UpdateSchema {
        super::builders::schema_service::UpdateSchema::new(self.inner.clone())
            .set_schema(schema.into())
    }

    /// Deletes a [Schema][google.cloud.discoveryengine.v1.Schema].
    ///
    /// [google.cloud.discoveryengine.v1.Schema]: crate::model::Schema
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_schema(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::schema_service::DeleteSchema {
        super::builders::schema_service::DeleteSchema::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::schema_service::ListOperations {
        super::builders::schema_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::schema_service::GetOperation {
        super::builders::schema_service::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::schema_service::CancelOperation {
        super::builders::schema_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Discovery Engine API.
///
/// # Service Description
///
/// Service for search.
///
/// # Configuration
///
/// `SearchService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SearchService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SearchService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SearchService {
    inner: Arc<dyn super::stubs::dynamic::SearchService>,
}

impl SearchService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::SearchService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::SearchService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::SearchService> {
        super::transport::SearchService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::SearchService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::SearchService::new)
    }

    /// Performs a search.
    pub fn search(
        &self,
        serving_config: impl Into<std::string::String>,
    ) -> super::builders::search_service::Search {
        super::builders::search_service::Search::new(self.inner.clone())
            .set_serving_config(serving_config.into())
    }

    /// Performs a search. Similar to the
    /// [SearchService.Search][google.cloud.discoveryengine.v1.SearchService.Search]
    /// method, but a lite version that allows API key for authentication, where
    /// OAuth and IAM checks are not required.
    ///
    /// Only public website search is supported by this method. If data stores and
    /// engines not associated with public website search are specified, a
    /// `FAILED_PRECONDITION` error is returned.
    ///
    /// This method can be used for easy onboarding without having to implement an
    /// authentication backend. However, it is strongly recommended to use
    /// [SearchService.Search][google.cloud.discoveryengine.v1.SearchService.Search]
    /// instead with required OAuth and IAM checks to provide better data security.
    ///
    /// [google.cloud.discoveryengine.v1.SearchService.Search]: crate::client::SearchService::search
    pub fn search_lite(
        &self,
        serving_config: impl Into<std::string::String>,
    ) -> super::builders::search_service::SearchLite {
        super::builders::search_service::SearchLite::new(self.inner.clone())
            .set_serving_config(serving_config.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::search_service::ListOperations {
        super::builders::search_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::search_service::GetOperation {
        super::builders::search_service::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::search_service::CancelOperation {
        super::builders::search_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Discovery Engine API.
///
/// # Service Description
///
/// Service for search tuning.
///
/// # Configuration
///
/// `SearchTuningService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SearchTuningService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SearchTuningService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SearchTuningService {
    inner: Arc<dyn super::stubs::dynamic::SearchTuningService>,
}

impl SearchTuningService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::SearchTuningService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::SearchTuningService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::SearchTuningService> {
        super::transport::SearchTuningService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::SearchTuningService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::SearchTuningService::new)
    }

    /// Trains a custom model.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn train_custom_model(
        &self,
        data_store: impl Into<std::string::String>,
    ) -> super::builders::search_tuning_service::TrainCustomModel {
        super::builders::search_tuning_service::TrainCustomModel::new(self.inner.clone())
            .set_data_store(data_store.into())
    }

    /// Gets a list of all the custom models.
    pub fn list_custom_models(
        &self,
        data_store: impl Into<std::string::String>,
    ) -> super::builders::search_tuning_service::ListCustomModels {
        super::builders::search_tuning_service::ListCustomModels::new(self.inner.clone())
            .set_data_store(data_store.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::search_tuning_service::ListOperations {
        super::builders::search_tuning_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::search_tuning_service::GetOperation {
        super::builders::search_tuning_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::search_tuning_service::CancelOperation {
        super::builders::search_tuning_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Discovery Engine API.
///
/// # Service Description
///
/// Service for managing site search related resources.
///
/// # Configuration
///
/// `SiteSearchEngineService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SiteSearchEngineService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SiteSearchEngineService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SiteSearchEngineService {
    inner: Arc<dyn super::stubs::dynamic::SiteSearchEngineService>,
}

impl SiteSearchEngineService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::SiteSearchEngineService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::SiteSearchEngineService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::SiteSearchEngineService> {
        super::transport::SiteSearchEngineService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::SiteSearchEngineService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::SiteSearchEngineService::new)
    }

    /// Gets the
    /// [SiteSearchEngine][google.cloud.discoveryengine.v1.SiteSearchEngine].
    ///
    /// [google.cloud.discoveryengine.v1.SiteSearchEngine]: crate::model::SiteSearchEngine
    pub fn get_site_search_engine(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::site_search_engine_service::GetSiteSearchEngine {
        super::builders::site_search_engine_service::GetSiteSearchEngine::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a [TargetSite][google.cloud.discoveryengine.v1.TargetSite].
    ///
    /// [google.cloud.discoveryengine.v1.TargetSite]: crate::model::TargetSite
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_target_site(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::site_search_engine_service::CreateTargetSite {
        super::builders::site_search_engine_service::CreateTargetSite::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates [TargetSite][google.cloud.discoveryengine.v1.TargetSite] in a
    /// batch.
    ///
    /// [google.cloud.discoveryengine.v1.TargetSite]: crate::model::TargetSite
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_create_target_sites(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::site_search_engine_service::BatchCreateTargetSites {
        super::builders::site_search_engine_service::BatchCreateTargetSites::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a [TargetSite][google.cloud.discoveryengine.v1.TargetSite].
    ///
    /// [google.cloud.discoveryengine.v1.TargetSite]: crate::model::TargetSite
    pub fn get_target_site(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::site_search_engine_service::GetTargetSite {
        super::builders::site_search_engine_service::GetTargetSite::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a [TargetSite][google.cloud.discoveryengine.v1.TargetSite].
    ///
    /// [google.cloud.discoveryengine.v1.TargetSite]: crate::model::TargetSite
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_target_site(
        &self,
        target_site: impl Into<crate::model::TargetSite>,
    ) -> super::builders::site_search_engine_service::UpdateTargetSite {
        super::builders::site_search_engine_service::UpdateTargetSite::new(self.inner.clone())
            .set_target_site(target_site.into())
    }

    /// Deletes a [TargetSite][google.cloud.discoveryengine.v1.TargetSite].
    ///
    /// [google.cloud.discoveryengine.v1.TargetSite]: crate::model::TargetSite
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_target_site(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::site_search_engine_service::DeleteTargetSite {
        super::builders::site_search_engine_service::DeleteTargetSite::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets a list of [TargetSite][google.cloud.discoveryengine.v1.TargetSite]s.
    ///
    /// [google.cloud.discoveryengine.v1.TargetSite]: crate::model::TargetSite
    pub fn list_target_sites(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::site_search_engine_service::ListTargetSites {
        super::builders::site_search_engine_service::ListTargetSites::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Upgrade from basic site search to advanced site search.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn enable_advanced_site_search(
        &self,
        site_search_engine: impl Into<std::string::String>,
    ) -> super::builders::site_search_engine_service::EnableAdvancedSiteSearch {
        super::builders::site_search_engine_service::EnableAdvancedSiteSearch::new(
            self.inner.clone(),
        )
        .set_site_search_engine(site_search_engine.into())
    }

    /// Downgrade from advanced site search to basic site search.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn disable_advanced_site_search(
        &self,
        site_search_engine: impl Into<std::string::String>,
    ) -> super::builders::site_search_engine_service::DisableAdvancedSiteSearch {
        super::builders::site_search_engine_service::DisableAdvancedSiteSearch::new(
            self.inner.clone(),
        )
        .set_site_search_engine(site_search_engine.into())
    }

    /// Request on-demand recrawl for a list of URIs.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn recrawl_uris(
        &self,
        site_search_engine: impl Into<std::string::String>,
    ) -> super::builders::site_search_engine_service::RecrawlUris {
        super::builders::site_search_engine_service::RecrawlUris::new(self.inner.clone())
            .set_site_search_engine(site_search_engine.into())
    }

    /// Verify target sites' ownership and validity.
    /// This API sends all the target sites under site search engine for
    /// verification.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_verify_target_sites(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::site_search_engine_service::BatchVerifyTargetSites {
        super::builders::site_search_engine_service::BatchVerifyTargetSites::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns list of target sites with its domain verification status.
    /// This method can only be called under data store with BASIC_SITE_SEARCH
    /// state at the moment.
    pub fn fetch_domain_verification_status(
        &self,
        site_search_engine: impl Into<std::string::String>,
    ) -> super::builders::site_search_engine_service::FetchDomainVerificationStatus {
        super::builders::site_search_engine_service::FetchDomainVerificationStatus::new(
            self.inner.clone(),
        )
        .set_site_search_engine(site_search_engine.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::site_search_engine_service::ListOperations {
        super::builders::site_search_engine_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::site_search_engine_service::GetOperation {
        super::builders::site_search_engine_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::site_search_engine_service::CancelOperation {
        super::builders::site_search_engine_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Discovery Engine API.
///
/// # Service Description
///
/// Service for ingesting end user actions on a website to Discovery Engine API.
///
/// # Configuration
///
/// `UserEventService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `UserEventService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `UserEventService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct UserEventService {
    inner: Arc<dyn super::stubs::dynamic::UserEventService>,
}

impl UserEventService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::UserEventService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::UserEventService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::UserEventService> {
        super::transport::UserEventService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::UserEventService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::UserEventService::new)
    }

    /// Writes a single user event.
    pub fn write_user_event(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::user_event_service::WriteUserEvent {
        super::builders::user_event_service::WriteUserEvent::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Writes a single user event from the browser. This uses a GET request to
    /// due to browser restriction of POST-ing to a third-party domain.
    ///
    /// This method is used only by the Discovery Engine API JavaScript pixel and
    /// Google Tag Manager. Users should not call this method directly.
    pub fn collect_user_event(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::user_event_service::CollectUserEvent {
        super::builders::user_event_service::CollectUserEvent::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes permanently all user events specified by the filter provided.
    /// Depending on the number of events specified by the filter, this operation
    /// could take hours or days to complete. To test a filter, use the list
    /// command first.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn purge_user_events(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::user_event_service::PurgeUserEvents {
        super::builders::user_event_service::PurgeUserEvents::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Bulk import of user events. Request processing might be
    /// synchronous. Events that already exist are skipped.
    /// Use this method for backfilling historical user events.
    ///
    /// Operation.response is of type ImportResponse. Note that it is
    /// possible for a subset of the items to be successfully inserted.
    /// Operation.metadata is of type ImportMetadata.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_user_events(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::user_event_service::ImportUserEvents {
        super::builders::user_event_service::ImportUserEvents::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::user_event_service::ListOperations {
        super::builders::user_event_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::user_event_service::GetOperation {
        super::builders::user_event_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::user_event_service::CancelOperation {
        super::builders::user_event_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
