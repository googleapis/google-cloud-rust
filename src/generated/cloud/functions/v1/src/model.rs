// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::invalid_html_tags)]
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate iam_v1;
extern crate lazy_static;
extern crate location;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Describes a Cloud Function that contains user computation executed in
/// response to an event. It encapsulate function and triggers configurations.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CloudFunction {
    /// A user-defined name of the function. Function names must be unique
    /// globally and match pattern `projects/*/locations/*/functions/*`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// User-provided description of a function.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. Status of the function deployment.
    pub status: crate::model::CloudFunctionStatus,

    /// The name of the function (as defined in source code) that will be
    /// executed. Defaults to the resource name suffix (ID of the function), if not
    /// specified.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub entry_point: std::string::String,

    /// The runtime in which to run the function. Required when deploying a new
    /// function, optional when updating an existing function. For a complete
    /// list of possible choices, see the
    /// [`gcloud` command
    /// reference](https://cloud.google.com/sdk/gcloud/reference/functions/deploy#--runtime).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub runtime: std::string::String,

    /// The function execution timeout. Execution is considered failed and
    /// can be terminated if the function is not completed at the end of the
    /// timeout period. Defaults to 60 seconds.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub timeout: std::option::Option<wkt::Duration>,

    /// The amount of memory in MB available for a function.
    /// Defaults to 256MB.
    pub available_memory_mb: i32,

    /// The email of the function's service account. If empty, defaults to
    /// `{project_id}@appspot.gserviceaccount.com`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_account_email: std::string::String,

    /// Output only. The last update timestamp of a Cloud Function.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The version identifier of the Cloud Function. Each deployment
    /// attempt results in a new version of a function being created.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub version_id: i64,

    /// Labels associated with this Cloud Function.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Environment variables that shall be available during function execution.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub environment_variables: std::collections::HashMap<std::string::String, std::string::String>,

    /// Build environment variables that shall be available during build time.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub build_environment_variables:
        std::collections::HashMap<std::string::String, std::string::String>,

    /// Deprecated: use vpc_connector
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub network: std::string::String,

    /// The limit on the maximum number of function instances that may coexist at a
    /// given time.
    ///
    /// In some cases, such as rapid traffic surges, Cloud Functions may, for a
    /// short period of time, create more instances than the specified max
    /// instances limit. If your function cannot tolerate this temporary behavior,
    /// you may want to factor in a safety margin and set a lower max instances
    /// value than your function can tolerate.
    ///
    /// See the [Max
    /// Instances](https://cloud.google.com/functions/docs/max-instances) Guide for
    /// more details.
    pub max_instances: i32,

    /// A lower bound for the number function instances that may coexist at a
    /// given time.
    pub min_instances: i32,

    /// The VPC Network Connector that this cloud function can connect to. It can
    /// be either the fully-qualified URI, or the short name of the network
    /// connector resource. The format of this field is
    /// `projects/*/locations/*/connectors/*`
    ///
    /// This field is mutually exclusive with `network` field and will eventually
    /// replace it.
    ///
    /// See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for
    /// more information on connecting Cloud projects.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub vpc_connector: std::string::String,

    /// The egress settings for the connector, controlling what traffic is diverted
    /// through it.
    pub vpc_connector_egress_settings: crate::model::cloud_function::VpcConnectorEgressSettings,

    /// The ingress settings for the function, controlling what traffic can reach
    /// it.
    pub ingress_settings: crate::model::cloud_function::IngressSettings,

    /// Resource name of a KMS crypto key (managed by the user) used to
    /// encrypt/decrypt function resources.
    ///
    /// It must match the pattern
    /// `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
    ///
    /// If specified, you must also provide an artifact registry repository using
    /// the `docker_repository` field that was created with the same KMS crypto
    /// key.
    ///
    /// The following service accounts need to be granted the role 'Cloud KMS
    /// CryptoKey Encrypter/Decrypter (roles/cloudkms.cryptoKeyEncrypterDecrypter)'
    /// on the Key/KeyRing/Project/Organization (least access preferred).
    ///
    /// . Google Cloud Functions service account
    ///   (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) -
    ///   Required to protect the function's image.
    /// . Google Storage service account
    ///   (service-{project_number}@gs-project-accounts.iam.gserviceaccount.com) -
    ///   Required to protect the function's source code.
    ///   If this service account does not exist, deploying a function without a
    ///   KMS key or retrieving the service agent name provisions it. For more
    ///   information, see
    ///   <https://cloud.google.com/storage/docs/projects#service-agents> and
    ///   <https://cloud.google.com/storage/docs/getting-service-agent#gsutil>.
    ///
    /// Google Cloud Functions delegates access to service agents to protect
    /// function resources in internal projects that are not accessible by the
    /// end user.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub kms_key_name: std::string::String,

    /// Name of the Cloud Build Custom Worker Pool that should be used to build the
    /// function. The format of this field is
    /// `projects/{project}/locations/{region}/workerPools/{workerPool}` where
    /// `{project}` and `{region}` are the project id and region respectively where
    /// the worker pool is defined and `{workerPool}` is the short name of the
    /// worker pool.
    ///
    /// If the project id is not the same as the function, then the Cloud
    /// Functions Service Agent
    /// (`service-<project_number>@gcf-admin-robot.iam.gserviceaccount.com`) must
    /// be granted the role Cloud Build Custom Workers Builder
    /// (`roles/cloudbuild.customworkers.builder`) in the project.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub build_worker_pool: std::string::String,

    /// Output only. The Cloud Build ID of the latest successful deployment of the
    /// function.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub build_id: std::string::String,

    /// Output only. The Cloud Build Name of the function deployment.
    /// `projects/<project-number>/locations/<region>/builds/<build-id>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub build_name: std::string::String,

    /// Secret environment variables configuration.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub secret_environment_variables: std::vec::Vec<crate::model::SecretEnvVar>,

    /// Secret volumes configuration.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub secret_volumes: std::vec::Vec<crate::model::SecretVolume>,

    /// Input only. An identifier for Firebase function sources. Disclaimer: This
    /// field is only supported for Firebase function deployments.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source_token: std::string::String,

    /// User-managed repository created in Artifact Registry to which the
    /// function's Docker image will be pushed after it is built by Cloud Build.
    /// May optionally be encrypted with a customer-managed encryption key (CMEK).
    /// If unspecified and `docker_registry` is not explicitly set to
    /// `CONTAINER_REGISTRY`, GCF will create and use a default Artifact Registry
    /// repository named 'gcf-artifacts' in the region.
    ///
    /// It must match the pattern
    /// `projects/{project}/locations/{location}/repositories/{repository}`.
    ///
    /// Cross-project repositories are not supported.
    /// Cross-location repositories are not supported.
    /// Repository format must be 'DOCKER'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub docker_repository: std::string::String,

    /// Docker Registry to use for this deployment.
    ///
    /// If unspecified, it defaults to `ARTIFACT_REGISTRY`.
    /// If `docker_repository` field is specified, this field should either be left
    /// unspecified or set to `ARTIFACT_REGISTRY`.
    pub docker_registry: crate::model::cloud_function::DockerRegistry,

    /// A service account the user provides for use with Cloud Build. The format of
    /// this field is
    /// `projects/{projectId}/serviceAccounts/{serviceAccountEmail}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub build_service_account: std::string::String,

    /// The location of the function source code.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub source_code: std::option::Option<crate::model::cloud_function::SourceCode>,

    /// An event that triggers the function.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub trigger: std::option::Option<crate::model::cloud_function::Trigger>,

    /// This controls when security patches are applied to the runtime environment.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub runtime_update_policy:
        std::option::Option<crate::model::cloud_function::RuntimeUpdatePolicy>,
}

impl CloudFunction {
    /// Sets the value of `name`.
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of `description`.
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of `status`.
    pub fn set_status<T: std::convert::Into<crate::model::CloudFunctionStatus>>(
        mut self,
        v: T,
    ) -> Self {
        self.status = v.into();
        self
    }

    /// Sets the value of `entry_point`.
    pub fn set_entry_point<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.entry_point = v.into();
        self
    }

    /// Sets the value of `runtime`.
    pub fn set_runtime<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.runtime = v.into();
        self
    }

    /// Sets the value of `timeout`.
    pub fn set_timeout<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.timeout = v.into();
        self
    }

    /// Sets the value of `available_memory_mb`.
    pub fn set_available_memory_mb<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.available_memory_mb = v.into();
        self
    }

    /// Sets the value of `service_account_email`.
    pub fn set_service_account_email<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.service_account_email = v.into();
        self
    }

    /// Sets the value of `update_time`.
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of `version_id`.
    pub fn set_version_id<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.version_id = v.into();
        self
    }

    /// Sets the value of `labels`.
    pub fn set_labels<
        T: std::convert::Into<std::collections::HashMap<std::string::String, std::string::String>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.labels = v.into();
        self
    }

    /// Sets the value of `environment_variables`.
    pub fn set_environment_variables<
        T: std::convert::Into<std::collections::HashMap<std::string::String, std::string::String>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.environment_variables = v.into();
        self
    }

    /// Sets the value of `build_environment_variables`.
    pub fn set_build_environment_variables<
        T: std::convert::Into<std::collections::HashMap<std::string::String, std::string::String>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.build_environment_variables = v.into();
        self
    }

    /// Sets the value of `network`.
    pub fn set_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.network = v.into();
        self
    }

    /// Sets the value of `max_instances`.
    pub fn set_max_instances<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.max_instances = v.into();
        self
    }

    /// Sets the value of `min_instances`.
    pub fn set_min_instances<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.min_instances = v.into();
        self
    }

    /// Sets the value of `vpc_connector`.
    pub fn set_vpc_connector<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.vpc_connector = v.into();
        self
    }

    /// Sets the value of `vpc_connector_egress_settings`.
    pub fn set_vpc_connector_egress_settings<
        T: std::convert::Into<crate::model::cloud_function::VpcConnectorEgressSettings>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.vpc_connector_egress_settings = v.into();
        self
    }

    /// Sets the value of `ingress_settings`.
    pub fn set_ingress_settings<
        T: std::convert::Into<crate::model::cloud_function::IngressSettings>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.ingress_settings = v.into();
        self
    }

    /// Sets the value of `kms_key_name`.
    pub fn set_kms_key_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.kms_key_name = v.into();
        self
    }

    /// Sets the value of `build_worker_pool`.
    pub fn set_build_worker_pool<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.build_worker_pool = v.into();
        self
    }

    /// Sets the value of `build_id`.
    pub fn set_build_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.build_id = v.into();
        self
    }

    /// Sets the value of `build_name`.
    pub fn set_build_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.build_name = v.into();
        self
    }

    /// Sets the value of `secret_environment_variables`.
    pub fn set_secret_environment_variables<
        T: std::convert::Into<std::vec::Vec<crate::model::SecretEnvVar>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.secret_environment_variables = v.into();
        self
    }

    /// Sets the value of `secret_volumes`.
    pub fn set_secret_volumes<T: std::convert::Into<std::vec::Vec<crate::model::SecretVolume>>>(
        mut self,
        v: T,
    ) -> Self {
        self.secret_volumes = v.into();
        self
    }

    /// Sets the value of `source_token`.
    pub fn set_source_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source_token = v.into();
        self
    }

    /// Sets the value of `docker_repository`.
    pub fn set_docker_repository<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.docker_repository = v.into();
        self
    }

    /// Sets the value of `docker_registry`.
    pub fn set_docker_registry<
        T: std::convert::Into<crate::model::cloud_function::DockerRegistry>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.docker_registry = v.into();
        self
    }

    /// Sets the value of `build_service_account`.
    pub fn set_build_service_account<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.build_service_account = v.into();
        self
    }

    /// Sets the value of `source_code`.
    pub fn set_source_code<
        T: std::convert::Into<std::option::Option<crate::model::cloud_function::SourceCode>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source_code = v.into();
        self
    }

    /// Sets the value of `trigger`.
    pub fn set_trigger<
        T: std::convert::Into<std::option::Option<crate::model::cloud_function::Trigger>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.trigger = v.into();
        self
    }

    /// Sets the value of `runtime_update_policy`.
    pub fn set_runtime_update_policy<
        T: std::convert::Into<std::option::Option<crate::model::cloud_function::RuntimeUpdatePolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.runtime_update_policy = v.into();
        self
    }
}

impl wkt::message::Message for CloudFunction {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.CloudFunction"
    }
}

/// Defines additional types related to CloudFunction
pub mod cloud_function {
    #[allow(unused_imports)]
    use super::*;

    /// Security patches are applied automatically to the runtime without requiring
    /// the function to be redeployed.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AutomaticUpdatePolicy {}

    impl AutomaticUpdatePolicy {}

    impl wkt::message::Message for AutomaticUpdatePolicy {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.functions.v1.CloudFunction.AutomaticUpdatePolicy"
        }
    }

    /// Security patches are only applied when a function is redeployed.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct OnDeployUpdatePolicy {
        /// Output only. Contains the runtime version which was used during latest
        /// function deployment.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub runtime_version: std::string::String,
    }

    impl OnDeployUpdatePolicy {
        /// Sets the value of `runtime_version`.
        pub fn set_runtime_version<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.runtime_version = v.into();
            self
        }
    }

    impl wkt::message::Message for OnDeployUpdatePolicy {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.functions.v1.CloudFunction.OnDeployUpdatePolicy"
        }
    }

    /// Available egress settings.
    ///
    /// This controls what traffic is diverted through the VPC Access Connector
    /// resource. By default PRIVATE_RANGES_ONLY will be used.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct VpcConnectorEgressSettings(std::string::String);

    impl VpcConnectorEgressSettings {
        /// Sets the enum value.
        pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.0 = v.into();
            self
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [VpcConnectorEgressSettings](VpcConnectorEgressSettings)
    pub mod vpc_connector_egress_settings {

        /// Unspecified.
        pub const VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED: &str =
            "VPC_CONNECTOR_EGRESS_SETTINGS_UNSPECIFIED";

        /// Use the VPC Access Connector only for private IP space from RFC1918.
        pub const PRIVATE_RANGES_ONLY: &str = "PRIVATE_RANGES_ONLY";

        /// Force the use of VPC Access Connector for all egress traffic from the
        /// function.
        pub const ALL_TRAFFIC: &str = "ALL_TRAFFIC";
    }

    /// Available ingress settings.
    ///
    /// This controls what traffic can reach the function.
    ///
    /// If unspecified, ALLOW_ALL will be used.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct IngressSettings(std::string::String);

    impl IngressSettings {
        /// Sets the enum value.
        pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.0 = v.into();
            self
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [IngressSettings](IngressSettings)
    pub mod ingress_settings {

        /// Unspecified.
        pub const INGRESS_SETTINGS_UNSPECIFIED: &str = "INGRESS_SETTINGS_UNSPECIFIED";

        /// Allow HTTP traffic from public and private sources.
        pub const ALLOW_ALL: &str = "ALLOW_ALL";

        /// Allow HTTP traffic from only private VPC sources.
        pub const ALLOW_INTERNAL_ONLY: &str = "ALLOW_INTERNAL_ONLY";

        /// Allow HTTP traffic from private VPC sources and through GCLB.
        pub const ALLOW_INTERNAL_AND_GCLB: &str = "ALLOW_INTERNAL_AND_GCLB";
    }

    /// Docker Registry to use for storing function Docker images.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct DockerRegistry(std::string::String);

    impl DockerRegistry {
        /// Sets the enum value.
        pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.0 = v.into();
            self
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [DockerRegistry](DockerRegistry)
    pub mod docker_registry {

        /// Unspecified.
        pub const DOCKER_REGISTRY_UNSPECIFIED: &str = "DOCKER_REGISTRY_UNSPECIFIED";

        /// Docker images will be stored in multi-regional Container Registry
        /// repositories named `gcf`.
        pub const CONTAINER_REGISTRY: &str = "CONTAINER_REGISTRY";

        /// Docker images will be stored in regional Artifact Registry repositories.
        /// By default, GCF will create and use repositories named `gcf-artifacts`
        /// in every region in which a function is deployed. But the repository to
        /// use can also be specified by the user using the `docker_repository`
        /// field.
        pub const ARTIFACT_REGISTRY: &str = "ARTIFACT_REGISTRY";
    }

    /// The location of the function source code.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum SourceCode {
        /// The Google Cloud Storage URL, starting with `gs://`, pointing to the zip
        /// archive which contains the function.
        SourceArchiveUrl(std::string::String),
        /// **Beta Feature**
        ///
        /// The source repository where a function is hosted.
        SourceRepository(crate::model::SourceRepository),
        /// The Google Cloud Storage signed URL used for source uploading, generated
        /// by calling [google.cloud.functions.v1.GenerateUploadUrl].
        ///
        /// The signature is validated on write methods (Create, Update)
        /// The signature is stripped from the Function object on read methods (Get,
        /// List)
        SourceUploadUrl(std::string::String),
    }

    /// An event that triggers the function.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Trigger {
        /// An HTTPS endpoint type of source that can be triggered via URL.
        HttpsTrigger(crate::model::HttpsTrigger),
        /// A source that fires events in response to a condition in another service.
        EventTrigger(crate::model::EventTrigger),
    }

    /// This controls when security patches are applied to the runtime environment.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum RuntimeUpdatePolicy {
        AutomaticUpdatePolicy(crate::model::cloud_function::AutomaticUpdatePolicy),
        OnDeployUpdatePolicy(crate::model::cloud_function::OnDeployUpdatePolicy),
    }
}

/// Describes SourceRepository, used to represent parameters related to
/// source repository where a function is hosted.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SourceRepository {
    /// The URL pointing to the hosted repository where the function is defined.
    /// There are supported Cloud Source Repository URLs in the following
    /// formats:
    ///
    /// To refer to a specific commit:
    /// `<https://source.developers.google.com/projects/>*/repos/*/revisions/*/paths/*`
    /// To refer to a moveable alias (branch):
    /// `<https://source.developers.google.com/projects/>*/repos/*/moveable-aliases/*/paths/*`
    /// In particular, to refer to HEAD use `master` moveable alias.
    /// To refer to a specific fixed alias (tag):
    /// `<https://source.developers.google.com/projects/>*/repos/*/fixed-aliases/*/paths/*`
    ///
    /// You may omit `paths/*` if you want to use the main directory. The function
    /// response may add an empty `/paths/` to the URL.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub url: std::string::String,

    /// Output only. The URL pointing to the hosted repository where the function
    /// were defined at the time of deployment. It always points to a specific
    /// commit in the format described above.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub deployed_url: std::string::String,
}

impl SourceRepository {
    /// Sets the value of `url`.
    pub fn set_url<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.url = v.into();
        self
    }

    /// Sets the value of `deployed_url`.
    pub fn set_deployed_url<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.deployed_url = v.into();
        self
    }
}

impl wkt::message::Message for SourceRepository {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.SourceRepository"
    }
}

/// Describes HttpsTrigger, could be used to connect web hooks to function.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct HttpsTrigger {
    /// Output only. The deployed url for the function.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub url: std::string::String,

    /// The security level for the function.
    pub security_level: crate::model::https_trigger::SecurityLevel,
}

impl HttpsTrigger {
    /// Sets the value of `url`.
    pub fn set_url<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.url = v.into();
        self
    }

    /// Sets the value of `security_level`.
    pub fn set_security_level<T: std::convert::Into<crate::model::https_trigger::SecurityLevel>>(
        mut self,
        v: T,
    ) -> Self {
        self.security_level = v.into();
        self
    }
}

impl wkt::message::Message for HttpsTrigger {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.HttpsTrigger"
    }
}

/// Defines additional types related to HttpsTrigger
pub mod https_trigger {
    #[allow(unused_imports)]
    use super::*;

    /// Available security level settings.
    ///
    /// This controls the methods to enforce security (HTTPS) on a URL.
    ///
    /// If unspecified, SECURE_OPTIONAL will be used.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct SecurityLevel(std::string::String);

    impl SecurityLevel {
        /// Sets the enum value.
        pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.0 = v.into();
            self
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [SecurityLevel](SecurityLevel)
    pub mod security_level {

        /// Unspecified.
        pub const SECURITY_LEVEL_UNSPECIFIED: &str = "SECURITY_LEVEL_UNSPECIFIED";

        /// Requests for a URL that match this handler that do not use HTTPS are
        /// automatically redirected to the HTTPS URL with the same path. Query
        /// parameters are reserved for the redirect.
        pub const SECURE_ALWAYS: &str = "SECURE_ALWAYS";

        /// Both HTTP and HTTPS requests with URLs that match the handler succeed
        /// without redirects. The application can examine the request to determine
        /// which protocol was used and respond accordingly.
        pub const SECURE_OPTIONAL: &str = "SECURE_OPTIONAL";
    }
}

/// Describes EventTrigger, used to request events be sent from another
/// service.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EventTrigger {
    /// Required. The type of event to observe. For example:
    /// `providers/cloud.storage/eventTypes/object.change` and
    /// `providers/cloud.pubsub/eventTypes/topic.publish`.
    ///
    /// Event types match pattern `providers/*/eventTypes/*.*`.
    /// The pattern contains:
    ///
    /// . namespace: For example, `cloud.storage` and
    ///   `google.firebase.analytics`.
    /// . resource type: The type of resource on which event occurs. For
    ///   example, the Google Cloud Storage API includes the type `object`.
    /// . action: The action that generates the event. For example, action for
    ///   a Google Cloud Storage Object is 'change'.
    ///   These parts are lower case.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub event_type: std::string::String,

    /// Required. The resource(s) from which to observe events, for example,
    /// `projects/_/buckets/myBucket`.
    ///
    /// Not all syntactically correct values are accepted by all services. For
    /// example:
    ///
    /// . The authorization model must support it. Google Cloud Functions
    ///   only allows EventTriggers to be deployed that observe resources in the
    ///   same project as the `CloudFunction`.
    /// . The resource type must match the pattern expected for an
    ///   `event_type`. For example, an `EventTrigger` that has an
    ///   `event_type` of "google.pubsub.topic.publish" should have a resource
    ///   that matches Google Cloud Pub/Sub topics.
    ///
    /// Additionally, some services may support short names when creating an
    /// `EventTrigger`. These will always be returned in the normalized "long"
    /// format.
    ///
    /// See each *service's* documentation for supported formats.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub resource: std::string::String,

    /// The hostname of the service that should be observed.
    ///
    /// If no string is provided, the default service implementing the API will
    /// be used. For example, `storage.googleapis.com` is the default for all
    /// event types in the `google.storage` namespace.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service: std::string::String,

    /// Specifies policy for failed executions.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub failure_policy: std::option::Option<crate::model::FailurePolicy>,
}

impl EventTrigger {
    /// Sets the value of `event_type`.
    pub fn set_event_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.event_type = v.into();
        self
    }

    /// Sets the value of `resource`.
    pub fn set_resource<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.resource = v.into();
        self
    }

    /// Sets the value of `service`.
    pub fn set_service<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service = v.into();
        self
    }

    /// Sets the value of `failure_policy`.
    pub fn set_failure_policy<
        T: std::convert::Into<std::option::Option<crate::model::FailurePolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.failure_policy = v.into();
        self
    }
}

impl wkt::message::Message for EventTrigger {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.EventTrigger"
    }
}

/// Describes the policy in case of function's execution failure.
/// If empty, then defaults to ignoring failures (i.e. not retrying them).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FailurePolicy {
    /// Defines the action taken in case of a function execution failure.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub action: std::option::Option<crate::model::failure_policy::Action>,
}

impl FailurePolicy {
    /// Sets the value of `action`.
    pub fn set_action<
        T: std::convert::Into<std::option::Option<crate::model::failure_policy::Action>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.action = v.into();
        self
    }
}

impl wkt::message::Message for FailurePolicy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.FailurePolicy"
    }
}

/// Defines additional types related to FailurePolicy
pub mod failure_policy {
    #[allow(unused_imports)]
    use super::*;

    /// Describes the retry policy in case of function's execution failure.
    /// A function execution will be retried on any failure.
    /// A failed execution will be retried up to 7 days with an exponential backoff
    /// (capped at 10 seconds).
    /// Retried execution is charged as any other execution.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Retry {}

    impl Retry {}

    impl wkt::message::Message for Retry {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.functions.v1.FailurePolicy.Retry"
        }
    }

    /// Defines the action taken in case of a function execution failure.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Action {
        /// If specified, then the function will be retried in case of a failure.
        Retry(crate::model::failure_policy::Retry),
    }
}

/// Configuration for a secret environment variable. It has the information
/// necessary to fetch the secret value from secret manager and expose it as an
/// environment variable.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SecretEnvVar {
    /// Name of the environment variable.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub key: std::string::String,

    /// Project identifier (preferrably project number but can also be the project
    /// ID) of the project that contains the secret. If not set, it will be
    /// populated with the function's project assuming that the secret exists in
    /// the same project as of the function.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub project_id: std::string::String,

    /// Name of the secret in secret manager (not the full resource name).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub secret: std::string::String,

    /// Version of the secret (version number or the string 'latest'). It is
    /// recommended to use a numeric version for secret environment variables as
    /// any updates to the secret value is not reflected until new instances start.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub version: std::string::String,
}

impl SecretEnvVar {
    /// Sets the value of `key`.
    pub fn set_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.key = v.into();
        self
    }

    /// Sets the value of `project_id`.
    pub fn set_project_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.project_id = v.into();
        self
    }

    /// Sets the value of `secret`.
    pub fn set_secret<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.secret = v.into();
        self
    }

    /// Sets the value of `version`.
    pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.version = v.into();
        self
    }
}

impl wkt::message::Message for SecretEnvVar {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.SecretEnvVar"
    }
}

/// Configuration for a secret volume. It has the information necessary to fetch
/// the secret value from secret manager and make it available as files mounted
/// at the requested paths within the application container. Secret value is not
/// a part of the configuration. Every filesystem read operation performs a
/// lookup in secret manager to retrieve the secret value.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SecretVolume {
    /// The path within the container to mount the secret volume. For example,
    /// setting the mount_path as `/etc/secrets` would mount the secret value files
    /// under the `/etc/secrets` directory. This directory will also be completely
    /// shadowed and unavailable to mount any other secrets.
    ///
    /// Recommended mount paths: /etc/secrets
    /// Restricted mount paths: /cloudsql, /dev/log, /pod, /proc, /var/log
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub mount_path: std::string::String,

    /// Project identifier (preferrably project number but can also be the project
    /// ID) of the project that contains the secret. If not set, it will be
    /// populated with the function's project assuming that the secret exists in
    /// the same project as of the function.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub project_id: std::string::String,

    /// Name of the secret in secret manager (not the full resource name).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub secret: std::string::String,

    /// List of secret versions to mount for this secret. If empty, the `latest`
    /// version of the secret will be made available in a file named after the
    /// secret under the mount point.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub versions: std::vec::Vec<crate::model::secret_volume::SecretVersion>,
}

impl SecretVolume {
    /// Sets the value of `mount_path`.
    pub fn set_mount_path<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.mount_path = v.into();
        self
    }

    /// Sets the value of `project_id`.
    pub fn set_project_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.project_id = v.into();
        self
    }

    /// Sets the value of `secret`.
    pub fn set_secret<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.secret = v.into();
        self
    }

    /// Sets the value of `versions`.
    pub fn set_versions<
        T: std::convert::Into<std::vec::Vec<crate::model::secret_volume::SecretVersion>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.versions = v.into();
        self
    }
}

impl wkt::message::Message for SecretVolume {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.SecretVolume"
    }
}

/// Defines additional types related to SecretVolume
pub mod secret_volume {
    #[allow(unused_imports)]
    use super::*;

    /// Configuration for a single version.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SecretVersion {
        /// Version of the secret (version number or the string 'latest'). It is
        /// preferable to use `latest` version with secret volumes as secret value
        /// changes are reflected immediately.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub version: std::string::String,

        /// Relative path of the file under the mount path where the secret value for
        /// this version will be fetched and made available. For example, setting the
        /// mount_path as '/etc/secrets' and path as `/secret_foo` would mount the
        /// secret value file at `/etc/secrets/secret_foo`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub path: std::string::String,
    }

    impl SecretVersion {
        /// Sets the value of `version`.
        pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.version = v.into();
            self
        }

        /// Sets the value of `path`.
        pub fn set_path<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.path = v.into();
            self
        }
    }

    impl wkt::message::Message for SecretVersion {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.functions.v1.SecretVolume.SecretVersion"
        }
    }
}

/// Request for the `CreateFunction` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateFunctionRequest {
    /// Required. The project and location in which the function should be created,
    /// specified in the format `projects/*/locations/*`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub location: std::string::String,

    /// Required. Function to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub function: std::option::Option<crate::model::CloudFunction>,
}

impl CreateFunctionRequest {
    /// Sets the value of `location`.
    pub fn set_location<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.location = v.into();
        self
    }

    /// Sets the value of `function`.
    pub fn set_function<T: std::convert::Into<std::option::Option<crate::model::CloudFunction>>>(
        mut self,
        v: T,
    ) -> Self {
        self.function = v.into();
        self
    }
}

impl wkt::message::Message for CreateFunctionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.CreateFunctionRequest"
    }
}

/// Request for the `UpdateFunction` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateFunctionRequest {
    /// Required. New version of the function.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub function: std::option::Option<crate::model::CloudFunction>,

    /// Required. The list of fields in `CloudFunction` that have to be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateFunctionRequest {
    /// Sets the value of `function`.
    pub fn set_function<T: std::convert::Into<std::option::Option<crate::model::CloudFunction>>>(
        mut self,
        v: T,
    ) -> Self {
        self.function = v.into();
        self
    }

    /// Sets the value of `update_mask`.
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateFunctionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.UpdateFunctionRequest"
    }
}

/// Request for the `GetFunction` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetFunctionRequest {
    /// Required. The name of the function which details should be obtained.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. The optional version of the function whose details should be
    /// obtained. The version of a 1st Gen function is an integer that starts from
    /// 1 and gets incremented on redeployments. Each deployment creates a config
    /// version of the underlying function. GCF may keep historical configs for old
    /// versions. This field can be specified to fetch the historical configs.
    /// Leave it blank or set to 0 to get the latest version of the function.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub version_id: i64,
}

impl GetFunctionRequest {
    /// Sets the value of `name`.
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of `version_id`.
    pub fn set_version_id<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.version_id = v.into();
        self
    }
}

impl wkt::message::Message for GetFunctionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.GetFunctionRequest"
    }
}

/// Request for the `ListFunctions` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListFunctionsRequest {
    /// The project and location from which the function should be listed,
    /// specified in the format `projects/*/locations/*`
    /// If you want to list functions in all locations, use "-" in place of a
    /// location. When listing functions in all locations, if one or more
    /// location(s) are unreachable, the response will contain functions from all
    /// reachable locations along with the names of any unreachable locations.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Maximum number of functions to return per call.
    pub page_size: i32,

    /// The value returned by the last
    /// `ListFunctionsResponse`; indicates that
    /// this is a continuation of a prior `ListFunctions` call, and that the
    /// system should return the next page of data.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListFunctionsRequest {
    /// Sets the value of `parent`.
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of `page_size`.
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of `page_token`.
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListFunctionsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.ListFunctionsRequest"
    }
}

/// Response for the `ListFunctions` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListFunctionsResponse {
    /// The functions that match the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub functions: std::vec::Vec<crate::model::CloudFunction>,

    /// If not empty, indicates that there may be more functions that match
    /// the request; this value should be passed in a new
    /// [google.cloud.functions.v1.ListFunctionsRequest][google.cloud.functions.v1.ListFunctionsRequest]
    /// to get more functions.
    ///
    /// [google.cloud.functions.v1.ListFunctionsRequest]: crate::model::ListFunctionsRequest
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached. The response does not include any
    /// functions from these locations.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListFunctionsResponse {
    /// Sets the value of `functions`.
    pub fn set_functions<T: std::convert::Into<std::vec::Vec<crate::model::CloudFunction>>>(
        mut self,
        v: T,
    ) -> Self {
        self.functions = v.into();
        self
    }

    /// Sets the value of `next_page_token`.
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of `unreachable`.
    pub fn set_unreachable<T: std::convert::Into<std::vec::Vec<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.unreachable = v.into();
        self
    }
}

impl wkt::message::Message for ListFunctionsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.ListFunctionsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListFunctionsResponse {
    type PageItem = crate::model::CloudFunction;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.functions
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request for the `DeleteFunction` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteFunctionRequest {
    /// Required. The name of the function which should be deleted.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteFunctionRequest {
    /// Sets the value of `name`.
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteFunctionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.DeleteFunctionRequest"
    }
}

/// Request for the `CallFunction` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CallFunctionRequest {
    /// Required. The name of the function to be called.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Input to be passed to the function.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub data: std::string::String,
}

impl CallFunctionRequest {
    /// Sets the value of `name`.
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of `data`.
    pub fn set_data<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.data = v.into();
        self
    }
}

impl wkt::message::Message for CallFunctionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.CallFunctionRequest"
    }
}

/// Response of `CallFunction` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CallFunctionResponse {
    /// Execution id of function invocation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub execution_id: std::string::String,

    /// Result populated for successful execution of synchronous function. Will
    /// not be populated if function does not return a result through context.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub result: std::string::String,

    /// Either system or user-function generated error. Set if execution
    /// was not successful.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub error: std::string::String,
}

impl CallFunctionResponse {
    /// Sets the value of `execution_id`.
    pub fn set_execution_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.execution_id = v.into();
        self
    }

    /// Sets the value of `result`.
    pub fn set_result<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.result = v.into();
        self
    }

    /// Sets the value of `error`.
    pub fn set_error<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.error = v.into();
        self
    }
}

impl wkt::message::Message for CallFunctionResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.CallFunctionResponse"
    }
}

/// Request of `GenerateSourceUploadUrl` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GenerateUploadUrlRequest {
    /// The project and location in which the Google Cloud Storage signed URL
    /// should be generated, specified in the format `projects/*/locations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Resource name of a KMS crypto key (managed by the user) used to
    /// encrypt/decrypt function source code objects in intermediate Cloud Storage
    /// buckets. When you generate an upload url and upload your source code, it
    /// gets copied to an intermediate Cloud Storage bucket. The source code is
    /// then copied to a versioned directory in the sources bucket in the consumer
    /// project during the function deployment.
    ///
    /// It must match the pattern
    /// `projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}`.
    ///
    /// The Google Cloud Functions service account
    /// (service-{project_number}@gcf-admin-robot.iam.gserviceaccount.com) must be
    /// granted the role 'Cloud KMS CryptoKey Encrypter/Decrypter
    /// (roles/cloudkms.cryptoKeyEncrypterDecrypter)' on the
    /// Key/KeyRing/Project/Organization (least access preferred). GCF will
    /// delegate access to the Google Storage service account in the internal
    /// project.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub kms_key_name: std::string::String,
}

impl GenerateUploadUrlRequest {
    /// Sets the value of `parent`.
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of `kms_key_name`.
    pub fn set_kms_key_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.kms_key_name = v.into();
        self
    }
}

impl wkt::message::Message for GenerateUploadUrlRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.GenerateUploadUrlRequest"
    }
}

/// Response of `GenerateSourceUploadUrl` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GenerateUploadUrlResponse {
    /// The generated Google Cloud Storage signed URL that should be used for a
    /// function source code upload. The uploaded file should be a zip archive
    /// which contains a function.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub upload_url: std::string::String,
}

impl GenerateUploadUrlResponse {
    /// Sets the value of `upload_url`.
    pub fn set_upload_url<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.upload_url = v.into();
        self
    }
}

impl wkt::message::Message for GenerateUploadUrlResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.GenerateUploadUrlResponse"
    }
}

/// Request of `GenerateDownloadUrl` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GenerateDownloadUrlRequest {
    /// The name of function for which source code Google Cloud Storage signed
    /// URL should be generated.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The optional version of function. If not set, default, current version
    /// is used.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub version_id: u64,
}

impl GenerateDownloadUrlRequest {
    /// Sets the value of `name`.
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of `version_id`.
    pub fn set_version_id<T: std::convert::Into<u64>>(mut self, v: T) -> Self {
        self.version_id = v.into();
        self
    }
}

impl wkt::message::Message for GenerateDownloadUrlRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.GenerateDownloadUrlRequest"
    }
}

/// Response of `GenerateDownloadUrl` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GenerateDownloadUrlResponse {
    /// The generated Google Cloud Storage signed URL that should be used for
    /// function source code download.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub download_url: std::string::String,
}

impl GenerateDownloadUrlResponse {
    /// Sets the value of `download_url`.
    pub fn set_download_url<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.download_url = v.into();
        self
    }
}

impl wkt::message::Message for GenerateDownloadUrlResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.GenerateDownloadUrlResponse"
    }
}

/// Metadata describing an [Operation][google.longrunning.Operation]
///
/// [google.longrunning.Operation]: longrunning::model::Operation
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OperationMetadataV1 {
    /// Target of the operation - for example
    /// `projects/project-1/locations/region-1/functions/function-1`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Type of operation.
    #[serde(rename = "type")]
    pub r#type: crate::model::OperationType,

    /// The original request that started the operation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub request: std::option::Option<wkt::Any>,

    /// Version id of the function created or updated by an API call.
    /// This field is only populated for Create and Update operations.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub version_id: i64,

    /// The last update timestamp of the operation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// The Cloud Build ID of the function created or updated by an API call.
    /// This field is only populated for Create and Update operations.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub build_id: std::string::String,

    /// An identifier for Firebase function sources. Disclaimer: This field is only
    /// supported for Firebase function deployments.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source_token: std::string::String,

    /// The Cloud Build Name of the function deployment.
    /// This field is only populated for Create and Update operations.
    /// `projects/<project-number>/locations/<region>/builds/<build-id>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub build_name: std::string::String,
}

impl OperationMetadataV1 {
    /// Sets the value of `target`.
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of `r#type`.
    pub fn set_type<T: std::convert::Into<crate::model::OperationType>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of `request`.
    pub fn set_request<T: std::convert::Into<std::option::Option<wkt::Any>>>(
        mut self,
        v: T,
    ) -> Self {
        self.request = v.into();
        self
    }

    /// Sets the value of `version_id`.
    pub fn set_version_id<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.version_id = v.into();
        self
    }

    /// Sets the value of `update_time`.
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of `build_id`.
    pub fn set_build_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.build_id = v.into();
        self
    }

    /// Sets the value of `source_token`.
    pub fn set_source_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source_token = v.into();
        self
    }

    /// Sets the value of `build_name`.
    pub fn set_build_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.build_name = v.into();
        self
    }
}

impl wkt::message::Message for OperationMetadataV1 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.functions.v1.OperationMetadataV1"
    }
}

/// Describes the current stage of a deployment.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct CloudFunctionStatus(std::string::String);

impl CloudFunctionStatus {
    /// Sets the enum value.
    pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.0 = v.into();
        self
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [CloudFunctionStatus](CloudFunctionStatus)
pub mod cloud_function_status {

    /// Not specified. Invalid state.
    pub const CLOUD_FUNCTION_STATUS_UNSPECIFIED: &str = "CLOUD_FUNCTION_STATUS_UNSPECIFIED";

    /// Function has been successfully deployed and is serving.
    pub const ACTIVE: &str = "ACTIVE";

    /// Function deployment failed and the function isn’t serving.
    pub const OFFLINE: &str = "OFFLINE";

    /// Function is being created or updated.
    pub const DEPLOY_IN_PROGRESS: &str = "DEPLOY_IN_PROGRESS";

    /// Function is being deleted.
    pub const DELETE_IN_PROGRESS: &str = "DELETE_IN_PROGRESS";

    /// Function deployment failed and the function serving state is undefined.
    /// The function should be updated or deleted to move it out of this state.
    pub const UNKNOWN: &str = "UNKNOWN";
}

/// A type of an operation.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct OperationType(std::string::String);

impl OperationType {
    /// Sets the enum value.
    pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.0 = v.into();
        self
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [OperationType](OperationType)
pub mod operation_type {

    /// Unknown operation type.
    pub const OPERATION_UNSPECIFIED: &str = "OPERATION_UNSPECIFIED";

    /// Triggered by CreateFunction call
    pub const CREATE_FUNCTION: &str = "CREATE_FUNCTION";

    /// Triggered by UpdateFunction call
    pub const UPDATE_FUNCTION: &str = "UPDATE_FUNCTION";

    /// Triggered by DeleteFunction call.
    pub const DELETE_FUNCTION: &str = "DELETE_FUNCTION";
}
