// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [CloudFunctionsService](crate::traits::) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct CloudFunctionsService<T>
where
    T: crate::traits::CloudFunctionsService + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> CloudFunctionsService<T>
where
    T: crate::traits::CloudFunctionsService + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> crate::traits::CloudFunctionsService for CloudFunctionsService<T>
where
    T: crate::traits::CloudFunctionsService + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn list_functions(
        &self,
        req: crate::model::ListFunctionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListFunctionsResponse> {
        self.inner.list_functions(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_function(
        &self,
        req: crate::model::GetFunctionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::CloudFunction> {
        self.inner.get_function(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_function(
        &self,
        req: crate::model::CreateFunctionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.create_function(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_function(
        &self,
        req: crate::model::UpdateFunctionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.update_function(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_function(
        &self,
        req: crate::model::DeleteFunctionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_function(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn call_function(
        &self,
        req: crate::model::CallFunctionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::CallFunctionResponse> {
        self.inner.call_function(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn generate_upload_url(
        &self,
        req: crate::model::GenerateUploadUrlRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::GenerateUploadUrlResponse> {
        self.inner.generate_upload_url(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn generate_download_url(
        &self,
        req: crate::model::GenerateDownloadUrlRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::GenerateDownloadUrlResponse> {
        self.inner.generate_download_url(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<iam_v1::model::Policy> {
        self.inner.set_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<iam_v1::model::Policy> {
        self.inner.get_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<iam_v1::model::TestIamPermissionsResponse> {
        self.inner.test_iam_permissions(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<location::model::ListLocationsResponse> {
        self.inner.list_locations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::ListOperationsResponse> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.get_operation(req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_policy::PollingPolicy> {
        self.inner.get_polling_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}
