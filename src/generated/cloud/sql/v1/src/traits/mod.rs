// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use gax::error::Error;

pub(crate) mod dyntraits;

/// Service for managing database backups.
///
/// # Mocking
///
/// Application developers may use this trait to mock the sqladmin clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait SqlBackupRunsService: std::fmt::Debug + Send + Sync {

    /// Deletes the backup taken by a backup run.
    fn delete(
        &self,
        _req: crate::model::SqlBackupRunsDeleteRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Retrieves a resource containing information about a backup run.
    fn get(
        &self,
        _req: crate::model::SqlBackupRunsGetRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BackupRun>> + Send {
        std::future::ready::<crate::Result<crate::model::BackupRun>>(Err(Error::other("unimplemented")))
    }

    /// Creates a new backup run on demand.
    fn insert(
        &self,
        _req: crate::model::SqlBackupRunsInsertRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Lists all backup runs associated with the project or a given instance
    /// and configuration in the reverse chronological order of the backup
    /// initiation time.
    fn list(
        &self,
        _req: crate::model::SqlBackupRunsListRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BackupRunsListResponse>> + Send {
        std::future::ready::<crate::Result<crate::model::BackupRunsListResponse>>(Err(Error::other("unimplemented")))
    }
}

/// Cloud SQL connect service.
///
/// # Mocking
///
/// Application developers may use this trait to mock the sqladmin clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait SqlConnectService: std::fmt::Debug + Send + Sync {

    /// Retrieves connect settings about a Cloud SQL instance.
    fn get_connect_settings(
        &self,
        _req: crate::model::GetConnectSettingsRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ConnectSettings>> + Send {
        std::future::ready::<crate::Result<crate::model::ConnectSettings>>(Err(Error::other("unimplemented")))
    }

    /// Generates a short-lived X509 certificate containing the provided public key
    /// and signed by a private key specific to the target instance. Users may use
    /// the certificate to authenticate as themselves when connecting to the
    /// database.
    fn generate_ephemeral_cert(
        &self,
        _req: crate::model::GenerateEphemeralCertRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::GenerateEphemeralCertResponse>> + Send {
        std::future::ready::<crate::Result<crate::model::GenerateEphemeralCertResponse>>(Err(Error::other("unimplemented")))
    }
}

/// Service to manage databases.
///
/// # Mocking
///
/// Application developers may use this trait to mock the sqladmin clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait SqlDatabasesService: std::fmt::Debug + Send + Sync {

    /// Deletes a database from a Cloud SQL instance.
    fn delete(
        &self,
        _req: crate::model::SqlDatabasesDeleteRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Retrieves a resource containing information about a database inside a Cloud
    /// SQL instance.
    fn get(
        &self,
        _req: crate::model::SqlDatabasesGetRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Database>> + Send {
        std::future::ready::<crate::Result<crate::model::Database>>(Err(Error::other("unimplemented")))
    }

    /// Inserts a resource containing information about a database inside a Cloud
    /// SQL instance.
    ///
    /// **Note:** You can't modify the default character set and collation.
    fn insert(
        &self,
        _req: crate::model::SqlDatabasesInsertRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Lists databases in the specified Cloud SQL instance.
    fn list(
        &self,
        _req: crate::model::SqlDatabasesListRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::DatabasesListResponse>> + Send {
        std::future::ready::<crate::Result<crate::model::DatabasesListResponse>>(Err(Error::other("unimplemented")))
    }

    /// Partially updates a resource containing information about a database inside
    /// a Cloud SQL instance. This method supports patch semantics.
    fn patch(
        &self,
        _req: crate::model::SqlDatabasesUpdateRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Updates a resource containing information about a database inside a Cloud
    /// SQL instance.
    fn update(
        &self,
        _req: crate::model::SqlDatabasesUpdateRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }
}

/// Service to manage database flags for Cloud SQL instances.
///
/// # Mocking
///
/// Application developers may use this trait to mock the sqladmin clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait SqlFlagsService: std::fmt::Debug + Send + Sync {

    /// Lists all available database flags for Cloud SQL instances.
    fn list(
        &self,
        _req: crate::model::SqlFlagsListRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::FlagsListResponse>> + Send {
        std::future::ready::<crate::Result<crate::model::FlagsListResponse>>(Err(Error::other("unimplemented")))
    }
}

/// Service to manage Cloud SQL instances.
///
/// # Mocking
///
/// Application developers may use this trait to mock the sqladmin clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait SqlInstancesService: std::fmt::Debug + Send + Sync {

    /// Adds a new trusted Certificate Authority (CA) version for the specified
    /// instance. Required to prepare for a certificate rotation. If a CA version
    /// was previously added but never used in a certificate rotation, this
    /// operation replaces that version. There cannot be more than one CA version
    /// waiting to be rotated in. For instances that have enabled Certificate
    /// Authority Service (CAS) based server CA, please use AddServerCertificate to
    /// add a new server certificate.
    fn add_server_ca(
        &self,
        _req: crate::model::SqlInstancesAddServerCaRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Creates a Cloud SQL instance as a clone of the source instance. Using this
    /// operation might cause your instance to restart.
    fn clone(
        &self,
        _req: crate::model::SqlInstancesCloneRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Deletes a Cloud SQL instance.
    fn delete(
        &self,
        _req: crate::model::SqlInstancesDeleteRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Demotes the stand-alone instance to be a Cloud SQL read replica for an
    /// external database server.
    fn demote_master(
        &self,
        _req: crate::model::SqlInstancesDemoteMasterRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Demotes an existing standalone instance to be a Cloud SQL read replica
    /// for an external database server.
    fn demote(
        &self,
        _req: crate::model::SqlInstancesDemoteRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL
    /// dump or CSV file.
    fn export(
        &self,
        _req: crate::model::SqlInstancesExportRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Initiates a manual failover of a high availability (HA) primary instance
    /// to a standby instance, which becomes the primary instance. Users are
    /// then rerouted to the new primary. For more information, see the
    /// [Overview of high
    /// availability](https://cloud.google.com/sql/docs/mysql/high-availability)
    /// page in the Cloud SQL documentation.
    /// If using Legacy HA (MySQL only), this causes the instance to failover to
    /// its failover replica instance.
    fn failover(
        &self,
        _req: crate::model::SqlInstancesFailoverRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Reencrypt CMEK instance with latest key version.
    fn reencrypt(
        &self,
        _req: crate::model::SqlInstancesReencryptRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Retrieves a resource containing information about a Cloud SQL instance.
    fn get(
        &self,
        _req: crate::model::SqlInstancesGetRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::DatabaseInstance>> + Send {
        std::future::ready::<crate::Result<crate::model::DatabaseInstance>>(Err(Error::other("unimplemented")))
    }

    /// Imports data into a Cloud SQL instance from a SQL dump  or CSV file in
    /// Cloud Storage.
    fn import(
        &self,
        _req: crate::model::SqlInstancesImportRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Creates a new Cloud SQL instance.
    fn insert(
        &self,
        _req: crate::model::SqlInstancesInsertRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Lists instances under a given project.
    fn list(
        &self,
        _req: crate::model::SqlInstancesListRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::InstancesListResponse>> + Send {
        std::future::ready::<crate::Result<crate::model::InstancesListResponse>>(Err(Error::other("unimplemented")))
    }

    /// Lists all of the trusted Certificate Authorities (CAs) for the specified
    /// instance. There can be up to three CAs listed: the CA that was used to sign
    /// the certificate that is currently in use, a CA that has been added but not
    /// yet used to sign a certificate, and a CA used to sign a certificate that
    /// has previously rotated out.
    fn list_server_cas(
        &self,
        _req: crate::model::SqlInstancesListServerCasRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::InstancesListServerCasResponse>> + Send {
        std::future::ready::<crate::Result<crate::model::InstancesListServerCasResponse>>(Err(Error::other("unimplemented")))
    }

    /// Partially updates settings of a Cloud SQL instance by merging the request
    /// with the current configuration. This method supports patch semantics.
    fn patch(
        &self,
        _req: crate::model::SqlInstancesPatchRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Promotes the read replica instance to be an independent Cloud SQL
    /// primary instance.
    /// Using this operation might cause your instance to restart.
    fn promote_replica(
        &self,
        _req: crate::model::SqlInstancesPromoteReplicaRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Switches over from the primary instance to the designated DR replica
    /// instance.
    fn switchover(
        &self,
        _req: crate::model::SqlInstancesSwitchoverRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Deletes all client certificates and generates a new server SSL certificate
    /// for the instance.
    fn reset_ssl_config(
        &self,
        _req: crate::model::SqlInstancesResetSslConfigRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Restarts a Cloud SQL instance.
    fn restart(
        &self,
        _req: crate::model::SqlInstancesRestartRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Restores a backup of a Cloud SQL instance. Using this operation might cause
    /// your instance to restart.
    fn restore_backup(
        &self,
        _req: crate::model::SqlInstancesRestoreBackupRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Rotates the server certificate to one signed by the Certificate Authority
    /// (CA) version previously added with the addServerCA method. For instances
    /// that have enabled Certificate Authority Service (CAS) based server CA,
    /// please use RotateServerCertificate to rotate the server certificate.
    fn rotate_server_ca(
        &self,
        _req: crate::model::SqlInstancesRotateServerCaRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Starts the replication in the read replica instance.
    fn start_replica(
        &self,
        _req: crate::model::SqlInstancesStartReplicaRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Stops the replication in the read replica instance.
    fn stop_replica(
        &self,
        _req: crate::model::SqlInstancesStopReplicaRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Truncate MySQL general and slow query log tables
    /// MySQL only.
    fn truncate_log(
        &self,
        _req: crate::model::SqlInstancesTruncateLogRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Updates settings of a Cloud SQL instance. Using this operation might cause
    /// your instance to restart.
    fn update(
        &self,
        _req: crate::model::SqlInstancesUpdateRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Generates a short-lived X509 certificate containing the provided public key
    /// and signed by a private key specific to the target instance. Users may use
    /// the certificate to authenticate as themselves when connecting to the
    /// database.
    fn create_ephemeral(
        &self,
        _req: crate::model::SqlInstancesCreateEphemeralCertRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SslCert>> + Send {
        std::future::ready::<crate::Result<crate::model::SslCert>>(Err(Error::other("unimplemented")))
    }

    /// Reschedules the maintenance on the given instance.
    fn reschedule_maintenance(
        &self,
        _req: crate::model::SqlInstancesRescheduleMaintenanceRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Verify External primary instance external sync settings.
    fn verify_external_sync_settings(
        &self,
        _req: crate::model::SqlInstancesVerifyExternalSyncSettingsRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SqlInstancesVerifyExternalSyncSettingsResponse>> + Send {
        std::future::ready::<crate::Result<crate::model::SqlInstancesVerifyExternalSyncSettingsResponse>>(Err(Error::other("unimplemented")))
    }

    /// Start External primary instance migration.
    fn start_external_sync(
        &self,
        _req: crate::model::SqlInstancesStartExternalSyncRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Perform Disk Shrink on primary instance.
    fn perform_disk_shrink(
        &self,
        _req: crate::model::SqlInstancesPerformDiskShrinkRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Get Disk Shrink Config for a given instance.
    fn get_disk_shrink_config(
        &self,
        _req: crate::model::SqlInstancesGetDiskShrinkConfigRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SqlInstancesGetDiskShrinkConfigResponse>> + Send {
        std::future::ready::<crate::Result<crate::model::SqlInstancesGetDiskShrinkConfigResponse>>(Err(Error::other("unimplemented")))
    }

    /// Reset Replica Size to primary instance disk size.
    fn reset_replica_size(
        &self,
        _req: crate::model::SqlInstancesResetReplicaSizeRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Get Latest Recovery Time for a given instance.
    fn get_latest_recovery_time(
        &self,
        _req: crate::model::SqlInstancesGetLatestRecoveryTimeRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SqlInstancesGetLatestRecoveryTimeResponse>> + Send {
        std::future::ready::<crate::Result<crate::model::SqlInstancesGetLatestRecoveryTimeResponse>>(Err(Error::other("unimplemented")))
    }

    /// Acquire a lease for the setup of SQL Server Reporting Services (SSRS).
    fn acquire_ssrs_lease(
        &self,
        _req: crate::model::SqlInstancesAcquireSsrsLeaseRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SqlInstancesAcquireSsrsLeaseResponse>> + Send {
        std::future::ready::<crate::Result<crate::model::SqlInstancesAcquireSsrsLeaseResponse>>(Err(Error::other("unimplemented")))
    }

    /// Release a lease for the setup of SQL Server Reporting Services (SSRS).
    fn release_ssrs_lease(
        &self,
        _req: crate::model::SqlInstancesReleaseSsrsLeaseRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SqlInstancesReleaseSsrsLeaseResponse>> + Send {
        std::future::ready::<crate::Result<crate::model::SqlInstancesReleaseSsrsLeaseResponse>>(Err(Error::other("unimplemented")))
    }
}

/// Service to fetch operations for database instances.
///
/// # Mocking
///
/// Application developers may use this trait to mock the sqladmin clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait SqlOperationsService: std::fmt::Debug + Send + Sync {

    /// Retrieves an instance operation that has been performed on an instance.
    fn get(
        &self,
        _req: crate::model::SqlOperationsGetRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Lists all instance operations that have been performed on the given Cloud
    /// SQL instance in the reverse chronological order of the start time.
    fn list(
        &self,
        _req: crate::model::SqlOperationsListRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::OperationsListResponse>> + Send {
        std::future::ready::<crate::Result<crate::model::OperationsListResponse>>(Err(Error::other("unimplemented")))
    }

    /// Cancels an instance operation that has been performed on an instance.
    fn cancel(
        &self,
        _req: crate::model::SqlOperationsCancelRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }
}

/// Service to manage SSL certs for Cloud SQL instances.
///
/// # Mocking
///
/// Application developers may use this trait to mock the sqladmin clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait SqlSslCertsService: std::fmt::Debug + Send + Sync {

    /// Deletes the SSL certificate. For First Generation instances, the
    /// certificate remains valid until the instance is restarted.
    fn delete(
        &self,
        _req: crate::model::SqlSslCertsDeleteRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Retrieves a particular SSL certificate.  Does not include the private key
    /// (required for usage).  The private key must be saved from the response to
    /// initial creation.
    fn get(
        &self,
        _req: crate::model::SqlSslCertsGetRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SslCert>> + Send {
        std::future::ready::<crate::Result<crate::model::SslCert>>(Err(Error::other("unimplemented")))
    }

    /// Creates an SSL certificate and returns it along with the private key and
    /// server certificate authority.  The new certificate will not be usable until
    /// the instance is restarted.
    fn insert(
        &self,
        _req: crate::model::SqlSslCertsInsertRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SslCertsInsertResponse>> + Send {
        std::future::ready::<crate::Result<crate::model::SslCertsInsertResponse>>(Err(Error::other("unimplemented")))
    }

    /// Lists all of the current SSL certificates for the instance.
    fn list(
        &self,
        _req: crate::model::SqlSslCertsListRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SslCertsListResponse>> + Send {
        std::future::ready::<crate::Result<crate::model::SslCertsListResponse>>(Err(Error::other("unimplemented")))
    }
}

/// Service for providing machine types (tiers) for Cloud SQL instances.
///
/// # Mocking
///
/// Application developers may use this trait to mock the sqladmin clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait SqlTiersService: std::fmt::Debug + Send + Sync {

    /// Lists all available machine types (tiers) for Cloud SQL, for example,
    /// `db-custom-1-3840`. For more information, see
    /// <https://cloud.google.com/sql/pricing>.
    fn list(
        &self,
        _req: crate::model::SqlTiersListRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::TiersListResponse>> + Send {
        std::future::ready::<crate::Result<crate::model::TiersListResponse>>(Err(Error::other("unimplemented")))
    }
}

/// Cloud SQL users service.
///
/// # Mocking
///
/// Application developers may use this trait to mock the sqladmin clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait SqlUsersService: std::fmt::Debug + Send + Sync {

    /// Deletes a user from a Cloud SQL instance.
    fn delete(
        &self,
        _req: crate::model::SqlUsersDeleteRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Retrieves a resource containing information about a user.
    fn get(
        &self,
        _req: crate::model::SqlUsersGetRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::User>> + Send {
        std::future::ready::<crate::Result<crate::model::User>>(Err(Error::other("unimplemented")))
    }

    /// Creates a new user in a Cloud SQL instance.
    fn insert(
        &self,
        _req: crate::model::SqlUsersInsertRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }

    /// Lists users in the specified Cloud SQL instance.
    fn list(
        &self,
        _req: crate::model::SqlUsersListRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::UsersListResponse>> + Send {
        std::future::ready::<crate::Result<crate::model::UsersListResponse>>(Err(Error::other("unimplemented")))
    }

    /// Updates an existing user in a Cloud SQL instance.
    fn update(
        &self,
        _req: crate::model::SqlUsersUpdateRequest,
        _options: gax::options::RequestOptions
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Operation>> + Send {
        std::future::ready::<crate::Result<crate::model::Operation>>(Err(Error::other("unimplemented")))
    }
}

