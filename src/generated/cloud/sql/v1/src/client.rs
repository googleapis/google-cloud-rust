// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud SQL Admin API.
///
/// # Service Description
///
/// Service for managing database backups.
///
/// # Configuration
///
/// `SqlBackupRunsService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SqlBackupRunsService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SqlBackupRunsService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SqlBackupRunsService {
    inner: Arc<dyn crate::stubs::dynamic::SqlBackupRunsService>,
}

impl SqlBackupRunsService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner }) 
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where T: crate::stubs::SqlBackupRunsService + 'static {
        Self { inner: Arc::new(stub) }
    }

    async fn build_inner(conf: gax::options::ClientConfig) -> Result<Arc<dyn crate::stubs::dynamic::SqlBackupRunsService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlBackupRunsService> {
        crate::transport::SqlBackupRunsService::new(conf).await
    }

    async fn build_with_tracing(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlBackupRunsService> {
        Self::build_transport(conf).await.map(crate::tracing::SqlBackupRunsService::new)
    }

    /// Deletes the backup taken by a backup run.
    pub fn delete(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
        id: impl Into<i64>,
    ) -> crate::builders::sql_backup_runs_service::Delete
    {
        crate::builders::sql_backup_runs_service::Delete::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
            .set_id ( id.into() )
    }

    /// Retrieves a resource containing information about a backup run.
    pub fn get(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
        id: impl Into<i64>,
    ) -> crate::builders::sql_backup_runs_service::Get
    {
        crate::builders::sql_backup_runs_service::Get::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
            .set_id ( id.into() )
    }

    /// Creates a new backup run on demand.
    pub fn insert(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_backup_runs_service::Insert
    {
        crate::builders::sql_backup_runs_service::Insert::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Lists all backup runs associated with the project or a given instance
    /// and configuration in the reverse chronological order of the backup
    /// initiation time.
    pub fn list(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_backup_runs_service::List
    {
        crate::builders::sql_backup_runs_service::List::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

}

/// Implements a client for the Cloud SQL Admin API.
///
/// # Service Description
///
/// Cloud SQL connect service.
///
/// # Configuration
///
/// `SqlConnectService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SqlConnectService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SqlConnectService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SqlConnectService {
    inner: Arc<dyn crate::stubs::dynamic::SqlConnectService>,
}

impl SqlConnectService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner }) 
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where T: crate::stubs::SqlConnectService + 'static {
        Self { inner: Arc::new(stub) }
    }

    async fn build_inner(conf: gax::options::ClientConfig) -> Result<Arc<dyn crate::stubs::dynamic::SqlConnectService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlConnectService> {
        crate::transport::SqlConnectService::new(conf).await
    }

    async fn build_with_tracing(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlConnectService> {
        Self::build_transport(conf).await.map(crate::tracing::SqlConnectService::new)
    }

    /// Retrieves connect settings about a Cloud SQL instance.
    pub fn get_connect_settings(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_connect_service::GetConnectSettings
    {
        crate::builders::sql_connect_service::GetConnectSettings::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Generates a short-lived X509 certificate containing the provided public key
    /// and signed by a private key specific to the target instance. Users may use
    /// the certificate to authenticate as themselves when connecting to the
    /// database.
    pub fn generate_ephemeral_cert(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_connect_service::GenerateEphemeralCert
    {
        crate::builders::sql_connect_service::GenerateEphemeralCert::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

}

/// Implements a client for the Cloud SQL Admin API.
///
/// # Service Description
///
/// Service to manage databases.
///
/// # Configuration
///
/// `SqlDatabasesService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SqlDatabasesService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SqlDatabasesService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SqlDatabasesService {
    inner: Arc<dyn crate::stubs::dynamic::SqlDatabasesService>,
}

impl SqlDatabasesService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner }) 
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where T: crate::stubs::SqlDatabasesService + 'static {
        Self { inner: Arc::new(stub) }
    }

    async fn build_inner(conf: gax::options::ClientConfig) -> Result<Arc<dyn crate::stubs::dynamic::SqlDatabasesService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlDatabasesService> {
        crate::transport::SqlDatabasesService::new(conf).await
    }

    async fn build_with_tracing(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlDatabasesService> {
        Self::build_transport(conf).await.map(crate::tracing::SqlDatabasesService::new)
    }

    /// Deletes a database from a Cloud SQL instance.
    pub fn delete(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
        database: impl Into<std::string::String>,
    ) -> crate::builders::sql_databases_service::Delete
    {
        crate::builders::sql_databases_service::Delete::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
            .set_database ( database.into() )
    }

    /// Retrieves a resource containing information about a database inside a Cloud
    /// SQL instance.
    pub fn get(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
        database: impl Into<std::string::String>,
    ) -> crate::builders::sql_databases_service::Get
    {
        crate::builders::sql_databases_service::Get::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
            .set_database ( database.into() )
    }

    /// Inserts a resource containing information about a database inside a Cloud
    /// SQL instance.
    ///
    /// **Note:** You can't modify the default character set and collation.
    pub fn insert(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_databases_service::Insert
    {
        crate::builders::sql_databases_service::Insert::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Lists databases in the specified Cloud SQL instance.
    pub fn list(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_databases_service::List
    {
        crate::builders::sql_databases_service::List::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Partially updates a resource containing information about a database inside
    /// a Cloud SQL instance. This method supports patch semantics.
    pub fn patch(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
        database: impl Into<std::string::String>,
    ) -> crate::builders::sql_databases_service::Patch
    {
        crate::builders::sql_databases_service::Patch::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
            .set_database ( database.into() )
    }

    /// Updates a resource containing information about a database inside a Cloud
    /// SQL instance.
    pub fn update(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
        database: impl Into<std::string::String>,
    ) -> crate::builders::sql_databases_service::Update
    {
        crate::builders::sql_databases_service::Update::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
            .set_database ( database.into() )
    }

}

/// Implements a client for the Cloud SQL Admin API.
///
/// # Service Description
///
/// Service to manage database flags for Cloud SQL instances.
///
/// # Configuration
///
/// `SqlFlagsService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SqlFlagsService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SqlFlagsService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SqlFlagsService {
    inner: Arc<dyn crate::stubs::dynamic::SqlFlagsService>,
}

impl SqlFlagsService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner }) 
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where T: crate::stubs::SqlFlagsService + 'static {
        Self { inner: Arc::new(stub) }
    }

    async fn build_inner(conf: gax::options::ClientConfig) -> Result<Arc<dyn crate::stubs::dynamic::SqlFlagsService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlFlagsService> {
        crate::transport::SqlFlagsService::new(conf).await
    }

    async fn build_with_tracing(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlFlagsService> {
        Self::build_transport(conf).await.map(crate::tracing::SqlFlagsService::new)
    }

    /// Lists all available database flags for Cloud SQL instances.
    pub fn list(
        &self,
    ) -> crate::builders::sql_flags_service::List
    {
        crate::builders::sql_flags_service::List::new(self.inner.clone())
    }

}

/// Implements a client for the Cloud SQL Admin API.
///
/// # Service Description
///
/// Service to manage Cloud SQL instances.
///
/// # Configuration
///
/// `SqlInstancesService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SqlInstancesService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SqlInstancesService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SqlInstancesService {
    inner: Arc<dyn crate::stubs::dynamic::SqlInstancesService>,
}

impl SqlInstancesService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner }) 
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where T: crate::stubs::SqlInstancesService + 'static {
        Self { inner: Arc::new(stub) }
    }

    async fn build_inner(conf: gax::options::ClientConfig) -> Result<Arc<dyn crate::stubs::dynamic::SqlInstancesService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlInstancesService> {
        crate::transport::SqlInstancesService::new(conf).await
    }

    async fn build_with_tracing(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlInstancesService> {
        Self::build_transport(conf).await.map(crate::tracing::SqlInstancesService::new)
    }

    /// Adds a new trusted Certificate Authority (CA) version for the specified
    /// instance. Required to prepare for a certificate rotation. If a CA version
    /// was previously added but never used in a certificate rotation, this
    /// operation replaces that version. There cannot be more than one CA version
    /// waiting to be rotated in. For instances that have enabled Certificate
    /// Authority Service (CAS) based server CA, please use AddServerCertificate to
    /// add a new server certificate.
    pub fn add_server_ca(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::AddServerCa
    {
        crate::builders::sql_instances_service::AddServerCa::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Creates a Cloud SQL instance as a clone of the source instance. Using this
    /// operation might cause your instance to restart.
    pub fn clone(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::Clone
    {
        crate::builders::sql_instances_service::Clone::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Deletes a Cloud SQL instance.
    pub fn delete(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::Delete
    {
        crate::builders::sql_instances_service::Delete::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Demotes the stand-alone instance to be a Cloud SQL read replica for an
    /// external database server.
    pub fn demote_master(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::DemoteMaster
    {
        crate::builders::sql_instances_service::DemoteMaster::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Demotes an existing standalone instance to be a Cloud SQL read replica
    /// for an external database server.
    pub fn demote(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::Demote
    {
        crate::builders::sql_instances_service::Demote::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL
    /// dump or CSV file.
    pub fn export(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::Export
    {
        crate::builders::sql_instances_service::Export::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Initiates a manual failover of a high availability (HA) primary instance
    /// to a standby instance, which becomes the primary instance. Users are
    /// then rerouted to the new primary. For more information, see the
    /// [Overview of high
    /// availability](https://cloud.google.com/sql/docs/mysql/high-availability)
    /// page in the Cloud SQL documentation.
    /// If using Legacy HA (MySQL only), this causes the instance to failover to
    /// its failover replica instance.
    pub fn failover(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::Failover
    {
        crate::builders::sql_instances_service::Failover::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Reencrypt CMEK instance with latest key version.
    pub fn reencrypt(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::Reencrypt
    {
        crate::builders::sql_instances_service::Reencrypt::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Retrieves a resource containing information about a Cloud SQL instance.
    pub fn get(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::Get
    {
        crate::builders::sql_instances_service::Get::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Imports data into a Cloud SQL instance from a SQL dump  or CSV file in
    /// Cloud Storage.
    pub fn import(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::Import
    {
        crate::builders::sql_instances_service::Import::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Creates a new Cloud SQL instance.
    pub fn insert(
        &self,
        project: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::Insert
    {
        crate::builders::sql_instances_service::Insert::new(self.inner.clone())
            .set_project ( project.into() )
    }

    /// Lists instances under a given project.
    pub fn list(
        &self,
        project: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::List
    {
        crate::builders::sql_instances_service::List::new(self.inner.clone())
            .set_project ( project.into() )
    }

    /// Lists all of the trusted Certificate Authorities (CAs) for the specified
    /// instance. There can be up to three CAs listed: the CA that was used to sign
    /// the certificate that is currently in use, a CA that has been added but not
    /// yet used to sign a certificate, and a CA used to sign a certificate that
    /// has previously rotated out.
    pub fn list_server_cas(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::ListServerCas
    {
        crate::builders::sql_instances_service::ListServerCas::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Partially updates settings of a Cloud SQL instance by merging the request
    /// with the current configuration. This method supports patch semantics.
    pub fn patch(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::Patch
    {
        crate::builders::sql_instances_service::Patch::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Promotes the read replica instance to be an independent Cloud SQL
    /// primary instance.
    /// Using this operation might cause your instance to restart.
    pub fn promote_replica(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::PromoteReplica
    {
        crate::builders::sql_instances_service::PromoteReplica::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Switches over from the primary instance to the designated DR replica
    /// instance.
    pub fn switchover(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::Switchover
    {
        crate::builders::sql_instances_service::Switchover::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Deletes all client certificates and generates a new server SSL certificate
    /// for the instance.
    pub fn reset_ssl_config(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::ResetSslConfig
    {
        crate::builders::sql_instances_service::ResetSslConfig::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Restarts a Cloud SQL instance.
    pub fn restart(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::Restart
    {
        crate::builders::sql_instances_service::Restart::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Restores a backup of a Cloud SQL instance. Using this operation might cause
    /// your instance to restart.
    pub fn restore_backup(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::RestoreBackup
    {
        crate::builders::sql_instances_service::RestoreBackup::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Rotates the server certificate to one signed by the Certificate Authority
    /// (CA) version previously added with the addServerCA method. For instances
    /// that have enabled Certificate Authority Service (CAS) based server CA,
    /// please use RotateServerCertificate to rotate the server certificate.
    pub fn rotate_server_ca(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::RotateServerCa
    {
        crate::builders::sql_instances_service::RotateServerCa::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Starts the replication in the read replica instance.
    pub fn start_replica(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::StartReplica
    {
        crate::builders::sql_instances_service::StartReplica::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Stops the replication in the read replica instance.
    pub fn stop_replica(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::StopReplica
    {
        crate::builders::sql_instances_service::StopReplica::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Truncate MySQL general and slow query log tables
    /// MySQL only.
    pub fn truncate_log(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::TruncateLog
    {
        crate::builders::sql_instances_service::TruncateLog::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Updates settings of a Cloud SQL instance. Using this operation might cause
    /// your instance to restart.
    pub fn update(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::Update
    {
        crate::builders::sql_instances_service::Update::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Generates a short-lived X509 certificate containing the provided public key
    /// and signed by a private key specific to the target instance. Users may use
    /// the certificate to authenticate as themselves when connecting to the
    /// database.
    pub fn create_ephemeral(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::CreateEphemeral
    {
        crate::builders::sql_instances_service::CreateEphemeral::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Reschedules the maintenance on the given instance.
    pub fn reschedule_maintenance(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::RescheduleMaintenance
    {
        crate::builders::sql_instances_service::RescheduleMaintenance::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Verify External primary instance external sync settings.
    pub fn verify_external_sync_settings(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::VerifyExternalSyncSettings
    {
        crate::builders::sql_instances_service::VerifyExternalSyncSettings::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Start External primary instance migration.
    pub fn start_external_sync(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::StartExternalSync
    {
        crate::builders::sql_instances_service::StartExternalSync::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Perform Disk Shrink on primary instance.
    pub fn perform_disk_shrink(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::PerformDiskShrink
    {
        crate::builders::sql_instances_service::PerformDiskShrink::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Get Disk Shrink Config for a given instance.
    pub fn get_disk_shrink_config(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::GetDiskShrinkConfig
    {
        crate::builders::sql_instances_service::GetDiskShrinkConfig::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Reset Replica Size to primary instance disk size.
    pub fn reset_replica_size(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::ResetReplicaSize
    {
        crate::builders::sql_instances_service::ResetReplicaSize::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Get Latest Recovery Time for a given instance.
    pub fn get_latest_recovery_time(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::GetLatestRecoveryTime
    {
        crate::builders::sql_instances_service::GetLatestRecoveryTime::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Acquire a lease for the setup of SQL Server Reporting Services (SSRS).
    pub fn acquire_ssrs_lease(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::AcquireSsrsLease
    {
        crate::builders::sql_instances_service::AcquireSsrsLease::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Release a lease for the setup of SQL Server Reporting Services (SSRS).
    pub fn release_ssrs_lease(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_instances_service::ReleaseSsrsLease
    {
        crate::builders::sql_instances_service::ReleaseSsrsLease::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

}

/// Implements a client for the Cloud SQL Admin API.
///
/// # Service Description
///
/// Service to fetch operations for database instances.
///
/// # Configuration
///
/// `SqlOperationsService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SqlOperationsService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SqlOperationsService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SqlOperationsService {
    inner: Arc<dyn crate::stubs::dynamic::SqlOperationsService>,
}

impl SqlOperationsService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner }) 
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where T: crate::stubs::SqlOperationsService + 'static {
        Self { inner: Arc::new(stub) }
    }

    async fn build_inner(conf: gax::options::ClientConfig) -> Result<Arc<dyn crate::stubs::dynamic::SqlOperationsService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlOperationsService> {
        crate::transport::SqlOperationsService::new(conf).await
    }

    async fn build_with_tracing(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlOperationsService> {
        Self::build_transport(conf).await.map(crate::tracing::SqlOperationsService::new)
    }

    /// Retrieves an instance operation that has been performed on an instance.
    pub fn get(
        &self,
        project: impl Into<std::string::String>,
        operation: impl Into<std::string::String>,
    ) -> crate::builders::sql_operations_service::Get
    {
        crate::builders::sql_operations_service::Get::new(self.inner.clone())
            .set_project ( project.into() )
            .set_operation ( operation.into() )
    }

    /// Lists all instance operations that have been performed on the given Cloud
    /// SQL instance in the reverse chronological order of the start time.
    pub fn list(
        &self,
        project: impl Into<std::string::String>,
    ) -> crate::builders::sql_operations_service::List
    {
        crate::builders::sql_operations_service::List::new(self.inner.clone())
            .set_project ( project.into() )
    }

    /// Cancels an instance operation that has been performed on an instance.
    pub fn cancel(
        &self,
        project: impl Into<std::string::String>,
        operation: impl Into<std::string::String>,
    ) -> crate::builders::sql_operations_service::Cancel
    {
        crate::builders::sql_operations_service::Cancel::new(self.inner.clone())
            .set_project ( project.into() )
            .set_operation ( operation.into() )
    }

}

/// Implements a client for the Cloud SQL Admin API.
///
/// # Service Description
///
/// Service to manage SSL certs for Cloud SQL instances.
///
/// # Configuration
///
/// `SqlSslCertsService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SqlSslCertsService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SqlSslCertsService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SqlSslCertsService {
    inner: Arc<dyn crate::stubs::dynamic::SqlSslCertsService>,
}

impl SqlSslCertsService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner }) 
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where T: crate::stubs::SqlSslCertsService + 'static {
        Self { inner: Arc::new(stub) }
    }

    async fn build_inner(conf: gax::options::ClientConfig) -> Result<Arc<dyn crate::stubs::dynamic::SqlSslCertsService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlSslCertsService> {
        crate::transport::SqlSslCertsService::new(conf).await
    }

    async fn build_with_tracing(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlSslCertsService> {
        Self::build_transport(conf).await.map(crate::tracing::SqlSslCertsService::new)
    }

    /// Deletes the SSL certificate. For First Generation instances, the
    /// certificate remains valid until the instance is restarted.
    pub fn delete(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
        sha1_fingerprint: impl Into<std::string::String>,
    ) -> crate::builders::sql_ssl_certs_service::Delete
    {
        crate::builders::sql_ssl_certs_service::Delete::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
            .set_sha1_fingerprint ( sha1_fingerprint.into() )
    }

    /// Retrieves a particular SSL certificate.  Does not include the private key
    /// (required for usage).  The private key must be saved from the response to
    /// initial creation.
    pub fn get(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
        sha1_fingerprint: impl Into<std::string::String>,
    ) -> crate::builders::sql_ssl_certs_service::Get
    {
        crate::builders::sql_ssl_certs_service::Get::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
            .set_sha1_fingerprint ( sha1_fingerprint.into() )
    }

    /// Creates an SSL certificate and returns it along with the private key and
    /// server certificate authority.  The new certificate will not be usable until
    /// the instance is restarted.
    pub fn insert(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_ssl_certs_service::Insert
    {
        crate::builders::sql_ssl_certs_service::Insert::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Lists all of the current SSL certificates for the instance.
    pub fn list(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_ssl_certs_service::List
    {
        crate::builders::sql_ssl_certs_service::List::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

}

/// Implements a client for the Cloud SQL Admin API.
///
/// # Service Description
///
/// Service for providing machine types (tiers) for Cloud SQL instances.
///
/// # Configuration
///
/// `SqlTiersService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SqlTiersService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SqlTiersService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SqlTiersService {
    inner: Arc<dyn crate::stubs::dynamic::SqlTiersService>,
}

impl SqlTiersService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner }) 
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where T: crate::stubs::SqlTiersService + 'static {
        Self { inner: Arc::new(stub) }
    }

    async fn build_inner(conf: gax::options::ClientConfig) -> Result<Arc<dyn crate::stubs::dynamic::SqlTiersService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlTiersService> {
        crate::transport::SqlTiersService::new(conf).await
    }

    async fn build_with_tracing(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlTiersService> {
        Self::build_transport(conf).await.map(crate::tracing::SqlTiersService::new)
    }

    /// Lists all available machine types (tiers) for Cloud SQL, for example,
    /// `db-custom-1-3840`. For more information, see
    /// <https://cloud.google.com/sql/pricing>.
    pub fn list(
        &self,
        project: impl Into<std::string::String>,
    ) -> crate::builders::sql_tiers_service::List
    {
        crate::builders::sql_tiers_service::List::new(self.inner.clone())
            .set_project ( project.into() )
    }

}

/// Implements a client for the Cloud SQL Admin API.
///
/// # Service Description
///
/// Cloud SQL users service.
///
/// # Configuration
///
/// `SqlUsersService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SqlUsersService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SqlUsersService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SqlUsersService {
    inner: Arc<dyn crate::stubs::dynamic::SqlUsersService>,
}

impl SqlUsersService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner }) 
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where T: crate::stubs::SqlUsersService + 'static {
        Self { inner: Arc::new(stub) }
    }

    async fn build_inner(conf: gax::options::ClientConfig) -> Result<Arc<dyn crate::stubs::dynamic::SqlUsersService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlUsersService> {
        crate::transport::SqlUsersService::new(conf).await
    }

    async fn build_with_tracing(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::SqlUsersService> {
        Self::build_transport(conf).await.map(crate::tracing::SqlUsersService::new)
    }

    /// Deletes a user from a Cloud SQL instance.
    pub fn delete(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_users_service::Delete
    {
        crate::builders::sql_users_service::Delete::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Retrieves a resource containing information about a user.
    pub fn get(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
        name: impl Into<std::string::String>,
    ) -> crate::builders::sql_users_service::Get
    {
        crate::builders::sql_users_service::Get::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
            .set_name ( name.into() )
    }

    /// Creates a new user in a Cloud SQL instance.
    pub fn insert(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_users_service::Insert
    {
        crate::builders::sql_users_service::Insert::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Lists users in the specified Cloud SQL instance.
    pub fn list(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_users_service::List
    {
        crate::builders::sql_users_service::List::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

    /// Updates an existing user in a Cloud SQL instance.
    pub fn update(
        &self,
        project: impl Into<std::string::String>,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::sql_users_service::Update
    {
        crate::builders::sql_users_service::Update::new(self.inner.clone())
            .set_project ( project.into() )
            .set_instance ( instance.into() )
    }

}
