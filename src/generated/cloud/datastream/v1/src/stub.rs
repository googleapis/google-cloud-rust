// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::Datastream].
///
/// Application developers may need to implement this trait to mock
/// `client::Datastream`.  In other use-cases, application developers only
/// use `client::Datastream` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait Datastream: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::Datastream::list_connection_profiles].
    fn list_connection_profiles(
        &self,
        _req: crate::model::ListConnectionProfilesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListConnectionProfilesResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListConnectionProfilesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Datastream::get_connection_profile].
    fn get_connection_profile(
        &self,
        _req: crate::model::GetConnectionProfileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ConnectionProfile>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ConnectionProfile>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::create_connection_profile].
    fn create_connection_profile(
        &self,
        _req: crate::model::CreateConnectionProfileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::update_connection_profile].
    fn update_connection_profile(
        &self,
        _req: crate::model::UpdateConnectionProfileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::delete_connection_profile].
    fn delete_connection_profile(
        &self,
        _req: crate::model::DeleteConnectionProfileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::discover_connection_profile].
    fn discover_connection_profile(
        &self,
        _req: crate::model::DiscoverConnectionProfileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::DiscoverConnectionProfileResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::DiscoverConnectionProfileResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Datastream::list_streams].
    fn list_streams(
        &self,
        _req: crate::model::ListStreamsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListStreamsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListStreamsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::get_stream].
    fn get_stream(
        &self,
        _req: crate::model::GetStreamRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Stream>> + Send {
        std::future::ready::<crate::Result<crate::model::Stream>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::create_stream].
    fn create_stream(
        &self,
        _req: crate::model::CreateStreamRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::update_stream].
    fn update_stream(
        &self,
        _req: crate::model::UpdateStreamRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::delete_stream].
    fn delete_stream(
        &self,
        _req: crate::model::DeleteStreamRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::run_stream].
    fn run_stream(
        &self,
        _req: crate::model::RunStreamRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::get_stream_object].
    fn get_stream_object(
        &self,
        _req: crate::model::GetStreamObjectRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::StreamObject>> + Send {
        std::future::ready::<crate::Result<crate::model::StreamObject>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::lookup_stream_object].
    fn lookup_stream_object(
        &self,
        _req: crate::model::LookupStreamObjectRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::StreamObject>> + Send {
        std::future::ready::<crate::Result<crate::model::StreamObject>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::list_stream_objects].
    fn list_stream_objects(
        &self,
        _req: crate::model::ListStreamObjectsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListStreamObjectsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListStreamObjectsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Datastream::start_backfill_job].
    fn start_backfill_job(
        &self,
        _req: crate::model::StartBackfillJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::StartBackfillJobResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::StartBackfillJobResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Datastream::stop_backfill_job].
    fn stop_backfill_job(
        &self,
        _req: crate::model::StopBackfillJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::StopBackfillJobResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::StopBackfillJobResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Datastream::fetch_static_ips].
    fn fetch_static_ips(
        &self,
        _req: crate::model::FetchStaticIpsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::FetchStaticIpsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::FetchStaticIpsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Datastream::create_private_connection].
    fn create_private_connection(
        &self,
        _req: crate::model::CreatePrivateConnectionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::get_private_connection].
    fn get_private_connection(
        &self,
        _req: crate::model::GetPrivateConnectionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::PrivateConnection>> + Send
    {
        std::future::ready::<crate::Result<crate::model::PrivateConnection>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::list_private_connections].
    fn list_private_connections(
        &self,
        _req: crate::model::ListPrivateConnectionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListPrivateConnectionsResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListPrivateConnectionsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Datastream::delete_private_connection].
    fn delete_private_connection(
        &self,
        _req: crate::model::DeletePrivateConnectionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::create_route].
    fn create_route(
        &self,
        _req: crate::model::CreateRouteRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::get_route].
    fn get_route(
        &self,
        _req: crate::model::GetRouteRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Route>> + Send {
        std::future::ready::<crate::Result<crate::model::Route>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Datastream::list_routes].
    fn list_routes(
        &self,
        _req: crate::model::ListRoutesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListRoutesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListRoutesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::delete_route].
    fn delete_route(
        &self,
        _req: crate::model::DeleteRouteRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Datastream::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
    + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::Datastream::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::Datastream::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::Datastream::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
