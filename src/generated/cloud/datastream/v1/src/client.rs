// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Datastream API.
///
/// # Service Description
///
/// Datastream service
///
/// # Configuration
///
/// `Datastream` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Datastream` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Datastream` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Datastream {
    inner: Arc<dyn crate::stubs::dynamic::Datastream>,
}

impl Datastream {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Datastream + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Datastream>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Datastream> {
        crate::transport::Datastream::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Datastream> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Datastream::new)
    }

    /// Use this method to list connection profiles created in a project and
    /// location.
    pub fn list_connection_profiles(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::datastream::ListConnectionProfiles {
        crate::builders::datastream::ListConnectionProfiles::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Use this method to get details about a connection profile.
    pub fn get_connection_profile(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::datastream::GetConnectionProfile {
        crate::builders::datastream::GetConnectionProfile::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Use this method to create a connection profile in a project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_connection_profile(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::datastream::CreateConnectionProfile {
        crate::builders::datastream::CreateConnectionProfile::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Use this method to update the parameters of a connection profile.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_connection_profile(
        &self,
        connection_profile: impl Into<crate::model::ConnectionProfile>,
    ) -> crate::builders::datastream::UpdateConnectionProfile {
        crate::builders::datastream::UpdateConnectionProfile::new(self.inner.clone())
            .set_connection_profile(connection_profile.into())
    }

    /// Use this method to delete a connection profile.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_connection_profile(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::datastream::DeleteConnectionProfile {
        crate::builders::datastream::DeleteConnectionProfile::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Use this method to discover a connection profile.
    /// The discover API call exposes the data objects and metadata belonging to
    /// the profile. Typically, a request returns children data objects of a
    /// parent data object that's optionally supplied in the request.
    pub fn discover_connection_profile(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::datastream::DiscoverConnectionProfile {
        crate::builders::datastream::DiscoverConnectionProfile::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Use this method to list streams in a project and location.
    pub fn list_streams(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::datastream::ListStreams {
        crate::builders::datastream::ListStreams::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Use this method to get details about a stream.
    pub fn get_stream(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::datastream::GetStream {
        crate::builders::datastream::GetStream::new(self.inner.clone()).set_name(name.into())
    }

    /// Use this method to create a stream.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_stream(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::datastream::CreateStream {
        crate::builders::datastream::CreateStream::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Use this method to update the configuration of a stream.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_stream(
        &self,
        stream: impl Into<crate::model::Stream>,
    ) -> crate::builders::datastream::UpdateStream {
        crate::builders::datastream::UpdateStream::new(self.inner.clone()).set_stream(stream.into())
    }

    /// Use this method to delete a stream.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_stream(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::datastream::DeleteStream {
        crate::builders::datastream::DeleteStream::new(self.inner.clone()).set_name(name.into())
    }

    /// Use this method to start, resume or recover a stream with a non default CDC
    /// strategy.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn run_stream(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::datastream::RunStream {
        crate::builders::datastream::RunStream::new(self.inner.clone()).set_name(name.into())
    }

    /// Use this method to get details about a stream object.
    pub fn get_stream_object(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::datastream::GetStreamObject {
        crate::builders::datastream::GetStreamObject::new(self.inner.clone()).set_name(name.into())
    }

    /// Use this method to look up a stream object by its source object identifier.
    pub fn lookup_stream_object(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::datastream::LookupStreamObject {
        crate::builders::datastream::LookupStreamObject::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Use this method to list the objects of a specific stream.
    pub fn list_stream_objects(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::datastream::ListStreamObjects {
        crate::builders::datastream::ListStreamObjects::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Use this method to start a backfill job for the specified stream object.
    pub fn start_backfill_job(
        &self,
        object: impl Into<std::string::String>,
    ) -> crate::builders::datastream::StartBackfillJob {
        crate::builders::datastream::StartBackfillJob::new(self.inner.clone())
            .set_object(object.into())
    }

    /// Use this method to stop a backfill job for the specified stream object.
    pub fn stop_backfill_job(
        &self,
        object: impl Into<std::string::String>,
    ) -> crate::builders::datastream::StopBackfillJob {
        crate::builders::datastream::StopBackfillJob::new(self.inner.clone())
            .set_object(object.into())
    }

    /// The FetchStaticIps API call exposes the static IP addresses used by
    /// Datastream.
    pub fn fetch_static_ips(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::datastream::FetchStaticIps {
        crate::builders::datastream::FetchStaticIps::new(self.inner.clone()).set_name(name.into())
    }

    /// Use this method to create a private connectivity configuration.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_private_connection(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::datastream::CreatePrivateConnection {
        crate::builders::datastream::CreatePrivateConnection::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Use this method to get details about a private connectivity configuration.
    pub fn get_private_connection(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::datastream::GetPrivateConnection {
        crate::builders::datastream::GetPrivateConnection::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Use this method to list private connectivity configurations in a project
    /// and location.
    pub fn list_private_connections(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::datastream::ListPrivateConnections {
        crate::builders::datastream::ListPrivateConnections::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Use this method to delete a private connectivity configuration.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_private_connection(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::datastream::DeletePrivateConnection {
        crate::builders::datastream::DeletePrivateConnection::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Use this method to create a route for a private connectivity configuration
    /// in a project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_route(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::datastream::CreateRoute {
        crate::builders::datastream::CreateRoute::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Use this method to get details about a route.
    pub fn get_route(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::datastream::GetRoute {
        crate::builders::datastream::GetRoute::new(self.inner.clone()).set_name(name.into())
    }

    /// Use this method to list routes created for a private connectivity
    /// configuration in a project and location.
    pub fn list_routes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::datastream::ListRoutes {
        crate::builders::datastream::ListRoutes::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Use this method to delete a route.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_route(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::datastream::DeleteRoute {
        crate::builders::datastream::DeleteRoute::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::datastream::ListLocations {
        crate::builders::datastream::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::datastream::GetLocation {
        crate::builders::datastream::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::datastream::ListOperations {
        crate::builders::datastream::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::datastream::GetOperation {
        crate::builders::datastream::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::datastream::DeleteOperation {
        crate::builders::datastream::DeleteOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::datastream::CancelOperation {
        crate::builders::datastream::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}
