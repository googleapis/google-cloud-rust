// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;

/// Implements a client for the API Gateway API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_apigateway_v1::client::ApiGatewayService;
/// let client = ApiGatewayService::builder().build().await?;
/// // use `client` to make requests to the API Gateway API.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// The API Gateway Service is the interface for managing API Gateways.
///
/// # Configuration
///
/// To configure `ApiGatewayService` use the `with_*` methods in the type returned
/// by [builder()][ApiGatewayService::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://apigateway.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::api_gateway_service::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::api_gateway_service::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `ApiGatewayService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ApiGatewayService` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct ApiGatewayService {
    inner: std::sync::Arc<dyn super::stub::dynamic::ApiGatewayService>,
}

impl ApiGatewayService {
    /// Returns a builder for [ApiGatewayService].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_apigateway_v1::client::ApiGatewayService;
    /// let client = ApiGatewayService::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::api_gateway_service::ClientBuilder {
        gax::client_builder::internal::new_builder(
            super::builder::api_gateway_service::client::Factory,
        )
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::ApiGatewayService + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<std::sync::Arc<dyn super::stub::dynamic::ApiGatewayService>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::ApiGatewayService> {
        super::transport::ApiGatewayService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::ApiGatewayService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::ApiGatewayService::new)
    }

    /// Lists Gateways in a given project and location.
    pub fn list_gateways(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::api_gateway_service::ListGateways {
        super::builder::api_gateway_service::ListGateways::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single Gateway.
    pub fn get_gateway(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::api_gateway_service::GetGateway {
        super::builder::api_gateway_service::GetGateway::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new Gateway in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_gateway(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::api_gateway_service::CreateGateway {
        super::builder::api_gateway_service::CreateGateway::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single Gateway.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_gateway(
        &self,
        gateway: impl Into<crate::model::Gateway>,
    ) -> super::builder::api_gateway_service::UpdateGateway {
        super::builder::api_gateway_service::UpdateGateway::new(self.inner.clone())
            .set_gateway(gateway.into())
    }

    /// Deletes a single Gateway.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_gateway(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::api_gateway_service::DeleteGateway {
        super::builder::api_gateway_service::DeleteGateway::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists Apis in a given project and location.
    pub fn list_apis(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::api_gateway_service::ListApis {
        super::builder::api_gateway_service::ListApis::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single Api.
    pub fn get_api(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::api_gateway_service::GetApi {
        super::builder::api_gateway_service::GetApi::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a new Api in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_api(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::api_gateway_service::CreateApi {
        super::builder::api_gateway_service::CreateApi::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single Api.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_api(
        &self,
        api: impl Into<crate::model::Api>,
    ) -> super::builder::api_gateway_service::UpdateApi {
        super::builder::api_gateway_service::UpdateApi::new(self.inner.clone()).set_api(api.into())
    }

    /// Deletes a single Api.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_api(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::api_gateway_service::DeleteApi {
        super::builder::api_gateway_service::DeleteApi::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists ApiConfigs in a given project and location.
    pub fn list_api_configs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::api_gateway_service::ListApiConfigs {
        super::builder::api_gateway_service::ListApiConfigs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single ApiConfig.
    pub fn get_api_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::api_gateway_service::GetApiConfig {
        super::builder::api_gateway_service::GetApiConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new ApiConfig in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_api_config(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::api_gateway_service::CreateApiConfig {
        super::builder::api_gateway_service::CreateApiConfig::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single ApiConfig.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_api_config(
        &self,
        api_config: impl Into<crate::model::ApiConfig>,
    ) -> super::builder::api_gateway_service::UpdateApiConfig {
        super::builder::api_gateway_service::UpdateApiConfig::new(self.inner.clone())
            .set_api_config(api_config.into())
    }

    /// Deletes a single ApiConfig.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_api_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::api_gateway_service::DeleteApiConfig {
        super::builder::api_gateway_service::DeleteApiConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::api_gateway_service::ListOperations {
        super::builder::api_gateway_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::api_gateway_service::GetOperation {
        super::builder::api_gateway_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::api_gateway_service::DeleteOperation {
        super::builder::api_gateway_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::api_gateway_service::CancelOperation {
        super::builder::api_gateway_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
