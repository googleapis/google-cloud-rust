// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate bytes;
extern crate recommender;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate wkt;

/// Log content of an action on a recommendation. This includes Mark* actions.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct ActionLog {
    /// Required. User that executed this action. Eg, foo@gmail.com
    pub actor: std::string::String,

    /// Required. State change that was made by the actor. Eg, SUCCEEDED.
    pub state: recommender::model::recommendation_state_info::State,

    /// Optional. Metadata that was included with the action that was taken.
    pub state_metadata: std::collections::HashMap<std::string::String, std::string::String>,

    /// Required. Name of the recommendation which was acted on. Eg, :
    /// 'projects/123/locations/global/recommenders/roleReco/recommendations/r1'
    pub recommendation_name: std::string::String,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ActionLog {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [actor][crate::model::ActionLog::actor].
    pub fn set_actor<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.actor = v.into();
        self
    }

    /// Sets the value of [state][crate::model::ActionLog::state].
    pub fn set_state<
        T: std::convert::Into<recommender::model::recommendation_state_info::State>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [state_metadata][crate::model::ActionLog::state_metadata].
    pub fn set_state_metadata<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.state_metadata = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [recommendation_name][crate::model::ActionLog::recommendation_name].
    pub fn set_recommendation_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.recommendation_name = v.into();
        self
    }
}

impl wkt::message::Message for ActionLog {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.recommender.logging.v1.ActionLog"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for ActionLog {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __actor,
            __state,
            __state_metadata,
            __recommendation_name,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for ActionLog")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "actor" => Ok(__FieldTag::__actor),
                            "state" => Ok(__FieldTag::__state),
                            "stateMetadata" => Ok(__FieldTag::__state_metadata),
                            "state_metadata" => Ok(__FieldTag::__state_metadata),
                            "recommendationName" => Ok(__FieldTag::__recommendation_name),
                            "recommendation_name" => Ok(__FieldTag::__recommendation_name),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = ActionLog;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct ActionLog")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__actor => {
                            if !fields.insert(__FieldTag::__actor) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for actor",
                                ));
                            }
                            result.actor = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__state => {
                            if !fields.insert(__FieldTag::__state) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for state",
                                ));
                            }
                            result.state = map
                                .next_value::<std::option::Option<
                                    recommender::model::recommendation_state_info::State,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__state_metadata => {
                            if !fields.insert(__FieldTag::__state_metadata) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for state_metadata",
                                ));
                            }
                            result.state_metadata = map
                                .next_value::<std::option::Option<
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__recommendation_name => {
                            if !fields.insert(__FieldTag::__recommendation_name) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for recommendation_name",
                                ));
                            }
                            result.recommendation_name = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for ActionLog {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !self.actor.is_empty() {
            state.serialize_entry("actor", &self.actor)?;
        }
        if !wkt::internal::is_default(&self.state) {
            state.serialize_entry("state", &self.state)?;
        }
        if !self.state_metadata.is_empty() {
            state.serialize_entry("stateMetadata", &self.state_metadata)?;
        }
        if !self.recommendation_name.is_empty() {
            state.serialize_entry("recommendationName", &self.recommendation_name)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}

/// Log content of an action on an insight. This includes Mark* actions.
#[derive(Clone, Debug, Default, PartialEq)]
#[non_exhaustive]
pub struct InsightActionLog {
    /// Required. User that executed this action. Eg, foo@gmail.com
    pub actor: std::string::String,

    /// Required. State change that was made by the actor. Eg, ACCEPTED.
    pub state: recommender::model::insight_state_info::State,

    /// Optional. Metadata that was included with the action that was taken.
    pub state_metadata: std::collections::HashMap<std::string::String, std::string::String>,

    /// Required. Name of the insight which was acted on. Eg, :
    /// 'projects/123/locations/global/insightTypes/roleInsight/insights/i1'
    pub insight: std::string::String,

    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl InsightActionLog {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [actor][crate::model::InsightActionLog::actor].
    pub fn set_actor<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.actor = v.into();
        self
    }

    /// Sets the value of [state][crate::model::InsightActionLog::state].
    pub fn set_state<T: std::convert::Into<recommender::model::insight_state_info::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [state_metadata][crate::model::InsightActionLog::state_metadata].
    pub fn set_state_metadata<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.state_metadata = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [insight][crate::model::InsightActionLog::insight].
    pub fn set_insight<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.insight = v.into();
        self
    }
}

impl wkt::message::Message for InsightActionLog {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.recommender.logging.v1.InsightActionLog"
    }
}

#[doc(hidden)]
impl<'de> serde::de::Deserialize<'de> for InsightActionLog {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        #[allow(non_camel_case_types)]
        #[doc(hidden)]
        #[derive(PartialEq, Eq, Hash)]
        enum __FieldTag {
            __actor,
            __state,
            __state_metadata,
            __insight,
            Unknown(std::string::String),
        }
        impl<'de> serde::de::Deserialize<'de> for __FieldTag {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                struct Visitor;
                impl<'de> serde::de::Visitor<'de> for Visitor {
                    type Value = __FieldTag;
                    fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                        formatter.write_str("a field name for InsightActionLog")
                    }
                    fn visit_str<E>(self, value: &str) -> std::result::Result<Self::Value, E>
                    where
                        E: serde::de::Error,
                    {
                        use std::result::Result::Ok;
                        use std::string::ToString;
                        match value {
                            "actor" => Ok(__FieldTag::__actor),
                            "state" => Ok(__FieldTag::__state),
                            "stateMetadata" => Ok(__FieldTag::__state_metadata),
                            "state_metadata" => Ok(__FieldTag::__state_metadata),
                            "insight" => Ok(__FieldTag::__insight),
                            _ => Ok(__FieldTag::Unknown(value.to_string())),
                        }
                    }
                }
                deserializer.deserialize_identifier(Visitor)
            }
        }
        struct Visitor;
        impl<'de> serde::de::Visitor<'de> for Visitor {
            type Value = InsightActionLog;
            fn expecting(&self, formatter: &mut std::fmt::Formatter) -> std::fmt::Result {
                formatter.write_str("struct InsightActionLog")
            }
            fn visit_map<A>(self, mut map: A) -> std::result::Result<Self::Value, A::Error>
            where
                A: serde::de::MapAccess<'de>,
            {
                #[allow(unused_imports)]
                use serde::de::Error;
                use std::option::Option::Some;
                let mut fields = std::collections::HashSet::new();
                let mut result = Self::Value::new();
                while let Some(tag) = map.next_key::<__FieldTag>()? {
                    #[allow(clippy::match_single_binding)]
                    match tag {
                        __FieldTag::__actor => {
                            if !fields.insert(__FieldTag::__actor) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for actor",
                                ));
                            }
                            result.actor = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__state => {
                            if !fields.insert(__FieldTag::__state) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for state",
                                ));
                            }
                            result.state =
                                map.next_value::<std::option::Option<
                                    recommender::model::insight_state_info::State,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__state_metadata => {
                            if !fields.insert(__FieldTag::__state_metadata) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for state_metadata",
                                ));
                            }
                            result.state_metadata = map
                                .next_value::<std::option::Option<
                                    std::collections::HashMap<
                                        std::string::String,
                                        std::string::String,
                                    >,
                                >>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::__insight => {
                            if !fields.insert(__FieldTag::__insight) {
                                return std::result::Result::Err(A::Error::duplicate_field(
                                    "multiple values for insight",
                                ));
                            }
                            result.insight = map
                                .next_value::<std::option::Option<std::string::String>>()?
                                .unwrap_or_default();
                        }
                        __FieldTag::Unknown(key) => {
                            let value = map.next_value::<serde_json::Value>()?;
                            result._unknown_fields.insert(key, value);
                        }
                    }
                }
                std::result::Result::Ok(result)
            }
        }
        deserializer.deserialize_any(Visitor)
    }
}

#[doc(hidden)]
impl serde::ser::Serialize for InsightActionLog {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        use serde::ser::SerializeMap;
        #[allow(unused_imports)]
        use std::option::Option::Some;
        let mut state = serializer.serialize_map(std::option::Option::None)?;
        if !self.actor.is_empty() {
            state.serialize_entry("actor", &self.actor)?;
        }
        if !wkt::internal::is_default(&self.state) {
            state.serialize_entry("state", &self.state)?;
        }
        if !self.state_metadata.is_empty() {
            state.serialize_entry("stateMetadata", &self.state_metadata)?;
        }
        if !self.insight.is_empty() {
            state.serialize_entry("insight", &self.insight)?;
        }
        if !self._unknown_fields.is_empty() {
            for (key, value) in self._unknown_fields.iter() {
                state.serialize_entry(key, &value)?;
            }
        }
        state.end()
    }
}
