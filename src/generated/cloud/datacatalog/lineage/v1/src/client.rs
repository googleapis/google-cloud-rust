// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Data Lineage API.
///
/// # Service Description
///
/// Lineage is used to track data flows between assets over time. You can
/// create [LineageEvents][google.cloud.datacatalog.lineage.v1.LineageEvent]
/// to record lineage between multiple sources and a single target, for
/// example, when table data is based on data from multiple tables.
///
/// [google.cloud.datacatalog.lineage.v1.LineageEvent]: crate::model::LineageEvent
///
/// # Configuration
///
/// `Lineage` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Lineage` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Lineage` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Lineage {
    inner: Arc<dyn crate::stubs::dynamic::Lineage>,
}

impl Lineage {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Lineage + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Lineage>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Lineage> {
        crate::transport::Lineage::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Lineage> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Lineage::new)
    }

    /// Creates new lineage events together with their parents: process and run.
    /// Updates the process and run if they already exist.
    /// Mapped from Open Lineage specification:
    /// <https://github.com/OpenLineage/OpenLineage/blob/main/spec/OpenLineage.json>.
    pub fn process_open_lineage_run_event(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::lineage::ProcessOpenLineageRunEvent {
        crate::builders::lineage::ProcessOpenLineageRunEvent::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a new process.
    pub fn create_process(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::lineage::CreateProcess {
        crate::builders::lineage::CreateProcess::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates a process.
    pub fn update_process(
        &self,
        process: impl Into<crate::model::Process>,
    ) -> crate::builders::lineage::UpdateProcess {
        crate::builders::lineage::UpdateProcess::new(self.inner.clone()).set_process(process.into())
    }

    /// Gets the details of the specified process.
    pub fn get_process(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::lineage::GetProcess {
        crate::builders::lineage::GetProcess::new(self.inner.clone()).set_name(name.into())
    }

    /// List processes in the given project and location. List order is descending
    /// by insertion time.
    pub fn list_processes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::lineage::ListProcesses {
        crate::builders::lineage::ListProcesses::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Deletes the process with the specified name.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_datacatalog_lineage_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<wkt::Empty, model::OperationMetadata>
    /// ) -> Result<wkt::Empty> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_datacatalog_lineage_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<wkt::Empty, model::OperationMetadata>
    /// ) -> Result<wkt::Empty> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [wkt::Empty] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::OperationMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::lineage::DeleteProcess::send
    /// [poller()]: crate::builders::lineage::DeleteProcess::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn delete_process(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::lineage::DeleteProcess {
        crate::builders::lineage::DeleteProcess::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a new run.
    pub fn create_run(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::lineage::CreateRun {
        crate::builders::lineage::CreateRun::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates a run.
    pub fn update_run(
        &self,
        run: impl Into<crate::model::Run>,
    ) -> crate::builders::lineage::UpdateRun {
        crate::builders::lineage::UpdateRun::new(self.inner.clone()).set_run(run.into())
    }

    /// Gets the details of the specified run.
    pub fn get_run(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::lineage::GetRun {
        crate::builders::lineage::GetRun::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists runs in the given project and location. List order is descending by
    /// `start_time`.
    pub fn list_runs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::lineage::ListRuns {
        crate::builders::lineage::ListRuns::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Deletes the run with the specified name.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_datacatalog_lineage_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<wkt::Empty, model::OperationMetadata>
    /// ) -> Result<wkt::Empty> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use google_cloud_datacatalog_lineage_v1::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<wkt::Empty, model::OperationMetadata>
    /// ) -> Result<wkt::Empty> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [wkt::Empty] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::OperationMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::lineage::DeleteRun::send
    /// [poller()]: crate::builders::lineage::DeleteRun::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn delete_run(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::lineage::DeleteRun {
        crate::builders::lineage::DeleteRun::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a new lineage event.
    pub fn create_lineage_event(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::lineage::CreateLineageEvent {
        crate::builders::lineage::CreateLineageEvent::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a specified lineage event.
    pub fn get_lineage_event(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::lineage::GetLineageEvent {
        crate::builders::lineage::GetLineageEvent::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists lineage events in the given project and location. The list order is
    /// not defined.
    pub fn list_lineage_events(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::lineage::ListLineageEvents {
        crate::builders::lineage::ListLineageEvents::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes the lineage event with the specified name.
    pub fn delete_lineage_event(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::lineage::DeleteLineageEvent {
        crate::builders::lineage::DeleteLineageEvent::new(self.inner.clone()).set_name(name.into())
    }

    /// Retrieve a list of links connected to a specific asset.
    /// Links represent the data flow between **source** (upstream)
    /// and **target** (downstream) assets in transformation pipelines.
    /// Links are stored in the same project as the Lineage Events that create
    /// them.
    ///
    /// You can retrieve links in every project where you have the
    /// `datalineage.events.get` permission. The project provided in the URL
    /// is used for Billing and Quota.
    pub fn search_links(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::lineage::SearchLinks {
        crate::builders::lineage::SearchLinks::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Retrieve information about LineageProcesses associated with specific
    /// links. LineageProcesses are transformation pipelines that result in data
    /// flowing from **source** to **target** assets. Links between assets
    /// represent this operation.
    ///
    /// If you have specific link names, you can use this method to
    /// verify which LineageProcesses contribute to creating those links.
    /// See the
    /// [SearchLinks][google.cloud.datacatalog.lineage.v1.Lineage.SearchLinks]
    /// method for more information on how to retrieve link name.
    ///
    /// You can retrieve the LineageProcess information in every project where you
    /// have the `datalineage.events.get` permission. The project provided in the
    /// URL is used for Billing and Quota.
    ///
    /// [google.cloud.datacatalog.lineage.v1.Lineage.SearchLinks]: crate::client::Lineage::search_links
    pub fn batch_search_link_processes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::lineage::BatchSearchLinkProcesses {
        crate::builders::lineage::BatchSearchLinkProcesses::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::lineage::ListOperations {
        crate::builders::lineage::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::lineage::GetOperation {
        crate::builders::lineage::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::lineage::DeleteOperation {
        crate::builders::lineage::DeleteOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::lineage::CancelOperation {
        crate::builders::lineage::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}
