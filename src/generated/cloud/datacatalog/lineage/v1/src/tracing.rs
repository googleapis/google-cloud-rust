// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [Lineage](crate::stubs::Lineage) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct Lineage<T>
where
    T: crate::stubs::Lineage + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> Lineage<T>
where
    T: crate::stubs::Lineage + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> crate::stubs::Lineage for Lineage<T>
where
    T: crate::stubs::Lineage + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn process_open_lineage_run_event(
        &self,
        req: crate::model::ProcessOpenLineageRunEventRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ProcessOpenLineageRunEventResponse> {
        self.inner
            .process_open_lineage_run_event(req, options)
            .await
    }

    #[tracing::instrument(ret)]
    async fn create_process(
        &self,
        req: crate::model::CreateProcessRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Process> {
        self.inner.create_process(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_process(
        &self,
        req: crate::model::UpdateProcessRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Process> {
        self.inner.update_process(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_process(
        &self,
        req: crate::model::GetProcessRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Process> {
        self.inner.get_process(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_processes(
        &self,
        req: crate::model::ListProcessesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListProcessesResponse> {
        self.inner.list_processes(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_process(
        &self,
        req: crate::model::DeleteProcessRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_process(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_run(
        &self,
        req: crate::model::CreateRunRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Run> {
        self.inner.create_run(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_run(
        &self,
        req: crate::model::UpdateRunRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Run> {
        self.inner.update_run(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_run(
        &self,
        req: crate::model::GetRunRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Run> {
        self.inner.get_run(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_runs(
        &self,
        req: crate::model::ListRunsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListRunsResponse> {
        self.inner.list_runs(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_run(
        &self,
        req: crate::model::DeleteRunRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_run(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_lineage_event(
        &self,
        req: crate::model::CreateLineageEventRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::LineageEvent> {
        self.inner.create_lineage_event(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_lineage_event(
        &self,
        req: crate::model::GetLineageEventRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::LineageEvent> {
        self.inner.get_lineage_event(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_lineage_events(
        &self,
        req: crate::model::ListLineageEventsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListLineageEventsResponse> {
        self.inner.list_lineage_events(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_lineage_event(
        &self,
        req: crate::model::DeleteLineageEventRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.delete_lineage_event(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn search_links(
        &self,
        req: crate::model::SearchLinksRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::SearchLinksResponse> {
        self.inner.search_links(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn batch_search_link_processes(
        &self,
        req: crate::model::BatchSearchLinkProcessesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::BatchSearchLinkProcessesResponse> {
        self.inner.batch_search_link_processes(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::ListOperationsResponse> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.get_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.delete_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.cancel_operation(req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_policy::PollingPolicy> {
        self.inner.get_polling_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}
