// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use std::sync::Arc;

/// A dyn-compatible, crate-private version of [super::Lineage].
#[async_trait::async_trait]
pub trait Lineage: std::fmt::Debug + Send + Sync {
    async fn process_open_lineage_run_event(
        &self,
        req: crate::model::ProcessOpenLineageRunEventRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ProcessOpenLineageRunEventResponse>>;

    async fn create_process(
        &self,
        req: crate::model::CreateProcessRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Process>>;

    async fn update_process(
        &self,
        req: crate::model::UpdateProcessRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Process>>;

    async fn get_process(
        &self,
        req: crate::model::GetProcessRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Process>>;

    async fn list_processes(
        &self,
        req: crate::model::ListProcessesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListProcessesResponse>>;

    async fn delete_process(
        &self,
        req: crate::model::DeleteProcessRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn create_run(
        &self,
        req: crate::model::CreateRunRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Run>>;

    async fn update_run(
        &self,
        req: crate::model::UpdateRunRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Run>>;

    async fn get_run(
        &self,
        req: crate::model::GetRunRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Run>>;

    async fn list_runs(
        &self,
        req: crate::model::ListRunsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListRunsResponse>>;

    async fn delete_run(
        &self,
        req: crate::model::DeleteRunRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn create_lineage_event(
        &self,
        req: crate::model::CreateLineageEventRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::LineageEvent>>;

    async fn get_lineage_event(
        &self,
        req: crate::model::GetLineageEventRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::LineageEvent>>;

    async fn list_lineage_events(
        &self,
        req: crate::model::ListLineageEventsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListLineageEventsResponse>>;

    async fn delete_lineage_event(
        &self,
        req: crate::model::DeleteLineageEventRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>>;

    async fn search_links(
        &self,
        req: crate::model::SearchLinksRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::SearchLinksResponse>>;

    async fn batch_search_link_processes(
        &self,
        req: crate::model::BatchSearchLinkProcessesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::BatchSearchLinkProcessesResponse>>;

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>>;

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>>;

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [super::Lineage] also implement [Lineage].
#[async_trait::async_trait]
impl<T: super::Lineage> Lineage for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn process_open_lineage_run_event(
        &self,
        req: crate::model::ProcessOpenLineageRunEventRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ProcessOpenLineageRunEventResponse>>
    {
        T::process_open_lineage_run_event(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_process(
        &self,
        req: crate::model::CreateProcessRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Process>> {
        T::create_process(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_process(
        &self,
        req: crate::model::UpdateProcessRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Process>> {
        T::update_process(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_process(
        &self,
        req: crate::model::GetProcessRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Process>> {
        T::get_process(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_processes(
        &self,
        req: crate::model::ListProcessesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListProcessesResponse>> {
        T::list_processes(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_process(
        &self,
        req: crate::model::DeleteProcessRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::delete_process(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_run(
        &self,
        req: crate::model::CreateRunRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Run>> {
        T::create_run(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_run(
        &self,
        req: crate::model::UpdateRunRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Run>> {
        T::update_run(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_run(
        &self,
        req: crate::model::GetRunRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Run>> {
        T::get_run(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_runs(
        &self,
        req: crate::model::ListRunsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListRunsResponse>> {
        T::list_runs(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_run(
        &self,
        req: crate::model::DeleteRunRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::delete_run(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_lineage_event(
        &self,
        req: crate::model::CreateLineageEventRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::LineageEvent>> {
        T::create_lineage_event(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_lineage_event(
        &self,
        req: crate::model::GetLineageEventRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::LineageEvent>> {
        T::get_lineage_event(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_lineage_events(
        &self,
        req: crate::model::ListLineageEventsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListLineageEventsResponse>> {
        T::list_lineage_events(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_lineage_event(
        &self,
        req: crate::model::DeleteLineageEventRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>> {
        T::delete_lineage_event(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn search_links(
        &self,
        req: crate::model::SearchLinksRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::SearchLinksResponse>> {
        T::search_links(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn batch_search_link_processes(
        &self,
        req: crate::model::BatchSearchLinkProcessesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::BatchSearchLinkProcessesResponse>>
    {
        T::batch_search_link_processes(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>> {
        T::delete_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>> {
        T::cancel_operation(self, req, options).await
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        T::get_polling_error_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}
