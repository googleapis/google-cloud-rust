// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Google Cloud Data Catalog API.
///
/// # Service Description
///
/// Data Catalog API service allows you to discover, understand, and manage
/// your data.
///
/// # Configuration
///
/// `DataCatalog` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `DataCatalog` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DataCatalog` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct DataCatalog {
    inner: Arc<dyn crate::stubs::dynamic::DataCatalog>,
}

impl DataCatalog {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::DataCatalog + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::DataCatalog>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DataCatalog> {
        crate::transport::DataCatalog::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DataCatalog> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::DataCatalog::new)
    }

    /// Searches Data Catalog for multiple resources like entries and tags that
    /// match a query.
    ///
    /// This is a [Custom Method]
    /// (<https://cloud.google.com/apis/design/custom_methods>) that doesn't return
    /// all information on a resource, only its ID and high level fields. To get
    /// more information, you can subsequently call specific get methods.
    ///
    /// Note: Data Catalog search queries don't guarantee full recall. Results
    /// that match your query might not be returned, even in subsequent
    /// result pages. Additionally, returned (and not returned) results can vary
    /// if you repeat search queries.
    ///
    /// For more information, see [Data Catalog search syntax]
    /// (<https://cloud.google.com/data-catalog/docs/how-to/search-reference>).
    pub fn search_catalog(&self) -> crate::builders::data_catalog::SearchCatalog {
        crate::builders::data_catalog::SearchCatalog::new(self.inner.clone())
    }

    /// Creates an entry group.
    ///
    /// An entry group contains logically related entries together with [Cloud
    /// Identity and Access Management](/data-catalog/docs/concepts/iam) policies.
    /// These policies specify users who can create, edit, and view entries
    /// within entry groups.
    ///
    /// Data Catalog automatically creates entry groups with names that start with
    /// the `@` symbol for the following resources:
    ///
    /// * BigQuery entries (`@bigquery`)
    /// * Pub/Sub topics (`@pubsub`)
    /// * Dataproc Metastore services (`@dataproc_metastore_{SERVICE_NAME_HASH}`)
    ///
    /// You can create your own entry groups for Cloud Storage fileset entries
    /// and custom entries together with the corresponding IAM policies.
    /// User-created entry groups can't contain the `@` symbol, it is reserved
    /// for automatically created groups.
    ///
    /// Entry groups, like entries, can be searched.
    ///
    /// A maximum of 10,000 entry groups may be created per organization across all
    /// locations.
    ///
    /// You must enable the Data Catalog API in the project identified by
    /// the `parent` parameter. For more information, see [Data Catalog resource
    /// project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
    pub fn create_entry_group(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::CreateEntryGroup {
        crate::builders::data_catalog::CreateEntryGroup::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets an entry group.
    pub fn get_entry_group(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::GetEntryGroup {
        crate::builders::data_catalog::GetEntryGroup::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates an entry group.
    ///
    /// You must enable the Data Catalog API in the project identified by
    /// the `entry_group.name` parameter. For more information, see [Data Catalog
    /// resource
    /// project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
    pub fn update_entry_group(
        &self,
        entry_group: impl Into<crate::model::EntryGroup>,
    ) -> crate::builders::data_catalog::UpdateEntryGroup {
        crate::builders::data_catalog::UpdateEntryGroup::new(self.inner.clone())
            .set_entry_group(entry_group.into())
    }

    /// Deletes an entry group.
    ///
    /// You must enable the Data Catalog API in the project
    /// identified by the `name` parameter. For more information, see [Data Catalog
    /// resource
    /// project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
    pub fn delete_entry_group(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::DeleteEntryGroup {
        crate::builders::data_catalog::DeleteEntryGroup::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists entry groups.
    pub fn list_entry_groups(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::ListEntryGroups {
        crate::builders::data_catalog::ListEntryGroups::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates an entry.
    ///
    /// You can create entries only with 'FILESET', 'CLUSTER', 'DATA_STREAM',
    /// or custom types. Data Catalog automatically creates entries with other
    /// types during metadata ingestion from integrated systems.
    ///
    /// You must enable the Data Catalog API in the project identified by
    /// the `parent` parameter. For more information, see [Data Catalog resource
    /// project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
    ///
    /// An entry group can have a maximum of 100,000 entries.
    pub fn create_entry(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::CreateEntry {
        crate::builders::data_catalog::CreateEntry::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an existing entry.
    ///
    /// You must enable the Data Catalog API in the project identified by
    /// the `entry.name` parameter. For more information, see [Data Catalog
    /// resource
    /// project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
    pub fn update_entry(
        &self,
        entry: impl Into<crate::model::Entry>,
    ) -> crate::builders::data_catalog::UpdateEntry {
        crate::builders::data_catalog::UpdateEntry::new(self.inner.clone()).set_entry(entry.into())
    }

    /// Deletes an existing entry.
    ///
    /// You can delete only the entries created by the
    /// [CreateEntry][google.cloud.datacatalog.v1.DataCatalog.CreateEntry]
    /// method.
    ///
    /// You must enable the Data Catalog API in the project identified by
    /// the `name` parameter. For more information, see [Data Catalog
    /// resource
    /// project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
    ///
    /// [google.cloud.datacatalog.v1.DataCatalog.CreateEntry]: crate::client::DataCatalog::create_entry
    pub fn delete_entry(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::DeleteEntry {
        crate::builders::data_catalog::DeleteEntry::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets an entry.
    pub fn get_entry(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::GetEntry {
        crate::builders::data_catalog::GetEntry::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets an entry by its target resource name.
    ///
    /// The resource name comes from the source Google Cloud Platform service.
    pub fn lookup_entry(&self) -> crate::builders::data_catalog::LookupEntry {
        crate::builders::data_catalog::LookupEntry::new(self.inner.clone())
    }

    /// Lists entries.
    ///
    /// Note: Currently, this method can list only custom entries.
    /// To get a list of both custom and automatically created entries, use
    /// [SearchCatalog][google.cloud.datacatalog.v1.DataCatalog.SearchCatalog].
    ///
    /// [google.cloud.datacatalog.v1.DataCatalog.SearchCatalog]: crate::client::DataCatalog::search_catalog
    pub fn list_entries(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::ListEntries {
        crate::builders::data_catalog::ListEntries::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Modifies entry overview, part of the business context of an
    /// [Entry][google.cloud.datacatalog.v1.Entry].
    ///
    /// To call this method, you must have the `datacatalog.entries.updateOverview`
    /// IAM permission on the corresponding project.
    ///
    /// [google.cloud.datacatalog.v1.Entry]: crate::model::Entry
    pub fn modify_entry_overview(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::ModifyEntryOverview {
        crate::builders::data_catalog::ModifyEntryOverview::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Modifies contacts, part of the business context of an
    /// [Entry][google.cloud.datacatalog.v1.Entry].
    ///
    /// To call this method, you must have the `datacatalog.entries.updateContacts`
    /// IAM permission on the corresponding project.
    ///
    /// [google.cloud.datacatalog.v1.Entry]: crate::model::Entry
    pub fn modify_entry_contacts(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::ModifyEntryContacts {
        crate::builders::data_catalog::ModifyEntryContacts::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a tag template.
    ///
    /// You must enable the Data Catalog API in the project identified by the
    /// `parent` parameter.
    /// For more information, see [Data Catalog resource project]
    /// (<https://cloud.google.com/data-catalog/docs/concepts/resource-project>).
    pub fn create_tag_template(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::CreateTagTemplate {
        crate::builders::data_catalog::CreateTagTemplate::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a tag template.
    pub fn get_tag_template(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::GetTagTemplate {
        crate::builders::data_catalog::GetTagTemplate::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates a tag template.
    ///
    /// You can't update template fields with this method. These fields are
    /// separate resources with their own create, update, and delete methods.
    ///
    /// You must enable the Data Catalog API in the project identified by
    /// the `tag_template.name` parameter. For more information, see [Data Catalog
    /// resource
    /// project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
    pub fn update_tag_template(
        &self,
        tag_template: impl Into<crate::model::TagTemplate>,
    ) -> crate::builders::data_catalog::UpdateTagTemplate {
        crate::builders::data_catalog::UpdateTagTemplate::new(self.inner.clone())
            .set_tag_template(tag_template.into())
    }

    /// Deletes a tag template and all tags that use it.
    ///
    /// You must enable the Data Catalog API in the project identified by
    /// the `name` parameter. For more information, see [Data Catalog resource
    /// project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
    pub fn delete_tag_template(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::DeleteTagTemplate {
        crate::builders::data_catalog::DeleteTagTemplate::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a field in a tag template.
    ///
    /// You must enable the Data Catalog API in the project identified by
    /// the `parent` parameter. For more information, see [Data Catalog resource
    /// project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
    pub fn create_tag_template_field(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::CreateTagTemplateField {
        crate::builders::data_catalog::CreateTagTemplateField::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a field in a tag template.
    ///
    /// You can't update the field type with this method.
    ///
    /// You must enable the Data Catalog API in the project
    /// identified by the `name` parameter. For more information, see [Data Catalog
    /// resource
    /// project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
    pub fn update_tag_template_field(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::UpdateTagTemplateField {
        crate::builders::data_catalog::UpdateTagTemplateField::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Renames a field in a tag template.
    ///
    /// You must enable the Data Catalog API in the project identified by the
    /// `name` parameter. For more information, see [Data Catalog resource project]
    /// (<https://cloud.google.com/data-catalog/docs/concepts/resource-project>).
    pub fn rename_tag_template_field(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::RenameTagTemplateField {
        crate::builders::data_catalog::RenameTagTemplateField::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Renames an enum value in a tag template.
    ///
    /// Within a single enum field, enum values must be unique.
    pub fn rename_tag_template_field_enum_value(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::RenameTagTemplateFieldEnumValue {
        crate::builders::data_catalog::RenameTagTemplateFieldEnumValue::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes a field in a tag template and all uses of this field from the tags
    /// based on this template.
    ///
    /// You must enable the Data Catalog API in the project identified by
    /// the `name` parameter. For more information, see [Data Catalog resource
    /// project](https://cloud.google.com/data-catalog/docs/concepts/resource-project).
    pub fn delete_tag_template_field(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::DeleteTagTemplateField {
        crate::builders::data_catalog::DeleteTagTemplateField::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a tag and assigns it to:
    ///
    /// * An [Entry][google.cloud.datacatalog.v1.Entry] if the method name is
    ///   `projects.locations.entryGroups.entries.tags.create`.
    /// * Or [EntryGroup][google.cloud.datacatalog.v1.EntryGroup]if the method
    ///   name is `projects.locations.entryGroups.tags.create`.
    ///
    /// Note: The project identified by the `parent` parameter for the [tag]
    /// (<https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.entryGroups.entries.tags/create#path-parameters>)
    /// and the [tag template]
    /// (<https://cloud.google.com/data-catalog/docs/reference/rest/v1/projects.locations.tagTemplates/create#path-parameters>)
    /// used to create the tag must be in the same organization.
    ///
    /// [google.cloud.datacatalog.v1.Entry]: crate::model::Entry
    /// [google.cloud.datacatalog.v1.EntryGroup]: crate::model::EntryGroup
    pub fn create_tag(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::CreateTag {
        crate::builders::data_catalog::CreateTag::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates an existing tag.
    pub fn update_tag(
        &self,
        tag: impl Into<crate::model::Tag>,
    ) -> crate::builders::data_catalog::UpdateTag {
        crate::builders::data_catalog::UpdateTag::new(self.inner.clone()).set_tag(tag.into())
    }

    /// Deletes a tag.
    pub fn delete_tag(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::DeleteTag {
        crate::builders::data_catalog::DeleteTag::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists tags assigned to an [Entry][google.cloud.datacatalog.v1.Entry].
    /// The [columns][google.cloud.datacatalog.v1.Tag.column] in the response are
    /// lowercased.
    ///
    /// [google.cloud.datacatalog.v1.Entry]: crate::model::Entry
    /// [google.cloud.datacatalog.v1.Tag.column]: crate::model::Tag::scope
    pub fn list_tags(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::ListTags {
        crate::builders::data_catalog::ListTags::new(self.inner.clone()).set_parent(parent.into())
    }

    /// `ReconcileTags` creates or updates a list of tags on the entry.
    /// If the
    /// [ReconcileTagsRequest.force_delete_missing][google.cloud.datacatalog.v1.ReconcileTagsRequest.force_delete_missing]
    /// parameter is set, the operation deletes tags not included in the input tag
    /// list.
    ///
    /// `ReconcileTags` returns a [long-running operation]
    /// [google.longrunning.Operation] resource that can be queried with
    /// [Operations.GetOperation][google.longrunning.Operations.GetOperation]
    /// to return [ReconcileTagsMetadata]
    /// [google.cloud.datacatalog.v1.ReconcileTagsMetadata] and
    /// a [ReconcileTagsResponse]
    /// [google.cloud.datacatalog.v1.ReconcileTagsResponse] message.
    ///
    /// [google.cloud.datacatalog.v1.ReconcileTagsRequest.force_delete_missing]: crate::model::ReconcileTagsRequest::force_delete_missing
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn reconcile_tags(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::ReconcileTags {
        crate::builders::data_catalog::ReconcileTags::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Marks an [Entry][google.cloud.datacatalog.v1.Entry] as starred by
    /// the current user. Starring information is private to each user.
    ///
    /// [google.cloud.datacatalog.v1.Entry]: crate::model::Entry
    pub fn star_entry(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::StarEntry {
        crate::builders::data_catalog::StarEntry::new(self.inner.clone()).set_name(name.into())
    }

    /// Marks an [Entry][google.cloud.datacatalog.v1.Entry] as NOT starred by
    /// the current user. Starring information is private to each user.
    ///
    /// [google.cloud.datacatalog.v1.Entry]: crate::model::Entry
    pub fn unstar_entry(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::UnstarEntry {
        crate::builders::data_catalog::UnstarEntry::new(self.inner.clone()).set_name(name.into())
    }

    /// Sets an access control policy for a resource. Replaces any existing
    /// policy.
    ///
    /// Supported resources are:
    ///
    /// - Tag templates
    /// - Entry groups
    ///
    /// Note: This method sets policies only within Data Catalog and can't be
    /// used to manage policies in BigQuery, Pub/Sub, Dataproc Metastore, and any
    /// external Google Cloud Platform resources synced with the Data Catalog.
    ///
    /// To call this method, you must have the following Google IAM permissions:
    ///
    /// - `datacatalog.tagTemplates.setIamPolicy` to set policies on tag
    ///   templates.
    /// - `datacatalog.entryGroups.setIamPolicy` to set policies on entry groups.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::SetIamPolicy {
        crate::builders::data_catalog::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource.
    ///
    /// May return:
    ///
    /// * A`NOT_FOUND` error if the resource doesn't exist or you don't have the
    ///   permission to view it.
    /// * An empty policy if the resource exists but doesn't have a set policy.
    ///
    /// Supported resources are:
    ///
    /// - Tag templates
    /// - Entry groups
    ///
    /// Note: This method doesn't get policies from Google Cloud Platform
    /// resources ingested into Data Catalog.
    ///
    /// To call this method, you must have the following Google IAM permissions:
    ///
    /// - `datacatalog.tagTemplates.getIamPolicy` to get policies on tag
    ///   templates.
    /// - `datacatalog.entryGroups.getIamPolicy` to get policies on entry groups.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::GetIamPolicy {
        crate::builders::data_catalog::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets your permissions on a resource.
    ///
    /// Returns an empty set of permissions if the resource doesn't exist.
    ///
    /// Supported resources are:
    ///
    /// - Tag templates
    /// - Entry groups
    ///
    /// Note: This method gets policies only within Data Catalog and can't be
    /// used to get policies from BigQuery, Pub/Sub, Dataproc Metastore, and any
    /// external Google Cloud Platform resources ingested into Data Catalog.
    ///
    /// No Google IAM permissions are required to call this method.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::TestIamPermissions {
        crate::builders::data_catalog::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Imports entries from a source, such as data previously dumped into a
    /// Cloud Storage bucket, into Data Catalog. Import of entries
    /// is a sync operation that reconciles the state of the third-party system
    /// with the Data Catalog.
    ///
    /// `ImportEntries` accepts source data snapshots of a third-party system.
    /// Snapshot should be delivered as a .wire or base65-encoded .txt file
    /// containing a sequence of Protocol Buffer messages of
    /// [DumpItem][google.cloud.datacatalog.v1.DumpItem] type.
    ///
    /// `ImportEntries` returns a [long-running operation]
    /// [google.longrunning.Operation] resource that can be queried with
    /// [Operations.GetOperation][google.longrunning.Operations.GetOperation]
    /// to return
    /// [ImportEntriesMetadata][google.cloud.datacatalog.v1.ImportEntriesMetadata]
    /// and an
    /// [ImportEntriesResponse][google.cloud.datacatalog.v1.ImportEntriesResponse]
    /// message.
    ///
    /// [google.cloud.datacatalog.v1.DumpItem]: crate::model::DumpItem
    /// [google.cloud.datacatalog.v1.ImportEntriesMetadata]: crate::model::ImportEntriesMetadata
    /// [google.cloud.datacatalog.v1.ImportEntriesResponse]: crate::model::ImportEntriesResponse
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_entries(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::ImportEntries {
        crate::builders::data_catalog::ImportEntries::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Sets the configuration related to the migration to Dataplex for an
    /// organization or project.
    pub fn set_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::SetConfig {
        crate::builders::data_catalog::SetConfig::new(self.inner.clone()).set_name(name.into())
    }

    /// Retrieves the configuration related to the migration from Data Catalog to
    /// Dataplex for a specific organization, including all the projects under it
    /// which have a separate configuration set.
    pub fn retrieve_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::RetrieveConfig {
        crate::builders::data_catalog::RetrieveConfig::new(self.inner.clone()).set_name(name.into())
    }

    /// Retrieves the effective configuration related to the migration from Data
    /// Catalog to Dataplex for a specific organization or project. If there is no
    /// specific configuration set for the resource, the setting is checked
    /// hierarchicahlly through the ancestors of the resource, starting from the
    /// resource itself.
    pub fn retrieve_effective_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::RetrieveEffectiveConfig {
        crate::builders::data_catalog::RetrieveEffectiveConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::ListOperations {
        crate::builders::data_catalog::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::GetOperation {
        crate::builders::data_catalog::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::DeleteOperation {
        crate::builders::data_catalog::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_catalog::CancelOperation {
        crate::builders::data_catalog::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Google Cloud Data Catalog API.
///
/// # Service Description
///
/// Policy Tag Manager API service allows you to manage your policy tags and
/// taxonomies.
///
/// Policy tags are used to tag BigQuery columns and apply additional access
/// control policies. A taxonomy is a hierarchical grouping of policy tags that
/// classify data along a common axis.
///
/// # Configuration
///
/// `PolicyTagManager` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `PolicyTagManager` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `PolicyTagManager` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct PolicyTagManager {
    inner: Arc<dyn crate::stubs::dynamic::PolicyTagManager>,
}

impl PolicyTagManager {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::PolicyTagManager + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::PolicyTagManager>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::PolicyTagManager> {
        crate::transport::PolicyTagManager::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::PolicyTagManager> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::PolicyTagManager::new)
    }

    /// Creates a taxonomy in a specified project.
    ///
    /// The taxonomy is initially empty, that is, it doesn't contain policy tags.
    pub fn create_taxonomy(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager::CreateTaxonomy {
        crate::builders::policy_tag_manager::CreateTaxonomy::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a taxonomy, including all policy tags in this
    /// taxonomy, their associated policies, and the policy tags references from
    /// BigQuery columns.
    pub fn delete_taxonomy(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager::DeleteTaxonomy {
        crate::builders::policy_tag_manager::DeleteTaxonomy::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a taxonomy, including its display name,
    /// description, and activated policy types.
    pub fn update_taxonomy(
        &self,
        taxonomy: impl Into<crate::model::Taxonomy>,
    ) -> crate::builders::policy_tag_manager::UpdateTaxonomy {
        crate::builders::policy_tag_manager::UpdateTaxonomy::new(self.inner.clone())
            .set_taxonomy(taxonomy.into())
    }

    /// Lists all taxonomies in a project in a particular location that you
    /// have a permission to view.
    pub fn list_taxonomies(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager::ListTaxonomies {
        crate::builders::policy_tag_manager::ListTaxonomies::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a taxonomy.
    pub fn get_taxonomy(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager::GetTaxonomy {
        crate::builders::policy_tag_manager::GetTaxonomy::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a policy tag in a taxonomy.
    pub fn create_policy_tag(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager::CreatePolicyTag {
        crate::builders::policy_tag_manager::CreatePolicyTag::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a policy tag together with the following:
    ///
    /// * All of its descendant policy tags, if any
    /// * Policies associated with the policy tag and its descendants
    /// * References from BigQuery table schema of the policy tag and its
    ///   descendants
    pub fn delete_policy_tag(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager::DeletePolicyTag {
        crate::builders::policy_tag_manager::DeletePolicyTag::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a policy tag, including its display
    /// name, description, and parent policy tag.
    pub fn update_policy_tag(
        &self,
        policy_tag: impl Into<crate::model::PolicyTag>,
    ) -> crate::builders::policy_tag_manager::UpdatePolicyTag {
        crate::builders::policy_tag_manager::UpdatePolicyTag::new(self.inner.clone())
            .set_policy_tag(policy_tag.into())
    }

    /// Lists all policy tags in a taxonomy.
    pub fn list_policy_tags(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager::ListPolicyTags {
        crate::builders::policy_tag_manager::ListPolicyTags::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a policy tag.
    pub fn get_policy_tag(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager::GetPolicyTag {
        crate::builders::policy_tag_manager::GetPolicyTag::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets the IAM policy for a policy tag or a taxonomy.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager::GetIamPolicy {
        crate::builders::policy_tag_manager::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Sets the IAM policy for a policy tag or a taxonomy.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager::SetIamPolicy {
        crate::builders::policy_tag_manager::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns your permissions on a specified policy tag or
    /// taxonomy.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager::TestIamPermissions {
        crate::builders::policy_tag_manager::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager::ListOperations {
        crate::builders::policy_tag_manager::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager::GetOperation {
        crate::builders::policy_tag_manager::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager::DeleteOperation {
        crate::builders::policy_tag_manager::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager::CancelOperation {
        crate::builders::policy_tag_manager::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Google Cloud Data Catalog API.
///
/// # Service Description
///
/// Policy Tag Manager Serialization API service allows you to manipulate
/// your policy tags and taxonomies in a serialized format.
///
/// Taxonomy is a hierarchical group of policy tags.
///
/// # Configuration
///
/// `PolicyTagManagerSerialization` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `PolicyTagManagerSerialization` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `PolicyTagManagerSerialization` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct PolicyTagManagerSerialization {
    inner: Arc<dyn crate::stubs::dynamic::PolicyTagManagerSerialization>,
}

impl PolicyTagManagerSerialization {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::PolicyTagManagerSerialization + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::PolicyTagManagerSerialization>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::PolicyTagManagerSerialization> {
        crate::transport::PolicyTagManagerSerialization::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::PolicyTagManagerSerialization> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::PolicyTagManagerSerialization::new)
    }

    /// Replaces (updates) a taxonomy and all its policy tags.
    ///
    /// The taxonomy and its entire hierarchy of policy tags must be
    /// represented literally by `SerializedTaxonomy` and the nested
    /// `SerializedPolicyTag` messages.
    ///
    /// This operation automatically does the following:
    ///
    /// - Deletes the existing policy tags that are missing from the
    ///   `SerializedPolicyTag`.
    /// - Creates policy tags that don't have resource names. They are considered
    ///   new.
    /// - Updates policy tags with valid resources names accordingly.
    pub fn replace_taxonomy(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager_serialization::ReplaceTaxonomy {
        crate::builders::policy_tag_manager_serialization::ReplaceTaxonomy::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates new taxonomies (including their policy tags) in a given project
    /// by importing from inlined or cross-regional sources.
    ///
    /// For a cross-regional source, new taxonomies are created by copying
    /// from a source in another region.
    ///
    /// For an inlined source, taxonomies and policy tags are created in bulk using
    /// nested protocol buffer structures.
    pub fn import_taxonomies(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager_serialization::ImportTaxonomies {
        crate::builders::policy_tag_manager_serialization::ImportTaxonomies::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Exports taxonomies in the requested type and returns them,
    /// including their policy tags. The requested taxonomies must belong to the
    /// same project.
    ///
    /// This method generates `SerializedTaxonomy` protocol buffers with nested
    /// policy tags that can be used as input for `ImportTaxonomies` calls.
    pub fn export_taxonomies(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager_serialization::ExportTaxonomies {
        crate::builders::policy_tag_manager_serialization::ExportTaxonomies::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager_serialization::ListOperations {
        crate::builders::policy_tag_manager_serialization::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager_serialization::GetOperation {
        crate::builders::policy_tag_manager_serialization::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager_serialization::DeleteOperation {
        crate::builders::policy_tag_manager_serialization::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::policy_tag_manager_serialization::CancelOperation {
        crate::builders::policy_tag_manager_serialization::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
