// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Memorystore for Memcached API.
///
/// # Service Description
///
/// Configures and manages Cloud Memorystore for Memcached instances.
///
/// The `memcache.googleapis.com` service implements the Google Cloud Memorystore
/// for Memcached API and defines the following resource model for managing
/// Memorystore Memcached (also called Memcached below) instances:
///
/// * The service works with a collection of cloud projects, named: `/projects/*`
/// * Each project has a collection of available locations, named: `/locations/*`
/// * Each location has a collection of Memcached instances, named:
///   `/instances/*`
/// * As such, Memcached instances are resources of the form:
///   `/projects/{project_id}/locations/{location_id}/instances/{instance_id}`
///
/// Note that location_id must be a GCP `region`; for example:
///
/// * `projects/my-memcached-project/locations/us-central1/instances/my-memcached`
///
/// # Configuration
///
/// `CloudMemcache` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `CloudMemcache` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `CloudMemcache` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct CloudMemcache {
    inner: Arc<dyn crate::stubs::dynamic::CloudMemcache>,
}

impl CloudMemcache {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::CloudMemcache + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::CloudMemcache>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::CloudMemcache> {
        crate::transport::CloudMemcache::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::CloudMemcache> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::CloudMemcache::new)
    }

    /// Lists Instances in a given location.
    pub fn list_instances(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::cloud_memcache::ListInstances {
        crate::builders::cloud_memcache::ListInstances::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single Instance.
    pub fn get_instance(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_memcache::GetInstance {
        crate::builders::cloud_memcache::GetInstance::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a new Instance in a given location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_instance(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::cloud_memcache::CreateInstance {
        crate::builders::cloud_memcache::CreateInstance::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an existing Instance in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_instance(
        &self,
        instance: impl Into<crate::model::Instance>,
    ) -> crate::builders::cloud_memcache::UpdateInstance {
        crate::builders::cloud_memcache::UpdateInstance::new(self.inner.clone())
            .set_instance(instance.into())
    }

    /// Updates the defined Memcached parameters for an existing instance.
    /// This method only stages the parameters, it must be followed by
    /// `ApplyParameters` to apply the parameters to nodes of the Memcached
    /// instance.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_parameters(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_memcache::UpdateParameters {
        crate::builders::cloud_memcache::UpdateParameters::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes a single Instance.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_instance(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_memcache::DeleteInstance {
        crate::builders::cloud_memcache::DeleteInstance::new(self.inner.clone())
            .set_name(name.into())
    }

    /// `ApplyParameters` restarts the set of specified nodes in order to update
    /// them to the current set of parameters for the Memcached Instance.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn apply_parameters(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_memcache::ApplyParameters {
        crate::builders::cloud_memcache::ApplyParameters::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Reschedules upcoming maintenance event.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn reschedule_maintenance(
        &self,
        instance: impl Into<std::string::String>,
    ) -> crate::builders::cloud_memcache::RescheduleMaintenance {
        crate::builders::cloud_memcache::RescheduleMaintenance::new(self.inner.clone())
            .set_instance(instance.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_memcache::ListLocations {
        crate::builders::cloud_memcache::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_memcache::GetLocation {
        crate::builders::cloud_memcache::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_memcache::ListOperations {
        crate::builders::cloud_memcache::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_memcache::GetOperation {
        crate::builders::cloud_memcache::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_memcache::DeleteOperation {
        crate::builders::cloud_memcache::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_memcache::CancelOperation {
        crate::builders::cloud_memcache::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
