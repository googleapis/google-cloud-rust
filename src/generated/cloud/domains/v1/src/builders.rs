// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

pub mod domains {
    use crate::Result;
    use std::sync::Arc;

    /// Common implementation for [crate::client::Domains] request builders.
    #[derive(Clone, Debug)]
    pub struct RequestBuilder<R: std::default::Default> {
        stub: Arc<dyn crate::stubs::dynamic::Domains>,
        request: R,
        options: gax::options::RequestOptions,
    }

    impl<R> RequestBuilder<R>
    where
        R: std::default::Default,
    {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self {
                stub,
                request: R::default(),
                options: gax::options::RequestOptions::default(),
            }
        }
    }

    /// The request builder for a Domains::search_domains call.
    #[derive(Clone, Debug)]
    pub struct SearchDomains(RequestBuilder<crate::model::SearchDomainsRequest>);

    impl SearchDomains {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SearchDomainsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SearchDomainsResponse> {
            (*self.0.stub)
                .search_domains(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [query][crate::model::SearchDomainsRequest::query].
        pub fn set_query<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.query = v.into();
            self
        }

        /// Sets the value of [location][crate::model::SearchDomainsRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SearchDomains {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Domains::retrieve_register_parameters call.
    #[derive(Clone, Debug)]
    pub struct RetrieveRegisterParameters(
        RequestBuilder<crate::model::RetrieveRegisterParametersRequest>,
    );

    impl RetrieveRegisterParameters {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::RetrieveRegisterParametersRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::RetrieveRegisterParametersResponse> {
            (*self.0.stub)
                .retrieve_register_parameters(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [domain_name][crate::model::RetrieveRegisterParametersRequest::domain_name].
        pub fn set_domain_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.domain_name = v.into();
            self
        }

        /// Sets the value of [location][crate::model::RetrieveRegisterParametersRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for RetrieveRegisterParameters {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Domains::register_domain call.
    #[derive(Clone, Debug)]
    pub struct RegisterDomain(RequestBuilder<crate::model::RegisterDomainRequest>);

    impl RegisterDomain {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::RegisterDomainRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        ///
        /// # Long running operations
        ///
        /// This starts, but does not poll, a longrunning operation. More information
        /// on [register_domain][crate::client::Domains::register_domain].
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .register_domain(self.0.request, self.0.options)
                .await
        }

        /// Creates a [Poller][lro::Poller] to work with `register_domain`.
        pub fn poller(
            self,
        ) -> impl lro::Poller<crate::model::Registration, crate::model::OperationMetadata> {
            type Operation =
                lro::Operation<crate::model::Registration, crate::model::OperationMetadata>;
            let polling_policy = self.0.stub.get_polling_policy(&self.0.options);
            let polling_backoff_policy = self.0.stub.get_polling_backoff_policy(&self.0.options);

            let stub = self.0.stub.clone();
            let mut options = self.0.options.clone();
            options.set_retry_policy(gax::retry_policy::NeverRetry);
            let query = move |name| {
                let stub = stub.clone();
                let options = options.clone();
                async {
                    let op = GetOperation::new(stub)
                        .set_name(name)
                        .with_options(options)
                        .send()
                        .await?;
                    Ok(Operation::new(op))
                }
            };

            let start = move || async {
                let op = self.send().await?;
                Ok(Operation::new(op))
            };

            lro::new_poller(polling_policy, polling_backoff_policy, start, query)
        }

        /// Sets the value of [parent][crate::model::RegisterDomainRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [registration][crate::model::RegisterDomainRequest::registration].
        pub fn set_registration<T: Into<std::option::Option<crate::model::Registration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.registration = v.into();
            self
        }

        /// Sets the value of [yearly_price][crate::model::RegisterDomainRequest::yearly_price].
        pub fn set_yearly_price<T: Into<std::option::Option<gtype::model::Money>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.yearly_price = v.into();
            self
        }

        /// Sets the value of [validate_only][crate::model::RegisterDomainRequest::validate_only].
        pub fn set_validate_only<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.validate_only = v.into();
            self
        }

        /// Sets the value of [domain_notices][crate::model::RegisterDomainRequest::domain_notices].
        pub fn set_domain_notices<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::DomainNotice>,
        {
            use std::iter::Iterator;
            self.0.request.domain_notices = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [contact_notices][crate::model::RegisterDomainRequest::contact_notices].
        pub fn set_contact_notices<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::ContactNotice>,
        {
            use std::iter::Iterator;
            self.0.request.contact_notices = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl gax::options::RequestBuilder for RegisterDomain {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Domains::retrieve_transfer_parameters call.
    #[derive(Clone, Debug)]
    pub struct RetrieveTransferParameters(
        RequestBuilder<crate::model::RetrieveTransferParametersRequest>,
    );

    impl RetrieveTransferParameters {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::RetrieveTransferParametersRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::RetrieveTransferParametersResponse> {
            (*self.0.stub)
                .retrieve_transfer_parameters(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [domain_name][crate::model::RetrieveTransferParametersRequest::domain_name].
        pub fn set_domain_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.domain_name = v.into();
            self
        }

        /// Sets the value of [location][crate::model::RetrieveTransferParametersRequest::location].
        pub fn set_location<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.location = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for RetrieveTransferParameters {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Domains::transfer_domain call.
    #[derive(Clone, Debug)]
    pub struct TransferDomain(RequestBuilder<crate::model::TransferDomainRequest>);

    impl TransferDomain {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::TransferDomainRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        ///
        /// # Long running operations
        ///
        /// This starts, but does not poll, a longrunning operation. More information
        /// on [transfer_domain][crate::client::Domains::transfer_domain].
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .transfer_domain(self.0.request, self.0.options)
                .await
        }

        /// Creates a [Poller][lro::Poller] to work with `transfer_domain`.
        pub fn poller(
            self,
        ) -> impl lro::Poller<crate::model::Registration, crate::model::OperationMetadata> {
            type Operation =
                lro::Operation<crate::model::Registration, crate::model::OperationMetadata>;
            let polling_policy = self.0.stub.get_polling_policy(&self.0.options);
            let polling_backoff_policy = self.0.stub.get_polling_backoff_policy(&self.0.options);

            let stub = self.0.stub.clone();
            let mut options = self.0.options.clone();
            options.set_retry_policy(gax::retry_policy::NeverRetry);
            let query = move |name| {
                let stub = stub.clone();
                let options = options.clone();
                async {
                    let op = GetOperation::new(stub)
                        .set_name(name)
                        .with_options(options)
                        .send()
                        .await?;
                    Ok(Operation::new(op))
                }
            };

            let start = move || async {
                let op = self.send().await?;
                Ok(Operation::new(op))
            };

            lro::new_poller(polling_policy, polling_backoff_policy, start, query)
        }

        /// Sets the value of [parent][crate::model::TransferDomainRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [registration][crate::model::TransferDomainRequest::registration].
        pub fn set_registration<T: Into<std::option::Option<crate::model::Registration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.registration = v.into();
            self
        }

        /// Sets the value of [yearly_price][crate::model::TransferDomainRequest::yearly_price].
        pub fn set_yearly_price<T: Into<std::option::Option<gtype::model::Money>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.yearly_price = v.into();
            self
        }

        /// Sets the value of [authorization_code][crate::model::TransferDomainRequest::authorization_code].
        pub fn set_authorization_code<
            T: Into<std::option::Option<crate::model::AuthorizationCode>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.authorization_code = v.into();
            self
        }

        /// Sets the value of [validate_only][crate::model::TransferDomainRequest::validate_only].
        pub fn set_validate_only<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.validate_only = v.into();
            self
        }

        /// Sets the value of [contact_notices][crate::model::TransferDomainRequest::contact_notices].
        pub fn set_contact_notices<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::ContactNotice>,
        {
            use std::iter::Iterator;
            self.0.request.contact_notices = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl gax::options::RequestBuilder for TransferDomain {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Domains::list_registrations call.
    #[derive(Clone, Debug)]
    pub struct ListRegistrations(RequestBuilder<crate::model::ListRegistrationsRequest>);

    impl ListRegistrations {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListRegistrationsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListRegistrationsResponse> {
            (*self.0.stub)
                .list_registrations(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        #[cfg(feature = "unstable-stream")]
        pub async fn stream(
            self,
        ) -> gax::paginator::Paginator<crate::model::ListRegistrationsResponse, gax::error::Error>
        {
            let token = gax::paginator::extract_token(&self.0.request.page_token);
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListRegistrationsRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListRegistrationsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListRegistrationsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of [filter][crate::model::ListRegistrationsRequest::filter].
        pub fn set_filter<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListRegistrations {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Domains::get_registration call.
    #[derive(Clone, Debug)]
    pub struct GetRegistration(RequestBuilder<crate::model::GetRegistrationRequest>);

    impl GetRegistration {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetRegistrationRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Registration> {
            (*self.0.stub)
                .get_registration(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::GetRegistrationRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetRegistration {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Domains::update_registration call.
    #[derive(Clone, Debug)]
    pub struct UpdateRegistration(RequestBuilder<crate::model::UpdateRegistrationRequest>);

    impl UpdateRegistration {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateRegistrationRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        ///
        /// # Long running operations
        ///
        /// This starts, but does not poll, a longrunning operation. More information
        /// on [update_registration][crate::client::Domains::update_registration].
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .update_registration(self.0.request, self.0.options)
                .await
        }

        /// Creates a [Poller][lro::Poller] to work with `update_registration`.
        pub fn poller(
            self,
        ) -> impl lro::Poller<crate::model::Registration, crate::model::OperationMetadata> {
            type Operation =
                lro::Operation<crate::model::Registration, crate::model::OperationMetadata>;
            let polling_policy = self.0.stub.get_polling_policy(&self.0.options);
            let polling_backoff_policy = self.0.stub.get_polling_backoff_policy(&self.0.options);

            let stub = self.0.stub.clone();
            let mut options = self.0.options.clone();
            options.set_retry_policy(gax::retry_policy::NeverRetry);
            let query = move |name| {
                let stub = stub.clone();
                let options = options.clone();
                async {
                    let op = GetOperation::new(stub)
                        .set_name(name)
                        .with_options(options)
                        .send()
                        .await?;
                    Ok(Operation::new(op))
                }
            };

            let start = move || async {
                let op = self.send().await?;
                Ok(Operation::new(op))
            };

            lro::new_poller(polling_policy, polling_backoff_policy, start, query)
        }

        /// Sets the value of [registration][crate::model::UpdateRegistrationRequest::registration].
        pub fn set_registration<T: Into<std::option::Option<crate::model::Registration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.registration = v.into();
            self
        }

        /// Sets the value of [update_mask][crate::model::UpdateRegistrationRequest::update_mask].
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update_mask = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for UpdateRegistration {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Domains::configure_management_settings call.
    #[derive(Clone, Debug)]
    pub struct ConfigureManagementSettings(
        RequestBuilder<crate::model::ConfigureManagementSettingsRequest>,
    );

    impl ConfigureManagementSettings {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ConfigureManagementSettingsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        ///
        /// # Long running operations
        ///
        /// This starts, but does not poll, a longrunning operation. More information
        /// on [configure_management_settings][crate::client::Domains::configure_management_settings].
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .configure_management_settings(self.0.request, self.0.options)
                .await
        }

        /// Creates a [Poller][lro::Poller] to work with `configure_management_settings`.
        pub fn poller(
            self,
        ) -> impl lro::Poller<crate::model::Registration, crate::model::OperationMetadata> {
            type Operation =
                lro::Operation<crate::model::Registration, crate::model::OperationMetadata>;
            let polling_policy = self.0.stub.get_polling_policy(&self.0.options);
            let polling_backoff_policy = self.0.stub.get_polling_backoff_policy(&self.0.options);

            let stub = self.0.stub.clone();
            let mut options = self.0.options.clone();
            options.set_retry_policy(gax::retry_policy::NeverRetry);
            let query = move |name| {
                let stub = stub.clone();
                let options = options.clone();
                async {
                    let op = GetOperation::new(stub)
                        .set_name(name)
                        .with_options(options)
                        .send()
                        .await?;
                    Ok(Operation::new(op))
                }
            };

            let start = move || async {
                let op = self.send().await?;
                Ok(Operation::new(op))
            };

            lro::new_poller(polling_policy, polling_backoff_policy, start, query)
        }

        /// Sets the value of [registration][crate::model::ConfigureManagementSettingsRequest::registration].
        pub fn set_registration<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.registration = v.into();
            self
        }

        /// Sets the value of [management_settings][crate::model::ConfigureManagementSettingsRequest::management_settings].
        pub fn set_management_settings<
            T: Into<std::option::Option<crate::model::ManagementSettings>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.management_settings = v.into();
            self
        }

        /// Sets the value of [update_mask][crate::model::ConfigureManagementSettingsRequest::update_mask].
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update_mask = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ConfigureManagementSettings {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Domains::configure_dns_settings call.
    #[derive(Clone, Debug)]
    pub struct ConfigureDnsSettings(RequestBuilder<crate::model::ConfigureDnsSettingsRequest>);

    impl ConfigureDnsSettings {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ConfigureDnsSettingsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        ///
        /// # Long running operations
        ///
        /// This starts, but does not poll, a longrunning operation. More information
        /// on [configure_dns_settings][crate::client::Domains::configure_dns_settings].
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .configure_dns_settings(self.0.request, self.0.options)
                .await
        }

        /// Creates a [Poller][lro::Poller] to work with `configure_dns_settings`.
        pub fn poller(
            self,
        ) -> impl lro::Poller<crate::model::Registration, crate::model::OperationMetadata> {
            type Operation =
                lro::Operation<crate::model::Registration, crate::model::OperationMetadata>;
            let polling_policy = self.0.stub.get_polling_policy(&self.0.options);
            let polling_backoff_policy = self.0.stub.get_polling_backoff_policy(&self.0.options);

            let stub = self.0.stub.clone();
            let mut options = self.0.options.clone();
            options.set_retry_policy(gax::retry_policy::NeverRetry);
            let query = move |name| {
                let stub = stub.clone();
                let options = options.clone();
                async {
                    let op = GetOperation::new(stub)
                        .set_name(name)
                        .with_options(options)
                        .send()
                        .await?;
                    Ok(Operation::new(op))
                }
            };

            let start = move || async {
                let op = self.send().await?;
                Ok(Operation::new(op))
            };

            lro::new_poller(polling_policy, polling_backoff_policy, start, query)
        }

        /// Sets the value of [registration][crate::model::ConfigureDnsSettingsRequest::registration].
        pub fn set_registration<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.registration = v.into();
            self
        }

        /// Sets the value of [dns_settings][crate::model::ConfigureDnsSettingsRequest::dns_settings].
        pub fn set_dns_settings<T: Into<std::option::Option<crate::model::DnsSettings>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.dns_settings = v.into();
            self
        }

        /// Sets the value of [update_mask][crate::model::ConfigureDnsSettingsRequest::update_mask].
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update_mask = v.into();
            self
        }

        /// Sets the value of [validate_only][crate::model::ConfigureDnsSettingsRequest::validate_only].
        pub fn set_validate_only<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.validate_only = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ConfigureDnsSettings {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Domains::configure_contact_settings call.
    #[derive(Clone, Debug)]
    pub struct ConfigureContactSettings(
        RequestBuilder<crate::model::ConfigureContactSettingsRequest>,
    );

    impl ConfigureContactSettings {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ConfigureContactSettingsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        ///
        /// # Long running operations
        ///
        /// This starts, but does not poll, a longrunning operation. More information
        /// on [configure_contact_settings][crate::client::Domains::configure_contact_settings].
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .configure_contact_settings(self.0.request, self.0.options)
                .await
        }

        /// Creates a [Poller][lro::Poller] to work with `configure_contact_settings`.
        pub fn poller(
            self,
        ) -> impl lro::Poller<crate::model::Registration, crate::model::OperationMetadata> {
            type Operation =
                lro::Operation<crate::model::Registration, crate::model::OperationMetadata>;
            let polling_policy = self.0.stub.get_polling_policy(&self.0.options);
            let polling_backoff_policy = self.0.stub.get_polling_backoff_policy(&self.0.options);

            let stub = self.0.stub.clone();
            let mut options = self.0.options.clone();
            options.set_retry_policy(gax::retry_policy::NeverRetry);
            let query = move |name| {
                let stub = stub.clone();
                let options = options.clone();
                async {
                    let op = GetOperation::new(stub)
                        .set_name(name)
                        .with_options(options)
                        .send()
                        .await?;
                    Ok(Operation::new(op))
                }
            };

            let start = move || async {
                let op = self.send().await?;
                Ok(Operation::new(op))
            };

            lro::new_poller(polling_policy, polling_backoff_policy, start, query)
        }

        /// Sets the value of [registration][crate::model::ConfigureContactSettingsRequest::registration].
        pub fn set_registration<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.registration = v.into();
            self
        }

        /// Sets the value of [contact_settings][crate::model::ConfigureContactSettingsRequest::contact_settings].
        pub fn set_contact_settings<T: Into<std::option::Option<crate::model::ContactSettings>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.contact_settings = v.into();
            self
        }

        /// Sets the value of [update_mask][crate::model::ConfigureContactSettingsRequest::update_mask].
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update_mask = v.into();
            self
        }

        /// Sets the value of [validate_only][crate::model::ConfigureContactSettingsRequest::validate_only].
        pub fn set_validate_only<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.validate_only = v.into();
            self
        }

        /// Sets the value of [contact_notices][crate::model::ConfigureContactSettingsRequest::contact_notices].
        pub fn set_contact_notices<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::ContactNotice>,
        {
            use std::iter::Iterator;
            self.0.request.contact_notices = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl gax::options::RequestBuilder for ConfigureContactSettings {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Domains::export_registration call.
    #[derive(Clone, Debug)]
    pub struct ExportRegistration(RequestBuilder<crate::model::ExportRegistrationRequest>);

    impl ExportRegistration {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ExportRegistrationRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        ///
        /// # Long running operations
        ///
        /// This starts, but does not poll, a longrunning operation. More information
        /// on [export_registration][crate::client::Domains::export_registration].
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .export_registration(self.0.request, self.0.options)
                .await
        }

        /// Creates a [Poller][lro::Poller] to work with `export_registration`.
        pub fn poller(
            self,
        ) -> impl lro::Poller<crate::model::Registration, crate::model::OperationMetadata> {
            type Operation =
                lro::Operation<crate::model::Registration, crate::model::OperationMetadata>;
            let polling_policy = self.0.stub.get_polling_policy(&self.0.options);
            let polling_backoff_policy = self.0.stub.get_polling_backoff_policy(&self.0.options);

            let stub = self.0.stub.clone();
            let mut options = self.0.options.clone();
            options.set_retry_policy(gax::retry_policy::NeverRetry);
            let query = move |name| {
                let stub = stub.clone();
                let options = options.clone();
                async {
                    let op = GetOperation::new(stub)
                        .set_name(name)
                        .with_options(options)
                        .send()
                        .await?;
                    Ok(Operation::new(op))
                }
            };

            let start = move || async {
                let op = self.send().await?;
                Ok(Operation::new(op))
            };

            lro::new_poller(polling_policy, polling_backoff_policy, start, query)
        }

        /// Sets the value of [name][crate::model::ExportRegistrationRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ExportRegistration {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Domains::delete_registration call.
    #[derive(Clone, Debug)]
    pub struct DeleteRegistration(RequestBuilder<crate::model::DeleteRegistrationRequest>);

    impl DeleteRegistration {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteRegistrationRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        ///
        /// # Long running operations
        ///
        /// This starts, but does not poll, a longrunning operation. More information
        /// on [delete_registration][crate::client::Domains::delete_registration].
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .delete_registration(self.0.request, self.0.options)
                .await
        }

        /// Creates a [Poller][lro::Poller] to work with `delete_registration`.
        pub fn poller(self) -> impl lro::Poller<wkt::Empty, crate::model::OperationMetadata> {
            type Operation = lro::Operation<wkt::Empty, crate::model::OperationMetadata>;
            let polling_policy = self.0.stub.get_polling_policy(&self.0.options);
            let polling_backoff_policy = self.0.stub.get_polling_backoff_policy(&self.0.options);

            let stub = self.0.stub.clone();
            let mut options = self.0.options.clone();
            options.set_retry_policy(gax::retry_policy::NeverRetry);
            let query = move |name| {
                let stub = stub.clone();
                let options = options.clone();
                async {
                    let op = GetOperation::new(stub)
                        .set_name(name)
                        .with_options(options)
                        .send()
                        .await?;
                    Ok(Operation::new(op))
                }
            };

            let start = move || async {
                let op = self.send().await?;
                Ok(Operation::new(op))
            };

            lro::new_poller(polling_policy, polling_backoff_policy, start, query)
        }

        /// Sets the value of [name][crate::model::DeleteRegistrationRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DeleteRegistration {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Domains::retrieve_authorization_code call.
    #[derive(Clone, Debug)]
    pub struct RetrieveAuthorizationCode(
        RequestBuilder<crate::model::RetrieveAuthorizationCodeRequest>,
    );

    impl RetrieveAuthorizationCode {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::RetrieveAuthorizationCodeRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::AuthorizationCode> {
            (*self.0.stub)
                .retrieve_authorization_code(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [registration][crate::model::RetrieveAuthorizationCodeRequest::registration].
        pub fn set_registration<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.registration = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for RetrieveAuthorizationCode {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Domains::reset_authorization_code call.
    #[derive(Clone, Debug)]
    pub struct ResetAuthorizationCode(RequestBuilder<crate::model::ResetAuthorizationCodeRequest>);

    impl ResetAuthorizationCode {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ResetAuthorizationCodeRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::AuthorizationCode> {
            (*self.0.stub)
                .reset_authorization_code(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [registration][crate::model::ResetAuthorizationCodeRequest::registration].
        pub fn set_registration<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.registration = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ResetAuthorizationCode {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Domains::list_operations call.
    #[derive(Clone, Debug)]
    pub struct ListOperations(RequestBuilder<longrunning::model::ListOperationsRequest>);

    impl ListOperations {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<longrunning::model::ListOperationsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<longrunning::model::ListOperationsResponse> {
            (*self.0.stub)
                .list_operations(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        #[cfg(feature = "unstable-stream")]
        pub async fn stream(
            self,
        ) -> gax::paginator::Paginator<longrunning::model::ListOperationsResponse, gax::error::Error>
        {
            let token = gax::paginator::extract_token(&self.0.request.page_token);
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [name][longrunning::model::ListOperationsRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [filter][longrunning::model::ListOperationsRequest::filter].
        pub fn set_filter<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }

        /// Sets the value of [page_size][longrunning::model::ListOperationsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][longrunning::model::ListOperationsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListOperations {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a Domains::get_operation call.
    #[derive(Clone, Debug)]
    pub struct GetOperation(RequestBuilder<longrunning::model::GetOperationRequest>);

    impl GetOperation {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::Domains>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<longrunning::model::GetOperationRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<longrunning::model::Operation> {
            (*self.0.stub)
                .get_operation(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][longrunning::model::GetOperationRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetOperation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }
}
