// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gtype;
extern crate lazy_static;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// The `Registration` resource facilitates managing and configuring domain name
/// registrations.
///
/// There are several ways to create a new `Registration` resource:
///
/// To create a new `Registration` resource, find a suitable domain name by
/// calling the `SearchDomains` method with a query to see available domain name
/// options. After choosing a name, call `RetrieveRegisterParameters` to
/// ensure availability and obtain information like pricing, which is needed to
/// build a call to `RegisterDomain`.
///
/// Another way to create a new `Registration` is to transfer an existing
/// domain from another registrar. First, go to the current registrar to unlock
/// the domain for transfer and retrieve the domain's transfer authorization
/// code. Then call `RetrieveTransferParameters` to confirm that the domain is
/// unlocked and to get values needed to build a call to `TransferDomain`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Registration {
    /// Output only. Name of the `Registration` resource, in the format
    /// `projects/*/locations/*/registrations/<domain_name>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Immutable. The domain name. Unicode domain names must be expressed in Punycode format.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub domain_name: std::string::String,

    /// Output only. The creation timestamp of the `Registration` resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The expiration timestamp of the `Registration`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub expire_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The state of the `Registration`
    pub state: crate::model::registration::State,

    /// Output only. The set of issues with the `Registration` that require attention.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub issues: std::vec::Vec<crate::model::registration::Issue>,

    /// Set of labels associated with the `Registration`.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Settings for management of the `Registration`, including renewal, billing,
    /// and transfer. You cannot update these with the `UpdateRegistration`
    /// method. To update these settings, use the `ConfigureManagementSettings`
    /// method.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub management_settings: std::option::Option<crate::model::ManagementSettings>,

    /// Settings controlling the DNS configuration of the `Registration`. You
    /// cannot update these with the `UpdateRegistration` method. To update these
    /// settings, use the `ConfigureDnsSettings` method.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub dns_settings: std::option::Option<crate::model::DnsSettings>,

    /// Required. Settings for contact information linked to the `Registration`. You cannot
    /// update these with the `UpdateRegistration` method. To update these
    /// settings, use the `ConfigureContactSettings` method.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub contact_settings: std::option::Option<crate::model::ContactSettings>,

    /// Output only. Pending contact settings for the `Registration`. Updates to the
    /// `contact_settings` field that change its `registrant_contact` or `privacy`
    /// fields require email confirmation by the `registrant_contact`
    /// before taking effect. This field is set only if there are pending updates
    /// to the `contact_settings` that have not been confirmed. To confirm the
    /// changes, the `registrant_contact` must follow the instructions in the
    /// email they receive.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub pending_contact_settings: std::option::Option<crate::model::ContactSettings>,

    /// Output only. Set of options for the `contact_settings.privacy` field that this
    /// `Registration` supports.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub supported_privacy: std::vec::Vec<crate::model::ContactPrivacy>,
}

impl Registration {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Registration::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [domain_name][crate::model::Registration::domain_name].
    pub fn set_domain_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.domain_name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Registration::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [expire_time][crate::model::Registration::expire_time].
    pub fn set_expire_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.expire_time = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Registration::state].
    pub fn set_state<T: std::convert::Into<crate::model::registration::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [management_settings][crate::model::Registration::management_settings].
    pub fn set_management_settings<
        T: std::convert::Into<std::option::Option<crate::model::ManagementSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.management_settings = v.into();
        self
    }

    /// Sets the value of [dns_settings][crate::model::Registration::dns_settings].
    pub fn set_dns_settings<
        T: std::convert::Into<std::option::Option<crate::model::DnsSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.dns_settings = v.into();
        self
    }

    /// Sets the value of [contact_settings][crate::model::Registration::contact_settings].
    pub fn set_contact_settings<
        T: std::convert::Into<std::option::Option<crate::model::ContactSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.contact_settings = v.into();
        self
    }

    /// Sets the value of [pending_contact_settings][crate::model::Registration::pending_contact_settings].
    pub fn set_pending_contact_settings<
        T: std::convert::Into<std::option::Option<crate::model::ContactSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.pending_contact_settings = v.into();
        self
    }

    /// Sets the value of [issues][crate::model::Registration::issues].
    pub fn set_issues<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::registration::Issue>,
    {
        use std::iter::Iterator;
        self.issues = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [supported_privacy][crate::model::Registration::supported_privacy].
    pub fn set_supported_privacy<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ContactPrivacy>,
    {
        use std::iter::Iterator;
        self.supported_privacy = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::Registration::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Registration {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.Registration"
    }
}

/// Defines additional types related to Registration
pub mod registration {
    #[allow(unused_imports)]
    use super::*;

    /// Possible states of a `Registration`.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// The state is undefined.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// The domain is being registered.
        pub const REGISTRATION_PENDING: State = State::new(1);

        /// The domain registration failed. You can delete resources in this state
        /// to allow registration to be retried.
        pub const REGISTRATION_FAILED: State = State::new(2);

        /// The domain is being transferred from another registrar to Cloud Domains.
        pub const TRANSFER_PENDING: State = State::new(3);

        /// The attempt to transfer the domain from another registrar to
        /// Cloud Domains failed. You can delete resources in this state and retry
        /// the transfer.
        pub const TRANSFER_FAILED: State = State::new(4);

        /// The domain is registered and operational. The domain renews automatically
        /// as long as it remains in this state.
        pub const ACTIVE: State = State::new(6);

        /// The domain is suspended and inoperative. For more details, see the
        /// `issues` field.
        pub const SUSPENDED: State = State::new(7);

        /// The domain is no longer managed with Cloud Domains. It may have been
        /// transferred to another registrar or exported for management in
        /// [Google Domains](https://domains.google/). You can no longer update it
        /// with this API, and information shown about it may be stale. Domains in
        /// this state are not automatically renewed by Cloud Domains.
        pub const EXPORTED: State = State::new(8);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("REGISTRATION_PENDING"),
                2 => std::borrow::Cow::Borrowed("REGISTRATION_FAILED"),
                3 => std::borrow::Cow::Borrowed("TRANSFER_PENDING"),
                4 => std::borrow::Cow::Borrowed("TRANSFER_FAILED"),
                6 => std::borrow::Cow::Borrowed("ACTIVE"),
                7 => std::borrow::Cow::Borrowed("SUSPENDED"),
                8 => std::borrow::Cow::Borrowed("EXPORTED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "REGISTRATION_PENDING" => std::option::Option::Some(Self::REGISTRATION_PENDING),
                "REGISTRATION_FAILED" => std::option::Option::Some(Self::REGISTRATION_FAILED),
                "TRANSFER_PENDING" => std::option::Option::Some(Self::TRANSFER_PENDING),
                "TRANSFER_FAILED" => std::option::Option::Some(Self::TRANSFER_FAILED),
                "ACTIVE" => std::option::Option::Some(Self::ACTIVE),
                "SUSPENDED" => std::option::Option::Some(Self::SUSPENDED),
                "EXPORTED" => std::option::Option::Some(Self::EXPORTED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Possible issues with a `Registration` that require attention.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Issue(i32);

    impl Issue {
        /// The issue is undefined.
        pub const ISSUE_UNSPECIFIED: Issue = Issue::new(0);

        /// Contact the Cloud Support team to resolve a problem with this domain.
        pub const CONTACT_SUPPORT: Issue = Issue::new(1);

        /// [ICANN](https://icann.org/) requires verification of the email address
        /// in the `Registration`'s `contact_settings.registrant_contact` field. To
        /// verify the email address, follow the
        /// instructions in the email the `registrant_contact` receives following
        /// registration. If you do not complete email verification within
        /// 15 days of registration, the domain is suspended. To resend the
        /// verification email, call ConfigureContactSettings and provide the current
        /// `registrant_contact.email`.
        pub const UNVERIFIED_EMAIL: Issue = Issue::new(2);

        /// Creates a new Issue instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("ISSUE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CONTACT_SUPPORT"),
                2 => std::borrow::Cow::Borrowed("UNVERIFIED_EMAIL"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "ISSUE_UNSPECIFIED" => std::option::Option::Some(Self::ISSUE_UNSPECIFIED),
                "CONTACT_SUPPORT" => std::option::Option::Some(Self::CONTACT_SUPPORT),
                "UNVERIFIED_EMAIL" => std::option::Option::Some(Self::UNVERIFIED_EMAIL),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for Issue {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for Issue {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Defines renewal, billing, and transfer settings for a `Registration`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ManagementSettings {
    /// Output only. The renewal method for this `Registration`.
    pub renewal_method: crate::model::management_settings::RenewalMethod,

    /// Controls whether the domain can be transferred to another registrar.
    pub transfer_lock_state: crate::model::TransferLockState,
}

impl ManagementSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [renewal_method][crate::model::ManagementSettings::renewal_method].
    pub fn set_renewal_method<
        T: std::convert::Into<crate::model::management_settings::RenewalMethod>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.renewal_method = v.into();
        self
    }

    /// Sets the value of [transfer_lock_state][crate::model::ManagementSettings::transfer_lock_state].
    pub fn set_transfer_lock_state<T: std::convert::Into<crate::model::TransferLockState>>(
        mut self,
        v: T,
    ) -> Self {
        self.transfer_lock_state = v.into();
        self
    }
}

impl wkt::message::Message for ManagementSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.ManagementSettings"
    }
}

/// Defines additional types related to ManagementSettings
pub mod management_settings {
    #[allow(unused_imports)]
    use super::*;

    /// Defines how the `Registration` is renewed.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct RenewalMethod(i32);

    impl RenewalMethod {
        /// The renewal method is undefined.
        pub const RENEWAL_METHOD_UNSPECIFIED: RenewalMethod = RenewalMethod::new(0);

        /// The domain is automatically renewed each year .
        ///
        /// To disable automatic renewals, delete the resource by calling
        /// `DeleteRegistration` or export it by calling `ExportRegistration`.
        pub const AUTOMATIC_RENEWAL: RenewalMethod = RenewalMethod::new(1);

        /// The domain must be explicitly renewed each year before its
        /// `expire_time`. This option is only available when the `Registration`
        /// is in state `EXPORTED`.
        ///
        /// To manage the domain's current billing and
        /// renewal settings, go to [Google Domains](https://domains.google/).
        pub const MANUAL_RENEWAL: RenewalMethod = RenewalMethod::new(2);

        /// Creates a new RenewalMethod instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("RENEWAL_METHOD_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("AUTOMATIC_RENEWAL"),
                2 => std::borrow::Cow::Borrowed("MANUAL_RENEWAL"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "RENEWAL_METHOD_UNSPECIFIED" => {
                    std::option::Option::Some(Self::RENEWAL_METHOD_UNSPECIFIED)
                }
                "AUTOMATIC_RENEWAL" => std::option::Option::Some(Self::AUTOMATIC_RENEWAL),
                "MANUAL_RENEWAL" => std::option::Option::Some(Self::MANUAL_RENEWAL),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for RenewalMethod {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for RenewalMethod {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Defines the DNS configuration of a `Registration`, including name servers,
/// DNSSEC, and glue records.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DnsSettings {
    /// The list of glue records for this `Registration`. Commonly empty.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub glue_records: std::vec::Vec<crate::model::dns_settings::GlueRecord>,

    /// The DNS provider of the registration.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub dns_provider: std::option::Option<crate::model::dns_settings::DnsProvider>,
}

impl DnsSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [glue_records][crate::model::DnsSettings::glue_records].
    pub fn set_glue_records<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::dns_settings::GlueRecord>,
    {
        use std::iter::Iterator;
        self.glue_records = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of `dns_provider`.
    pub fn set_dns_provider<
        T: std::convert::Into<std::option::Option<crate::model::dns_settings::DnsProvider>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.dns_provider = v.into();
        self
    }

    /// The value of [dns_provider][crate::model::DnsSettings::dns_provider]
    /// if it holds a `CustomDns`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_custom_dns(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::dns_settings::CustomDns>> {
        #[allow(unreachable_patterns)]
        self.dns_provider.as_ref().and_then(|v| match v {
            crate::model::dns_settings::DnsProvider::CustomDns(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [dns_provider][crate::model::DnsSettings::dns_provider]
    /// if it holds a `GoogleDomainsDns`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_google_domains_dns(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::dns_settings::GoogleDomainsDns>> {
        #[allow(unreachable_patterns)]
        self.dns_provider.as_ref().and_then(|v| match v {
            crate::model::dns_settings::DnsProvider::GoogleDomainsDns(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [dns_provider][crate::model::DnsSettings::dns_provider]
    /// to hold a `CustomDns`.
    ///
    /// Note that all the setters affecting `dns_provider` are
    /// mutually exclusive.
    pub fn set_custom_dns<
        T: std::convert::Into<std::boxed::Box<crate::model::dns_settings::CustomDns>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.dns_provider =
            std::option::Option::Some(crate::model::dns_settings::DnsProvider::CustomDns(v.into()));
        self
    }

    /// Sets the value of [dns_provider][crate::model::DnsSettings::dns_provider]
    /// to hold a `GoogleDomainsDns`.
    ///
    /// Note that all the setters affecting `dns_provider` are
    /// mutually exclusive.
    pub fn set_google_domains_dns<
        T: std::convert::Into<std::boxed::Box<crate::model::dns_settings::GoogleDomainsDns>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.dns_provider = std::option::Option::Some(
            crate::model::dns_settings::DnsProvider::GoogleDomainsDns(v.into()),
        );
        self
    }
}

impl wkt::message::Message for DnsSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.DnsSettings"
    }
}

/// Defines additional types related to DnsSettings
pub mod dns_settings {
    #[allow(unused_imports)]
    use super::*;

    /// Configuration for an arbitrary DNS provider.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct CustomDns {
        /// Required. A list of name servers that store the DNS zone for this domain. Each name
        /// server is a domain name, with Unicode domain names expressed in
        /// Punycode format.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub name_servers: std::vec::Vec<std::string::String>,

        /// The list of DS records for this domain, which are used to enable DNSSEC.
        /// The domain's DNS provider can provide the values to set here. If this
        /// field is empty, DNSSEC is disabled.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub ds_records: std::vec::Vec<crate::model::dns_settings::DsRecord>,
    }

    impl CustomDns {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [name_servers][crate::model::dns_settings::CustomDns::name_servers].
        pub fn set_name_servers<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.name_servers = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [ds_records][crate::model::dns_settings::CustomDns::ds_records].
        pub fn set_ds_records<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::dns_settings::DsRecord>,
        {
            use std::iter::Iterator;
            self.ds_records = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for CustomDns {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.domains.v1.DnsSettings.CustomDns"
        }
    }

    /// Configuration for using the free DNS zone provided by Google Domains as a
    /// `Registration`'s `dns_provider`. You cannot configure the DNS zone itself
    /// using the API. To configure the DNS zone, go to
    /// [Google Domains](https://domains.google/).
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct GoogleDomainsDns {
        /// Output only. A list of name servers that store the DNS zone for this domain. Each name
        /// server is a domain name, with Unicode domain names expressed in
        /// Punycode format. This field is automatically populated with the name
        /// servers assigned to the Google Domains DNS zone.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub name_servers: std::vec::Vec<std::string::String>,

        /// Required. The state of DS records for this domain. Used to enable or disable
        /// automatic DNSSEC.
        pub ds_state: crate::model::dns_settings::DsState,

        /// Output only. The list of DS records published for this domain. The list is
        /// automatically populated when `ds_state` is `DS_RECORDS_PUBLISHED`,
        /// otherwise it remains empty.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub ds_records: std::vec::Vec<crate::model::dns_settings::DsRecord>,
    }

    impl GoogleDomainsDns {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [ds_state][crate::model::dns_settings::GoogleDomainsDns::ds_state].
        pub fn set_ds_state<T: std::convert::Into<crate::model::dns_settings::DsState>>(
            mut self,
            v: T,
        ) -> Self {
            self.ds_state = v.into();
            self
        }

        /// Sets the value of [name_servers][crate::model::dns_settings::GoogleDomainsDns::name_servers].
        pub fn set_name_servers<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.name_servers = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [ds_records][crate::model::dns_settings::GoogleDomainsDns::ds_records].
        pub fn set_ds_records<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::dns_settings::DsRecord>,
        {
            use std::iter::Iterator;
            self.ds_records = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for GoogleDomainsDns {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.domains.v1.DnsSettings.GoogleDomainsDns"
        }
    }

    /// Defines a Delegation Signer (DS) record, which is needed to enable DNSSEC
    /// for a domain. It contains a digest (hash) of a DNSKEY record that must be
    /// present in the domain's DNS zone.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct DsRecord {
        /// The key tag of the record. Must be set in range 0 -- 65535.
        pub key_tag: i32,

        /// The algorithm used to generate the referenced DNSKEY.
        pub algorithm: crate::model::dns_settings::ds_record::Algorithm,

        /// The hash function used to generate the digest of the referenced DNSKEY.
        pub digest_type: crate::model::dns_settings::ds_record::DigestType,

        /// The digest generated from the referenced DNSKEY.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub digest: std::string::String,
    }

    impl DsRecord {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [key_tag][crate::model::dns_settings::DsRecord::key_tag].
        pub fn set_key_tag<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.key_tag = v.into();
            self
        }

        /// Sets the value of [algorithm][crate::model::dns_settings::DsRecord::algorithm].
        pub fn set_algorithm<
            T: std::convert::Into<crate::model::dns_settings::ds_record::Algorithm>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.algorithm = v.into();
            self
        }

        /// Sets the value of [digest_type][crate::model::dns_settings::DsRecord::digest_type].
        pub fn set_digest_type<
            T: std::convert::Into<crate::model::dns_settings::ds_record::DigestType>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.digest_type = v.into();
            self
        }

        /// Sets the value of [digest][crate::model::dns_settings::DsRecord::digest].
        pub fn set_digest<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.digest = v.into();
            self
        }
    }

    impl wkt::message::Message for DsRecord {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.domains.v1.DnsSettings.DsRecord"
        }
    }

    /// Defines additional types related to DsRecord
    pub mod ds_record {
        #[allow(unused_imports)]
        use super::*;

        /// List of algorithms used to create a DNSKEY. Certain
        /// algorithms are not supported for particular domains.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct Algorithm(i32);

        impl Algorithm {
            /// The algorithm is unspecified.
            pub const ALGORITHM_UNSPECIFIED: Algorithm = Algorithm::new(0);

            /// RSA/MD5. Cannot be used for new deployments.
            pub const RSAMD5: Algorithm = Algorithm::new(1);

            /// Diffie-Hellman. Cannot be used for new deployments.
            pub const DH: Algorithm = Algorithm::new(2);

            /// DSA/SHA1. Not recommended for new deployments.
            pub const DSA: Algorithm = Algorithm::new(3);

            /// ECC. Not recommended for new deployments.
            pub const ECC: Algorithm = Algorithm::new(4);

            /// RSA/SHA-1. Not recommended for new deployments.
            pub const RSASHA1: Algorithm = Algorithm::new(5);

            /// DSA-NSEC3-SHA1. Not recommended for new deployments.
            pub const DSANSEC3SHA1: Algorithm = Algorithm::new(6);

            /// RSA/SHA1-NSEC3-SHA1. Not recommended for new deployments.
            pub const RSASHA1NSEC3SHA1: Algorithm = Algorithm::new(7);

            /// RSA/SHA-256.
            pub const RSASHA256: Algorithm = Algorithm::new(8);

            /// RSA/SHA-512.
            pub const RSASHA512: Algorithm = Algorithm::new(10);

            /// GOST R 34.10-2001.
            pub const ECCGOST: Algorithm = Algorithm::new(12);

            /// ECDSA Curve P-256 with SHA-256.
            pub const ECDSAP256SHA256: Algorithm = Algorithm::new(13);

            /// ECDSA Curve P-384 with SHA-384.
            pub const ECDSAP384SHA384: Algorithm = Algorithm::new(14);

            /// Ed25519.
            pub const ED25519: Algorithm = Algorithm::new(15);

            /// Ed448.
            pub const ED448: Algorithm = Algorithm::new(16);

            /// Reserved for Indirect Keys. Cannot be used for new deployments.
            pub const INDIRECT: Algorithm = Algorithm::new(252);

            /// Private algorithm. Cannot be used for new deployments.
            pub const PRIVATEDNS: Algorithm = Algorithm::new(253);

            /// Private algorithm OID. Cannot be used for new deployments.
            pub const PRIVATEOID: Algorithm = Algorithm::new(254);

            /// Creates a new Algorithm instance.
            pub(crate) const fn new(value: i32) -> Self {
                Self(value)
            }

            /// Gets the enum value.
            pub fn value(&self) -> i32 {
                self.0
            }

            /// Gets the enum value as a string.
            pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
                match self.0 {
                    0 => std::borrow::Cow::Borrowed("ALGORITHM_UNSPECIFIED"),
                    1 => std::borrow::Cow::Borrowed("RSAMD5"),
                    2 => std::borrow::Cow::Borrowed("DH"),
                    3 => std::borrow::Cow::Borrowed("DSA"),
                    4 => std::borrow::Cow::Borrowed("ECC"),
                    5 => std::borrow::Cow::Borrowed("RSASHA1"),
                    6 => std::borrow::Cow::Borrowed("DSANSEC3SHA1"),
                    7 => std::borrow::Cow::Borrowed("RSASHA1NSEC3SHA1"),
                    8 => std::borrow::Cow::Borrowed("RSASHA256"),
                    10 => std::borrow::Cow::Borrowed("RSASHA512"),
                    12 => std::borrow::Cow::Borrowed("ECCGOST"),
                    13 => std::borrow::Cow::Borrowed("ECDSAP256SHA256"),
                    14 => std::borrow::Cow::Borrowed("ECDSAP384SHA384"),
                    15 => std::borrow::Cow::Borrowed("ED25519"),
                    16 => std::borrow::Cow::Borrowed("ED448"),
                    252 => std::borrow::Cow::Borrowed("INDIRECT"),
                    253 => std::borrow::Cow::Borrowed("PRIVATEDNS"),
                    254 => std::borrow::Cow::Borrowed("PRIVATEOID"),
                    _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
                }
            }

            /// Creates an enum value from the value name.
            pub fn from_str_name(name: &str) -> std::option::Option<Self> {
                match name {
                    "ALGORITHM_UNSPECIFIED" => {
                        std::option::Option::Some(Self::ALGORITHM_UNSPECIFIED)
                    }
                    "RSAMD5" => std::option::Option::Some(Self::RSAMD5),
                    "DH" => std::option::Option::Some(Self::DH),
                    "DSA" => std::option::Option::Some(Self::DSA),
                    "ECC" => std::option::Option::Some(Self::ECC),
                    "RSASHA1" => std::option::Option::Some(Self::RSASHA1),
                    "DSANSEC3SHA1" => std::option::Option::Some(Self::DSANSEC3SHA1),
                    "RSASHA1NSEC3SHA1" => std::option::Option::Some(Self::RSASHA1NSEC3SHA1),
                    "RSASHA256" => std::option::Option::Some(Self::RSASHA256),
                    "RSASHA512" => std::option::Option::Some(Self::RSASHA512),
                    "ECCGOST" => std::option::Option::Some(Self::ECCGOST),
                    "ECDSAP256SHA256" => std::option::Option::Some(Self::ECDSAP256SHA256),
                    "ECDSAP384SHA384" => std::option::Option::Some(Self::ECDSAP384SHA384),
                    "ED25519" => std::option::Option::Some(Self::ED25519),
                    "ED448" => std::option::Option::Some(Self::ED448),
                    "INDIRECT" => std::option::Option::Some(Self::INDIRECT),
                    "PRIVATEDNS" => std::option::Option::Some(Self::PRIVATEDNS),
                    "PRIVATEOID" => std::option::Option::Some(Self::PRIVATEOID),
                    _ => std::option::Option::None,
                }
            }
        }

        impl std::convert::From<i32> for Algorithm {
            fn from(value: i32) -> Self {
                Self::new(value)
            }
        }

        impl std::default::Default for Algorithm {
            fn default() -> Self {
                Self::new(0)
            }
        }

        /// List of hash functions that may have been used to generate a digest of a
        /// DNSKEY.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct DigestType(i32);

        impl DigestType {
            /// The DigestType is unspecified.
            pub const DIGEST_TYPE_UNSPECIFIED: DigestType = DigestType::new(0);

            /// SHA-1. Not recommended for new deployments.
            pub const SHA1: DigestType = DigestType::new(1);

            /// SHA-256.
            pub const SHA256: DigestType = DigestType::new(2);

            /// GOST R 34.11-94.
            pub const GOST3411: DigestType = DigestType::new(3);

            /// SHA-384.
            pub const SHA384: DigestType = DigestType::new(4);

            /// Creates a new DigestType instance.
            pub(crate) const fn new(value: i32) -> Self {
                Self(value)
            }

            /// Gets the enum value.
            pub fn value(&self) -> i32 {
                self.0
            }

            /// Gets the enum value as a string.
            pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
                match self.0 {
                    0 => std::borrow::Cow::Borrowed("DIGEST_TYPE_UNSPECIFIED"),
                    1 => std::borrow::Cow::Borrowed("SHA1"),
                    2 => std::borrow::Cow::Borrowed("SHA256"),
                    3 => std::borrow::Cow::Borrowed("GOST3411"),
                    4 => std::borrow::Cow::Borrowed("SHA384"),
                    _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
                }
            }

            /// Creates an enum value from the value name.
            pub fn from_str_name(name: &str) -> std::option::Option<Self> {
                match name {
                    "DIGEST_TYPE_UNSPECIFIED" => {
                        std::option::Option::Some(Self::DIGEST_TYPE_UNSPECIFIED)
                    }
                    "SHA1" => std::option::Option::Some(Self::SHA1),
                    "SHA256" => std::option::Option::Some(Self::SHA256),
                    "GOST3411" => std::option::Option::Some(Self::GOST3411),
                    "SHA384" => std::option::Option::Some(Self::SHA384),
                    _ => std::option::Option::None,
                }
            }
        }

        impl std::convert::From<i32> for DigestType {
            fn from(value: i32) -> Self {
                Self::new(value)
            }
        }

        impl std::default::Default for DigestType {
            fn default() -> Self {
                Self::new(0)
            }
        }
    }

    /// Defines a host on your domain that is a DNS name server for your domain
    /// and/or other domains. Glue records are a way of making the IP address of a
    /// name server known, even when it serves DNS queries for its parent domain.
    /// For example, when `ns.example.com` is a name server for `example.com`, the
    /// host `ns.example.com` must have a glue record to break the circular DNS
    /// reference.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct GlueRecord {
        /// Required. Domain name of the host in Punycode format.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub host_name: std::string::String,

        /// List of IPv4 addresses corresponding to this host in the standard decimal
        /// format (e.g. `198.51.100.1`). At least one of `ipv4_address` and
        /// `ipv6_address` must be set.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub ipv4_addresses: std::vec::Vec<std::string::String>,

        /// List of IPv6 addresses corresponding to this host in the standard
        /// hexadecimal format (e.g. `2001:db8::`). At least one of
        /// `ipv4_address` and `ipv6_address` must be set.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub ipv6_addresses: std::vec::Vec<std::string::String>,
    }

    impl GlueRecord {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [host_name][crate::model::dns_settings::GlueRecord::host_name].
        pub fn set_host_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.host_name = v.into();
            self
        }

        /// Sets the value of [ipv4_addresses][crate::model::dns_settings::GlueRecord::ipv4_addresses].
        pub fn set_ipv4_addresses<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.ipv4_addresses = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [ipv6_addresses][crate::model::dns_settings::GlueRecord::ipv6_addresses].
        pub fn set_ipv6_addresses<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.ipv6_addresses = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for GlueRecord {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.domains.v1.DnsSettings.GlueRecord"
        }
    }

    /// The publication state of DS records for a `Registration`.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct DsState(i32);

    impl DsState {
        /// DS state is unspecified.
        pub const DS_STATE_UNSPECIFIED: DsState = DsState::new(0);

        /// DNSSEC is disabled for this domain. No DS records for this domain are
        /// published in the parent DNS zone.
        pub const DS_RECORDS_UNPUBLISHED: DsState = DsState::new(1);

        /// DNSSEC is enabled for this domain. Appropriate DS records for this domain
        /// are published in the parent DNS zone. This option is valid only if the
        /// DNS zone referenced in the `Registration`'s `dns_provider` field is
        /// already DNSSEC-signed.
        pub const DS_RECORDS_PUBLISHED: DsState = DsState::new(2);

        /// Creates a new DsState instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("DS_STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("DS_RECORDS_UNPUBLISHED"),
                2 => std::borrow::Cow::Borrowed("DS_RECORDS_PUBLISHED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "DS_STATE_UNSPECIFIED" => std::option::Option::Some(Self::DS_STATE_UNSPECIFIED),
                "DS_RECORDS_UNPUBLISHED" => std::option::Option::Some(Self::DS_RECORDS_UNPUBLISHED),
                "DS_RECORDS_PUBLISHED" => std::option::Option::Some(Self::DS_RECORDS_PUBLISHED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for DsState {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for DsState {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// The DNS provider of the registration.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum DnsProvider {
        /// An arbitrary DNS provider identified by its name servers.
        CustomDns(std::boxed::Box<crate::model::dns_settings::CustomDns>),
        /// The free DNS zone provided by
        /// [Google Domains](https://domains.google/).
        GoogleDomainsDns(std::boxed::Box<crate::model::dns_settings::GoogleDomainsDns>),
    }
}

/// Defines the contact information associated with a `Registration`.
///
/// [ICANN](https://icann.org/) requires all domain names to have associated
/// contact information. The `registrant_contact` is considered the
/// domain's legal owner, and often the other contacts are identical.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ContactSettings {
    /// Required. Privacy setting for the contacts associated with the `Registration`.
    pub privacy: crate::model::ContactPrivacy,

    /// Required. The registrant contact for the `Registration`.
    ///
    /// *Caution: Anyone with access to this email address, phone number,
    /// and/or postal address can take control of the domain.*
    ///
    /// *Warning: For new `Registration`s, the registrant receives an email
    /// confirmation that they must complete within 15 days to avoid domain
    /// suspension.*
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub registrant_contact: std::option::Option<crate::model::contact_settings::Contact>,

    /// Required. The administrative contact for the `Registration`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub admin_contact: std::option::Option<crate::model::contact_settings::Contact>,

    /// Required. The technical contact for the `Registration`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub technical_contact: std::option::Option<crate::model::contact_settings::Contact>,
}

impl ContactSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [privacy][crate::model::ContactSettings::privacy].
    pub fn set_privacy<T: std::convert::Into<crate::model::ContactPrivacy>>(
        mut self,
        v: T,
    ) -> Self {
        self.privacy = v.into();
        self
    }

    /// Sets the value of [registrant_contact][crate::model::ContactSettings::registrant_contact].
    pub fn set_registrant_contact<
        T: std::convert::Into<std::option::Option<crate::model::contact_settings::Contact>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.registrant_contact = v.into();
        self
    }

    /// Sets the value of [admin_contact][crate::model::ContactSettings::admin_contact].
    pub fn set_admin_contact<
        T: std::convert::Into<std::option::Option<crate::model::contact_settings::Contact>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.admin_contact = v.into();
        self
    }

    /// Sets the value of [technical_contact][crate::model::ContactSettings::technical_contact].
    pub fn set_technical_contact<
        T: std::convert::Into<std::option::Option<crate::model::contact_settings::Contact>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.technical_contact = v.into();
        self
    }
}

impl wkt::message::Message for ContactSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.ContactSettings"
    }
}

/// Defines additional types related to ContactSettings
pub mod contact_settings {
    #[allow(unused_imports)]
    use super::*;

    /// Details required for a contact associated with a `Registration`.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Contact {
        /// Required. Postal address of the contact.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub postal_address: std::option::Option<gtype::model::PostalAddress>,

        /// Required. Email address of the contact.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub email: std::string::String,

        /// Required. Phone number of the contact in international format. For example,
        /// `"+1-800-555-0123"`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub phone_number: std::string::String,

        /// Fax number of the contact in international format. For example,
        /// `"+1-800-555-0123"`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub fax_number: std::string::String,
    }

    impl Contact {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [postal_address][crate::model::contact_settings::Contact::postal_address].
        pub fn set_postal_address<
            T: std::convert::Into<std::option::Option<gtype::model::PostalAddress>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.postal_address = v.into();
            self
        }

        /// Sets the value of [email][crate::model::contact_settings::Contact::email].
        pub fn set_email<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.email = v.into();
            self
        }

        /// Sets the value of [phone_number][crate::model::contact_settings::Contact::phone_number].
        pub fn set_phone_number<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.phone_number = v.into();
            self
        }

        /// Sets the value of [fax_number][crate::model::contact_settings::Contact::fax_number].
        pub fn set_fax_number<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.fax_number = v.into();
            self
        }
    }

    impl wkt::message::Message for Contact {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.domains.v1.ContactSettings.Contact"
        }
    }
}

/// Request for the `SearchDomains` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SearchDomainsRequest {
    /// Required. String used to search for available domain names.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub query: std::string::String,

    /// Required. The location. Must be in the format `projects/*/locations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub location: std::string::String,
}

impl SearchDomainsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [query][crate::model::SearchDomainsRequest::query].
    pub fn set_query<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query = v.into();
        self
    }

    /// Sets the value of [location][crate::model::SearchDomainsRequest::location].
    pub fn set_location<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.location = v.into();
        self
    }
}

impl wkt::message::Message for SearchDomainsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.SearchDomainsRequest"
    }
}

/// Response for the `SearchDomains` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SearchDomainsResponse {
    /// Results of the domain name search.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub register_parameters: std::vec::Vec<crate::model::RegisterParameters>,
}

impl SearchDomainsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [register_parameters][crate::model::SearchDomainsResponse::register_parameters].
    pub fn set_register_parameters<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::RegisterParameters>,
    {
        use std::iter::Iterator;
        self.register_parameters = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SearchDomainsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.SearchDomainsResponse"
    }
}

/// Request for the `RetrieveRegisterParameters` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RetrieveRegisterParametersRequest {
    /// Required. The domain name. Unicode domain names must be expressed in Punycode format.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub domain_name: std::string::String,

    /// Required. The location. Must be in the format `projects/*/locations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub location: std::string::String,
}

impl RetrieveRegisterParametersRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [domain_name][crate::model::RetrieveRegisterParametersRequest::domain_name].
    pub fn set_domain_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.domain_name = v.into();
        self
    }

    /// Sets the value of [location][crate::model::RetrieveRegisterParametersRequest::location].
    pub fn set_location<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.location = v.into();
        self
    }
}

impl wkt::message::Message for RetrieveRegisterParametersRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.RetrieveRegisterParametersRequest"
    }
}

/// Response for the `RetrieveRegisterParameters` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RetrieveRegisterParametersResponse {
    /// Parameters to use when calling the `RegisterDomain` method.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub register_parameters: std::option::Option<crate::model::RegisterParameters>,
}

impl RetrieveRegisterParametersResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [register_parameters][crate::model::RetrieveRegisterParametersResponse::register_parameters].
    pub fn set_register_parameters<
        T: std::convert::Into<std::option::Option<crate::model::RegisterParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.register_parameters = v.into();
        self
    }
}

impl wkt::message::Message for RetrieveRegisterParametersResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.RetrieveRegisterParametersResponse"
    }
}

/// Request for the `RegisterDomain` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RegisterDomainRequest {
    /// Required. The parent resource of the `Registration`. Must be in the
    /// format `projects/*/locations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The complete `Registration` resource to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub registration: std::option::Option<crate::model::Registration>,

    /// The list of domain notices that you acknowledge. Call
    /// `RetrieveRegisterParameters` to see the notices that need acknowledgement.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub domain_notices: std::vec::Vec<crate::model::DomainNotice>,

    /// The list of contact notices that the caller acknowledges. The notices
    /// needed here depend on the values specified in
    /// `registration.contact_settings`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub contact_notices: std::vec::Vec<crate::model::ContactNotice>,

    /// Required. Yearly price to register or renew the domain.
    /// The value that should be put here can be obtained from
    /// RetrieveRegisterParameters or SearchDomains calls.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub yearly_price: std::option::Option<gtype::model::Money>,

    /// When true, only validation is performed, without actually registering
    /// the domain. Follows:
    /// <https://cloud.google.com/apis/design/design_patterns#request_validation>
    pub validate_only: bool,
}

impl RegisterDomainRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::RegisterDomainRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [registration][crate::model::RegisterDomainRequest::registration].
    pub fn set_registration<
        T: std::convert::Into<std::option::Option<crate::model::Registration>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.registration = v.into();
        self
    }

    /// Sets the value of [yearly_price][crate::model::RegisterDomainRequest::yearly_price].
    pub fn set_yearly_price<T: std::convert::Into<std::option::Option<gtype::model::Money>>>(
        mut self,
        v: T,
    ) -> Self {
        self.yearly_price = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::RegisterDomainRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }

    /// Sets the value of [domain_notices][crate::model::RegisterDomainRequest::domain_notices].
    pub fn set_domain_notices<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::DomainNotice>,
    {
        use std::iter::Iterator;
        self.domain_notices = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [contact_notices][crate::model::RegisterDomainRequest::contact_notices].
    pub fn set_contact_notices<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ContactNotice>,
    {
        use std::iter::Iterator;
        self.contact_notices = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for RegisterDomainRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.RegisterDomainRequest"
    }
}

/// Request for the `RetrieveTransferParameters` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RetrieveTransferParametersRequest {
    /// Required. The domain name. Unicode domain names must be expressed in Punycode format.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub domain_name: std::string::String,

    /// Required. The location. Must be in the format `projects/*/locations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub location: std::string::String,
}

impl RetrieveTransferParametersRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [domain_name][crate::model::RetrieveTransferParametersRequest::domain_name].
    pub fn set_domain_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.domain_name = v.into();
        self
    }

    /// Sets the value of [location][crate::model::RetrieveTransferParametersRequest::location].
    pub fn set_location<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.location = v.into();
        self
    }
}

impl wkt::message::Message for RetrieveTransferParametersRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.RetrieveTransferParametersRequest"
    }
}

/// Response for the `RetrieveTransferParameters` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RetrieveTransferParametersResponse {
    /// Parameters to use when calling the `TransferDomain` method.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub transfer_parameters: std::option::Option<crate::model::TransferParameters>,
}

impl RetrieveTransferParametersResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [transfer_parameters][crate::model::RetrieveTransferParametersResponse::transfer_parameters].
    pub fn set_transfer_parameters<
        T: std::convert::Into<std::option::Option<crate::model::TransferParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.transfer_parameters = v.into();
        self
    }
}

impl wkt::message::Message for RetrieveTransferParametersResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.RetrieveTransferParametersResponse"
    }
}

/// Request for the `TransferDomain` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TransferDomainRequest {
    /// Required. The parent resource of the `Registration`. Must be in the
    /// format `projects/*/locations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The complete `Registration` resource to be created.
    ///
    /// You can leave `registration.dns_settings` unset to import the
    /// domain's current DNS configuration from its current registrar. Use this
    /// option only if you are sure that the domain's current DNS service
    /// does not cease upon transfer, as is often the case for DNS services
    /// provided for free by the registrar.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub registration: std::option::Option<crate::model::Registration>,

    /// The list of contact notices that you acknowledge. The notices
    /// needed here depend on the values specified in
    /// `registration.contact_settings`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub contact_notices: std::vec::Vec<crate::model::ContactNotice>,

    /// Required. Acknowledgement of the price to transfer or renew the domain for one year.
    /// Call `RetrieveTransferParameters` to obtain the price, which you must
    /// acknowledge.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub yearly_price: std::option::Option<gtype::model::Money>,

    /// The domain's transfer authorization code. You can obtain this from the
    /// domain's current registrar.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub authorization_code: std::option::Option<crate::model::AuthorizationCode>,

    /// Validate the request without actually transferring the domain.
    pub validate_only: bool,
}

impl TransferDomainRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::TransferDomainRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [registration][crate::model::TransferDomainRequest::registration].
    pub fn set_registration<
        T: std::convert::Into<std::option::Option<crate::model::Registration>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.registration = v.into();
        self
    }

    /// Sets the value of [yearly_price][crate::model::TransferDomainRequest::yearly_price].
    pub fn set_yearly_price<T: std::convert::Into<std::option::Option<gtype::model::Money>>>(
        mut self,
        v: T,
    ) -> Self {
        self.yearly_price = v.into();
        self
    }

    /// Sets the value of [authorization_code][crate::model::TransferDomainRequest::authorization_code].
    pub fn set_authorization_code<
        T: std::convert::Into<std::option::Option<crate::model::AuthorizationCode>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.authorization_code = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::TransferDomainRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }

    /// Sets the value of [contact_notices][crate::model::TransferDomainRequest::contact_notices].
    pub fn set_contact_notices<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ContactNotice>,
    {
        use std::iter::Iterator;
        self.contact_notices = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TransferDomainRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.TransferDomainRequest"
    }
}

/// Request for the `ListRegistrations` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListRegistrationsRequest {
    /// Required. The project and location from which to list `Registration`s, specified in
    /// the format `projects/*/locations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Maximum number of results to return.
    pub page_size: i32,

    /// When set to the `next_page_token` from a prior response, provides the next
    /// page of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filter expression to restrict the `Registration`s returned.
    ///
    /// The expression must specify the field name, a comparison operator, and the
    /// value that you want to use for filtering. The value must be a string, a
    /// number, a boolean, or an enum value. The comparison operator should be one
    /// of =, !=, >, <, >=, <=, or : for prefix or wildcard matches.
    ///
    /// For example, to filter to a specific domain name, use an expression like
    /// `domainName="example.com"`. You can also check for the existence of a
    /// field; for example, to find domains using custom DNS settings, use an
    /// expression like `dnsSettings.customDns:*`.
    ///
    /// You can also create compound filters by combining expressions with the
    /// `AND` and `OR` operators. For example, to find domains that are suspended
    /// or have specific issues flagged, use an expression like
    /// `(state=SUSPENDED) OR (issue:*)`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,
}

impl ListRegistrationsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListRegistrationsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListRegistrationsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListRegistrationsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListRegistrationsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }
}

impl wkt::message::Message for ListRegistrationsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.ListRegistrationsRequest"
    }
}

/// Response for the `ListRegistrations` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListRegistrationsResponse {
    /// A list of `Registration`s.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub registrations: std::vec::Vec<crate::model::Registration>,

    /// When present, there are more results to retrieve. Set `page_token` to this
    /// value on a subsequent call to get the next page of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListRegistrationsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListRegistrationsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [registrations][crate::model::ListRegistrationsResponse::registrations].
    pub fn set_registrations<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Registration>,
    {
        use std::iter::Iterator;
        self.registrations = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListRegistrationsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.ListRegistrationsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListRegistrationsResponse {
    type PageItem = crate::model::Registration;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.registrations
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request for the `GetRegistration` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetRegistrationRequest {
    /// Required. The name of the `Registration` to get, in the format
    /// `projects/*/locations/*/registrations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetRegistrationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetRegistrationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetRegistrationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.GetRegistrationRequest"
    }
}

/// Request for the `UpdateRegistration` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateRegistrationRequest {
    /// Fields of the `Registration` to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub registration: std::option::Option<crate::model::Registration>,

    /// Required. The field mask describing which fields to update as a comma-separated list.
    /// For example, if only the labels are being updated, the `update_mask` is
    /// `"labels"`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateRegistrationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [registration][crate::model::UpdateRegistrationRequest::registration].
    pub fn set_registration<
        T: std::convert::Into<std::option::Option<crate::model::Registration>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.registration = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateRegistrationRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateRegistrationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.UpdateRegistrationRequest"
    }
}

/// Request for the `ConfigureManagementSettings` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ConfigureManagementSettingsRequest {
    /// Required. The name of the `Registration` whose management settings are being updated,
    /// in the format `projects/*/locations/*/registrations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub registration: std::string::String,

    /// Fields of the `ManagementSettings` to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub management_settings: std::option::Option<crate::model::ManagementSettings>,

    /// Required. The field mask describing which fields to update as a comma-separated list.
    /// For example, if only the transfer lock is being updated, the `update_mask`
    /// is `"transfer_lock_state"`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl ConfigureManagementSettingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [registration][crate::model::ConfigureManagementSettingsRequest::registration].
    pub fn set_registration<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.registration = v.into();
        self
    }

    /// Sets the value of [management_settings][crate::model::ConfigureManagementSettingsRequest::management_settings].
    pub fn set_management_settings<
        T: std::convert::Into<std::option::Option<crate::model::ManagementSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.management_settings = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::ConfigureManagementSettingsRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for ConfigureManagementSettingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.ConfigureManagementSettingsRequest"
    }
}

/// Request for the `ConfigureDnsSettings` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ConfigureDnsSettingsRequest {
    /// Required. The name of the `Registration` whose DNS settings are being updated,
    /// in the format `projects/*/locations/*/registrations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub registration: std::string::String,

    /// Fields of the `DnsSettings` to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub dns_settings: std::option::Option<crate::model::DnsSettings>,

    /// Required. The field mask describing which fields to update as a comma-separated list.
    /// For example, if only the name servers are being updated for an existing
    /// Custom DNS configuration, the `update_mask` is
    /// `"custom_dns.name_servers"`.
    ///
    /// When changing the DNS provider from one type to another, pass the new
    /// provider's field name as part of the field mask. For example, when changing
    /// from a Google Domains DNS configuration to a Custom DNS configuration, the
    /// `update_mask` is `"custom_dns"`. //
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Validate the request without actually updating the DNS settings.
    pub validate_only: bool,
}

impl ConfigureDnsSettingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [registration][crate::model::ConfigureDnsSettingsRequest::registration].
    pub fn set_registration<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.registration = v.into();
        self
    }

    /// Sets the value of [dns_settings][crate::model::ConfigureDnsSettingsRequest::dns_settings].
    pub fn set_dns_settings<
        T: std::convert::Into<std::option::Option<crate::model::DnsSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.dns_settings = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::ConfigureDnsSettingsRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::ConfigureDnsSettingsRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }
}

impl wkt::message::Message for ConfigureDnsSettingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.ConfigureDnsSettingsRequest"
    }
}

/// Request for the `ConfigureContactSettings` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ConfigureContactSettingsRequest {
    /// Required. The name of the `Registration` whose contact settings are being updated,
    /// in the format `projects/*/locations/*/registrations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub registration: std::string::String,

    /// Fields of the `ContactSettings` to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub contact_settings: std::option::Option<crate::model::ContactSettings>,

    /// Required. The field mask describing which fields to update as a comma-separated list.
    /// For example, if only the registrant contact is being updated, the
    /// `update_mask` is `"registrant_contact"`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// The list of contact notices that the caller acknowledges. The notices
    /// needed here depend on the values specified in `contact_settings`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub contact_notices: std::vec::Vec<crate::model::ContactNotice>,

    /// Validate the request without actually updating the contact settings.
    pub validate_only: bool,
}

impl ConfigureContactSettingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [registration][crate::model::ConfigureContactSettingsRequest::registration].
    pub fn set_registration<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.registration = v.into();
        self
    }

    /// Sets the value of [contact_settings][crate::model::ConfigureContactSettingsRequest::contact_settings].
    pub fn set_contact_settings<
        T: std::convert::Into<std::option::Option<crate::model::ContactSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.contact_settings = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::ConfigureContactSettingsRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [validate_only][crate::model::ConfigureContactSettingsRequest::validate_only].
    pub fn set_validate_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.validate_only = v.into();
        self
    }

    /// Sets the value of [contact_notices][crate::model::ConfigureContactSettingsRequest::contact_notices].
    pub fn set_contact_notices<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ContactNotice>,
    {
        use std::iter::Iterator;
        self.contact_notices = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ConfigureContactSettingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.ConfigureContactSettingsRequest"
    }
}

/// Request for the `ExportRegistration` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportRegistrationRequest {
    /// Required. The name of the `Registration` to export,
    /// in the format `projects/*/locations/*/registrations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl ExportRegistrationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ExportRegistrationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for ExportRegistrationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.ExportRegistrationRequest"
    }
}

/// Request for the `DeleteRegistration` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteRegistrationRequest {
    /// Required. The name of the `Registration` to delete,
    /// in the format `projects/*/locations/*/registrations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteRegistrationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteRegistrationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteRegistrationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.DeleteRegistrationRequest"
    }
}

/// Request for the `RetrieveAuthorizationCode` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RetrieveAuthorizationCodeRequest {
    /// Required. The name of the `Registration` whose authorization code is being retrieved,
    /// in the format `projects/*/locations/*/registrations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub registration: std::string::String,
}

impl RetrieveAuthorizationCodeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [registration][crate::model::RetrieveAuthorizationCodeRequest::registration].
    pub fn set_registration<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.registration = v.into();
        self
    }
}

impl wkt::message::Message for RetrieveAuthorizationCodeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.RetrieveAuthorizationCodeRequest"
    }
}

/// Request for the `ResetAuthorizationCode` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ResetAuthorizationCodeRequest {
    /// Required. The name of the `Registration` whose authorization code is being reset,
    /// in the format `projects/*/locations/*/registrations/*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub registration: std::string::String,
}

impl ResetAuthorizationCodeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [registration][crate::model::ResetAuthorizationCodeRequest::registration].
    pub fn set_registration<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.registration = v.into();
        self
    }
}

impl wkt::message::Message for ResetAuthorizationCodeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.ResetAuthorizationCodeRequest"
    }
}

/// Parameters required to register a new domain.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RegisterParameters {
    /// The domain name. Unicode domain names are expressed in Punycode format.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub domain_name: std::string::String,

    /// Indicates whether the domain is available for registration. This value is
    /// accurate when obtained by calling `RetrieveRegisterParameters`, but is
    /// approximate when obtained by calling `SearchDomains`.
    pub availability: crate::model::register_parameters::Availability,

    /// Contact privacy options that the domain supports.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub supported_privacy: std::vec::Vec<crate::model::ContactPrivacy>,

    /// Notices about special properties of the domain.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub domain_notices: std::vec::Vec<crate::model::DomainNotice>,

    /// Price to register or renew the domain for one year.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub yearly_price: std::option::Option<gtype::model::Money>,
}

impl RegisterParameters {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [domain_name][crate::model::RegisterParameters::domain_name].
    pub fn set_domain_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.domain_name = v.into();
        self
    }

    /// Sets the value of [availability][crate::model::RegisterParameters::availability].
    pub fn set_availability<
        T: std::convert::Into<crate::model::register_parameters::Availability>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.availability = v.into();
        self
    }

    /// Sets the value of [yearly_price][crate::model::RegisterParameters::yearly_price].
    pub fn set_yearly_price<T: std::convert::Into<std::option::Option<gtype::model::Money>>>(
        mut self,
        v: T,
    ) -> Self {
        self.yearly_price = v.into();
        self
    }

    /// Sets the value of [supported_privacy][crate::model::RegisterParameters::supported_privacy].
    pub fn set_supported_privacy<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ContactPrivacy>,
    {
        use std::iter::Iterator;
        self.supported_privacy = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [domain_notices][crate::model::RegisterParameters::domain_notices].
    pub fn set_domain_notices<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::DomainNotice>,
    {
        use std::iter::Iterator;
        self.domain_notices = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for RegisterParameters {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.RegisterParameters"
    }
}

/// Defines additional types related to RegisterParameters
pub mod register_parameters {
    #[allow(unused_imports)]
    use super::*;

    /// Possible availability states of a domain name.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Availability(i32);

    impl Availability {
        /// The availability is unspecified.
        pub const AVAILABILITY_UNSPECIFIED: Availability = Availability::new(0);

        /// The domain is available for registration.
        pub const AVAILABLE: Availability = Availability::new(1);

        /// The domain is not available for registration. Generally this means it is
        /// already registered to another party.
        pub const UNAVAILABLE: Availability = Availability::new(2);

        /// The domain is not currently supported by Cloud Domains, but may
        /// be available elsewhere.
        pub const UNSUPPORTED: Availability = Availability::new(3);

        /// Cloud Domains is unable to determine domain availability, generally
        /// due to system maintenance at the domain name registry.
        pub const UNKNOWN: Availability = Availability::new(4);

        /// Creates a new Availability instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("AVAILABILITY_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("AVAILABLE"),
                2 => std::borrow::Cow::Borrowed("UNAVAILABLE"),
                3 => std::borrow::Cow::Borrowed("UNSUPPORTED"),
                4 => std::borrow::Cow::Borrowed("UNKNOWN"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "AVAILABILITY_UNSPECIFIED" => {
                    std::option::Option::Some(Self::AVAILABILITY_UNSPECIFIED)
                }
                "AVAILABLE" => std::option::Option::Some(Self::AVAILABLE),
                "UNAVAILABLE" => std::option::Option::Some(Self::UNAVAILABLE),
                "UNSUPPORTED" => std::option::Option::Some(Self::UNSUPPORTED),
                "UNKNOWN" => std::option::Option::Some(Self::UNKNOWN),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for Availability {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for Availability {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Parameters required to transfer a domain from another registrar.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TransferParameters {
    /// The domain name. Unicode domain names are expressed in Punycode format.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub domain_name: std::string::String,

    /// The registrar that currently manages the domain.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub current_registrar: std::string::String,

    /// The name servers that currently store the configuration of the domain.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub name_servers: std::vec::Vec<std::string::String>,

    /// Indicates whether the domain is protected by a transfer lock. For a
    /// transfer to succeed, this must show `UNLOCKED`. To unlock a domain,
    /// go to its current registrar.
    pub transfer_lock_state: crate::model::TransferLockState,

    /// Contact privacy options that the domain supports.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub supported_privacy: std::vec::Vec<crate::model::ContactPrivacy>,

    /// Price to transfer or renew the domain for one year.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub yearly_price: std::option::Option<gtype::model::Money>,
}

impl TransferParameters {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [domain_name][crate::model::TransferParameters::domain_name].
    pub fn set_domain_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.domain_name = v.into();
        self
    }

    /// Sets the value of [current_registrar][crate::model::TransferParameters::current_registrar].
    pub fn set_current_registrar<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.current_registrar = v.into();
        self
    }

    /// Sets the value of [transfer_lock_state][crate::model::TransferParameters::transfer_lock_state].
    pub fn set_transfer_lock_state<T: std::convert::Into<crate::model::TransferLockState>>(
        mut self,
        v: T,
    ) -> Self {
        self.transfer_lock_state = v.into();
        self
    }

    /// Sets the value of [yearly_price][crate::model::TransferParameters::yearly_price].
    pub fn set_yearly_price<T: std::convert::Into<std::option::Option<gtype::model::Money>>>(
        mut self,
        v: T,
    ) -> Self {
        self.yearly_price = v.into();
        self
    }

    /// Sets the value of [name_servers][crate::model::TransferParameters::name_servers].
    pub fn set_name_servers<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.name_servers = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [supported_privacy][crate::model::TransferParameters::supported_privacy].
    pub fn set_supported_privacy<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ContactPrivacy>,
    {
        use std::iter::Iterator;
        self.supported_privacy = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TransferParameters {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.TransferParameters"
    }
}

/// Defines an authorization code.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AuthorizationCode {
    /// The Authorization Code in ASCII. It can be used to transfer the domain
    /// to or from another registrar.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub code: std::string::String,
}

impl AuthorizationCode {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [code][crate::model::AuthorizationCode::code].
    pub fn set_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.code = v.into();
        self
    }
}

impl wkt::message::Message for AuthorizationCode {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.AuthorizationCode"
    }
}

/// Represents the metadata of the long-running operation. Output only.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OperationMetadata {
    /// The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_detail: std::string::String,

    /// API version used to start the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,
}

impl OperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::OperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::OperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::OperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_detail][crate::model::OperationMetadata::status_detail].
    pub fn set_status_detail<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_detail = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::OperationMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }
}

impl wkt::message::Message for OperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.domains.v1.OperationMetadata"
    }
}

/// Defines a set of possible contact privacy settings for a `Registration`.
///
/// [ICANN](https://icann.org/) maintains the WHOIS database, a publicly
/// accessible mapping from domain name to contact information, and requires that
/// each domain name have an entry. Choose from these options to control how much
/// information in your `ContactSettings` is published.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct ContactPrivacy(i32);

impl ContactPrivacy {
    /// The contact privacy settings are undefined.
    pub const CONTACT_PRIVACY_UNSPECIFIED: ContactPrivacy = ContactPrivacy::new(0);

    /// All the data from `ContactSettings` is publicly available. When setting
    /// this option, you must also provide a
    /// `PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT` in the `contact_notices` field of the
    /// request.
    pub const PUBLIC_CONTACT_DATA: ContactPrivacy = ContactPrivacy::new(1);

    /// None of the data from `ContactSettings` is publicly available. Instead,
    /// proxy contact data is published for your domain. Email sent to the proxy
    /// email address is forwarded to the registrant's email address. Cloud Domains
    /// provides this privacy proxy service at no additional cost.
    pub const PRIVATE_CONTACT_DATA: ContactPrivacy = ContactPrivacy::new(2);

    /// Some data from `ContactSettings` is publicly available. The actual
    /// information redacted depends on the domain. For details, see [the
    /// registration privacy
    /// article](https://support.google.com/domains/answer/3251242).
    pub const REDACTED_CONTACT_DATA: ContactPrivacy = ContactPrivacy::new(3);

    /// Creates a new ContactPrivacy instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("CONTACT_PRIVACY_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("PUBLIC_CONTACT_DATA"),
            2 => std::borrow::Cow::Borrowed("PRIVATE_CONTACT_DATA"),
            3 => std::borrow::Cow::Borrowed("REDACTED_CONTACT_DATA"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "CONTACT_PRIVACY_UNSPECIFIED" => {
                std::option::Option::Some(Self::CONTACT_PRIVACY_UNSPECIFIED)
            }
            "PUBLIC_CONTACT_DATA" => std::option::Option::Some(Self::PUBLIC_CONTACT_DATA),
            "PRIVATE_CONTACT_DATA" => std::option::Option::Some(Self::PRIVATE_CONTACT_DATA),
            "REDACTED_CONTACT_DATA" => std::option::Option::Some(Self::REDACTED_CONTACT_DATA),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for ContactPrivacy {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for ContactPrivacy {
    fn default() -> Self {
        Self::new(0)
    }
}

/// Notices about special properties of certain domains.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct DomainNotice(i32);

impl DomainNotice {
    /// The notice is undefined.
    pub const DOMAIN_NOTICE_UNSPECIFIED: DomainNotice = DomainNotice::new(0);

    /// Indicates that the domain is preloaded on the HTTP Strict Transport
    /// Security list in browsers. Serving a website on such domain requires
    /// an SSL certificate. For details, see
    /// [how to get an SSL
    /// certificate](https://support.google.com/domains/answer/7638036).
    pub const HSTS_PRELOADED: DomainNotice = DomainNotice::new(1);

    /// Creates a new DomainNotice instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("DOMAIN_NOTICE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("HSTS_PRELOADED"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "DOMAIN_NOTICE_UNSPECIFIED" => {
                std::option::Option::Some(Self::DOMAIN_NOTICE_UNSPECIFIED)
            }
            "HSTS_PRELOADED" => std::option::Option::Some(Self::HSTS_PRELOADED),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for DomainNotice {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for DomainNotice {
    fn default() -> Self {
        Self::new(0)
    }
}

/// Notices related to contact information.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct ContactNotice(i32);

impl ContactNotice {
    /// The notice is undefined.
    pub const CONTACT_NOTICE_UNSPECIFIED: ContactNotice = ContactNotice::new(0);

    /// Required when setting the `privacy` field of `ContactSettings` to
    /// `PUBLIC_CONTACT_DATA`, which exposes contact data publicly.
    pub const PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT: ContactNotice = ContactNotice::new(1);

    /// Creates a new ContactNotice instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("CONTACT_NOTICE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "CONTACT_NOTICE_UNSPECIFIED" => {
                std::option::Option::Some(Self::CONTACT_NOTICE_UNSPECIFIED)
            }
            "PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT" => {
                std::option::Option::Some(Self::PUBLIC_CONTACT_DATA_ACKNOWLEDGEMENT)
            }
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for ContactNotice {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for ContactNotice {
    fn default() -> Self {
        Self::new(0)
    }
}

/// Possible states of a `Registration`'s transfer lock.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct TransferLockState(i32);

impl TransferLockState {
    /// The state is unspecified.
    pub const TRANSFER_LOCK_STATE_UNSPECIFIED: TransferLockState = TransferLockState::new(0);

    /// The domain is unlocked and can be transferred to another registrar.
    pub const UNLOCKED: TransferLockState = TransferLockState::new(1);

    /// The domain is locked and cannot be transferred to another registrar.
    pub const LOCKED: TransferLockState = TransferLockState::new(2);

    /// Creates a new TransferLockState instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("TRANSFER_LOCK_STATE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("UNLOCKED"),
            2 => std::borrow::Cow::Borrowed("LOCKED"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "TRANSFER_LOCK_STATE_UNSPECIFIED" => {
                std::option::Option::Some(Self::TRANSFER_LOCK_STATE_UNSPECIFIED)
            }
            "UNLOCKED" => std::option::Option::Some(Self::UNLOCKED),
            "LOCKED" => std::option::Option::Some(Self::LOCKED),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for TransferLockState {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for TransferLockState {
    fn default() -> Self {
        Self::new(0)
    }
}
