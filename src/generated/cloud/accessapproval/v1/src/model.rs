// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate lazy_static;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Home office and physical location of the principal.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AccessLocations {
    /// The "home office" location of the principal. A two-letter country code
    /// (ISO 3166-1 alpha-2), such as "US", "DE" or "GB" or a region code. In some
    /// limited situations Google systems may refer refer to a region code instead
    /// of a country code.
    /// Possible Region Codes:
    ///
    /// * ASI: Asia
    /// * EUR: Europe
    /// * OCE: Oceania
    /// * AFR: Africa
    /// * NAM: North America
    /// * SAM: South America
    /// * ANT: Antarctica
    /// * ANY: Any location
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub principal_office_country: std::string::String,

    /// Physical location of the principal at the time of the access. A
    /// two-letter country code (ISO 3166-1 alpha-2), such as "US", "DE" or "GB" or
    /// a region code. In some limited situations Google systems may refer refer to
    /// a region code instead of a country code.
    /// Possible Region Codes:
    ///
    /// * ASI: Asia
    /// * EUR: Europe
    /// * OCE: Oceania
    /// * AFR: Africa
    /// * NAM: North America
    /// * SAM: South America
    /// * ANT: Antarctica
    /// * ANY: Any location
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub principal_physical_location_country: std::string::String,
}

impl AccessLocations {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [principal_office_country][crate::model::AccessLocations::principal_office_country].
    pub fn set_principal_office_country<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.principal_office_country = v.into();
        self
    }

    /// Sets the value of [principal_physical_location_country][crate::model::AccessLocations::principal_physical_location_country].
    pub fn set_principal_physical_location_country<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.principal_physical_location_country = v.into();
        self
    }
}

impl wkt::message::Message for AccessLocations {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.AccessLocations"
    }
}

#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AccessReason {
    /// Type of access justification.
    #[serde(rename = "type")]
    pub r#type: crate::model::access_reason::Type,

    /// More detail about certain reason types. See comments for each type above.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub detail: std::string::String,
}

impl AccessReason {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [r#type][crate::model::AccessReason::type].
    pub fn set_type<T: std::convert::Into<crate::model::access_reason::Type>>(
        mut self,
        v: T,
    ) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [detail][crate::model::AccessReason::detail].
    pub fn set_detail<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.detail = v.into();
        self
    }
}

impl wkt::message::Message for AccessReason {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.AccessReason"
    }
}

/// Defines additional types related to AccessReason
pub mod access_reason {
    #[allow(unused_imports)]
    use super::*;

    /// Type of access justification.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Type(i32);

    impl Type {
        /// Default value for proto, shouldn't be used.
        pub const TYPE_UNSPECIFIED: Type = Type::new(0);

        /// Customer made a request or raised an issue that required the principal to
        /// access customer data. `detail` is of the form ("#####" is the issue ID):
        ///
        /// * "Feedback Report: #####"
        /// * "Case Number: #####"
        /// * "Case ID: #####"
        /// * "E-PIN Reference: #####"
        /// * "Google-#####"
        /// * "T-#####"
        pub const CUSTOMER_INITIATED_SUPPORT: Type = Type::new(1);

        /// The principal accessed customer data in order to diagnose or resolve a
        /// suspected issue in services. Often this access is used to confirm that
        /// customers are not affected by a suspected service issue or to remediate a
        /// reversible system issue.
        pub const GOOGLE_INITIATED_SERVICE: Type = Type::new(2);

        /// Google initiated service for security, fraud, abuse, or compliance
        /// purposes.
        pub const GOOGLE_INITIATED_REVIEW: Type = Type::new(3);

        /// The principal was compelled to access customer data in order to respond
        /// to a legal third party data request or process, including legal processes
        /// from customers themselves.
        pub const THIRD_PARTY_DATA_REQUEST: Type = Type::new(4);

        /// The principal accessed customer data in order to diagnose or resolve a
        /// suspected issue in services or a known outage.
        pub const GOOGLE_RESPONSE_TO_PRODUCTION_ALERT: Type = Type::new(5);

        /// Creates a new Type instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("TYPE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CUSTOMER_INITIATED_SUPPORT"),
                2 => std::borrow::Cow::Borrowed("GOOGLE_INITIATED_SERVICE"),
                3 => std::borrow::Cow::Borrowed("GOOGLE_INITIATED_REVIEW"),
                4 => std::borrow::Cow::Borrowed("THIRD_PARTY_DATA_REQUEST"),
                5 => std::borrow::Cow::Borrowed("GOOGLE_RESPONSE_TO_PRODUCTION_ALERT"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "TYPE_UNSPECIFIED" => std::option::Option::Some(Self::TYPE_UNSPECIFIED),
                "CUSTOMER_INITIATED_SUPPORT" => {
                    std::option::Option::Some(Self::CUSTOMER_INITIATED_SUPPORT)
                }
                "GOOGLE_INITIATED_SERVICE" => {
                    std::option::Option::Some(Self::GOOGLE_INITIATED_SERVICE)
                }
                "GOOGLE_INITIATED_REVIEW" => {
                    std::option::Option::Some(Self::GOOGLE_INITIATED_REVIEW)
                }
                "THIRD_PARTY_DATA_REQUEST" => {
                    std::option::Option::Some(Self::THIRD_PARTY_DATA_REQUEST)
                }
                "GOOGLE_RESPONSE_TO_PRODUCTION_ALERT" => {
                    std::option::Option::Some(Self::GOOGLE_RESPONSE_TO_PRODUCTION_ALERT)
                }
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for Type {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for Type {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Information about the digital signature of the resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SignatureInfo {
    /// The digital signature.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub signature: ::bytes::Bytes,

    /// How this signature may be verified.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub verification_info: std::option::Option<crate::model::signature_info::VerificationInfo>,
}

impl SignatureInfo {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [signature][crate::model::SignatureInfo::signature].
    pub fn set_signature<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.signature = v.into();
        self
    }

    /// Sets the value of `verification_info`.
    pub fn set_verification_info<
        T: std::convert::Into<std::option::Option<crate::model::signature_info::VerificationInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.verification_info = v.into();
        self
    }

    /// The value of [verification_info][crate::model::SignatureInfo::verification_info]
    /// if it holds a `GooglePublicKeyPem`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_google_public_key_pem(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.verification_info.as_ref().and_then(|v| match v {
            crate::model::signature_info::VerificationInfo::GooglePublicKeyPem(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [verification_info][crate::model::SignatureInfo::verification_info]
    /// if it holds a `CustomerKmsKeyVersion`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_customer_kms_key_version(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.verification_info.as_ref().and_then(|v| match v {
            crate::model::signature_info::VerificationInfo::CustomerKmsKeyVersion(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [verification_info][crate::model::SignatureInfo::verification_info]
    /// to hold a `GooglePublicKeyPem`.
    ///
    /// Note that all the setters affecting `verification_info` are
    /// mutually exclusive.
    pub fn set_google_public_key_pem<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.verification_info = std::option::Option::Some(
            crate::model::signature_info::VerificationInfo::GooglePublicKeyPem(v.into()),
        );
        self
    }

    /// Sets the value of [verification_info][crate::model::SignatureInfo::verification_info]
    /// to hold a `CustomerKmsKeyVersion`.
    ///
    /// Note that all the setters affecting `verification_info` are
    /// mutually exclusive.
    pub fn set_customer_kms_key_version<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.verification_info = std::option::Option::Some(
            crate::model::signature_info::VerificationInfo::CustomerKmsKeyVersion(v.into()),
        );
        self
    }
}

impl wkt::message::Message for SignatureInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.SignatureInfo"
    }
}

/// Defines additional types related to SignatureInfo
pub mod signature_info {
    #[allow(unused_imports)]
    use super::*;

    /// How this signature may be verified.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum VerificationInfo {
        /// The public key for the Google default signing, encoded in PEM format. The
        /// signature was created using a private key which may be verified using
        /// this public key.
        GooglePublicKeyPem(std::string::String),
        /// The resource name of the customer CryptoKeyVersion used for signing.
        CustomerKmsKeyVersion(std::string::String),
    }
}

/// A decision that has been made to approve access to a resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ApproveDecision {
    /// The time at which approval was granted.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub approve_time: std::option::Option<wkt::Timestamp>,

    /// The time at which the approval expires.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub expire_time: std::option::Option<wkt::Timestamp>,

    /// If set, denotes the timestamp at which the approval is invalidated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub invalidate_time: std::option::Option<wkt::Timestamp>,

    /// The signature for the ApprovalRequest and details on how it was signed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub signature_info: std::option::Option<crate::model::SignatureInfo>,

    /// True when the request has been auto-approved.
    pub auto_approved: bool,
}

impl ApproveDecision {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [approve_time][crate::model::ApproveDecision::approve_time].
    pub fn set_approve_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.approve_time = v.into();
        self
    }

    /// Sets the value of [expire_time][crate::model::ApproveDecision::expire_time].
    pub fn set_expire_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.expire_time = v.into();
        self
    }

    /// Sets the value of [invalidate_time][crate::model::ApproveDecision::invalidate_time].
    pub fn set_invalidate_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.invalidate_time = v.into();
        self
    }

    /// Sets the value of [signature_info][crate::model::ApproveDecision::signature_info].
    pub fn set_signature_info<
        T: std::convert::Into<std::option::Option<crate::model::SignatureInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.signature_info = v.into();
        self
    }

    /// Sets the value of [auto_approved][crate::model::ApproveDecision::auto_approved].
    pub fn set_auto_approved<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.auto_approved = v.into();
        self
    }
}

impl wkt::message::Message for ApproveDecision {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.ApproveDecision"
    }
}

/// A decision that has been made to dismiss an approval request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DismissDecision {
    /// The time at which the approval request was dismissed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub dismiss_time: std::option::Option<wkt::Timestamp>,

    /// This field will be true if the ApprovalRequest was implicitly dismissed due
    /// to inaction by the access approval approvers (the request is not acted
    /// on by the approvers before the exiration time).
    pub implicit: bool,
}

impl DismissDecision {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [dismiss_time][crate::model::DismissDecision::dismiss_time].
    pub fn set_dismiss_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.dismiss_time = v.into();
        self
    }

    /// Sets the value of [implicit][crate::model::DismissDecision::implicit].
    pub fn set_implicit<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.implicit = v.into();
        self
    }
}

impl wkt::message::Message for DismissDecision {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.DismissDecision"
    }
}

/// The properties associated with the resource of the request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ResourceProperties {
    /// Whether an approval will exclude the descendants of the resource being
    /// requested.
    pub excludes_descendants: bool,
}

impl ResourceProperties {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [excludes_descendants][crate::model::ResourceProperties::excludes_descendants].
    pub fn set_excludes_descendants<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.excludes_descendants = v.into();
        self
    }
}

impl wkt::message::Message for ResourceProperties {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.ResourceProperties"
    }
}

/// A request for the customer to approve access to a resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ApprovalRequest {
    /// The resource name of the request. Format is
    /// "{projects|folders|organizations}/{id}/approvalRequests/{approval_request}".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The resource for which approval is being requested. The format of the
    /// resource name is defined at
    /// <https://cloud.google.com/apis/design/resource_names>. The resource name here
    /// may either be a "full" resource name (e.g.
    /// "//library.googleapis.com/shelves/shelf1/books/book2") or a "relative"
    /// resource name (e.g. "shelves/shelf1/books/book2") as described in the
    /// resource name specification.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub requested_resource_name: std::string::String,

    /// Properties related to the resource represented by requested_resource_name.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub requested_resource_properties: std::option::Option<crate::model::ResourceProperties>,

    /// The justification for which approval is being requested.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub requested_reason: std::option::Option<crate::model::AccessReason>,

    /// The locations for which approval is being requested.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub requested_locations: std::option::Option<crate::model::AccessLocations>,

    /// The time at which approval was requested.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub request_time: std::option::Option<wkt::Timestamp>,

    /// The requested expiration for the approval. If the request is approved,
    /// access will be granted from the time of approval until the expiration time.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub requested_expiration: std::option::Option<wkt::Timestamp>,

    /// The current decision on the approval request.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub decision: std::option::Option<crate::model::approval_request::Decision>,
}

impl ApprovalRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ApprovalRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [requested_resource_name][crate::model::ApprovalRequest::requested_resource_name].
    pub fn set_requested_resource_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.requested_resource_name = v.into();
        self
    }

    /// Sets the value of [requested_resource_properties][crate::model::ApprovalRequest::requested_resource_properties].
    pub fn set_requested_resource_properties<
        T: std::convert::Into<std::option::Option<crate::model::ResourceProperties>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.requested_resource_properties = v.into();
        self
    }

    /// Sets the value of [requested_reason][crate::model::ApprovalRequest::requested_reason].
    pub fn set_requested_reason<
        T: std::convert::Into<std::option::Option<crate::model::AccessReason>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.requested_reason = v.into();
        self
    }

    /// Sets the value of [requested_locations][crate::model::ApprovalRequest::requested_locations].
    pub fn set_requested_locations<
        T: std::convert::Into<std::option::Option<crate::model::AccessLocations>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.requested_locations = v.into();
        self
    }

    /// Sets the value of [request_time][crate::model::ApprovalRequest::request_time].
    pub fn set_request_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.request_time = v.into();
        self
    }

    /// Sets the value of [requested_expiration][crate::model::ApprovalRequest::requested_expiration].
    pub fn set_requested_expiration<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.requested_expiration = v.into();
        self
    }

    /// Sets the value of `decision`.
    pub fn set_decision<
        T: std::convert::Into<std::option::Option<crate::model::approval_request::Decision>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.decision = v.into();
        self
    }

    /// The value of [decision][crate::model::ApprovalRequest::decision]
    /// if it holds a `Approve`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_approve(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::ApproveDecision>> {
        #[allow(unreachable_patterns)]
        self.decision.as_ref().and_then(|v| match v {
            crate::model::approval_request::Decision::Approve(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [decision][crate::model::ApprovalRequest::decision]
    /// if it holds a `Dismiss`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_dismiss(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::DismissDecision>> {
        #[allow(unreachable_patterns)]
        self.decision.as_ref().and_then(|v| match v {
            crate::model::approval_request::Decision::Dismiss(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [decision][crate::model::ApprovalRequest::decision]
    /// to hold a `Approve`.
    ///
    /// Note that all the setters affecting `decision` are
    /// mutually exclusive.
    pub fn set_approve<T: std::convert::Into<std::boxed::Box<crate::model::ApproveDecision>>>(
        mut self,
        v: T,
    ) -> Self {
        self.decision =
            std::option::Option::Some(crate::model::approval_request::Decision::Approve(v.into()));
        self
    }

    /// Sets the value of [decision][crate::model::ApprovalRequest::decision]
    /// to hold a `Dismiss`.
    ///
    /// Note that all the setters affecting `decision` are
    /// mutually exclusive.
    pub fn set_dismiss<T: std::convert::Into<std::boxed::Box<crate::model::DismissDecision>>>(
        mut self,
        v: T,
    ) -> Self {
        self.decision =
            std::option::Option::Some(crate::model::approval_request::Decision::Dismiss(v.into()));
        self
    }
}

impl wkt::message::Message for ApprovalRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.ApprovalRequest"
    }
}

/// Defines additional types related to ApprovalRequest
pub mod approval_request {
    #[allow(unused_imports)]
    use super::*;

    /// The current decision on the approval request.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Decision {
        /// Access was approved.
        Approve(std::boxed::Box<crate::model::ApproveDecision>),
        /// The request was dismissed.
        Dismiss(std::boxed::Box<crate::model::DismissDecision>),
    }
}

/// Represents the enrollment of a cloud resource into a specific service.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EnrolledService {
    /// The product for which Access Approval will be enrolled. Allowed values are
    /// listed below (case-sensitive):
    ///
    /// * all
    /// * GA
    /// * App Engine
    /// * BigQuery
    /// * Cloud Bigtable
    /// * Cloud Key Management Service
    /// * Compute Engine
    /// * Cloud Dataflow
    /// * Cloud Dataproc
    /// * Cloud DLP
    /// * Cloud EKM
    /// * Cloud HSM
    /// * Cloud Identity and Access Management
    /// * Cloud Logging
    /// * Cloud Pub/Sub
    /// * Cloud Spanner
    /// * Cloud SQL
    /// * Cloud Storage
    /// * Google Kubernetes Engine
    /// * Organization Policy Serivice
    /// * Persistent Disk
    /// * Resource Manager
    /// * Secret Manager
    /// * Speaker ID
    ///
    /// Note: These values are supported as input for legacy purposes, but will not
    /// be returned from the API.
    ///
    /// * all
    /// * ga-only
    /// * appengine.googleapis.com
    /// * bigquery.googleapis.com
    /// * bigtable.googleapis.com
    /// * container.googleapis.com
    /// * cloudkms.googleapis.com
    /// * cloudresourcemanager.googleapis.com
    /// * cloudsql.googleapis.com
    /// * compute.googleapis.com
    /// * dataflow.googleapis.com
    /// * dataproc.googleapis.com
    /// * dlp.googleapis.com
    /// * iam.googleapis.com
    /// * logging.googleapis.com
    /// * orgpolicy.googleapis.com
    /// * pubsub.googleapis.com
    /// * spanner.googleapis.com
    /// * secretmanager.googleapis.com
    /// * speakerid.googleapis.com
    /// * storage.googleapis.com
    ///
    /// Calls to UpdateAccessApprovalSettings using 'all' or any of the
    /// XXX.googleapis.com will be translated to the associated product name
    /// ('all', 'App Engine', etc.).
    ///
    /// Note: 'all' will enroll the resource in all products supported at both 'GA'
    /// and 'Preview' levels.
    ///
    /// More information about levels of support is available at
    /// <https://cloud.google.com/access-approval/docs/supported-services>
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub cloud_product: std::string::String,

    /// The enrollment level of the service.
    pub enrollment_level: crate::model::EnrollmentLevel,
}

impl EnrolledService {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [cloud_product][crate::model::EnrolledService::cloud_product].
    pub fn set_cloud_product<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.cloud_product = v.into();
        self
    }

    /// Sets the value of [enrollment_level][crate::model::EnrolledService::enrollment_level].
    pub fn set_enrollment_level<T: std::convert::Into<crate::model::EnrollmentLevel>>(
        mut self,
        v: T,
    ) -> Self {
        self.enrollment_level = v.into();
        self
    }
}

impl wkt::message::Message for EnrolledService {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.EnrolledService"
    }
}

/// Settings on a Project/Folder/Organization related to Access Approval.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AccessApprovalSettings {
    /// The resource name of the settings. Format is one of:
    ///
    /// * "projects/{project}/accessApprovalSettings"
    /// * "folders/{folder}/accessApprovalSettings"
    /// * "organizations/{organization}/accessApprovalSettings"
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// A list of email addresses to which notifications relating to approval
    /// requests should be sent. Notifications relating to a resource will be sent
    /// to all emails in the settings of ancestor resources of that resource. A
    /// maximum of 50 email addresses are allowed.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub notification_emails: std::vec::Vec<std::string::String>,

    /// A list of Google Cloud Services for which the given resource has Access
    /// Approval enrolled. Access requests for the resource given by name against
    /// any of these services contained here will be required to have explicit
    /// approval. If name refers to an organization, enrollment can be done for
    /// individual services. If name refers to a folder or project, enrollment can
    /// only be done on an all or nothing basis.
    ///
    /// If a cloud_product is repeated in this list, the first entry will be
    /// honored and all following entries will be discarded. A maximum of 10
    /// enrolled services will be enforced, to be expanded as the set of supported
    /// services is expanded.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub enrolled_services: std::vec::Vec<crate::model::EnrolledService>,

    /// Output only. This field is read only (not settable via
    /// UpdateAccessApprovalSettings method). If the field is true, that
    /// indicates that at least one service is enrolled for Access Approval in one
    /// or more ancestors of the Project or Folder (this field will always be
    /// unset for the organization since organizations do not have ancestors).
    pub enrolled_ancestor: bool,

    /// The asymmetric crypto key version to use for signing approval requests.
    /// Empty active_key_version indicates that a Google-managed key should be used
    /// for signing. This property will be ignored if set by an ancestor of this
    /// resource, and new non-empty values may not be set.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub active_key_version: std::string::String,

    /// Output only. This field is read only (not settable via UpdateAccessApprovalSettings
    /// method). If the field is true, that indicates that an ancestor of this
    /// Project or Folder has set active_key_version (this field will always be
    /// unset for the organization since organizations do not have ancestors).
    pub ancestor_has_active_key_version: bool,

    /// Output only. This field is read only (not settable via UpdateAccessApprovalSettings
    /// method). If the field is true, that indicates that there is some
    /// configuration issue with the active_key_version configured at this level in
    /// the resource hierarchy (e.g. it doesn't exist or the Access Approval
    /// service account doesn't have the correct permissions on it, etc.) This key
    /// version is not necessarily the effective key version at this level, as key
    /// versions are inherited top-down.
    pub invalid_key_version: bool,
}

impl AccessApprovalSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::AccessApprovalSettings::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [enrolled_ancestor][crate::model::AccessApprovalSettings::enrolled_ancestor].
    pub fn set_enrolled_ancestor<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enrolled_ancestor = v.into();
        self
    }

    /// Sets the value of [active_key_version][crate::model::AccessApprovalSettings::active_key_version].
    pub fn set_active_key_version<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.active_key_version = v.into();
        self
    }

    /// Sets the value of [ancestor_has_active_key_version][crate::model::AccessApprovalSettings::ancestor_has_active_key_version].
    pub fn set_ancestor_has_active_key_version<T: std::convert::Into<bool>>(
        mut self,
        v: T,
    ) -> Self {
        self.ancestor_has_active_key_version = v.into();
        self
    }

    /// Sets the value of [invalid_key_version][crate::model::AccessApprovalSettings::invalid_key_version].
    pub fn set_invalid_key_version<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.invalid_key_version = v.into();
        self
    }

    /// Sets the value of [notification_emails][crate::model::AccessApprovalSettings::notification_emails].
    pub fn set_notification_emails<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.notification_emails = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [enrolled_services][crate::model::AccessApprovalSettings::enrolled_services].
    pub fn set_enrolled_services<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EnrolledService>,
    {
        use std::iter::Iterator;
        self.enrolled_services = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for AccessApprovalSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.AccessApprovalSettings"
    }
}

/// Access Approval service account related to a project/folder/organization.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AccessApprovalServiceAccount {
    /// The resource name of the Access Approval service account. Format is one of:
    ///
    /// * "projects/{project}/serviceAccount"
    /// * "folders/{folder}/serviceAccount"
    /// * "organizations/{organization}/serviceAccount"
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Email address of the service account.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub account_email: std::string::String,
}

impl AccessApprovalServiceAccount {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::AccessApprovalServiceAccount::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [account_email][crate::model::AccessApprovalServiceAccount::account_email].
    pub fn set_account_email<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.account_email = v.into();
        self
    }
}

impl wkt::message::Message for AccessApprovalServiceAccount {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.AccessApprovalServiceAccount"
    }
}

/// Request to list approval requests.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListApprovalRequestsMessage {
    /// The parent resource. This may be "projects/{project}",
    /// "folders/{folder}", or "organizations/{organization}".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// A filter on the type of approval requests to retrieve. Must be one of the
    /// following values:
    ///
    /// * [not set]: Requests that are pending or have active approvals.
    /// * ALL: All requests.
    /// * PENDING: Only pending requests.
    /// * ACTIVE: Only active (i.e. currently approved) requests.
    /// * DISMISSED: Only requests that have been dismissed, or requests that
    ///   are not approved and past expiration.
    /// * EXPIRED: Only requests that have been approved, and the approval has
    ///   expired.
    /// * HISTORY: Active, dismissed and expired requests.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Requested page size.
    pub page_size: i32,

    /// A token identifying the page of results to return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListApprovalRequestsMessage {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListApprovalRequestsMessage::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListApprovalRequestsMessage::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListApprovalRequestsMessage::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListApprovalRequestsMessage::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListApprovalRequestsMessage {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.ListApprovalRequestsMessage"
    }
}

/// Response to listing of ApprovalRequest objects.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListApprovalRequestsResponse {
    /// Approval request details.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub approval_requests: std::vec::Vec<crate::model::ApprovalRequest>,

    /// Token to retrieve the next page of results, or empty if there are no more.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListApprovalRequestsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListApprovalRequestsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [approval_requests][crate::model::ListApprovalRequestsResponse::approval_requests].
    pub fn set_approval_requests<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ApprovalRequest>,
    {
        use std::iter::Iterator;
        self.approval_requests = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListApprovalRequestsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.ListApprovalRequestsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListApprovalRequestsResponse {
    type PageItem = crate::model::ApprovalRequest;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.approval_requests
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request to get an approval request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetApprovalRequestMessage {
    /// The name of the approval request to retrieve.
    /// Format:
    /// "{projects|folders|organizations}/{id}/approvalRequests/{approval_request}"
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetApprovalRequestMessage {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetApprovalRequestMessage::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetApprovalRequestMessage {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.GetApprovalRequestMessage"
    }
}

/// Request to approve an ApprovalRequest.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ApproveApprovalRequestMessage {
    /// Name of the approval request to approve.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The expiration time of this approval.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub expire_time: std::option::Option<wkt::Timestamp>,
}

impl ApproveApprovalRequestMessage {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ApproveApprovalRequestMessage::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [expire_time][crate::model::ApproveApprovalRequestMessage::expire_time].
    pub fn set_expire_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.expire_time = v.into();
        self
    }
}

impl wkt::message::Message for ApproveApprovalRequestMessage {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.ApproveApprovalRequestMessage"
    }
}

/// Request to dismiss an approval request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DismissApprovalRequestMessage {
    /// Name of the ApprovalRequest to dismiss.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DismissApprovalRequestMessage {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DismissApprovalRequestMessage::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DismissApprovalRequestMessage {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.DismissApprovalRequestMessage"
    }
}

/// Request to invalidate an existing approval.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InvalidateApprovalRequestMessage {
    /// Name of the ApprovalRequest to invalidate.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl InvalidateApprovalRequestMessage {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::InvalidateApprovalRequestMessage::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for InvalidateApprovalRequestMessage {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.InvalidateApprovalRequestMessage"
    }
}

/// Request to get access approval settings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetAccessApprovalSettingsMessage {
    /// The name of the AccessApprovalSettings to retrieve.
    /// Format: "{projects|folders|organizations}/{id}/accessApprovalSettings"
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetAccessApprovalSettingsMessage {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetAccessApprovalSettingsMessage::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetAccessApprovalSettingsMessage {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.GetAccessApprovalSettingsMessage"
    }
}

/// Request to update access approval settings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateAccessApprovalSettingsMessage {
    /// The new AccessApprovalSettings.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub settings: std::option::Option<crate::model::AccessApprovalSettings>,

    /// The update mask applies to the settings. Only the top level fields of
    /// AccessApprovalSettings (notification_emails & enrolled_services) are
    /// supported. For each field, if it is included, the currently stored value
    /// will be entirely overwritten with the value of the field passed in this
    /// request.
    ///
    /// For the `FieldMask` definition, see
    /// <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask>
    /// If this field is left unset, only the notification_emails field will be
    /// updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateAccessApprovalSettingsMessage {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [settings][crate::model::UpdateAccessApprovalSettingsMessage::settings].
    pub fn set_settings<
        T: std::convert::Into<std::option::Option<crate::model::AccessApprovalSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.settings = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateAccessApprovalSettingsMessage::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateAccessApprovalSettingsMessage {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.UpdateAccessApprovalSettingsMessage"
    }
}

/// Request to delete access approval settings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteAccessApprovalSettingsMessage {
    /// Name of the AccessApprovalSettings to delete.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteAccessApprovalSettingsMessage {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteAccessApprovalSettingsMessage::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteAccessApprovalSettingsMessage {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.DeleteAccessApprovalSettingsMessage"
    }
}

/// Request to get an Access Approval service account.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetAccessApprovalServiceAccountMessage {
    /// Name of the AccessApprovalServiceAccount to retrieve.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetAccessApprovalServiceAccountMessage {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetAccessApprovalServiceAccountMessage::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetAccessApprovalServiceAccountMessage {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.accessapproval.v1.GetAccessApprovalServiceAccountMessage"
    }
}

/// Represents the type of enrollment for a given service to Access Approval.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct EnrollmentLevel(i32);

impl EnrollmentLevel {
    /// Default value for proto, shouldn't be used.
    pub const ENROLLMENT_LEVEL_UNSPECIFIED: EnrollmentLevel = EnrollmentLevel::new(0);

    /// Service is enrolled in Access Approval for all requests
    pub const BLOCK_ALL: EnrollmentLevel = EnrollmentLevel::new(1);

    /// Creates a new EnrollmentLevel instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("ENROLLMENT_LEVEL_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("BLOCK_ALL"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "ENROLLMENT_LEVEL_UNSPECIFIED" => {
                std::option::Option::Some(Self::ENROLLMENT_LEVEL_UNSPECIFIED)
            }
            "BLOCK_ALL" => std::option::Option::Some(Self::BLOCK_ALL),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for EnrollmentLevel {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for EnrollmentLevel {
    fn default() -> Self {
        Self::new(0)
    }
}
