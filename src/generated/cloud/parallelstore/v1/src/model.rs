// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate lazy_static;
extern crate location;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// A Parallelstore instance.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Instance {
    /// Identifier. The resource name of the instance, in the format
    /// `projects/{project}/locations/{location}/instances/{instance_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. The description of the instance. 2048 characters or less.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. The instance state.
    pub state: crate::model::instance::State,

    /// Output only. The time when the instance was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time when the instance was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. Cloud Labels are a flexible and lightweight mechanism for
    /// organizing cloud resources into groups that reflect a customer's
    /// organizational needs and deployment strategies. See
    /// <https://cloud.google.com/resource-manager/docs/labels-overview> for details.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Required. Immutable. The instance's storage capacity in Gibibytes (GiB).
    /// Allowed values are between 12000 and 100000, in multiples of 4000; e.g.,
    /// 12000, 16000, 20000, ...
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub capacity_gib: i64,

    /// Output only. The version of DAOS software running in the instance.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub daos_version: std::string::String,

    /// Output only. A list of IPv4 addresses used for client side configuration.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub access_points: std::vec::Vec<std::string::String>,

    /// Optional. Immutable. The name of the Compute Engine
    /// [VPC network](https://cloud.google.com/vpc/docs/vpc) to which the
    /// instance is connected.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub network: std::string::String,

    /// Optional. Immutable. The ID of the IP address range being used by the
    /// instance's VPC network. See [Configure a VPC
    /// network](https://cloud.google.com/parallelstore/docs/vpc#create_and_configure_the_vpc).
    /// If no ID is provided, all ranges are considered.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub reserved_ip_range: std::string::String,

    /// Output only. Immutable. The ID of the IP address range being used by the
    /// instance's VPC network. This field is populated by the service and contains
    /// the value currently used by the service.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub effective_reserved_ip_range: std::string::String,

    /// Optional. Stripe level for files. Allowed values are:
    ///
    /// * `FILE_STRIPE_LEVEL_MIN`: offers the best performance for small size
    ///   files.
    /// * `FILE_STRIPE_LEVEL_BALANCED`: balances performance for workloads
    ///   involving a mix of small and large files.
    /// * `FILE_STRIPE_LEVEL_MAX`: higher throughput performance for larger files.
    pub file_stripe_level: crate::model::FileStripeLevel,

    /// Optional. Stripe level for directories. Allowed values are:
    ///
    /// * `DIRECTORY_STRIPE_LEVEL_MIN`: recommended when directories contain a
    ///   small number of files.
    /// * `DIRECTORY_STRIPE_LEVEL_BALANCED`: balances performance for workloads
    ///   involving a mix of small and large directories.
    /// * `DIRECTORY_STRIPE_LEVEL_MAX`: recommended for directories with a large
    ///   number of files.
    pub directory_stripe_level: crate::model::DirectoryStripeLevel,
}

impl Instance {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Instance::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Instance::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Instance::state].
    pub fn set_state<T: std::convert::Into<crate::model::instance::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Instance::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Instance::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [capacity_gib][crate::model::Instance::capacity_gib].
    pub fn set_capacity_gib<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.capacity_gib = v.into();
        self
    }

    /// Sets the value of [daos_version][crate::model::Instance::daos_version].
    pub fn set_daos_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.daos_version = v.into();
        self
    }

    /// Sets the value of [network][crate::model::Instance::network].
    pub fn set_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.network = v.into();
        self
    }

    /// Sets the value of [reserved_ip_range][crate::model::Instance::reserved_ip_range].
    pub fn set_reserved_ip_range<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.reserved_ip_range = v.into();
        self
    }

    /// Sets the value of [effective_reserved_ip_range][crate::model::Instance::effective_reserved_ip_range].
    pub fn set_effective_reserved_ip_range<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.effective_reserved_ip_range = v.into();
        self
    }

    /// Sets the value of [file_stripe_level][crate::model::Instance::file_stripe_level].
    pub fn set_file_stripe_level<T: std::convert::Into<crate::model::FileStripeLevel>>(
        mut self,
        v: T,
    ) -> Self {
        self.file_stripe_level = v.into();
        self
    }

    /// Sets the value of [directory_stripe_level][crate::model::Instance::directory_stripe_level].
    pub fn set_directory_stripe_level<T: std::convert::Into<crate::model::DirectoryStripeLevel>>(
        mut self,
        v: T,
    ) -> Self {
        self.directory_stripe_level = v.into();
        self
    }

    /// Sets the value of [access_points][crate::model::Instance::access_points].
    pub fn set_access_points<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.access_points = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::Instance::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Instance {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.Instance"
    }
}

/// Defines additional types related to Instance
pub mod instance {
    #[allow(unused_imports)]
    use super::*;

    /// The possible states of a Parallelstore instance.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(std::borrow::Cow<'static, str>);

    impl State {
        /// Creates a new State instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [State](State)
    pub mod state {
        use super::State;

        /// Not set.
        pub const STATE_UNSPECIFIED: State = State::new("STATE_UNSPECIFIED");

        /// The instance is being created.
        pub const CREATING: State = State::new("CREATING");

        /// The instance is available for use.
        pub const ACTIVE: State = State::new("ACTIVE");

        /// The instance is being deleted.
        pub const DELETING: State = State::new("DELETING");

        /// The instance is not usable.
        pub const FAILED: State = State::new("FAILED");

        /// The instance is being upgraded.
        pub const UPGRADING: State = State::new("UPGRADING");
    }

    impl std::convert::From<std::string::String> for State {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// List instances request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListInstancesRequest {
    /// Required. The project and location for which to retrieve instance
    /// information, in the format `projects/{project_id}/locations/{location}`.
    ///
    /// To retrieve instance information for all locations, use "-" as the value of
    /// `{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, the server will pick an appropriate default.
    pub page_size: i32,

    /// Optional. A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Filtering results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Hint for how to order the results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListInstancesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListInstancesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListInstancesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListInstancesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListInstancesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListInstancesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListInstancesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.ListInstancesRequest"
    }
}

/// Response from
/// [ListInstances][google.cloud.parallelstore.v1.Parallelstore.ListInstances].
///
/// [google.cloud.parallelstore.v1.Parallelstore.ListInstances]: crate::client::Parallelstore::list_instances
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListInstancesResponse {
    /// The list of Parallelstore instances.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub instances: std::vec::Vec<crate::model::Instance>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListInstancesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListInstancesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [instances][crate::model::ListInstancesResponse::instances].
    pub fn set_instances<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Instance>,
    {
        use std::iter::Iterator;
        self.instances = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListInstancesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListInstancesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.ListInstancesResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListInstancesResponse {
    type PageItem = crate::model::Instance;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.instances
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Get an instance's details.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetInstanceRequest {
    /// Required. The instance resource name, in the format
    /// `projects/{project_id}/locations/{location}/instances/{instance_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetInstanceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetInstanceRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetInstanceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.GetInstanceRequest"
    }
}

/// Create a new Parallelstore instance.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateInstanceRequest {
    /// Required. The instance's project and location, in the format
    /// `projects/{project}/locations/{location}`.
    /// Locations map to Google Cloud zones; for example, `us-west1-b`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The name of the Parallelstore instance.
    ///
    /// * Must contain only lowercase letters, numbers, and hyphens.
    /// * Must start with a letter.
    /// * Must be between 1-63 characters.
    /// * Must end with a number or a letter.
    /// * Must be unique within the customer project / location
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub instance_id: std::string::String,

    /// Required. The instance to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub instance: std::option::Option<crate::model::Instance>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and t
    /// he request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateInstanceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateInstanceRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [instance_id][crate::model::CreateInstanceRequest::instance_id].
    pub fn set_instance_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.instance_id = v.into();
        self
    }

    /// Sets the value of [instance][crate::model::CreateInstanceRequest::instance].
    pub fn set_instance<T: std::convert::Into<std::option::Option<crate::model::Instance>>>(
        mut self,
        v: T,
    ) -> Self {
        self.instance = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateInstanceRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateInstanceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.CreateInstanceRequest"
    }
}

/// Update an instance.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateInstanceRequest {
    /// Required. Mask of fields to update. Field mask is used to specify the
    /// fields to be overwritten in the Instance resource by the update. At least
    /// one path must be supplied in this field. The fields specified in the
    /// update_mask are relative to the resource, not the full request.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The instance to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub instance: std::option::Option<crate::model::Instance>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and t
    /// he request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl UpdateInstanceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateInstanceRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [instance][crate::model::UpdateInstanceRequest::instance].
    pub fn set_instance<T: std::convert::Into<std::option::Option<crate::model::Instance>>>(
        mut self,
        v: T,
    ) -> Self {
        self.instance = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateInstanceRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateInstanceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.UpdateInstanceRequest"
    }
}

/// Delete an instance.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteInstanceRequest {
    /// Required. Name of the resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and t
    /// he request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl DeleteInstanceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteInstanceRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteInstanceRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteInstanceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.DeleteInstanceRequest"
    }
}

/// Long-running operation metadata.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Output only. Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Output only. Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_message: std::string::String,

    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have been cancelled successfully
    /// have [Operation.error][google.longrunning.Operation.error] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    ///
    /// [google.longrunning.Operation.error]: longrunning::model::Operation::result
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub requested_cancellation: bool,

    /// Output only. API version used to start the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,
}

impl OperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::OperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::OperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::OperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_message][crate::model::OperationMetadata::status_message].
    pub fn set_status_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_message = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::OperationMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::OperationMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }
}

impl wkt::message::Message for OperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.OperationMetadata"
    }
}

/// Cloud Storage as the source of a data transfer.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SourceGcsBucket {
    /// Required. URI to a Cloud Storage bucket in the format:
    /// `gs://<bucket_name>/<path_inside_bucket>`. The path inside the bucket is
    /// optional.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,
}

impl SourceGcsBucket {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [uri][crate::model::SourceGcsBucket::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }
}

impl wkt::message::Message for SourceGcsBucket {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.SourceGcsBucket"
    }
}

/// Cloud Storage as the destination of a data transfer.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DestinationGcsBucket {
    /// Required. URI to a Cloud Storage bucket in the format:
    /// `gs://<bucket_name>/<path_inside_bucket>`. The path inside the bucket is
    /// optional.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,
}

impl DestinationGcsBucket {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [uri][crate::model::DestinationGcsBucket::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }
}

impl wkt::message::Message for DestinationGcsBucket {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.DestinationGcsBucket"
    }
}

/// Parallelstore as the source of a data transfer.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SourceParallelstore {
    /// Optional. Root directory path to the Paralellstore filesystem, starting
    /// with `/`. Defaults to `/` if unset.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub path: std::string::String,
}

impl SourceParallelstore {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [path][crate::model::SourceParallelstore::path].
    pub fn set_path<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.path = v.into();
        self
    }
}

impl wkt::message::Message for SourceParallelstore {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.SourceParallelstore"
    }
}

/// Parallelstore as the destination of a data transfer.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DestinationParallelstore {
    /// Optional. Root directory path to the Paralellstore filesystem, starting
    /// with `/`. Defaults to `/` if unset.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub path: std::string::String,
}

impl DestinationParallelstore {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [path][crate::model::DestinationParallelstore::path].
    pub fn set_path<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.path = v.into();
        self
    }
}

impl wkt::message::Message for DestinationParallelstore {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.DestinationParallelstore"
    }
}

/// Import data from Cloud Storage into a Parallelstore instance.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportDataRequest {
    /// Required. Name of the resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and t
    /// he request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. User-specified service account credentials to be used when
    /// performing the transfer.
    ///
    /// Use one of the following formats:
    ///
    /// * `{EMAIL_ADDRESS_OR_UNIQUE_ID}`
    /// * `projects/{PROJECT_ID_OR_NUMBER}/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}`
    /// * `projects/-/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}`
    ///
    /// If unspecified, the Parallelstore service agent is used:
    /// `service-<PROJECT_NUMBER>@gcp-sa-parallelstore.iam.gserviceaccount.com`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_account: std::string::String,

    /// The source of the data being imported into the Parallelstore instance.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub source: std::option::Option<crate::model::import_data_request::Source>,

    /// The Parallelstore instance into which to import data.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub destination: std::option::Option<crate::model::import_data_request::Destination>,
}

impl ImportDataRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ImportDataRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::ImportDataRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [service_account][crate::model::ImportDataRequest::service_account].
    pub fn set_service_account<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service_account = v.into();
        self
    }

    /// Sets the value of `source`.
    pub fn set_source<
        T: std::convert::Into<std::option::Option<crate::model::import_data_request::Source>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = v.into();
        self
    }

    /// The value of [source][crate::model::ImportDataRequest::source]
    /// if it holds a `SourceGcsBucket`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_source_gcs_bucket(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::SourceGcsBucket>> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::import_data_request::Source::SourceGcsBucket(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [source][crate::model::ImportDataRequest::source]
    /// to hold a `SourceGcsBucket`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_source_gcs_bucket<
        T: std::convert::Into<std::boxed::Box<crate::model::SourceGcsBucket>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = std::option::Option::Some(
            crate::model::import_data_request::Source::SourceGcsBucket(v.into()),
        );
        self
    }

    /// Sets the value of `destination`.
    pub fn set_destination<
        T: std::convert::Into<std::option::Option<crate::model::import_data_request::Destination>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = v.into();
        self
    }

    /// The value of [destination][crate::model::ImportDataRequest::destination]
    /// if it holds a `DestinationParallelstore`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_destination_parallelstore(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::DestinationParallelstore>> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::import_data_request::Destination::DestinationParallelstore(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [destination][crate::model::ImportDataRequest::destination]
    /// to hold a `DestinationParallelstore`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_destination_parallelstore<
        T: std::convert::Into<std::boxed::Box<crate::model::DestinationParallelstore>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::import_data_request::Destination::DestinationParallelstore(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ImportDataRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.ImportDataRequest"
    }
}

/// Defines additional types related to ImportDataRequest
pub mod import_data_request {
    #[allow(unused_imports)]
    use super::*;

    /// The source of the data being imported into the Parallelstore instance.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Source {
        /// The Cloud Storage source bucket and, optionally, path inside the bucket.
        SourceGcsBucket(std::boxed::Box<crate::model::SourceGcsBucket>),
    }

    /// The Parallelstore instance into which to import data.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Destination {
        /// Parallelstore destination.
        DestinationParallelstore(std::boxed::Box<crate::model::DestinationParallelstore>),
    }
}

/// Export data from Parallelstore to Cloud Storage.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportDataRequest {
    /// Required. Name of the resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and t
    /// he request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. User-specified Service Account (SA) credentials to be used when
    /// performing the transfer.
    /// Use one of the following formats:
    ///
    /// * `{EMAIL_ADDRESS_OR_UNIQUE_ID}`
    /// * `projects/{PROJECT_ID_OR_NUMBER}/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}`
    /// * `projects/-/serviceAccounts/{EMAIL_ADDRESS_OR_UNIQUE_ID}`
    ///
    /// If unspecified, the Parallelstore service agent is used:
    /// `service-<PROJECT_NUMBER>@gcp-sa-parallelstore.iam.gserviceaccount.com`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_account: std::string::String,

    /// The Parallelstore instance to export from.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub source: std::option::Option<crate::model::export_data_request::Source>,

    /// The Cloud Storage bucket to export to.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub destination: std::option::Option<crate::model::export_data_request::Destination>,
}

impl ExportDataRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ExportDataRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::ExportDataRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [service_account][crate::model::ExportDataRequest::service_account].
    pub fn set_service_account<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service_account = v.into();
        self
    }

    /// Sets the value of `source`.
    pub fn set_source<
        T: std::convert::Into<std::option::Option<crate::model::export_data_request::Source>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = v.into();
        self
    }

    /// The value of [source][crate::model::ExportDataRequest::source]
    /// if it holds a `SourceParallelstore`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_source_parallelstore(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::SourceParallelstore>> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::export_data_request::Source::SourceParallelstore(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [source][crate::model::ExportDataRequest::source]
    /// to hold a `SourceParallelstore`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_source_parallelstore<
        T: std::convert::Into<std::boxed::Box<crate::model::SourceParallelstore>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = std::option::Option::Some(
            crate::model::export_data_request::Source::SourceParallelstore(v.into()),
        );
        self
    }

    /// Sets the value of `destination`.
    pub fn set_destination<
        T: std::convert::Into<std::option::Option<crate::model::export_data_request::Destination>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = v.into();
        self
    }

    /// The value of [destination][crate::model::ExportDataRequest::destination]
    /// if it holds a `DestinationGcsBucket`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_destination_gcs_bucket(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::DestinationGcsBucket>> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::export_data_request::Destination::DestinationGcsBucket(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [destination][crate::model::ExportDataRequest::destination]
    /// to hold a `DestinationGcsBucket`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_destination_gcs_bucket<
        T: std::convert::Into<std::boxed::Box<crate::model::DestinationGcsBucket>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::export_data_request::Destination::DestinationGcsBucket(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ExportDataRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.ExportDataRequest"
    }
}

/// Defines additional types related to ExportDataRequest
pub mod export_data_request {
    #[allow(unused_imports)]
    use super::*;

    /// The Parallelstore instance to export from.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Source {
        /// Parallelstore source.
        SourceParallelstore(std::boxed::Box<crate::model::SourceParallelstore>),
    }

    /// The Cloud Storage bucket to export to.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Destination {
        /// Cloud Storage destination.
        DestinationGcsBucket(std::boxed::Box<crate::model::DestinationGcsBucket>),
    }
}

/// The response to a request to import data to Parallelstore.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportDataResponse {}

impl ImportDataResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for ImportDataResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.ImportDataResponse"
    }
}

/// Metadata related to the data import operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportDataMetadata {
    /// Data transfer operation metadata.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub operation_metadata: std::option::Option<crate::model::TransferOperationMetadata>,

    /// Output only. The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Output only. Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Output only. Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_message: std::string::String,

    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have successfully been cancelled
    /// have [Operation.error][google.longrunning.Operation.error] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    ///
    /// [google.longrunning.Operation.error]: longrunning::model::Operation::result
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub requested_cancellation: bool,

    /// Output only. API version used to start the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,
}

impl ImportDataMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [operation_metadata][crate::model::ImportDataMetadata::operation_metadata].
    pub fn set_operation_metadata<
        T: std::convert::Into<std::option::Option<crate::model::TransferOperationMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.operation_metadata = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ImportDataMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::ImportDataMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::ImportDataMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::ImportDataMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_message][crate::model::ImportDataMetadata::status_message].
    pub fn set_status_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_message = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::ImportDataMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::ImportDataMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }
}

impl wkt::message::Message for ImportDataMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.ImportDataMetadata"
    }
}

/// The response to a request to export data from Parallelstore.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportDataResponse {}

impl ExportDataResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for ExportDataResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.ExportDataResponse"
    }
}

/// Metadata related to the data export operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportDataMetadata {
    /// Data transfer operation metadata.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub operation_metadata: std::option::Option<crate::model::TransferOperationMetadata>,

    /// Output only. The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Output only. Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Output only. Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_message: std::string::String,

    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have successfully been cancelled
    /// have [Operation.error][google.longrunning.Operation.error] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    ///
    /// [google.longrunning.Operation.error]: longrunning::model::Operation::result
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub requested_cancellation: bool,

    /// Output only. API version used to start the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,
}

impl ExportDataMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [operation_metadata][crate::model::ExportDataMetadata::operation_metadata].
    pub fn set_operation_metadata<
        T: std::convert::Into<std::option::Option<crate::model::TransferOperationMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.operation_metadata = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ExportDataMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::ExportDataMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::ExportDataMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::ExportDataMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_message][crate::model::ExportDataMetadata::status_message].
    pub fn set_status_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_message = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::ExportDataMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::ExportDataMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }
}

impl wkt::message::Message for ExportDataMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.ExportDataMetadata"
    }
}

/// Long-running operation metadata related to a data transfer.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TransferOperationMetadata {
    /// Output only. The progress of the transfer operation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub counters: std::option::Option<crate::model::TransferCounters>,

    /// Output only. The type of transfer occurring.
    pub transfer_type: crate::model::TransferType,

    /// The source of transfer operation.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub source: std::option::Option<crate::model::transfer_operation_metadata::Source>,

    /// The destination of transfer operation.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub destination: std::option::Option<crate::model::transfer_operation_metadata::Destination>,
}

impl TransferOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [counters][crate::model::TransferOperationMetadata::counters].
    pub fn set_counters<
        T: std::convert::Into<std::option::Option<crate::model::TransferCounters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.counters = v.into();
        self
    }

    /// Sets the value of [transfer_type][crate::model::TransferOperationMetadata::transfer_type].
    pub fn set_transfer_type<T: std::convert::Into<crate::model::TransferType>>(
        mut self,
        v: T,
    ) -> Self {
        self.transfer_type = v.into();
        self
    }

    /// Sets the value of `source`.
    pub fn set_source<
        T: std::convert::Into<std::option::Option<crate::model::transfer_operation_metadata::Source>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = v.into();
        self
    }

    /// The value of [source][crate::model::TransferOperationMetadata::source]
    /// if it holds a `SourceParallelstore`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_source_parallelstore(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::SourceParallelstore>> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::transfer_operation_metadata::Source::SourceParallelstore(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [source][crate::model::TransferOperationMetadata::source]
    /// if it holds a `SourceGcsBucket`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_source_gcs_bucket(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::SourceGcsBucket>> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::transfer_operation_metadata::Source::SourceGcsBucket(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [source][crate::model::TransferOperationMetadata::source]
    /// to hold a `SourceParallelstore`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_source_parallelstore<
        T: std::convert::Into<std::boxed::Box<crate::model::SourceParallelstore>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = std::option::Option::Some(
            crate::model::transfer_operation_metadata::Source::SourceParallelstore(v.into()),
        );
        self
    }

    /// Sets the value of [source][crate::model::TransferOperationMetadata::source]
    /// to hold a `SourceGcsBucket`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_source_gcs_bucket<
        T: std::convert::Into<std::boxed::Box<crate::model::SourceGcsBucket>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = std::option::Option::Some(
            crate::model::transfer_operation_metadata::Source::SourceGcsBucket(v.into()),
        );
        self
    }

    /// Sets the value of `destination`.
    pub fn set_destination<
        T: std::convert::Into<
            std::option::Option<crate::model::transfer_operation_metadata::Destination>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = v.into();
        self
    }

    /// The value of [destination][crate::model::TransferOperationMetadata::destination]
    /// if it holds a `DestinationGcsBucket`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_destination_gcs_bucket(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::DestinationGcsBucket>> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::transfer_operation_metadata::Destination::DestinationGcsBucket(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [destination][crate::model::TransferOperationMetadata::destination]
    /// if it holds a `DestinationParallelstore`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_destination_parallelstore(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::DestinationParallelstore>> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::transfer_operation_metadata::Destination::DestinationParallelstore(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [destination][crate::model::TransferOperationMetadata::destination]
    /// to hold a `DestinationGcsBucket`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_destination_gcs_bucket<
        T: std::convert::Into<std::boxed::Box<crate::model::DestinationGcsBucket>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::transfer_operation_metadata::Destination::DestinationGcsBucket(v.into()),
        );
        self
    }

    /// Sets the value of [destination][crate::model::TransferOperationMetadata::destination]
    /// to hold a `DestinationParallelstore`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_destination_parallelstore<
        T: std::convert::Into<std::boxed::Box<crate::model::DestinationParallelstore>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::transfer_operation_metadata::Destination::DestinationParallelstore(
                v.into(),
            ),
        );
        self
    }
}

impl wkt::message::Message for TransferOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.TransferOperationMetadata"
    }
}

/// Defines additional types related to TransferOperationMetadata
pub mod transfer_operation_metadata {
    #[allow(unused_imports)]
    use super::*;

    /// The source of transfer operation.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Source {
        /// Output only. Parallelstore source.
        SourceParallelstore(std::boxed::Box<crate::model::SourceParallelstore>),
        /// Output only. Cloud Storage source.
        SourceGcsBucket(std::boxed::Box<crate::model::SourceGcsBucket>),
    }

    /// The destination of transfer operation.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Destination {
        /// Output only. Cloud Storage destination.
        DestinationGcsBucket(std::boxed::Box<crate::model::DestinationGcsBucket>),
        /// Output only. Parallelstore destination.
        DestinationParallelstore(std::boxed::Box<crate::model::DestinationParallelstore>),
    }
}

/// A collection of counters that report the progress of a transfer operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TransferCounters {
    /// Objects found in the data source that are scheduled to be transferred,
    /// excluding any that are filtered based on object conditions or skipped due
    /// to sync.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub objects_found: i64,

    /// Bytes found in the data source that are scheduled to be transferred,
    /// excluding any that are filtered based on object conditions or skipped due
    /// to sync.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub bytes_found: i64,

    /// Objects in the data source that are not transferred because they already
    /// exist in the data destination.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub objects_skipped: i64,

    /// Bytes in the data source that are not transferred because they already
    /// exist in the data destination.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub bytes_skipped: i64,

    /// Objects that are copied to the data destination.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub objects_copied: i64,

    /// Bytes that are copied to the data destination.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub bytes_copied: i64,
}

impl TransferCounters {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [objects_found][crate::model::TransferCounters::objects_found].
    pub fn set_objects_found<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.objects_found = v.into();
        self
    }

    /// Sets the value of [bytes_found][crate::model::TransferCounters::bytes_found].
    pub fn set_bytes_found<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.bytes_found = v.into();
        self
    }

    /// Sets the value of [objects_skipped][crate::model::TransferCounters::objects_skipped].
    pub fn set_objects_skipped<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.objects_skipped = v.into();
        self
    }

    /// Sets the value of [bytes_skipped][crate::model::TransferCounters::bytes_skipped].
    pub fn set_bytes_skipped<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.bytes_skipped = v.into();
        self
    }

    /// Sets the value of [objects_copied][crate::model::TransferCounters::objects_copied].
    pub fn set_objects_copied<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.objects_copied = v.into();
        self
    }

    /// Sets the value of [bytes_copied][crate::model::TransferCounters::bytes_copied].
    pub fn set_bytes_copied<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.bytes_copied = v.into();
        self
    }
}

impl wkt::message::Message for TransferCounters {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.parallelstore.v1.TransferCounters"
    }
}

/// Type of transfer that occurred.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct TransferType(std::borrow::Cow<'static, str>);

impl TransferType {
    /// Creates a new TransferType instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [TransferType](TransferType)
pub mod transfer_type {
    use super::TransferType;

    /// Zero is an illegal value.
    pub const TRANSFER_TYPE_UNSPECIFIED: TransferType =
        TransferType::new("TRANSFER_TYPE_UNSPECIFIED");

    /// Imports to Parallelstore.
    pub const IMPORT: TransferType = TransferType::new("IMPORT");

    /// Exports from Parallelstore.
    pub const EXPORT: TransferType = TransferType::new("EXPORT");
}

impl std::convert::From<std::string::String> for TransferType {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

/// Represents the striping options for files.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct FileStripeLevel(std::borrow::Cow<'static, str>);

impl FileStripeLevel {
    /// Creates a new FileStripeLevel instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [FileStripeLevel](FileStripeLevel)
pub mod file_stripe_level {
    use super::FileStripeLevel;

    /// If not set, FileStripeLevel will default to FILE_STRIPE_LEVEL_BALANCED
    pub const FILE_STRIPE_LEVEL_UNSPECIFIED: FileStripeLevel =
        FileStripeLevel::new("FILE_STRIPE_LEVEL_UNSPECIFIED");

    /// Minimum file striping
    pub const FILE_STRIPE_LEVEL_MIN: FileStripeLevel =
        FileStripeLevel::new("FILE_STRIPE_LEVEL_MIN");

    /// Medium file striping
    pub const FILE_STRIPE_LEVEL_BALANCED: FileStripeLevel =
        FileStripeLevel::new("FILE_STRIPE_LEVEL_BALANCED");

    /// Maximum file striping
    pub const FILE_STRIPE_LEVEL_MAX: FileStripeLevel =
        FileStripeLevel::new("FILE_STRIPE_LEVEL_MAX");
}

impl std::convert::From<std::string::String> for FileStripeLevel {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

/// Represents the striping options for directories.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct DirectoryStripeLevel(std::borrow::Cow<'static, str>);

impl DirectoryStripeLevel {
    /// Creates a new DirectoryStripeLevel instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [DirectoryStripeLevel](DirectoryStripeLevel)
pub mod directory_stripe_level {
    use super::DirectoryStripeLevel;

    /// If not set, DirectoryStripeLevel will default to DIRECTORY_STRIPE_LEVEL_MAX
    pub const DIRECTORY_STRIPE_LEVEL_UNSPECIFIED: DirectoryStripeLevel =
        DirectoryStripeLevel::new("DIRECTORY_STRIPE_LEVEL_UNSPECIFIED");

    /// Minimum directory striping
    pub const DIRECTORY_STRIPE_LEVEL_MIN: DirectoryStripeLevel =
        DirectoryStripeLevel::new("DIRECTORY_STRIPE_LEVEL_MIN");

    /// Medium directory striping
    pub const DIRECTORY_STRIPE_LEVEL_BALANCED: DirectoryStripeLevel =
        DirectoryStripeLevel::new("DIRECTORY_STRIPE_LEVEL_BALANCED");

    /// Maximum directory striping
    pub const DIRECTORY_STRIPE_LEVEL_MAX: DirectoryStripeLevel =
        DirectoryStripeLevel::new("DIRECTORY_STRIPE_LEVEL_MAX");
}

impl std::convert::From<std::string::String> for DirectoryStripeLevel {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}
