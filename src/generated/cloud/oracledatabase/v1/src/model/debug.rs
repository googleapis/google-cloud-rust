// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#[allow(unused_imports)]
use super::*;

impl std::fmt::Debug for super::AutonomousDatabase {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutonomousDatabase");
        debug_struct.field("name", &self.name);
        debug_struct.field("database", &self.database);
        debug_struct.field("display_name", &self.display_name);
        debug_struct.field("entitlement_id", &self.entitlement_id);
        debug_struct.field("admin_password", &self.admin_password);
        debug_struct.field("properties", &self.properties);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("network", &self.network);
        debug_struct.field("cidr", &self.cidr);
        debug_struct.field("create_time", &self.create_time);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::AutonomousDatabaseProperties {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutonomousDatabaseProperties");
        debug_struct.field("ocid", &self.ocid);
        debug_struct.field("compute_count", &self.compute_count);
        debug_struct.field("cpu_core_count", &self.cpu_core_count);
        debug_struct.field("data_storage_size_tb", &self.data_storage_size_tb);
        debug_struct.field("data_storage_size_gb", &self.data_storage_size_gb);
        debug_struct.field("db_workload", &self.db_workload);
        debug_struct.field("db_edition", &self.db_edition);
        debug_struct.field("character_set", &self.character_set);
        debug_struct.field("n_character_set", &self.n_character_set);
        debug_struct.field("private_endpoint_ip", &self.private_endpoint_ip);
        debug_struct.field("private_endpoint_label", &self.private_endpoint_label);
        debug_struct.field("db_version", &self.db_version);
        debug_struct.field("is_auto_scaling_enabled", &self.is_auto_scaling_enabled);
        debug_struct.field(
            "is_storage_auto_scaling_enabled",
            &self.is_storage_auto_scaling_enabled,
        );
        debug_struct.field("license_type", &self.license_type);
        debug_struct.field("customer_contacts", &self.customer_contacts);
        debug_struct.field("secret_id", &self.secret_id);
        debug_struct.field("vault_id", &self.vault_id);
        debug_struct.field("maintenance_schedule_type", &self.maintenance_schedule_type);
        debug_struct.field("mtls_connection_required", &self.mtls_connection_required);
        debug_struct.field(
            "backup_retention_period_days",
            &self.backup_retention_period_days,
        );
        debug_struct.field(
            "actual_used_data_storage_size_tb",
            &self.actual_used_data_storage_size_tb,
        );
        debug_struct.field("allocated_storage_size_tb", &self.allocated_storage_size_tb);
        debug_struct.field("apex_details", &self.apex_details);
        debug_struct.field(
            "are_primary_allowlisted_ips_used",
            &self.are_primary_allowlisted_ips_used,
        );
        debug_struct.field("lifecycle_details", &self.lifecycle_details);
        debug_struct.field("state", &self.state);
        debug_struct.field(
            "autonomous_container_database_id",
            &self.autonomous_container_database_id,
        );
        debug_struct.field(
            "available_upgrade_versions",
            &self.available_upgrade_versions,
        );
        debug_struct.field("connection_strings", &self.connection_strings);
        debug_struct.field("connection_urls", &self.connection_urls);
        debug_struct.field(
            "failed_data_recovery_duration",
            &self.failed_data_recovery_duration,
        );
        debug_struct.field("memory_table_gbs", &self.memory_table_gbs);
        debug_struct.field(
            "is_local_data_guard_enabled",
            &self.is_local_data_guard_enabled,
        );
        debug_struct.field(
            "local_adg_auto_failover_max_data_loss_limit",
            &self.local_adg_auto_failover_max_data_loss_limit,
        );
        debug_struct.field("local_standby_db", &self.local_standby_db);
        debug_struct.field(
            "memory_per_oracle_compute_unit_gbs",
            &self.memory_per_oracle_compute_unit_gbs,
        );
        debug_struct.field(
            "local_disaster_recovery_type",
            &self.local_disaster_recovery_type,
        );
        debug_struct.field("data_safe_state", &self.data_safe_state);
        debug_struct.field("database_management_state", &self.database_management_state);
        debug_struct.field("open_mode", &self.open_mode);
        debug_struct.field("operations_insights_state", &self.operations_insights_state);
        debug_struct.field("peer_db_ids", &self.peer_db_ids);
        debug_struct.field("permission_level", &self.permission_level);
        debug_struct.field("private_endpoint", &self.private_endpoint);
        debug_struct.field("refreshable_mode", &self.refreshable_mode);
        debug_struct.field("refreshable_state", &self.refreshable_state);
        debug_struct.field("role", &self.role);
        debug_struct.field(
            "scheduled_operation_details",
            &self.scheduled_operation_details,
        );
        debug_struct.field("sql_web_developer_url", &self.sql_web_developer_url);
        debug_struct.field("supported_clone_regions", &self.supported_clone_regions);
        debug_struct.field(
            "used_data_storage_size_tbs",
            &self.used_data_storage_size_tbs,
        );
        debug_struct.field("oci_url", &self.oci_url);
        debug_struct.field(
            "total_auto_backup_storage_size_gbs",
            &self.total_auto_backup_storage_size_gbs,
        );
        debug_struct.field(
            "next_long_term_backup_time",
            &self.next_long_term_backup_time,
        );
        debug_struct.field("maintenance_begin_time", &self.maintenance_begin_time);
        debug_struct.field("maintenance_end_time", &self.maintenance_end_time);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::AutonomousDatabaseApex {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutonomousDatabaseApex");
        debug_struct.field("apex_version", &self.apex_version);
        debug_struct.field("ords_version", &self.ords_version);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::AutonomousDatabaseConnectionStrings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutonomousDatabaseConnectionStrings");
        debug_struct.field("all_connection_strings", &self.all_connection_strings);
        debug_struct.field("dedicated", &self.dedicated);
        debug_struct.field("high", &self.high);
        debug_struct.field("low", &self.low);
        debug_struct.field("medium", &self.medium);
        debug_struct.field("profiles", &self.profiles);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::DatabaseConnectionStringProfile {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DatabaseConnectionStringProfile");
        debug_struct.field("consumer_group", &self.consumer_group);
        debug_struct.field("display_name", &self.display_name);
        debug_struct.field("host_format", &self.host_format);
        debug_struct.field("is_regional", &self.is_regional);
        debug_struct.field("protocol", &self.protocol);
        debug_struct.field("session_mode", &self.session_mode);
        debug_struct.field("syntax_format", &self.syntax_format);
        debug_struct.field("tls_authentication", &self.tls_authentication);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::AllConnectionStrings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AllConnectionStrings");
        debug_struct.field("high", &self.high);
        debug_struct.field("low", &self.low);
        debug_struct.field("medium", &self.medium);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::AutonomousDatabaseConnectionUrls {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutonomousDatabaseConnectionUrls");
        debug_struct.field("apex_uri", &self.apex_uri);
        debug_struct.field("database_transforms_uri", &self.database_transforms_uri);
        debug_struct.field("graph_studio_uri", &self.graph_studio_uri);
        debug_struct.field(
            "machine_learning_notebook_uri",
            &self.machine_learning_notebook_uri,
        );
        debug_struct.field(
            "machine_learning_user_management_uri",
            &self.machine_learning_user_management_uri,
        );
        debug_struct.field("mongo_db_uri", &self.mongo_db_uri);
        debug_struct.field("ords_uri", &self.ords_uri);
        debug_struct.field("sql_dev_web_uri", &self.sql_dev_web_uri);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::AutonomousDatabaseStandbySummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutonomousDatabaseStandbySummary");
        debug_struct.field("lag_time_duration", &self.lag_time_duration);
        debug_struct.field("lifecycle_details", &self.lifecycle_details);
        debug_struct.field("state", &self.state);
        debug_struct.field(
            "data_guard_role_changed_time",
            &self.data_guard_role_changed_time,
        );
        debug_struct.field(
            "disaster_recovery_role_changed_time",
            &self.disaster_recovery_role_changed_time,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ScheduledOperationDetails {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ScheduledOperationDetails");
        debug_struct.field("day_of_week", &self.day_of_week);
        debug_struct.field("start_time", &self.start_time);
        debug_struct.field("stop_time", &self.stop_time);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::AutonomousDatabaseCharacterSet {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutonomousDatabaseCharacterSet");
        debug_struct.field("name", &self.name);
        debug_struct.field("character_set_type", &self.character_set_type);
        debug_struct.field("character_set", &self.character_set);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::AutonomousDatabaseBackup {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutonomousDatabaseBackup");
        debug_struct.field("name", &self.name);
        debug_struct.field("autonomous_database", &self.autonomous_database);
        debug_struct.field("display_name", &self.display_name);
        debug_struct.field("properties", &self.properties);
        debug_struct.field("labels", &self.labels);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::AutonomousDatabaseBackupProperties {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutonomousDatabaseBackupProperties");
        debug_struct.field("ocid", &self.ocid);
        debug_struct.field("retention_period_days", &self.retention_period_days);
        debug_struct.field("compartment_id", &self.compartment_id);
        debug_struct.field("database_size_tb", &self.database_size_tb);
        debug_struct.field("db_version", &self.db_version);
        debug_struct.field("is_long_term_backup", &self.is_long_term_backup);
        debug_struct.field("is_automatic_backup", &self.is_automatic_backup);
        debug_struct.field("is_restorable", &self.is_restorable);
        debug_struct.field("key_store_id", &self.key_store_id);
        debug_struct.field("key_store_wallet", &self.key_store_wallet);
        debug_struct.field("kms_key_id", &self.kms_key_id);
        debug_struct.field("kms_key_version_id", &self.kms_key_version_id);
        debug_struct.field("lifecycle_details", &self.lifecycle_details);
        debug_struct.field("lifecycle_state", &self.lifecycle_state);
        debug_struct.field("size_tb", &self.size_tb);
        debug_struct.field("available_till_time", &self.available_till_time);
        debug_struct.field("end_time", &self.end_time);
        debug_struct.field("start_time", &self.start_time);
        debug_struct.field("r#type", &self.r#type);
        debug_struct.field("vault_id", &self.vault_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::AutonomousDbVersion {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutonomousDbVersion");
        debug_struct.field("name", &self.name);
        debug_struct.field("version", &self.version);
        debug_struct.field("db_workload", &self.db_workload);
        debug_struct.field("workload_uri", &self.workload_uri);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::CustomerContact {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CustomerContact");
        debug_struct.field("email", &self.email);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::DbNode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DbNode");
        debug_struct.field("name", &self.name);
        debug_struct.field("properties", &self.properties);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::DbNodeProperties {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DbNodeProperties");
        debug_struct.field("ocid", &self.ocid);
        debug_struct.field("ocpu_count", &self.ocpu_count);
        debug_struct.field("memory_size_gb", &self.memory_size_gb);
        debug_struct.field("db_node_storage_size_gb", &self.db_node_storage_size_gb);
        debug_struct.field("db_server_ocid", &self.db_server_ocid);
        debug_struct.field("hostname", &self.hostname);
        debug_struct.field("state", &self.state);
        debug_struct.field("total_cpu_core_count", &self.total_cpu_core_count);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::DbServer {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DbServer");
        debug_struct.field("name", &self.name);
        debug_struct.field("display_name", &self.display_name);
        debug_struct.field("properties", &self.properties);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::DbServerProperties {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DbServerProperties");
        debug_struct.field("ocid", &self.ocid);
        debug_struct.field("ocpu_count", &self.ocpu_count);
        debug_struct.field("max_ocpu_count", &self.max_ocpu_count);
        debug_struct.field("memory_size_gb", &self.memory_size_gb);
        debug_struct.field("max_memory_size_gb", &self.max_memory_size_gb);
        debug_struct.field("db_node_storage_size_gb", &self.db_node_storage_size_gb);
        debug_struct.field(
            "max_db_node_storage_size_gb",
            &self.max_db_node_storage_size_gb,
        );
        debug_struct.field("vm_count", &self.vm_count);
        debug_struct.field("state", &self.state);
        debug_struct.field("db_node_ids", &self.db_node_ids);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::DbSystemShape {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DbSystemShape");
        debug_struct.field("name", &self.name);
        debug_struct.field("shape", &self.shape);
        debug_struct.field("min_node_count", &self.min_node_count);
        debug_struct.field("max_node_count", &self.max_node_count);
        debug_struct.field("min_storage_count", &self.min_storage_count);
        debug_struct.field("max_storage_count", &self.max_storage_count);
        debug_struct.field(
            "available_core_count_per_node",
            &self.available_core_count_per_node,
        );
        debug_struct.field(
            "available_memory_per_node_gb",
            &self.available_memory_per_node_gb,
        );
        debug_struct.field("available_data_storage_tb", &self.available_data_storage_tb);
        debug_struct.field("min_core_count_per_node", &self.min_core_count_per_node);
        debug_struct.field("min_memory_per_node_gb", &self.min_memory_per_node_gb);
        debug_struct.field(
            "min_db_node_storage_per_node_gb",
            &self.min_db_node_storage_per_node_gb,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::Entitlement {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Entitlement");
        debug_struct.field("name", &self.name);
        debug_struct.field("cloud_account_details", &self.cloud_account_details);
        debug_struct.field("entitlement_id", &self.entitlement_id);
        debug_struct.field("state", &self.state);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::CloudAccountDetails {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CloudAccountDetails");
        debug_struct.field("cloud_account", &self.cloud_account);
        debug_struct.field("cloud_account_home_region", &self.cloud_account_home_region);
        debug_struct.field("link_existing_account_uri", &self.link_existing_account_uri);
        debug_struct.field("account_creation_uri", &self.account_creation_uri);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::CloudExadataInfrastructure {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CloudExadataInfrastructure");
        debug_struct.field("name", &self.name);
        debug_struct.field("display_name", &self.display_name);
        debug_struct.field("gcp_oracle_zone", &self.gcp_oracle_zone);
        debug_struct.field("entitlement_id", &self.entitlement_id);
        debug_struct.field("properties", &self.properties);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("create_time", &self.create_time);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::CloudExadataInfrastructureProperties {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CloudExadataInfrastructureProperties");
        debug_struct.field("ocid", &self.ocid);
        debug_struct.field("compute_count", &self.compute_count);
        debug_struct.field("storage_count", &self.storage_count);
        debug_struct.field("total_storage_size_gb", &self.total_storage_size_gb);
        debug_struct.field("available_storage_size_gb", &self.available_storage_size_gb);
        debug_struct.field("maintenance_window", &self.maintenance_window);
        debug_struct.field("state", &self.state);
        debug_struct.field("shape", &self.shape);
        debug_struct.field("oci_url", &self.oci_url);
        debug_struct.field("cpu_count", &self.cpu_count);
        debug_struct.field("max_cpu_count", &self.max_cpu_count);
        debug_struct.field("memory_size_gb", &self.memory_size_gb);
        debug_struct.field("max_memory_gb", &self.max_memory_gb);
        debug_struct.field("db_node_storage_size_gb", &self.db_node_storage_size_gb);
        debug_struct.field(
            "max_db_node_storage_size_gb",
            &self.max_db_node_storage_size_gb,
        );
        debug_struct.field("data_storage_size_tb", &self.data_storage_size_tb);
        debug_struct.field("max_data_storage_tb", &self.max_data_storage_tb);
        debug_struct.field("activated_storage_count", &self.activated_storage_count);
        debug_struct.field("additional_storage_count", &self.additional_storage_count);
        debug_struct.field("db_server_version", &self.db_server_version);
        debug_struct.field("storage_server_version", &self.storage_server_version);
        debug_struct.field("next_maintenance_run_id", &self.next_maintenance_run_id);
        debug_struct.field("next_maintenance_run_time", &self.next_maintenance_run_time);
        debug_struct.field(
            "next_security_maintenance_run_time",
            &self.next_security_maintenance_run_time,
        );
        debug_struct.field("customer_contacts", &self.customer_contacts);
        debug_struct.field(
            "monthly_storage_server_version",
            &self.monthly_storage_server_version,
        );
        debug_struct.field("monthly_db_server_version", &self.monthly_db_server_version);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::MaintenanceWindow {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("MaintenanceWindow");
        debug_struct.field("preference", &self.preference);
        debug_struct.field("months", &self.months);
        debug_struct.field("weeks_of_month", &self.weeks_of_month);
        debug_struct.field("days_of_week", &self.days_of_week);
        debug_struct.field("hours_of_day", &self.hours_of_day);
        debug_struct.field("lead_time_week", &self.lead_time_week);
        debug_struct.field("patching_mode", &self.patching_mode);
        debug_struct.field(
            "custom_action_timeout_mins",
            &self.custom_action_timeout_mins,
        );
        debug_struct.field(
            "is_custom_action_timeout_enabled",
            &self.is_custom_action_timeout_enabled,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::GiVersion {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GiVersion");
        debug_struct.field("name", &self.name);
        debug_struct.field("version", &self.version);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::LocationMetadata {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("LocationMetadata");
        debug_struct.field("gcp_oracle_zones", &self.gcp_oracle_zones);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListCloudExadataInfrastructuresRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListCloudExadataInfrastructuresRequest");
        debug_struct.field("parent", &self.parent);
        debug_struct.field("page_size", &self.page_size);
        debug_struct.field("page_token", &self.page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListCloudExadataInfrastructuresResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListCloudExadataInfrastructuresResponse");
        debug_struct.field(
            "cloud_exadata_infrastructures",
            &self.cloud_exadata_infrastructures,
        );
        debug_struct.field("next_page_token", &self.next_page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::GetCloudExadataInfrastructureRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetCloudExadataInfrastructureRequest");
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::CreateCloudExadataInfrastructureRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CreateCloudExadataInfrastructureRequest");
        debug_struct.field("parent", &self.parent);
        debug_struct.field(
            "cloud_exadata_infrastructure_id",
            &self.cloud_exadata_infrastructure_id,
        );
        debug_struct.field(
            "cloud_exadata_infrastructure",
            &self.cloud_exadata_infrastructure,
        );
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::DeleteCloudExadataInfrastructureRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteCloudExadataInfrastructureRequest");
        debug_struct.field("name", &self.name);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("force", &self.force);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListCloudVmClustersRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListCloudVmClustersRequest");
        debug_struct.field("parent", &self.parent);
        debug_struct.field("page_size", &self.page_size);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("filter", &self.filter);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListCloudVmClustersResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListCloudVmClustersResponse");
        debug_struct.field("cloud_vm_clusters", &self.cloud_vm_clusters);
        debug_struct.field("next_page_token", &self.next_page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::GetCloudVmClusterRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetCloudVmClusterRequest");
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::CreateCloudVmClusterRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CreateCloudVmClusterRequest");
        debug_struct.field("parent", &self.parent);
        debug_struct.field("cloud_vm_cluster_id", &self.cloud_vm_cluster_id);
        debug_struct.field("cloud_vm_cluster", &self.cloud_vm_cluster);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::DeleteCloudVmClusterRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteCloudVmClusterRequest");
        debug_struct.field("name", &self.name);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("force", &self.force);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListEntitlementsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListEntitlementsRequest");
        debug_struct.field("parent", &self.parent);
        debug_struct.field("page_size", &self.page_size);
        debug_struct.field("page_token", &self.page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListEntitlementsResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListEntitlementsResponse");
        debug_struct.field("entitlements", &self.entitlements);
        debug_struct.field("next_page_token", &self.next_page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListDbServersRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListDbServersRequest");
        debug_struct.field("parent", &self.parent);
        debug_struct.field("page_size", &self.page_size);
        debug_struct.field("page_token", &self.page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListDbServersResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListDbServersResponse");
        debug_struct.field("db_servers", &self.db_servers);
        debug_struct.field("next_page_token", &self.next_page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListDbNodesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListDbNodesRequest");
        debug_struct.field("parent", &self.parent);
        debug_struct.field("page_size", &self.page_size);
        debug_struct.field("page_token", &self.page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListDbNodesResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListDbNodesResponse");
        debug_struct.field("db_nodes", &self.db_nodes);
        debug_struct.field("next_page_token", &self.next_page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListGiVersionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListGiVersionsRequest");
        debug_struct.field("parent", &self.parent);
        debug_struct.field("page_size", &self.page_size);
        debug_struct.field("page_token", &self.page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListGiVersionsResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListGiVersionsResponse");
        debug_struct.field("gi_versions", &self.gi_versions);
        debug_struct.field("next_page_token", &self.next_page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListDbSystemShapesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListDbSystemShapesRequest");
        debug_struct.field("parent", &self.parent);
        debug_struct.field("page_size", &self.page_size);
        debug_struct.field("page_token", &self.page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListDbSystemShapesResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListDbSystemShapesResponse");
        debug_struct.field("db_system_shapes", &self.db_system_shapes);
        debug_struct.field("next_page_token", &self.next_page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::OperationMetadata {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("OperationMetadata");
        debug_struct.field("create_time", &self.create_time);
        debug_struct.field("end_time", &self.end_time);
        debug_struct.field("target", &self.target);
        debug_struct.field("verb", &self.verb);
        debug_struct.field("status_message", &self.status_message);
        debug_struct.field("requested_cancellation", &self.requested_cancellation);
        debug_struct.field("api_version", &self.api_version);
        debug_struct.field("percent_complete", &self.percent_complete);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListAutonomousDatabasesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListAutonomousDatabasesRequest");
        debug_struct.field("parent", &self.parent);
        debug_struct.field("page_size", &self.page_size);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("filter", &self.filter);
        debug_struct.field("order_by", &self.order_by);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListAutonomousDatabasesResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListAutonomousDatabasesResponse");
        debug_struct.field("autonomous_databases", &self.autonomous_databases);
        debug_struct.field("next_page_token", &self.next_page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::GetAutonomousDatabaseRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetAutonomousDatabaseRequest");
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::CreateAutonomousDatabaseRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CreateAutonomousDatabaseRequest");
        debug_struct.field("parent", &self.parent);
        debug_struct.field("autonomous_database_id", &self.autonomous_database_id);
        debug_struct.field("autonomous_database", &self.autonomous_database);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::DeleteAutonomousDatabaseRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteAutonomousDatabaseRequest");
        debug_struct.field("name", &self.name);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::RestoreAutonomousDatabaseRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RestoreAutonomousDatabaseRequest");
        debug_struct.field("name", &self.name);
        debug_struct.field("restore_time", &self.restore_time);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::StopAutonomousDatabaseRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StopAutonomousDatabaseRequest");
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::StartAutonomousDatabaseRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StartAutonomousDatabaseRequest");
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::RestartAutonomousDatabaseRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RestartAutonomousDatabaseRequest");
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::GenerateAutonomousDatabaseWalletRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GenerateAutonomousDatabaseWalletRequest");
        debug_struct.field("name", &self.name);
        debug_struct.field("r#type", &self.r#type);
        debug_struct.field("is_regional", &self.is_regional);
        debug_struct.field("password", &self.password);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::GenerateAutonomousDatabaseWalletResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GenerateAutonomousDatabaseWalletResponse");
        debug_struct.field("archive_content", &self.archive_content);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListAutonomousDbVersionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListAutonomousDbVersionsRequest");
        debug_struct.field("parent", &self.parent);
        debug_struct.field("page_size", &self.page_size);
        debug_struct.field("page_token", &self.page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListAutonomousDbVersionsResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListAutonomousDbVersionsResponse");
        debug_struct.field("autonomous_db_versions", &self.autonomous_db_versions);
        debug_struct.field("next_page_token", &self.next_page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListAutonomousDatabaseCharacterSetsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListAutonomousDatabaseCharacterSetsRequest");
        debug_struct.field("parent", &self.parent);
        debug_struct.field("page_size", &self.page_size);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("filter", &self.filter);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListAutonomousDatabaseCharacterSetsResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListAutonomousDatabaseCharacterSetsResponse");
        debug_struct.field(
            "autonomous_database_character_sets",
            &self.autonomous_database_character_sets,
        );
        debug_struct.field("next_page_token", &self.next_page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListAutonomousDatabaseBackupsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListAutonomousDatabaseBackupsRequest");
        debug_struct.field("parent", &self.parent);
        debug_struct.field("filter", &self.filter);
        debug_struct.field("page_size", &self.page_size);
        debug_struct.field("page_token", &self.page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::ListAutonomousDatabaseBackupsResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListAutonomousDatabaseBackupsResponse");
        debug_struct.field(
            "autonomous_database_backups",
            &self.autonomous_database_backups,
        );
        debug_struct.field("next_page_token", &self.next_page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::CloudVmCluster {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CloudVmCluster");
        debug_struct.field("name", &self.name);
        debug_struct.field("exadata_infrastructure", &self.exadata_infrastructure);
        debug_struct.field("display_name", &self.display_name);
        debug_struct.field("gcp_oracle_zone", &self.gcp_oracle_zone);
        debug_struct.field("properties", &self.properties);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("create_time", &self.create_time);
        debug_struct.field("cidr", &self.cidr);
        debug_struct.field("backup_subnet_cidr", &self.backup_subnet_cidr);
        debug_struct.field("network", &self.network);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::CloudVmClusterProperties {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CloudVmClusterProperties");
        debug_struct.field("ocid", &self.ocid);
        debug_struct.field("license_type", &self.license_type);
        debug_struct.field("gi_version", &self.gi_version);
        debug_struct.field("time_zone", &self.time_zone);
        debug_struct.field("ssh_public_keys", &self.ssh_public_keys);
        debug_struct.field("node_count", &self.node_count);
        debug_struct.field("shape", &self.shape);
        debug_struct.field("ocpu_count", &self.ocpu_count);
        debug_struct.field("memory_size_gb", &self.memory_size_gb);
        debug_struct.field("db_node_storage_size_gb", &self.db_node_storage_size_gb);
        debug_struct.field("storage_size_gb", &self.storage_size_gb);
        debug_struct.field("data_storage_size_tb", &self.data_storage_size_tb);
        debug_struct.field("disk_redundancy", &self.disk_redundancy);
        debug_struct.field("sparse_diskgroup_enabled", &self.sparse_diskgroup_enabled);
        debug_struct.field("local_backup_enabled", &self.local_backup_enabled);
        debug_struct.field("hostname_prefix", &self.hostname_prefix);
        debug_struct.field(
            "diagnostics_data_collection_options",
            &self.diagnostics_data_collection_options,
        );
        debug_struct.field("state", &self.state);
        debug_struct.field("scan_listener_port_tcp", &self.scan_listener_port_tcp);
        debug_struct.field(
            "scan_listener_port_tcp_ssl",
            &self.scan_listener_port_tcp_ssl,
        );
        debug_struct.field("domain", &self.domain);
        debug_struct.field("scan_dns", &self.scan_dns);
        debug_struct.field("hostname", &self.hostname);
        debug_struct.field("cpu_core_count", &self.cpu_core_count);
        debug_struct.field("system_version", &self.system_version);
        debug_struct.field("scan_ip_ids", &self.scan_ip_ids);
        debug_struct.field("scan_dns_record_id", &self.scan_dns_record_id);
        debug_struct.field("oci_url", &self.oci_url);
        debug_struct.field("db_server_ocids", &self.db_server_ocids);
        debug_struct.field("compartment_id", &self.compartment_id);
        debug_struct.field("dns_listener_ip", &self.dns_listener_ip);
        debug_struct.field("cluster_name", &self.cluster_name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

impl std::fmt::Debug for super::DataCollectionOptions {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DataCollectionOptions");
        debug_struct.field(
            "diagnostics_events_enabled",
            &self.diagnostics_events_enabled,
        );
        debug_struct.field("health_monitoring_enabled", &self.health_monitoring_enabled);
        debug_struct.field("incident_logs_enabled", &self.incident_logs_enabled);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}
