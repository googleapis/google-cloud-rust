// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Oracle Database@Google Cloud API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_oracledatabase_v1::client::OracleDatabase;
/// let client = OracleDatabase::builder().build().await?;
/// // use `client` to make requests to the {Codec.APITitle}}.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// Service describing handlers for resources
///
/// # Configuration
///
/// To configure `OracleDatabase` use the `with_*` methods in the type returned
/// by [builder()][OracleDatabase::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://oracledatabase.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::oracle_database::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::oracle_database::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `OracleDatabase` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `OracleDatabase` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct OracleDatabase {
    inner: Arc<dyn super::stub::dynamic::OracleDatabase>,
}

impl OracleDatabase {
    /// Returns a builder for [OracleDatabase].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_oracledatabase_v1::client::OracleDatabase;
    /// let client = OracleDatabase::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::oracle_database::ClientBuilder {
        gax::client_builder::internal::new_builder(super::builder::oracle_database::client::Factory)
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::OracleDatabase + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<Arc<dyn super::stub::dynamic::OracleDatabase>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::OracleDatabase> {
        super::transport::OracleDatabase::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::OracleDatabase> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::OracleDatabase::new)
    }

    /// Lists Exadata Infrastructures in a given project and location.
    pub fn list_cloud_exadata_infrastructures(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::ListCloudExadataInfrastructures {
        super::builder::oracle_database::ListCloudExadataInfrastructures::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single Exadata Infrastructure.
    pub fn get_cloud_exadata_infrastructure(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::GetCloudExadataInfrastructure {
        super::builder::oracle_database::GetCloudExadataInfrastructure::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new Exadata Infrastructure in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_cloud_exadata_infrastructure(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::CreateCloudExadataInfrastructure {
        super::builder::oracle_database::CreateCloudExadataInfrastructure::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a single Exadata Infrastructure.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_cloud_exadata_infrastructure(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::DeleteCloudExadataInfrastructure {
        super::builder::oracle_database::DeleteCloudExadataInfrastructure::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists the VM Clusters in a given project and location.
    pub fn list_cloud_vm_clusters(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::ListCloudVmClusters {
        super::builder::oracle_database::ListCloudVmClusters::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single VM Cluster.
    pub fn get_cloud_vm_cluster(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::GetCloudVmCluster {
        super::builder::oracle_database::GetCloudVmCluster::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new VM Cluster in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_cloud_vm_cluster(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::CreateCloudVmCluster {
        super::builder::oracle_database::CreateCloudVmCluster::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a single VM Cluster.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_cloud_vm_cluster(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::DeleteCloudVmCluster {
        super::builder::oracle_database::DeleteCloudVmCluster::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists the entitlements in a given project.
    pub fn list_entitlements(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::ListEntitlements {
        super::builder::oracle_database::ListEntitlements::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists the database servers of an Exadata Infrastructure instance.
    pub fn list_db_servers(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::ListDbServers {
        super::builder::oracle_database::ListDbServers::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists the database nodes of a VM Cluster.
    pub fn list_db_nodes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::ListDbNodes {
        super::builder::oracle_database::ListDbNodes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all the valid Oracle Grid Infrastructure (GI) versions for the given
    /// project and location.
    pub fn list_gi_versions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::ListGiVersions {
        super::builder::oracle_database::ListGiVersions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists the database system shapes available for the project and location.
    pub fn list_db_system_shapes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::ListDbSystemShapes {
        super::builder::oracle_database::ListDbSystemShapes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists the Autonomous Databases in a given project and location.
    pub fn list_autonomous_databases(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::ListAutonomousDatabases {
        super::builder::oracle_database::ListAutonomousDatabases::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets the details of a single Autonomous Database.
    pub fn get_autonomous_database(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::GetAutonomousDatabase {
        super::builder::oracle_database::GetAutonomousDatabase::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new Autonomous Database in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_autonomous_database(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::CreateAutonomousDatabase {
        super::builder::oracle_database::CreateAutonomousDatabase::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a single Autonomous Database.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_autonomous_database(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::DeleteAutonomousDatabase {
        super::builder::oracle_database::DeleteAutonomousDatabase::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Restores a single Autonomous Database.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn restore_autonomous_database(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::RestoreAutonomousDatabase {
        super::builder::oracle_database::RestoreAutonomousDatabase::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Generates a wallet for an Autonomous Database.
    pub fn generate_autonomous_database_wallet(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::GenerateAutonomousDatabaseWallet {
        super::builder::oracle_database::GenerateAutonomousDatabaseWallet::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all the available Autonomous Database versions for a project and
    /// location.
    pub fn list_autonomous_db_versions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::ListAutonomousDbVersions {
        super::builder::oracle_database::ListAutonomousDbVersions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists Autonomous Database Character Sets in a given project and location.
    pub fn list_autonomous_database_character_sets(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::ListAutonomousDatabaseCharacterSets {
        super::builder::oracle_database::ListAutonomousDatabaseCharacterSets::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Lists the long-term and automatic backups of an Autonomous Database.
    pub fn list_autonomous_database_backups(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::ListAutonomousDatabaseBackups {
        super::builder::oracle_database::ListAutonomousDatabaseBackups::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Stops an Autonomous Database.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn stop_autonomous_database(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::StopAutonomousDatabase {
        super::builder::oracle_database::StopAutonomousDatabase::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Starts an Autonomous Database.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn start_autonomous_database(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::StartAutonomousDatabase {
        super::builder::oracle_database::StartAutonomousDatabase::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Restarts an Autonomous Database.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn restart_autonomous_database(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::RestartAutonomousDatabase {
        super::builder::oracle_database::RestartAutonomousDatabase::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::ListLocations {
        super::builder::oracle_database::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::GetLocation {
        super::builder::oracle_database::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::ListOperations {
        super::builder::oracle_database::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::GetOperation {
        super::builder::oracle_database::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::DeleteOperation {
        super::builder::oracle_database::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::oracle_database::CancelOperation {
        super::builder::oracle_database::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
