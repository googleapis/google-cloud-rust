// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Oracle Database@Google Cloud API.
///
/// # Service Description
///
/// Service describing handlers for resources
///
/// # Configuration
///
/// `OracleDatabase` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `OracleDatabase` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `OracleDatabase` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct OracleDatabase {
    inner: Arc<dyn crate::stubs::dynamic::OracleDatabase>,
}

impl OracleDatabase {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::OracleDatabase + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::OracleDatabase>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::OracleDatabase> {
        crate::transport::OracleDatabase::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::OracleDatabase> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::OracleDatabase::new)
    }

    /// Lists Exadata Infrastructures in a given project and location.
    pub fn list_cloud_exadata_infrastructures(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::ListCloudExadataInfrastructures {
        crate::builders::oracle_database::ListCloudExadataInfrastructures::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single Exadata Infrastructure.
    pub fn get_cloud_exadata_infrastructure(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::GetCloudExadataInfrastructure {
        crate::builders::oracle_database::GetCloudExadataInfrastructure::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new Exadata Infrastructure in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_cloud_exadata_infrastructure(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::CreateCloudExadataInfrastructure {
        crate::builders::oracle_database::CreateCloudExadataInfrastructure::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a single Exadata Infrastructure.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_cloud_exadata_infrastructure(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::DeleteCloudExadataInfrastructure {
        crate::builders::oracle_database::DeleteCloudExadataInfrastructure::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists the VM Clusters in a given project and location.
    pub fn list_cloud_vm_clusters(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::ListCloudVmClusters {
        crate::builders::oracle_database::ListCloudVmClusters::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single VM Cluster.
    pub fn get_cloud_vm_cluster(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::GetCloudVmCluster {
        crate::builders::oracle_database::GetCloudVmCluster::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new VM Cluster in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_cloud_vm_cluster(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::CreateCloudVmCluster {
        crate::builders::oracle_database::CreateCloudVmCluster::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a single VM Cluster.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_cloud_vm_cluster(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::DeleteCloudVmCluster {
        crate::builders::oracle_database::DeleteCloudVmCluster::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists the entitlements in a given project.
    pub fn list_entitlements(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::ListEntitlements {
        crate::builders::oracle_database::ListEntitlements::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists the database servers of an Exadata Infrastructure instance.
    pub fn list_db_servers(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::ListDbServers {
        crate::builders::oracle_database::ListDbServers::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists the database nodes of a VM Cluster.
    pub fn list_db_nodes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::ListDbNodes {
        crate::builders::oracle_database::ListDbNodes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all the valid Oracle Grid Infrastructure (GI) versions for the given
    /// project and location.
    pub fn list_gi_versions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::ListGiVersions {
        crate::builders::oracle_database::ListGiVersions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists the database system shapes available for the project and location.
    pub fn list_db_system_shapes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::ListDbSystemShapes {
        crate::builders::oracle_database::ListDbSystemShapes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists the Autonomous Databases in a given project and location.
    pub fn list_autonomous_databases(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::ListAutonomousDatabases {
        crate::builders::oracle_database::ListAutonomousDatabases::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets the details of a single Autonomous Database.
    pub fn get_autonomous_database(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::GetAutonomousDatabase {
        crate::builders::oracle_database::GetAutonomousDatabase::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new Autonomous Database in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_autonomous_database(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::CreateAutonomousDatabase {
        crate::builders::oracle_database::CreateAutonomousDatabase::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a single Autonomous Database.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_autonomous_database(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::DeleteAutonomousDatabase {
        crate::builders::oracle_database::DeleteAutonomousDatabase::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Restores a single Autonomous Database.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn restore_autonomous_database(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::RestoreAutonomousDatabase {
        crate::builders::oracle_database::RestoreAutonomousDatabase::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Generates a wallet for an Autonomous Database.
    pub fn generate_autonomous_database_wallet(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::GenerateAutonomousDatabaseWallet {
        crate::builders::oracle_database::GenerateAutonomousDatabaseWallet::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all the available Autonomous Database versions for a project and
    /// location.
    pub fn list_autonomous_db_versions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::ListAutonomousDbVersions {
        crate::builders::oracle_database::ListAutonomousDbVersions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists Autonomous Database Character Sets in a given project and location.
    pub fn list_autonomous_database_character_sets(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::ListAutonomousDatabaseCharacterSets {
        crate::builders::oracle_database::ListAutonomousDatabaseCharacterSets::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Lists the long-term and automatic backups of an Autonomous Database.
    pub fn list_autonomous_database_backups(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::ListAutonomousDatabaseBackups {
        crate::builders::oracle_database::ListAutonomousDatabaseBackups::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::ListLocations {
        crate::builders::oracle_database::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::GetLocation {
        crate::builders::oracle_database::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::ListOperations {
        crate::builders::oracle_database::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::GetOperation {
        crate::builders::oracle_database::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::DeleteOperation {
        crate::builders::oracle_database::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::oracle_database::CancelOperation {
        crate::builders::oracle_database::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
