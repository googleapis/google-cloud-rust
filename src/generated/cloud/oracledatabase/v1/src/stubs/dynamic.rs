// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use std::sync::Arc;

/// A dyn-compatible, crate-private version of [super::OracleDatabase].
#[async_trait::async_trait]
pub trait OracleDatabase: std::fmt::Debug + Send + Sync {
    async fn list_cloud_exadata_infrastructures(
        &self,
        req: crate::model::ListCloudExadataInfrastructuresRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCloudExadataInfrastructuresResponse>;

    async fn get_cloud_exadata_infrastructure(
        &self,
        req: crate::model::GetCloudExadataInfrastructureRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CloudExadataInfrastructure>;

    async fn create_cloud_exadata_infrastructure(
        &self,
        req: crate::model::CreateCloudExadataInfrastructureRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_cloud_exadata_infrastructure(
        &self,
        req: crate::model::DeleteCloudExadataInfrastructureRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_cloud_vm_clusters(
        &self,
        req: crate::model::ListCloudVmClustersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCloudVmClustersResponse>;

    async fn get_cloud_vm_cluster(
        &self,
        req: crate::model::GetCloudVmClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CloudVmCluster>;

    async fn create_cloud_vm_cluster(
        &self,
        req: crate::model::CreateCloudVmClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_cloud_vm_cluster(
        &self,
        req: crate::model::DeleteCloudVmClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_entitlements(
        &self,
        req: crate::model::ListEntitlementsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListEntitlementsResponse>;

    async fn list_db_servers(
        &self,
        req: crate::model::ListDbServersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListDbServersResponse>;

    async fn list_db_nodes(
        &self,
        req: crate::model::ListDbNodesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListDbNodesResponse>;

    async fn list_gi_versions(
        &self,
        req: crate::model::ListGiVersionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListGiVersionsResponse>;

    async fn list_db_system_shapes(
        &self,
        req: crate::model::ListDbSystemShapesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListDbSystemShapesResponse>;

    async fn list_autonomous_databases(
        &self,
        req: crate::model::ListAutonomousDatabasesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAutonomousDatabasesResponse>;

    async fn get_autonomous_database(
        &self,
        req: crate::model::GetAutonomousDatabaseRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AutonomousDatabase>;

    async fn create_autonomous_database(
        &self,
        req: crate::model::CreateAutonomousDatabaseRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_autonomous_database(
        &self,
        req: crate::model::DeleteAutonomousDatabaseRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn restore_autonomous_database(
        &self,
        req: crate::model::RestoreAutonomousDatabaseRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn generate_autonomous_database_wallet(
        &self,
        req: crate::model::GenerateAutonomousDatabaseWalletRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateAutonomousDatabaseWalletResponse>;

    async fn list_autonomous_db_versions(
        &self,
        req: crate::model::ListAutonomousDbVersionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAutonomousDbVersionsResponse>;

    async fn list_autonomous_database_character_sets(
        &self,
        req: crate::model::ListAutonomousDatabaseCharacterSetsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAutonomousDatabaseCharacterSetsResponse>;

    async fn list_autonomous_database_backups(
        &self,
        req: crate::model::ListAutonomousDatabaseBackupsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAutonomousDatabaseBackupsResponse>;

    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse>;

    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location>;

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [crate::stubs::OracleDatabase] also implement [OracleDatabase].
#[async_trait::async_trait]
impl<T: crate::stubs::OracleDatabase> OracleDatabase for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn list_cloud_exadata_infrastructures(
        &self,
        req: crate::model::ListCloudExadataInfrastructuresRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCloudExadataInfrastructuresResponse> {
        T::list_cloud_exadata_infrastructures(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_cloud_exadata_infrastructure(
        &self,
        req: crate::model::GetCloudExadataInfrastructureRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CloudExadataInfrastructure> {
        T::get_cloud_exadata_infrastructure(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_cloud_exadata_infrastructure(
        &self,
        req: crate::model::CreateCloudExadataInfrastructureRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_cloud_exadata_infrastructure(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_cloud_exadata_infrastructure(
        &self,
        req: crate::model::DeleteCloudExadataInfrastructureRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_cloud_exadata_infrastructure(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_cloud_vm_clusters(
        &self,
        req: crate::model::ListCloudVmClustersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCloudVmClustersResponse> {
        T::list_cloud_vm_clusters(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_cloud_vm_cluster(
        &self,
        req: crate::model::GetCloudVmClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CloudVmCluster> {
        T::get_cloud_vm_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_cloud_vm_cluster(
        &self,
        req: crate::model::CreateCloudVmClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_cloud_vm_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_cloud_vm_cluster(
        &self,
        req: crate::model::DeleteCloudVmClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_cloud_vm_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_entitlements(
        &self,
        req: crate::model::ListEntitlementsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListEntitlementsResponse> {
        T::list_entitlements(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_db_servers(
        &self,
        req: crate::model::ListDbServersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListDbServersResponse> {
        T::list_db_servers(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_db_nodes(
        &self,
        req: crate::model::ListDbNodesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListDbNodesResponse> {
        T::list_db_nodes(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_gi_versions(
        &self,
        req: crate::model::ListGiVersionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListGiVersionsResponse> {
        T::list_gi_versions(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_db_system_shapes(
        &self,
        req: crate::model::ListDbSystemShapesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListDbSystemShapesResponse> {
        T::list_db_system_shapes(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_autonomous_databases(
        &self,
        req: crate::model::ListAutonomousDatabasesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAutonomousDatabasesResponse> {
        T::list_autonomous_databases(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_autonomous_database(
        &self,
        req: crate::model::GetAutonomousDatabaseRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AutonomousDatabase> {
        T::get_autonomous_database(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_autonomous_database(
        &self,
        req: crate::model::CreateAutonomousDatabaseRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_autonomous_database(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_autonomous_database(
        &self,
        req: crate::model::DeleteAutonomousDatabaseRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_autonomous_database(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn restore_autonomous_database(
        &self,
        req: crate::model::RestoreAutonomousDatabaseRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::restore_autonomous_database(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn generate_autonomous_database_wallet(
        &self,
        req: crate::model::GenerateAutonomousDatabaseWalletRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateAutonomousDatabaseWalletResponse> {
        T::generate_autonomous_database_wallet(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_autonomous_db_versions(
        &self,
        req: crate::model::ListAutonomousDbVersionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAutonomousDbVersionsResponse> {
        T::list_autonomous_db_versions(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_autonomous_database_character_sets(
        &self,
        req: crate::model::ListAutonomousDatabaseCharacterSetsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAutonomousDatabaseCharacterSetsResponse> {
        T::list_autonomous_database_character_sets(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_autonomous_database_backups(
        &self,
        req: crate::model::ListAutonomousDatabaseBackupsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAutonomousDatabaseBackupsResponse> {
        T::list_autonomous_database_backups(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse> {
        T::list_locations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location> {
        T::get_location(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::delete_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::cancel_operation(self, req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        T::get_polling_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}
