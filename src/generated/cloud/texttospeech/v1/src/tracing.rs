// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [TextToSpeech](super::stubs::TextToSpeech) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct TextToSpeech<T>
where
    T: super::stubs::TextToSpeech + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> TextToSpeech<T>
where
    T: super::stubs::TextToSpeech + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stubs::TextToSpeech for TextToSpeech<T>
where
    T: super::stubs::TextToSpeech + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn list_voices(
        &self,
        req: crate::model::ListVoicesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListVoicesResponse> {
        self.inner.list_voices(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn synthesize_speech(
        &self,
        req: crate::model::SynthesizeSpeechRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::SynthesizeSpeechResponse> {
        self.inner.synthesize_speech(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::ListOperationsResponse> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.get_operation(req, options).await
    }
}

/// Implements a [TextToSpeechLongAudioSynthesize](super::stubs::TextToSpeechLongAudioSynthesize) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct TextToSpeechLongAudioSynthesize<T>
where
    T: super::stubs::TextToSpeechLongAudioSynthesize + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> TextToSpeechLongAudioSynthesize<T>
where
    T: super::stubs::TextToSpeechLongAudioSynthesize + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stubs::TextToSpeechLongAudioSynthesize for TextToSpeechLongAudioSynthesize<T>
where
    T: super::stubs::TextToSpeechLongAudioSynthesize + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn synthesize_long_audio(
        &self,
        req: crate::model::SynthesizeLongAudioRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.synthesize_long_audio(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::ListOperationsResponse> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.get_operation(req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_policy::PollingPolicy> {
        self.inner.get_polling_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}
