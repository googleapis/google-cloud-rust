// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Text-to-Speech API.
///
/// # Service Description
///
/// Service that implements Google Cloud Text-to-Speech API.
///
/// # Configuration
///
/// `TextToSpeech` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `TextToSpeech` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `TextToSpeech` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct TextToSpeech {
    inner: Arc<dyn crate::stubs::dynamic::TextToSpeech>,
}

impl TextToSpeech {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::TextToSpeech + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::TextToSpeech>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::TextToSpeech> {
        crate::transport::TextToSpeech::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::TextToSpeech> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::TextToSpeech::new)
    }

    /// Returns a list of Voice supported for synthesis.
    pub fn list_voices(&self) -> crate::builders::text_to_speech::ListVoices {
        crate::builders::text_to_speech::ListVoices::new(self.inner.clone())
    }

    /// Synthesizes speech synchronously: receive results after all text input
    /// has been processed.
    pub fn synthesize_speech(&self) -> crate::builders::text_to_speech::SynthesizeSpeech {
        crate::builders::text_to_speech::SynthesizeSpeech::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::text_to_speech::ListOperations {
        crate::builders::text_to_speech::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::text_to_speech::GetOperation {
        crate::builders::text_to_speech::GetOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Cloud Text-to-Speech API.
///
/// # Service Description
///
/// Service that implements Google Cloud Text-to-Speech API.
///
/// # Configuration
///
/// `TextToSpeechLongAudioSynthesize` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `TextToSpeechLongAudioSynthesize` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `TextToSpeechLongAudioSynthesize` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct TextToSpeechLongAudioSynthesize {
    inner: Arc<dyn crate::stubs::dynamic::TextToSpeechLongAudioSynthesize>,
}

impl TextToSpeechLongAudioSynthesize {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::TextToSpeechLongAudioSynthesize + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::TextToSpeechLongAudioSynthesize>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::TextToSpeechLongAudioSynthesize> {
        crate::transport::TextToSpeechLongAudioSynthesize::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::TextToSpeechLongAudioSynthesize> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::TextToSpeechLongAudioSynthesize::new)
    }

    /// Synthesizes long form text asynchronously.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn synthesize_long_audio(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::text_to_speech_long_audio_synthesize::SynthesizeLongAudio {
        crate::builders::text_to_speech_long_audio_synthesize::SynthesizeLongAudio::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::text_to_speech_long_audio_synthesize::ListOperations {
        crate::builders::text_to_speech_long_audio_synthesize::ListOperations::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::text_to_speech_long_audio_synthesize::GetOperation {
        crate::builders::text_to_speech_long_audio_synthesize::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
