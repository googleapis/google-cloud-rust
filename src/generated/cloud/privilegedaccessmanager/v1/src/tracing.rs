// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [PrivilegedAccessManager](crate::stubs::PrivilegedAccessManager) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct PrivilegedAccessManager<T>
where
    T: crate::stubs::PrivilegedAccessManager + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> PrivilegedAccessManager<T>
where
    T: crate::stubs::PrivilegedAccessManager + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> crate::stubs::PrivilegedAccessManager for PrivilegedAccessManager<T>
where
    T: crate::stubs::PrivilegedAccessManager + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn check_onboarding_status(
        &self,
        req: crate::model::CheckOnboardingStatusRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::CheckOnboardingStatusResponse> {
        self.inner.check_onboarding_status(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_entitlements(
        &self,
        req: crate::model::ListEntitlementsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListEntitlementsResponse> {
        self.inner.list_entitlements(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn search_entitlements(
        &self,
        req: crate::model::SearchEntitlementsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::SearchEntitlementsResponse> {
        self.inner.search_entitlements(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_entitlement(
        &self,
        req: crate::model::GetEntitlementRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Entitlement> {
        self.inner.get_entitlement(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_entitlement(
        &self,
        req: crate::model::CreateEntitlementRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.create_entitlement(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_entitlement(
        &self,
        req: crate::model::DeleteEntitlementRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_entitlement(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_entitlement(
        &self,
        req: crate::model::UpdateEntitlementRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.update_entitlement(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_grants(
        &self,
        req: crate::model::ListGrantsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListGrantsResponse> {
        self.inner.list_grants(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn search_grants(
        &self,
        req: crate::model::SearchGrantsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::SearchGrantsResponse> {
        self.inner.search_grants(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_grant(
        &self,
        req: crate::model::GetGrantRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Grant> {
        self.inner.get_grant(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_grant(
        &self,
        req: crate::model::CreateGrantRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Grant> {
        self.inner.create_grant(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn approve_grant(
        &self,
        req: crate::model::ApproveGrantRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Grant> {
        self.inner.approve_grant(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn deny_grant(
        &self,
        req: crate::model::DenyGrantRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Grant> {
        self.inner.deny_grant(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn revoke_grant(
        &self,
        req: crate::model::RevokeGrantRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.revoke_grant(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<location::model::ListLocationsResponse> {
        self.inner.list_locations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<location::model::Location> {
        self.inner.get_location(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::ListOperationsResponse> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.get_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.delete_operation(req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_policy::PollingPolicy> {
        self.inner.get_polling_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}
