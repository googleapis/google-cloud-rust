// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gtype;
extern crate iam_v1;
extern crate lazy_static;
extern crate reqwest;
extern crate rpc;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Request for
/// [TroubleshootIamPolicy][google.cloud.policytroubleshooter.v1.IamChecker.TroubleshootIamPolicy].
///
/// [google.cloud.policytroubleshooter.v1.IamChecker.TroubleshootIamPolicy]: crate::client::IamChecker::troubleshoot_iam_policy
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TroubleshootIamPolicyRequest {
    /// The information to use for checking whether a principal has a permission
    /// for a resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub access_tuple: std::option::Option<crate::model::AccessTuple>,
}

impl TroubleshootIamPolicyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [access_tuple][crate::model::TroubleshootIamPolicyRequest::access_tuple].
    pub fn set_access_tuple<
        T: std::convert::Into<std::option::Option<crate::model::AccessTuple>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.access_tuple = v.into();
        self
    }
}

impl wkt::message::Message for TroubleshootIamPolicyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policytroubleshooter.v1.TroubleshootIamPolicyRequest"
    }
}

/// Response for
/// [TroubleshootIamPolicy][google.cloud.policytroubleshooter.v1.IamChecker.TroubleshootIamPolicy].
///
/// [google.cloud.policytroubleshooter.v1.IamChecker.TroubleshootIamPolicy]: crate::client::IamChecker::troubleshoot_iam_policy
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TroubleshootIamPolicyResponse {
    /// Indicates whether the principal has the specified permission for the
    /// specified resource, based on evaluating all of the applicable IAM policies.
    pub access: crate::model::AccessState,

    /// List of IAM policies that were evaluated to check the principal's
    /// permissions, with annotations to indicate how each policy contributed to
    /// the final result.
    ///
    /// The list of policies can include the policy for the resource itself. It can
    /// also include policies that are inherited from higher levels of the resource
    /// hierarchy, including the organization, the folder, and the project.
    ///
    /// To learn more about the resource hierarchy, see
    /// <https://cloud.google.com/iam/help/resource-hierarchy>.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub explained_policies: std::vec::Vec<crate::model::ExplainedPolicy>,

    /// The general errors contained in the troubleshooting response.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub errors: std::vec::Vec<rpc::model::Status>,
}

impl TroubleshootIamPolicyResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [access][crate::model::TroubleshootIamPolicyResponse::access].
    pub fn set_access<T: std::convert::Into<crate::model::AccessState>>(mut self, v: T) -> Self {
        self.access = v.into();
        self
    }

    /// Sets the value of [explained_policies][crate::model::TroubleshootIamPolicyResponse::explained_policies].
    pub fn set_explained_policies<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ExplainedPolicy>,
    {
        use std::iter::Iterator;
        self.explained_policies = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [errors][crate::model::TroubleshootIamPolicyResponse::errors].
    pub fn set_errors<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<rpc::model::Status>,
    {
        use std::iter::Iterator;
        self.errors = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TroubleshootIamPolicyResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policytroubleshooter.v1.TroubleshootIamPolicyResponse"
    }
}

/// Information about the principal, resource, and permission to check.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AccessTuple {
    /// Required. The principal whose access you want to check, in the form of
    /// the email address that represents that principal. For example,
    /// `alice@example.com` or
    /// `my-service-account@my-project.iam.gserviceaccount.com`.
    ///
    /// The principal must be a Google Account or a service account. Other types of
    /// principals are not supported.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub principal: std::string::String,

    /// Required. The full resource name that identifies the resource. For example,
    /// `//compute.googleapis.com/projects/my-project/zones/us-central1-a/instances/my-instance`.
    ///
    /// For examples of full resource names for Google Cloud services, see
    /// <https://cloud.google.com/iam/help/troubleshooter/full-resource-names>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub full_resource_name: std::string::String,

    /// Required. The IAM permission to check for the specified principal and
    /// resource.
    ///
    /// For a complete list of IAM permissions, see
    /// <https://cloud.google.com/iam/help/permissions/reference>.
    ///
    /// For a complete list of predefined IAM roles and the permissions in each
    /// role, see <https://cloud.google.com/iam/help/roles/reference>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub permission: std::string::String,
}

impl AccessTuple {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [principal][crate::model::AccessTuple::principal].
    pub fn set_principal<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.principal = v.into();
        self
    }

    /// Sets the value of [full_resource_name][crate::model::AccessTuple::full_resource_name].
    pub fn set_full_resource_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.full_resource_name = v.into();
        self
    }

    /// Sets the value of [permission][crate::model::AccessTuple::permission].
    pub fn set_permission<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.permission = v.into();
        self
    }
}

impl wkt::message::Message for AccessTuple {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policytroubleshooter.v1.AccessTuple"
    }
}

/// Details about how a specific IAM [Policy][google.iam.v1.Policy] contributed
/// to the access check.
///
/// [google.iam.v1.Policy]: iam_v1::model::Policy
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExplainedPolicy {
    /// Indicates whether _this policy_ provides the specified permission to the
    /// specified principal for the specified resource.
    ///
    /// This field does _not_ indicate whether the principal actually has the
    /// permission for the resource. There might be another policy that overrides
    /// this policy. To determine whether the principal actually has the
    /// permission, use the `access` field in the
    /// [TroubleshootIamPolicyResponse][IamChecker.TroubleshootIamPolicyResponse].
    pub access: crate::model::AccessState,

    /// The full resource name that identifies the resource. For example,
    /// `//compute.googleapis.com/projects/my-project/zones/us-central1-a/instances/my-instance`.
    ///
    /// If the sender of the request does not have access to the policy, this field
    /// is omitted.
    ///
    /// For examples of full resource names for Google Cloud services, see
    /// <https://cloud.google.com/iam/help/troubleshooter/full-resource-names>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub full_resource_name: std::string::String,

    /// The IAM policy attached to the resource.
    ///
    /// If the sender of the request does not have access to the policy, this field
    /// is empty.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub policy: std::option::Option<iam_v1::model::Policy>,

    /// Details about how each binding in the policy affects the principal's
    /// ability, or inability, to use the permission for the resource.
    ///
    /// If the sender of the request does not have access to the policy, this field
    /// is omitted.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub binding_explanations: std::vec::Vec<crate::model::BindingExplanation>,

    /// The relevance of this policy to the overall determination in the
    /// [TroubleshootIamPolicyResponse][IamChecker.TroubleshootIamPolicyResponse].
    ///
    /// If the sender of the request does not have access to the policy, this field
    /// is omitted.
    pub relevance: crate::model::HeuristicRelevance,
}

impl ExplainedPolicy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [access][crate::model::ExplainedPolicy::access].
    pub fn set_access<T: std::convert::Into<crate::model::AccessState>>(mut self, v: T) -> Self {
        self.access = v.into();
        self
    }

    /// Sets the value of [full_resource_name][crate::model::ExplainedPolicy::full_resource_name].
    pub fn set_full_resource_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.full_resource_name = v.into();
        self
    }

    /// Sets the value of [policy][crate::model::ExplainedPolicy::policy].
    pub fn set_policy<T: std::convert::Into<std::option::Option<iam_v1::model::Policy>>>(
        mut self,
        v: T,
    ) -> Self {
        self.policy = v.into();
        self
    }

    /// Sets the value of [relevance][crate::model::ExplainedPolicy::relevance].
    pub fn set_relevance<T: std::convert::Into<crate::model::HeuristicRelevance>>(
        mut self,
        v: T,
    ) -> Self {
        self.relevance = v.into();
        self
    }

    /// Sets the value of [binding_explanations][crate::model::ExplainedPolicy::binding_explanations].
    pub fn set_binding_explanations<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::BindingExplanation>,
    {
        use std::iter::Iterator;
        self.binding_explanations = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ExplainedPolicy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policytroubleshooter.v1.ExplainedPolicy"
    }
}

/// Details about how a binding in a policy affects a principal's ability to use
/// a permission.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BindingExplanation {
    /// Required. Indicates whether _this binding_ provides the specified
    /// permission to the specified principal for the specified resource.
    ///
    /// This field does _not_ indicate whether the principal actually has the
    /// permission for the resource. There might be another binding that overrides
    /// this binding. To determine whether the principal actually has the
    /// permission, use the `access` field in the
    /// [TroubleshootIamPolicyResponse][IamChecker.TroubleshootIamPolicyResponse].
    pub access: crate::model::AccessState,

    /// The role that this binding grants. For example,
    /// `roles/compute.serviceAgent`.
    ///
    /// For a complete list of predefined IAM roles, as well as the permissions in
    /// each role, see <https://cloud.google.com/iam/help/roles/reference>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub role: std::string::String,

    /// Indicates whether the role granted by this binding contains the specified
    /// permission.
    pub role_permission: crate::model::binding_explanation::RolePermission,

    /// The relevance of the permission's existence, or nonexistence, in the role
    /// to the overall determination for the entire policy.
    pub role_permission_relevance: crate::model::HeuristicRelevance,

    /// Indicates whether each principal in the binding includes the principal
    /// specified in the request, either directly or indirectly. Each key
    /// identifies a principal in the binding, and each value indicates whether the
    /// principal in the binding includes the principal in the request.
    ///
    /// For example, suppose that a binding includes the following principals:
    ///
    /// * `user:alice@example.com`
    /// * `group:product-eng@example.com`
    ///
    /// You want to troubleshoot access for `user:bob@example.com`. This user is a
    /// principal of the group `group:product-eng@example.com`.
    ///
    /// For the first principal in the binding, the key is
    /// `user:alice@example.com`, and the `membership` field in the value is set to
    /// `MEMBERSHIP_NOT_INCLUDED`.
    ///
    /// For the second principal in the binding, the key is
    /// `group:product-eng@example.com`, and the `membership` field in the value is
    /// set to `MEMBERSHIP_INCLUDED`.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub memberships: std::collections::HashMap<
        std::string::String,
        crate::model::binding_explanation::AnnotatedMembership,
    >,

    /// The relevance of this binding to the overall determination for the entire
    /// policy.
    pub relevance: crate::model::HeuristicRelevance,

    /// A condition expression that prevents this binding from granting access
    /// unless the expression evaluates to `true`.
    ///
    /// To learn about IAM Conditions, see
    /// <https://cloud.google.com/iam/help/conditions/overview>.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub condition: std::option::Option<gtype::model::Expr>,
}

impl BindingExplanation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [access][crate::model::BindingExplanation::access].
    pub fn set_access<T: std::convert::Into<crate::model::AccessState>>(mut self, v: T) -> Self {
        self.access = v.into();
        self
    }

    /// Sets the value of [role][crate::model::BindingExplanation::role].
    pub fn set_role<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.role = v.into();
        self
    }

    /// Sets the value of [role_permission][crate::model::BindingExplanation::role_permission].
    pub fn set_role_permission<
        T: std::convert::Into<crate::model::binding_explanation::RolePermission>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.role_permission = v.into();
        self
    }

    /// Sets the value of [role_permission_relevance][crate::model::BindingExplanation::role_permission_relevance].
    pub fn set_role_permission_relevance<
        T: std::convert::Into<crate::model::HeuristicRelevance>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.role_permission_relevance = v.into();
        self
    }

    /// Sets the value of [relevance][crate::model::BindingExplanation::relevance].
    pub fn set_relevance<T: std::convert::Into<crate::model::HeuristicRelevance>>(
        mut self,
        v: T,
    ) -> Self {
        self.relevance = v.into();
        self
    }

    /// Sets the value of [condition][crate::model::BindingExplanation::condition].
    pub fn set_condition<T: std::convert::Into<std::option::Option<gtype::model::Expr>>>(
        mut self,
        v: T,
    ) -> Self {
        self.condition = v.into();
        self
    }

    /// Sets the value of [memberships][crate::model::BindingExplanation::memberships].
    pub fn set_memberships<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::binding_explanation::AnnotatedMembership>,
    {
        use std::iter::Iterator;
        self.memberships = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for BindingExplanation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.policytroubleshooter.v1.BindingExplanation"
    }
}

/// Defines additional types related to BindingExplanation
pub mod binding_explanation {
    #[allow(unused_imports)]
    use super::*;

    /// Details about whether the binding includes the principal.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AnnotatedMembership {
        /// Indicates whether the binding includes the principal.
        pub membership: crate::model::binding_explanation::Membership,

        /// The relevance of the principal's status to the overall determination for
        /// the binding.
        pub relevance: crate::model::HeuristicRelevance,
    }

    impl AnnotatedMembership {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [membership][crate::model::binding_explanation::AnnotatedMembership::membership].
        pub fn set_membership<
            T: std::convert::Into<crate::model::binding_explanation::Membership>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.membership = v.into();
            self
        }

        /// Sets the value of [relevance][crate::model::binding_explanation::AnnotatedMembership::relevance].
        pub fn set_relevance<T: std::convert::Into<crate::model::HeuristicRelevance>>(
            mut self,
            v: T,
        ) -> Self {
            self.relevance = v.into();
            self
        }
    }

    impl wkt::message::Message for AnnotatedMembership {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.policytroubleshooter.v1.BindingExplanation.AnnotatedMembership"
        }
    }

    /// Whether a role includes a specific permission.
    #[derive(Clone, Debug, PartialEq)]
    pub struct RolePermission(wkt::enumerations::Enumeration);

    /// Useful constants to work with [RolePermission](RolePermission)
    pub mod role_permission {
        use super::RolePermission;

        /// Default value. This value is unused.
        pub const ROLE_PERMISSION_UNSPECIFIED: RolePermission =
            RolePermission::known("ROLE_PERMISSION_UNSPECIFIED", 0);

        /// The permission is included in the role.
        pub const ROLE_PERMISSION_INCLUDED: RolePermission =
            RolePermission::known("ROLE_PERMISSION_INCLUDED", 1);

        /// The permission is not included in the role.
        pub const ROLE_PERMISSION_NOT_INCLUDED: RolePermission =
            RolePermission::known("ROLE_PERMISSION_NOT_INCLUDED", 2);

        /// The sender of the request is not allowed to access the binding.
        pub const ROLE_PERMISSION_UNKNOWN_INFO_DENIED: RolePermission =
            RolePermission::known("ROLE_PERMISSION_UNKNOWN_INFO_DENIED", 3);
    }

    impl RolePermission {
        pub(crate) const fn known(str: &'static str, val: i32) -> Self {
            Self(wkt::enumerations::Enumeration::known(str, val))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            self.0.value()
        }

        /// Gets the numeric value of the enum (if available).
        pub fn numeric_value(&self) -> std::option::Option<i32> {
            self.0.numeric_value()
        }
    }

    impl serde::ser::Serialize for RolePermission {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::ser::Serializer,
        {
            self.0.serialize(serializer)
        }
    }

    impl<'de> serde::de::Deserialize<'de> for RolePermission {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            use std::convert::From;
            use std::result::Result::Ok;
            use wkt::enumerations::Enumeration;
            match Enumeration::deserialize(deserializer)? {
                Enumeration::Known { str: _, val } => Ok(RolePermission::from(val)),
                Enumeration::UnknownStr { val, str: _ } => Ok(RolePermission::from(val)),
                Enumeration::UnknownNum { str } => Ok(RolePermission::from(str)),
            }
        }
    }

    impl std::convert::From<std::string::String> for RolePermission {
        fn from(value: std::string::String) -> Self {
            match value.as_str() {
                "ROLE_PERMISSION_UNSPECIFIED" => role_permission::ROLE_PERMISSION_UNSPECIFIED,
                "ROLE_PERMISSION_INCLUDED" => role_permission::ROLE_PERMISSION_INCLUDED,
                "ROLE_PERMISSION_NOT_INCLUDED" => role_permission::ROLE_PERMISSION_NOT_INCLUDED,
                "ROLE_PERMISSION_UNKNOWN_INFO_DENIED" => {
                    role_permission::ROLE_PERMISSION_UNKNOWN_INFO_DENIED
                }
                _ => Self(wkt::enumerations::Enumeration::known_str(value)),
            }
        }
    }

    impl std::convert::From<i32> for RolePermission {
        fn from(value: i32) -> Self {
            match value {
                0 => role_permission::ROLE_PERMISSION_UNSPECIFIED,
                1 => role_permission::ROLE_PERMISSION_INCLUDED,
                2 => role_permission::ROLE_PERMISSION_NOT_INCLUDED,
                3 => role_permission::ROLE_PERMISSION_UNKNOWN_INFO_DENIED,
                _ => Self(wkt::enumerations::Enumeration::known_num(value)),
            }
        }
    }

    impl std::default::Default for RolePermission {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0_i32)
        }
    }

    /// Whether the binding includes the principal.
    #[derive(Clone, Debug, PartialEq)]
    pub struct Membership(wkt::enumerations::Enumeration);

    /// Useful constants to work with [Membership](Membership)
    pub mod membership {
        use super::Membership;

        /// Default value. This value is unused.
        pub const MEMBERSHIP_UNSPECIFIED: Membership =
            Membership::known("MEMBERSHIP_UNSPECIFIED", 0);

        /// The binding includes the principal. The principal can be included
        /// directly or indirectly. For example:
        ///
        /// * A principal is included directly if that principal is listed in the
        ///   binding.
        /// * A principal is included indirectly if that principal is in a Google
        ///   group or Google Workspace domain that is listed in the binding.
        pub const MEMBERSHIP_INCLUDED: Membership = Membership::known("MEMBERSHIP_INCLUDED", 1);

        /// The binding does not include the principal.
        pub const MEMBERSHIP_NOT_INCLUDED: Membership =
            Membership::known("MEMBERSHIP_NOT_INCLUDED", 2);

        /// The sender of the request is not allowed to access the binding.
        pub const MEMBERSHIP_UNKNOWN_INFO_DENIED: Membership =
            Membership::known("MEMBERSHIP_UNKNOWN_INFO_DENIED", 3);

        /// The principal is an unsupported type. Only Google Accounts and service
        /// accounts are supported.
        pub const MEMBERSHIP_UNKNOWN_UNSUPPORTED: Membership =
            Membership::known("MEMBERSHIP_UNKNOWN_UNSUPPORTED", 4);
    }

    impl Membership {
        pub(crate) const fn known(str: &'static str, val: i32) -> Self {
            Self(wkt::enumerations::Enumeration::known(str, val))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            self.0.value()
        }

        /// Gets the numeric value of the enum (if available).
        pub fn numeric_value(&self) -> std::option::Option<i32> {
            self.0.numeric_value()
        }
    }

    impl serde::ser::Serialize for Membership {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::ser::Serializer,
        {
            self.0.serialize(serializer)
        }
    }

    impl<'de> serde::de::Deserialize<'de> for Membership {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            use std::convert::From;
            use std::result::Result::Ok;
            use wkt::enumerations::Enumeration;
            match Enumeration::deserialize(deserializer)? {
                Enumeration::Known { str: _, val } => Ok(Membership::from(val)),
                Enumeration::UnknownStr { val, str: _ } => Ok(Membership::from(val)),
                Enumeration::UnknownNum { str } => Ok(Membership::from(str)),
            }
        }
    }

    impl std::convert::From<std::string::String> for Membership {
        fn from(value: std::string::String) -> Self {
            match value.as_str() {
                "MEMBERSHIP_UNSPECIFIED" => membership::MEMBERSHIP_UNSPECIFIED,
                "MEMBERSHIP_INCLUDED" => membership::MEMBERSHIP_INCLUDED,
                "MEMBERSHIP_NOT_INCLUDED" => membership::MEMBERSHIP_NOT_INCLUDED,
                "MEMBERSHIP_UNKNOWN_INFO_DENIED" => membership::MEMBERSHIP_UNKNOWN_INFO_DENIED,
                "MEMBERSHIP_UNKNOWN_UNSUPPORTED" => membership::MEMBERSHIP_UNKNOWN_UNSUPPORTED,
                _ => Self(wkt::enumerations::Enumeration::known_str(value)),
            }
        }
    }

    impl std::convert::From<i32> for Membership {
        fn from(value: i32) -> Self {
            match value {
                0 => membership::MEMBERSHIP_UNSPECIFIED,
                1 => membership::MEMBERSHIP_INCLUDED,
                2 => membership::MEMBERSHIP_NOT_INCLUDED,
                3 => membership::MEMBERSHIP_UNKNOWN_INFO_DENIED,
                4 => membership::MEMBERSHIP_UNKNOWN_UNSUPPORTED,
                _ => Self(wkt::enumerations::Enumeration::known_num(value)),
            }
        }
    }

    impl std::default::Default for Membership {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0_i32)
        }
    }
}

/// Whether a principal has a permission for a resource.
#[derive(Clone, Debug, PartialEq)]
pub struct AccessState(wkt::enumerations::Enumeration);

/// Useful constants to work with [AccessState](AccessState)
pub mod access_state {
    use super::AccessState;

    /// Default value. This value is unused.
    pub const ACCESS_STATE_UNSPECIFIED: AccessState =
        AccessState::known("ACCESS_STATE_UNSPECIFIED", 0);

    /// The principal has the permission.
    pub const GRANTED: AccessState = AccessState::known("GRANTED", 1);

    /// The principal does not have the permission.
    pub const NOT_GRANTED: AccessState = AccessState::known("NOT_GRANTED", 2);

    /// The principal has the permission only if a condition expression evaluates
    /// to `true`.
    pub const UNKNOWN_CONDITIONAL: AccessState = AccessState::known("UNKNOWN_CONDITIONAL", 3);

    /// The sender of the request does not have access to all of the policies that
    /// Policy Troubleshooter needs to evaluate.
    pub const UNKNOWN_INFO_DENIED: AccessState = AccessState::known("UNKNOWN_INFO_DENIED", 4);
}

impl AccessState {
    pub(crate) const fn known(str: &'static str, val: i32) -> Self {
        Self(wkt::enumerations::Enumeration::known(str, val))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        self.0.value()
    }

    /// Gets the numeric value of the enum (if available).
    pub fn numeric_value(&self) -> std::option::Option<i32> {
        self.0.numeric_value()
    }
}

impl serde::ser::Serialize for AccessState {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        self.0.serialize(serializer)
    }
}

impl<'de> serde::de::Deserialize<'de> for AccessState {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        use std::convert::From;
        use std::result::Result::Ok;
        use wkt::enumerations::Enumeration;
        match Enumeration::deserialize(deserializer)? {
            Enumeration::Known { str: _, val } => Ok(AccessState::from(val)),
            Enumeration::UnknownStr { val, str: _ } => Ok(AccessState::from(val)),
            Enumeration::UnknownNum { str } => Ok(AccessState::from(str)),
        }
    }
}

impl std::convert::From<std::string::String> for AccessState {
    fn from(value: std::string::String) -> Self {
        match value.as_str() {
            "ACCESS_STATE_UNSPECIFIED" => access_state::ACCESS_STATE_UNSPECIFIED,
            "GRANTED" => access_state::GRANTED,
            "NOT_GRANTED" => access_state::NOT_GRANTED,
            "UNKNOWN_CONDITIONAL" => access_state::UNKNOWN_CONDITIONAL,
            "UNKNOWN_INFO_DENIED" => access_state::UNKNOWN_INFO_DENIED,
            _ => Self(wkt::enumerations::Enumeration::known_str(value)),
        }
    }
}

impl std::convert::From<i32> for AccessState {
    fn from(value: i32) -> Self {
        match value {
            0 => access_state::ACCESS_STATE_UNSPECIFIED,
            1 => access_state::GRANTED,
            2 => access_state::NOT_GRANTED,
            3 => access_state::UNKNOWN_CONDITIONAL,
            4 => access_state::UNKNOWN_INFO_DENIED,
            _ => Self(wkt::enumerations::Enumeration::known_num(value)),
        }
    }
}

impl std::default::Default for AccessState {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0_i32)
    }
}

/// The extent to which a single data point, such as the existence of a binding
/// or whether a binding includes a specific principal, contributes to an overall
/// determination.
#[derive(Clone, Debug, PartialEq)]
pub struct HeuristicRelevance(wkt::enumerations::Enumeration);

/// Useful constants to work with [HeuristicRelevance](HeuristicRelevance)
pub mod heuristic_relevance {
    use super::HeuristicRelevance;

    /// Default value. This value is unused.
    pub const HEURISTIC_RELEVANCE_UNSPECIFIED: HeuristicRelevance =
        HeuristicRelevance::known("HEURISTIC_RELEVANCE_UNSPECIFIED", 0);

    /// The data point has a limited effect on the result. Changing the data point
    /// is unlikely to affect the overall determination.
    pub const NORMAL: HeuristicRelevance = HeuristicRelevance::known("NORMAL", 1);

    /// The data point has a strong effect on the result. Changing the data point
    /// is likely to affect the overall determination.
    pub const HIGH: HeuristicRelevance = HeuristicRelevance::known("HIGH", 2);
}

impl HeuristicRelevance {
    pub(crate) const fn known(str: &'static str, val: i32) -> Self {
        Self(wkt::enumerations::Enumeration::known(str, val))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        self.0.value()
    }

    /// Gets the numeric value of the enum (if available).
    pub fn numeric_value(&self) -> std::option::Option<i32> {
        self.0.numeric_value()
    }
}

impl serde::ser::Serialize for HeuristicRelevance {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::ser::Serializer,
    {
        self.0.serialize(serializer)
    }
}

impl<'de> serde::de::Deserialize<'de> for HeuristicRelevance {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        use std::convert::From;
        use std::result::Result::Ok;
        use wkt::enumerations::Enumeration;
        match Enumeration::deserialize(deserializer)? {
            Enumeration::Known { str: _, val } => Ok(HeuristicRelevance::from(val)),
            Enumeration::UnknownStr { val, str: _ } => Ok(HeuristicRelevance::from(val)),
            Enumeration::UnknownNum { str } => Ok(HeuristicRelevance::from(str)),
        }
    }
}

impl std::convert::From<std::string::String> for HeuristicRelevance {
    fn from(value: std::string::String) -> Self {
        match value.as_str() {
            "HEURISTIC_RELEVANCE_UNSPECIFIED" => {
                heuristic_relevance::HEURISTIC_RELEVANCE_UNSPECIFIED
            }
            "NORMAL" => heuristic_relevance::NORMAL,
            "HIGH" => heuristic_relevance::HIGH,
            _ => Self(wkt::enumerations::Enumeration::known_str(value)),
        }
    }
}

impl std::convert::From<i32> for HeuristicRelevance {
    fn from(value: i32) -> Self {
        match value {
            0 => heuristic_relevance::HEURISTIC_RELEVANCE_UNSPECIFIED,
            1 => heuristic_relevance::NORMAL,
            2 => heuristic_relevance::HIGH,
            _ => Self(wkt::enumerations::Enumeration::known_num(value)),
        }
    }
}

impl std::default::Default for HeuristicRelevance {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0_i32)
    }
}
