// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate lazy_static;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Finishes enrolling a second factor for the user.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FinalizeMfaEnrollmentRequest {
    /// Required. ID token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id_token: std::string::String,

    /// Display name which is entered  by users to distinguish between different
    /// second factors with same type or different type.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// The ID of the Identity Platform tenant that the user enrolling MFA belongs
    /// to. If not set, the user belongs to the default Identity Platform project.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub tenant_id: std::string::String,

    /// MFA enrollment information to be verified.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub verification_info:
        std::option::Option<crate::model::finalize_mfa_enrollment_request::VerificationInfo>,
}

impl FinalizeMfaEnrollmentRequest {
    /// Sets the value of [id_token][crate::model::FinalizeMfaEnrollmentRequest::id_token].
    pub fn set_id_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id_token = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::FinalizeMfaEnrollmentRequest::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [tenant_id][crate::model::FinalizeMfaEnrollmentRequest::tenant_id].
    pub fn set_tenant_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.tenant_id = v.into();
        self
    }

    /// Sets the value of `verification_info`.
    pub fn set_verification_info<
        T: std::convert::Into<
            std::option::Option<crate::model::finalize_mfa_enrollment_request::VerificationInfo>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.verification_info = v.into();
        self
    }

    /// The value of [verification_info][crate::model::FinalizeMfaEnrollmentRequest::verification_info]
    /// if it holds a `PhoneVerificationInfo`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_phone_verification_info(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::FinalizeMfaPhoneRequestInfo>> {
        #[allow(unreachable_patterns)]
        self.verification_info.as_ref().and_then(|v| match v {
            crate::model::finalize_mfa_enrollment_request::VerificationInfo::PhoneVerificationInfo(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [verification_info][crate::model::FinalizeMfaEnrollmentRequest::verification_info]
    /// to hold a `PhoneVerificationInfo`.
    ///
    /// Note that all the setters affecting `verification_info` are
    /// mutually exclusive.
    pub fn set_phone_verification_info<
        T: std::convert::Into<std::boxed::Box<crate::model::FinalizeMfaPhoneRequestInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.verification_info = std::option::Option::Some(
            crate::model::finalize_mfa_enrollment_request::VerificationInfo::PhoneVerificationInfo(
                v.into(),
            ),
        );
        self
    }
}

impl wkt::message::Message for FinalizeMfaEnrollmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.identitytoolkit.v2.FinalizeMfaEnrollmentRequest"
    }
}

/// Defines additional types related to FinalizeMfaEnrollmentRequest
pub mod finalize_mfa_enrollment_request {
    #[allow(unused_imports)]
    use super::*;

    /// MFA enrollment information to be verified.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum VerificationInfo {
        /// Verification info to authorize sending an SMS for phone verification.
        PhoneVerificationInfo(std::boxed::Box<crate::model::FinalizeMfaPhoneRequestInfo>),
    }
}

/// FinalizeMfaEnrollment response.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FinalizeMfaEnrollmentResponse {
    /// ID token updated to reflect MFA enrollment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id_token: std::string::String,

    /// Refresh token updated to reflect MFA enrollment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub refresh_token: std::string::String,

    /// MFA verified enrollment information.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub auxiliary_auth_info:
        std::option::Option<crate::model::finalize_mfa_enrollment_response::AuxiliaryAuthInfo>,
}

impl FinalizeMfaEnrollmentResponse {
    /// Sets the value of [id_token][crate::model::FinalizeMfaEnrollmentResponse::id_token].
    pub fn set_id_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id_token = v.into();
        self
    }

    /// Sets the value of [refresh_token][crate::model::FinalizeMfaEnrollmentResponse::refresh_token].
    pub fn set_refresh_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.refresh_token = v.into();
        self
    }

    /// Sets the value of `auxiliary_auth_info`.
    pub fn set_auxiliary_auth_info<
        T: std::convert::Into<
            std::option::Option<crate::model::finalize_mfa_enrollment_response::AuxiliaryAuthInfo>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.auxiliary_auth_info = v.into();
        self
    }

    /// The value of [auxiliary_auth_info][crate::model::FinalizeMfaEnrollmentResponse::auxiliary_auth_info]
    /// if it holds a `PhoneAuthInfo`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_phone_auth_info(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::FinalizeMfaPhoneResponseInfo>> {
        #[allow(unreachable_patterns)]
        self.auxiliary_auth_info.as_ref().and_then(|v| match v {
            crate::model::finalize_mfa_enrollment_response::AuxiliaryAuthInfo::PhoneAuthInfo(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [auxiliary_auth_info][crate::model::FinalizeMfaEnrollmentResponse::auxiliary_auth_info]
    /// to hold a `PhoneAuthInfo`.
    ///
    /// Note that all the setters affecting `auxiliary_auth_info` are
    /// mutually exclusive.
    pub fn set_phone_auth_info<
        T: std::convert::Into<std::boxed::Box<crate::model::FinalizeMfaPhoneResponseInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.auxiliary_auth_info = std::option::Option::Some(
            crate::model::finalize_mfa_enrollment_response::AuxiliaryAuthInfo::PhoneAuthInfo(
                v.into(),
            ),
        );
        self
    }
}

impl wkt::message::Message for FinalizeMfaEnrollmentResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.identitytoolkit.v2.FinalizeMfaEnrollmentResponse"
    }
}

/// Defines additional types related to FinalizeMfaEnrollmentResponse
pub mod finalize_mfa_enrollment_response {
    #[allow(unused_imports)]
    use super::*;

    /// MFA verified enrollment information.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum AuxiliaryAuthInfo {
        /// Auxiliary auth info specific to phone auth.
        PhoneAuthInfo(std::boxed::Box<crate::model::FinalizeMfaPhoneResponseInfo>),
    }
}

/// Sends MFA enrollment verification SMS for a user.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StartMfaEnrollmentRequest {
    /// Required. User's ID token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id_token: std::string::String,

    /// The ID of the Identity Platform tenant that the user enrolling MFA belongs
    /// to. If not set, the user belongs to the default Identity Platform project.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub tenant_id: std::string::String,

    /// MFA information by type of 2nd factor.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub enrollment_info:
        std::option::Option<crate::model::start_mfa_enrollment_request::EnrollmentInfo>,
}

impl StartMfaEnrollmentRequest {
    /// Sets the value of [id_token][crate::model::StartMfaEnrollmentRequest::id_token].
    pub fn set_id_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id_token = v.into();
        self
    }

    /// Sets the value of [tenant_id][crate::model::StartMfaEnrollmentRequest::tenant_id].
    pub fn set_tenant_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.tenant_id = v.into();
        self
    }

    /// Sets the value of `enrollment_info`.
    pub fn set_enrollment_info<
        T: std::convert::Into<
            std::option::Option<crate::model::start_mfa_enrollment_request::EnrollmentInfo>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.enrollment_info = v.into();
        self
    }

    /// The value of [enrollment_info][crate::model::StartMfaEnrollmentRequest::enrollment_info]
    /// if it holds a `PhoneEnrollmentInfo`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_phone_enrollment_info(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::StartMfaPhoneRequestInfo>> {
        #[allow(unreachable_patterns)]
        self.enrollment_info.as_ref().and_then(|v| match v {
            crate::model::start_mfa_enrollment_request::EnrollmentInfo::PhoneEnrollmentInfo(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [enrollment_info][crate::model::StartMfaEnrollmentRequest::enrollment_info]
    /// to hold a `PhoneEnrollmentInfo`.
    ///
    /// Note that all the setters affecting `enrollment_info` are
    /// mutually exclusive.
    pub fn set_phone_enrollment_info<
        T: std::convert::Into<std::boxed::Box<crate::model::StartMfaPhoneRequestInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.enrollment_info = std::option::Option::Some(
            crate::model::start_mfa_enrollment_request::EnrollmentInfo::PhoneEnrollmentInfo(
                v.into(),
            ),
        );
        self
    }
}

impl wkt::message::Message for StartMfaEnrollmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.identitytoolkit.v2.StartMfaEnrollmentRequest"
    }
}

/// Defines additional types related to StartMfaEnrollmentRequest
pub mod start_mfa_enrollment_request {
    #[allow(unused_imports)]
    use super::*;

    /// MFA information by type of 2nd factor.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum EnrollmentInfo {
        /// Verification info to authorize sending an SMS for phone verification.
        PhoneEnrollmentInfo(std::boxed::Box<crate::model::StartMfaPhoneRequestInfo>),
    }
}

/// StartMfaEnrollment response.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StartMfaEnrollmentResponse {
    /// MFA start enrollment response by 2nd factor type.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub enrollment_response:
        std::option::Option<crate::model::start_mfa_enrollment_response::EnrollmentResponse>,
}

impl StartMfaEnrollmentResponse {
    /// Sets the value of `enrollment_response`.
    pub fn set_enrollment_response<
        T: std::convert::Into<
            std::option::Option<crate::model::start_mfa_enrollment_response::EnrollmentResponse>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.enrollment_response = v.into();
        self
    }

    /// The value of [enrollment_response][crate::model::StartMfaEnrollmentResponse::enrollment_response]
    /// if it holds a `PhoneSessionInfo`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_phone_session_info(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::StartMfaPhoneResponseInfo>> {
        #[allow(unreachable_patterns)]
        self.enrollment_response.as_ref().and_then(|v| match v {
            crate::model::start_mfa_enrollment_response::EnrollmentResponse::PhoneSessionInfo(
                v,
            ) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [enrollment_response][crate::model::StartMfaEnrollmentResponse::enrollment_response]
    /// to hold a `PhoneSessionInfo`.
    ///
    /// Note that all the setters affecting `enrollment_response` are
    /// mutually exclusive.
    pub fn set_phone_session_info<
        T: std::convert::Into<std::boxed::Box<crate::model::StartMfaPhoneResponseInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.enrollment_response = std::option::Option::Some(
            crate::model::start_mfa_enrollment_response::EnrollmentResponse::PhoneSessionInfo(
                v.into(),
            ),
        );
        self
    }
}

impl wkt::message::Message for StartMfaEnrollmentResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.identitytoolkit.v2.StartMfaEnrollmentResponse"
    }
}

/// Defines additional types related to StartMfaEnrollmentResponse
pub mod start_mfa_enrollment_response {
    #[allow(unused_imports)]
    use super::*;

    /// MFA start enrollment response by 2nd factor type.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum EnrollmentResponse {
        /// Verification info to authorize sending an SMS for phone verification.
        PhoneSessionInfo(std::boxed::Box<crate::model::StartMfaPhoneResponseInfo>),
    }
}

/// Withdraws MFA.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct WithdrawMfaRequest {
    /// Required. User's ID token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id_token: std::string::String,

    /// Required. MFA enrollment id from a current MFA enrollment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub mfa_enrollment_id: std::string::String,

    /// The ID of the Identity Platform tenant that the user unenrolling MFA
    /// belongs to. If not set, the user belongs to the default Identity Platform
    /// project.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub tenant_id: std::string::String,
}

impl WithdrawMfaRequest {
    /// Sets the value of [id_token][crate::model::WithdrawMfaRequest::id_token].
    pub fn set_id_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id_token = v.into();
        self
    }

    /// Sets the value of [mfa_enrollment_id][crate::model::WithdrawMfaRequest::mfa_enrollment_id].
    pub fn set_mfa_enrollment_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.mfa_enrollment_id = v.into();
        self
    }

    /// Sets the value of [tenant_id][crate::model::WithdrawMfaRequest::tenant_id].
    pub fn set_tenant_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.tenant_id = v.into();
        self
    }
}

impl wkt::message::Message for WithdrawMfaRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.identitytoolkit.v2.WithdrawMfaRequest"
    }
}

/// Withdraws MultiFactorAuth response.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct WithdrawMfaResponse {
    /// ID token updated to reflect removal of the second factor.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id_token: std::string::String,

    /// Refresh token updated to reflect removal of the second factor.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub refresh_token: std::string::String,
}

impl WithdrawMfaResponse {
    /// Sets the value of [id_token][crate::model::WithdrawMfaResponse::id_token].
    pub fn set_id_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id_token = v.into();
        self
    }

    /// Sets the value of [refresh_token][crate::model::WithdrawMfaResponse::refresh_token].
    pub fn set_refresh_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.refresh_token = v.into();
        self
    }
}

impl wkt::message::Message for WithdrawMfaResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.identitytoolkit.v2.WithdrawMfaResponse"
    }
}

/// Finalizes sign-in by verifying MFA challenge.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FinalizeMfaSignInRequest {
    /// Required. Pending credential from first factor sign-in.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub mfa_pending_credential: std::string::String,

    /// The ID of the Identity Platform tenant the user is signing in to. If not
    /// set, the user will sign in to the default Identity Platform project.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub tenant_id: std::string::String,

    /// Proof of completion of the MFA challenge.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub verification_info:
        std::option::Option<crate::model::finalize_mfa_sign_in_request::VerificationInfo>,
}

impl FinalizeMfaSignInRequest {
    /// Sets the value of [mfa_pending_credential][crate::model::FinalizeMfaSignInRequest::mfa_pending_credential].
    pub fn set_mfa_pending_credential<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.mfa_pending_credential = v.into();
        self
    }

    /// Sets the value of [tenant_id][crate::model::FinalizeMfaSignInRequest::tenant_id].
    pub fn set_tenant_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.tenant_id = v.into();
        self
    }

    /// Sets the value of `verification_info`.
    pub fn set_verification_info<
        T: std::convert::Into<
            std::option::Option<crate::model::finalize_mfa_sign_in_request::VerificationInfo>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.verification_info = v.into();
        self
    }

    /// The value of [verification_info][crate::model::FinalizeMfaSignInRequest::verification_info]
    /// if it holds a `PhoneVerificationInfo`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_phone_verification_info(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::FinalizeMfaPhoneRequestInfo>> {
        #[allow(unreachable_patterns)]
        self.verification_info.as_ref().and_then(|v| match v {
            crate::model::finalize_mfa_sign_in_request::VerificationInfo::PhoneVerificationInfo(
                v,
            ) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [verification_info][crate::model::FinalizeMfaSignInRequest::verification_info]
    /// to hold a `PhoneVerificationInfo`.
    ///
    /// Note that all the setters affecting `verification_info` are
    /// mutually exclusive.
    pub fn set_phone_verification_info<
        T: std::convert::Into<std::boxed::Box<crate::model::FinalizeMfaPhoneRequestInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.verification_info = std::option::Option::Some(
            crate::model::finalize_mfa_sign_in_request::VerificationInfo::PhoneVerificationInfo(
                v.into(),
            ),
        );
        self
    }
}

impl wkt::message::Message for FinalizeMfaSignInRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.identitytoolkit.v2.FinalizeMfaSignInRequest"
    }
}

/// Defines additional types related to FinalizeMfaSignInRequest
pub mod finalize_mfa_sign_in_request {
    #[allow(unused_imports)]
    use super::*;

    /// Proof of completion of the MFA challenge.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum VerificationInfo {
        /// Proof of completion of the SMS based MFA challenge.
        PhoneVerificationInfo(std::boxed::Box<crate::model::FinalizeMfaPhoneRequestInfo>),
    }
}

/// FinalizeMfaSignIn response.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FinalizeMfaSignInResponse {
    /// ID token for the authenticated user.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id_token: std::string::String,

    /// Refresh token for the authenticated user.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub refresh_token: std::string::String,

    /// MFA verified sign-in information.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub auxiliary_auth_info:
        std::option::Option<crate::model::finalize_mfa_sign_in_response::AuxiliaryAuthInfo>,
}

impl FinalizeMfaSignInResponse {
    /// Sets the value of [id_token][crate::model::FinalizeMfaSignInResponse::id_token].
    pub fn set_id_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id_token = v.into();
        self
    }

    /// Sets the value of [refresh_token][crate::model::FinalizeMfaSignInResponse::refresh_token].
    pub fn set_refresh_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.refresh_token = v.into();
        self
    }

    /// Sets the value of `auxiliary_auth_info`.
    pub fn set_auxiliary_auth_info<
        T: std::convert::Into<
            std::option::Option<crate::model::finalize_mfa_sign_in_response::AuxiliaryAuthInfo>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.auxiliary_auth_info = v.into();
        self
    }

    /// The value of [auxiliary_auth_info][crate::model::FinalizeMfaSignInResponse::auxiliary_auth_info]
    /// if it holds a `PhoneAuthInfo`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_phone_auth_info(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::FinalizeMfaPhoneResponseInfo>> {
        #[allow(unreachable_patterns)]
        self.auxiliary_auth_info.as_ref().and_then(|v| match v {
            crate::model::finalize_mfa_sign_in_response::AuxiliaryAuthInfo::PhoneAuthInfo(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [auxiliary_auth_info][crate::model::FinalizeMfaSignInResponse::auxiliary_auth_info]
    /// to hold a `PhoneAuthInfo`.
    ///
    /// Note that all the setters affecting `auxiliary_auth_info` are
    /// mutually exclusive.
    pub fn set_phone_auth_info<
        T: std::convert::Into<std::boxed::Box<crate::model::FinalizeMfaPhoneResponseInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.auxiliary_auth_info = std::option::Option::Some(
            crate::model::finalize_mfa_sign_in_response::AuxiliaryAuthInfo::PhoneAuthInfo(v.into()),
        );
        self
    }
}

impl wkt::message::Message for FinalizeMfaSignInResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.identitytoolkit.v2.FinalizeMfaSignInResponse"
    }
}

/// Defines additional types related to FinalizeMfaSignInResponse
pub mod finalize_mfa_sign_in_response {
    #[allow(unused_imports)]
    use super::*;

    /// MFA verified sign-in information.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum AuxiliaryAuthInfo {
        /// Extra phone auth info, including android verification proof.
        PhoneAuthInfo(std::boxed::Box<crate::model::FinalizeMfaPhoneResponseInfo>),
    }
}

/// Starts multi-factor sign-in by sending the multi-factor auth challenge.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StartMfaSignInRequest {
    /// Required. Pending credential from first factor sign-in.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub mfa_pending_credential: std::string::String,

    /// Required. MFA enrollment id from the user's list of current MFA enrollments.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub mfa_enrollment_id: std::string::String,

    /// The ID of the Identity Platform tenant the user is signing in to. If not
    /// set, the user will sign in to the default Identity Platform project.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub tenant_id: std::string::String,

    /// MFA information by type of 2nd factor.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub sign_in_info: std::option::Option<crate::model::start_mfa_sign_in_request::SignInInfo>,
}

impl StartMfaSignInRequest {
    /// Sets the value of [mfa_pending_credential][crate::model::StartMfaSignInRequest::mfa_pending_credential].
    pub fn set_mfa_pending_credential<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.mfa_pending_credential = v.into();
        self
    }

    /// Sets the value of [mfa_enrollment_id][crate::model::StartMfaSignInRequest::mfa_enrollment_id].
    pub fn set_mfa_enrollment_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.mfa_enrollment_id = v.into();
        self
    }

    /// Sets the value of [tenant_id][crate::model::StartMfaSignInRequest::tenant_id].
    pub fn set_tenant_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.tenant_id = v.into();
        self
    }

    /// Sets the value of `sign_in_info`.
    pub fn set_sign_in_info<
        T: std::convert::Into<
            std::option::Option<crate::model::start_mfa_sign_in_request::SignInInfo>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.sign_in_info = v.into();
        self
    }

    /// The value of [sign_in_info][crate::model::StartMfaSignInRequest::sign_in_info]
    /// if it holds a `PhoneSignInInfo`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_phone_sign_in_info(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::StartMfaPhoneRequestInfo>> {
        #[allow(unreachable_patterns)]
        self.sign_in_info.as_ref().and_then(|v| match v {
            crate::model::start_mfa_sign_in_request::SignInInfo::PhoneSignInInfo(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [sign_in_info][crate::model::StartMfaSignInRequest::sign_in_info]
    /// to hold a `PhoneSignInInfo`.
    ///
    /// Note that all the setters affecting `sign_in_info` are
    /// mutually exclusive.
    pub fn set_phone_sign_in_info<
        T: std::convert::Into<std::boxed::Box<crate::model::StartMfaPhoneRequestInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.sign_in_info = std::option::Option::Some(
            crate::model::start_mfa_sign_in_request::SignInInfo::PhoneSignInInfo(v.into()),
        );
        self
    }
}

impl wkt::message::Message for StartMfaSignInRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.identitytoolkit.v2.StartMfaSignInRequest"
    }
}

/// Defines additional types related to StartMfaSignInRequest
pub mod start_mfa_sign_in_request {
    #[allow(unused_imports)]
    use super::*;

    /// MFA information by type of 2nd factor.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum SignInInfo {
        /// Verification info to authorize sending an SMS for phone verification.
        PhoneSignInInfo(std::boxed::Box<crate::model::StartMfaPhoneRequestInfo>),
    }
}

/// StartMfaSignIn response.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StartMfaSignInResponse {
    /// MultiFactor start sign-in response by 2nd factor type.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub response_info: std::option::Option<crate::model::start_mfa_sign_in_response::ResponseInfo>,
}

impl StartMfaSignInResponse {
    /// Sets the value of `response_info`.
    pub fn set_response_info<
        T: std::convert::Into<
            std::option::Option<crate::model::start_mfa_sign_in_response::ResponseInfo>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.response_info = v.into();
        self
    }

    /// The value of [response_info][crate::model::StartMfaSignInResponse::response_info]
    /// if it holds a `PhoneResponseInfo`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_phone_response_info(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::StartMfaPhoneResponseInfo>> {
        #[allow(unreachable_patterns)]
        self.response_info.as_ref().and_then(|v| match v {
            crate::model::start_mfa_sign_in_response::ResponseInfo::PhoneResponseInfo(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [response_info][crate::model::StartMfaSignInResponse::response_info]
    /// to hold a `PhoneResponseInfo`.
    ///
    /// Note that all the setters affecting `response_info` are
    /// mutually exclusive.
    pub fn set_phone_response_info<
        T: std::convert::Into<std::boxed::Box<crate::model::StartMfaPhoneResponseInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.response_info = std::option::Option::Some(
            crate::model::start_mfa_sign_in_response::ResponseInfo::PhoneResponseInfo(v.into()),
        );
        self
    }
}

impl wkt::message::Message for StartMfaSignInResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.identitytoolkit.v2.StartMfaSignInResponse"
    }
}

/// Defines additional types related to StartMfaSignInResponse
pub mod start_mfa_sign_in_response {
    #[allow(unused_imports)]
    use super::*;

    /// MultiFactor start sign-in response by 2nd factor type.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum ResponseInfo {
        /// MultiFactor sign-in session information specific to SMS-type second
        /// factors. Along with the one-time code retrieved from the sent SMS, the
        /// contents of this session information should be passed to
        /// FinalizeMfaSignIn to complete the sign in.
        PhoneResponseInfo(std::boxed::Box<crate::model::StartMfaPhoneResponseInfo>),
    }
}

/// The information required to auto-retrieve an SMS.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AutoRetrievalInfo {
    /// The Android app's signature hash for Google Play Service's
    /// SMS Retriever API.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub app_signature_hash: std::string::String,
}

impl AutoRetrievalInfo {
    /// Sets the value of [app_signature_hash][crate::model::AutoRetrievalInfo::app_signature_hash].
    pub fn set_app_signature_hash<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.app_signature_hash = v.into();
        self
    }
}

impl wkt::message::Message for AutoRetrievalInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.identitytoolkit.v2.AutoRetrievalInfo"
    }
}

/// App Verification info for a StartMfa request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StartMfaPhoneRequestInfo {
    /// Required for enrollment. Phone number to be enrolled as MFA.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub phone_number: std::string::String,

    /// iOS only. Receipt of successful app token validation with APNS.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub ios_receipt: std::string::String,

    /// iOS only. Secret delivered to iOS app via APNS.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub ios_secret: std::string::String,

    /// Web only. Recaptcha solution.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub recaptcha_token: std::string::String,

    /// Android only. Used by Google Play Services to identify the app for
    /// auto-retrieval.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub auto_retrieval_info: std::option::Option<crate::model::AutoRetrievalInfo>,

    /// Android only. Used to assert application identity in place of a
    /// recaptcha token. A SafetyNet Token can be generated via the
    /// [SafetyNet Android Attestation
    /// API](https://developer.android.com/training/safetynet/attestation.html),
    /// with the Base64 encoding of the `phone_number` field as the nonce.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub safety_net_token: std::string::String,
}

impl StartMfaPhoneRequestInfo {
    /// Sets the value of [phone_number][crate::model::StartMfaPhoneRequestInfo::phone_number].
    pub fn set_phone_number<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.phone_number = v.into();
        self
    }

    /// Sets the value of [ios_receipt][crate::model::StartMfaPhoneRequestInfo::ios_receipt].
    pub fn set_ios_receipt<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.ios_receipt = v.into();
        self
    }

    /// Sets the value of [ios_secret][crate::model::StartMfaPhoneRequestInfo::ios_secret].
    pub fn set_ios_secret<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.ios_secret = v.into();
        self
    }

    /// Sets the value of [recaptcha_token][crate::model::StartMfaPhoneRequestInfo::recaptcha_token].
    pub fn set_recaptcha_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.recaptcha_token = v.into();
        self
    }

    /// Sets the value of [auto_retrieval_info][crate::model::StartMfaPhoneRequestInfo::auto_retrieval_info].
    pub fn set_auto_retrieval_info<
        T: std::convert::Into<std::option::Option<crate::model::AutoRetrievalInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.auto_retrieval_info = v.into();
        self
    }

    /// Sets the value of [safety_net_token][crate::model::StartMfaPhoneRequestInfo::safety_net_token].
    pub fn set_safety_net_token<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.safety_net_token = v.into();
        self
    }
}

impl wkt::message::Message for StartMfaPhoneRequestInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.identitytoolkit.v2.StartMfaPhoneRequestInfo"
    }
}

/// Phone Verification info for a StartMfa response.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StartMfaPhoneResponseInfo {
    /// An opaque string that represents the enrollment session.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub session_info: std::string::String,
}

impl StartMfaPhoneResponseInfo {
    /// Sets the value of [session_info][crate::model::StartMfaPhoneResponseInfo::session_info].
    pub fn set_session_info<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.session_info = v.into();
        self
    }
}

impl wkt::message::Message for StartMfaPhoneResponseInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.identitytoolkit.v2.StartMfaPhoneResponseInfo"
    }
}

/// Phone Verification info for a FinalizeMfa request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FinalizeMfaPhoneRequestInfo {
    /// An opaque string that represents the enrollment session.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub session_info: std::string::String,

    /// User-entered verification code.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub code: std::string::String,

    /// Android only. Uses for "instant" phone number verification though GmsCore.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub android_verification_proof: std::string::String,

    /// Required if Android verification proof is presented.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub phone_number: std::string::String,
}

impl FinalizeMfaPhoneRequestInfo {
    /// Sets the value of [session_info][crate::model::FinalizeMfaPhoneRequestInfo::session_info].
    pub fn set_session_info<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.session_info = v.into();
        self
    }

    /// Sets the value of [code][crate::model::FinalizeMfaPhoneRequestInfo::code].
    pub fn set_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.code = v.into();
        self
    }

    /// Sets the value of [android_verification_proof][crate::model::FinalizeMfaPhoneRequestInfo::android_verification_proof].
    pub fn set_android_verification_proof<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.android_verification_proof = v.into();
        self
    }

    /// Sets the value of [phone_number][crate::model::FinalizeMfaPhoneRequestInfo::phone_number].
    pub fn set_phone_number<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.phone_number = v.into();
        self
    }
}

impl wkt::message::Message for FinalizeMfaPhoneRequestInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.identitytoolkit.v2.FinalizeMfaPhoneRequestInfo"
    }
}

/// Phone Verification info for a FinalizeMfa response.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FinalizeMfaPhoneResponseInfo {
    /// Android only. Long-lived replacement for valid code tied to android device.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub android_verification_proof: std::string::String,

    /// Android only. Expiration time of verification proof in seconds.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub android_verification_proof_expire_time: std::option::Option<wkt::Timestamp>,

    /// For Android verification proof.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub phone_number: std::string::String,
}

impl FinalizeMfaPhoneResponseInfo {
    /// Sets the value of [android_verification_proof][crate::model::FinalizeMfaPhoneResponseInfo::android_verification_proof].
    pub fn set_android_verification_proof<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.android_verification_proof = v.into();
        self
    }

    /// Sets the value of [android_verification_proof_expire_time][crate::model::FinalizeMfaPhoneResponseInfo::android_verification_proof_expire_time].
    pub fn set_android_verification_proof_expire_time<
        T: std::convert::Into<std::option::Option<wkt::Timestamp>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.android_verification_proof_expire_time = v.into();
        self
    }

    /// Sets the value of [phone_number][crate::model::FinalizeMfaPhoneResponseInfo::phone_number].
    pub fn set_phone_number<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.phone_number = v.into();
        self
    }
}

impl wkt::message::Message for FinalizeMfaPhoneResponseInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.identitytoolkit.v2.FinalizeMfaPhoneResponseInfo"
    }
}
