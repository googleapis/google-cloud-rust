// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application responds. Such applications should define mocks that
//! implement one of the traits defined in this module, initialize the client
//! with an instance of this mock in their tests, and verify their application
//! responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Account management for Identity Toolkit
///
/// # Mocking
///
/// Application developers may use this trait to mock the identitytoolkit clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait AccountManagementService: std::fmt::Debug + Send + Sync {
    /// Finishes enrolling a second factor for the user.
    fn finalize_mfa_enrollment(
        &self,
        _req: crate::model::FinalizeMfaEnrollmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::FinalizeMfaEnrollmentResponse>>
           + Send {
        std::future::ready::<crate::Result<crate::model::FinalizeMfaEnrollmentResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Step one of the MFA enrollment process. In SMS case, this sends an
    /// SMS verification code to the user.
    fn start_mfa_enrollment(
        &self,
        _req: crate::model::StartMfaEnrollmentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::StartMfaEnrollmentResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::StartMfaEnrollmentResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Revokes one second factor from the enrolled second factors for an account.
    fn withdraw_mfa(
        &self,
        _req: crate::model::WithdrawMfaRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::WithdrawMfaResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::WithdrawMfaResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }
}

/// Authentication for Identity Toolkit
///
/// # Mocking
///
/// Application developers may use this trait to mock the identitytoolkit clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait AuthenticationService: std::fmt::Debug + Send + Sync {
    /// Verifies the MFA challenge and performs sign-in
    fn finalize_mfa_sign_in(
        &self,
        _req: crate::model::FinalizeMfaSignInRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::FinalizeMfaSignInResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::FinalizeMfaSignInResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Sends the MFA challenge
    fn start_mfa_sign_in(
        &self,
        _req: crate::model::StartMfaSignInRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::StartMfaSignInResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::StartMfaSignInResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }
}
