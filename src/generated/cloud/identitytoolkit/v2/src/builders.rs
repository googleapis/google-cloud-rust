// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

pub mod account_management_service {
    use crate::Result;
    use std::sync::Arc;

    /// Common implementation for [crate::client::AccountManagementService] request builders.
    #[derive(Clone, Debug)]
    pub struct RequestBuilder<R: std::default::Default> {
        stub: Arc<dyn crate::traits::dyntraits::AccountManagementService>,
        request: R,
        options: gax::options::RequestOptions,
    }

    impl<R> RequestBuilder<R>
    where
        R: std::default::Default,
    {
        pub(crate) fn new(
            stub: Arc<dyn crate::traits::dyntraits::AccountManagementService>,
        ) -> Self {
            Self {
                stub,
                request: R::default(),
                options: gax::options::RequestOptions::default(),
            }
        }
    }

    /// The request builder for a AccountManagementService::finalize_mfa_enrollment call.
    #[derive(Clone, Debug)]
    pub struct FinalizeMfaEnrollment(RequestBuilder<crate::model::FinalizeMfaEnrollmentRequest>);

    impl FinalizeMfaEnrollment {
        pub(crate) fn new(
            stub: Arc<dyn crate::traits::dyntraits::AccountManagementService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::FinalizeMfaEnrollmentRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::FinalizeMfaEnrollmentResponse> {
            (*self.0.stub)
                .finalize_mfa_enrollment(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [id_token][crate::model::FinalizeMfaEnrollmentRequest::id_token].
        pub fn set_id_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.id_token = v.into();
            self
        }

        /// Sets the value of [display_name][crate::model::FinalizeMfaEnrollmentRequest::display_name].
        pub fn set_display_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.display_name = v.into();
            self
        }

        /// Sets the value of [tenant_id][crate::model::FinalizeMfaEnrollmentRequest::tenant_id].
        pub fn set_tenant_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.tenant_id = v.into();
            self
        }

        /// Sets the value of `verification_info`.
        pub fn set_verification_info<
            T: Into<Option<crate::model::finalize_mfa_enrollment_request::VerificationInfo>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.verification_info = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for FinalizeMfaEnrollment {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a AccountManagementService::start_mfa_enrollment call.
    #[derive(Clone, Debug)]
    pub struct StartMfaEnrollment(RequestBuilder<crate::model::StartMfaEnrollmentRequest>);

    impl StartMfaEnrollment {
        pub(crate) fn new(
            stub: Arc<dyn crate::traits::dyntraits::AccountManagementService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::StartMfaEnrollmentRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::StartMfaEnrollmentResponse> {
            (*self.0.stub)
                .start_mfa_enrollment(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [id_token][crate::model::StartMfaEnrollmentRequest::id_token].
        pub fn set_id_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.id_token = v.into();
            self
        }

        /// Sets the value of [tenant_id][crate::model::StartMfaEnrollmentRequest::tenant_id].
        pub fn set_tenant_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.tenant_id = v.into();
            self
        }

        /// Sets the value of `enrollment_info`.
        pub fn set_enrollment_info<
            T: Into<Option<crate::model::start_mfa_enrollment_request::EnrollmentInfo>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.enrollment_info = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for StartMfaEnrollment {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a AccountManagementService::withdraw_mfa call.
    #[derive(Clone, Debug)]
    pub struct WithdrawMfa(RequestBuilder<crate::model::WithdrawMfaRequest>);

    impl WithdrawMfa {
        pub(crate) fn new(
            stub: Arc<dyn crate::traits::dyntraits::AccountManagementService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::WithdrawMfaRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::WithdrawMfaResponse> {
            (*self.0.stub)
                .withdraw_mfa(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [id_token][crate::model::WithdrawMfaRequest::id_token].
        pub fn set_id_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.id_token = v.into();
            self
        }

        /// Sets the value of [mfa_enrollment_id][crate::model::WithdrawMfaRequest::mfa_enrollment_id].
        pub fn set_mfa_enrollment_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.mfa_enrollment_id = v.into();
            self
        }

        /// Sets the value of [tenant_id][crate::model::WithdrawMfaRequest::tenant_id].
        pub fn set_tenant_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.tenant_id = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for WithdrawMfa {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }
}

pub mod authentication_service {
    use crate::Result;
    use std::sync::Arc;

    /// Common implementation for [crate::client::AuthenticationService] request builders.
    #[derive(Clone, Debug)]
    pub struct RequestBuilder<R: std::default::Default> {
        stub: Arc<dyn crate::traits::dyntraits::AuthenticationService>,
        request: R,
        options: gax::options::RequestOptions,
    }

    impl<R> RequestBuilder<R>
    where
        R: std::default::Default,
    {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::AuthenticationService>) -> Self {
            Self {
                stub,
                request: R::default(),
                options: gax::options::RequestOptions::default(),
            }
        }
    }

    /// The request builder for a AuthenticationService::finalize_mfa_sign_in call.
    #[derive(Clone, Debug)]
    pub struct FinalizeMfaSignIn(RequestBuilder<crate::model::FinalizeMfaSignInRequest>);

    impl FinalizeMfaSignIn {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::AuthenticationService>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::FinalizeMfaSignInRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::FinalizeMfaSignInResponse> {
            (*self.0.stub)
                .finalize_mfa_sign_in(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [mfa_pending_credential][crate::model::FinalizeMfaSignInRequest::mfa_pending_credential].
        pub fn set_mfa_pending_credential<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.mfa_pending_credential = v.into();
            self
        }

        /// Sets the value of [tenant_id][crate::model::FinalizeMfaSignInRequest::tenant_id].
        pub fn set_tenant_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.tenant_id = v.into();
            self
        }

        /// Sets the value of `verification_info`.
        pub fn set_verification_info<
            T: Into<Option<crate::model::finalize_mfa_sign_in_request::VerificationInfo>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.verification_info = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for FinalizeMfaSignIn {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a AuthenticationService::start_mfa_sign_in call.
    #[derive(Clone, Debug)]
    pub struct StartMfaSignIn(RequestBuilder<crate::model::StartMfaSignInRequest>);

    impl StartMfaSignIn {
        pub(crate) fn new(stub: Arc<dyn crate::traits::dyntraits::AuthenticationService>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::StartMfaSignInRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::StartMfaSignInResponse> {
            (*self.0.stub)
                .start_mfa_sign_in(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [mfa_pending_credential][crate::model::StartMfaSignInRequest::mfa_pending_credential].
        pub fn set_mfa_pending_credential<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.mfa_pending_credential = v.into();
            self
        }

        /// Sets the value of [mfa_enrollment_id][crate::model::StartMfaSignInRequest::mfa_enrollment_id].
        pub fn set_mfa_enrollment_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.mfa_enrollment_id = v.into();
            self
        }

        /// Sets the value of [tenant_id][crate::model::StartMfaSignInRequest::tenant_id].
        pub fn set_tenant_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.tenant_id = v.into();
            self
        }

        /// Sets the value of `sign_in_info`.
        pub fn set_sign_in_info<
            T: Into<Option<crate::model::start_mfa_sign_in_request::SignInInfo>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.sign_in_info = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for StartMfaSignIn {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }
}
