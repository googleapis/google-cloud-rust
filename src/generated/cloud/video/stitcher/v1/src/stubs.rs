// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::VideoStitcherService].
///
/// Application developers may need to implement this trait to mock
/// `client::VideoStitcherService`.  In other use-cases, application developers only
/// use `client::VideoStitcherService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait VideoStitcherService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::VideoStitcherService::create_cdn_key].
    fn create_cdn_key(
        &self,
        _req: crate::model::CreateCdnKeyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::list_cdn_keys].
    fn list_cdn_keys(
        &self,
        _req: crate::model::ListCdnKeysRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListCdnKeysResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListCdnKeysResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::get_cdn_key].
    fn get_cdn_key(
        &self,
        _req: crate::model::GetCdnKeyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::CdnKey>> + Send {
        std::future::ready::<crate::Result<crate::model::CdnKey>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::delete_cdn_key].
    fn delete_cdn_key(
        &self,
        _req: crate::model::DeleteCdnKeyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::update_cdn_key].
    fn update_cdn_key(
        &self,
        _req: crate::model::UpdateCdnKeyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::create_vod_session].
    fn create_vod_session(
        &self,
        _req: crate::model::CreateVodSessionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::VodSession>> + Send {
        std::future::ready::<crate::Result<crate::model::VodSession>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::get_vod_session].
    fn get_vod_session(
        &self,
        _req: crate::model::GetVodSessionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::VodSession>> + Send {
        std::future::ready::<crate::Result<crate::model::VodSession>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::list_vod_stitch_details].
    fn list_vod_stitch_details(
        &self,
        _req: crate::model::ListVodStitchDetailsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListVodStitchDetailsResponse>>
    + Send {
        std::future::ready::<crate::Result<crate::model::ListVodStitchDetailsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VideoStitcherService::get_vod_stitch_detail].
    fn get_vod_stitch_detail(
        &self,
        _req: crate::model::GetVodStitchDetailRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::VodStitchDetail>> + Send
    {
        std::future::ready::<crate::Result<crate::model::VodStitchDetail>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::list_vod_ad_tag_details].
    fn list_vod_ad_tag_details(
        &self,
        _req: crate::model::ListVodAdTagDetailsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListVodAdTagDetailsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListVodAdTagDetailsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VideoStitcherService::get_vod_ad_tag_detail].
    fn get_vod_ad_tag_detail(
        &self,
        _req: crate::model::GetVodAdTagDetailRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::VodAdTagDetail>> + Send {
        std::future::ready::<crate::Result<crate::model::VodAdTagDetail>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::list_live_ad_tag_details].
    fn list_live_ad_tag_details(
        &self,
        _req: crate::model::ListLiveAdTagDetailsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListLiveAdTagDetailsResponse>>
    + Send {
        std::future::ready::<crate::Result<crate::model::ListLiveAdTagDetailsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VideoStitcherService::get_live_ad_tag_detail].
    fn get_live_ad_tag_detail(
        &self,
        _req: crate::model::GetLiveAdTagDetailRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::LiveAdTagDetail>> + Send
    {
        std::future::ready::<crate::Result<crate::model::LiveAdTagDetail>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::create_slate].
    fn create_slate(
        &self,
        _req: crate::model::CreateSlateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::list_slates].
    fn list_slates(
        &self,
        _req: crate::model::ListSlatesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListSlatesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListSlatesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::get_slate].
    fn get_slate(
        &self,
        _req: crate::model::GetSlateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Slate>> + Send {
        std::future::ready::<crate::Result<crate::model::Slate>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::VideoStitcherService::update_slate].
    fn update_slate(
        &self,
        _req: crate::model::UpdateSlateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::delete_slate].
    fn delete_slate(
        &self,
        _req: crate::model::DeleteSlateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::create_live_session].
    fn create_live_session(
        &self,
        _req: crate::model::CreateLiveSessionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::LiveSession>> + Send {
        std::future::ready::<crate::Result<crate::model::LiveSession>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::get_live_session].
    fn get_live_session(
        &self,
        _req: crate::model::GetLiveSessionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::LiveSession>> + Send {
        std::future::ready::<crate::Result<crate::model::LiveSession>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::create_live_config].
    fn create_live_config(
        &self,
        _req: crate::model::CreateLiveConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::list_live_configs].
    fn list_live_configs(
        &self,
        _req: crate::model::ListLiveConfigsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListLiveConfigsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListLiveConfigsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VideoStitcherService::get_live_config].
    fn get_live_config(
        &self,
        _req: crate::model::GetLiveConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::LiveConfig>> + Send {
        std::future::ready::<crate::Result<crate::model::LiveConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::delete_live_config].
    fn delete_live_config(
        &self,
        _req: crate::model::DeleteLiveConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::update_live_config].
    fn update_live_config(
        &self,
        _req: crate::model::UpdateLiveConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::create_vod_config].
    fn create_vod_config(
        &self,
        _req: crate::model::CreateVodConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::list_vod_configs].
    fn list_vod_configs(
        &self,
        _req: crate::model::ListVodConfigsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListVodConfigsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListVodConfigsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VideoStitcherService::get_vod_config].
    fn get_vod_config(
        &self,
        _req: crate::model::GetVodConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::VodConfig>> + Send {
        std::future::ready::<crate::Result<crate::model::VodConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::delete_vod_config].
    fn delete_vod_config(
        &self,
        _req: crate::model::DeleteVodConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::update_vod_config].
    fn update_vod_config(
        &self,
        _req: crate::model::UpdateVodConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
    + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::VideoStitcherService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::VideoStitcherService::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::VideoStitcherService::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
