// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Video Stitcher API.
///
/// # Service Description
///
/// Video-On-Demand content stitching API allows you to insert ads
/// into (VoD) video on demand files. You will be able to render custom
/// scrubber bars with highlighted ads, enforce ad policies, allow
/// seamless playback and tracking on native players and monetize
/// content with any standard VMAP compliant ad server.
///
/// # Configuration
///
/// `VideoStitcherService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `VideoStitcherService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `VideoStitcherService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct VideoStitcherService {
    inner: Arc<dyn crate::stubs::dynamic::VideoStitcherService>,
}

impl VideoStitcherService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::VideoStitcherService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::VideoStitcherService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::VideoStitcherService> {
        crate::transport::VideoStitcherService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::VideoStitcherService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::VideoStitcherService::new)
    }

    /// Creates a new CDN key.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_cdn_key(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::CreateCdnKey {
        crate::builders::video_stitcher_service::CreateCdnKey::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all CDN keys in the specified project and location.
    pub fn list_cdn_keys(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::ListCdnKeys {
        crate::builders::video_stitcher_service::ListCdnKeys::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the specified CDN key.
    pub fn get_cdn_key(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::GetCdnKey {
        crate::builders::video_stitcher_service::GetCdnKey::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes the specified CDN key.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_cdn_key(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::DeleteCdnKey {
        crate::builders::video_stitcher_service::DeleteCdnKey::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates the specified CDN key. Only update fields specified
    /// in the call method body.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_cdn_key(
        &self,
        cdn_key: impl Into<crate::model::CdnKey>,
    ) -> crate::builders::video_stitcher_service::UpdateCdnKey {
        crate::builders::video_stitcher_service::UpdateCdnKey::new(self.inner.clone())
            .set_cdn_key(cdn_key.into())
    }

    /// Creates a client side playback VOD session and returns the full
    /// tracking and playback metadata of the session.
    pub fn create_vod_session(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::CreateVodSession {
        crate::builders::video_stitcher_service::CreateVodSession::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the full tracking, playback metadata, and relevant ad-ops
    /// logs for the specified VOD session.
    pub fn get_vod_session(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::GetVodSession {
        crate::builders::video_stitcher_service::GetVodSession::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Returns a list of detailed stitching information of the specified VOD
    /// session.
    pub fn list_vod_stitch_details(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::ListVodStitchDetails {
        crate::builders::video_stitcher_service::ListVodStitchDetails::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the specified stitching information for the specified VOD session.
    pub fn get_vod_stitch_detail(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::GetVodStitchDetail {
        crate::builders::video_stitcher_service::GetVodStitchDetail::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Return the list of ad tag details for the specified VOD session.
    pub fn list_vod_ad_tag_details(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::ListVodAdTagDetails {
        crate::builders::video_stitcher_service::ListVodAdTagDetails::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the specified ad tag detail for the specified VOD session.
    pub fn get_vod_ad_tag_detail(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::GetVodAdTagDetail {
        crate::builders::video_stitcher_service::GetVodAdTagDetail::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Return the list of ad tag details for the specified live session.
    pub fn list_live_ad_tag_details(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::ListLiveAdTagDetails {
        crate::builders::video_stitcher_service::ListLiveAdTagDetails::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the specified ad tag detail for the specified live session.
    pub fn get_live_ad_tag_detail(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::GetLiveAdTagDetail {
        crate::builders::video_stitcher_service::GetLiveAdTagDetail::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a slate.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_slate(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::CreateSlate {
        crate::builders::video_stitcher_service::CreateSlate::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all slates in the specified project and location.
    pub fn list_slates(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::ListSlates {
        crate::builders::video_stitcher_service::ListSlates::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the specified slate.
    pub fn get_slate(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::GetSlate {
        crate::builders::video_stitcher_service::GetSlate::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates the specified slate.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_slate(
        &self,
        slate: impl Into<crate::model::Slate>,
    ) -> crate::builders::video_stitcher_service::UpdateSlate {
        crate::builders::video_stitcher_service::UpdateSlate::new(self.inner.clone())
            .set_slate(slate.into())
    }

    /// Deletes the specified slate.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_slate(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::DeleteSlate {
        crate::builders::video_stitcher_service::DeleteSlate::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new live session.
    pub fn create_live_session(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::CreateLiveSession {
        crate::builders::video_stitcher_service::CreateLiveSession::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the details for the specified live session.
    pub fn get_live_session(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::GetLiveSession {
        crate::builders::video_stitcher_service::GetLiveSession::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Registers the live config with the provided unique ID in
    /// the specified region.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_live_config(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::CreateLiveConfig {
        crate::builders::video_stitcher_service::CreateLiveConfig::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all live configs managed by the Video Stitcher that
    /// belong to the specified project and region.
    pub fn list_live_configs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::ListLiveConfigs {
        crate::builders::video_stitcher_service::ListLiveConfigs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the specified live config managed by the Video
    /// Stitcher service.
    pub fn get_live_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::GetLiveConfig {
        crate::builders::video_stitcher_service::GetLiveConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes the specified live config.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_live_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::DeleteLiveConfig {
        crate::builders::video_stitcher_service::DeleteLiveConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates the specified LiveConfig. Only update fields specified
    /// in the call method body.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_live_config(
        &self,
        live_config: impl Into<crate::model::LiveConfig>,
    ) -> crate::builders::video_stitcher_service::UpdateLiveConfig {
        crate::builders::video_stitcher_service::UpdateLiveConfig::new(self.inner.clone())
            .set_live_config(live_config.into())
    }

    /// Registers the VOD config with the provided unique ID in
    /// the specified region.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_vod_config(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::CreateVodConfig {
        crate::builders::video_stitcher_service::CreateVodConfig::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all VOD configs managed by the Video Stitcher API that
    /// belong to the specified project and region.
    pub fn list_vod_configs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::ListVodConfigs {
        crate::builders::video_stitcher_service::ListVodConfigs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the specified VOD config managed by the Video
    /// Stitcher API service.
    pub fn get_vod_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::GetVodConfig {
        crate::builders::video_stitcher_service::GetVodConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes the specified VOD config.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_vod_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::DeleteVodConfig {
        crate::builders::video_stitcher_service::DeleteVodConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates the specified VOD config. Only update fields specified
    /// in the call method body.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_vod_config(
        &self,
        vod_config: impl Into<crate::model::VodConfig>,
    ) -> crate::builders::video_stitcher_service::UpdateVodConfig {
        crate::builders::video_stitcher_service::UpdateVodConfig::new(self.inner.clone())
            .set_vod_config(vod_config.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::ListOperations {
        crate::builders::video_stitcher_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::GetOperation {
        crate::builders::video_stitcher_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::DeleteOperation {
        crate::builders::video_stitcher_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::video_stitcher_service::CancelOperation {
        crate::builders::video_stitcher_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
