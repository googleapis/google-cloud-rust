// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gclient;
extern crate lazy_static;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Information related to the details for one ad tag. This resource is only
/// available for live sessions that do not implement Google Ad Manager ad
/// insertion.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LiveAdTagDetail {
    /// The resource name in the form of
    /// `projects/{project}/locations/{location}/liveSessions/{live_session}/liveAdTagDetails/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// A list of ad requests.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub ad_requests: std::vec::Vec<crate::model::AdRequest>,
}

impl LiveAdTagDetail {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::LiveAdTagDetail::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [ad_requests][crate::model::LiveAdTagDetail::ad_requests].
    pub fn set_ad_requests<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::AdRequest>,
    {
        use std::iter::Iterator;
        self.ad_requests = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for LiveAdTagDetail {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.LiveAdTagDetail"
    }
}

/// Information related to the details for one ad tag. This resource is only
/// available for VOD sessions that do not implement Google Ad Manager ad
/// insertion.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct VodAdTagDetail {
    /// The name of the ad tag detail for the specified VOD session, in the form of
    /// `projects/{project}/locations/{location}/vodSessions/{vod_session_id}/vodAdTagDetails/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// A list of ad requests for one ad tag.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub ad_requests: std::vec::Vec<crate::model::AdRequest>,
}

impl VodAdTagDetail {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::VodAdTagDetail::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [ad_requests][crate::model::VodAdTagDetail::ad_requests].
    pub fn set_ad_requests<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::AdRequest>,
    {
        use std::iter::Iterator;
        self.ad_requests = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for VodAdTagDetail {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.VodAdTagDetail"
    }
}

/// Details of an ad request to an ad server.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AdRequest {
    /// The ad tag URI processed with integrated macros.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,

    /// The request metadata used to make the ad request.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub request_metadata: std::option::Option<crate::model::RequestMetadata>,

    /// The response metadata received from the ad request.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub response_metadata: std::option::Option<crate::model::ResponseMetadata>,
}

impl AdRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [uri][crate::model::AdRequest::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }

    /// Sets the value of [request_metadata][crate::model::AdRequest::request_metadata].
    pub fn set_request_metadata<
        T: std::convert::Into<std::option::Option<crate::model::RequestMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.request_metadata = v.into();
        self
    }

    /// Sets the value of [response_metadata][crate::model::AdRequest::response_metadata].
    pub fn set_response_metadata<
        T: std::convert::Into<std::option::Option<crate::model::ResponseMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.response_metadata = v.into();
        self
    }
}

impl wkt::message::Message for AdRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.AdRequest"
    }
}

/// Metadata for an ad request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RequestMetadata {
    /// The HTTP headers of the ad request.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub headers: std::option::Option<wkt::Struct>,
}

impl RequestMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [headers][crate::model::RequestMetadata::headers].
    pub fn set_headers<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.headers = v.into();
        self
    }
}

impl wkt::message::Message for RequestMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.RequestMetadata"
    }
}

/// Metadata for the response of an ad request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ResponseMetadata {
    /// Error message received when making the ad request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub error: std::string::String,

    /// Headers from the response.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub headers: std::option::Option<wkt::Struct>,

    /// Status code for the response.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_code: std::string::String,

    /// Size in bytes of the response.
    pub size_bytes: i32,

    /// Total time elapsed for the response.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub duration: std::option::Option<wkt::Duration>,

    /// The body of the response.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub body: std::string::String,
}

impl ResponseMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [error][crate::model::ResponseMetadata::error].
    pub fn set_error<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.error = v.into();
        self
    }

    /// Sets the value of [headers][crate::model::ResponseMetadata::headers].
    pub fn set_headers<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.headers = v.into();
        self
    }

    /// Sets the value of [status_code][crate::model::ResponseMetadata::status_code].
    pub fn set_status_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_code = v.into();
        self
    }

    /// Sets the value of [size_bytes][crate::model::ResponseMetadata::size_bytes].
    pub fn set_size_bytes<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.size_bytes = v.into();
        self
    }

    /// Sets the value of [duration][crate::model::ResponseMetadata::duration].
    pub fn set_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.duration = v.into();
        self
    }

    /// Sets the value of [body][crate::model::ResponseMetadata::body].
    pub fn set_body<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.body = v.into();
        self
    }
}

impl wkt::message::Message for ResponseMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.ResponseMetadata"
    }
}

/// Configuration for a CDN key. Used by the Video Stitcher
/// to sign URIs for fetching video manifests and signing
/// media segments for playback.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CdnKey {
    /// The resource name of the CDN key, in the form of
    /// `projects/{project}/locations/{location}/cdnKeys/{id}`.
    /// The name is ignored when creating a CDN key.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The hostname this key applies to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub hostname: std::string::String,

    /// Configuration associated with the CDN key.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub cdn_key_config: std::option::Option<crate::model::cdn_key::CdnKeyConfig>,
}

impl CdnKey {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::CdnKey::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [hostname][crate::model::CdnKey::hostname].
    pub fn set_hostname<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.hostname = v.into();
        self
    }

    /// Sets the value of `cdn_key_config`.
    pub fn set_cdn_key_config<
        T: std::convert::Into<std::option::Option<crate::model::cdn_key::CdnKeyConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.cdn_key_config = v.into();
        self
    }

    /// The value of [cdn_key_config][crate::model::CdnKey::cdn_key_config]
    /// if it holds a `GoogleCdnKey`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_google_cdn_key(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::GoogleCdnKey>> {
        #[allow(unreachable_patterns)]
        self.cdn_key_config.as_ref().and_then(|v| match v {
            crate::model::cdn_key::CdnKeyConfig::GoogleCdnKey(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [cdn_key_config][crate::model::CdnKey::cdn_key_config]
    /// if it holds a `AkamaiCdnKey`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_akamai_cdn_key(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::AkamaiCdnKey>> {
        #[allow(unreachable_patterns)]
        self.cdn_key_config.as_ref().and_then(|v| match v {
            crate::model::cdn_key::CdnKeyConfig::AkamaiCdnKey(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [cdn_key_config][crate::model::CdnKey::cdn_key_config]
    /// if it holds a `MediaCdnKey`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_media_cdn_key(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::MediaCdnKey>> {
        #[allow(unreachable_patterns)]
        self.cdn_key_config.as_ref().and_then(|v| match v {
            crate::model::cdn_key::CdnKeyConfig::MediaCdnKey(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [cdn_key_config][crate::model::CdnKey::cdn_key_config]
    /// to hold a `GoogleCdnKey`.
    ///
    /// Note that all the setters affecting `cdn_key_config` are
    /// mutually exclusive.
    pub fn set_google_cdn_key<
        T: std::convert::Into<std::boxed::Box<crate::model::GoogleCdnKey>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.cdn_key_config =
            std::option::Option::Some(crate::model::cdn_key::CdnKeyConfig::GoogleCdnKey(v.into()));
        self
    }

    /// Sets the value of [cdn_key_config][crate::model::CdnKey::cdn_key_config]
    /// to hold a `AkamaiCdnKey`.
    ///
    /// Note that all the setters affecting `cdn_key_config` are
    /// mutually exclusive.
    pub fn set_akamai_cdn_key<
        T: std::convert::Into<std::boxed::Box<crate::model::AkamaiCdnKey>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.cdn_key_config =
            std::option::Option::Some(crate::model::cdn_key::CdnKeyConfig::AkamaiCdnKey(v.into()));
        self
    }

    /// Sets the value of [cdn_key_config][crate::model::CdnKey::cdn_key_config]
    /// to hold a `MediaCdnKey`.
    ///
    /// Note that all the setters affecting `cdn_key_config` are
    /// mutually exclusive.
    pub fn set_media_cdn_key<T: std::convert::Into<std::boxed::Box<crate::model::MediaCdnKey>>>(
        mut self,
        v: T,
    ) -> Self {
        self.cdn_key_config =
            std::option::Option::Some(crate::model::cdn_key::CdnKeyConfig::MediaCdnKey(v.into()));
        self
    }
}

impl wkt::message::Message for CdnKey {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.CdnKey"
    }
}

/// Defines additional types related to CdnKey
pub mod cdn_key {
    #[allow(unused_imports)]
    use super::*;

    /// Configuration associated with the CDN key.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum CdnKeyConfig {
        /// The configuration for a Google Cloud CDN key.
        GoogleCdnKey(std::boxed::Box<crate::model::GoogleCdnKey>),
        /// The configuration for an Akamai CDN key.
        AkamaiCdnKey(std::boxed::Box<crate::model::AkamaiCdnKey>),
        /// The configuration for a Media CDN key.
        MediaCdnKey(std::boxed::Box<crate::model::MediaCdnKey>),
    }
}

/// Configuration for a Google Cloud CDN key.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GoogleCdnKey {
    /// Input only. Secret for this Google Cloud CDN key.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub private_key: ::bytes::Bytes,

    /// The public name of the Google Cloud CDN key.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub key_name: std::string::String,
}

impl GoogleCdnKey {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [private_key][crate::model::GoogleCdnKey::private_key].
    pub fn set_private_key<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.private_key = v.into();
        self
    }

    /// Sets the value of [key_name][crate::model::GoogleCdnKey::key_name].
    pub fn set_key_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.key_name = v.into();
        self
    }
}

impl wkt::message::Message for GoogleCdnKey {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.GoogleCdnKey"
    }
}

/// Configuration for an Akamai CDN key.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AkamaiCdnKey {
    /// Input only. Token key for the Akamai CDN edge configuration.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub token_key: ::bytes::Bytes,
}

impl AkamaiCdnKey {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [token_key][crate::model::AkamaiCdnKey::token_key].
    pub fn set_token_key<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.token_key = v.into();
        self
    }
}

impl wkt::message::Message for AkamaiCdnKey {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.AkamaiCdnKey"
    }
}

/// Configuration for a Media CDN key.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MediaCdnKey {
    /// Input only. 64-byte ed25519 private key for this Media CDN key.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub private_key: ::bytes::Bytes,

    /// The keyset name of the Media CDN key.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub key_name: std::string::String,

    /// Optional. If set, the URL will be signed using the Media CDN token.
    /// Otherwise, the URL would be signed using the standard Media CDN signature.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub token_config: std::option::Option<crate::model::media_cdn_key::TokenConfig>,
}

impl MediaCdnKey {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [private_key][crate::model::MediaCdnKey::private_key].
    pub fn set_private_key<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.private_key = v.into();
        self
    }

    /// Sets the value of [key_name][crate::model::MediaCdnKey::key_name].
    pub fn set_key_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.key_name = v.into();
        self
    }

    /// Sets the value of [token_config][crate::model::MediaCdnKey::token_config].
    pub fn set_token_config<
        T: std::convert::Into<std::option::Option<crate::model::media_cdn_key::TokenConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.token_config = v.into();
        self
    }
}

impl wkt::message::Message for MediaCdnKey {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.MediaCdnKey"
    }
}

/// Defines additional types related to MediaCdnKey
pub mod media_cdn_key {
    #[allow(unused_imports)]
    use super::*;

    /// Configuration for a Media CDN token.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct TokenConfig {
        /// Optional. The query parameter in which to find the token.
        ///
        /// The name must be 1-64 characters long and match
        /// the regular expression `[a-zA-Z]([a-zA-Z0-9_-])*` which means the
        /// first character must be a letter, and all following characters
        /// must be a dash, underscore, letter or digit.
        ///
        /// Defaults to `edge-cache-token`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub query_parameter: std::string::String,
    }

    impl TokenConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [query_parameter][crate::model::media_cdn_key::TokenConfig::query_parameter].
        pub fn set_query_parameter<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.query_parameter = v.into();
            self
        }
    }

    impl wkt::message::Message for TokenConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.stitcher.v1.MediaCdnKey.TokenConfig"
        }
    }
}

/// Metadata for companion ads.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CompanionAds {
    /// Indicates how many of the companions should be displayed with the ad.
    pub display_requirement: crate::model::companion_ads::DisplayRequirement,

    /// List of companion ads.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub companions: std::vec::Vec<crate::model::Companion>,
}

impl CompanionAds {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [display_requirement][crate::model::CompanionAds::display_requirement].
    pub fn set_display_requirement<
        T: std::convert::Into<crate::model::companion_ads::DisplayRequirement>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.display_requirement = v.into();
        self
    }

    /// Sets the value of [companions][crate::model::CompanionAds::companions].
    pub fn set_companions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Companion>,
    {
        use std::iter::Iterator;
        self.companions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CompanionAds {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.CompanionAds"
    }
}

/// Defines additional types related to CompanionAds
pub mod companion_ads {
    #[allow(unused_imports)]
    use super::*;

    /// Indicates how many of the companions should be displayed with the ad.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct DisplayRequirement(i32);

    impl DisplayRequirement {
        /// Required companions are not specified. The default is ALL.
        pub const DISPLAY_REQUIREMENT_UNSPECIFIED: DisplayRequirement = DisplayRequirement::new(0);

        /// All companions are required to be displayed.
        pub const ALL: DisplayRequirement = DisplayRequirement::new(1);

        /// At least one of companions needs to be displayed.
        pub const ANY: DisplayRequirement = DisplayRequirement::new(2);

        /// All companions are optional for display.
        pub const NONE: DisplayRequirement = DisplayRequirement::new(3);

        /// Creates a new DisplayRequirement instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("DISPLAY_REQUIREMENT_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("ALL"),
                2 => std::borrow::Cow::Borrowed("ANY"),
                3 => std::borrow::Cow::Borrowed("NONE"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "DISPLAY_REQUIREMENT_UNSPECIFIED" => {
                    std::option::Option::Some(Self::DISPLAY_REQUIREMENT_UNSPECIFIED)
                }
                "ALL" => std::option::Option::Some(Self::ALL),
                "ANY" => std::option::Option::Some(Self::ANY),
                "NONE" => std::option::Option::Some(Self::NONE),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for DisplayRequirement {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for DisplayRequirement {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Metadata for a companion.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Companion {
    /// The API necessary to communicate with the creative if available.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_framework: std::string::String,

    /// The pixel height of the placement slot for the intended creative.
    pub height_px: i32,

    /// The pixel width of the placement slot for the intended creative.
    pub width_px: i32,

    /// The pixel height of the creative.
    pub asset_height_px: i32,

    /// The maximum pixel height of the creative in its expanded state.
    pub expanded_height_px: i32,

    /// The pixel width of the creative.
    pub asset_width_px: i32,

    /// The maximum pixel width of the creative in its expanded state.
    pub expanded_width_px: i32,

    /// The ID used to identify the desired placement on a publisher's page.
    /// Values to be used should be discussed between publishers and
    /// advertisers.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub ad_slot_id: std::string::String,

    /// The list of tracking events for the companion.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub events: std::vec::Vec<crate::model::Event>,

    /// Ad resource associated with the companion ad.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub ad_resource: std::option::Option<crate::model::companion::AdResource>,
}

impl Companion {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [api_framework][crate::model::Companion::api_framework].
    pub fn set_api_framework<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_framework = v.into();
        self
    }

    /// Sets the value of [height_px][crate::model::Companion::height_px].
    pub fn set_height_px<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.height_px = v.into();
        self
    }

    /// Sets the value of [width_px][crate::model::Companion::width_px].
    pub fn set_width_px<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.width_px = v.into();
        self
    }

    /// Sets the value of [asset_height_px][crate::model::Companion::asset_height_px].
    pub fn set_asset_height_px<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.asset_height_px = v.into();
        self
    }

    /// Sets the value of [expanded_height_px][crate::model::Companion::expanded_height_px].
    pub fn set_expanded_height_px<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.expanded_height_px = v.into();
        self
    }

    /// Sets the value of [asset_width_px][crate::model::Companion::asset_width_px].
    pub fn set_asset_width_px<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.asset_width_px = v.into();
        self
    }

    /// Sets the value of [expanded_width_px][crate::model::Companion::expanded_width_px].
    pub fn set_expanded_width_px<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.expanded_width_px = v.into();
        self
    }

    /// Sets the value of [ad_slot_id][crate::model::Companion::ad_slot_id].
    pub fn set_ad_slot_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.ad_slot_id = v.into();
        self
    }

    /// Sets the value of [events][crate::model::Companion::events].
    pub fn set_events<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Event>,
    {
        use std::iter::Iterator;
        self.events = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of `ad_resource`.
    pub fn set_ad_resource<
        T: std::convert::Into<std::option::Option<crate::model::companion::AdResource>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.ad_resource = v.into();
        self
    }

    /// The value of [ad_resource][crate::model::Companion::ad_resource]
    /// if it holds a `IframeAdResource`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_iframe_ad_resource(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::IframeAdResource>> {
        #[allow(unreachable_patterns)]
        self.ad_resource.as_ref().and_then(|v| match v {
            crate::model::companion::AdResource::IframeAdResource(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [ad_resource][crate::model::Companion::ad_resource]
    /// if it holds a `StaticAdResource`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_static_ad_resource(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::StaticAdResource>> {
        #[allow(unreachable_patterns)]
        self.ad_resource.as_ref().and_then(|v| match v {
            crate::model::companion::AdResource::StaticAdResource(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [ad_resource][crate::model::Companion::ad_resource]
    /// if it holds a `HtmlAdResource`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_html_ad_resource(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::HtmlAdResource>> {
        #[allow(unreachable_patterns)]
        self.ad_resource.as_ref().and_then(|v| match v {
            crate::model::companion::AdResource::HtmlAdResource(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [ad_resource][crate::model::Companion::ad_resource]
    /// to hold a `IframeAdResource`.
    ///
    /// Note that all the setters affecting `ad_resource` are
    /// mutually exclusive.
    pub fn set_iframe_ad_resource<
        T: std::convert::Into<std::boxed::Box<crate::model::IframeAdResource>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.ad_resource = std::option::Option::Some(
            crate::model::companion::AdResource::IframeAdResource(v.into()),
        );
        self
    }

    /// Sets the value of [ad_resource][crate::model::Companion::ad_resource]
    /// to hold a `StaticAdResource`.
    ///
    /// Note that all the setters affecting `ad_resource` are
    /// mutually exclusive.
    pub fn set_static_ad_resource<
        T: std::convert::Into<std::boxed::Box<crate::model::StaticAdResource>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.ad_resource = std::option::Option::Some(
            crate::model::companion::AdResource::StaticAdResource(v.into()),
        );
        self
    }

    /// Sets the value of [ad_resource][crate::model::Companion::ad_resource]
    /// to hold a `HtmlAdResource`.
    ///
    /// Note that all the setters affecting `ad_resource` are
    /// mutually exclusive.
    pub fn set_html_ad_resource<
        T: std::convert::Into<std::boxed::Box<crate::model::HtmlAdResource>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.ad_resource = std::option::Option::Some(
            crate::model::companion::AdResource::HtmlAdResource(v.into()),
        );
        self
    }
}

impl wkt::message::Message for Companion {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.Companion"
    }
}

/// Defines additional types related to Companion
pub mod companion {
    #[allow(unused_imports)]
    use super::*;

    /// Ad resource associated with the companion ad.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum AdResource {
        /// The IFrame ad resource associated with the companion ad.
        IframeAdResource(std::boxed::Box<crate::model::IframeAdResource>),
        /// The static ad resource associated with the companion ad.
        StaticAdResource(std::boxed::Box<crate::model::StaticAdResource>),
        /// The HTML ad resource associated with the companion ad.
        HtmlAdResource(std::boxed::Box<crate::model::HtmlAdResource>),
    }
}

/// Metadata for an HTML ad resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct HtmlAdResource {
    /// The HTML to display for the ad resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub html_source: std::string::String,
}

impl HtmlAdResource {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [html_source][crate::model::HtmlAdResource::html_source].
    pub fn set_html_source<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.html_source = v.into();
        self
    }
}

impl wkt::message::Message for HtmlAdResource {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.HtmlAdResource"
    }
}

/// Metadata for an IFrame ad resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct IframeAdResource {
    /// URI source for an IFrame to display for the ad resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,
}

impl IframeAdResource {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [uri][crate::model::IframeAdResource::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }
}

impl wkt::message::Message for IframeAdResource {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.IframeAdResource"
    }
}

/// Metadata for a static ad resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StaticAdResource {
    /// URI to the static file for the ad resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,

    /// Describes the MIME type of the ad resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub creative_type: std::string::String,
}

impl StaticAdResource {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [uri][crate::model::StaticAdResource::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }

    /// Sets the value of [creative_type][crate::model::StaticAdResource::creative_type].
    pub fn set_creative_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.creative_type = v.into();
        self
    }
}

impl wkt::message::Message for StaticAdResource {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.StaticAdResource"
    }
}

/// Describes an event and a trigger URI.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Event {
    /// Describes the event that occurred.
    #[serde(rename = "type")]
    pub r#type: crate::model::event::EventType,

    /// The URI to trigger for this event.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,

    /// The ID of the event.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,

    /// The offset in seconds if the event type is `PROGRESS`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub offset: std::option::Option<wkt::Duration>,
}

impl Event {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [r#type][crate::model::Event::type].
    pub fn set_type<T: std::convert::Into<crate::model::event::EventType>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [uri][crate::model::Event::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }

    /// Sets the value of [id][crate::model::Event::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [offset][crate::model::Event::offset].
    pub fn set_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.offset = v.into();
        self
    }
}

impl wkt::message::Message for Event {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.Event"
    }
}

/// Defines additional types related to Event
pub mod event {
    #[allow(unused_imports)]
    use super::*;

    /// Describes the event that occurred.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct EventType(i32);

    impl EventType {
        /// The event type is unspecified.
        pub const EVENT_TYPE_UNSPECIFIED: EventType = EventType::new(0);

        /// First frame of creative ad viewed.
        pub const CREATIVE_VIEW: EventType = EventType::new(1);

        /// Creative ad started.
        pub const START: EventType = EventType::new(2);

        /// Start of an ad break.
        pub const BREAK_START: EventType = EventType::new(3);

        /// End of an ad break.
        pub const BREAK_END: EventType = EventType::new(4);

        /// Impression.
        pub const IMPRESSION: EventType = EventType::new(5);

        /// First quartile progress.
        pub const FIRST_QUARTILE: EventType = EventType::new(6);

        /// Midpoint progress.
        pub const MIDPOINT: EventType = EventType::new(7);

        /// Third quartile progress.
        pub const THIRD_QUARTILE: EventType = EventType::new(8);

        /// Ad progress completed.
        pub const COMPLETE: EventType = EventType::new(9);

        /// Specific progress event with an offset.
        pub const PROGRESS: EventType = EventType::new(10);

        /// Player muted.
        pub const MUTE: EventType = EventType::new(11);

        /// Player unmuted.
        pub const UNMUTE: EventType = EventType::new(12);

        /// Player paused.
        pub const PAUSE: EventType = EventType::new(13);

        /// Click event.
        pub const CLICK: EventType = EventType::new(14);

        /// Click-through event.
        pub const CLICK_THROUGH: EventType = EventType::new(15);

        /// Player rewinding.
        pub const REWIND: EventType = EventType::new(16);

        /// Player resumed.
        pub const RESUME: EventType = EventType::new(17);

        /// Error event.
        pub const ERROR: EventType = EventType::new(18);

        /// Ad expanded to a larger size.
        pub const EXPAND: EventType = EventType::new(21);

        /// Ad collapsed to a smaller size.
        pub const COLLAPSE: EventType = EventType::new(22);

        /// Non-linear ad closed.
        pub const CLOSE: EventType = EventType::new(24);

        /// Linear ad closed.
        pub const CLOSE_LINEAR: EventType = EventType::new(25);

        /// Ad skipped.
        pub const SKIP: EventType = EventType::new(26);

        /// Accept invitation event.
        pub const ACCEPT_INVITATION: EventType = EventType::new(27);

        /// Creates a new EventType instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("EVENT_TYPE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATIVE_VIEW"),
                2 => std::borrow::Cow::Borrowed("START"),
                3 => std::borrow::Cow::Borrowed("BREAK_START"),
                4 => std::borrow::Cow::Borrowed("BREAK_END"),
                5 => std::borrow::Cow::Borrowed("IMPRESSION"),
                6 => std::borrow::Cow::Borrowed("FIRST_QUARTILE"),
                7 => std::borrow::Cow::Borrowed("MIDPOINT"),
                8 => std::borrow::Cow::Borrowed("THIRD_QUARTILE"),
                9 => std::borrow::Cow::Borrowed("COMPLETE"),
                10 => std::borrow::Cow::Borrowed("PROGRESS"),
                11 => std::borrow::Cow::Borrowed("MUTE"),
                12 => std::borrow::Cow::Borrowed("UNMUTE"),
                13 => std::borrow::Cow::Borrowed("PAUSE"),
                14 => std::borrow::Cow::Borrowed("CLICK"),
                15 => std::borrow::Cow::Borrowed("CLICK_THROUGH"),
                16 => std::borrow::Cow::Borrowed("REWIND"),
                17 => std::borrow::Cow::Borrowed("RESUME"),
                18 => std::borrow::Cow::Borrowed("ERROR"),
                21 => std::borrow::Cow::Borrowed("EXPAND"),
                22 => std::borrow::Cow::Borrowed("COLLAPSE"),
                24 => std::borrow::Cow::Borrowed("CLOSE"),
                25 => std::borrow::Cow::Borrowed("CLOSE_LINEAR"),
                26 => std::borrow::Cow::Borrowed("SKIP"),
                27 => std::borrow::Cow::Borrowed("ACCEPT_INVITATION"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "EVENT_TYPE_UNSPECIFIED" => std::option::Option::Some(Self::EVENT_TYPE_UNSPECIFIED),
                "CREATIVE_VIEW" => std::option::Option::Some(Self::CREATIVE_VIEW),
                "START" => std::option::Option::Some(Self::START),
                "BREAK_START" => std::option::Option::Some(Self::BREAK_START),
                "BREAK_END" => std::option::Option::Some(Self::BREAK_END),
                "IMPRESSION" => std::option::Option::Some(Self::IMPRESSION),
                "FIRST_QUARTILE" => std::option::Option::Some(Self::FIRST_QUARTILE),
                "MIDPOINT" => std::option::Option::Some(Self::MIDPOINT),
                "THIRD_QUARTILE" => std::option::Option::Some(Self::THIRD_QUARTILE),
                "COMPLETE" => std::option::Option::Some(Self::COMPLETE),
                "PROGRESS" => std::option::Option::Some(Self::PROGRESS),
                "MUTE" => std::option::Option::Some(Self::MUTE),
                "UNMUTE" => std::option::Option::Some(Self::UNMUTE),
                "PAUSE" => std::option::Option::Some(Self::PAUSE),
                "CLICK" => std::option::Option::Some(Self::CLICK),
                "CLICK_THROUGH" => std::option::Option::Some(Self::CLICK_THROUGH),
                "REWIND" => std::option::Option::Some(Self::REWIND),
                "RESUME" => std::option::Option::Some(Self::RESUME),
                "ERROR" => std::option::Option::Some(Self::ERROR),
                "EXPAND" => std::option::Option::Some(Self::EXPAND),
                "COLLAPSE" => std::option::Option::Some(Self::COLLAPSE),
                "CLOSE" => std::option::Option::Some(Self::CLOSE),
                "CLOSE_LINEAR" => std::option::Option::Some(Self::CLOSE_LINEAR),
                "SKIP" => std::option::Option::Some(Self::SKIP),
                "ACCEPT_INVITATION" => std::option::Option::Some(Self::ACCEPT_INVITATION),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for EventType {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for EventType {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Indicates a time in which a list of events should be triggered
/// during media playback.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ProgressEvent {
    /// The time when the following tracking events occurs. The time is in
    /// seconds relative to the start of the VOD asset.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub time_offset: std::option::Option<wkt::Duration>,

    /// The list of progress tracking events for the ad break. These can be of
    /// the following IAB types: `BREAK_START`, `BREAK_END`, `IMPRESSION`,
    /// `CREATIVE_VIEW`, `START`, `FIRST_QUARTILE`, `MIDPOINT`, `THIRD_QUARTILE`,
    /// `COMPLETE`, `PROGRESS`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub events: std::vec::Vec<crate::model::Event>,
}

impl ProgressEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [time_offset][crate::model::ProgressEvent::time_offset].
    pub fn set_time_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.time_offset = v.into();
        self
    }

    /// Sets the value of [events][crate::model::ProgressEvent::events].
    pub fn set_events<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Event>,
    {
        use std::iter::Iterator;
        self.events = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ProgressEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.ProgressEvent"
    }
}

/// Options on how fetches should be made.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FetchOptions {
    /// Custom headers to pass into fetch request.
    /// Headers must have a maximum of 3 key value pairs.
    /// Each key value pair must have a maximum of 256 characters per key and 256
    /// characters per value.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub headers: std::collections::HashMap<std::string::String, std::string::String>,
}

impl FetchOptions {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [headers][crate::model::FetchOptions::headers].
    pub fn set_headers<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.headers = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for FetchOptions {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.FetchOptions"
    }
}

/// Metadata for used to register live configs.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LiveConfig {
    /// Output only. The resource name of the live config, in the form of
    /// `projects/{project}/locations/{location}/liveConfigs/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Source URI for the live stream manifest.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source_uri: std::string::String,

    /// The default ad tag associated with this live stream config.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub ad_tag_uri: std::string::String,

    /// Additional metadata used to register a live stream with Google Ad Manager
    /// (GAM)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub gam_live_config: std::option::Option<crate::model::GamLiveConfig>,

    /// Output only. State of the live config.
    pub state: crate::model::live_config::State,

    /// Required. Determines how the ads are tracked.
    pub ad_tracking: crate::model::AdTracking,

    /// This must refer to a slate in the same
    /// project. If Google Ad Manager (GAM) is used for ads, this string sets the
    /// value of `slateCreativeId` in
    /// <https://developers.google.com/ad-manager/api/reference/v202211/LiveStreamEventService.LiveStreamEvent#slateCreativeId>
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub default_slate: std::string::String,

    /// Defines the stitcher behavior in case an ad does not align exactly with
    /// the ad break boundaries. If not specified, the default is `CUT_CURRENT`.
    pub stitching_policy: crate::model::live_config::StitchingPolicy,

    /// The configuration for prefetching ads.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub prefetch_config: std::option::Option<crate::model::PrefetchConfig>,

    /// Options for fetching source manifests and segments.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub source_fetch_options: std::option::Option<crate::model::FetchOptions>,
}

impl LiveConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::LiveConfig::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [source_uri][crate::model::LiveConfig::source_uri].
    pub fn set_source_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source_uri = v.into();
        self
    }

    /// Sets the value of [ad_tag_uri][crate::model::LiveConfig::ad_tag_uri].
    pub fn set_ad_tag_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.ad_tag_uri = v.into();
        self
    }

    /// Sets the value of [gam_live_config][crate::model::LiveConfig::gam_live_config].
    pub fn set_gam_live_config<
        T: std::convert::Into<std::option::Option<crate::model::GamLiveConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.gam_live_config = v.into();
        self
    }

    /// Sets the value of [state][crate::model::LiveConfig::state].
    pub fn set_state<T: std::convert::Into<crate::model::live_config::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [ad_tracking][crate::model::LiveConfig::ad_tracking].
    pub fn set_ad_tracking<T: std::convert::Into<crate::model::AdTracking>>(
        mut self,
        v: T,
    ) -> Self {
        self.ad_tracking = v.into();
        self
    }

    /// Sets the value of [default_slate][crate::model::LiveConfig::default_slate].
    pub fn set_default_slate<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.default_slate = v.into();
        self
    }

    /// Sets the value of [stitching_policy][crate::model::LiveConfig::stitching_policy].
    pub fn set_stitching_policy<
        T: std::convert::Into<crate::model::live_config::StitchingPolicy>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.stitching_policy = v.into();
        self
    }

    /// Sets the value of [prefetch_config][crate::model::LiveConfig::prefetch_config].
    pub fn set_prefetch_config<
        T: std::convert::Into<std::option::Option<crate::model::PrefetchConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.prefetch_config = v.into();
        self
    }

    /// Sets the value of [source_fetch_options][crate::model::LiveConfig::source_fetch_options].
    pub fn set_source_fetch_options<
        T: std::convert::Into<std::option::Option<crate::model::FetchOptions>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source_fetch_options = v.into();
        self
    }
}

impl wkt::message::Message for LiveConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.LiveConfig"
    }
}

/// Defines additional types related to LiveConfig
pub mod live_config {
    #[allow(unused_imports)]
    use super::*;

    /// State of the live config.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// State is not specified.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// Live config is being created.
        pub const CREATING: State = State::new(1);

        /// Live config is ready for use.
        pub const READY: State = State::new(2);

        /// Live config is queued up for deletion.
        pub const DELETING: State = State::new(3);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATING"),
                2 => std::borrow::Cow::Borrowed("READY"),
                3 => std::borrow::Cow::Borrowed("DELETING"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "READY" => std::option::Option::Some(Self::READY),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Defines the ad stitching behavior in case the ad duration does not align
    /// exactly with the ad break boundaries. If not specified, the default is
    /// `CUT_CURRENT`.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct StitchingPolicy(i32);

    impl StitchingPolicy {
        /// Stitching policy is not specified.
        pub const STITCHING_POLICY_UNSPECIFIED: StitchingPolicy = StitchingPolicy::new(0);

        /// Cuts an ad short and returns to content in the middle of the ad.
        pub const CUT_CURRENT: StitchingPolicy = StitchingPolicy::new(1);

        /// Finishes stitching the current ad before returning to content.
        pub const COMPLETE_AD: StitchingPolicy = StitchingPolicy::new(2);

        /// Creates a new StitchingPolicy instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STITCHING_POLICY_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CUT_CURRENT"),
                2 => std::borrow::Cow::Borrowed("COMPLETE_AD"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STITCHING_POLICY_UNSPECIFIED" => {
                    std::option::Option::Some(Self::STITCHING_POLICY_UNSPECIFIED)
                }
                "CUT_CURRENT" => std::option::Option::Some(Self::CUT_CURRENT),
                "COMPLETE_AD" => std::option::Option::Some(Self::COMPLETE_AD),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for StitchingPolicy {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for StitchingPolicy {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// The configuration for prefetch ads.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PrefetchConfig {
    /// Required. Indicates whether the option to prefetch ad requests is enabled.
    pub enabled: bool,

    /// The duration in seconds of the part of the break to be prefetched.
    /// This field is only relevant if prefetch is enabled.
    /// You should set this duration to as long as possible to increase the
    /// benefits of prefetching, but not longer than the shortest ad break
    /// expected. For example, for a live event with 30s and 60s ad breaks, the
    /// initial duration should be set to 30s.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub initial_ad_request_duration: std::option::Option<wkt::Duration>,
}

impl PrefetchConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [enabled][crate::model::PrefetchConfig::enabled].
    pub fn set_enabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enabled = v.into();
        self
    }

    /// Sets the value of [initial_ad_request_duration][crate::model::PrefetchConfig::initial_ad_request_duration].
    pub fn set_initial_ad_request_duration<
        T: std::convert::Into<std::option::Option<wkt::Duration>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.initial_ad_request_duration = v.into();
        self
    }
}

impl wkt::message::Message for PrefetchConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.PrefetchConfig"
    }
}

/// Metadata used to register a live stream with Google Ad Manager (GAM)
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GamLiveConfig {
    /// Required. Ad Manager network code to associate with the live config.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub network_code: std::string::String,

    /// Output only. The asset key identifier generated for the live config.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub asset_key: std::string::String,

    /// Output only. The custom asset key identifier generated for the live config.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub custom_asset_key: std::string::String,
}

impl GamLiveConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [network_code][crate::model::GamLiveConfig::network_code].
    pub fn set_network_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.network_code = v.into();
        self
    }

    /// Sets the value of [asset_key][crate::model::GamLiveConfig::asset_key].
    pub fn set_asset_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.asset_key = v.into();
        self
    }

    /// Sets the value of [custom_asset_key][crate::model::GamLiveConfig::custom_asset_key].
    pub fn set_custom_asset_key<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.custom_asset_key = v.into();
        self
    }
}

impl wkt::message::Message for GamLiveConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.GamLiveConfig"
    }
}

/// Metadata for a VOD session. The session expires 4 hours after its creation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct VodSession {
    /// Output only. The name of the VOD session, in the form of
    /// `projects/{project_number}/locations/{location}/vodSessions/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Metadata of what was stitched into the content.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub interstitials: std::option::Option<crate::model::Interstitials>,

    /// Output only. The playback URI of the stitched content.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub play_uri: std::string::String,

    /// URI of the media to stitch. For most use cases, you should create a
    /// [VodConfig][google.cloud.video.stitcher.v1.VodConfig] with this information
    /// rather than setting this field directly.
    ///
    /// [google.cloud.video.stitcher.v1.VodConfig]: crate::model::VodConfig
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source_uri: std::string::String,

    /// Ad tag URI. For most use cases, you should create a
    /// [VodConfig][google.cloud.video.stitcher.v1.VodConfig] with this information
    /// rather than setting this field directly.
    ///
    /// [google.cloud.video.stitcher.v1.VodConfig]: crate::model::VodConfig
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub ad_tag_uri: std::string::String,

    /// Key value pairs for ad tag macro replacement, only available for VOD
    /// sessions that do not implement Google Ad manager ad insertion. If the
    /// specified ad tag URI has macros, this field provides the mapping to the
    /// value that will replace the macro in the ad tag URI.
    ///
    /// Macros are designated by square brackets, for example:
    ///
    /// Ad tag URI: `"<https://doubleclick.google.com/ad/1?geo_id=>[geoId]"`
    ///
    /// Ad tag macro map: `{"geoId": "123"}`
    ///
    /// Fully qualified ad tag:
    /// ``https://doubleclick.google.com/ad/1?geo_id=123``
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub ad_tag_macro_map: std::collections::HashMap<std::string::String, std::string::String>,

    /// Additional options that affect the output of the manifest.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub manifest_options: std::option::Option<crate::model::ManifestOptions>,

    /// Output only. The generated ID of the VodSession's source media.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub asset_id: std::string::String,

    /// Required. Determines how the ad should be tracked.
    pub ad_tracking: crate::model::AdTracking,

    /// This field should be set with appropriate values if GAM is being used for
    /// ads.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub gam_settings: std::option::Option<crate::model::vod_session::GamSettings>,

    /// The resource name of the VOD config for this session, in the form of
    /// `projects/{project}/locations/{location}/vodConfigs/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub vod_config: std::string::String,
}

impl VodSession {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::VodSession::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [interstitials][crate::model::VodSession::interstitials].
    pub fn set_interstitials<
        T: std::convert::Into<std::option::Option<crate::model::Interstitials>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.interstitials = v.into();
        self
    }

    /// Sets the value of [play_uri][crate::model::VodSession::play_uri].
    pub fn set_play_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.play_uri = v.into();
        self
    }

    /// Sets the value of [source_uri][crate::model::VodSession::source_uri].
    pub fn set_source_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source_uri = v.into();
        self
    }

    /// Sets the value of [ad_tag_uri][crate::model::VodSession::ad_tag_uri].
    pub fn set_ad_tag_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.ad_tag_uri = v.into();
        self
    }

    /// Sets the value of [manifest_options][crate::model::VodSession::manifest_options].
    pub fn set_manifest_options<
        T: std::convert::Into<std::option::Option<crate::model::ManifestOptions>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.manifest_options = v.into();
        self
    }

    /// Sets the value of [asset_id][crate::model::VodSession::asset_id].
    pub fn set_asset_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.asset_id = v.into();
        self
    }

    /// Sets the value of [ad_tracking][crate::model::VodSession::ad_tracking].
    pub fn set_ad_tracking<T: std::convert::Into<crate::model::AdTracking>>(
        mut self,
        v: T,
    ) -> Self {
        self.ad_tracking = v.into();
        self
    }

    /// Sets the value of [gam_settings][crate::model::VodSession::gam_settings].
    pub fn set_gam_settings<
        T: std::convert::Into<std::option::Option<crate::model::vod_session::GamSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.gam_settings = v.into();
        self
    }

    /// Sets the value of [vod_config][crate::model::VodSession::vod_config].
    pub fn set_vod_config<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.vod_config = v.into();
        self
    }

    /// Sets the value of [ad_tag_macro_map][crate::model::VodSession::ad_tag_macro_map].
    pub fn set_ad_tag_macro_map<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.ad_tag_macro_map = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for VodSession {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.VodSession"
    }
}

/// Defines additional types related to VodSession
pub mod vod_session {
    #[allow(unused_imports)]
    use super::*;

    /// Defines fields related to Google Ad Manager (GAM). This should be set if
    /// GAM is being used for ads.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct GamSettings {
        /// Required. Ad Manager network code.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub network_code: std::string::String,

        /// Required. The stream ID generated by Ad Manager.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub stream_id: std::string::String,
    }

    impl GamSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [network_code][crate::model::vod_session::GamSettings::network_code].
        pub fn set_network_code<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.network_code = v.into();
            self
        }

        /// Sets the value of [stream_id][crate::model::vod_session::GamSettings::stream_id].
        pub fn set_stream_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.stream_id = v.into();
            self
        }
    }

    impl wkt::message::Message for GamSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.stitcher.v1.VodSession.GamSettings"
        }
    }
}

/// Describes what was stitched into a VOD session's manifest.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Interstitials {
    /// List of ad breaks ordered by time.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub ad_breaks: std::vec::Vec<crate::model::VodSessionAdBreak>,

    /// Information related to the content of the VOD session.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub session_content: std::option::Option<crate::model::VodSessionContent>,
}

impl Interstitials {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [session_content][crate::model::Interstitials::session_content].
    pub fn set_session_content<
        T: std::convert::Into<std::option::Option<crate::model::VodSessionContent>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.session_content = v.into();
        self
    }

    /// Sets the value of [ad_breaks][crate::model::Interstitials::ad_breaks].
    pub fn set_ad_breaks<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::VodSessionAdBreak>,
    {
        use std::iter::Iterator;
        self.ad_breaks = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Interstitials {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.Interstitials"
    }
}

/// Metadata for an inserted ad in a VOD session.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct VodSessionAd {
    /// Duration in seconds of the ad.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub duration: std::option::Option<wkt::Duration>,

    /// Metadata of companion ads associated with the ad.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub companion_ads: std::option::Option<crate::model::CompanionAds>,

    /// The list of progress tracking events for the ad break. These can be of
    /// the following IAB types: `MUTE`, `UNMUTE`, `PAUSE`, `CLICK`,
    /// `CLICK_THROUGH`, `REWIND`, `RESUME`, `ERROR`, `FULLSCREEN`,
    /// `EXIT_FULLSCREEN`, `EXPAND`, `COLLAPSE`, `ACCEPT_INVITATION_LINEAR`,
    /// `CLOSE_LINEAR`, `SKIP`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub activity_events: std::vec::Vec<crate::model::Event>,
}

impl VodSessionAd {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [duration][crate::model::VodSessionAd::duration].
    pub fn set_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.duration = v.into();
        self
    }

    /// Sets the value of [companion_ads][crate::model::VodSessionAd::companion_ads].
    pub fn set_companion_ads<
        T: std::convert::Into<std::option::Option<crate::model::CompanionAds>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.companion_ads = v.into();
        self
    }

    /// Sets the value of [activity_events][crate::model::VodSessionAd::activity_events].
    pub fn set_activity_events<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Event>,
    {
        use std::iter::Iterator;
        self.activity_events = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for VodSessionAd {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.VodSessionAd"
    }
}

/// Metadata for the entire stitched content in a VOD session.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct VodSessionContent {
    /// The total duration in seconds of the content including the ads stitched
    /// in.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub duration: std::option::Option<wkt::Duration>,
}

impl VodSessionContent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [duration][crate::model::VodSessionContent::duration].
    pub fn set_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.duration = v.into();
        self
    }
}

impl wkt::message::Message for VodSessionContent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.VodSessionContent"
    }
}

/// Metadata for an inserted ad break.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct VodSessionAdBreak {
    /// List of events that are expected to be triggered, ordered by time.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub progress_events: std::vec::Vec<crate::model::ProgressEvent>,

    /// Ordered list of ads stitched into the ad break.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub ads: std::vec::Vec<crate::model::VodSessionAd>,

    /// Ad break end time in seconds relative to the start of the VOD asset.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time_offset: std::option::Option<wkt::Duration>,

    /// Ad break start time in seconds relative to the start of the VOD asset.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time_offset: std::option::Option<wkt::Duration>,
}

impl VodSessionAdBreak {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [end_time_offset][crate::model::VodSessionAdBreak::end_time_offset].
    pub fn set_end_time_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time_offset = v.into();
        self
    }

    /// Sets the value of [start_time_offset][crate::model::VodSessionAdBreak::start_time_offset].
    pub fn set_start_time_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time_offset = v.into();
        self
    }

    /// Sets the value of [progress_events][crate::model::VodSessionAdBreak::progress_events].
    pub fn set_progress_events<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ProgressEvent>,
    {
        use std::iter::Iterator;
        self.progress_events = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [ads][crate::model::VodSessionAdBreak::ads].
    pub fn set_ads<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::VodSessionAd>,
    {
        use std::iter::Iterator;
        self.ads = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for VodSessionAdBreak {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.VodSessionAdBreak"
    }
}

/// Metadata for a live session. The session expires 5 minutes after the client
/// stops fetching the session's playlists.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LiveSession {
    /// Output only. The name of the live session, in the form of
    /// `projects/{project}/locations/{location}/liveSessions/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The URI to play the live session's ad-stitched stream.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub play_uri: std::string::String,

    /// Key value pairs for ad tag macro replacement, only available for live
    /// sessions that do not implement Google Ad manager ad insertion. If the
    /// specified ad tag URI has macros, this field provides the mapping to the
    /// value that will replace the macro in the ad tag URI.
    ///
    /// Macros are designated by square brackets, for example:
    ///
    /// Ad tag URI: "<https://doubleclick.google.com/ad/1?geo_id=>[geoId]"
    ///
    /// Ad tag macros: `{"geoId": "123"}`
    ///
    /// Fully qualified ad tag:
    /// ``https://doubleclick.google.com/ad/1?geo_id=123``
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub ad_tag_macros: std::collections::HashMap<std::string::String, std::string::String>,

    /// Additional options that affect the output of the manifest.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub manifest_options: std::option::Option<crate::model::ManifestOptions>,

    /// This field should be set with appropriate values if GAM is being used for
    /// ads.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub gam_settings: std::option::Option<crate::model::live_session::GamSettings>,

    /// Required. The resource name of the live config for this session, in the
    /// form of `projects/{project}/locations/{location}/liveConfigs/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub live_config: std::string::String,

    /// Determines how the ad should be tracked. This overrides the value set in
    /// the live config for this session.
    pub ad_tracking: crate::model::AdTracking,
}

impl LiveSession {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::LiveSession::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [play_uri][crate::model::LiveSession::play_uri].
    pub fn set_play_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.play_uri = v.into();
        self
    }

    /// Sets the value of [manifest_options][crate::model::LiveSession::manifest_options].
    pub fn set_manifest_options<
        T: std::convert::Into<std::option::Option<crate::model::ManifestOptions>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.manifest_options = v.into();
        self
    }

    /// Sets the value of [gam_settings][crate::model::LiveSession::gam_settings].
    pub fn set_gam_settings<
        T: std::convert::Into<std::option::Option<crate::model::live_session::GamSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.gam_settings = v.into();
        self
    }

    /// Sets the value of [live_config][crate::model::LiveSession::live_config].
    pub fn set_live_config<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.live_config = v.into();
        self
    }

    /// Sets the value of [ad_tracking][crate::model::LiveSession::ad_tracking].
    pub fn set_ad_tracking<T: std::convert::Into<crate::model::AdTracking>>(
        mut self,
        v: T,
    ) -> Self {
        self.ad_tracking = v.into();
        self
    }

    /// Sets the value of [ad_tag_macros][crate::model::LiveSession::ad_tag_macros].
    pub fn set_ad_tag_macros<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.ad_tag_macros = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for LiveSession {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.LiveSession"
    }
}

/// Defines additional types related to LiveSession
pub mod live_session {
    #[allow(unused_imports)]
    use super::*;

    /// Defines fields related to Google Ad Manager (GAM).
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct GamSettings {
        /// Required. The stream ID generated by Ad Manager. This must be set if GAM
        /// is being used for ads and the session uses client-side ad tracking.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub stream_id: std::string::String,

        /// [Targeting
        /// parameters](https://support.google.com/admanager/answer/7320899) to send
        /// to Ad Manager to generate a stream ID. This should only be set if the
        /// session uses server-side ad tracking.
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub targeting_parameters:
            std::collections::HashMap<std::string::String, std::string::String>,
    }

    impl GamSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [stream_id][crate::model::live_session::GamSettings::stream_id].
        pub fn set_stream_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.stream_id = v.into();
            self
        }

        /// Sets the value of [targeting_parameters][crate::model::live_session::GamSettings::targeting_parameters].
        pub fn set_targeting_parameters<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.targeting_parameters = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl wkt::message::Message for GamSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.stitcher.v1.LiveSession.GamSettings"
        }
    }
}

/// Options for manifest generation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ManifestOptions {
    /// If specified, the output manifest will only return renditions matching the
    /// specified filters.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub include_renditions: std::vec::Vec<crate::model::RenditionFilter>,

    /// If specified, the output manifest will orders the video and muxed
    /// renditions by bitrate according to the ordering policy.
    pub bitrate_order: crate::model::manifest_options::OrderPolicy,
}

impl ManifestOptions {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [bitrate_order][crate::model::ManifestOptions::bitrate_order].
    pub fn set_bitrate_order<T: std::convert::Into<crate::model::manifest_options::OrderPolicy>>(
        mut self,
        v: T,
    ) -> Self {
        self.bitrate_order = v.into();
        self
    }

    /// Sets the value of [include_renditions][crate::model::ManifestOptions::include_renditions].
    pub fn set_include_renditions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::RenditionFilter>,
    {
        use std::iter::Iterator;
        self.include_renditions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ManifestOptions {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.ManifestOptions"
    }
}

/// Defines additional types related to ManifestOptions
pub mod manifest_options {
    #[allow(unused_imports)]
    use super::*;

    /// Defines the ordering policy during manifest generation.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct OrderPolicy(i32);

    impl OrderPolicy {
        /// Ordering policy is not specified.
        pub const ORDER_POLICY_UNSPECIFIED: OrderPolicy = OrderPolicy::new(0);

        /// Order by ascending.
        pub const ASCENDING: OrderPolicy = OrderPolicy::new(1);

        /// Order by descending.
        pub const DESCENDING: OrderPolicy = OrderPolicy::new(2);

        /// Creates a new OrderPolicy instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("ORDER_POLICY_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("ASCENDING"),
                2 => std::borrow::Cow::Borrowed("DESCENDING"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "ORDER_POLICY_UNSPECIFIED" => {
                    std::option::Option::Some(Self::ORDER_POLICY_UNSPECIFIED)
                }
                "ASCENDING" => std::option::Option::Some(Self::ASCENDING),
                "DESCENDING" => std::option::Option::Some(Self::DESCENDING),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for OrderPolicy {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for OrderPolicy {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Filters for a video or muxed redition.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RenditionFilter {
    /// Bitrate in bits per second for the rendition. If set, only renditions with
    /// the exact bitrate will match.
    pub bitrate_bps: i32,

    /// Codecs for the rendition. If set, only renditions with the exact value
    /// will match.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub codecs: std::string::String,
}

impl RenditionFilter {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [bitrate_bps][crate::model::RenditionFilter::bitrate_bps].
    pub fn set_bitrate_bps<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.bitrate_bps = v.into();
        self
    }

    /// Sets the value of [codecs][crate::model::RenditionFilter::codecs].
    pub fn set_codecs<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.codecs = v.into();
        self
    }
}

impl wkt::message::Message for RenditionFilter {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.RenditionFilter"
    }
}

/// Slate object
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Slate {
    /// Output only. The name of the slate, in the form of
    /// `projects/{project_number}/locations/{location}/slates/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The URI to fetch the source content for the slate. This URI must return an
    /// MP4 video with at least one audio track.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,

    /// gam_slate has all the GAM-related attributes of slates.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub gam_slate: std::option::Option<crate::model::slate::GamSlate>,
}

impl Slate {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Slate::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [uri][crate::model::Slate::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }

    /// Sets the value of [gam_slate][crate::model::Slate::gam_slate].
    pub fn set_gam_slate<
        T: std::convert::Into<std::option::Option<crate::model::slate::GamSlate>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.gam_slate = v.into();
        self
    }
}

impl wkt::message::Message for Slate {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.Slate"
    }
}

/// Defines additional types related to Slate
pub mod slate {
    #[allow(unused_imports)]
    use super::*;

    /// GamSlate object has Google Ad Manager (GAM) related properties for the
    /// slate.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct GamSlate {
        /// Required. Ad Manager network code to associate with the live config.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub network_code: std::string::String,

        /// Output only. The identifier generated for the slate by GAM.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub gam_slate_id: i64,
    }

    impl GamSlate {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [network_code][crate::model::slate::GamSlate::network_code].
        pub fn set_network_code<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.network_code = v.into();
            self
        }

        /// Sets the value of [gam_slate_id][crate::model::slate::GamSlate::gam_slate_id].
        pub fn set_gam_slate_id<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.gam_slate_id = v.into();
            self
        }
    }

    impl wkt::message::Message for GamSlate {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.stitcher.v1.Slate.GamSlate"
        }
    }
}

/// Information related to the interstitial of a VOD session. This resource is
/// only available for VOD sessions that do not implement Google Ad Manager ad
/// insertion.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct VodStitchDetail {
    /// The name of the stitch detail in the specified VOD session, in the form of
    /// `projects/{project}/locations/{location}/vodSessions/{vod_session_id}/vodStitchDetails/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// A list of ad processing details for the fetched ad playlist.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub ad_stitch_details: std::vec::Vec<crate::model::AdStitchDetail>,
}

impl VodStitchDetail {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::VodStitchDetail::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [ad_stitch_details][crate::model::VodStitchDetail::ad_stitch_details].
    pub fn set_ad_stitch_details<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::AdStitchDetail>,
    {
        use std::iter::Iterator;
        self.ad_stitch_details = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for VodStitchDetail {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.VodStitchDetail"
    }
}

/// Metadata for a stitched ad.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AdStitchDetail {
    /// Required. The ad break ID of the processed ad.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub ad_break_id: std::string::String,

    /// Required. The ad ID of the processed ad.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub ad_id: std::string::String,

    /// Required. The time offset of the processed ad.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub ad_time_offset: std::option::Option<wkt::Duration>,

    /// Optional. Indicates the reason why the ad has been skipped.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub skip_reason: std::string::String,

    /// Optional. The metadata of the chosen media file for the ad.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub media: std::collections::HashMap<std::string::String, wkt::Value>,
}

impl AdStitchDetail {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [ad_break_id][crate::model::AdStitchDetail::ad_break_id].
    pub fn set_ad_break_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.ad_break_id = v.into();
        self
    }

    /// Sets the value of [ad_id][crate::model::AdStitchDetail::ad_id].
    pub fn set_ad_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.ad_id = v.into();
        self
    }

    /// Sets the value of [ad_time_offset][crate::model::AdStitchDetail::ad_time_offset].
    pub fn set_ad_time_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.ad_time_offset = v.into();
        self
    }

    /// Sets the value of [skip_reason][crate::model::AdStitchDetail::skip_reason].
    pub fn set_skip_reason<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.skip_reason = v.into();
        self
    }

    /// Sets the value of [media][crate::model::AdStitchDetail::media].
    pub fn set_media<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::Value>,
    {
        use std::iter::Iterator;
        self.media = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for AdStitchDetail {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.AdStitchDetail"
    }
}

/// Request message for VideoStitcherService.createCdnKey.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateCdnKeyRequest {
    /// Required. The project in which the CDN key should be created, in the form
    /// of `projects/{project_number}/locations/{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The CDN key resource to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cdn_key: std::option::Option<crate::model::CdnKey>,

    /// Required. The ID to use for the CDN key, which will become the final
    /// component of the CDN key's resource name.
    ///
    /// This value should conform to RFC-1034, which restricts to
    /// lower-case letters, numbers, and hyphen, with the first character a
    /// letter, the last a letter or a number, and a 63 character maximum.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub cdn_key_id: std::string::String,
}

impl CreateCdnKeyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateCdnKeyRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [cdn_key][crate::model::CreateCdnKeyRequest::cdn_key].
    pub fn set_cdn_key<T: std::convert::Into<std::option::Option<crate::model::CdnKey>>>(
        mut self,
        v: T,
    ) -> Self {
        self.cdn_key = v.into();
        self
    }

    /// Sets the value of [cdn_key_id][crate::model::CreateCdnKeyRequest::cdn_key_id].
    pub fn set_cdn_key_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.cdn_key_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateCdnKeyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.CreateCdnKeyRequest"
    }
}

/// Request message for VideoStitcherService.listCdnKeys.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListCdnKeysRequest {
    /// Required. The project that contains the list of CDN keys, in the form of
    /// `projects/{project_number}/locations/{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Requested page size. Server may return fewer items than requested.
    /// If unspecified, server will pick an appropriate default.
    pub page_size: i32,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filtering results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Hint for how to order the results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListCdnKeysRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListCdnKeysRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListCdnKeysRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListCdnKeysRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListCdnKeysRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListCdnKeysRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListCdnKeysRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.ListCdnKeysRequest"
    }
}

/// Response message for VideoStitcher.ListCdnKeys.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListCdnKeysResponse {
    /// List of CDN keys.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub cdn_keys: std::vec::Vec<crate::model::CdnKey>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListCdnKeysResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListCdnKeysResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [cdn_keys][crate::model::ListCdnKeysResponse::cdn_keys].
    pub fn set_cdn_keys<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CdnKey>,
    {
        use std::iter::Iterator;
        self.cdn_keys = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListCdnKeysResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListCdnKeysResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.ListCdnKeysResponse"
    }
}

impl gax::paginator::PageableResponse for ListCdnKeysResponse {
    type PageItem = crate::model::CdnKey;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.cdn_keys
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for VideoStitcherService.getCdnKey.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetCdnKeyRequest {
    /// Required. The name of the CDN key to be retrieved, in the form of
    /// `projects/{project}/locations/{location}/cdnKeys/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetCdnKeyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetCdnKeyRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetCdnKeyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.GetCdnKeyRequest"
    }
}

/// Request message for VideoStitcherService.deleteCdnKey.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteCdnKeyRequest {
    /// Required. The name of the CDN key to be deleted, in the form of
    /// `projects/{project_number}/locations/{location}/cdnKeys/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteCdnKeyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteCdnKeyRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteCdnKeyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.DeleteCdnKeyRequest"
    }
}

/// Request message for VideoStitcherService.updateCdnKey.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateCdnKeyRequest {
    /// Required. The CDN key resource which replaces the resource on the server.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cdn_key: std::option::Option<crate::model::CdnKey>,

    /// Required. The update mask applies to the resource.
    /// For the `FieldMask` definition, see
    /// <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask>
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateCdnKeyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [cdn_key][crate::model::UpdateCdnKeyRequest::cdn_key].
    pub fn set_cdn_key<T: std::convert::Into<std::option::Option<crate::model::CdnKey>>>(
        mut self,
        v: T,
    ) -> Self {
        self.cdn_key = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateCdnKeyRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateCdnKeyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.UpdateCdnKeyRequest"
    }
}

/// Request message for VideoStitcherService.createVodSession
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateVodSessionRequest {
    /// Required. The project and location in which the VOD session should be
    /// created, in the form of `projects/{project_number}/locations/{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Parameters for creating a session.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub vod_session: std::option::Option<crate::model::VodSession>,
}

impl CreateVodSessionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateVodSessionRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [vod_session][crate::model::CreateVodSessionRequest::vod_session].
    pub fn set_vod_session<T: std::convert::Into<std::option::Option<crate::model::VodSession>>>(
        mut self,
        v: T,
    ) -> Self {
        self.vod_session = v.into();
        self
    }
}

impl wkt::message::Message for CreateVodSessionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.CreateVodSessionRequest"
    }
}

/// Request message for VideoStitcherService.getVodSession
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetVodSessionRequest {
    /// Required. The name of the VOD session to be retrieved, in the form of
    /// `projects/{project_number}/locations/{location}/vodSessions/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetVodSessionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetVodSessionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetVodSessionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.GetVodSessionRequest"
    }
}

/// Request message for VideoStitcherService.listVodStitchDetails.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListVodStitchDetailsRequest {
    /// Required. The VOD session where the stitch details belong to, in the form
    /// of `projects/{project}/locations/{location}/vodSessions/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return.
    pub page_size: i32,

    /// The next_page_token value returned from a previous List request, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListVodStitchDetailsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListVodStitchDetailsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListVodStitchDetailsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListVodStitchDetailsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListVodStitchDetailsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.ListVodStitchDetailsRequest"
    }
}

/// Response message for VideoStitcherService.listVodStitchDetails.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListVodStitchDetailsResponse {
    /// A List of stitch Details.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub vod_stitch_details: std::vec::Vec<crate::model::VodStitchDetail>,

    /// The pagination token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListVodStitchDetailsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListVodStitchDetailsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [vod_stitch_details][crate::model::ListVodStitchDetailsResponse::vod_stitch_details].
    pub fn set_vod_stitch_details<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::VodStitchDetail>,
    {
        use std::iter::Iterator;
        self.vod_stitch_details = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListVodStitchDetailsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.ListVodStitchDetailsResponse"
    }
}

impl gax::paginator::PageableResponse for ListVodStitchDetailsResponse {
    type PageItem = crate::model::VodStitchDetail;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.vod_stitch_details
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for VideoStitcherService.getVodStitchDetail.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetVodStitchDetailRequest {
    /// Required. The name of the stitch detail in the specified VOD session, in
    /// the form of
    /// `projects/{project}/locations/{location}/vodSessions/{vod_session_id}/vodStitchDetails/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetVodStitchDetailRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetVodStitchDetailRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetVodStitchDetailRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.GetVodStitchDetailRequest"
    }
}

/// Request message for VideoStitcherService.listVodAdTagDetails.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListVodAdTagDetailsRequest {
    /// Required. The VOD session which the ad tag details belong to, in the form
    /// of `projects/{project}/locations/{location}/vodSessions/{vod_session_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return.
    pub page_size: i32,

    /// The next_page_token value returned from a previous List request, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListVodAdTagDetailsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListVodAdTagDetailsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListVodAdTagDetailsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListVodAdTagDetailsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListVodAdTagDetailsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.ListVodAdTagDetailsRequest"
    }
}

/// Response message for VideoStitcherService.listVodAdTagDetails.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListVodAdTagDetailsResponse {
    /// A List of ad tag details.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub vod_ad_tag_details: std::vec::Vec<crate::model::VodAdTagDetail>,

    /// The pagination token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListVodAdTagDetailsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListVodAdTagDetailsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [vod_ad_tag_details][crate::model::ListVodAdTagDetailsResponse::vod_ad_tag_details].
    pub fn set_vod_ad_tag_details<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::VodAdTagDetail>,
    {
        use std::iter::Iterator;
        self.vod_ad_tag_details = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListVodAdTagDetailsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.ListVodAdTagDetailsResponse"
    }
}

impl gax::paginator::PageableResponse for ListVodAdTagDetailsResponse {
    type PageItem = crate::model::VodAdTagDetail;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.vod_ad_tag_details
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for VideoStitcherService.getVodAdTagDetail
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetVodAdTagDetailRequest {
    /// Required. The name of the ad tag detail for the specified VOD session, in
    /// the form of
    /// `projects/{project}/locations/{location}/vodSessions/{vod_session_id}/vodAdTagDetails/{vod_ad_tag_detail}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetVodAdTagDetailRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetVodAdTagDetailRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetVodAdTagDetailRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.GetVodAdTagDetailRequest"
    }
}

/// Request message for VideoStitcherService.listLiveAdTagDetails.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListLiveAdTagDetailsRequest {
    /// Required. The resource parent in the form of
    /// `projects/{project}/locations/{location}/liveSessions/{live_session}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return.
    pub page_size: i32,

    /// The pagination token returned from a previous List request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListLiveAdTagDetailsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListLiveAdTagDetailsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListLiveAdTagDetailsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListLiveAdTagDetailsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListLiveAdTagDetailsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.ListLiveAdTagDetailsRequest"
    }
}

/// Response message for VideoStitcherService.listLiveAdTagDetails.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListLiveAdTagDetailsResponse {
    /// A list of live session ad tag details.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub live_ad_tag_details: std::vec::Vec<crate::model::LiveAdTagDetail>,

    /// The pagination token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListLiveAdTagDetailsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListLiveAdTagDetailsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [live_ad_tag_details][crate::model::ListLiveAdTagDetailsResponse::live_ad_tag_details].
    pub fn set_live_ad_tag_details<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::LiveAdTagDetail>,
    {
        use std::iter::Iterator;
        self.live_ad_tag_details = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListLiveAdTagDetailsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.ListLiveAdTagDetailsResponse"
    }
}

impl gax::paginator::PageableResponse for ListLiveAdTagDetailsResponse {
    type PageItem = crate::model::LiveAdTagDetail;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.live_ad_tag_details
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for VideoStitcherService.getLiveAdTagDetail
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetLiveAdTagDetailRequest {
    /// Required. The resource name in the form of
    /// `projects/{project}/locations/{location}/liveSessions/{live_session}/liveAdTagDetails/{live_ad_tag_detail}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetLiveAdTagDetailRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetLiveAdTagDetailRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetLiveAdTagDetailRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.GetLiveAdTagDetailRequest"
    }
}

/// Request message for VideoStitcherService.createSlate.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateSlateRequest {
    /// Required. The project in which the slate should be created, in the form of
    /// `projects/{project_number}/locations/{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The unique identifier for the slate.
    /// This value should conform to RFC-1034, which restricts to
    /// lower-case letters, numbers, and hyphen, with the first character a
    /// letter, the last a letter or a number, and a 63 character maximum.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub slate_id: std::string::String,

    /// Required. The slate to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub slate: std::option::Option<crate::model::Slate>,

    /// A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server will know to ignore
    /// the request if it has already been completed. The server will guarantee
    /// that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported `(00000000-0000-0000-0000-000000000000)`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateSlateRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateSlateRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [slate_id][crate::model::CreateSlateRequest::slate_id].
    pub fn set_slate_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.slate_id = v.into();
        self
    }

    /// Sets the value of [slate][crate::model::CreateSlateRequest::slate].
    pub fn set_slate<T: std::convert::Into<std::option::Option<crate::model::Slate>>>(
        mut self,
        v: T,
    ) -> Self {
        self.slate = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateSlateRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateSlateRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.CreateSlateRequest"
    }
}

/// Request message for VideoStitcherService.getSlate.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetSlateRequest {
    /// Required. The name of the slate to be retrieved, of the slate, in the form
    /// of `projects/{project_number}/locations/{location}/slates/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetSlateRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetSlateRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetSlateRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.GetSlateRequest"
    }
}

/// Request message for VideoStitcherService.listSlates.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSlatesRequest {
    /// Required. The project to list slates, in the form of
    /// `projects/{project_number}/locations/{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Requested page size. Server may return fewer items than requested.
    /// If unspecified, server will pick an appropriate default.
    pub page_size: i32,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filtering results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Hint for how to order the results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListSlatesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListSlatesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListSlatesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListSlatesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListSlatesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListSlatesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListSlatesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.ListSlatesRequest"
    }
}

/// Response message for VideoStitcherService.listSlates.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSlatesResponse {
    /// The list of slates
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub slates: std::vec::Vec<crate::model::Slate>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListSlatesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListSlatesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [slates][crate::model::ListSlatesResponse::slates].
    pub fn set_slates<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Slate>,
    {
        use std::iter::Iterator;
        self.slates = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListSlatesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListSlatesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.ListSlatesResponse"
    }
}

impl gax::paginator::PageableResponse for ListSlatesResponse {
    type PageItem = crate::model::Slate;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.slates
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for VideoStitcherService.updateSlate.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateSlateRequest {
    /// Required. The resource with updated fields.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub slate: std::option::Option<crate::model::Slate>,

    /// Required. The update mask which specifies fields which should be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateSlateRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [slate][crate::model::UpdateSlateRequest::slate].
    pub fn set_slate<T: std::convert::Into<std::option::Option<crate::model::Slate>>>(
        mut self,
        v: T,
    ) -> Self {
        self.slate = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateSlateRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateSlateRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.UpdateSlateRequest"
    }
}

/// Request message for VideoStitcherService.deleteSlate.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteSlateRequest {
    /// Required. The name of the slate to be deleted, in the form of
    /// `projects/{project_number}/locations/{location}/slates/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteSlateRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteSlateRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteSlateRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.DeleteSlateRequest"
    }
}

/// Request message for VideoStitcherService.createLiveSession.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateLiveSessionRequest {
    /// Required. The project and location in which the live session should be
    /// created, in the form of `projects/{project_number}/locations/{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Parameters for creating a live session.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub live_session: std::option::Option<crate::model::LiveSession>,
}

impl CreateLiveSessionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateLiveSessionRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [live_session][crate::model::CreateLiveSessionRequest::live_session].
    pub fn set_live_session<
        T: std::convert::Into<std::option::Option<crate::model::LiveSession>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.live_session = v.into();
        self
    }
}

impl wkt::message::Message for CreateLiveSessionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.CreateLiveSessionRequest"
    }
}

/// Request message for VideoStitcherService.getSession.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetLiveSessionRequest {
    /// Required. The name of the live session, in the form of
    /// `projects/{project_number}/locations/{location}/liveSessions/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetLiveSessionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetLiveSessionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetLiveSessionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.GetLiveSessionRequest"
    }
}

/// Request message for VideoStitcherService.createLiveConfig
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateLiveConfigRequest {
    /// Required. The project in which the live config should be created, in
    /// the form of `projects/{project_number}/locations/{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The unique identifier ID to use for the live config.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub live_config_id: std::string::String,

    /// Required. The live config resource to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub live_config: std::option::Option<crate::model::LiveConfig>,

    /// A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server will know to ignore
    /// the request if it has already been completed. The server will guarantee
    /// that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported `(00000000-0000-0000-0000-000000000000)`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateLiveConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateLiveConfigRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [live_config_id][crate::model::CreateLiveConfigRequest::live_config_id].
    pub fn set_live_config_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.live_config_id = v.into();
        self
    }

    /// Sets the value of [live_config][crate::model::CreateLiveConfigRequest::live_config].
    pub fn set_live_config<T: std::convert::Into<std::option::Option<crate::model::LiveConfig>>>(
        mut self,
        v: T,
    ) -> Self {
        self.live_config = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateLiveConfigRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateLiveConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.CreateLiveConfigRequest"
    }
}

/// Request message for VideoStitcherService.listLiveConfig.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListLiveConfigsRequest {
    /// Required. The project that contains the list of live configs, in the
    /// form of `projects/{project_number}/locations/{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return.
    pub page_size: i32,

    /// The next_page_token value returned from a previous List request, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. The filter to apply to list results (see
    /// [Filtering](https://google.aip.dev/160)).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Specifies the ordering of results following
    /// [Cloud API
    /// syntax](https://cloud.google.com/apis/design/design_patterns#sorting_order).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListLiveConfigsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListLiveConfigsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListLiveConfigsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListLiveConfigsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListLiveConfigsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListLiveConfigsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListLiveConfigsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.ListLiveConfigsRequest"
    }
}

/// Response message for VideoStitcher.ListLiveConfig.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListLiveConfigsResponse {
    /// List of live configs.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub live_configs: std::vec::Vec<crate::model::LiveConfig>,

    /// The pagination token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListLiveConfigsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListLiveConfigsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [live_configs][crate::model::ListLiveConfigsResponse::live_configs].
    pub fn set_live_configs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::LiveConfig>,
    {
        use std::iter::Iterator;
        self.live_configs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListLiveConfigsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListLiveConfigsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.ListLiveConfigsResponse"
    }
}

impl gax::paginator::PageableResponse for ListLiveConfigsResponse {
    type PageItem = crate::model::LiveConfig;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.live_configs
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for VideoStitcherService.getLiveConfig.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetLiveConfigRequest {
    /// Required. The name of the live config to be retrieved, in the form
    /// of
    /// `projects/{project_number}/locations/{location}/liveConfigs/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetLiveConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetLiveConfigRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetLiveConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.GetLiveConfigRequest"
    }
}

/// Request message for VideoStitcherService.deleteLiveConfig.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteLiveConfigRequest {
    /// Required. The name of the live config to be deleted, in the form of
    /// `projects/{project_number}/locations/{location}/liveConfigs/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteLiveConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteLiveConfigRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteLiveConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.DeleteLiveConfigRequest"
    }
}

/// Request message for VideoStitcherService.updateLiveConfig.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateLiveConfigRequest {
    /// Required. The LiveConfig resource which replaces the resource on the
    /// server.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub live_config: std::option::Option<crate::model::LiveConfig>,

    /// Required. The update mask applies to the resource.
    /// For the `FieldMask` definition, see
    /// <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask>
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateLiveConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [live_config][crate::model::UpdateLiveConfigRequest::live_config].
    pub fn set_live_config<T: std::convert::Into<std::option::Option<crate::model::LiveConfig>>>(
        mut self,
        v: T,
    ) -> Self {
        self.live_config = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateLiveConfigRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateLiveConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.UpdateLiveConfigRequest"
    }
}

/// Request message for VideoStitcherService.createVodConfig
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateVodConfigRequest {
    /// Required. The project in which the VOD config should be created, in
    /// the form of `projects/{project_number}/locations/{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The unique identifier ID to use for the VOD config.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub vod_config_id: std::string::String,

    /// Required. The VOD config resource to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub vod_config: std::option::Option<crate::model::VodConfig>,

    /// Optional. A request ID to identify requests. Specify a unique request ID
    /// so that if you must retry your request, the server will know to ignore
    /// the request if it has already been completed. The server will guarantee
    /// that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported `(00000000-0000-0000-0000-000000000000)`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateVodConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateVodConfigRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [vod_config_id][crate::model::CreateVodConfigRequest::vod_config_id].
    pub fn set_vod_config_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.vod_config_id = v.into();
        self
    }

    /// Sets the value of [vod_config][crate::model::CreateVodConfigRequest::vod_config].
    pub fn set_vod_config<T: std::convert::Into<std::option::Option<crate::model::VodConfig>>>(
        mut self,
        v: T,
    ) -> Self {
        self.vod_config = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateVodConfigRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateVodConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.CreateVodConfigRequest"
    }
}

/// Request message for VideoStitcherService.listVodConfig.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListVodConfigsRequest {
    /// Required. The project that contains the list of VOD configs, in the
    /// form of `projects/{project_number}/locations/{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of items to return.
    pub page_size: i32,

    /// Optional. The next_page_token value returned from a previous List request,
    /// if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. The filter to apply to list results (see
    /// [Filtering](https://google.aip.dev/160)).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Specifies the ordering of results following
    /// [Cloud API
    /// syntax](https://cloud.google.com/apis/design/design_patterns#sorting_order).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListVodConfigsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListVodConfigsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListVodConfigsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListVodConfigsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListVodConfigsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListVodConfigsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListVodConfigsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.ListVodConfigsRequest"
    }
}

/// Response message for VideoStitcher.ListVodConfig.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListVodConfigsResponse {
    /// List of VOD configs.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub vod_configs: std::vec::Vec<crate::model::VodConfig>,

    /// The pagination token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListVodConfigsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListVodConfigsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [vod_configs][crate::model::ListVodConfigsResponse::vod_configs].
    pub fn set_vod_configs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::VodConfig>,
    {
        use std::iter::Iterator;
        self.vod_configs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListVodConfigsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListVodConfigsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.ListVodConfigsResponse"
    }
}

impl gax::paginator::PageableResponse for ListVodConfigsResponse {
    type PageItem = crate::model::VodConfig;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.vod_configs
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for VideoStitcherService.getVodConfig.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetVodConfigRequest {
    /// Required. The name of the VOD config to be retrieved, in the form
    /// of `projects/{project_number}/locations/{location}/vodConfigs/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetVodConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetVodConfigRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetVodConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.GetVodConfigRequest"
    }
}

/// Request message for VideoStitcherService.deleteVodConfig.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteVodConfigRequest {
    /// Required. The name of the VOD config to be deleted, in the form of
    /// `projects/{project_number}/locations/{location}/vodConfigs/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteVodConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteVodConfigRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteVodConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.DeleteVodConfigRequest"
    }
}

/// Request message for VideoStitcherService.updateVodConfig.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateVodConfigRequest {
    /// Required. The VOD config resource which replaces the resource on the
    /// server.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub vod_config: std::option::Option<crate::model::VodConfig>,

    /// Required. The update mask applies to the resource.
    /// For the `FieldMask` definition, see
    /// <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask>
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateVodConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [vod_config][crate::model::UpdateVodConfigRequest::vod_config].
    pub fn set_vod_config<T: std::convert::Into<std::option::Option<crate::model::VodConfig>>>(
        mut self,
        v: T,
    ) -> Self {
        self.vod_config = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateVodConfigRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateVodConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.UpdateVodConfigRequest"
    }
}

/// Represents the metadata of the long-running operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OperationMetadata {
    /// The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,
}

impl OperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::OperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::OperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::OperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }
}

impl wkt::message::Message for OperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.OperationMetadata"
    }
}

/// Metadata used to register VOD configs.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct VodConfig {
    /// Output only. The resource name of the VOD config, in the form of
    /// `projects/{project}/locations/{location}/vodConfigs/{id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Source URI for the VOD stream manifest.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source_uri: std::string::String,

    /// Required. The default ad tag associated with this VOD config.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub ad_tag_uri: std::string::String,

    /// Optional. Google Ad Manager (GAM) metadata.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub gam_vod_config: std::option::Option<crate::model::GamVodConfig>,

    /// Output only. State of the VOD config.
    pub state: crate::model::vod_config::State,

    /// Options for fetching source manifests and segments.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub source_fetch_options: std::option::Option<crate::model::FetchOptions>,
}

impl VodConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::VodConfig::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [source_uri][crate::model::VodConfig::source_uri].
    pub fn set_source_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source_uri = v.into();
        self
    }

    /// Sets the value of [ad_tag_uri][crate::model::VodConfig::ad_tag_uri].
    pub fn set_ad_tag_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.ad_tag_uri = v.into();
        self
    }

    /// Sets the value of [gam_vod_config][crate::model::VodConfig::gam_vod_config].
    pub fn set_gam_vod_config<
        T: std::convert::Into<std::option::Option<crate::model::GamVodConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.gam_vod_config = v.into();
        self
    }

    /// Sets the value of [state][crate::model::VodConfig::state].
    pub fn set_state<T: std::convert::Into<crate::model::vod_config::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [source_fetch_options][crate::model::VodConfig::source_fetch_options].
    pub fn set_source_fetch_options<
        T: std::convert::Into<std::option::Option<crate::model::FetchOptions>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source_fetch_options = v.into();
        self
    }
}

impl wkt::message::Message for VodConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.VodConfig"
    }
}

/// Defines additional types related to VodConfig
pub mod vod_config {
    #[allow(unused_imports)]
    use super::*;

    /// State of the VOD config.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// State is not specified.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// VOD config is being created.
        pub const CREATING: State = State::new(1);

        /// VOD config is ready for use.
        pub const READY: State = State::new(2);

        /// VOD config is queued up for deletion.
        pub const DELETING: State = State::new(3);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATING"),
                2 => std::borrow::Cow::Borrowed("READY"),
                3 => std::borrow::Cow::Borrowed("DELETING"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "READY" => std::option::Option::Some(Self::READY),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Metadata used for GAM ad decisioning.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GamVodConfig {
    /// Required. Ad Manager network code to associate with the VOD config.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub network_code: std::string::String,
}

impl GamVodConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [network_code][crate::model::GamVodConfig::network_code].
    pub fn set_network_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.network_code = v.into();
        self
    }
}

impl wkt::message::Message for GamVodConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.stitcher.v1.GamVodConfig"
    }
}

/// Determines the ad tracking policy.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct AdTracking(i32);

impl AdTracking {
    /// The ad tracking policy is not specified.
    pub const AD_TRACKING_UNSPECIFIED: AdTracking = AdTracking::new(0);

    /// Client-side ad tracking is specified. The client player is expected to
    /// trigger playback and activity events itself.
    pub const CLIENT: AdTracking = AdTracking::new(1);

    /// The Video Stitcher API will trigger playback events on behalf of
    /// the client player.
    pub const SERVER: AdTracking = AdTracking::new(2);

    /// Creates a new AdTracking instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("AD_TRACKING_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("CLIENT"),
            2 => std::borrow::Cow::Borrowed("SERVER"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "AD_TRACKING_UNSPECIFIED" => std::option::Option::Some(Self::AD_TRACKING_UNSPECIFIED),
            "CLIENT" => std::option::Option::Some(Self::CLIENT),
            "SERVER" => std::option::Option::Some(Self::SERVER),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for AdTracking {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for AdTracking {
    fn default() -> Self {
        Self::new(0)
    }
}
