// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::LivestreamService].
///
/// Application developers may need to implement this trait to mock
/// `client::LivestreamService`.  In other use-cases, application developers only
/// use `client::LivestreamService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait LivestreamService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::LivestreamService::create_channel].
    fn create_channel(
        &self,
        _req: crate::model::CreateChannelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::list_channels].
    fn list_channels(
        &self,
        _req: crate::model::ListChannelsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListChannelsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListChannelsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::get_channel].
    fn get_channel(
        &self,
        _req: crate::model::GetChannelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Channel>> + Send {
        std::future::ready::<crate::Result<crate::model::Channel>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::delete_channel].
    fn delete_channel(
        &self,
        _req: crate::model::DeleteChannelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::update_channel].
    fn update_channel(
        &self,
        _req: crate::model::UpdateChannelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::start_channel].
    fn start_channel(
        &self,
        _req: crate::model::StartChannelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::stop_channel].
    fn stop_channel(
        &self,
        _req: crate::model::StopChannelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::create_input].
    fn create_input(
        &self,
        _req: crate::model::CreateInputRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::list_inputs].
    fn list_inputs(
        &self,
        _req: crate::model::ListInputsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListInputsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListInputsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::get_input].
    fn get_input(
        &self,
        _req: crate::model::GetInputRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Input>> + Send {
        std::future::ready::<crate::Result<crate::model::Input>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::LivestreamService::delete_input].
    fn delete_input(
        &self,
        _req: crate::model::DeleteInputRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::update_input].
    fn update_input(
        &self,
        _req: crate::model::UpdateInputRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::create_event].
    fn create_event(
        &self,
        _req: crate::model::CreateEventRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Event>> + Send {
        std::future::ready::<crate::Result<crate::model::Event>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::LivestreamService::list_events].
    fn list_events(
        &self,
        _req: crate::model::ListEventsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListEventsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListEventsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::get_event].
    fn get_event(
        &self,
        _req: crate::model::GetEventRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Event>> + Send {
        std::future::ready::<crate::Result<crate::model::Event>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::LivestreamService::delete_event].
    fn delete_event(
        &self,
        _req: crate::model::DeleteEventRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::LivestreamService::list_clips].
    fn list_clips(
        &self,
        _req: crate::model::ListClipsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListClipsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListClipsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::get_clip].
    fn get_clip(
        &self,
        _req: crate::model::GetClipRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Clip>> + Send {
        std::future::ready::<crate::Result<crate::model::Clip>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::LivestreamService::create_clip].
    fn create_clip(
        &self,
        _req: crate::model::CreateClipRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::delete_clip].
    fn delete_clip(
        &self,
        _req: crate::model::DeleteClipRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::create_asset].
    fn create_asset(
        &self,
        _req: crate::model::CreateAssetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::delete_asset].
    fn delete_asset(
        &self,
        _req: crate::model::DeleteAssetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::get_asset].
    fn get_asset(
        &self,
        _req: crate::model::GetAssetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Asset>> + Send {
        std::future::ready::<crate::Result<crate::model::Asset>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::LivestreamService::list_assets].
    fn list_assets(
        &self,
        _req: crate::model::ListAssetsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAssetsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListAssetsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::get_pool].
    fn get_pool(
        &self,
        _req: crate::model::GetPoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Pool>> + Send {
        std::future::ready::<crate::Result<crate::model::Pool>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::LivestreamService::update_pool].
    fn update_pool(
        &self,
        _req: crate::model::UpdatePoolRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::LivestreamService::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
           + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::LivestreamService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::LivestreamService::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::LivestreamService::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Returns the polling policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        Arc::new(gax::polling_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
