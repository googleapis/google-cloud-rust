// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Live Stream API.
///
/// # Service Description
///
/// Using Live Stream API, you can generate live streams in the various
/// renditions and streaming formats. The streaming format include HTTP Live
/// Streaming (HLS) and Dynamic Adaptive Streaming over HTTP (DASH). You can send
/// a source stream in the various ways, including Real-Time Messaging
/// Protocol (RTMP) and Secure Reliable Transport (SRT).
///
/// # Configuration
///
/// `LivestreamService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `LivestreamService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `LivestreamService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct LivestreamService {
    inner: Arc<dyn crate::stubs::dynamic::LivestreamService>,
}

impl LivestreamService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::LivestreamService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::LivestreamService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::LivestreamService> {
        crate::transport::LivestreamService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::LivestreamService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::LivestreamService::new)
    }

    /// Creates a channel with the provided unique ID in the specified
    /// region.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_channel(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::CreateChannel {
        crate::builders::livestream_service::CreateChannel::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns a list of all channels in the specified region.
    pub fn list_channels(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::ListChannels {
        crate::builders::livestream_service::ListChannels::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the specified channel.
    pub fn get_channel(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::GetChannel {
        crate::builders::livestream_service::GetChannel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes the specified channel.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_channel(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::DeleteChannel {
        crate::builders::livestream_service::DeleteChannel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates the specified channel.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_channel(
        &self,
        channel: impl Into<crate::model::Channel>,
    ) -> crate::builders::livestream_service::UpdateChannel {
        crate::builders::livestream_service::UpdateChannel::new(self.inner.clone())
            .set_channel(channel.into())
    }

    /// Starts the specified channel. Part of the video pipeline will be created
    /// only when the StartChannel request is received by the server.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn start_channel(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::StartChannel {
        crate::builders::livestream_service::StartChannel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Stops the specified channel. Part of the video pipeline will be released
    /// when the StopChannel request is received by the server.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn stop_channel(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::StopChannel {
        crate::builders::livestream_service::StopChannel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates an input with the provided unique ID in the specified region.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_input(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::CreateInput {
        crate::builders::livestream_service::CreateInput::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns a list of all inputs in the specified region.
    pub fn list_inputs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::ListInputs {
        crate::builders::livestream_service::ListInputs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the specified input.
    pub fn get_input(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::GetInput {
        crate::builders::livestream_service::GetInput::new(self.inner.clone()).set_name(name.into())
    }

    /// Deletes the specified input.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_input(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::DeleteInput {
        crate::builders::livestream_service::DeleteInput::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates the specified input.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_input(
        &self,
        input: impl Into<crate::model::Input>,
    ) -> crate::builders::livestream_service::UpdateInput {
        crate::builders::livestream_service::UpdateInput::new(self.inner.clone())
            .set_input(input.into())
    }

    /// Creates an event with the provided unique ID in the specified channel.
    pub fn create_event(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::CreateEvent {
        crate::builders::livestream_service::CreateEvent::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns a list of all events in the specified channel.
    pub fn list_events(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::ListEvents {
        crate::builders::livestream_service::ListEvents::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the specified event.
    pub fn get_event(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::GetEvent {
        crate::builders::livestream_service::GetEvent::new(self.inner.clone()).set_name(name.into())
    }

    /// Deletes the specified event.
    pub fn delete_event(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::DeleteEvent {
        crate::builders::livestream_service::DeleteEvent::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Returns a list of all clips in the specified channel.
    pub fn list_clips(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::ListClips {
        crate::builders::livestream_service::ListClips::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the specified clip.
    pub fn get_clip(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::GetClip {
        crate::builders::livestream_service::GetClip::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a clip with the provided clip ID in the specified channel.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_clip(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::CreateClip {
        crate::builders::livestream_service::CreateClip::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes the specified clip job resource. This method only deletes the clip
    /// job and does not delete the VOD clip stored in the GCS.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_clip(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::DeleteClip {
        crate::builders::livestream_service::DeleteClip::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a Asset with the provided unique ID in the specified
    /// region.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_asset(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::CreateAsset {
        crate::builders::livestream_service::CreateAsset::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes the specified asset if it is not used.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_asset(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::DeleteAsset {
        crate::builders::livestream_service::DeleteAsset::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Returns the specified asset.
    pub fn get_asset(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::GetAsset {
        crate::builders::livestream_service::GetAsset::new(self.inner.clone()).set_name(name.into())
    }

    /// Returns a list of all assets in the specified region.
    pub fn list_assets(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::ListAssets {
        crate::builders::livestream_service::ListAssets::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the specified pool.
    pub fn get_pool(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::GetPool {
        crate::builders::livestream_service::GetPool::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates the specified pool.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_pool(
        &self,
        pool: impl Into<crate::model::Pool>,
    ) -> crate::builders::livestream_service::UpdatePool {
        crate::builders::livestream_service::UpdatePool::new(self.inner.clone())
            .set_pool(pool.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::ListLocations {
        crate::builders::livestream_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::GetLocation {
        crate::builders::livestream_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::ListOperations {
        crate::builders::livestream_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::GetOperation {
        crate::builders::livestream_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::DeleteOperation {
        crate::builders::livestream_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::livestream_service::CancelOperation {
        crate::builders::livestream_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
