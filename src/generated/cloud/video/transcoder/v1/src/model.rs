// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gclient;
extern crate lazy_static;
extern crate reqwest;
extern crate rpc;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Transcoding job resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Job {
    /// The resource name of the job.
    /// Format: `projects/{project_number}/locations/{location}/jobs/{job}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Input only. Specify the `input_uri` to populate empty `uri` fields in each
    /// element of `Job.config.inputs` or `JobTemplate.config.inputs` when using
    /// template. URI of the media. Input files must be at least 5 seconds in
    /// duration and stored in Cloud Storage (for example,
    /// `gs://bucket/inputs/file.mp4`). See [Supported input and output
    /// formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub input_uri: std::string::String,

    /// Input only. Specify the `output_uri` to populate an empty
    /// `Job.config.output.uri` or `JobTemplate.config.output.uri` when using
    /// template. URI for the output file(s). For example,
    /// `gs://my-bucket/outputs/`. See [Supported input and output
    /// formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub output_uri: std::string::String,

    /// Output only. The current state of the job.
    pub state: crate::model::job::ProcessingState,

    /// Output only. The time the job was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the transcoding started.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the transcoding finished.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Job time to live value in days, which will be effective after job
    /// completion. Job should be deleted automatically after the given TTL. Enter
    /// a value between 1 and 90. The default is 30.
    pub ttl_after_completion_days: i32,

    /// The labels associated with this job. You can use these to organize and
    /// group your jobs.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Output only. An error object that describes the reason for the failure.
    /// This property is always present when `state` is `FAILED`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub error: std::option::Option<rpc::model::Status>,

    /// The processing mode of the job.
    /// The default is `PROCESSING_MODE_INTERACTIVE`.
    pub mode: crate::model::job::ProcessingMode,

    /// The processing priority of a batch job.
    /// This field can only be set for batch mode jobs. The default value is 0.
    /// This value cannot be negative. Higher values correspond to higher
    /// priorities for the job.
    pub batch_mode_priority: i32,

    /// Optional. The optimization strategy of the job. The default is
    /// `AUTODETECT`.
    pub optimization: crate::model::job::OptimizationStrategy,

    /// Specify the `job_config` for the transcoding job. If you don't specify the
    /// `job_config`, the API selects `templateId`; this template ID is set to
    /// `preset/web-hd` by default. When you use a `template_id` to create a job,
    /// the `Job.config` is populated by the `JobTemplate.config`.\<br\>
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub job_config: std::option::Option<crate::model::job::JobConfig>,
}

impl Job {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Job::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [input_uri][crate::model::Job::input_uri].
    pub fn set_input_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.input_uri = v.into();
        self
    }

    /// Sets the value of [output_uri][crate::model::Job::output_uri].
    pub fn set_output_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.output_uri = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Job::state].
    pub fn set_state<T: std::convert::Into<crate::model::job::ProcessingState>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Job::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [start_time][crate::model::Job::start_time].
    pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::Job::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [ttl_after_completion_days][crate::model::Job::ttl_after_completion_days].
    pub fn set_ttl_after_completion_days<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.ttl_after_completion_days = v.into();
        self
    }

    /// Sets the value of [error][crate::model::Job::error].
    pub fn set_error<T: std::convert::Into<std::option::Option<rpc::model::Status>>>(
        mut self,
        v: T,
    ) -> Self {
        self.error = v.into();
        self
    }

    /// Sets the value of [mode][crate::model::Job::mode].
    pub fn set_mode<T: std::convert::Into<crate::model::job::ProcessingMode>>(
        mut self,
        v: T,
    ) -> Self {
        self.mode = v.into();
        self
    }

    /// Sets the value of [batch_mode_priority][crate::model::Job::batch_mode_priority].
    pub fn set_batch_mode_priority<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.batch_mode_priority = v.into();
        self
    }

    /// Sets the value of [optimization][crate::model::Job::optimization].
    pub fn set_optimization<T: std::convert::Into<crate::model::job::OptimizationStrategy>>(
        mut self,
        v: T,
    ) -> Self {
        self.optimization = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::Job::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of `job_config`.
    pub fn set_job_config<
        T: std::convert::Into<std::option::Option<crate::model::job::JobConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.job_config = v.into();
        self
    }

    /// The value of [job_config][crate::model::Job::job_config]
    /// if it holds a `TemplateId`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_template_id(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.job_config.as_ref().and_then(|v| match v {
            crate::model::job::JobConfig::TemplateId(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [job_config][crate::model::Job::job_config]
    /// if it holds a `Config`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_config(&self) -> std::option::Option<&std::boxed::Box<crate::model::JobConfig>> {
        #[allow(unreachable_patterns)]
        self.job_config.as_ref().and_then(|v| match v {
            crate::model::job::JobConfig::Config(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [job_config][crate::model::Job::job_config]
    /// to hold a `TemplateId`.
    ///
    /// Note that all the setters affecting `job_config` are
    /// mutually exclusive.
    pub fn set_template_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.job_config =
            std::option::Option::Some(crate::model::job::JobConfig::TemplateId(v.into()));
        self
    }

    /// Sets the value of [job_config][crate::model::Job::job_config]
    /// to hold a `Config`.
    ///
    /// Note that all the setters affecting `job_config` are
    /// mutually exclusive.
    pub fn set_config<T: std::convert::Into<std::boxed::Box<crate::model::JobConfig>>>(
        mut self,
        v: T,
    ) -> Self {
        self.job_config = std::option::Option::Some(crate::model::job::JobConfig::Config(v.into()));
        self
    }
}

impl wkt::message::Message for Job {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.Job"
    }
}

/// Defines additional types related to Job
pub mod job {
    #[allow(unused_imports)]
    use super::*;

    /// The current state of the job.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct ProcessingState(i32);

    impl ProcessingState {
        /// The processing state is not specified.
        pub const PROCESSING_STATE_UNSPECIFIED: ProcessingState = ProcessingState::new(0);

        /// The job is enqueued and will be picked up for processing soon.
        pub const PENDING: ProcessingState = ProcessingState::new(1);

        /// The job is being processed.
        pub const RUNNING: ProcessingState = ProcessingState::new(2);

        /// The job has been completed successfully.
        pub const SUCCEEDED: ProcessingState = ProcessingState::new(3);

        /// The job has failed. For additional information, see `failure_reason` and
        /// `failure_details`
        pub const FAILED: ProcessingState = ProcessingState::new(4);

        /// Creates a new ProcessingState instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("PROCESSING_STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("PENDING"),
                2 => std::borrow::Cow::Borrowed("RUNNING"),
                3 => std::borrow::Cow::Borrowed("SUCCEEDED"),
                4 => std::borrow::Cow::Borrowed("FAILED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "PROCESSING_STATE_UNSPECIFIED" => {
                    std::option::Option::Some(Self::PROCESSING_STATE_UNSPECIFIED)
                }
                "PENDING" => std::option::Option::Some(Self::PENDING),
                "RUNNING" => std::option::Option::Some(Self::RUNNING),
                "SUCCEEDED" => std::option::Option::Some(Self::SUCCEEDED),
                "FAILED" => std::option::Option::Some(Self::FAILED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for ProcessingState {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for ProcessingState {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// The processing mode of the job.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct ProcessingMode(i32);

    impl ProcessingMode {
        /// The job processing mode is not specified.
        pub const PROCESSING_MODE_UNSPECIFIED: ProcessingMode = ProcessingMode::new(0);

        /// The job processing mode is interactive mode.
        /// Interactive job will either be ran or rejected if quota does not allow
        /// for it.
        pub const PROCESSING_MODE_INTERACTIVE: ProcessingMode = ProcessingMode::new(1);

        /// The job processing mode is batch mode.
        /// Batch mode allows queuing of jobs.
        pub const PROCESSING_MODE_BATCH: ProcessingMode = ProcessingMode::new(2);

        /// Creates a new ProcessingMode instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("PROCESSING_MODE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("PROCESSING_MODE_INTERACTIVE"),
                2 => std::borrow::Cow::Borrowed("PROCESSING_MODE_BATCH"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "PROCESSING_MODE_UNSPECIFIED" => {
                    std::option::Option::Some(Self::PROCESSING_MODE_UNSPECIFIED)
                }
                "PROCESSING_MODE_INTERACTIVE" => {
                    std::option::Option::Some(Self::PROCESSING_MODE_INTERACTIVE)
                }
                "PROCESSING_MODE_BATCH" => std::option::Option::Some(Self::PROCESSING_MODE_BATCH),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for ProcessingMode {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for ProcessingMode {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// The optimization strategy of the job. The default is `AUTODETECT`.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct OptimizationStrategy(i32);

    impl OptimizationStrategy {
        /// The optimization strategy is not specified.
        pub const OPTIMIZATION_STRATEGY_UNSPECIFIED: OptimizationStrategy =
            OptimizationStrategy::new(0);

        /// Prioritize job processing speed.
        pub const AUTODETECT: OptimizationStrategy = OptimizationStrategy::new(1);

        /// Disable all optimizations.
        pub const DISABLED: OptimizationStrategy = OptimizationStrategy::new(2);

        /// Creates a new OptimizationStrategy instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("OPTIMIZATION_STRATEGY_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("AUTODETECT"),
                2 => std::borrow::Cow::Borrowed("DISABLED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "OPTIMIZATION_STRATEGY_UNSPECIFIED" => {
                    std::option::Option::Some(Self::OPTIMIZATION_STRATEGY_UNSPECIFIED)
                }
                "AUTODETECT" => std::option::Option::Some(Self::AUTODETECT),
                "DISABLED" => std::option::Option::Some(Self::DISABLED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for OptimizationStrategy {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for OptimizationStrategy {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Specify the `job_config` for the transcoding job. If you don't specify the
    /// `job_config`, the API selects `templateId`; this template ID is set to
    /// `preset/web-hd` by default. When you use a `template_id` to create a job,
    /// the `Job.config` is populated by the `JobTemplate.config`.\<br\>
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum JobConfig {
        /// Input only. Specify the `template_id` to use for populating `Job.config`.
        /// The default is `preset/web-hd`, which is the only supported preset.
        ///
        /// User defined JobTemplate: `{job_template_id}`
        TemplateId(std::string::String),
        /// The configuration for this job.
        Config(std::boxed::Box<crate::model::JobConfig>),
    }
}

/// Transcoding job template resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct JobTemplate {
    /// The resource name of the job template.
    /// Format:
    /// `projects/{project_number}/locations/{location}/jobTemplates/{job_template}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The configuration for this template.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub config: std::option::Option<crate::model::JobConfig>,

    /// The labels associated with this job template. You can use these to organize
    /// and group your job templates.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,
}

impl JobTemplate {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::JobTemplate::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [config][crate::model::JobTemplate::config].
    pub fn set_config<T: std::convert::Into<std::option::Option<crate::model::JobConfig>>>(
        mut self,
        v: T,
    ) -> Self {
        self.config = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::JobTemplate::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for JobTemplate {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.JobTemplate"
    }
}

/// Job configuration
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct JobConfig {
    /// List of input assets stored in Cloud Storage.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub inputs: std::vec::Vec<crate::model::Input>,

    /// List of `Edit atom`s. Defines the ultimate timeline of the resulting
    /// file or manifest.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub edit_list: std::vec::Vec<crate::model::EditAtom>,

    /// List of elementary streams.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub elementary_streams: std::vec::Vec<crate::model::ElementaryStream>,

    /// List of multiplexing settings for output streams.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub mux_streams: std::vec::Vec<crate::model::MuxStream>,

    /// List of output manifests.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub manifests: std::vec::Vec<crate::model::Manifest>,

    /// Output configuration.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub output: std::option::Option<crate::model::Output>,

    /// List of ad breaks. Specifies where to insert ad break tags in the output
    /// manifests.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub ad_breaks: std::vec::Vec<crate::model::AdBreak>,

    /// Destination on Pub/Sub.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub pubsub_destination: std::option::Option<crate::model::PubsubDestination>,

    /// List of output sprite sheets.
    /// Spritesheets require at least one VideoStream in the Jobconfig.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub sprite_sheets: std::vec::Vec<crate::model::SpriteSheet>,

    /// List of overlays on the output video, in descending Z-order.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub overlays: std::vec::Vec<crate::model::Overlay>,

    /// List of encryption configurations for the content.
    /// Each configuration has an ID. Specify this ID in the
    /// [MuxStream.encryption_id][google.cloud.video.transcoder.v1.MuxStream.encryption_id]
    /// field to indicate the configuration to use for that `MuxStream` output.
    ///
    /// [google.cloud.video.transcoder.v1.MuxStream.encryption_id]: crate::model::MuxStream::encryption_id
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub encryptions: std::vec::Vec<crate::model::Encryption>,
}

impl JobConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [output][crate::model::JobConfig::output].
    pub fn set_output<T: std::convert::Into<std::option::Option<crate::model::Output>>>(
        mut self,
        v: T,
    ) -> Self {
        self.output = v.into();
        self
    }

    /// Sets the value of [pubsub_destination][crate::model::JobConfig::pubsub_destination].
    pub fn set_pubsub_destination<
        T: std::convert::Into<std::option::Option<crate::model::PubsubDestination>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.pubsub_destination = v.into();
        self
    }

    /// Sets the value of [inputs][crate::model::JobConfig::inputs].
    pub fn set_inputs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Input>,
    {
        use std::iter::Iterator;
        self.inputs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [edit_list][crate::model::JobConfig::edit_list].
    pub fn set_edit_list<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EditAtom>,
    {
        use std::iter::Iterator;
        self.edit_list = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [elementary_streams][crate::model::JobConfig::elementary_streams].
    pub fn set_elementary_streams<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ElementaryStream>,
    {
        use std::iter::Iterator;
        self.elementary_streams = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [mux_streams][crate::model::JobConfig::mux_streams].
    pub fn set_mux_streams<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::MuxStream>,
    {
        use std::iter::Iterator;
        self.mux_streams = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [manifests][crate::model::JobConfig::manifests].
    pub fn set_manifests<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Manifest>,
    {
        use std::iter::Iterator;
        self.manifests = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [ad_breaks][crate::model::JobConfig::ad_breaks].
    pub fn set_ad_breaks<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::AdBreak>,
    {
        use std::iter::Iterator;
        self.ad_breaks = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [sprite_sheets][crate::model::JobConfig::sprite_sheets].
    pub fn set_sprite_sheets<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SpriteSheet>,
    {
        use std::iter::Iterator;
        self.sprite_sheets = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [overlays][crate::model::JobConfig::overlays].
    pub fn set_overlays<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Overlay>,
    {
        use std::iter::Iterator;
        self.overlays = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [encryptions][crate::model::JobConfig::encryptions].
    pub fn set_encryptions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Encryption>,
    {
        use std::iter::Iterator;
        self.encryptions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for JobConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.JobConfig"
    }
}

/// Input asset.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Input {
    /// A unique key for this input. Must be specified when using advanced
    /// mapping and edit lists.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub key: std::string::String,

    /// URI of the media. Input files must be at least 5 seconds in duration and
    /// stored in Cloud Storage (for example, `gs://bucket/inputs/file.mp4`).
    /// If empty, the value is populated from `Job.input_uri`. See
    /// [Supported input and output
    /// formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,

    /// Preprocessing configurations.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub preprocessing_config: std::option::Option<crate::model::PreprocessingConfig>,
}

impl Input {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [key][crate::model::Input::key].
    pub fn set_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.key = v.into();
        self
    }

    /// Sets the value of [uri][crate::model::Input::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }

    /// Sets the value of [preprocessing_config][crate::model::Input::preprocessing_config].
    pub fn set_preprocessing_config<
        T: std::convert::Into<std::option::Option<crate::model::PreprocessingConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.preprocessing_config = v.into();
        self
    }
}

impl wkt::message::Message for Input {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.Input"
    }
}

/// Location of output file(s) in a Cloud Storage bucket.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Output {
    /// URI for the output file(s). For example, `gs://my-bucket/outputs/`.
    /// If empty, the value is populated from `Job.output_uri`. See
    /// [Supported input and output
    /// formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,
}

impl Output {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [uri][crate::model::Output::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }
}

impl wkt::message::Message for Output {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.Output"
    }
}

/// Edit atom.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EditAtom {
    /// A unique key for this atom. Must be specified when using advanced
    /// mapping.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub key: std::string::String,

    /// List of `Input.key`s identifying files that should be used in this atom.
    /// The listed `inputs` must have the same timeline.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub inputs: std::vec::Vec<std::string::String>,

    /// End time in seconds for the atom, relative to the input file timeline.
    /// When `end_time_offset` is not specified, the `inputs` are used until
    /// the end of the atom.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time_offset: std::option::Option<wkt::Duration>,

    /// Start time in seconds for the atom, relative to the input file timeline.
    /// The default is `0s`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time_offset: std::option::Option<wkt::Duration>,
}

impl EditAtom {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [key][crate::model::EditAtom::key].
    pub fn set_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.key = v.into();
        self
    }

    /// Sets the value of [end_time_offset][crate::model::EditAtom::end_time_offset].
    pub fn set_end_time_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time_offset = v.into();
        self
    }

    /// Sets the value of [start_time_offset][crate::model::EditAtom::start_time_offset].
    pub fn set_start_time_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time_offset = v.into();
        self
    }

    /// Sets the value of [inputs][crate::model::EditAtom::inputs].
    pub fn set_inputs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.inputs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for EditAtom {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.EditAtom"
    }
}

/// Ad break.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AdBreak {
    /// Start time in seconds for the ad break, relative to the output file
    /// timeline. The default is `0s`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time_offset: std::option::Option<wkt::Duration>,
}

impl AdBreak {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [start_time_offset][crate::model::AdBreak::start_time_offset].
    pub fn set_start_time_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time_offset = v.into();
        self
    }
}

impl wkt::message::Message for AdBreak {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.AdBreak"
    }
}

/// Encoding of an input file such as an audio, video, or text track.
/// Elementary streams must be packaged before
/// mapping and sharing between different output formats.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ElementaryStream {
    /// A unique key for this elementary stream.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub key: std::string::String,

    /// Encoding of an audio, video, or text track.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub elementary_stream: std::option::Option<crate::model::elementary_stream::ElementaryStream>,
}

impl ElementaryStream {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [key][crate::model::ElementaryStream::key].
    pub fn set_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.key = v.into();
        self
    }

    /// Sets the value of `elementary_stream`.
    pub fn set_elementary_stream<
        T: std::convert::Into<std::option::Option<crate::model::elementary_stream::ElementaryStream>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.elementary_stream = v.into();
        self
    }

    /// The value of [elementary_stream][crate::model::ElementaryStream::elementary_stream]
    /// if it holds a `VideoStream`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_video_stream(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::VideoStream>> {
        #[allow(unreachable_patterns)]
        self.elementary_stream.as_ref().and_then(|v| match v {
            crate::model::elementary_stream::ElementaryStream::VideoStream(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [elementary_stream][crate::model::ElementaryStream::elementary_stream]
    /// if it holds a `AudioStream`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_audio_stream(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::AudioStream>> {
        #[allow(unreachable_patterns)]
        self.elementary_stream.as_ref().and_then(|v| match v {
            crate::model::elementary_stream::ElementaryStream::AudioStream(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [elementary_stream][crate::model::ElementaryStream::elementary_stream]
    /// if it holds a `TextStream`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_text_stream(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::TextStream>> {
        #[allow(unreachable_patterns)]
        self.elementary_stream.as_ref().and_then(|v| match v {
            crate::model::elementary_stream::ElementaryStream::TextStream(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [elementary_stream][crate::model::ElementaryStream::elementary_stream]
    /// to hold a `VideoStream`.
    ///
    /// Note that all the setters affecting `elementary_stream` are
    /// mutually exclusive.
    pub fn set_video_stream<T: std::convert::Into<std::boxed::Box<crate::model::VideoStream>>>(
        mut self,
        v: T,
    ) -> Self {
        self.elementary_stream = std::option::Option::Some(
            crate::model::elementary_stream::ElementaryStream::VideoStream(v.into()),
        );
        self
    }

    /// Sets the value of [elementary_stream][crate::model::ElementaryStream::elementary_stream]
    /// to hold a `AudioStream`.
    ///
    /// Note that all the setters affecting `elementary_stream` are
    /// mutually exclusive.
    pub fn set_audio_stream<T: std::convert::Into<std::boxed::Box<crate::model::AudioStream>>>(
        mut self,
        v: T,
    ) -> Self {
        self.elementary_stream = std::option::Option::Some(
            crate::model::elementary_stream::ElementaryStream::AudioStream(v.into()),
        );
        self
    }

    /// Sets the value of [elementary_stream][crate::model::ElementaryStream::elementary_stream]
    /// to hold a `TextStream`.
    ///
    /// Note that all the setters affecting `elementary_stream` are
    /// mutually exclusive.
    pub fn set_text_stream<T: std::convert::Into<std::boxed::Box<crate::model::TextStream>>>(
        mut self,
        v: T,
    ) -> Self {
        self.elementary_stream = std::option::Option::Some(
            crate::model::elementary_stream::ElementaryStream::TextStream(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ElementaryStream {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.ElementaryStream"
    }
}

/// Defines additional types related to ElementaryStream
pub mod elementary_stream {
    #[allow(unused_imports)]
    use super::*;

    /// Encoding of an audio, video, or text track.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum ElementaryStream {
        /// Encoding of a video stream.
        VideoStream(std::boxed::Box<crate::model::VideoStream>),
        /// Encoding of an audio stream.
        AudioStream(std::boxed::Box<crate::model::AudioStream>),
        /// Encoding of a text stream. For example, closed captions or subtitles.
        TextStream(std::boxed::Box<crate::model::TextStream>),
    }
}

/// Multiplexing settings for output stream.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MuxStream {
    /// A unique key for this multiplexed stream. HLS media manifests will be
    /// named `MuxStream.key` with the `.m3u8` extension suffix.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub key: std::string::String,

    /// The name of the generated file. The default is `MuxStream.key` with the
    /// extension suffix corresponding to the `MuxStream.container`.
    ///
    /// Individual segments also have an incremental 10-digit zero-padded suffix
    /// starting from 0 before the extension, such as `mux_stream0000000123.ts`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub file_name: std::string::String,

    /// The container format. The default is `mp4`
    ///
    /// Supported container formats:
    ///
    /// - `ts`
    /// - `fmp4`- the corresponding file extension is `.m4s`
    /// - `mp4`
    /// - `vtt`
    ///
    /// See also:
    /// [Supported input and output
    /// formats](https://cloud.google.com/transcoder/docs/concepts/supported-input-and-output-formats)
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub container: std::string::String,

    /// List of `ElementaryStream.key`s multiplexed in this stream.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub elementary_streams: std::vec::Vec<std::string::String>,

    /// Segment settings for `ts`, `fmp4` and `vtt`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub segment_settings: std::option::Option<crate::model::SegmentSettings>,

    /// Identifier of the encryption configuration to use. If omitted, output will
    /// be unencrypted.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub encryption_id: std::string::String,
}

impl MuxStream {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [key][crate::model::MuxStream::key].
    pub fn set_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.key = v.into();
        self
    }

    /// Sets the value of [file_name][crate::model::MuxStream::file_name].
    pub fn set_file_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.file_name = v.into();
        self
    }

    /// Sets the value of [container][crate::model::MuxStream::container].
    pub fn set_container<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.container = v.into();
        self
    }

    /// Sets the value of [segment_settings][crate::model::MuxStream::segment_settings].
    pub fn set_segment_settings<
        T: std::convert::Into<std::option::Option<crate::model::SegmentSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.segment_settings = v.into();
        self
    }

    /// Sets the value of [encryption_id][crate::model::MuxStream::encryption_id].
    pub fn set_encryption_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.encryption_id = v.into();
        self
    }

    /// Sets the value of [elementary_streams][crate::model::MuxStream::elementary_streams].
    pub fn set_elementary_streams<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.elementary_streams = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for MuxStream {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.MuxStream"
    }
}

/// Manifest configuration.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Manifest {
    /// The name of the generated file. The default is `manifest` with the
    /// extension suffix corresponding to the `Manifest.type`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub file_name: std::string::String,

    /// Required. Type of the manifest.
    #[serde(rename = "type")]
    pub r#type: crate::model::manifest::ManifestType,

    /// Required. List of user given `MuxStream.key`s that should appear in this
    /// manifest.
    ///
    /// When `Manifest.type` is `HLS`, a media manifest with name `MuxStream.key`
    /// and `.m3u8` extension is generated for each element of the
    /// `Manifest.mux_streams`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub mux_streams: std::vec::Vec<std::string::String>,

    /// Specifies the manifest configuration.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub manifest_config: std::option::Option<crate::model::manifest::ManifestConfig>,
}

impl Manifest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [file_name][crate::model::Manifest::file_name].
    pub fn set_file_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.file_name = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::Manifest::type].
    pub fn set_type<T: std::convert::Into<crate::model::manifest::ManifestType>>(
        mut self,
        v: T,
    ) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [mux_streams][crate::model::Manifest::mux_streams].
    pub fn set_mux_streams<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.mux_streams = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of `manifest_config`.
    pub fn set_manifest_config<
        T: std::convert::Into<std::option::Option<crate::model::manifest::ManifestConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.manifest_config = v.into();
        self
    }

    /// The value of [manifest_config][crate::model::Manifest::manifest_config]
    /// if it holds a `Dash`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_dash(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::manifest::DashConfig>> {
        #[allow(unreachable_patterns)]
        self.manifest_config.as_ref().and_then(|v| match v {
            crate::model::manifest::ManifestConfig::Dash(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [manifest_config][crate::model::Manifest::manifest_config]
    /// to hold a `Dash`.
    ///
    /// Note that all the setters affecting `manifest_config` are
    /// mutually exclusive.
    pub fn set_dash<T: std::convert::Into<std::boxed::Box<crate::model::manifest::DashConfig>>>(
        mut self,
        v: T,
    ) -> Self {
        self.manifest_config =
            std::option::Option::Some(crate::model::manifest::ManifestConfig::Dash(v.into()));
        self
    }
}

impl wkt::message::Message for Manifest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.Manifest"
    }
}

/// Defines additional types related to Manifest
pub mod manifest {
    #[allow(unused_imports)]
    use super::*;

    /// `DASH` manifest configuration.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct DashConfig {
        /// The segment reference scheme for a `DASH` manifest. The default is
        /// `SEGMENT_LIST`.
        pub segment_reference_scheme: crate::model::manifest::dash_config::SegmentReferenceScheme,
    }

    impl DashConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [segment_reference_scheme][crate::model::manifest::DashConfig::segment_reference_scheme].
        pub fn set_segment_reference_scheme<
            T: std::convert::Into<crate::model::manifest::dash_config::SegmentReferenceScheme>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.segment_reference_scheme = v.into();
            self
        }
    }

    impl wkt::message::Message for DashConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.Manifest.DashConfig"
        }
    }

    /// Defines additional types related to DashConfig
    pub mod dash_config {
        #[allow(unused_imports)]
        use super::*;

        /// The segment reference scheme for a `DASH` manifest.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct SegmentReferenceScheme(i32);

        impl SegmentReferenceScheme {
            /// The segment reference scheme is not specified.
            pub const SEGMENT_REFERENCE_SCHEME_UNSPECIFIED: SegmentReferenceScheme =
                SegmentReferenceScheme::new(0);

            /// Lists the URLs of media files for each segment.
            pub const SEGMENT_LIST: SegmentReferenceScheme = SegmentReferenceScheme::new(1);

            /// Lists each segment from a template with $Number$ variable.
            pub const SEGMENT_TEMPLATE_NUMBER: SegmentReferenceScheme =
                SegmentReferenceScheme::new(2);

            /// Creates a new SegmentReferenceScheme instance.
            pub(crate) const fn new(value: i32) -> Self {
                Self(value)
            }

            /// Gets the enum value.
            pub fn value(&self) -> i32 {
                self.0
            }

            /// Gets the enum value as a string.
            pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
                match self.0 {
                    0 => std::borrow::Cow::Borrowed("SEGMENT_REFERENCE_SCHEME_UNSPECIFIED"),
                    1 => std::borrow::Cow::Borrowed("SEGMENT_LIST"),
                    2 => std::borrow::Cow::Borrowed("SEGMENT_TEMPLATE_NUMBER"),
                    _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
                }
            }

            /// Creates an enum value from the value name.
            pub fn from_str_name(name: &str) -> std::option::Option<Self> {
                match name {
                    "SEGMENT_REFERENCE_SCHEME_UNSPECIFIED" => {
                        std::option::Option::Some(Self::SEGMENT_REFERENCE_SCHEME_UNSPECIFIED)
                    }
                    "SEGMENT_LIST" => std::option::Option::Some(Self::SEGMENT_LIST),
                    "SEGMENT_TEMPLATE_NUMBER" => {
                        std::option::Option::Some(Self::SEGMENT_TEMPLATE_NUMBER)
                    }
                    _ => std::option::Option::None,
                }
            }
        }

        impl std::convert::From<i32> for SegmentReferenceScheme {
            fn from(value: i32) -> Self {
                Self::new(value)
            }
        }

        impl std::default::Default for SegmentReferenceScheme {
            fn default() -> Self {
                Self::new(0)
            }
        }
    }

    /// The manifest type, which corresponds to the adaptive streaming format used.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct ManifestType(i32);

    impl ManifestType {
        /// The manifest type is not specified.
        pub const MANIFEST_TYPE_UNSPECIFIED: ManifestType = ManifestType::new(0);

        /// Create an HLS manifest. The corresponding file extension is `.m3u8`.
        pub const HLS: ManifestType = ManifestType::new(1);

        /// Create an MPEG-DASH manifest. The corresponding file extension is `.mpd`.
        pub const DASH: ManifestType = ManifestType::new(2);

        /// Creates a new ManifestType instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("MANIFEST_TYPE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("HLS"),
                2 => std::borrow::Cow::Borrowed("DASH"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "MANIFEST_TYPE_UNSPECIFIED" => {
                    std::option::Option::Some(Self::MANIFEST_TYPE_UNSPECIFIED)
                }
                "HLS" => std::option::Option::Some(Self::HLS),
                "DASH" => std::option::Option::Some(Self::DASH),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for ManifestType {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for ManifestType {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Specifies the manifest configuration.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum ManifestConfig {
        /// `DASH` manifest configuration.
        Dash(std::boxed::Box<crate::model::manifest::DashConfig>),
    }
}

/// A Pub/Sub destination.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PubsubDestination {
    /// The name of the Pub/Sub topic to publish job completion notification
    /// to. For example: `projects/{project}/topics/{topic}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub topic: std::string::String,
}

impl PubsubDestination {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [topic][crate::model::PubsubDestination::topic].
    pub fn set_topic<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.topic = v.into();
        self
    }
}

impl wkt::message::Message for PubsubDestination {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.PubsubDestination"
    }
}

/// Sprite sheet configuration.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SpriteSheet {
    /// Format type. The default is `jpeg`.
    ///
    /// Supported formats:
    ///
    /// - `jpeg`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub format: std::string::String,

    /// Required. File name prefix for the generated sprite sheets.
    ///
    /// Each sprite sheet has an incremental 10-digit zero-padded suffix starting
    /// from 0 before the extension, such as `sprite_sheet0000000123.jpeg`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub file_prefix: std::string::String,

    /// Required. The width of sprite in pixels. Must be an even integer. To
    /// preserve the source aspect ratio, set the
    /// [SpriteSheet.sprite_width_pixels][google.cloud.video.transcoder.v1.SpriteSheet.sprite_width_pixels]
    /// field or the
    /// [SpriteSheet.sprite_height_pixels][google.cloud.video.transcoder.v1.SpriteSheet.sprite_height_pixels]
    /// field, but not both (the API will automatically calculate the missing
    /// field).
    ///
    /// For portrait videos that contain horizontal ASR and rotation metadata,
    /// provide the width, in pixels, per the horizontal ASR. The API calculates
    /// the height per the horizontal ASR. The API detects any rotation metadata
    /// and swaps the requested height and width for the output.
    ///
    /// [google.cloud.video.transcoder.v1.SpriteSheet.sprite_height_pixels]: crate::model::SpriteSheet::sprite_height_pixels
    /// [google.cloud.video.transcoder.v1.SpriteSheet.sprite_width_pixels]: crate::model::SpriteSheet::sprite_width_pixels
    pub sprite_width_pixels: i32,

    /// Required. The height of sprite in pixels. Must be an even integer. To
    /// preserve the source aspect ratio, set the
    /// [SpriteSheet.sprite_height_pixels][google.cloud.video.transcoder.v1.SpriteSheet.sprite_height_pixels]
    /// field or the
    /// [SpriteSheet.sprite_width_pixels][google.cloud.video.transcoder.v1.SpriteSheet.sprite_width_pixels]
    /// field, but not both (the API will automatically calculate the missing
    /// field).
    ///
    /// For portrait videos that contain horizontal ASR and rotation metadata,
    /// provide the height, in pixels, per the horizontal ASR. The API calculates
    /// the width per the horizontal ASR. The API detects any rotation metadata
    /// and swaps the requested height and width for the output.
    ///
    /// [google.cloud.video.transcoder.v1.SpriteSheet.sprite_height_pixels]: crate::model::SpriteSheet::sprite_height_pixels
    /// [google.cloud.video.transcoder.v1.SpriteSheet.sprite_width_pixels]: crate::model::SpriteSheet::sprite_width_pixels
    pub sprite_height_pixels: i32,

    /// The maximum number of sprites per row in a sprite sheet. The default is 0,
    /// which indicates no maximum limit.
    pub column_count: i32,

    /// The maximum number of rows per sprite sheet. When the sprite sheet is full,
    /// a new sprite sheet is created. The default is 0, which indicates no maximum
    /// limit.
    pub row_count: i32,

    /// Start time in seconds, relative to the output file timeline. Determines the
    /// first sprite to pick. The default is `0s`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time_offset: std::option::Option<wkt::Duration>,

    /// End time in seconds, relative to the output file timeline. When
    /// `end_time_offset` is not specified, the sprites are generated until the end
    /// of the output file.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time_offset: std::option::Option<wkt::Duration>,

    /// The quality of the generated sprite sheet. Enter a value between 1
    /// and 100, where 1 is the lowest quality and 100 is the highest quality.
    /// The default is 100. A high quality value corresponds to a low image data
    /// compression ratio.
    pub quality: i32,

    /// Specify either total number of sprites or interval to create sprites.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub extraction_strategy: std::option::Option<crate::model::sprite_sheet::ExtractionStrategy>,
}

impl SpriteSheet {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [format][crate::model::SpriteSheet::format].
    pub fn set_format<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.format = v.into();
        self
    }

    /// Sets the value of [file_prefix][crate::model::SpriteSheet::file_prefix].
    pub fn set_file_prefix<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.file_prefix = v.into();
        self
    }

    /// Sets the value of [sprite_width_pixels][crate::model::SpriteSheet::sprite_width_pixels].
    pub fn set_sprite_width_pixels<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.sprite_width_pixels = v.into();
        self
    }

    /// Sets the value of [sprite_height_pixels][crate::model::SpriteSheet::sprite_height_pixels].
    pub fn set_sprite_height_pixels<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.sprite_height_pixels = v.into();
        self
    }

    /// Sets the value of [column_count][crate::model::SpriteSheet::column_count].
    pub fn set_column_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.column_count = v.into();
        self
    }

    /// Sets the value of [row_count][crate::model::SpriteSheet::row_count].
    pub fn set_row_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.row_count = v.into();
        self
    }

    /// Sets the value of [start_time_offset][crate::model::SpriteSheet::start_time_offset].
    pub fn set_start_time_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time_offset = v.into();
        self
    }

    /// Sets the value of [end_time_offset][crate::model::SpriteSheet::end_time_offset].
    pub fn set_end_time_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time_offset = v.into();
        self
    }

    /// Sets the value of [quality][crate::model::SpriteSheet::quality].
    pub fn set_quality<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.quality = v.into();
        self
    }

    /// Sets the value of `extraction_strategy`.
    pub fn set_extraction_strategy<
        T: std::convert::Into<std::option::Option<crate::model::sprite_sheet::ExtractionStrategy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.extraction_strategy = v.into();
        self
    }

    /// The value of [extraction_strategy][crate::model::SpriteSheet::extraction_strategy]
    /// if it holds a `TotalCount`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_total_count(&self) -> std::option::Option<&i32> {
        #[allow(unreachable_patterns)]
        self.extraction_strategy.as_ref().and_then(|v| match v {
            crate::model::sprite_sheet::ExtractionStrategy::TotalCount(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [extraction_strategy][crate::model::SpriteSheet::extraction_strategy]
    /// if it holds a `Interval`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_interval(&self) -> std::option::Option<&std::boxed::Box<wkt::Duration>> {
        #[allow(unreachable_patterns)]
        self.extraction_strategy.as_ref().and_then(|v| match v {
            crate::model::sprite_sheet::ExtractionStrategy::Interval(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [extraction_strategy][crate::model::SpriteSheet::extraction_strategy]
    /// to hold a `TotalCount`.
    ///
    /// Note that all the setters affecting `extraction_strategy` are
    /// mutually exclusive.
    pub fn set_total_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.extraction_strategy = std::option::Option::Some(
            crate::model::sprite_sheet::ExtractionStrategy::TotalCount(v.into()),
        );
        self
    }

    /// Sets the value of [extraction_strategy][crate::model::SpriteSheet::extraction_strategy]
    /// to hold a `Interval`.
    ///
    /// Note that all the setters affecting `extraction_strategy` are
    /// mutually exclusive.
    pub fn set_interval<T: std::convert::Into<std::boxed::Box<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.extraction_strategy = std::option::Option::Some(
            crate::model::sprite_sheet::ExtractionStrategy::Interval(v.into()),
        );
        self
    }
}

impl wkt::message::Message for SpriteSheet {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.SpriteSheet"
    }
}

/// Defines additional types related to SpriteSheet
pub mod sprite_sheet {
    #[allow(unused_imports)]
    use super::*;

    /// Specify either total number of sprites or interval to create sprites.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum ExtractionStrategy {
        /// Total number of sprites. Create the specified number of sprites
        /// distributed evenly across the timeline of the output media. The default
        /// is 100.
        TotalCount(i32),
        /// Starting from `0s`, create sprites at regular intervals. Specify the
        /// interval value in seconds.
        Interval(std::boxed::Box<wkt::Duration>),
    }
}

/// Overlay configuration.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Overlay {
    /// Image overlay.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub image: std::option::Option<crate::model::overlay::Image>,

    /// List of Animations. The list should be chronological, without any time
    /// overlap.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub animations: std::vec::Vec<crate::model::overlay::Animation>,
}

impl Overlay {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [image][crate::model::Overlay::image].
    pub fn set_image<T: std::convert::Into<std::option::Option<crate::model::overlay::Image>>>(
        mut self,
        v: T,
    ) -> Self {
        self.image = v.into();
        self
    }

    /// Sets the value of [animations][crate::model::Overlay::animations].
    pub fn set_animations<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::overlay::Animation>,
    {
        use std::iter::Iterator;
        self.animations = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Overlay {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.Overlay"
    }
}

/// Defines additional types related to Overlay
pub mod overlay {
    #[allow(unused_imports)]
    use super::*;

    /// 2D normalized coordinates. Default: `{0.0, 0.0}`
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct NormalizedCoordinate {
        /// Normalized x coordinate.
        pub x: f64,

        /// Normalized y coordinate.
        pub y: f64,
    }

    impl NormalizedCoordinate {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [x][crate::model::overlay::NormalizedCoordinate::x].
        pub fn set_x<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.x = v.into();
            self
        }

        /// Sets the value of [y][crate::model::overlay::NormalizedCoordinate::y].
        pub fn set_y<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.y = v.into();
            self
        }
    }

    impl wkt::message::Message for NormalizedCoordinate {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.Overlay.NormalizedCoordinate"
        }
    }

    /// Overlaid image.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Image {
        /// Required. URI of the image in Cloud Storage. For example,
        /// `gs://bucket/inputs/image.png`. Only PNG and JPEG images are supported.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub uri: std::string::String,

        /// Normalized image resolution, based on output video resolution. Valid
        /// values: `0.0`–`1.0`. To respect the original image aspect ratio, set
        /// either `x` or `y` to `0.0`. To use the original image resolution, set
        /// both `x` and `y` to `0.0`.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub resolution: std::option::Option<crate::model::overlay::NormalizedCoordinate>,

        /// Target image opacity. Valid values are from  `1.0` (solid, default) to
        /// `0.0` (transparent), exclusive. Set this to a value greater than `0.0`.
        pub alpha: f64,
    }

    impl Image {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [uri][crate::model::overlay::Image::uri].
        pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.uri = v.into();
            self
        }

        /// Sets the value of [resolution][crate::model::overlay::Image::resolution].
        pub fn set_resolution<
            T: std::convert::Into<std::option::Option<crate::model::overlay::NormalizedCoordinate>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.resolution = v.into();
            self
        }

        /// Sets the value of [alpha][crate::model::overlay::Image::alpha].
        pub fn set_alpha<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.alpha = v.into();
            self
        }
    }

    impl wkt::message::Message for Image {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.Overlay.Image"
        }
    }

    /// Display static overlay object.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AnimationStatic {
        /// Normalized coordinates based on output video resolution. Valid
        /// values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay
        /// object. For example, use the x and y coordinates {0,0} to position the
        /// top-left corner of the overlay animation in the top-left corner of the
        /// output video.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub xy: std::option::Option<crate::model::overlay::NormalizedCoordinate>,

        /// The time to start displaying the overlay object, in seconds. Default: 0
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub start_time_offset: std::option::Option<wkt::Duration>,
    }

    impl AnimationStatic {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [xy][crate::model::overlay::AnimationStatic::xy].
        pub fn set_xy<
            T: std::convert::Into<std::option::Option<crate::model::overlay::NormalizedCoordinate>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.xy = v.into();
            self
        }

        /// Sets the value of [start_time_offset][crate::model::overlay::AnimationStatic::start_time_offset].
        pub fn set_start_time_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.start_time_offset = v.into();
            self
        }
    }

    impl wkt::message::Message for AnimationStatic {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.Overlay.AnimationStatic"
        }
    }

    /// Display overlay object with fade animation.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AnimationFade {
        /// Required. Type of fade animation: `FADE_IN` or `FADE_OUT`.
        pub fade_type: crate::model::overlay::FadeType,

        /// Normalized coordinates based on output video resolution. Valid
        /// values: `0.0`–`1.0`. `xy` is the upper-left coordinate of the overlay
        /// object. For example, use the x and y coordinates {0,0} to position the
        /// top-left corner of the overlay animation in the top-left corner of the
        /// output video.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub xy: std::option::Option<crate::model::overlay::NormalizedCoordinate>,

        /// The time to start the fade animation, in seconds. Default: 0
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub start_time_offset: std::option::Option<wkt::Duration>,

        /// The time to end the fade animation, in seconds. Default:
        /// `start_time_offset` + 1s
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub end_time_offset: std::option::Option<wkt::Duration>,
    }

    impl AnimationFade {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [fade_type][crate::model::overlay::AnimationFade::fade_type].
        pub fn set_fade_type<T: std::convert::Into<crate::model::overlay::FadeType>>(
            mut self,
            v: T,
        ) -> Self {
            self.fade_type = v.into();
            self
        }

        /// Sets the value of [xy][crate::model::overlay::AnimationFade::xy].
        pub fn set_xy<
            T: std::convert::Into<std::option::Option<crate::model::overlay::NormalizedCoordinate>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.xy = v.into();
            self
        }

        /// Sets the value of [start_time_offset][crate::model::overlay::AnimationFade::start_time_offset].
        pub fn set_start_time_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.start_time_offset = v.into();
            self
        }

        /// Sets the value of [end_time_offset][crate::model::overlay::AnimationFade::end_time_offset].
        pub fn set_end_time_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.end_time_offset = v.into();
            self
        }
    }

    impl wkt::message::Message for AnimationFade {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.Overlay.AnimationFade"
        }
    }

    /// End previous overlay animation from the video. Without AnimationEnd, the
    /// overlay object will keep the state of previous animation until the end of
    /// the video.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AnimationEnd {
        /// The time to end overlay object, in seconds. Default: 0
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub start_time_offset: std::option::Option<wkt::Duration>,
    }

    impl AnimationEnd {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [start_time_offset][crate::model::overlay::AnimationEnd::start_time_offset].
        pub fn set_start_time_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.start_time_offset = v.into();
            self
        }
    }

    impl wkt::message::Message for AnimationEnd {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.Overlay.AnimationEnd"
        }
    }

    /// Animation types.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Animation {
        /// Animations can be static or fade, or they can end the previous animation.
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub animation_type: std::option::Option<crate::model::overlay::animation::AnimationType>,
    }

    impl Animation {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of `animation_type`.
        pub fn set_animation_type<
            T: std::convert::Into<
                std::option::Option<crate::model::overlay::animation::AnimationType>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.animation_type = v.into();
            self
        }

        /// The value of [animation_type][crate::model::overlay::Animation::animation_type]
        /// if it holds a `AnimationStatic`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_animation_static(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::overlay::AnimationStatic>> {
            #[allow(unreachable_patterns)]
            self.animation_type.as_ref().and_then(|v| match v {
                crate::model::overlay::animation::AnimationType::AnimationStatic(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [animation_type][crate::model::overlay::Animation::animation_type]
        /// if it holds a `AnimationFade`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_animation_fade(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::overlay::AnimationFade>> {
            #[allow(unreachable_patterns)]
            self.animation_type.as_ref().and_then(|v| match v {
                crate::model::overlay::animation::AnimationType::AnimationFade(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [animation_type][crate::model::overlay::Animation::animation_type]
        /// if it holds a `AnimationEnd`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_animation_end(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::overlay::AnimationEnd>> {
            #[allow(unreachable_patterns)]
            self.animation_type.as_ref().and_then(|v| match v {
                crate::model::overlay::animation::AnimationType::AnimationEnd(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [animation_type][crate::model::overlay::Animation::animation_type]
        /// to hold a `AnimationStatic`.
        ///
        /// Note that all the setters affecting `animation_type` are
        /// mutually exclusive.
        pub fn set_animation_static<
            T: std::convert::Into<std::boxed::Box<crate::model::overlay::AnimationStatic>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.animation_type = std::option::Option::Some(
                crate::model::overlay::animation::AnimationType::AnimationStatic(v.into()),
            );
            self
        }

        /// Sets the value of [animation_type][crate::model::overlay::Animation::animation_type]
        /// to hold a `AnimationFade`.
        ///
        /// Note that all the setters affecting `animation_type` are
        /// mutually exclusive.
        pub fn set_animation_fade<
            T: std::convert::Into<std::boxed::Box<crate::model::overlay::AnimationFade>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.animation_type = std::option::Option::Some(
                crate::model::overlay::animation::AnimationType::AnimationFade(v.into()),
            );
            self
        }

        /// Sets the value of [animation_type][crate::model::overlay::Animation::animation_type]
        /// to hold a `AnimationEnd`.
        ///
        /// Note that all the setters affecting `animation_type` are
        /// mutually exclusive.
        pub fn set_animation_end<
            T: std::convert::Into<std::boxed::Box<crate::model::overlay::AnimationEnd>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.animation_type = std::option::Option::Some(
                crate::model::overlay::animation::AnimationType::AnimationEnd(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for Animation {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.Overlay.Animation"
        }
    }

    /// Defines additional types related to Animation
    pub mod animation {
        #[allow(unused_imports)]
        use super::*;

        /// Animations can be static or fade, or they can end the previous animation.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum AnimationType {
            /// Display static overlay object.
            AnimationStatic(std::boxed::Box<crate::model::overlay::AnimationStatic>),
            /// Display overlay object with fade animation.
            AnimationFade(std::boxed::Box<crate::model::overlay::AnimationFade>),
            /// End previous animation.
            AnimationEnd(std::boxed::Box<crate::model::overlay::AnimationEnd>),
        }
    }

    /// Fade type for the overlay: `FADE_IN` or `FADE_OUT`.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct FadeType(i32);

    impl FadeType {
        /// The fade type is not specified.
        pub const FADE_TYPE_UNSPECIFIED: FadeType = FadeType::new(0);

        /// Fade the overlay object into view.
        pub const FADE_IN: FadeType = FadeType::new(1);

        /// Fade the overlay object out of view.
        pub const FADE_OUT: FadeType = FadeType::new(2);

        /// Creates a new FadeType instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("FADE_TYPE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("FADE_IN"),
                2 => std::borrow::Cow::Borrowed("FADE_OUT"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "FADE_TYPE_UNSPECIFIED" => std::option::Option::Some(Self::FADE_TYPE_UNSPECIFIED),
                "FADE_IN" => std::option::Option::Some(Self::FADE_IN),
                "FADE_OUT" => std::option::Option::Some(Self::FADE_OUT),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for FadeType {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for FadeType {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Preprocessing configurations.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PreprocessingConfig {
    /// Color preprocessing configuration.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub color: std::option::Option<crate::model::preprocessing_config::Color>,

    /// Denoise preprocessing configuration.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub denoise: std::option::Option<crate::model::preprocessing_config::Denoise>,

    /// Deblock preprocessing configuration.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub deblock: std::option::Option<crate::model::preprocessing_config::Deblock>,

    /// Audio preprocessing configuration.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub audio: std::option::Option<crate::model::preprocessing_config::Audio>,

    /// Specify the video cropping configuration.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub crop: std::option::Option<crate::model::preprocessing_config::Crop>,

    /// Specify the video pad filter configuration.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub pad: std::option::Option<crate::model::preprocessing_config::Pad>,

    /// Specify the video deinterlace configuration.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub deinterlace: std::option::Option<crate::model::preprocessing_config::Deinterlace>,
}

impl PreprocessingConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [color][crate::model::PreprocessingConfig::color].
    pub fn set_color<
        T: std::convert::Into<std::option::Option<crate::model::preprocessing_config::Color>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.color = v.into();
        self
    }

    /// Sets the value of [denoise][crate::model::PreprocessingConfig::denoise].
    pub fn set_denoise<
        T: std::convert::Into<std::option::Option<crate::model::preprocessing_config::Denoise>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.denoise = v.into();
        self
    }

    /// Sets the value of [deblock][crate::model::PreprocessingConfig::deblock].
    pub fn set_deblock<
        T: std::convert::Into<std::option::Option<crate::model::preprocessing_config::Deblock>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.deblock = v.into();
        self
    }

    /// Sets the value of [audio][crate::model::PreprocessingConfig::audio].
    pub fn set_audio<
        T: std::convert::Into<std::option::Option<crate::model::preprocessing_config::Audio>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.audio = v.into();
        self
    }

    /// Sets the value of [crop][crate::model::PreprocessingConfig::crop].
    pub fn set_crop<
        T: std::convert::Into<std::option::Option<crate::model::preprocessing_config::Crop>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.crop = v.into();
        self
    }

    /// Sets the value of [pad][crate::model::PreprocessingConfig::pad].
    pub fn set_pad<
        T: std::convert::Into<std::option::Option<crate::model::preprocessing_config::Pad>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.pad = v.into();
        self
    }

    /// Sets the value of [deinterlace][crate::model::PreprocessingConfig::deinterlace].
    pub fn set_deinterlace<
        T: std::convert::Into<std::option::Option<crate::model::preprocessing_config::Deinterlace>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.deinterlace = v.into();
        self
    }
}

impl wkt::message::Message for PreprocessingConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.PreprocessingConfig"
    }
}

/// Defines additional types related to PreprocessingConfig
pub mod preprocessing_config {
    #[allow(unused_imports)]
    use super::*;

    /// Color preprocessing configuration.
    ///
    /// **Note:** This configuration is not supported.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Color {
        /// Control color saturation of the video. Enter a value between -1 and 1,
        /// where -1 is fully desaturated and 1 is maximum saturation. 0 is no
        /// change. The default is 0.
        pub saturation: f64,

        /// Control black and white contrast of the video. Enter a value between -1
        /// and 1, where -1 is minimum contrast and 1 is maximum contrast. 0 is no
        /// change. The default is 0.
        pub contrast: f64,

        /// Control brightness of the video. Enter a value between -1 and 1, where -1
        /// is minimum brightness and 1 is maximum brightness. 0 is no change. The
        /// default is 0.
        pub brightness: f64,
    }

    impl Color {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [saturation][crate::model::preprocessing_config::Color::saturation].
        pub fn set_saturation<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.saturation = v.into();
            self
        }

        /// Sets the value of [contrast][crate::model::preprocessing_config::Color::contrast].
        pub fn set_contrast<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.contrast = v.into();
            self
        }

        /// Sets the value of [brightness][crate::model::preprocessing_config::Color::brightness].
        pub fn set_brightness<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.brightness = v.into();
            self
        }
    }

    impl wkt::message::Message for Color {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.PreprocessingConfig.Color"
        }
    }

    /// Denoise preprocessing configuration.
    ///
    /// **Note:** This configuration is not supported.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Denoise {
        /// Set strength of the denoise. Enter a value between 0 and 1. The higher
        /// the value, the smoother the image. 0 is no denoising. The default is 0.
        pub strength: f64,

        /// Set the denoiser mode. The default is `standard`.
        ///
        /// Supported denoiser modes:
        ///
        /// - `standard`
        /// - `grain`
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub tune: std::string::String,
    }

    impl Denoise {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [strength][crate::model::preprocessing_config::Denoise::strength].
        pub fn set_strength<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.strength = v.into();
            self
        }

        /// Sets the value of [tune][crate::model::preprocessing_config::Denoise::tune].
        pub fn set_tune<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.tune = v.into();
            self
        }
    }

    impl wkt::message::Message for Denoise {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.PreprocessingConfig.Denoise"
        }
    }

    /// Deblock preprocessing configuration.
    ///
    /// **Note:** This configuration is not supported.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Deblock {
        /// Set strength of the deblocker. Enter a value between 0 and 1. The higher
        /// the value, the stronger the block removal. 0 is no deblocking. The
        /// default is 0.
        pub strength: f64,

        /// Enable deblocker. The default is `false`.
        pub enabled: bool,
    }

    impl Deblock {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [strength][crate::model::preprocessing_config::Deblock::strength].
        pub fn set_strength<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.strength = v.into();
            self
        }

        /// Sets the value of [enabled][crate::model::preprocessing_config::Deblock::enabled].
        pub fn set_enabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enabled = v.into();
            self
        }
    }

    impl wkt::message::Message for Deblock {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.PreprocessingConfig.Deblock"
        }
    }

    /// Audio preprocessing configuration.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Audio {
        /// Specify audio loudness normalization in loudness units relative to full
        /// scale (LUFS). Enter a value between -24 and 0 (the default), where:
        ///
        /// * -24 is the Advanced Television Systems Committee (ATSC A/85) standard
        /// * -23 is the EU R128 broadcast standard
        /// * -19 is the prior standard for online mono audio
        /// * -18 is the ReplayGain standard
        /// * -16 is the prior standard for stereo audio
        /// * -14 is the new online audio standard recommended by Spotify, as well
        ///   as Amazon Echo
        /// * 0 disables normalization
        pub lufs: f64,

        /// Enable boosting high frequency components. The default is `false`.
        ///
        /// **Note:** This field is not supported.
        pub high_boost: bool,

        /// Enable boosting low frequency components. The default is `false`.
        ///
        /// **Note:** This field is not supported.
        pub low_boost: bool,
    }

    impl Audio {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [lufs][crate::model::preprocessing_config::Audio::lufs].
        pub fn set_lufs<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.lufs = v.into();
            self
        }

        /// Sets the value of [high_boost][crate::model::preprocessing_config::Audio::high_boost].
        pub fn set_high_boost<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.high_boost = v.into();
            self
        }

        /// Sets the value of [low_boost][crate::model::preprocessing_config::Audio::low_boost].
        pub fn set_low_boost<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.low_boost = v.into();
            self
        }
    }

    impl wkt::message::Message for Audio {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.PreprocessingConfig.Audio"
        }
    }

    /// Video cropping configuration for the input video. The cropped input video
    /// is scaled to match the output resolution.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Crop {
        /// The number of pixels to crop from the top. The default is 0.
        pub top_pixels: i32,

        /// The number of pixels to crop from the bottom. The default is 0.
        pub bottom_pixels: i32,

        /// The number of pixels to crop from the left. The default is 0.
        pub left_pixels: i32,

        /// The number of pixels to crop from the right. The default is 0.
        pub right_pixels: i32,
    }

    impl Crop {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [top_pixels][crate::model::preprocessing_config::Crop::top_pixels].
        pub fn set_top_pixels<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.top_pixels = v.into();
            self
        }

        /// Sets the value of [bottom_pixels][crate::model::preprocessing_config::Crop::bottom_pixels].
        pub fn set_bottom_pixels<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.bottom_pixels = v.into();
            self
        }

        /// Sets the value of [left_pixels][crate::model::preprocessing_config::Crop::left_pixels].
        pub fn set_left_pixels<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.left_pixels = v.into();
            self
        }

        /// Sets the value of [right_pixels][crate::model::preprocessing_config::Crop::right_pixels].
        pub fn set_right_pixels<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.right_pixels = v.into();
            self
        }
    }

    impl wkt::message::Message for Crop {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.PreprocessingConfig.Crop"
        }
    }

    /// Pad filter configuration for the input video. The padded input video
    /// is scaled after padding with black to match the output resolution.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Pad {
        /// The number of pixels to add to the top. The default is 0.
        pub top_pixels: i32,

        /// The number of pixels to add to the bottom. The default is 0.
        pub bottom_pixels: i32,

        /// The number of pixels to add to the left. The default is 0.
        pub left_pixels: i32,

        /// The number of pixels to add to the right. The default is 0.
        pub right_pixels: i32,
    }

    impl Pad {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [top_pixels][crate::model::preprocessing_config::Pad::top_pixels].
        pub fn set_top_pixels<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.top_pixels = v.into();
            self
        }

        /// Sets the value of [bottom_pixels][crate::model::preprocessing_config::Pad::bottom_pixels].
        pub fn set_bottom_pixels<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.bottom_pixels = v.into();
            self
        }

        /// Sets the value of [left_pixels][crate::model::preprocessing_config::Pad::left_pixels].
        pub fn set_left_pixels<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.left_pixels = v.into();
            self
        }

        /// Sets the value of [right_pixels][crate::model::preprocessing_config::Pad::right_pixels].
        pub fn set_right_pixels<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.right_pixels = v.into();
            self
        }
    }

    impl wkt::message::Message for Pad {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.PreprocessingConfig.Pad"
        }
    }

    /// Deinterlace configuration for input video.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Deinterlace {
        /// Specify the video deinterlacing filter. The default is `yadif`.
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub deinterlacing_filter: std::option::Option<
            crate::model::preprocessing_config::deinterlace::DeinterlacingFilter,
        >,
    }

    impl Deinterlace {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of `deinterlacing_filter`.
        pub fn set_deinterlacing_filter<
            T: std::convert::Into<
                std::option::Option<
                    crate::model::preprocessing_config::deinterlace::DeinterlacingFilter,
                >,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.deinterlacing_filter = v.into();
            self
        }

        /// The value of [deinterlacing_filter][crate::model::preprocessing_config::Deinterlace::deinterlacing_filter]
        /// if it holds a `Yadif`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_yadif(
            &self,
        ) -> std::option::Option<
            &std::boxed::Box<crate::model::preprocessing_config::deinterlace::YadifConfig>,
        > {
            #[allow(unreachable_patterns)]
            self.deinterlacing_filter.as_ref().and_then(|v| match v {
                crate::model::preprocessing_config::deinterlace::DeinterlacingFilter::Yadif(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [deinterlacing_filter][crate::model::preprocessing_config::Deinterlace::deinterlacing_filter]
        /// if it holds a `Bwdif`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_bwdif(
            &self,
        ) -> std::option::Option<
            &std::boxed::Box<crate::model::preprocessing_config::deinterlace::BwdifConfig>,
        > {
            #[allow(unreachable_patterns)]
            self.deinterlacing_filter.as_ref().and_then(|v| match v {
                crate::model::preprocessing_config::deinterlace::DeinterlacingFilter::Bwdif(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [deinterlacing_filter][crate::model::preprocessing_config::Deinterlace::deinterlacing_filter]
        /// to hold a `Yadif`.
        ///
        /// Note that all the setters affecting `deinterlacing_filter` are
        /// mutually exclusive.
        pub fn set_yadif<
            T: std::convert::Into<
                std::boxed::Box<crate::model::preprocessing_config::deinterlace::YadifConfig>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.deinterlacing_filter = std::option::Option::Some(
                crate::model::preprocessing_config::deinterlace::DeinterlacingFilter::Yadif(
                    v.into(),
                ),
            );
            self
        }

        /// Sets the value of [deinterlacing_filter][crate::model::preprocessing_config::Deinterlace::deinterlacing_filter]
        /// to hold a `Bwdif`.
        ///
        /// Note that all the setters affecting `deinterlacing_filter` are
        /// mutually exclusive.
        pub fn set_bwdif<
            T: std::convert::Into<
                std::boxed::Box<crate::model::preprocessing_config::deinterlace::BwdifConfig>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.deinterlacing_filter = std::option::Option::Some(
                crate::model::preprocessing_config::deinterlace::DeinterlacingFilter::Bwdif(
                    v.into(),
                ),
            );
            self
        }
    }

    impl wkt::message::Message for Deinterlace {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.PreprocessingConfig.Deinterlace"
        }
    }

    /// Defines additional types related to Deinterlace
    pub mod deinterlace {
        #[allow(unused_imports)]
        use super::*;

        /// Yet Another Deinterlacing Filter Configuration.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct YadifConfig {
            /// Specifies the deinterlacing mode to adopt.
            /// The default is `send_frame`.
            /// Supported values:
            ///
            /// - `send_frame`: Output one frame for each frame
            /// - `send_field`: Output one frame for each field
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub mode: std::string::String,

            /// Disable spacial interlacing.
            /// The default is `false`.
            pub disable_spatial_interlacing: bool,

            /// The picture field parity assumed for the input interlaced video.
            /// The default is `auto`.
            /// Supported values:
            ///
            /// - `tff`: Assume the top field is first
            /// - `bff`: Assume the bottom field is first
            /// - `auto`: Enable automatic detection of field parity
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub parity: std::string::String,

            /// Deinterlace all frames rather than just the frames identified as
            /// interlaced. The default is `false`.
            pub deinterlace_all_frames: bool,
        }

        impl YadifConfig {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [mode][crate::model::preprocessing_config::deinterlace::YadifConfig::mode].
            pub fn set_mode<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.mode = v.into();
                self
            }

            /// Sets the value of [disable_spatial_interlacing][crate::model::preprocessing_config::deinterlace::YadifConfig::disable_spatial_interlacing].
            pub fn set_disable_spatial_interlacing<T: std::convert::Into<bool>>(
                mut self,
                v: T,
            ) -> Self {
                self.disable_spatial_interlacing = v.into();
                self
            }

            /// Sets the value of [parity][crate::model::preprocessing_config::deinterlace::YadifConfig::parity].
            pub fn set_parity<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.parity = v.into();
                self
            }

            /// Sets the value of [deinterlace_all_frames][crate::model::preprocessing_config::deinterlace::YadifConfig::deinterlace_all_frames].
            pub fn set_deinterlace_all_frames<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
                self.deinterlace_all_frames = v.into();
                self
            }
        }

        impl wkt::message::Message for YadifConfig {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.video.transcoder.v1.PreprocessingConfig.Deinterlace.YadifConfig"
            }
        }

        /// Bob Weaver Deinterlacing Filter Configuration.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct BwdifConfig {
            /// Specifies the deinterlacing mode to adopt.
            /// The default is `send_frame`.
            /// Supported values:
            ///
            /// - `send_frame`: Output one frame for each frame
            /// - `send_field`: Output one frame for each field
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub mode: std::string::String,

            /// The picture field parity assumed for the input interlaced video.
            /// The default is `auto`.
            /// Supported values:
            ///
            /// - `tff`: Assume the top field is first
            /// - `bff`: Assume the bottom field is first
            /// - `auto`: Enable automatic detection of field parity
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub parity: std::string::String,

            /// Deinterlace all frames rather than just the frames identified as
            /// interlaced. The default is `false`.
            pub deinterlace_all_frames: bool,
        }

        impl BwdifConfig {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [mode][crate::model::preprocessing_config::deinterlace::BwdifConfig::mode].
            pub fn set_mode<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.mode = v.into();
                self
            }

            /// Sets the value of [parity][crate::model::preprocessing_config::deinterlace::BwdifConfig::parity].
            pub fn set_parity<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.parity = v.into();
                self
            }

            /// Sets the value of [deinterlace_all_frames][crate::model::preprocessing_config::deinterlace::BwdifConfig::deinterlace_all_frames].
            pub fn set_deinterlace_all_frames<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
                self.deinterlace_all_frames = v.into();
                self
            }
        }

        impl wkt::message::Message for BwdifConfig {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.video.transcoder.v1.PreprocessingConfig.Deinterlace.BwdifConfig"
            }
        }

        /// Specify the video deinterlacing filter. The default is `yadif`.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum DeinterlacingFilter {
            /// Specifies the Yet Another Deinterlacing Filter Configuration.
            Yadif(std::boxed::Box<crate::model::preprocessing_config::deinterlace::YadifConfig>),
            /// Specifies the Bob Weaver Deinterlacing Filter Configuration.
            Bwdif(std::boxed::Box<crate::model::preprocessing_config::deinterlace::BwdifConfig>),
        }
    }
}

/// Video stream resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct VideoStream {
    /// Codec settings can be h264, h265, or vp9.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub codec_settings: std::option::Option<crate::model::video_stream::CodecSettings>,
}

impl VideoStream {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of `codec_settings`.
    pub fn set_codec_settings<
        T: std::convert::Into<std::option::Option<crate::model::video_stream::CodecSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.codec_settings = v.into();
        self
    }

    /// The value of [codec_settings][crate::model::VideoStream::codec_settings]
    /// if it holds a `H264`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_h264(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::video_stream::H264CodecSettings>> {
        #[allow(unreachable_patterns)]
        self.codec_settings.as_ref().and_then(|v| match v {
            crate::model::video_stream::CodecSettings::H264(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [codec_settings][crate::model::VideoStream::codec_settings]
    /// if it holds a `H265`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_h265(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::video_stream::H265CodecSettings>> {
        #[allow(unreachable_patterns)]
        self.codec_settings.as_ref().and_then(|v| match v {
            crate::model::video_stream::CodecSettings::H265(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [codec_settings][crate::model::VideoStream::codec_settings]
    /// if it holds a `Vp9`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_vp9(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::video_stream::Vp9CodecSettings>> {
        #[allow(unreachable_patterns)]
        self.codec_settings.as_ref().and_then(|v| match v {
            crate::model::video_stream::CodecSettings::Vp9(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [codec_settings][crate::model::VideoStream::codec_settings]
    /// to hold a `H264`.
    ///
    /// Note that all the setters affecting `codec_settings` are
    /// mutually exclusive.
    pub fn set_h264<
        T: std::convert::Into<std::boxed::Box<crate::model::video_stream::H264CodecSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.codec_settings =
            std::option::Option::Some(crate::model::video_stream::CodecSettings::H264(v.into()));
        self
    }

    /// Sets the value of [codec_settings][crate::model::VideoStream::codec_settings]
    /// to hold a `H265`.
    ///
    /// Note that all the setters affecting `codec_settings` are
    /// mutually exclusive.
    pub fn set_h265<
        T: std::convert::Into<std::boxed::Box<crate::model::video_stream::H265CodecSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.codec_settings =
            std::option::Option::Some(crate::model::video_stream::CodecSettings::H265(v.into()));
        self
    }

    /// Sets the value of [codec_settings][crate::model::VideoStream::codec_settings]
    /// to hold a `Vp9`.
    ///
    /// Note that all the setters affecting `codec_settings` are
    /// mutually exclusive.
    pub fn set_vp9<
        T: std::convert::Into<std::boxed::Box<crate::model::video_stream::Vp9CodecSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.codec_settings =
            std::option::Option::Some(crate::model::video_stream::CodecSettings::Vp9(v.into()));
        self
    }
}

impl wkt::message::Message for VideoStream {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.VideoStream"
    }
}

/// Defines additional types related to VideoStream
pub mod video_stream {
    #[allow(unused_imports)]
    use super::*;

    /// H264 codec settings.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct H264CodecSettings {
        /// The width of the video in pixels. Must be an even integer.
        /// When not specified, the width is adjusted to match the specified height
        /// and input aspect ratio. If both are omitted, the input width is used.
        ///
        /// For portrait videos that contain horizontal ASR and rotation metadata,
        /// provide the width, in pixels, per the horizontal ASR. The API calculates
        /// the height per the horizontal ASR. The API detects any rotation metadata
        /// and swaps the requested height and width for the output.
        pub width_pixels: i32,

        /// The height of the video in pixels. Must be an even integer.
        /// When not specified, the height is adjusted to match the specified width
        /// and input aspect ratio. If both are omitted, the input height is used.
        ///
        /// For portrait videos that contain horizontal ASR and rotation metadata,
        /// provide the height, in pixels, per the horizontal ASR. The API calculates
        /// the width per the horizontal ASR. The API detects any rotation metadata
        /// and swaps the requested height and width for the output.
        pub height_pixels: i32,

        /// Required. The target video frame rate in frames per second (FPS). Must be
        /// less than or equal to 120. Will default to the input frame rate if larger
        /// than the input frame rate. The API will generate an output FPS that is
        /// divisible by the input FPS, and smaller or equal to the target FPS. See
        /// [Calculating frame
        /// rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for
        /// more information.
        pub frame_rate: f64,

        /// Required. The video bitrate in bits per second. The minimum value is
        /// 1,000. The maximum value is 800,000,000.
        pub bitrate_bps: i32,

        /// Pixel format to use. The default is `yuv420p`.
        ///
        /// Supported pixel formats:
        ///
        /// - `yuv420p` pixel format
        /// - `yuv422p` pixel format
        /// - `yuv444p` pixel format
        /// - `yuv420p10` 10-bit HDR pixel format
        /// - `yuv422p10` 10-bit HDR pixel format
        /// - `yuv444p10` 10-bit HDR pixel format
        /// - `yuv420p12` 12-bit HDR pixel format
        /// - `yuv422p12` 12-bit HDR pixel format
        /// - `yuv444p12` 12-bit HDR pixel format
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub pixel_format: std::string::String,

        /// Specify the `rate_control_mode`. The default is `vbr`.
        ///
        /// Supported rate control modes:
        ///
        /// - `vbr` - variable bitrate
        /// - `crf` - constant rate factor
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub rate_control_mode: std::string::String,

        /// Target CRF level. Must be between 10 and 36, where 10 is the highest
        /// quality and 36 is the most efficient compression. The default is 21.
        pub crf_level: i32,

        /// Specifies whether an open Group of Pictures (GOP) structure should be
        /// allowed or not. The default is `false`.
        pub allow_open_gop: bool,

        /// Use two-pass encoding strategy to achieve better video quality.
        /// `VideoStream.rate_control_mode` must be `vbr`. The default is `false`.
        pub enable_two_pass: bool,

        /// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be
        /// greater than zero. The default is equal to `VideoStream.bitrate_bps`.
        pub vbv_size_bits: i32,

        /// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits.
        /// Must be greater than zero. The default is equal to 90% of
        /// `VideoStream.vbv_size_bits`.
        pub vbv_fullness_bits: i32,

        /// The entropy coder to use. The default is `cabac`.
        ///
        /// Supported entropy coders:
        ///
        /// - `cavlc`
        /// - `cabac`
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub entropy_coder: std::string::String,

        /// Allow B-pyramid for reference frame selection. This may not be supported
        /// on all decoders. The default is `false`.
        pub b_pyramid: bool,

        /// The number of consecutive B-frames. Must be greater than or equal to
        /// zero. Must be less than `VideoStream.gop_frame_count` if set. The default
        /// is 0.
        pub b_frame_count: i32,

        /// Specify the intensity of the adaptive quantizer (AQ). Must be between 0
        /// and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A
        /// higher value equals a lower bitrate but smoother image. The default is 0.
        pub aq_strength: f64,

        /// Enforces the specified codec profile. The following profiles are
        /// supported:
        ///
        /// * `baseline`
        /// * `main`
        /// * `high` (default)
        ///
        /// The available options are
        /// [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune).
        /// Note that certain values for this field may cause the
        /// transcoder to override other fields you set in the `H264CodecSettings`
        /// message.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub profile: std::string::String,

        /// Enforces the specified codec tune. The available options are
        /// [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Tune).
        /// Note that certain values for this field may cause the
        /// transcoder to override other fields you set in the `H264CodecSettings`
        /// message.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub tune: std::string::String,

        /// Enforces the specified codec preset. The default is `veryfast`. The
        /// available options are
        /// [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.264#Preset).
        /// Note that certain values for this field may cause the
        /// transcoder to override other fields you set in the `H264CodecSettings`
        /// message.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub preset: std::string::String,

        /// GOP mode can be either by frame count or duration.
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub gop_mode:
            std::option::Option<crate::model::video_stream::h_264_codec_settings::GopMode>,
    }

    impl H264CodecSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [width_pixels][crate::model::video_stream::H264CodecSettings::width_pixels].
        pub fn set_width_pixels<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.width_pixels = v.into();
            self
        }

        /// Sets the value of [height_pixels][crate::model::video_stream::H264CodecSettings::height_pixels].
        pub fn set_height_pixels<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.height_pixels = v.into();
            self
        }

        /// Sets the value of [frame_rate][crate::model::video_stream::H264CodecSettings::frame_rate].
        pub fn set_frame_rate<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.frame_rate = v.into();
            self
        }

        /// Sets the value of [bitrate_bps][crate::model::video_stream::H264CodecSettings::bitrate_bps].
        pub fn set_bitrate_bps<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.bitrate_bps = v.into();
            self
        }

        /// Sets the value of [pixel_format][crate::model::video_stream::H264CodecSettings::pixel_format].
        pub fn set_pixel_format<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.pixel_format = v.into();
            self
        }

        /// Sets the value of [rate_control_mode][crate::model::video_stream::H264CodecSettings::rate_control_mode].
        pub fn set_rate_control_mode<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.rate_control_mode = v.into();
            self
        }

        /// Sets the value of [crf_level][crate::model::video_stream::H264CodecSettings::crf_level].
        pub fn set_crf_level<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.crf_level = v.into();
            self
        }

        /// Sets the value of [allow_open_gop][crate::model::video_stream::H264CodecSettings::allow_open_gop].
        pub fn set_allow_open_gop<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.allow_open_gop = v.into();
            self
        }

        /// Sets the value of [enable_two_pass][crate::model::video_stream::H264CodecSettings::enable_two_pass].
        pub fn set_enable_two_pass<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enable_two_pass = v.into();
            self
        }

        /// Sets the value of [vbv_size_bits][crate::model::video_stream::H264CodecSettings::vbv_size_bits].
        pub fn set_vbv_size_bits<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.vbv_size_bits = v.into();
            self
        }

        /// Sets the value of [vbv_fullness_bits][crate::model::video_stream::H264CodecSettings::vbv_fullness_bits].
        pub fn set_vbv_fullness_bits<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.vbv_fullness_bits = v.into();
            self
        }

        /// Sets the value of [entropy_coder][crate::model::video_stream::H264CodecSettings::entropy_coder].
        pub fn set_entropy_coder<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.entropy_coder = v.into();
            self
        }

        /// Sets the value of [b_pyramid][crate::model::video_stream::H264CodecSettings::b_pyramid].
        pub fn set_b_pyramid<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.b_pyramid = v.into();
            self
        }

        /// Sets the value of [b_frame_count][crate::model::video_stream::H264CodecSettings::b_frame_count].
        pub fn set_b_frame_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.b_frame_count = v.into();
            self
        }

        /// Sets the value of [aq_strength][crate::model::video_stream::H264CodecSettings::aq_strength].
        pub fn set_aq_strength<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.aq_strength = v.into();
            self
        }

        /// Sets the value of [profile][crate::model::video_stream::H264CodecSettings::profile].
        pub fn set_profile<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.profile = v.into();
            self
        }

        /// Sets the value of [tune][crate::model::video_stream::H264CodecSettings::tune].
        pub fn set_tune<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.tune = v.into();
            self
        }

        /// Sets the value of [preset][crate::model::video_stream::H264CodecSettings::preset].
        pub fn set_preset<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.preset = v.into();
            self
        }

        /// Sets the value of `gop_mode`.
        pub fn set_gop_mode<
            T: std::convert::Into<
                std::option::Option<crate::model::video_stream::h_264_codec_settings::GopMode>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.gop_mode = v.into();
            self
        }

        /// The value of [gop_mode][crate::model::video_stream::H264CodecSettings::gop_mode]
        /// if it holds a `GopFrameCount`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_gop_frame_count(&self) -> std::option::Option<&i32> {
            #[allow(unreachable_patterns)]
            self.gop_mode.as_ref().and_then(|v| match v {
                crate::model::video_stream::h_264_codec_settings::GopMode::GopFrameCount(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [gop_mode][crate::model::video_stream::H264CodecSettings::gop_mode]
        /// if it holds a `GopDuration`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_gop_duration(&self) -> std::option::Option<&std::boxed::Box<wkt::Duration>> {
            #[allow(unreachable_patterns)]
            self.gop_mode.as_ref().and_then(|v| match v {
                crate::model::video_stream::h_264_codec_settings::GopMode::GopDuration(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [gop_mode][crate::model::video_stream::H264CodecSettings::gop_mode]
        /// to hold a `GopFrameCount`.
        ///
        /// Note that all the setters affecting `gop_mode` are
        /// mutually exclusive.
        pub fn set_gop_frame_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.gop_mode = std::option::Option::Some(
                crate::model::video_stream::h_264_codec_settings::GopMode::GopFrameCount(v.into()),
            );
            self
        }

        /// Sets the value of [gop_mode][crate::model::video_stream::H264CodecSettings::gop_mode]
        /// to hold a `GopDuration`.
        ///
        /// Note that all the setters affecting `gop_mode` are
        /// mutually exclusive.
        pub fn set_gop_duration<T: std::convert::Into<std::boxed::Box<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.gop_mode = std::option::Option::Some(
                crate::model::video_stream::h_264_codec_settings::GopMode::GopDuration(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for H264CodecSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.VideoStream.H264CodecSettings"
        }
    }

    /// Defines additional types related to H264CodecSettings
    pub mod h_264_codec_settings {
        #[allow(unused_imports)]
        use super::*;

        /// GOP mode can be either by frame count or duration.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum GopMode {
            /// Select the GOP size based on the specified frame count. Must be greater
            /// than zero.
            GopFrameCount(i32),
            /// Select the GOP size based on the specified duration. The default is
            /// `3s`. Note that `gopDuration` must be less than or equal to
            /// [`segmentDuration`](#SegmentSettings), and
            /// [`segmentDuration`](#SegmentSettings) must be divisible by
            /// `gopDuration`.
            GopDuration(std::boxed::Box<wkt::Duration>),
        }
    }

    /// H265 codec settings.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct H265CodecSettings {
        /// The width of the video in pixels. Must be an even integer.
        /// When not specified, the width is adjusted to match the specified height
        /// and input aspect ratio. If both are omitted, the input width is used.
        ///
        /// For portrait videos that contain horizontal ASR and rotation metadata,
        /// provide the width, in pixels, per the horizontal ASR. The API calculates
        /// the height per the horizontal ASR. The API detects any rotation metadata
        /// and swaps the requested height and width for the output.
        pub width_pixels: i32,

        /// The height of the video in pixels. Must be an even integer.
        /// When not specified, the height is adjusted to match the specified width
        /// and input aspect ratio. If both are omitted, the input height is used.
        ///
        /// For portrait videos that contain horizontal ASR and rotation metadata,
        /// provide the height, in pixels, per the horizontal ASR. The API calculates
        /// the width per the horizontal ASR. The API detects any rotation metadata
        /// and swaps the requested height and width for the output.
        pub height_pixels: i32,

        /// Required. The target video frame rate in frames per second (FPS). Must be
        /// less than or equal to 120. Will default to the input frame rate if larger
        /// than the input frame rate. The API will generate an output FPS that is
        /// divisible by the input FPS, and smaller or equal to the target FPS. See
        /// [Calculating frame
        /// rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for
        /// more information.
        pub frame_rate: f64,

        /// Required. The video bitrate in bits per second. The minimum value is
        /// 1,000. The maximum value is 800,000,000.
        pub bitrate_bps: i32,

        /// Pixel format to use. The default is `yuv420p`.
        ///
        /// Supported pixel formats:
        ///
        /// - `yuv420p` pixel format
        /// - `yuv422p` pixel format
        /// - `yuv444p` pixel format
        /// - `yuv420p10` 10-bit HDR pixel format
        /// - `yuv422p10` 10-bit HDR pixel format
        /// - `yuv444p10` 10-bit HDR pixel format
        /// - `yuv420p12` 12-bit HDR pixel format
        /// - `yuv422p12` 12-bit HDR pixel format
        /// - `yuv444p12` 12-bit HDR pixel format
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub pixel_format: std::string::String,

        /// Specify the `rate_control_mode`. The default is `vbr`.
        ///
        /// Supported rate control modes:
        ///
        /// - `vbr` - variable bitrate
        /// - `crf` - constant rate factor
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub rate_control_mode: std::string::String,

        /// Target CRF level. Must be between 10 and 36, where 10 is the highest
        /// quality and 36 is the most efficient compression. The default is 21.
        pub crf_level: i32,

        /// Specifies whether an open Group of Pictures (GOP) structure should be
        /// allowed or not. The default is `false`.
        pub allow_open_gop: bool,

        /// Use two-pass encoding strategy to achieve better video quality.
        /// `VideoStream.rate_control_mode` must be `vbr`. The default is `false`.
        pub enable_two_pass: bool,

        /// Size of the Video Buffering Verifier (VBV) buffer in bits. Must be
        /// greater than zero. The default is equal to `VideoStream.bitrate_bps`.
        pub vbv_size_bits: i32,

        /// Initial fullness of the Video Buffering Verifier (VBV) buffer in bits.
        /// Must be greater than zero. The default is equal to 90% of
        /// `VideoStream.vbv_size_bits`.
        pub vbv_fullness_bits: i32,

        /// Allow B-pyramid for reference frame selection. This may not be supported
        /// on all decoders. The default is `false`.
        pub b_pyramid: bool,

        /// The number of consecutive B-frames. Must be greater than or equal to
        /// zero. Must be less than `VideoStream.gop_frame_count` if set. The default
        /// is 0.
        pub b_frame_count: i32,

        /// Specify the intensity of the adaptive quantizer (AQ). Must be between 0
        /// and 1, where 0 disables the quantizer and 1 maximizes the quantizer. A
        /// higher value equals a lower bitrate but smoother image. The default is 0.
        pub aq_strength: f64,

        /// Enforces the specified codec profile. The following profiles are
        /// supported:
        ///
        /// * 8-bit profiles
        ///   * `main` (default)
        ///   * `main-intra`
        ///   * `mainstillpicture`
        /// * 10-bit profiles
        ///   * `main10` (default)
        ///   * `main10-intra`
        ///   * `main422-10`
        ///   * `main422-10-intra`
        ///   * `main444-10`
        ///   * `main444-10-intra`
        /// * 12-bit profiles
        ///   * `main12` (default)
        ///   * `main12-intra`
        ///   * `main422-12`
        ///   * `main422-12-intra`
        ///   * `main444-12`
        ///   * `main444-12-intra`
        ///
        /// The available options are
        /// [FFmpeg-compatible](https://x265.readthedocs.io/).
        /// Note that certain values for this field may cause the
        /// transcoder to override other fields you set in the `H265CodecSettings`
        /// message.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub profile: std::string::String,

        /// Enforces the specified codec tune. The available options are
        /// [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265).
        /// Note that certain values for this field may cause the
        /// transcoder to override other fields you set in the `H265CodecSettings`
        /// message.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub tune: std::string::String,

        /// Enforces the specified codec preset. The default is `veryfast`. The
        /// available options are
        /// [FFmpeg-compatible](https://trac.ffmpeg.org/wiki/Encode/H.265).
        /// Note that certain values for this field may cause the
        /// transcoder to override other fields you set in the `H265CodecSettings`
        /// message.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub preset: std::string::String,

        /// GOP mode can be either by frame count or duration.
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub gop_mode:
            std::option::Option<crate::model::video_stream::h_265_codec_settings::GopMode>,
    }

    impl H265CodecSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [width_pixels][crate::model::video_stream::H265CodecSettings::width_pixels].
        pub fn set_width_pixels<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.width_pixels = v.into();
            self
        }

        /// Sets the value of [height_pixels][crate::model::video_stream::H265CodecSettings::height_pixels].
        pub fn set_height_pixels<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.height_pixels = v.into();
            self
        }

        /// Sets the value of [frame_rate][crate::model::video_stream::H265CodecSettings::frame_rate].
        pub fn set_frame_rate<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.frame_rate = v.into();
            self
        }

        /// Sets the value of [bitrate_bps][crate::model::video_stream::H265CodecSettings::bitrate_bps].
        pub fn set_bitrate_bps<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.bitrate_bps = v.into();
            self
        }

        /// Sets the value of [pixel_format][crate::model::video_stream::H265CodecSettings::pixel_format].
        pub fn set_pixel_format<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.pixel_format = v.into();
            self
        }

        /// Sets the value of [rate_control_mode][crate::model::video_stream::H265CodecSettings::rate_control_mode].
        pub fn set_rate_control_mode<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.rate_control_mode = v.into();
            self
        }

        /// Sets the value of [crf_level][crate::model::video_stream::H265CodecSettings::crf_level].
        pub fn set_crf_level<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.crf_level = v.into();
            self
        }

        /// Sets the value of [allow_open_gop][crate::model::video_stream::H265CodecSettings::allow_open_gop].
        pub fn set_allow_open_gop<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.allow_open_gop = v.into();
            self
        }

        /// Sets the value of [enable_two_pass][crate::model::video_stream::H265CodecSettings::enable_two_pass].
        pub fn set_enable_two_pass<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enable_two_pass = v.into();
            self
        }

        /// Sets the value of [vbv_size_bits][crate::model::video_stream::H265CodecSettings::vbv_size_bits].
        pub fn set_vbv_size_bits<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.vbv_size_bits = v.into();
            self
        }

        /// Sets the value of [vbv_fullness_bits][crate::model::video_stream::H265CodecSettings::vbv_fullness_bits].
        pub fn set_vbv_fullness_bits<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.vbv_fullness_bits = v.into();
            self
        }

        /// Sets the value of [b_pyramid][crate::model::video_stream::H265CodecSettings::b_pyramid].
        pub fn set_b_pyramid<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.b_pyramid = v.into();
            self
        }

        /// Sets the value of [b_frame_count][crate::model::video_stream::H265CodecSettings::b_frame_count].
        pub fn set_b_frame_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.b_frame_count = v.into();
            self
        }

        /// Sets the value of [aq_strength][crate::model::video_stream::H265CodecSettings::aq_strength].
        pub fn set_aq_strength<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.aq_strength = v.into();
            self
        }

        /// Sets the value of [profile][crate::model::video_stream::H265CodecSettings::profile].
        pub fn set_profile<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.profile = v.into();
            self
        }

        /// Sets the value of [tune][crate::model::video_stream::H265CodecSettings::tune].
        pub fn set_tune<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.tune = v.into();
            self
        }

        /// Sets the value of [preset][crate::model::video_stream::H265CodecSettings::preset].
        pub fn set_preset<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.preset = v.into();
            self
        }

        /// Sets the value of `gop_mode`.
        pub fn set_gop_mode<
            T: std::convert::Into<
                std::option::Option<crate::model::video_stream::h_265_codec_settings::GopMode>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.gop_mode = v.into();
            self
        }

        /// The value of [gop_mode][crate::model::video_stream::H265CodecSettings::gop_mode]
        /// if it holds a `GopFrameCount`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_gop_frame_count(&self) -> std::option::Option<&i32> {
            #[allow(unreachable_patterns)]
            self.gop_mode.as_ref().and_then(|v| match v {
                crate::model::video_stream::h_265_codec_settings::GopMode::GopFrameCount(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [gop_mode][crate::model::video_stream::H265CodecSettings::gop_mode]
        /// if it holds a `GopDuration`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_gop_duration(&self) -> std::option::Option<&std::boxed::Box<wkt::Duration>> {
            #[allow(unreachable_patterns)]
            self.gop_mode.as_ref().and_then(|v| match v {
                crate::model::video_stream::h_265_codec_settings::GopMode::GopDuration(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [gop_mode][crate::model::video_stream::H265CodecSettings::gop_mode]
        /// to hold a `GopFrameCount`.
        ///
        /// Note that all the setters affecting `gop_mode` are
        /// mutually exclusive.
        pub fn set_gop_frame_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.gop_mode = std::option::Option::Some(
                crate::model::video_stream::h_265_codec_settings::GopMode::GopFrameCount(v.into()),
            );
            self
        }

        /// Sets the value of [gop_mode][crate::model::video_stream::H265CodecSettings::gop_mode]
        /// to hold a `GopDuration`.
        ///
        /// Note that all the setters affecting `gop_mode` are
        /// mutually exclusive.
        pub fn set_gop_duration<T: std::convert::Into<std::boxed::Box<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.gop_mode = std::option::Option::Some(
                crate::model::video_stream::h_265_codec_settings::GopMode::GopDuration(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for H265CodecSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.VideoStream.H265CodecSettings"
        }
    }

    /// Defines additional types related to H265CodecSettings
    pub mod h_265_codec_settings {
        #[allow(unused_imports)]
        use super::*;

        /// GOP mode can be either by frame count or duration.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum GopMode {
            /// Select the GOP size based on the specified frame count. Must be greater
            /// than zero.
            GopFrameCount(i32),
            /// Select the GOP size based on the specified duration. The default is
            /// `3s`. Note that `gopDuration` must be less than or equal to
            /// [`segmentDuration`](#SegmentSettings), and
            /// [`segmentDuration`](#SegmentSettings) must be divisible by
            /// `gopDuration`.
            GopDuration(std::boxed::Box<wkt::Duration>),
        }
    }

    /// VP9 codec settings.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Vp9CodecSettings {
        /// The width of the video in pixels. Must be an even integer.
        /// When not specified, the width is adjusted to match the specified height
        /// and input aspect ratio. If both are omitted, the input width is used.
        ///
        /// For portrait videos that contain horizontal ASR and rotation metadata,
        /// provide the width, in pixels, per the horizontal ASR. The API calculates
        /// the height per the horizontal ASR. The API detects any rotation metadata
        /// and swaps the requested height and width for the output.
        pub width_pixels: i32,

        /// The height of the video in pixels. Must be an even integer.
        /// When not specified, the height is adjusted to match the specified width
        /// and input aspect ratio. If both are omitted, the input height is used.
        ///
        /// For portrait videos that contain horizontal ASR and rotation metadata,
        /// provide the height, in pixels, per the horizontal ASR. The API calculates
        /// the width per the horizontal ASR. The API detects any rotation metadata
        /// and swaps the requested height and width for the output.
        pub height_pixels: i32,

        /// Required. The target video frame rate in frames per second (FPS). Must be
        /// less than or equal to 120. Will default to the input frame rate if larger
        /// than the input frame rate. The API will generate an output FPS that is
        /// divisible by the input FPS, and smaller or equal to the target FPS. See
        /// [Calculating frame
        /// rate](https://cloud.google.com/transcoder/docs/concepts/frame-rate) for
        /// more information.
        pub frame_rate: f64,

        /// Required. The video bitrate in bits per second. The minimum value is
        /// 1,000. The maximum value is 480,000,000.
        pub bitrate_bps: i32,

        /// Pixel format to use. The default is `yuv420p`.
        ///
        /// Supported pixel formats:
        ///
        /// - `yuv420p` pixel format
        /// - `yuv422p` pixel format
        /// - `yuv444p` pixel format
        /// - `yuv420p10` 10-bit HDR pixel format
        /// - `yuv422p10` 10-bit HDR pixel format
        /// - `yuv444p10` 10-bit HDR pixel format
        /// - `yuv420p12` 12-bit HDR pixel format
        /// - `yuv422p12` 12-bit HDR pixel format
        /// - `yuv444p12` 12-bit HDR pixel format
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub pixel_format: std::string::String,

        /// Specify the `rate_control_mode`. The default is `vbr`.
        ///
        /// Supported rate control modes:
        ///
        /// - `vbr` - variable bitrate
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub rate_control_mode: std::string::String,

        /// Target CRF level. Must be between 10 and 36, where 10 is the highest
        /// quality and 36 is the most efficient compression. The default is 21.
        ///
        /// **Note:** This field is not supported.
        pub crf_level: i32,

        /// Enforces the specified codec profile. The following profiles are
        /// supported:
        ///
        /// * `profile0` (default)
        /// * `profile1`
        /// * `profile2`
        /// * `profile3`
        ///
        /// The available options are
        /// [WebM-compatible](https://www.webmproject.org/vp9/profiles/).
        /// Note that certain values for this field may cause the
        /// transcoder to override other fields you set in the `Vp9CodecSettings`
        /// message.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub profile: std::string::String,

        /// GOP mode can be either by frame count or duration.
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub gop_mode: std::option::Option<crate::model::video_stream::vp_9_codec_settings::GopMode>,
    }

    impl Vp9CodecSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [width_pixels][crate::model::video_stream::Vp9CodecSettings::width_pixels].
        pub fn set_width_pixels<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.width_pixels = v.into();
            self
        }

        /// Sets the value of [height_pixels][crate::model::video_stream::Vp9CodecSettings::height_pixels].
        pub fn set_height_pixels<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.height_pixels = v.into();
            self
        }

        /// Sets the value of [frame_rate][crate::model::video_stream::Vp9CodecSettings::frame_rate].
        pub fn set_frame_rate<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.frame_rate = v.into();
            self
        }

        /// Sets the value of [bitrate_bps][crate::model::video_stream::Vp9CodecSettings::bitrate_bps].
        pub fn set_bitrate_bps<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.bitrate_bps = v.into();
            self
        }

        /// Sets the value of [pixel_format][crate::model::video_stream::Vp9CodecSettings::pixel_format].
        pub fn set_pixel_format<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.pixel_format = v.into();
            self
        }

        /// Sets the value of [rate_control_mode][crate::model::video_stream::Vp9CodecSettings::rate_control_mode].
        pub fn set_rate_control_mode<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.rate_control_mode = v.into();
            self
        }

        /// Sets the value of [crf_level][crate::model::video_stream::Vp9CodecSettings::crf_level].
        pub fn set_crf_level<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.crf_level = v.into();
            self
        }

        /// Sets the value of [profile][crate::model::video_stream::Vp9CodecSettings::profile].
        pub fn set_profile<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.profile = v.into();
            self
        }

        /// Sets the value of `gop_mode`.
        pub fn set_gop_mode<
            T: std::convert::Into<
                std::option::Option<crate::model::video_stream::vp_9_codec_settings::GopMode>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.gop_mode = v.into();
            self
        }

        /// The value of [gop_mode][crate::model::video_stream::Vp9CodecSettings::gop_mode]
        /// if it holds a `GopFrameCount`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_gop_frame_count(&self) -> std::option::Option<&i32> {
            #[allow(unreachable_patterns)]
            self.gop_mode.as_ref().and_then(|v| match v {
                crate::model::video_stream::vp_9_codec_settings::GopMode::GopFrameCount(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [gop_mode][crate::model::video_stream::Vp9CodecSettings::gop_mode]
        /// if it holds a `GopDuration`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_gop_duration(&self) -> std::option::Option<&std::boxed::Box<wkt::Duration>> {
            #[allow(unreachable_patterns)]
            self.gop_mode.as_ref().and_then(|v| match v {
                crate::model::video_stream::vp_9_codec_settings::GopMode::GopDuration(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [gop_mode][crate::model::video_stream::Vp9CodecSettings::gop_mode]
        /// to hold a `GopFrameCount`.
        ///
        /// Note that all the setters affecting `gop_mode` are
        /// mutually exclusive.
        pub fn set_gop_frame_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.gop_mode = std::option::Option::Some(
                crate::model::video_stream::vp_9_codec_settings::GopMode::GopFrameCount(v.into()),
            );
            self
        }

        /// Sets the value of [gop_mode][crate::model::video_stream::Vp9CodecSettings::gop_mode]
        /// to hold a `GopDuration`.
        ///
        /// Note that all the setters affecting `gop_mode` are
        /// mutually exclusive.
        pub fn set_gop_duration<T: std::convert::Into<std::boxed::Box<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.gop_mode = std::option::Option::Some(
                crate::model::video_stream::vp_9_codec_settings::GopMode::GopDuration(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for Vp9CodecSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.VideoStream.Vp9CodecSettings"
        }
    }

    /// Defines additional types related to Vp9CodecSettings
    pub mod vp_9_codec_settings {
        #[allow(unused_imports)]
        use super::*;

        /// GOP mode can be either by frame count or duration.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum GopMode {
            /// Select the GOP size based on the specified frame count. Must be greater
            /// than zero.
            GopFrameCount(i32),
            /// Select the GOP size based on the specified duration. The default is
            /// `3s`. Note that `gopDuration` must be less than or equal to
            /// [`segmentDuration`](#SegmentSettings), and
            /// [`segmentDuration`](#SegmentSettings) must be divisible by
            /// `gopDuration`.
            GopDuration(std::boxed::Box<wkt::Duration>),
        }
    }

    /// Codec settings can be h264, h265, or vp9.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum CodecSettings {
        /// H264 codec settings.
        H264(std::boxed::Box<crate::model::video_stream::H264CodecSettings>),
        /// H265 codec settings.
        H265(std::boxed::Box<crate::model::video_stream::H265CodecSettings>),
        /// VP9 codec settings.
        Vp9(std::boxed::Box<crate::model::video_stream::Vp9CodecSettings>),
    }
}

/// Audio stream resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AudioStream {
    /// The codec for this audio stream. The default is `aac`.
    ///
    /// Supported audio codecs:
    ///
    /// - `aac`
    /// - `aac-he`
    /// - `aac-he-v2`
    /// - `mp3`
    /// - `ac3`
    /// - `eac3`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub codec: std::string::String,

    /// Required. Audio bitrate in bits per second. Must be between 1 and
    /// 10,000,000.
    pub bitrate_bps: i32,

    /// Number of audio channels. Must be between 1 and 6. The default is 2.
    pub channel_count: i32,

    /// A list of channel names specifying layout of the audio channels.
    /// This only affects the metadata embedded in the container headers, if
    /// supported by the specified format. The default is `["fl", "fr"]`.
    ///
    /// Supported channel names:
    ///
    /// - `fl` - Front left channel
    /// - `fr` - Front right channel
    /// - `sl` - Side left channel
    /// - `sr` - Side right channel
    /// - `fc` - Front center channel
    /// - `lfe` - Low frequency
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub channel_layout: std::vec::Vec<std::string::String>,

    /// The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub mapping: std::vec::Vec<crate::model::audio_stream::AudioMapping>,

    /// The audio sample rate in Hertz. The default is 48000 Hertz.
    pub sample_rate_hertz: i32,

    /// The BCP-47 language code, such as `en-US` or `sr-Latn`. For more
    /// information, see
    /// <https://www.unicode.org/reports/tr35/#Unicode_locale_identifier>. Not
    /// supported in MP4 files.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// The name for this particular audio stream that
    /// will be added to the HLS/DASH manifest. Not supported in MP4 files.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,
}

impl AudioStream {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [codec][crate::model::AudioStream::codec].
    pub fn set_codec<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.codec = v.into();
        self
    }

    /// Sets the value of [bitrate_bps][crate::model::AudioStream::bitrate_bps].
    pub fn set_bitrate_bps<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.bitrate_bps = v.into();
        self
    }

    /// Sets the value of [channel_count][crate::model::AudioStream::channel_count].
    pub fn set_channel_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.channel_count = v.into();
        self
    }

    /// Sets the value of [sample_rate_hertz][crate::model::AudioStream::sample_rate_hertz].
    pub fn set_sample_rate_hertz<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.sample_rate_hertz = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::AudioStream::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::AudioStream::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [channel_layout][crate::model::AudioStream::channel_layout].
    pub fn set_channel_layout<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.channel_layout = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [mapping][crate::model::AudioStream::mapping].
    pub fn set_mapping<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::audio_stream::AudioMapping>,
    {
        use std::iter::Iterator;
        self.mapping = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for AudioStream {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.AudioStream"
    }
}

/// Defines additional types related to AudioStream
pub mod audio_stream {
    #[allow(unused_imports)]
    use super::*;

    /// The mapping for the `Job.edit_list` atoms with audio `EditAtom.inputs`.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AudioMapping {
        /// Required. The `EditAtom.key` that references the atom with audio inputs
        /// in the `Job.edit_list`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub atom_key: std::string::String,

        /// Required. The `Input.key` that identifies the input file.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub input_key: std::string::String,

        /// Required. The zero-based index of the track in the input file.
        pub input_track: i32,

        /// Required. The zero-based index of the channel in the input audio stream.
        pub input_channel: i32,

        /// Required. The zero-based index of the channel in the output audio stream.
        pub output_channel: i32,

        /// Audio volume control in dB. Negative values decrease volume,
        /// positive values increase. The default is 0.
        pub gain_db: f64,
    }

    impl AudioMapping {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [atom_key][crate::model::audio_stream::AudioMapping::atom_key].
        pub fn set_atom_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.atom_key = v.into();
            self
        }

        /// Sets the value of [input_key][crate::model::audio_stream::AudioMapping::input_key].
        pub fn set_input_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.input_key = v.into();
            self
        }

        /// Sets the value of [input_track][crate::model::audio_stream::AudioMapping::input_track].
        pub fn set_input_track<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.input_track = v.into();
            self
        }

        /// Sets the value of [input_channel][crate::model::audio_stream::AudioMapping::input_channel].
        pub fn set_input_channel<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.input_channel = v.into();
            self
        }

        /// Sets the value of [output_channel][crate::model::audio_stream::AudioMapping::output_channel].
        pub fn set_output_channel<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.output_channel = v.into();
            self
        }

        /// Sets the value of [gain_db][crate::model::audio_stream::AudioMapping::gain_db].
        pub fn set_gain_db<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.gain_db = v.into();
            self
        }
    }

    impl wkt::message::Message for AudioMapping {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.AudioStream.AudioMapping"
        }
    }
}

/// Encoding of a text stream. For example, closed captions or subtitles.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TextStream {
    /// The codec for this text stream. The default is `webvtt`.
    ///
    /// Supported text codecs:
    ///
    /// - `srt`
    /// - `ttml`
    /// - `cea608`
    /// - `cea708`
    /// - `webvtt`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub codec: std::string::String,

    /// The BCP-47 language code, such as `en-US` or `sr-Latn`. For more
    /// information, see
    /// <https://www.unicode.org/reports/tr35/#Unicode_locale_identifier>. Not
    /// supported in MP4 files.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub mapping: std::vec::Vec<crate::model::text_stream::TextMapping>,

    /// The name for this particular text stream that
    /// will be added to the HLS/DASH manifest. Not supported in MP4 files.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,
}

impl TextStream {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [codec][crate::model::TextStream::codec].
    pub fn set_codec<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.codec = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::TextStream::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::TextStream::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [mapping][crate::model::TextStream::mapping].
    pub fn set_mapping<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::text_stream::TextMapping>,
    {
        use std::iter::Iterator;
        self.mapping = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TextStream {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.TextStream"
    }
}

/// Defines additional types related to TextStream
pub mod text_stream {
    #[allow(unused_imports)]
    use super::*;

    /// The mapping for the `Job.edit_list` atoms with text `EditAtom.inputs`.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct TextMapping {
        /// Required. The `EditAtom.key` that references atom with text inputs in the
        /// `Job.edit_list`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub atom_key: std::string::String,

        /// Required. The `Input.key` that identifies the input file.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub input_key: std::string::String,

        /// Required. The zero-based index of the track in the input file.
        pub input_track: i32,
    }

    impl TextMapping {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [atom_key][crate::model::text_stream::TextMapping::atom_key].
        pub fn set_atom_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.atom_key = v.into();
            self
        }

        /// Sets the value of [input_key][crate::model::text_stream::TextMapping::input_key].
        pub fn set_input_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.input_key = v.into();
            self
        }

        /// Sets the value of [input_track][crate::model::text_stream::TextMapping::input_track].
        pub fn set_input_track<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.input_track = v.into();
            self
        }
    }

    impl wkt::message::Message for TextMapping {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.TextStream.TextMapping"
        }
    }
}

/// Segment settings for `ts`, `fmp4` and `vtt`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SegmentSettings {
    /// Duration of the segments in seconds. The default is `6.0s`. Note that
    /// `segmentDuration` must be greater than or equal to
    /// [`gopDuration`](#videostream), and `segmentDuration` must be divisible by
    /// [`gopDuration`](#videostream).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub segment_duration: std::option::Option<wkt::Duration>,

    /// Required. Create an individual segment file. The default is `false`.
    pub individual_segments: bool,
}

impl SegmentSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [segment_duration][crate::model::SegmentSettings::segment_duration].
    pub fn set_segment_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.segment_duration = v.into();
        self
    }

    /// Sets the value of [individual_segments][crate::model::SegmentSettings::individual_segments].
    pub fn set_individual_segments<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.individual_segments = v.into();
        self
    }
}

impl wkt::message::Message for SegmentSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.SegmentSettings"
    }
}

/// Encryption settings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Encryption {
    /// Required. Identifier for this set of encryption options.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,

    /// Required. DRM system(s) to use; at least one must be specified. If a
    /// DRM system is omitted, it is considered disabled.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub drm_systems: std::option::Option<crate::model::encryption::DrmSystems>,

    /// Encryption mode can be either `aes` or `cenc`.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub encryption_mode: std::option::Option<crate::model::encryption::EncryptionMode>,

    /// Defines where content keys are stored.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub secret_source: std::option::Option<crate::model::encryption::SecretSource>,
}

impl Encryption {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [id][crate::model::Encryption::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [drm_systems][crate::model::Encryption::drm_systems].
    pub fn set_drm_systems<
        T: std::convert::Into<std::option::Option<crate::model::encryption::DrmSystems>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.drm_systems = v.into();
        self
    }

    /// Sets the value of `encryption_mode`.
    pub fn set_encryption_mode<
        T: std::convert::Into<std::option::Option<crate::model::encryption::EncryptionMode>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.encryption_mode = v.into();
        self
    }

    /// The value of [encryption_mode][crate::model::Encryption::encryption_mode]
    /// if it holds a `Aes128`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_aes_128(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::encryption::Aes128Encryption>> {
        #[allow(unreachable_patterns)]
        self.encryption_mode.as_ref().and_then(|v| match v {
            crate::model::encryption::EncryptionMode::Aes128(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [encryption_mode][crate::model::Encryption::encryption_mode]
    /// if it holds a `SampleAes`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_sample_aes(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::encryption::SampleAesEncryption>> {
        #[allow(unreachable_patterns)]
        self.encryption_mode.as_ref().and_then(|v| match v {
            crate::model::encryption::EncryptionMode::SampleAes(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [encryption_mode][crate::model::Encryption::encryption_mode]
    /// if it holds a `MpegCenc`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_mpeg_cenc(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::encryption::MpegCommonEncryption>> {
        #[allow(unreachable_patterns)]
        self.encryption_mode.as_ref().and_then(|v| match v {
            crate::model::encryption::EncryptionMode::MpegCenc(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [encryption_mode][crate::model::Encryption::encryption_mode]
    /// to hold a `Aes128`.
    ///
    /// Note that all the setters affecting `encryption_mode` are
    /// mutually exclusive.
    pub fn set_aes_128<
        T: std::convert::Into<std::boxed::Box<crate::model::encryption::Aes128Encryption>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.encryption_mode =
            std::option::Option::Some(crate::model::encryption::EncryptionMode::Aes128(v.into()));
        self
    }

    /// Sets the value of [encryption_mode][crate::model::Encryption::encryption_mode]
    /// to hold a `SampleAes`.
    ///
    /// Note that all the setters affecting `encryption_mode` are
    /// mutually exclusive.
    pub fn set_sample_aes<
        T: std::convert::Into<std::boxed::Box<crate::model::encryption::SampleAesEncryption>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.encryption_mode = std::option::Option::Some(
            crate::model::encryption::EncryptionMode::SampleAes(v.into()),
        );
        self
    }

    /// Sets the value of [encryption_mode][crate::model::Encryption::encryption_mode]
    /// to hold a `MpegCenc`.
    ///
    /// Note that all the setters affecting `encryption_mode` are
    /// mutually exclusive.
    pub fn set_mpeg_cenc<
        T: std::convert::Into<std::boxed::Box<crate::model::encryption::MpegCommonEncryption>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.encryption_mode =
            std::option::Option::Some(crate::model::encryption::EncryptionMode::MpegCenc(v.into()));
        self
    }

    /// Sets the value of `secret_source`.
    pub fn set_secret_source<
        T: std::convert::Into<std::option::Option<crate::model::encryption::SecretSource>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.secret_source = v.into();
        self
    }

    /// The value of [secret_source][crate::model::Encryption::secret_source]
    /// if it holds a `SecretManagerKeySource`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_secret_manager_key_source(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::encryption::SecretManagerSource>> {
        #[allow(unreachable_patterns)]
        self.secret_source.as_ref().and_then(|v| match v {
            crate::model::encryption::SecretSource::SecretManagerKeySource(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [secret_source][crate::model::Encryption::secret_source]
    /// to hold a `SecretManagerKeySource`.
    ///
    /// Note that all the setters affecting `secret_source` are
    /// mutually exclusive.
    pub fn set_secret_manager_key_source<
        T: std::convert::Into<std::boxed::Box<crate::model::encryption::SecretManagerSource>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.secret_source = std::option::Option::Some(
            crate::model::encryption::SecretSource::SecretManagerKeySource(v.into()),
        );
        self
    }
}

impl wkt::message::Message for Encryption {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.Encryption"
    }
}

/// Defines additional types related to Encryption
pub mod encryption {
    #[allow(unused_imports)]
    use super::*;

    /// Configuration for AES-128 encryption.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Aes128Encryption {}

    impl Aes128Encryption {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for Aes128Encryption {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.Encryption.Aes128Encryption"
        }
    }

    /// Configuration for SAMPLE-AES encryption.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SampleAesEncryption {}

    impl SampleAesEncryption {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for SampleAesEncryption {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.Encryption.SampleAesEncryption"
        }
    }

    /// Configuration for MPEG Common Encryption (MPEG-CENC).
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct MpegCommonEncryption {
        /// Required. Specify the encryption scheme.
        ///
        /// Supported encryption schemes:
        ///
        /// - `cenc`
        /// - `cbcs`
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub scheme: std::string::String,
    }

    impl MpegCommonEncryption {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [scheme][crate::model::encryption::MpegCommonEncryption::scheme].
        pub fn set_scheme<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.scheme = v.into();
            self
        }
    }

    impl wkt::message::Message for MpegCommonEncryption {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.Encryption.MpegCommonEncryption"
        }
    }

    /// Configuration for secrets stored in Google Secret Manager.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SecretManagerSource {
        /// Required. The name of the Secret Version containing the encryption key in
        /// the following format:
        /// `projects/{project}/secrets/{secret_id}/versions/{version_number}`
        ///
        /// Note that only numbered versions are supported. Aliases like "latest" are
        /// not supported.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub secret_version: std::string::String,
    }

    impl SecretManagerSource {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [secret_version][crate::model::encryption::SecretManagerSource::secret_version].
        pub fn set_secret_version<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.secret_version = v.into();
            self
        }
    }

    impl wkt::message::Message for SecretManagerSource {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.Encryption.SecretManagerSource"
        }
    }

    /// Widevine configuration.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Widevine {}

    impl Widevine {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for Widevine {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.Encryption.Widevine"
        }
    }

    /// Fairplay configuration.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Fairplay {}

    impl Fairplay {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for Fairplay {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.Encryption.Fairplay"
        }
    }

    /// Playready configuration.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Playready {}

    impl Playready {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for Playready {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.Encryption.Playready"
        }
    }

    /// Clearkey configuration.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Clearkey {}

    impl Clearkey {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for Clearkey {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.Encryption.Clearkey"
        }
    }

    /// Defines configuration for DRM systems in use.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct DrmSystems {
        /// Widevine configuration.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub widevine: std::option::Option<crate::model::encryption::Widevine>,

        /// Fairplay configuration.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub fairplay: std::option::Option<crate::model::encryption::Fairplay>,

        /// Playready configuration.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub playready: std::option::Option<crate::model::encryption::Playready>,

        /// Clearkey configuration.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub clearkey: std::option::Option<crate::model::encryption::Clearkey>,
    }

    impl DrmSystems {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [widevine][crate::model::encryption::DrmSystems::widevine].
        pub fn set_widevine<
            T: std::convert::Into<std::option::Option<crate::model::encryption::Widevine>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.widevine = v.into();
            self
        }

        /// Sets the value of [fairplay][crate::model::encryption::DrmSystems::fairplay].
        pub fn set_fairplay<
            T: std::convert::Into<std::option::Option<crate::model::encryption::Fairplay>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.fairplay = v.into();
            self
        }

        /// Sets the value of [playready][crate::model::encryption::DrmSystems::playready].
        pub fn set_playready<
            T: std::convert::Into<std::option::Option<crate::model::encryption::Playready>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.playready = v.into();
            self
        }

        /// Sets the value of [clearkey][crate::model::encryption::DrmSystems::clearkey].
        pub fn set_clearkey<
            T: std::convert::Into<std::option::Option<crate::model::encryption::Clearkey>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.clearkey = v.into();
            self
        }
    }

    impl wkt::message::Message for DrmSystems {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.video.transcoder.v1.Encryption.DrmSystems"
        }
    }

    /// Encryption mode can be either `aes` or `cenc`.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum EncryptionMode {
        /// Configuration for AES-128 encryption.
        Aes128(std::boxed::Box<crate::model::encryption::Aes128Encryption>),
        /// Configuration for SAMPLE-AES encryption.
        SampleAes(std::boxed::Box<crate::model::encryption::SampleAesEncryption>),
        /// Configuration for MPEG Common Encryption (MPEG-CENC).
        MpegCenc(std::boxed::Box<crate::model::encryption::MpegCommonEncryption>),
    }

    /// Defines where content keys are stored.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum SecretSource {
        /// Keys are stored in Google Secret Manager.
        SecretManagerKeySource(std::boxed::Box<crate::model::encryption::SecretManagerSource>),
    }
}

/// Request message for `TranscoderService.CreateJob`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateJobRequest {
    /// Required. The parent location to create and process this job.
    /// Format: `projects/{project}/locations/{location}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Parameters for creating transcoding job.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub job: std::option::Option<crate::model::Job>,
}

impl CreateJobRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateJobRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [job][crate::model::CreateJobRequest::job].
    pub fn set_job<T: std::convert::Into<std::option::Option<crate::model::Job>>>(
        mut self,
        v: T,
    ) -> Self {
        self.job = v.into();
        self
    }
}

impl wkt::message::Message for CreateJobRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.CreateJobRequest"
    }
}

/// Request message for `TranscoderService.ListJobs`.
/// The parent location from which to retrieve the collection of jobs.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListJobsRequest {
    /// Required. Format: `projects/{project}/locations/{location}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return.
    pub page_size: i32,

    /// The `next_page_token` value returned from a previous List request, if
    /// any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// The filter expression, following the syntax outlined in
    /// <https://google.aip.dev/160>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// One or more fields to compare and use to sort the output.
    /// See <https://google.aip.dev/132#ordering>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListJobsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListJobsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListJobsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListJobsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListJobsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListJobsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListJobsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.ListJobsRequest"
    }
}

/// Request message for `TranscoderService.GetJob`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetJobRequest {
    /// Required. The name of the job to retrieve.
    /// Format: `projects/{project}/locations/{location}/jobs/{job}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetJobRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetJobRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetJobRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.GetJobRequest"
    }
}

/// Request message for `TranscoderService.DeleteJob`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteJobRequest {
    /// Required. The name of the job to delete.
    /// Format: `projects/{project}/locations/{location}/jobs/{job}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// If set to true, and the job is not found, the request will succeed but no
    /// action will be taken on the server.
    pub allow_missing: bool,
}

impl DeleteJobRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteJobRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [allow_missing][crate::model::DeleteJobRequest::allow_missing].
    pub fn set_allow_missing<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_missing = v.into();
        self
    }
}

impl wkt::message::Message for DeleteJobRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.DeleteJobRequest"
    }
}

/// Response message for `TranscoderService.ListJobs`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListJobsResponse {
    /// List of jobs in the specified region.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub jobs: std::vec::Vec<crate::model::Job>,

    /// The pagination token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// List of regions that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListJobsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListJobsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [jobs][crate::model::ListJobsResponse::jobs].
    pub fn set_jobs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Job>,
    {
        use std::iter::Iterator;
        self.jobs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListJobsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListJobsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.ListJobsResponse"
    }
}

impl gax::paginator::PageableResponse for ListJobsResponse {
    type PageItem = crate::model::Job;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.jobs
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for `TranscoderService.CreateJobTemplate`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateJobTemplateRequest {
    /// Required. The parent location to create this job template.
    /// Format: `projects/{project}/locations/{location}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Parameters for creating job template.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub job_template: std::option::Option<crate::model::JobTemplate>,

    /// Required. The ID to use for the job template, which will become the final
    /// component of the job template's resource name.
    ///
    /// This value should be 4-63 characters, and valid characters must match the
    /// regular expression `[a-zA-Z][a-zA-Z0-9_-]*`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub job_template_id: std::string::String,
}

impl CreateJobTemplateRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateJobTemplateRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [job_template][crate::model::CreateJobTemplateRequest::job_template].
    pub fn set_job_template<
        T: std::convert::Into<std::option::Option<crate::model::JobTemplate>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.job_template = v.into();
        self
    }

    /// Sets the value of [job_template_id][crate::model::CreateJobTemplateRequest::job_template_id].
    pub fn set_job_template_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.job_template_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateJobTemplateRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.CreateJobTemplateRequest"
    }
}

/// Request message for `TranscoderService.ListJobTemplates`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListJobTemplatesRequest {
    /// Required. The parent location from which to retrieve the collection of job
    /// templates. Format: `projects/{project}/locations/{location}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return.
    pub page_size: i32,

    /// The `next_page_token` value returned from a previous List request, if
    /// any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// The filter expression, following the syntax outlined in
    /// <https://google.aip.dev/160>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// One or more fields to compare and use to sort the output.
    /// See <https://google.aip.dev/132#ordering>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListJobTemplatesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListJobTemplatesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListJobTemplatesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListJobTemplatesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListJobTemplatesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListJobTemplatesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListJobTemplatesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.ListJobTemplatesRequest"
    }
}

/// Request message for `TranscoderService.GetJobTemplate`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetJobTemplateRequest {
    /// Required. The name of the job template to retrieve.
    /// Format:
    /// `projects/{project}/locations/{location}/jobTemplates/{job_template}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetJobTemplateRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetJobTemplateRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetJobTemplateRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.GetJobTemplateRequest"
    }
}

/// Request message for `TranscoderService.DeleteJobTemplate`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteJobTemplateRequest {
    /// Required. The name of the job template to delete.
    /// `projects/{project}/locations/{location}/jobTemplates/{job_template}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// If set to true, and the job template is not found, the request will succeed
    /// but no action will be taken on the server.
    pub allow_missing: bool,
}

impl DeleteJobTemplateRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteJobTemplateRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [allow_missing][crate::model::DeleteJobTemplateRequest::allow_missing].
    pub fn set_allow_missing<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_missing = v.into();
        self
    }
}

impl wkt::message::Message for DeleteJobTemplateRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.DeleteJobTemplateRequest"
    }
}

/// Response message for `TranscoderService.ListJobTemplates`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListJobTemplatesResponse {
    /// List of job templates in the specified region.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub job_templates: std::vec::Vec<crate::model::JobTemplate>,

    /// The pagination token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// List of regions that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListJobTemplatesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListJobTemplatesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [job_templates][crate::model::ListJobTemplatesResponse::job_templates].
    pub fn set_job_templates<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::JobTemplate>,
    {
        use std::iter::Iterator;
        self.job_templates = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListJobTemplatesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListJobTemplatesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.video.transcoder.v1.ListJobTemplatesResponse"
    }
}

impl gax::paginator::PageableResponse for ListJobTemplatesResponse {
    type PageItem = crate::model::JobTemplate;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.job_templates
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}
