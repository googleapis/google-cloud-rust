// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::MigrationCenter].
///
/// Application developers may need to implement this trait to mock
/// `client::MigrationCenter`.  In other use-cases, application developers only
/// use `client::MigrationCenter` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait MigrationCenter: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::MigrationCenter::list_assets].
    fn list_assets(
        &self,
        _req: crate::model::ListAssetsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAssetsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListAssetsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::get_asset].
    fn get_asset(
        &self,
        _req: crate::model::GetAssetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Asset>> + Send {
        std::future::ready::<crate::Result<crate::model::Asset>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::MigrationCenter::update_asset].
    fn update_asset(
        &self,
        _req: crate::model::UpdateAssetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Asset>> + Send {
        std::future::ready::<crate::Result<crate::model::Asset>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::MigrationCenter::batch_update_assets].
    fn batch_update_assets(
        &self,
        _req: crate::model::BatchUpdateAssetsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BatchUpdateAssetsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::BatchUpdateAssetsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::MigrationCenter::delete_asset].
    fn delete_asset(
        &self,
        _req: crate::model::DeleteAssetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::MigrationCenter::batch_delete_assets].
    fn batch_delete_assets(
        &self,
        _req: crate::model::BatchDeleteAssetsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::MigrationCenter::report_asset_frames].
    fn report_asset_frames(
        &self,
        _req: crate::model::ReportAssetFramesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ReportAssetFramesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ReportAssetFramesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::MigrationCenter::aggregate_assets_values].
    fn aggregate_assets_values(
        &self,
        _req: crate::model::AggregateAssetsValuesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::AggregateAssetsValuesResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::AggregateAssetsValuesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::MigrationCenter::create_import_job].
    fn create_import_job(
        &self,
        _req: crate::model::CreateImportJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::list_import_jobs].
    fn list_import_jobs(
        &self,
        _req: crate::model::ListImportJobsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListImportJobsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListImportJobsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::MigrationCenter::get_import_job].
    fn get_import_job(
        &self,
        _req: crate::model::GetImportJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ImportJob>> + Send {
        std::future::ready::<crate::Result<crate::model::ImportJob>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::delete_import_job].
    fn delete_import_job(
        &self,
        _req: crate::model::DeleteImportJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::update_import_job].
    fn update_import_job(
        &self,
        _req: crate::model::UpdateImportJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::validate_import_job].
    fn validate_import_job(
        &self,
        _req: crate::model::ValidateImportJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::run_import_job].
    fn run_import_job(
        &self,
        _req: crate::model::RunImportJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::get_import_data_file].
    fn get_import_data_file(
        &self,
        _req: crate::model::GetImportDataFileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ImportDataFile>> + Send {
        std::future::ready::<crate::Result<crate::model::ImportDataFile>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::list_import_data_files].
    fn list_import_data_files(
        &self,
        _req: crate::model::ListImportDataFilesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListImportDataFilesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListImportDataFilesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::MigrationCenter::create_import_data_file].
    fn create_import_data_file(
        &self,
        _req: crate::model::CreateImportDataFileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::delete_import_data_file].
    fn delete_import_data_file(
        &self,
        _req: crate::model::DeleteImportDataFileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::list_groups].
    fn list_groups(
        &self,
        _req: crate::model::ListGroupsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListGroupsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListGroupsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::get_group].
    fn get_group(
        &self,
        _req: crate::model::GetGroupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Group>> + Send {
        std::future::ready::<crate::Result<crate::model::Group>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::MigrationCenter::create_group].
    fn create_group(
        &self,
        _req: crate::model::CreateGroupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::update_group].
    fn update_group(
        &self,
        _req: crate::model::UpdateGroupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::delete_group].
    fn delete_group(
        &self,
        _req: crate::model::DeleteGroupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::add_assets_to_group].
    fn add_assets_to_group(
        &self,
        _req: crate::model::AddAssetsToGroupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::remove_assets_from_group].
    fn remove_assets_from_group(
        &self,
        _req: crate::model::RemoveAssetsFromGroupRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::list_error_frames].
    fn list_error_frames(
        &self,
        _req: crate::model::ListErrorFramesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListErrorFramesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListErrorFramesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::MigrationCenter::get_error_frame].
    fn get_error_frame(
        &self,
        _req: crate::model::GetErrorFrameRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ErrorFrame>> + Send {
        std::future::ready::<crate::Result<crate::model::ErrorFrame>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::list_sources].
    fn list_sources(
        &self,
        _req: crate::model::ListSourcesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListSourcesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListSourcesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::get_source].
    fn get_source(
        &self,
        _req: crate::model::GetSourceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Source>> + Send {
        std::future::ready::<crate::Result<crate::model::Source>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::create_source].
    fn create_source(
        &self,
        _req: crate::model::CreateSourceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::update_source].
    fn update_source(
        &self,
        _req: crate::model::UpdateSourceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::delete_source].
    fn delete_source(
        &self,
        _req: crate::model::DeleteSourceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::list_preference_sets].
    fn list_preference_sets(
        &self,
        _req: crate::model::ListPreferenceSetsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListPreferenceSetsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListPreferenceSetsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::MigrationCenter::get_preference_set].
    fn get_preference_set(
        &self,
        _req: crate::model::GetPreferenceSetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::PreferenceSet>> + Send {
        std::future::ready::<crate::Result<crate::model::PreferenceSet>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::create_preference_set].
    fn create_preference_set(
        &self,
        _req: crate::model::CreatePreferenceSetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::update_preference_set].
    fn update_preference_set(
        &self,
        _req: crate::model::UpdatePreferenceSetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::delete_preference_set].
    fn delete_preference_set(
        &self,
        _req: crate::model::DeletePreferenceSetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::get_settings].
    fn get_settings(
        &self,
        _req: crate::model::GetSettingsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Settings>> + Send {
        std::future::ready::<crate::Result<crate::model::Settings>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::update_settings].
    fn update_settings(
        &self,
        _req: crate::model::UpdateSettingsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::create_report_config].
    fn create_report_config(
        &self,
        _req: crate::model::CreateReportConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::get_report_config].
    fn get_report_config(
        &self,
        _req: crate::model::GetReportConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ReportConfig>> + Send {
        std::future::ready::<crate::Result<crate::model::ReportConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::list_report_configs].
    fn list_report_configs(
        &self,
        _req: crate::model::ListReportConfigsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListReportConfigsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListReportConfigsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::MigrationCenter::delete_report_config].
    fn delete_report_config(
        &self,
        _req: crate::model::DeleteReportConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::create_report].
    fn create_report(
        &self,
        _req: crate::model::CreateReportRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::get_report].
    fn get_report(
        &self,
        _req: crate::model::GetReportRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Report>> + Send {
        std::future::ready::<crate::Result<crate::model::Report>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::list_reports].
    fn list_reports(
        &self,
        _req: crate::model::ListReportsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListReportsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListReportsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::delete_report].
    fn delete_report(
        &self,
        _req: crate::model::DeleteReportRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::MigrationCenter::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
    + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::MigrationCenter::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::MigrationCenter::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::MigrationCenter::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
