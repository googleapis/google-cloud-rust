// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

/// A dyn-compatible, crate-private version of [super::EssentialContactsService].
#[async_trait::async_trait]
pub trait EssentialContactsService: std::fmt::Debug + Send + Sync {
    async fn create_contact(
        &self,
        req: crate::model::CreateContactRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Contact>>;

    async fn update_contact(
        &self,
        req: crate::model::UpdateContactRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Contact>>;

    async fn list_contacts(
        &self,
        req: crate::model::ListContactsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListContactsResponse>>;

    async fn get_contact(
        &self,
        req: crate::model::GetContactRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Contact>>;

    async fn delete_contact(
        &self,
        req: crate::model::DeleteContactRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>>;

    async fn compute_contacts(
        &self,
        req: crate::model::ComputeContactsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ComputeContactsResponse>>;

    async fn send_test_message(
        &self,
        req: crate::model::SendTestMessageRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>>;
}

/// All implementations of [super::EssentialContactsService] also implement [EssentialContactsService].
#[async_trait::async_trait]
impl<T: super::EssentialContactsService> EssentialContactsService for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn create_contact(
        &self,
        req: crate::model::CreateContactRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Contact>> {
        T::create_contact(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_contact(
        &self,
        req: crate::model::UpdateContactRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Contact>> {
        T::update_contact(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_contacts(
        &self,
        req: crate::model::ListContactsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListContactsResponse>> {
        T::list_contacts(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_contact(
        &self,
        req: crate::model::GetContactRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Contact>> {
        T::get_contact(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_contact(
        &self,
        req: crate::model::DeleteContactRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>> {
        T::delete_contact(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn compute_contacts(
        &self,
        req: crate::model::ComputeContactsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ComputeContactsResponse>> {
        T::compute_contacts(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn send_test_message(
        &self,
        req: crate::model::SendTestMessageRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>> {
        T::send_test_message(self, req, options).await
    }
}
