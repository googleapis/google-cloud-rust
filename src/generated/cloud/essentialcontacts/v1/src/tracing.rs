// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [EssentialContactsService](super::stubs::EssentialContactsService) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct EssentialContactsService<T>
where
    T: super::stubs::EssentialContactsService + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> EssentialContactsService<T>
where
    T: super::stubs::EssentialContactsService + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stubs::EssentialContactsService for EssentialContactsService<T>
where
    T: super::stubs::EssentialContactsService + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn create_contact(
        &self,
        req: crate::model::CreateContactRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Contact> {
        self.inner.create_contact(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_contact(
        &self,
        req: crate::model::UpdateContactRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Contact> {
        self.inner.update_contact(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_contacts(
        &self,
        req: crate::model::ListContactsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListContactsResponse> {
        self.inner.list_contacts(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_contact(
        &self,
        req: crate::model::GetContactRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Contact> {
        self.inner.get_contact(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_contact(
        &self,
        req: crate::model::DeleteContactRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.delete_contact(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn compute_contacts(
        &self,
        req: crate::model::ComputeContactsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ComputeContactsResponse> {
        self.inner.compute_contacts(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn send_test_message(
        &self,
        req: crate::model::SendTestMessageRequest,
        options: gax::options::RequestOptions,
    ) -> Result<()> {
        self.inner.send_test_message(req, options).await
    }
}
