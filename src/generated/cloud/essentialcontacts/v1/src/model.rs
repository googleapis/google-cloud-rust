// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gaxi;
extern crate lazy_static;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// A contact that will receive notifications from Google Cloud.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Contact {
    /// Output only. The identifier for the contact.
    /// Format: {resource_type}/{resource_id}/contacts/{contact_id}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The email address to send notifications to. The email address
    /// does not need to be a Google Account.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub email: std::string::String,

    /// Required. The categories of notifications that the contact will receive
    /// communications for.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub notification_category_subscriptions: std::vec::Vec<crate::model::NotificationCategory>,

    /// Required. The preferred language for notifications, as a ISO 639-1 language
    /// code. See [Supported
    /// languages](https://cloud.google.com/resource-manager/docs/managing-notification-contacts#supported-languages)
    /// for a list of supported languages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_tag: std::string::String,

    /// Output only. The validity of the contact. A contact is considered valid if
    /// it is the correct recipient for notifications for a particular resource.
    pub validation_state: crate::model::ValidationState,

    /// The last time the validation_state was updated, either manually or
    /// automatically. A contact is considered stale if its validation state was
    /// updated more than 1 year ago.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub validate_time: std::option::Option<wkt::Timestamp>,
}

impl Contact {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Contact::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [email][crate::model::Contact::email].
    pub fn set_email<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.email = v.into();
        self
    }

    /// Sets the value of [language_tag][crate::model::Contact::language_tag].
    pub fn set_language_tag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_tag = v.into();
        self
    }

    /// Sets the value of [validation_state][crate::model::Contact::validation_state].
    pub fn set_validation_state<T: std::convert::Into<crate::model::ValidationState>>(
        mut self,
        v: T,
    ) -> Self {
        self.validation_state = v.into();
        self
    }

    /// Sets the value of [validate_time][crate::model::Contact::validate_time].
    pub fn set_validate_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.validate_time = v.into();
        self
    }

    /// Sets the value of [notification_category_subscriptions][crate::model::Contact::notification_category_subscriptions].
    pub fn set_notification_category_subscriptions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::NotificationCategory>,
    {
        use std::iter::Iterator;
        self.notification_category_subscriptions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Contact {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.essentialcontacts.v1.Contact"
    }
}

/// Request message for the ListContacts method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListContactsRequest {
    /// Required. The parent resource name.
    /// Format: organizations/{organization_id}, folders/{folder_id} or
    /// projects/{project_id}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of results to return from this request.
    /// Non-positive values are ignored. The presence of `next_page_token` in the
    /// response indicates that more results might be available.
    /// If not specified, the default page_size is 100.
    pub page_size: i32,

    /// Optional. If present, retrieves the next batch of results from the
    /// preceding call to this method. `page_token` must be the value of
    /// `next_page_token` from the previous response. The values of other method
    /// parameters should be identical to those in the previous call.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListContactsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListContactsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListContactsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListContactsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListContactsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.essentialcontacts.v1.ListContactsRequest"
    }
}

/// Response message for the ListContacts method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListContactsResponse {
    /// The contacts for the specified resource.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub contacts: std::vec::Vec<crate::model::Contact>,

    /// If there are more results than those appearing in this response, then
    /// `next_page_token` is included. To get the next set of results, call this
    /// method again using the value of `next_page_token` as `page_token` and the
    /// rest of the parameters the same as the original request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListContactsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListContactsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [contacts][crate::model::ListContactsResponse::contacts].
    pub fn set_contacts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Contact>,
    {
        use std::iter::Iterator;
        self.contacts = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListContactsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.essentialcontacts.v1.ListContactsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListContactsResponse {
    type PageItem = crate::model::Contact;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.contacts
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request message for the GetContact method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetContactRequest {
    /// Required. The name of the contact to retrieve.
    /// Format: organizations/{organization_id}/contacts/{contact_id},
    /// folders/{folder_id}/contacts/{contact_id} or
    /// projects/{project_id}/contacts/{contact_id}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetContactRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetContactRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetContactRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.essentialcontacts.v1.GetContactRequest"
    }
}

/// Request message for the DeleteContact method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteContactRequest {
    /// Required. The name of the contact to delete.
    /// Format: organizations/{organization_id}/contacts/{contact_id},
    /// folders/{folder_id}/contacts/{contact_id} or
    /// projects/{project_id}/contacts/{contact_id}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteContactRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteContactRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteContactRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.essentialcontacts.v1.DeleteContactRequest"
    }
}

/// Request message for the CreateContact method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateContactRequest {
    /// Required. The resource to save this contact for.
    /// Format: organizations/{organization_id}, folders/{folder_id} or
    /// projects/{project_id}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The contact to create. Must specify an email address and language
    /// tag.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub contact: std::option::Option<crate::model::Contact>,
}

impl CreateContactRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateContactRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [contact][crate::model::CreateContactRequest::contact].
    pub fn set_contact<T: std::convert::Into<std::option::Option<crate::model::Contact>>>(
        mut self,
        v: T,
    ) -> Self {
        self.contact = v.into();
        self
    }
}

impl wkt::message::Message for CreateContactRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.essentialcontacts.v1.CreateContactRequest"
    }
}

/// Request message for the UpdateContact method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateContactRequest {
    /// Required. The contact resource to replace the existing saved contact. Note:
    /// the email address of the contact cannot be modified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub contact: std::option::Option<crate::model::Contact>,

    /// Optional. The update mask applied to the resource. For the `FieldMask`
    /// definition, see
    /// <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask>
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateContactRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [contact][crate::model::UpdateContactRequest::contact].
    pub fn set_contact<T: std::convert::Into<std::option::Option<crate::model::Contact>>>(
        mut self,
        v: T,
    ) -> Self {
        self.contact = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateContactRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateContactRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.essentialcontacts.v1.UpdateContactRequest"
    }
}

/// Request message for the ComputeContacts method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ComputeContactsRequest {
    /// Required. The name of the resource to compute contacts for.
    /// Format: organizations/{organization_id},
    /// folders/{folder_id} or projects/{project_id}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The categories of notifications to compute contacts for. If ALL is included
    /// in this list, contacts subscribed to any notification category will be
    /// returned.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub notification_categories: std::vec::Vec<crate::model::NotificationCategory>,

    /// Optional. The maximum number of results to return from this request.
    /// Non-positive values are ignored. The presence of `next_page_token` in the
    /// response indicates that more results might be available.
    /// If not specified, the default page_size is 100.
    pub page_size: i32,

    /// Optional. If present, retrieves the next batch of results from the
    /// preceding call to this method. `page_token` must be the value of
    /// `next_page_token` from the previous response. The values of other method
    /// parameters should be identical to those in the previous call.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ComputeContactsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ComputeContactsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ComputeContactsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ComputeContactsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [notification_categories][crate::model::ComputeContactsRequest::notification_categories].
    pub fn set_notification_categories<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::NotificationCategory>,
    {
        use std::iter::Iterator;
        self.notification_categories = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ComputeContactsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.essentialcontacts.v1.ComputeContactsRequest"
    }
}

/// Response message for the ComputeContacts method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ComputeContactsResponse {
    /// All contacts for the resource that are subscribed to the specified
    /// notification categories, including contacts inherited from any parent
    /// resources.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub contacts: std::vec::Vec<crate::model::Contact>,

    /// If there are more results than those appearing in this response, then
    /// `next_page_token` is included. To get the next set of results, call this
    /// method again using the value of `next_page_token` as `page_token` and the
    /// rest of the parameters the same as the original request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ComputeContactsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ComputeContactsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [contacts][crate::model::ComputeContactsResponse::contacts].
    pub fn set_contacts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Contact>,
    {
        use std::iter::Iterator;
        self.contacts = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ComputeContactsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.essentialcontacts.v1.ComputeContactsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ComputeContactsResponse {
    type PageItem = crate::model::Contact;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.contacts
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request message for the SendTestMessage method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SendTestMessageRequest {
    /// Required. The list of names of the contacts to send a test message to.
    /// Format: organizations/{organization_id}/contacts/{contact_id},
    /// folders/{folder_id}/contacts/{contact_id} or
    /// projects/{project_id}/contacts/{contact_id}
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub contacts: std::vec::Vec<std::string::String>,

    /// Required. The name of the resource to send the test message for. All
    /// contacts must either be set directly on this resource or inherited from
    /// another resource that is an ancestor of this one. Format:
    /// organizations/{organization_id}, folders/{folder_id} or
    /// projects/{project_id}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub resource: std::string::String,

    /// Required. The notification category to send the test message for. All
    /// contacts must be subscribed to this category.
    pub notification_category: crate::model::NotificationCategory,
}

impl SendTestMessageRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [resource][crate::model::SendTestMessageRequest::resource].
    pub fn set_resource<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.resource = v.into();
        self
    }

    /// Sets the value of [notification_category][crate::model::SendTestMessageRequest::notification_category].
    pub fn set_notification_category<T: std::convert::Into<crate::model::NotificationCategory>>(
        mut self,
        v: T,
    ) -> Self {
        self.notification_category = v.into();
        self
    }

    /// Sets the value of [contacts][crate::model::SendTestMessageRequest::contacts].
    pub fn set_contacts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.contacts = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SendTestMessageRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.essentialcontacts.v1.SendTestMessageRequest"
    }
}

/// The notification categories that an essential contact can be subscribed to.
/// Each notification will be categorized by the sender into one of the following
/// categories. All contacts that are subscribed to that category will receive
/// the notification.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct NotificationCategory(i32);

impl NotificationCategory {
    /// Notification category is unrecognized or unspecified.
    pub const NOTIFICATION_CATEGORY_UNSPECIFIED: NotificationCategory =
        NotificationCategory::new(0);

    /// All notifications related to the resource, including notifications
    /// pertaining to categories added in the future.
    pub const ALL: NotificationCategory = NotificationCategory::new(2);

    /// Notifications related to imminent account suspension.
    pub const SUSPENSION: NotificationCategory = NotificationCategory::new(3);

    /// Notifications related to security/privacy incidents, notifications, and
    /// vulnerabilities.
    pub const SECURITY: NotificationCategory = NotificationCategory::new(5);

    /// Notifications related to technical events and issues such as outages,
    /// errors, or bugs.
    pub const TECHNICAL: NotificationCategory = NotificationCategory::new(6);

    /// Notifications related to billing and payments notifications, price updates,
    /// errors, or credits.
    pub const BILLING: NotificationCategory = NotificationCategory::new(7);

    /// Notifications related to enforcement actions, regulatory compliance, or
    /// government notices.
    pub const LEGAL: NotificationCategory = NotificationCategory::new(8);

    /// Notifications related to new versions, product terms updates, or
    /// deprecations.
    pub const PRODUCT_UPDATES: NotificationCategory = NotificationCategory::new(9);

    /// Child category of TECHNICAL. If assigned, technical incident notifications
    /// will go to these contacts instead of TECHNICAL.
    pub const TECHNICAL_INCIDENTS: NotificationCategory = NotificationCategory::new(10);

    /// Creates a new NotificationCategory instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("NOTIFICATION_CATEGORY_UNSPECIFIED"),
            2 => std::borrow::Cow::Borrowed("ALL"),
            3 => std::borrow::Cow::Borrowed("SUSPENSION"),
            5 => std::borrow::Cow::Borrowed("SECURITY"),
            6 => std::borrow::Cow::Borrowed("TECHNICAL"),
            7 => std::borrow::Cow::Borrowed("BILLING"),
            8 => std::borrow::Cow::Borrowed("LEGAL"),
            9 => std::borrow::Cow::Borrowed("PRODUCT_UPDATES"),
            10 => std::borrow::Cow::Borrowed("TECHNICAL_INCIDENTS"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "NOTIFICATION_CATEGORY_UNSPECIFIED" => {
                std::option::Option::Some(Self::NOTIFICATION_CATEGORY_UNSPECIFIED)
            }
            "ALL" => std::option::Option::Some(Self::ALL),
            "SUSPENSION" => std::option::Option::Some(Self::SUSPENSION),
            "SECURITY" => std::option::Option::Some(Self::SECURITY),
            "TECHNICAL" => std::option::Option::Some(Self::TECHNICAL),
            "BILLING" => std::option::Option::Some(Self::BILLING),
            "LEGAL" => std::option::Option::Some(Self::LEGAL),
            "PRODUCT_UPDATES" => std::option::Option::Some(Self::PRODUCT_UPDATES),
            "TECHNICAL_INCIDENTS" => std::option::Option::Some(Self::TECHNICAL_INCIDENTS),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for NotificationCategory {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for NotificationCategory {
    fn default() -> Self {
        Self::new(0)
    }
}

/// A contact's validation state indicates whether or not it is the correct
/// contact to be receiving notifications for a particular resource.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct ValidationState(i32);

impl ValidationState {
    /// The validation state is unknown or unspecified.
    pub const VALIDATION_STATE_UNSPECIFIED: ValidationState = ValidationState::new(0);

    /// The contact is marked as valid. This is usually done manually by the
    /// contact admin. All new contacts begin in the valid state.
    pub const VALID: ValidationState = ValidationState::new(1);

    /// The contact is considered invalid. This may become the state if the
    /// contact's email is found to be unreachable.
    pub const INVALID: ValidationState = ValidationState::new(2);

    /// Creates a new ValidationState instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("VALIDATION_STATE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("VALID"),
            2 => std::borrow::Cow::Borrowed("INVALID"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "VALIDATION_STATE_UNSPECIFIED" => {
                std::option::Option::Some(Self::VALIDATION_STATE_UNSPECIFIED)
            }
            "VALID" => std::option::Option::Some(Self::VALID),
            "INVALID" => std::option::Option::Some(Self::INVALID),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for ValidationState {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for ValidationState {
    fn default() -> Self {
        Self::new(0)
    }
}
