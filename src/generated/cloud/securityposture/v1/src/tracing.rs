// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [SecurityPosture](crate::stubs::SecurityPosture) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct SecurityPosture<T>
where
    T: crate::stubs::SecurityPosture + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> SecurityPosture<T>
where
    T: crate::stubs::SecurityPosture + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> crate::stubs::SecurityPosture for SecurityPosture<T>
where
    T: crate::stubs::SecurityPosture + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn list_postures(
        &self,
        req: crate::model::ListPosturesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListPosturesResponse> {
        self.inner.list_postures(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_posture_revisions(
        &self,
        req: crate::model::ListPostureRevisionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListPostureRevisionsResponse> {
        self.inner.list_posture_revisions(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_posture(
        &self,
        req: crate::model::GetPostureRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Posture> {
        self.inner.get_posture(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_posture(
        &self,
        req: crate::model::CreatePostureRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.create_posture(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_posture(
        &self,
        req: crate::model::UpdatePostureRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.update_posture(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_posture(
        &self,
        req: crate::model::DeletePostureRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_posture(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn extract_posture(
        &self,
        req: crate::model::ExtractPostureRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.extract_posture(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_posture_deployments(
        &self,
        req: crate::model::ListPostureDeploymentsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListPostureDeploymentsResponse> {
        self.inner.list_posture_deployments(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_posture_deployment(
        &self,
        req: crate::model::GetPostureDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::PostureDeployment> {
        self.inner.get_posture_deployment(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_posture_deployment(
        &self,
        req: crate::model::CreatePostureDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.create_posture_deployment(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_posture_deployment(
        &self,
        req: crate::model::UpdatePostureDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.update_posture_deployment(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_posture_deployment(
        &self,
        req: crate::model::DeletePostureDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_posture_deployment(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_posture_templates(
        &self,
        req: crate::model::ListPostureTemplatesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListPostureTemplatesResponse> {
        self.inner.list_posture_templates(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_posture_template(
        &self,
        req: crate::model::GetPostureTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::PostureTemplate> {
        self.inner.get_posture_template(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<location::model::ListLocationsResponse> {
        self.inner.list_locations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<location::model::Location> {
        self.inner.get_location(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::ListOperationsResponse> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.get_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.delete_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.cancel_operation(req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_policy::PollingPolicy> {
        self.inner.get_polling_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}
