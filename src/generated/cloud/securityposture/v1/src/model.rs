// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gtype;
extern crate lazy_static;
extern crate location;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// A rule used to express this policy.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PolicyRule {
    /// A condition which determines whether this rule is used
    /// in the evaluation of the policy. When set, the `expression` field in
    /// the `Expr' must include from 1 to 10 subexpressions, joined by the "||"
    /// or "&&" operators. Each subexpression must be of the form
    /// "resource.matchTag('<ORG_ID>/tag_key_short_name,
    /// 'tag_value_short_name')" or "resource.matchTagId('tagKeys/key_id',
    /// 'tagValues/value_id')" where key_name and value_name are the resource
    /// names for Label Keys and Values. These names are available from the Tag
    /// Manager Service. An example expression is:
    /// "resource.matchTag('123456789/environment,
    /// 'prod')" or "resource.matchTagId('tagKeys/123',
    /// 'tagValues/456')".
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub condition: std::option::Option<gtype::model::Expr>,

    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub kind: std::option::Option<crate::model::policy_rule::Kind>,
}

impl PolicyRule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [condition][crate::model::PolicyRule::condition].
    pub fn set_condition<T: std::convert::Into<std::option::Option<gtype::model::Expr>>>(
        mut self,
        v: T,
    ) -> Self {
        self.condition = v.into();
        self
    }

    /// Sets the value of `kind`.
    pub fn set_kind<T: std::convert::Into<std::option::Option<crate::model::policy_rule::Kind>>>(
        mut self,
        v: T,
    ) -> Self {
        self.kind = v.into();
        self
    }

    /// The value of [kind][crate::model::PolicyRule::kind]
    /// if it holds a `Values`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_values(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::policy_rule::StringValues>> {
        #[allow(unreachable_patterns)]
        self.kind.as_ref().and_then(|v| match v {
            crate::model::policy_rule::Kind::Values(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [kind][crate::model::PolicyRule::kind]
    /// if it holds a `AllowAll`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_allow_all(&self) -> std::option::Option<&bool> {
        #[allow(unreachable_patterns)]
        self.kind.as_ref().and_then(|v| match v {
            crate::model::policy_rule::Kind::AllowAll(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [kind][crate::model::PolicyRule::kind]
    /// if it holds a `DenyAll`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_deny_all(&self) -> std::option::Option<&bool> {
        #[allow(unreachable_patterns)]
        self.kind.as_ref().and_then(|v| match v {
            crate::model::policy_rule::Kind::DenyAll(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [kind][crate::model::PolicyRule::kind]
    /// if it holds a `Enforce`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_enforce(&self) -> std::option::Option<&bool> {
        #[allow(unreachable_patterns)]
        self.kind.as_ref().and_then(|v| match v {
            crate::model::policy_rule::Kind::Enforce(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [kind][crate::model::PolicyRule::kind]
    /// to hold a `Values`.
    ///
    /// Note that all the setters affecting `kind` are
    /// mutually exclusive.
    pub fn set_values<
        T: std::convert::Into<std::boxed::Box<crate::model::policy_rule::StringValues>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.kind = std::option::Option::Some(crate::model::policy_rule::Kind::Values(v.into()));
        self
    }

    /// Sets the value of [kind][crate::model::PolicyRule::kind]
    /// to hold a `AllowAll`.
    ///
    /// Note that all the setters affecting `kind` are
    /// mutually exclusive.
    pub fn set_allow_all<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.kind = std::option::Option::Some(crate::model::policy_rule::Kind::AllowAll(v.into()));
        self
    }

    /// Sets the value of [kind][crate::model::PolicyRule::kind]
    /// to hold a `DenyAll`.
    ///
    /// Note that all the setters affecting `kind` are
    /// mutually exclusive.
    pub fn set_deny_all<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.kind = std::option::Option::Some(crate::model::policy_rule::Kind::DenyAll(v.into()));
        self
    }

    /// Sets the value of [kind][crate::model::PolicyRule::kind]
    /// to hold a `Enforce`.
    ///
    /// Note that all the setters affecting `kind` are
    /// mutually exclusive.
    pub fn set_enforce<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.kind = std::option::Option::Some(crate::model::policy_rule::Kind::Enforce(v.into()));
        self
    }
}

impl wkt::message::Message for PolicyRule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.PolicyRule"
    }
}

/// Defines additional types related to PolicyRule
pub mod policy_rule {
    #[allow(unused_imports)]
    use super::*;

    /// A message that holds specific allowed and denied values.
    /// This message can define specific values and subtrees of the Resource
    /// Manager resource hierarchy (`Organizations`, `Folders`, `Projects`) that
    /// are allowed or denied. This is achieved by using the `under:` and
    /// optional `is:` prefixes.
    /// The `under:` prefix is used to denote resource subtree values.
    /// The `is:` prefix is used to denote specific values, and is required only
    /// if the value contains a ":". Values prefixed with "is:" are treated the
    /// same as values with no prefix.
    /// Ancestry subtrees must be in one of the following formats:
    ///
    /// - `projects/<project-id>` (for example, `projects/tokyo-rain-123`)
    /// - `folders/<folder-id>` (for example, `folders/1234`)
    /// - `organizations/<organization-id>` (for example, `organizations/1234`)
    ///
    /// The `supports_under` field of the associated `Constraint`  defines
    /// whether ancestry prefixes can be used.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct StringValues {
        /// List of values allowed at this resource.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub allowed_values: std::vec::Vec<std::string::String>,

        /// List of values denied at this resource.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub denied_values: std::vec::Vec<std::string::String>,
    }

    impl StringValues {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [allowed_values][crate::model::policy_rule::StringValues::allowed_values].
        pub fn set_allowed_values<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.allowed_values = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [denied_values][crate::model::policy_rule::StringValues::denied_values].
        pub fn set_denied_values<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.denied_values = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for StringValues {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securityposture.v1.PolicyRule.StringValues"
        }
    }

    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Kind {
        /// List of values to be used for this policy rule. This field can be set
        /// only in policies for list constraints.
        Values(std::boxed::Box<crate::model::policy_rule::StringValues>),
        /// Setting this to true means that all values are allowed. This field can
        /// be set only in policies for list constraints.
        AllowAll(bool),
        /// Setting this to true means that all values are denied. This field can
        /// be set only in policies for list constraints.
        DenyAll(bool),
        /// If `true`, then the policy is enforced. If `false`, then any
        /// configuration is acceptable.
        /// This field can be set only in policies for boolean constraints.
        Enforce(bool),
    }
}

/// A custom constraint defined by customers which can *only* be applied to the
/// given resource types and organization.
///
/// By creating a custom constraint, customers can apply policies of this
/// custom constraint. *Creating a custom constraint itself does NOT apply any
/// policy enforcement*.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CustomConstraint {
    /// Immutable. Name of the constraint. This is unique within the organization.
    /// Format of the name should be
    ///
    ///
    /// `organizations/{organization_id}/customConstraints/{custom_constraint_id}`
    ///
    /// Example: `organizations/123/customConstraints/custom.createOnlyE2TypeVms`
    ///
    /// The max length is 70 characters and the minimum length is 1. Note that the
    /// prefix `organizations/{organization_id}/customConstraints/` is not counted.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Immutable. The resource instance type on which this policy applies. Format
    /// will be of the form : `<canonical service name>/<type>` Example:
    ///
    /// - `compute.googleapis.com/Instance`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub resource_types: std::vec::Vec<std::string::String>,

    /// All the operations being applied for this constraint.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub method_types: std::vec::Vec<crate::model::custom_constraint::MethodType>,

    /// Org policy condition/expression. For example:
    /// `resource.instanceName.matches("[production|test]_.*_(\d)+")` or,
    /// `resource.management.auto_upgrade == true`
    ///
    /// The max length of the condition is 1000 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub condition: std::string::String,

    /// Allow or deny type.
    pub action_type: crate::model::custom_constraint::ActionType,

    /// One line display name for the UI.
    /// The max length of the display_name is 200 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Detailed information about this custom policy constraint.
    /// The max length of the description is 2000 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. The last time this custom constraint was updated. This
    /// represents the last time that the `CreateCustomConstraint` or
    /// `UpdateCustomConstraint` RPC was called
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,
}

impl CustomConstraint {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::CustomConstraint::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [condition][crate::model::CustomConstraint::condition].
    pub fn set_condition<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.condition = v.into();
        self
    }

    /// Sets the value of [action_type][crate::model::CustomConstraint::action_type].
    pub fn set_action_type<T: std::convert::Into<crate::model::custom_constraint::ActionType>>(
        mut self,
        v: T,
    ) -> Self {
        self.action_type = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::CustomConstraint::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::CustomConstraint::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::CustomConstraint::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [resource_types][crate::model::CustomConstraint::resource_types].
    pub fn set_resource_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.resource_types = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [method_types][crate::model::CustomConstraint::method_types].
    pub fn set_method_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::custom_constraint::MethodType>,
    {
        use std::iter::Iterator;
        self.method_types = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CustomConstraint {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.CustomConstraint"
    }
}

/// Defines additional types related to CustomConstraint
pub mod custom_constraint {
    #[allow(unused_imports)]
    use super::*;

    /// The operation for which this constraint will be applied. To apply this
    /// constraint only when creating new VMs, the `method_types` should be
    /// `CREATE` only. To apply this constraint when creating or deleting
    /// VMs, the `method_types` should be `CREATE` and `DELETE`.
    ///
    /// `UPDATE` only custom constraints are not supported. Use `CREATE` or
    /// `CREATE, UPDATE`.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct MethodType(std::borrow::Cow<'static, str>);

    impl MethodType {
        /// Creates a new MethodType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [MethodType](MethodType)
    pub mod method_type {
        use super::MethodType;

        /// Unspecified. Results in an error.
        pub const METHOD_TYPE_UNSPECIFIED: MethodType = MethodType::new("METHOD_TYPE_UNSPECIFIED");

        /// Constraint applied when creating the resource.
        pub const CREATE: MethodType = MethodType::new("CREATE");

        /// Constraint applied when updating the resource.
        pub const UPDATE: MethodType = MethodType::new("UPDATE");

        /// Constraint applied when deleting the resource.
        /// Not supported yet.
        pub const DELETE: MethodType = MethodType::new("DELETE");
    }

    impl std::convert::From<std::string::String> for MethodType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// Allow or deny type.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct ActionType(std::borrow::Cow<'static, str>);

    impl ActionType {
        /// Creates a new ActionType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [ActionType](ActionType)
    pub mod action_type {
        use super::ActionType;

        /// Unspecified. Results in an error.
        pub const ACTION_TYPE_UNSPECIFIED: ActionType = ActionType::new("ACTION_TYPE_UNSPECIFIED");

        /// Allowed action type.
        pub const ALLOW: ActionType = ActionType::new("ALLOW");

        /// Deny action type.
        pub const DENY: ActionType = ActionType::new("DENY");
    }

    impl std::convert::From<std::string::String> for ActionType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Message for Org Policy Canned Constraint.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OrgPolicyConstraint {
    /// Required. Org Policy Canned Constraint id.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub canned_constraint_id: std::string::String,

    /// Required. Org PolicySpec rules.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub policy_rules: std::vec::Vec<crate::model::PolicyRule>,
}

impl OrgPolicyConstraint {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [canned_constraint_id][crate::model::OrgPolicyConstraint::canned_constraint_id].
    pub fn set_canned_constraint_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.canned_constraint_id = v.into();
        self
    }

    /// Sets the value of [policy_rules][crate::model::OrgPolicyConstraint::policy_rules].
    pub fn set_policy_rules<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::PolicyRule>,
    {
        use std::iter::Iterator;
        self.policy_rules = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for OrgPolicyConstraint {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.OrgPolicyConstraint"
    }
}

/// Message for Org Policy Custom Constraint.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OrgPolicyConstraintCustom {
    /// Required. Org Policy Custom Constraint.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub custom_constraint: std::option::Option<crate::model::CustomConstraint>,

    /// Required. Org Policyspec rules.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub policy_rules: std::vec::Vec<crate::model::PolicyRule>,
}

impl OrgPolicyConstraintCustom {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [custom_constraint][crate::model::OrgPolicyConstraintCustom::custom_constraint].
    pub fn set_custom_constraint<
        T: std::convert::Into<std::option::Option<crate::model::CustomConstraint>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.custom_constraint = v.into();
        self
    }

    /// Sets the value of [policy_rules][crate::model::OrgPolicyConstraintCustom::policy_rules].
    pub fn set_policy_rules<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::PolicyRule>,
    {
        use std::iter::Iterator;
        self.policy_rules = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for OrgPolicyConstraintCustom {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.OrgPolicyConstraintCustom"
    }
}

/// Represents the metadata of the long-running operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Output only. Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Output only. Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_message: std::string::String,

    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have been cancelled successfully
    /// have [Operation.error][] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    ///
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub requested_cancellation: bool,

    /// Output only. API version used to start the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,

    /// Output only. This is a output only optional field which will be filled only
    /// in cases where PostureDeployments enter failure states like UPDATE_FAILED
    /// or CREATE_FAILED or DELETE_FAILED.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub error_message: std::string::String,
}

impl OperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::OperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::OperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::OperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_message][crate::model::OperationMetadata::status_message].
    pub fn set_status_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_message = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::OperationMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::OperationMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }

    /// Sets the value of [error_message][crate::model::OperationMetadata::error_message].
    pub fn set_error_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.error_message = v.into();
        self
    }
}

impl wkt::message::Message for OperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.OperationMetadata"
    }
}

/// Postures
/// Definition of a Posture.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Posture {
    /// Required. Identifier. The name of this Posture resource, in the format of
    /// organizations/{org_id}/locations/{location_id}/postures/{posture}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. State of Posture resource.
    pub state: crate::model::posture::State,

    /// Output only. Immutable. The revision ID of the posture.
    /// The format is an 8-character hexadecimal string.
    /// <https://google.aip.dev/162>
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub revision_id: std::string::String,

    /// Output only. The timestamp that the posture was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The timestamp that the posture was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. User provided description of the posture.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Required. List of Policy sets.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub policy_sets: std::vec::Vec<crate::model::PolicySet>,

    /// Optional. An opaque tag indicating the current version of the Posture, used
    /// for concurrency control. When the `Posture` is returned from either a
    /// `GetPosture` or a `ListPostures` request, this `etag` indicates the version
    /// of the current `Posture` to use when executing a read-modify-write loop.
    ///
    /// When the `Posture` is used in a `UpdatePosture` method, use the `etag`
    /// value that was returned from a `GetPosture` request as part of a
    /// read-modify-write loop for concurrency control. Not setting the `etag` in a
    /// `UpdatePosture` request will result in an unconditional write of the
    /// `Posture`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,

    /// Optional. User annotations. These attributes can only be set and used by
    /// the user, and not by Google Security Postures.
    /// .
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub annotations: std::collections::HashMap<std::string::String, std::string::String>,

    /// Output only. Whether or not this Posture is in the process of being
    /// updated.
    pub reconciling: bool,
}

impl Posture {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Posture::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Posture::state].
    pub fn set_state<T: std::convert::Into<crate::model::posture::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [revision_id][crate::model::Posture::revision_id].
    pub fn set_revision_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.revision_id = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Posture::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Posture::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Posture::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::Posture::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of [reconciling][crate::model::Posture::reconciling].
    pub fn set_reconciling<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.reconciling = v.into();
        self
    }

    /// Sets the value of [policy_sets][crate::model::Posture::policy_sets].
    pub fn set_policy_sets<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::PolicySet>,
    {
        use std::iter::Iterator;
        self.policy_sets = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [annotations][crate::model::Posture::annotations].
    pub fn set_annotations<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.annotations = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Posture {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.Posture"
    }
}

/// Defines additional types related to Posture
pub mod posture {
    #[allow(unused_imports)]
    use super::*;

    /// State of a Posture.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(std::borrow::Cow<'static, str>);

    impl State {
        /// Creates a new State instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [State](State)
    pub mod state {
        use super::State;

        /// Unspecified operation state.
        pub const STATE_UNSPECIFIED: State = State::new("STATE_UNSPECIFIED");

        /// The Posture is marked deprecated when it is not in use by the user.
        pub const DEPRECATED: State = State::new("DEPRECATED");

        /// The Posture is created successfully but is not yet ready for usage.
        pub const DRAFT: State = State::new("DRAFT");

        /// The Posture state is active. Ready for use/deployments.
        pub const ACTIVE: State = State::new("ACTIVE");
    }

    impl std::convert::From<std::string::String> for State {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// PolicySet representation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PolicySet {
    /// Required. ID of the Policy set.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub policy_set_id: std::string::String,

    /// Optional. Description of the Policy set.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Required. List of policies.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub policies: std::vec::Vec<crate::model::Policy>,
}

impl PolicySet {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [policy_set_id][crate::model::PolicySet::policy_set_id].
    pub fn set_policy_set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.policy_set_id = v.into();
        self
    }

    /// Sets the value of [description][crate::model::PolicySet::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [policies][crate::model::PolicySet::policies].
    pub fn set_policies<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Policy>,
    {
        use std::iter::Iterator;
        self.policies = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for PolicySet {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.PolicySet"
    }
}

/// Policy representation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Policy {
    /// Required. ID of the Policy that is user generated, immutable and unique
    /// within the scope of a policy set.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub policy_id: std::string::String,

    /// Optional. Contains list of mapping for a Policy to a standard and control.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub compliance_standards: std::vec::Vec<crate::model::policy::ComplianceStandard>,

    /// Required. Constraint details.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub constraint: std::option::Option<crate::model::Constraint>,

    /// Optional. Description of the Policy.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,
}

impl Policy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [policy_id][crate::model::Policy::policy_id].
    pub fn set_policy_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.policy_id = v.into();
        self
    }

    /// Sets the value of [constraint][crate::model::Policy::constraint].
    pub fn set_constraint<T: std::convert::Into<std::option::Option<crate::model::Constraint>>>(
        mut self,
        v: T,
    ) -> Self {
        self.constraint = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Policy::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [compliance_standards][crate::model::Policy::compliance_standards].
    pub fn set_compliance_standards<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::policy::ComplianceStandard>,
    {
        use std::iter::Iterator;
        self.compliance_standards = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Policy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.Policy"
    }
}

/// Defines additional types related to Policy
pub mod policy {
    #[allow(unused_imports)]
    use super::*;

    /// Mapping for a Policy to standard and control.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ComplianceStandard {
        /// Optional. The compliance standard that the Policy maps to, e.g.: CIS-2.0.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub standard: std::string::String,

        /// Optional. Control mapping provided by user for this Policy. e.g.: 1.5.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub control: std::string::String,
    }

    impl ComplianceStandard {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [standard][crate::model::policy::ComplianceStandard::standard].
        pub fn set_standard<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.standard = v.into();
            self
        }

        /// Sets the value of [control][crate::model::policy::ComplianceStandard::control].
        pub fn set_control<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.control = v.into();
            self
        }
    }

    impl wkt::message::Message for ComplianceStandard {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securityposture.v1.Policy.ComplianceStandard"
        }
    }
}

/// Representation of a Constraint.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Constraint {
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub implementation: std::option::Option<crate::model::constraint::Implementation>,
}

impl Constraint {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of `implementation`.
    pub fn set_implementation<
        T: std::convert::Into<std::option::Option<crate::model::constraint::Implementation>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.implementation = v.into();
        self
    }

    /// The value of [implementation][crate::model::Constraint::implementation]
    /// if it holds a `SecurityHealthAnalyticsModule`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_security_health_analytics_module(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::SecurityHealthAnalyticsModule>> {
        #[allow(unreachable_patterns)]
        self.implementation.as_ref().and_then(|v| match v {
            crate::model::constraint::Implementation::SecurityHealthAnalyticsModule(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [implementation][crate::model::Constraint::implementation]
    /// if it holds a `SecurityHealthAnalyticsCustomModule`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_security_health_analytics_custom_module(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::SecurityHealthAnalyticsCustomModule>>
    {
        #[allow(unreachable_patterns)]
        self.implementation.as_ref().and_then(|v| match v {
            crate::model::constraint::Implementation::SecurityHealthAnalyticsCustomModule(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [implementation][crate::model::Constraint::implementation]
    /// if it holds a `OrgPolicyConstraint`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_org_policy_constraint(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::OrgPolicyConstraint>> {
        #[allow(unreachable_patterns)]
        self.implementation.as_ref().and_then(|v| match v {
            crate::model::constraint::Implementation::OrgPolicyConstraint(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [implementation][crate::model::Constraint::implementation]
    /// if it holds a `OrgPolicyConstraintCustom`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_org_policy_constraint_custom(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::OrgPolicyConstraintCustom>> {
        #[allow(unreachable_patterns)]
        self.implementation.as_ref().and_then(|v| match v {
            crate::model::constraint::Implementation::OrgPolicyConstraintCustom(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [implementation][crate::model::Constraint::implementation]
    /// to hold a `SecurityHealthAnalyticsModule`.
    ///
    /// Note that all the setters affecting `implementation` are
    /// mutually exclusive.
    pub fn set_security_health_analytics_module<
        T: std::convert::Into<std::boxed::Box<crate::model::SecurityHealthAnalyticsModule>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.implementation = std::option::Option::Some(
            crate::model::constraint::Implementation::SecurityHealthAnalyticsModule(v.into()),
        );
        self
    }

    /// Sets the value of [implementation][crate::model::Constraint::implementation]
    /// to hold a `SecurityHealthAnalyticsCustomModule`.
    ///
    /// Note that all the setters affecting `implementation` are
    /// mutually exclusive.
    pub fn set_security_health_analytics_custom_module<
        T: std::convert::Into<std::boxed::Box<crate::model::SecurityHealthAnalyticsCustomModule>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.implementation = std::option::Option::Some(
            crate::model::constraint::Implementation::SecurityHealthAnalyticsCustomModule(v.into()),
        );
        self
    }

    /// Sets the value of [implementation][crate::model::Constraint::implementation]
    /// to hold a `OrgPolicyConstraint`.
    ///
    /// Note that all the setters affecting `implementation` are
    /// mutually exclusive.
    pub fn set_org_policy_constraint<
        T: std::convert::Into<std::boxed::Box<crate::model::OrgPolicyConstraint>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.implementation = std::option::Option::Some(
            crate::model::constraint::Implementation::OrgPolicyConstraint(v.into()),
        );
        self
    }

    /// Sets the value of [implementation][crate::model::Constraint::implementation]
    /// to hold a `OrgPolicyConstraintCustom`.
    ///
    /// Note that all the setters affecting `implementation` are
    /// mutually exclusive.
    pub fn set_org_policy_constraint_custom<
        T: std::convert::Into<std::boxed::Box<crate::model::OrgPolicyConstraintCustom>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.implementation = std::option::Option::Some(
            crate::model::constraint::Implementation::OrgPolicyConstraintCustom(v.into()),
        );
        self
    }
}

impl wkt::message::Message for Constraint {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.Constraint"
    }
}

/// Defines additional types related to Constraint
pub mod constraint {
    #[allow(unused_imports)]
    use super::*;

    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Implementation {
        /// Optional. SHA built-in detector.
        SecurityHealthAnalyticsModule(std::boxed::Box<crate::model::SecurityHealthAnalyticsModule>),
        /// Optional. SHA custom detector.
        SecurityHealthAnalyticsCustomModule(
            std::boxed::Box<crate::model::SecurityHealthAnalyticsCustomModule>,
        ),
        /// Optional. Org Policy builtin constraint.
        OrgPolicyConstraint(std::boxed::Box<crate::model::OrgPolicyConstraint>),
        /// Optional. Org Policy custom constraint.
        OrgPolicyConstraintCustom(std::boxed::Box<crate::model::OrgPolicyConstraintCustom>),
    }
}

/// Message for requesting list of Postures.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListPosturesRequest {
    /// Required. Parent value for ListPosturesRequest.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Requested page size. Server may return fewer items than requested.
    /// If unspecified, server will pick an appropriate default.
    pub page_size: i32,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListPosturesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListPosturesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListPosturesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListPosturesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListPosturesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.ListPosturesRequest"
    }
}

/// Message for response to listing Postures.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListPosturesResponse {
    /// The list of Posture.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub postures: std::vec::Vec<crate::model::Posture>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Unreachable resources.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListPosturesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListPosturesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [postures][crate::model::ListPosturesResponse::postures].
    pub fn set_postures<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Posture>,
    {
        use std::iter::Iterator;
        self.postures = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListPosturesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListPosturesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.ListPosturesResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListPosturesResponse {
    type PageItem = crate::model::Posture;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.postures
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Message for requesting list of Posture revisions.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListPostureRevisionsRequest {
    /// Required. Name value for ListPostureRevisionsRequest.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick 100 as default.
    pub page_size: i32,

    /// Optional. A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListPostureRevisionsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ListPostureRevisionsRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListPostureRevisionsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListPostureRevisionsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListPostureRevisionsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.ListPostureRevisionsRequest"
    }
}

/// Message for response to listing PostureRevisions.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListPostureRevisionsResponse {
    /// The list of Posture revisions.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub revisions: std::vec::Vec<crate::model::Posture>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListPostureRevisionsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListPostureRevisionsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [revisions][crate::model::ListPostureRevisionsResponse::revisions].
    pub fn set_revisions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Posture>,
    {
        use std::iter::Iterator;
        self.revisions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListPostureRevisionsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.ListPostureRevisionsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListPostureRevisionsResponse {
    type PageItem = crate::model::Posture;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.revisions
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Message for getting a Posture.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetPostureRequest {
    /// Required. Name of the resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. Posture revision which needs to be retrieved.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub revision_id: std::string::String,
}

impl GetPostureRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetPostureRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [revision_id][crate::model::GetPostureRequest::revision_id].
    pub fn set_revision_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.revision_id = v.into();
        self
    }
}

impl wkt::message::Message for GetPostureRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.GetPostureRequest"
    }
}

/// Message for creating a Posture.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreatePostureRequest {
    /// Required. Value for parent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. User provided identifier. It should be unique in scope of an
    /// Organization and location.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub posture_id: std::string::String,

    /// Required. The resource being created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub posture: std::option::Option<crate::model::Posture>,
}

impl CreatePostureRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreatePostureRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [posture_id][crate::model::CreatePostureRequest::posture_id].
    pub fn set_posture_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.posture_id = v.into();
        self
    }

    /// Sets the value of [posture][crate::model::CreatePostureRequest::posture].
    pub fn set_posture<T: std::convert::Into<std::option::Option<crate::model::Posture>>>(
        mut self,
        v: T,
    ) -> Self {
        self.posture = v.into();
        self
    }
}

impl wkt::message::Message for CreatePostureRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.CreatePostureRequest"
    }
}

/// Message for updating a Posture.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdatePostureRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// Posture resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The resource being updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub posture: std::option::Option<crate::model::Posture>,

    /// Required. Posture revision which needs to be updated.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub revision_id: std::string::String,
}

impl UpdatePostureRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdatePostureRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [posture][crate::model::UpdatePostureRequest::posture].
    pub fn set_posture<T: std::convert::Into<std::option::Option<crate::model::Posture>>>(
        mut self,
        v: T,
    ) -> Self {
        self.posture = v.into();
        self
    }

    /// Sets the value of [revision_id][crate::model::UpdatePostureRequest::revision_id].
    pub fn set_revision_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.revision_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdatePostureRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.UpdatePostureRequest"
    }
}

/// Message for deleting a Posture.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeletePostureRequest {
    /// Required. Name of the resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. Etag value of the Posture to be deleted.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,
}

impl DeletePostureRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeletePostureRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::DeletePostureRequest::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }
}

impl wkt::message::Message for DeletePostureRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.DeletePostureRequest"
    }
}

/// Message for extracting existing policies on a workload as a Posture.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExtractPostureRequest {
    /// Required. The parent resource name. The format of this value is as follows:
    /// `organizations/{organization}/locations/{location}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. User provided identifier. It should be unique in scope of an
    /// Organization and location.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub posture_id: std::string::String,

    /// Required. Workload from which the policies are to be extracted, it should
    /// belong to the same organization defined in parent. The format of this value
    /// varies depending on the scope of the request:
    ///
    /// - `folder/folderNumber`
    /// - `project/projectNumber`
    /// - `organization/organizationNumber`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub workload: std::string::String,
}

impl ExtractPostureRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ExtractPostureRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [posture_id][crate::model::ExtractPostureRequest::posture_id].
    pub fn set_posture_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.posture_id = v.into();
        self
    }

    /// Sets the value of [workload][crate::model::ExtractPostureRequest::workload].
    pub fn set_workload<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.workload = v.into();
        self
    }
}

impl wkt::message::Message for ExtractPostureRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.ExtractPostureRequest"
    }
}

/// ========================== PostureDeployments ==========================
/// Message describing PostureDeployment resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PostureDeployment {
    /// Required. The name of this PostureDeployment resource, in the format of
    /// organizations/{organization}/locations/{location_id}/postureDeployments/{postureDeployment}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Target resource where the Posture will be deployed. Currently
    /// supported resources are of types: projects/projectNumber,
    /// folders/folderNumber, organizations/organizationNumber.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_resource: std::string::String,

    /// Output only. State of PostureDeployment resource.
    pub state: crate::model::posture_deployment::State,

    /// Required. Posture that needs to be deployed.
    /// Format:
    /// organizations/{org_id}/locations/{location_id}/postures/\<posture\>
    /// Example:
    /// organizations/99/locations/global/postures/les-miserables.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub posture_id: std::string::String,

    /// Required. Revision_id of the Posture that is to be deployed.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub posture_revision_id: std::string::String,

    /// Output only. The timestamp that the PostureDeployment was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The timestamp that the PostureDeployment was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. User provided description of the PostureDeployment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. An opaque tag indicating the current version of the
    /// PostureDeployment, used for concurrency control. When the
    /// `PostureDeployment` is returned from either a `GetPostureDeployment` or a
    /// `ListPostureDeployments` request, this `etag` indicates the version of the
    /// current `PostureDeployment` to use when executing a read-modify-write loop.
    ///
    /// When the `PostureDeployment` is used in a `UpdatePostureDeployment` method,
    /// use the `etag` value that was returned from a `GetPostureDeployment`
    /// request as part of a read-modify-write loop for concurrency control. Not
    /// setting the `etag` in a `UpdatePostureDeployment` request will result in an
    /// unconditional write of the `PostureDeployment`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,

    /// Optional. User annotations. These attributes can only be set and used by
    /// the user, and not by Google Security Postures.
    /// .
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub annotations: std::collections::HashMap<std::string::String, std::string::String>,

    /// Output only. Whether or not this Posture is in the process of being
    /// updated.
    pub reconciling: bool,

    /// Output only. This is a output only optional field which will be filled in
    /// case where PostureDeployment state is UPDATE_FAILED or CREATE_FAILED or
    /// DELETE_FAILED. It denotes the desired Posture.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub desired_posture_id: std::string::String,

    /// Output only. Output only optional field which provides revision_id of the
    /// desired_posture_id.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub desired_posture_revision_id: std::string::String,

    /// Output only. This is a output only optional field which will be filled in
    /// case where PostureDeployment enters a failure state like UPDATE_FAILED or
    /// CREATE_FAILED or DELETE_FAILED.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub failure_message: std::string::String,
}

impl PostureDeployment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::PostureDeployment::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [target_resource][crate::model::PostureDeployment::target_resource].
    pub fn set_target_resource<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_resource = v.into();
        self
    }

    /// Sets the value of [state][crate::model::PostureDeployment::state].
    pub fn set_state<T: std::convert::Into<crate::model::posture_deployment::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [posture_id][crate::model::PostureDeployment::posture_id].
    pub fn set_posture_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.posture_id = v.into();
        self
    }

    /// Sets the value of [posture_revision_id][crate::model::PostureDeployment::posture_revision_id].
    pub fn set_posture_revision_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.posture_revision_id = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::PostureDeployment::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::PostureDeployment::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::PostureDeployment::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::PostureDeployment::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of [reconciling][crate::model::PostureDeployment::reconciling].
    pub fn set_reconciling<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.reconciling = v.into();
        self
    }

    /// Sets the value of [desired_posture_id][crate::model::PostureDeployment::desired_posture_id].
    pub fn set_desired_posture_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.desired_posture_id = v.into();
        self
    }

    /// Sets the value of [desired_posture_revision_id][crate::model::PostureDeployment::desired_posture_revision_id].
    pub fn set_desired_posture_revision_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.desired_posture_revision_id = v.into();
        self
    }

    /// Sets the value of [failure_message][crate::model::PostureDeployment::failure_message].
    pub fn set_failure_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.failure_message = v.into();
        self
    }

    /// Sets the value of [annotations][crate::model::PostureDeployment::annotations].
    pub fn set_annotations<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.annotations = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for PostureDeployment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.PostureDeployment"
    }
}

/// Defines additional types related to PostureDeployment
pub mod posture_deployment {
    #[allow(unused_imports)]
    use super::*;

    /// State of a PostureDeployment.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(std::borrow::Cow<'static, str>);

    impl State {
        /// Creates a new State instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [State](State)
    pub mod state {
        use super::State;

        /// Unspecified operation state.
        pub const STATE_UNSPECIFIED: State = State::new("STATE_UNSPECIFIED");

        /// The PostureDeployment is being created.
        pub const CREATING: State = State::new("CREATING");

        /// The PostureDeployment is being deleted.
        pub const DELETING: State = State::new("DELETING");

        /// The PostureDeployment state is being updated.
        pub const UPDATING: State = State::new("UPDATING");

        /// The PostureDeployment state is active and in use.
        pub const ACTIVE: State = State::new("ACTIVE");

        /// The PostureDeployment creation failed.
        pub const CREATE_FAILED: State = State::new("CREATE_FAILED");

        /// The PostureDeployment update failed.
        pub const UPDATE_FAILED: State = State::new("UPDATE_FAILED");

        /// The PostureDeployment deletion failed.
        pub const DELETE_FAILED: State = State::new("DELETE_FAILED");
    }

    impl std::convert::From<std::string::String> for State {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Message for requesting list of PostureDeployments.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListPostureDeploymentsRequest {
    /// Required. Parent value for ListPostureDeploymentsRequest.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    pub page_size: i32,

    /// Optional. A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Filter to be applied on the resource, defined by EBNF grammar
    /// <https://google.aip.dev/assets/misc/ebnf-filtering.txt>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,
}

impl ListPostureDeploymentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListPostureDeploymentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListPostureDeploymentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListPostureDeploymentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListPostureDeploymentsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }
}

impl wkt::message::Message for ListPostureDeploymentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.ListPostureDeploymentsRequest"
    }
}

/// Message for response to listing PostureDeployments.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListPostureDeploymentsResponse {
    /// The list of PostureDeployment.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub posture_deployments: std::vec::Vec<crate::model::PostureDeployment>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListPostureDeploymentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListPostureDeploymentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [posture_deployments][crate::model::ListPostureDeploymentsResponse::posture_deployments].
    pub fn set_posture_deployments<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::PostureDeployment>,
    {
        use std::iter::Iterator;
        self.posture_deployments = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListPostureDeploymentsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListPostureDeploymentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.ListPostureDeploymentsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListPostureDeploymentsResponse {
    type PageItem = crate::model::PostureDeployment;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.posture_deployments
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Message for getting a PostureDeployment.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetPostureDeploymentRequest {
    /// Required. Name of the resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetPostureDeploymentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetPostureDeploymentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetPostureDeploymentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.GetPostureDeploymentRequest"
    }
}

/// Message for creating a PostureDeployment.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreatePostureDeploymentRequest {
    /// Required. Value for parent.
    /// Format: organizations/{org_id}/locations/{location}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. User provided identifier. It should be unique in scope of an
    /// Organization and location.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub posture_deployment_id: std::string::String,

    /// Required. The resource being created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub posture_deployment: std::option::Option<crate::model::PostureDeployment>,
}

impl CreatePostureDeploymentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreatePostureDeploymentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [posture_deployment_id][crate::model::CreatePostureDeploymentRequest::posture_deployment_id].
    pub fn set_posture_deployment_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.posture_deployment_id = v.into();
        self
    }

    /// Sets the value of [posture_deployment][crate::model::CreatePostureDeploymentRequest::posture_deployment].
    pub fn set_posture_deployment<
        T: std::convert::Into<std::option::Option<crate::model::PostureDeployment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.posture_deployment = v.into();
        self
    }
}

impl wkt::message::Message for CreatePostureDeploymentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.CreatePostureDeploymentRequest"
    }
}

/// Message for updating a PostureDeployment.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdatePostureDeploymentRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// PostureDeployment resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The resource being updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub posture_deployment: std::option::Option<crate::model::PostureDeployment>,
}

impl UpdatePostureDeploymentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdatePostureDeploymentRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [posture_deployment][crate::model::UpdatePostureDeploymentRequest::posture_deployment].
    pub fn set_posture_deployment<
        T: std::convert::Into<std::option::Option<crate::model::PostureDeployment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.posture_deployment = v.into();
        self
    }
}

impl wkt::message::Message for UpdatePostureDeploymentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.UpdatePostureDeploymentRequest"
    }
}

/// Message for deleting a PostureDeployment.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeletePostureDeploymentRequest {
    /// Required. Name of the resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. Etag value of the PostureDeployment to be deleted.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,
}

impl DeletePostureDeploymentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeletePostureDeploymentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::DeletePostureDeploymentRequest::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }
}

impl wkt::message::Message for DeletePostureDeploymentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.DeletePostureDeploymentRequest"
    }
}

/// PostureTemplates
/// Message describing PostureTemplate object.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PostureTemplate {
    /// Output only. Identifier. The name of the Posture template will be of the
    /// format
    /// organizations/{organization}/locations/{location}/postureTemplates/{postureTemplate}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The revision_id of a PostureTemplate.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub revision_id: std::string::String,

    /// Output only. Description of the Posture template.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. State of PostureTemplate resource.
    pub state: crate::model::posture_template::State,

    /// Output only. Policy_sets to be used by the user.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub policy_sets: std::vec::Vec<crate::model::PolicySet>,
}

impl PostureTemplate {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::PostureTemplate::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [revision_id][crate::model::PostureTemplate::revision_id].
    pub fn set_revision_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.revision_id = v.into();
        self
    }

    /// Sets the value of [description][crate::model::PostureTemplate::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [state][crate::model::PostureTemplate::state].
    pub fn set_state<T: std::convert::Into<crate::model::posture_template::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [policy_sets][crate::model::PostureTemplate::policy_sets].
    pub fn set_policy_sets<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::PolicySet>,
    {
        use std::iter::Iterator;
        self.policy_sets = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for PostureTemplate {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.PostureTemplate"
    }
}

/// Defines additional types related to PostureTemplate
pub mod posture_template {
    #[allow(unused_imports)]
    use super::*;

    /// State of a PostureTemplate
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(std::borrow::Cow<'static, str>);

    impl State {
        /// Creates a new State instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [State](State)
    pub mod state {
        use super::State;

        /// Unspecified state
        pub const STATE_UNSPECIFIED: State = State::new("STATE_UNSPECIFIED");

        /// If the Posture template is adhering to the latest controls and standards.
        pub const ACTIVE: State = State::new("ACTIVE");

        /// If the Posture template controls and standards are outdated and not
        /// recommended for use.
        pub const DEPRECATED: State = State::new("DEPRECATED");
    }

    impl std::convert::From<std::string::String> for State {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Message for requesting list of Posture Templates.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListPostureTemplatesRequest {
    /// Required. Parent value for ListPostureTemplatesRequest.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    pub page_size: i32,

    /// Optional. A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Filter to be applied on the resource, defined by EBNF grammar
    /// <https://google.aip.dev/assets/misc/ebnf-filtering.txt>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,
}

impl ListPostureTemplatesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListPostureTemplatesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListPostureTemplatesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListPostureTemplatesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListPostureTemplatesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }
}

impl wkt::message::Message for ListPostureTemplatesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.ListPostureTemplatesRequest"
    }
}

/// Message for response to listing PostureTemplates.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListPostureTemplatesResponse {
    /// The list of PostureTemplate.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub posture_templates: std::vec::Vec<crate::model::PostureTemplate>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListPostureTemplatesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListPostureTemplatesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [posture_templates][crate::model::ListPostureTemplatesResponse::posture_templates].
    pub fn set_posture_templates<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::PostureTemplate>,
    {
        use std::iter::Iterator;
        self.posture_templates = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListPostureTemplatesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.ListPostureTemplatesResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListPostureTemplatesResponse {
    type PageItem = crate::model::PostureTemplate;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.posture_templates
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Message for getting a Posture Template.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetPostureTemplateRequest {
    /// Required. Name of the resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. Specific revision_id of a Posture Template.
    /// PostureTemplate revision_id which needs to be retrieved.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub revision_id: std::string::String,
}

impl GetPostureTemplateRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetPostureTemplateRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [revision_id][crate::model::GetPostureTemplateRequest::revision_id].
    pub fn set_revision_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.revision_id = v.into();
        self
    }
}

impl wkt::message::Message for GetPostureTemplateRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.GetPostureTemplateRequest"
    }
}

/// Message for Security Health Analytics built-in detector.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SecurityHealthAnalyticsModule {
    /// Required. The name of the module eg: BIGQUERY_TABLE_CMEK_DISABLED.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub module_name: std::string::String,

    /// The state of enablement for the module at its level of the resource
    /// hierarchy.
    pub module_enablement_state: crate::model::EnablementState,
}

impl SecurityHealthAnalyticsModule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [module_name][crate::model::SecurityHealthAnalyticsModule::module_name].
    pub fn set_module_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.module_name = v.into();
        self
    }

    /// Sets the value of [module_enablement_state][crate::model::SecurityHealthAnalyticsModule::module_enablement_state].
    pub fn set_module_enablement_state<T: std::convert::Into<crate::model::EnablementState>>(
        mut self,
        v: T,
    ) -> Self {
        self.module_enablement_state = v.into();
        self
    }
}

impl wkt::message::Message for SecurityHealthAnalyticsModule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.SecurityHealthAnalyticsModule"
    }
}

/// Message for SHA Custom Module
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SecurityHealthAnalyticsCustomModule {
    /// Output only. Immutable. The id of the custom module.
    /// The id is server-generated and is not user settable.
    /// It will be a numeric id containing 1-20 digits.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,

    /// Optional. The display name of the Security Health Analytics custom module.
    /// This display name becomes the finding category for all findings that are
    /// returned by this custom module. The display name must be between 1 and
    /// 128 characters, start with a lowercase letter, and contain alphanumeric
    /// characters or underscores only.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Required. custom module details
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub config: std::option::Option<crate::model::CustomConfig>,

    /// The state of enablement for the module at its level of the resource
    /// hierarchy.
    pub module_enablement_state: crate::model::EnablementState,
}

impl SecurityHealthAnalyticsCustomModule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [id][crate::model::SecurityHealthAnalyticsCustomModule::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::SecurityHealthAnalyticsCustomModule::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [config][crate::model::SecurityHealthAnalyticsCustomModule::config].
    pub fn set_config<T: std::convert::Into<std::option::Option<crate::model::CustomConfig>>>(
        mut self,
        v: T,
    ) -> Self {
        self.config = v.into();
        self
    }

    /// Sets the value of [module_enablement_state][crate::model::SecurityHealthAnalyticsCustomModule::module_enablement_state].
    pub fn set_module_enablement_state<T: std::convert::Into<crate::model::EnablementState>>(
        mut self,
        v: T,
    ) -> Self {
        self.module_enablement_state = v.into();
        self
    }
}

impl wkt::message::Message for SecurityHealthAnalyticsCustomModule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.SecurityHealthAnalyticsCustomModule"
    }
}

/// Defines the properties in a custom module configuration for Security
/// Health Analytics. Use the custom module configuration to create custom
/// detectors that generate custom findings for resources that you specify.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CustomConfig {
    /// Required. The CEL expression to evaluate to produce findings. When the
    /// expression evaluates to true against a resource, a finding is generated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub predicate: std::option::Option<gtype::model::Expr>,

    /// Optional. Custom output properties.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub custom_output: std::option::Option<crate::model::custom_config::CustomOutputSpec>,

    /// Required. The resource types that the custom module operates on. Each
    /// custom module can specify up to 5 resource types.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub resource_selector: std::option::Option<crate::model::custom_config::ResourceSelector>,

    /// Required. The severity to assign to findings generated by the module.
    pub severity: crate::model::custom_config::Severity,

    /// Optional. Text that describes the vulnerability or misconfiguration that
    /// the custom module detects. This explanation is returned with each finding
    /// instance to help investigators understand the detected issue. The text must
    /// be enclosed in quotation marks.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. An explanation of the recommended steps that security teams can
    /// take to resolve the detected issue. This explanation is returned with each
    /// finding generated by this module in the `nextSteps` property of the finding
    /// JSON.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub recommendation: std::string::String,
}

impl CustomConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [predicate][crate::model::CustomConfig::predicate].
    pub fn set_predicate<T: std::convert::Into<std::option::Option<gtype::model::Expr>>>(
        mut self,
        v: T,
    ) -> Self {
        self.predicate = v.into();
        self
    }

    /// Sets the value of [custom_output][crate::model::CustomConfig::custom_output].
    pub fn set_custom_output<
        T: std::convert::Into<std::option::Option<crate::model::custom_config::CustomOutputSpec>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.custom_output = v.into();
        self
    }

    /// Sets the value of [resource_selector][crate::model::CustomConfig::resource_selector].
    pub fn set_resource_selector<
        T: std::convert::Into<std::option::Option<crate::model::custom_config::ResourceSelector>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_selector = v.into();
        self
    }

    /// Sets the value of [severity][crate::model::CustomConfig::severity].
    pub fn set_severity<T: std::convert::Into<crate::model::custom_config::Severity>>(
        mut self,
        v: T,
    ) -> Self {
        self.severity = v.into();
        self
    }

    /// Sets the value of [description][crate::model::CustomConfig::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [recommendation][crate::model::CustomConfig::recommendation].
    pub fn set_recommendation<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.recommendation = v.into();
        self
    }
}

impl wkt::message::Message for CustomConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securityposture.v1.CustomConfig"
    }
}

/// Defines additional types related to CustomConfig
pub mod custom_config {
    #[allow(unused_imports)]
    use super::*;

    /// A set of optional name-value pairs that define custom source properties to
    /// return with each finding that is generated by the custom module. The custom
    /// source properties that are defined here are included in the finding JSON
    /// under `sourceProperties`.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct CustomOutputSpec {
        /// Optional. A list of custom output properties to add to the finding.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub properties: std::vec::Vec<crate::model::custom_config::custom_output_spec::Property>,
    }

    impl CustomOutputSpec {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [properties][crate::model::custom_config::CustomOutputSpec::properties].
        pub fn set_properties<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::custom_config::custom_output_spec::Property>,
        {
            use std::iter::Iterator;
            self.properties = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for CustomOutputSpec {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securityposture.v1.CustomConfig.CustomOutputSpec"
        }
    }

    /// Defines additional types related to CustomOutputSpec
    pub mod custom_output_spec {
        #[allow(unused_imports)]
        use super::*;

        /// An individual name-value pair that defines a custom source property.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Property {
            /// Required. Name of the property for the custom output.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub name: std::string::String,

            /// Optional. The CEL expression for the custom output. A resource property
            /// can be specified to return the value of the property or a text string
            /// enclosed in quotation marks.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub value_expression: std::option::Option<gtype::model::Expr>,
        }

        impl Property {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [name][crate::model::custom_config::custom_output_spec::Property::name].
            pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.name = v.into();
                self
            }

            /// Sets the value of [value_expression][crate::model::custom_config::custom_output_spec::Property::value_expression].
            pub fn set_value_expression<
                T: std::convert::Into<std::option::Option<gtype::model::Expr>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.value_expression = v.into();
                self
            }
        }

        impl wkt::message::Message for Property {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.securityposture.v1.CustomConfig.CustomOutputSpec.Property"
            }
        }
    }

    /// Resource for selecting resource type.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ResourceSelector {
        /// Required. The resource types to run the detector on.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub resource_types: std::vec::Vec<std::string::String>,
    }

    impl ResourceSelector {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [resource_types][crate::model::custom_config::ResourceSelector::resource_types].
        pub fn set_resource_types<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.resource_types = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for ResourceSelector {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securityposture.v1.CustomConfig.ResourceSelector"
        }
    }

    /// Defines the valid value options for the severity of a finding.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Severity(std::borrow::Cow<'static, str>);

    impl Severity {
        /// Creates a new Severity instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [Severity](Severity)
    pub mod severity {
        use super::Severity;

        /// Unspecified severity.
        pub const SEVERITY_UNSPECIFIED: Severity = Severity::new("SEVERITY_UNSPECIFIED");

        /// Critical severity.
        pub const CRITICAL: Severity = Severity::new("CRITICAL");

        /// High severity.
        pub const HIGH: Severity = Severity::new("HIGH");

        /// Medium severity.
        pub const MEDIUM: Severity = Severity::new("MEDIUM");

        /// Low severity.
        pub const LOW: Severity = Severity::new("LOW");
    }

    impl std::convert::From<std::string::String> for Severity {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Possible enablement states of a service or module.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct EnablementState(std::borrow::Cow<'static, str>);

impl EnablementState {
    /// Creates a new EnablementState instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [EnablementState](EnablementState)
pub mod enablement_state {
    use super::EnablementState;

    /// Default value. This value is unused.
    pub const ENABLEMENT_STATE_UNSPECIFIED: EnablementState =
        EnablementState::new("ENABLEMENT_STATE_UNSPECIFIED");

    /// State is enabled.
    pub const ENABLED: EnablementState = EnablementState::new("ENABLED");

    /// State is disabled.
    pub const DISABLED: EnablementState = EnablementState::new("DISABLED");
}

impl std::convert::From<std::string::String> for EnablementState {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}
