// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Security Posture API.
///
/// # Service Description
///
/// Service describing handlers for resources.
///
/// # Configuration
///
/// `SecurityPosture` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SecurityPosture` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SecurityPosture` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SecurityPosture {
    inner: Arc<dyn crate::stubs::dynamic::SecurityPosture>,
}

impl SecurityPosture {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::SecurityPosture + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::SecurityPosture>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::SecurityPosture> {
        crate::transport::SecurityPosture::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::SecurityPosture> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::SecurityPosture::new)
    }

    /// (-- This option restricts the visibility of the API to only projects that
    /// will
    /// (-- be labeled as `PREVIEW` or `GOOGLE_INTERNAL` by the service.
    /// (-- option (google.api.api_visibility).restriction =
    /// "PREVIEW,GOOGLE_INTERNAL"; Postures Lists Postures in a given organization
    /// and location. In case a posture has multiple revisions, the latest revision
    /// as per UpdateTime will be returned.
    pub fn list_postures(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::ListPostures {
        crate::builders::security_posture::ListPostures::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists revisions of a Posture in a given organization and location.
    pub fn list_posture_revisions(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::ListPostureRevisions {
        crate::builders::security_posture::ListPostureRevisions::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets a posture in a given organization and location.
    /// User must provide revision_id to retrieve a specific revision of the
    /// resource.
    /// NOT_FOUND error is returned if the revision_id or the Posture name does not
    /// exist. In case revision_id is not provided then the latest Posture revision
    /// by UpdateTime is returned.
    pub fn get_posture(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::GetPosture {
        crate::builders::security_posture::GetPosture::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a new Posture resource.
    /// If a Posture with the specified name already exists in the specified
    /// organization and location, the long running operation returns a
    /// [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS] error.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_posture(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::CreatePosture {
        crate::builders::security_posture::CreatePosture::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an existing Posture.
    /// A new revision of the posture will be created if the revision to be
    /// updated is currently deployed on a workload.
    /// Returns a `google.rpc.Status` with `google.rpc.Code.NOT_FOUND` if the
    /// Posture does not exist.
    /// Returns a `google.rpc.Status` with `google.rpc.Code.ABORTED` if the etag
    /// supplied in the request does not match the persisted etag of the Posture.
    /// Updatable fields are state, description and policy_sets.
    /// State update operation cannot be clubbed with update of description and
    /// policy_sets.
    /// An ACTIVE posture can be updated to both DRAFT or DEPRECATED states.
    /// Postures in DRAFT or DEPRECATED states can only be updated to ACTIVE state.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_posture(
        &self,
        posture: impl Into<crate::model::Posture>,
    ) -> crate::builders::security_posture::UpdatePosture {
        crate::builders::security_posture::UpdatePosture::new(self.inner.clone())
            .set_posture(posture.into())
    }

    /// Deletes all the revisions of a resource.
    /// A posture can only be deleted when none of the revisions are deployed to
    /// any workload.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_posture(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::DeletePosture {
        crate::builders::security_posture::DeletePosture::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Extracts existing policies on a workload as a posture.
    /// If a Posture on the given workload already exists, the long running
    /// operation returns a [ALREADY_EXISTS][google.rpc.Code.ALREADY_EXISTS] error.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn extract_posture(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::ExtractPosture {
        crate::builders::security_posture::ExtractPosture::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// PostureDeployments
    /// Lists PostureDeployments in a given project and location.
    pub fn list_posture_deployments(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::ListPostureDeployments {
        crate::builders::security_posture::ListPostureDeployments::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single PostureDeployment.
    pub fn get_posture_deployment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::GetPostureDeployment {
        crate::builders::security_posture::GetPostureDeployment::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new PostureDeployment in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_posture_deployment(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::CreatePostureDeployment {
        crate::builders::security_posture::CreatePostureDeployment::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single PostureDeployment.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_posture_deployment(
        &self,
        posture_deployment: impl Into<crate::model::PostureDeployment>,
    ) -> crate::builders::security_posture::UpdatePostureDeployment {
        crate::builders::security_posture::UpdatePostureDeployment::new(self.inner.clone())
            .set_posture_deployment(posture_deployment.into())
    }

    /// Deletes a single PostureDeployment.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_posture_deployment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::DeletePostureDeployment {
        crate::builders::security_posture::DeletePostureDeployment::new(self.inner.clone())
            .set_name(name.into())
    }

    /// PostureTemplates
    /// Lists all the PostureTemplates available to the user.
    pub fn list_posture_templates(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::ListPostureTemplates {
        crate::builders::security_posture::ListPostureTemplates::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a PostureTemplate.
    /// User must provide revision_id to retrieve a specific revision of the
    /// resource.
    /// NOT_FOUND error is returned if the revision_id or the PostureTemplate name
    /// does not exist. In case revision_id is not provided then the
    /// PostureTemplate with latest revision_id is returned.
    pub fn get_posture_template(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::GetPostureTemplate {
        crate::builders::security_posture::GetPostureTemplate::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::ListLocations {
        crate::builders::security_posture::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::GetLocation {
        crate::builders::security_posture::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::ListOperations {
        crate::builders::security_posture::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::GetOperation {
        crate::builders::security_posture::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::DeleteOperation {
        crate::builders::security_posture::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_posture::CancelOperation {
        crate::builders::security_posture::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
