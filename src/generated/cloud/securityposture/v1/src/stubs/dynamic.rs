// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use std::sync::Arc;

/// A dyn-compatible, crate-private version of [super::SecurityPosture].
#[async_trait::async_trait]
pub trait SecurityPosture: std::fmt::Debug + Send + Sync {
    async fn list_postures(
        &self,
        req: crate::model::ListPosturesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListPosturesResponse>;

    async fn list_posture_revisions(
        &self,
        req: crate::model::ListPostureRevisionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListPostureRevisionsResponse>;

    async fn get_posture(
        &self,
        req: crate::model::GetPostureRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Posture>;

    async fn create_posture(
        &self,
        req: crate::model::CreatePostureRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_posture(
        &self,
        req: crate::model::UpdatePostureRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_posture(
        &self,
        req: crate::model::DeletePostureRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn extract_posture(
        &self,
        req: crate::model::ExtractPostureRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_posture_deployments(
        &self,
        req: crate::model::ListPostureDeploymentsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListPostureDeploymentsResponse>;

    async fn get_posture_deployment(
        &self,
        req: crate::model::GetPostureDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::PostureDeployment>;

    async fn create_posture_deployment(
        &self,
        req: crate::model::CreatePostureDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_posture_deployment(
        &self,
        req: crate::model::UpdatePostureDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_posture_deployment(
        &self,
        req: crate::model::DeletePostureDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_posture_templates(
        &self,
        req: crate::model::ListPostureTemplatesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListPostureTemplatesResponse>;

    async fn get_posture_template(
        &self,
        req: crate::model::GetPostureTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::PostureTemplate>;

    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse>;

    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location>;

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [crate::stubs::SecurityPosture] also implement [SecurityPosture].
#[async_trait::async_trait]
impl<T: crate::stubs::SecurityPosture> SecurityPosture for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn list_postures(
        &self,
        req: crate::model::ListPosturesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListPosturesResponse> {
        T::list_postures(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_posture_revisions(
        &self,
        req: crate::model::ListPostureRevisionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListPostureRevisionsResponse> {
        T::list_posture_revisions(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_posture(
        &self,
        req: crate::model::GetPostureRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Posture> {
        T::get_posture(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_posture(
        &self,
        req: crate::model::CreatePostureRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_posture(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_posture(
        &self,
        req: crate::model::UpdatePostureRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_posture(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_posture(
        &self,
        req: crate::model::DeletePostureRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_posture(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn extract_posture(
        &self,
        req: crate::model::ExtractPostureRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::extract_posture(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_posture_deployments(
        &self,
        req: crate::model::ListPostureDeploymentsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListPostureDeploymentsResponse> {
        T::list_posture_deployments(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_posture_deployment(
        &self,
        req: crate::model::GetPostureDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::PostureDeployment> {
        T::get_posture_deployment(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_posture_deployment(
        &self,
        req: crate::model::CreatePostureDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_posture_deployment(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_posture_deployment(
        &self,
        req: crate::model::UpdatePostureDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_posture_deployment(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_posture_deployment(
        &self,
        req: crate::model::DeletePostureDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_posture_deployment(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_posture_templates(
        &self,
        req: crate::model::ListPostureTemplatesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListPostureTemplatesResponse> {
        T::list_posture_templates(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_posture_template(
        &self,
        req: crate::model::GetPostureTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::PostureTemplate> {
        T::get_posture_template(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse> {
        T::list_locations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location> {
        T::get_location(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::delete_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::cancel_operation(self, req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        T::get_polling_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}
