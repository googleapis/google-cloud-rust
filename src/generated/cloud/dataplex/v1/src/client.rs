// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;

/// Implements a client for the Cloud Dataplex API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_dataplex_v1::client::CatalogService;
/// let client = CatalogService::builder().build().await?;
/// // use `client` to make requests to the Cloud Dataplex API.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// The primary resources offered by this service are EntryGroups, EntryTypes,
/// AspectTypes, and Entries. They collectively let data administrators organize,
/// manage, secure, and catalog data located across cloud projects in their
/// organization in a variety of storage systems, including Cloud Storage and
/// BigQuery.
///
/// # Configuration
///
/// To configure `CatalogService` use the `with_*` methods in the type returned
/// by [builder()][CatalogService::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://dataplex.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::catalog_service::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::catalog_service::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `CatalogService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `CatalogService` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct CatalogService {
    inner: std::sync::Arc<dyn super::stub::dynamic::CatalogService>,
}

impl CatalogService {
    /// Returns a builder for [CatalogService].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_dataplex_v1::client::CatalogService;
    /// let client = CatalogService::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::catalog_service::ClientBuilder {
        gax::client_builder::internal::new_builder(super::builder::catalog_service::client::Factory)
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::CatalogService + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<std::sync::Arc<dyn super::stub::dynamic::CatalogService>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::CatalogService> {
        super::transport::CatalogService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::CatalogService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::CatalogService::new)
    }

    /// Creates an EntryType.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_entry_type(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::CreateEntryType {
        super::builder::catalog_service::CreateEntryType::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an EntryType.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_entry_type(
        &self,
        entry_type: impl Into<crate::model::EntryType>,
    ) -> super::builder::catalog_service::UpdateEntryType {
        super::builder::catalog_service::UpdateEntryType::new(self.inner.clone())
            .set_entry_type(entry_type.into())
    }

    /// Deletes an EntryType.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_entry_type(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::DeleteEntryType {
        super::builder::catalog_service::DeleteEntryType::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists EntryType resources in a project and location.
    pub fn list_entry_types(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::ListEntryTypes {
        super::builder::catalog_service::ListEntryTypes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets an EntryType.
    pub fn get_entry_type(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::GetEntryType {
        super::builder::catalog_service::GetEntryType::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates an AspectType.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_aspect_type(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::CreateAspectType {
        super::builder::catalog_service::CreateAspectType::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an AspectType.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_aspect_type(
        &self,
        aspect_type: impl Into<crate::model::AspectType>,
    ) -> super::builder::catalog_service::UpdateAspectType {
        super::builder::catalog_service::UpdateAspectType::new(self.inner.clone())
            .set_aspect_type(aspect_type.into())
    }

    /// Deletes an AspectType.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_aspect_type(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::DeleteAspectType {
        super::builder::catalog_service::DeleteAspectType::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists AspectType resources in a project and location.
    pub fn list_aspect_types(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::ListAspectTypes {
        super::builder::catalog_service::ListAspectTypes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets an AspectType.
    pub fn get_aspect_type(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::GetAspectType {
        super::builder::catalog_service::GetAspectType::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates an EntryGroup.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_entry_group(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::CreateEntryGroup {
        super::builder::catalog_service::CreateEntryGroup::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an EntryGroup.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_entry_group(
        &self,
        entry_group: impl Into<crate::model::EntryGroup>,
    ) -> super::builder::catalog_service::UpdateEntryGroup {
        super::builder::catalog_service::UpdateEntryGroup::new(self.inner.clone())
            .set_entry_group(entry_group.into())
    }

    /// Deletes an EntryGroup.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_entry_group(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::DeleteEntryGroup {
        super::builder::catalog_service::DeleteEntryGroup::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists EntryGroup resources in a project and location.
    pub fn list_entry_groups(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::ListEntryGroups {
        super::builder::catalog_service::ListEntryGroups::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets an EntryGroup.
    pub fn get_entry_group(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::GetEntryGroup {
        super::builder::catalog_service::GetEntryGroup::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates an Entry.
    pub fn create_entry(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::CreateEntry {
        super::builder::catalog_service::CreateEntry::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an Entry.
    pub fn update_entry(
        &self,
        entry: impl Into<crate::model::Entry>,
    ) -> super::builder::catalog_service::UpdateEntry {
        super::builder::catalog_service::UpdateEntry::new(self.inner.clone())
            .set_entry(entry.into())
    }

    /// Deletes an Entry.
    pub fn delete_entry(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::DeleteEntry {
        super::builder::catalog_service::DeleteEntry::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists Entries within an EntryGroup.
    pub fn list_entries(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::ListEntries {
        super::builder::catalog_service::ListEntries::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets an Entry.
    pub fn get_entry(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::GetEntry {
        super::builder::catalog_service::GetEntry::new(self.inner.clone()).set_name(name.into())
    }

    /// Looks up an entry by name using the permission on the source system.
    pub fn lookup_entry(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::LookupEntry {
        super::builder::catalog_service::LookupEntry::new(self.inner.clone()).set_name(name.into())
    }

    /// Searches for Entries matching the given query and scope.
    pub fn search_entries(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::SearchEntries {
        super::builder::catalog_service::SearchEntries::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a metadata job. For example, use a metadata job to import Dataplex
    /// Catalog entries and aspects from a third-party system into Dataplex.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_metadata_job(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::CreateMetadataJob {
        super::builder::catalog_service::CreateMetadataJob::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a metadata job.
    pub fn get_metadata_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::GetMetadataJob {
        super::builder::catalog_service::GetMetadataJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists metadata jobs.
    pub fn list_metadata_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::ListMetadataJobs {
        super::builder::catalog_service::ListMetadataJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Cancels a metadata job.
    ///
    /// If you cancel a metadata import job that is in progress, the changes in the
    /// job might be partially applied. We recommend that you reset the state of
    /// the entry groups in your project by running another metadata job that
    /// reverts the changes from the canceled job.
    pub fn cancel_metadata_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::CancelMetadataJob {
        super::builder::catalog_service::CancelMetadataJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::ListLocations {
        super::builder::catalog_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::GetLocation {
        super::builder::catalog_service::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::SetIamPolicy {
        super::builder::catalog_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::GetIamPolicy {
        super::builder::catalog_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::TestIamPermissions {
        super::builder::catalog_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::ListOperations {
        super::builder::catalog_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::GetOperation {
        super::builder::catalog_service::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::DeleteOperation {
        super::builder::catalog_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::catalog_service::CancelOperation {
        super::builder::catalog_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Cloud Dataplex API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_dataplex_v1::client::CmekService;
/// let client = CmekService::builder().build().await?;
/// // use `client` to make requests to the Cloud Dataplex API.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// Dataplex Cmek Service
///
/// # Configuration
///
/// To configure `CmekService` use the `with_*` methods in the type returned
/// by [builder()][CmekService::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://dataplex.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::cmek_service::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::cmek_service::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `CmekService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `CmekService` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct CmekService {
    inner: std::sync::Arc<dyn super::stub::dynamic::CmekService>,
}

impl CmekService {
    /// Returns a builder for [CmekService].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_dataplex_v1::client::CmekService;
    /// let client = CmekService::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::cmek_service::ClientBuilder {
        gax::client_builder::internal::new_builder(super::builder::cmek_service::client::Factory)
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::CmekService + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<std::sync::Arc<dyn super::stub::dynamic::CmekService>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::CmekService> {
        super::transport::CmekService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::CmekService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::CmekService::new)
    }

    /// Create an EncryptionConfig.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_encryption_config(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::cmek_service::CreateEncryptionConfig {
        super::builder::cmek_service::CreateEncryptionConfig::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Update an EncryptionConfig.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_encryption_config(
        &self,
        encryption_config: impl Into<crate::model::EncryptionConfig>,
    ) -> super::builder::cmek_service::UpdateEncryptionConfig {
        super::builder::cmek_service::UpdateEncryptionConfig::new(self.inner.clone())
            .set_encryption_config(encryption_config.into())
    }

    /// Delete an EncryptionConfig.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_encryption_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::cmek_service::DeleteEncryptionConfig {
        super::builder::cmek_service::DeleteEncryptionConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// List EncryptionConfigs.
    pub fn list_encryption_configs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::cmek_service::ListEncryptionConfigs {
        super::builder::cmek_service::ListEncryptionConfigs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Get an EncryptionConfig.
    pub fn get_encryption_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::cmek_service::GetEncryptionConfig {
        super::builder::cmek_service::GetEncryptionConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::cmek_service::ListLocations {
        super::builder::cmek_service::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::cmek_service::GetLocation {
        super::builder::cmek_service::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::cmek_service::SetIamPolicy {
        super::builder::cmek_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::cmek_service::GetIamPolicy {
        super::builder::cmek_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::cmek_service::TestIamPermissions {
        super::builder::cmek_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::cmek_service::ListOperations {
        super::builder::cmek_service::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::cmek_service::GetOperation {
        super::builder::cmek_service::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::cmek_service::DeleteOperation {
        super::builder::cmek_service::DeleteOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::cmek_service::CancelOperation {
        super::builder::cmek_service::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Cloud Dataplex API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_dataplex_v1::client::ContentService;
/// let client = ContentService::builder().build().await?;
/// // use `client` to make requests to the Cloud Dataplex API.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// ContentService manages Notebook and SQL Scripts for Dataplex.
///
/// # Configuration
///
/// To configure `ContentService` use the `with_*` methods in the type returned
/// by [builder()][ContentService::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://dataplex.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::content_service::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::content_service::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `ContentService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ContentService` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct ContentService {
    inner: std::sync::Arc<dyn super::stub::dynamic::ContentService>,
}

impl ContentService {
    /// Returns a builder for [ContentService].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_dataplex_v1::client::ContentService;
    /// let client = ContentService::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::content_service::ClientBuilder {
        gax::client_builder::internal::new_builder(super::builder::content_service::client::Factory)
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::ContentService + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<std::sync::Arc<dyn super::stub::dynamic::ContentService>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::ContentService> {
        super::transport::ContentService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::ContentService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::ContentService::new)
    }

    /// Create a content.
    pub fn create_content(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::content_service::CreateContent {
        super::builder::content_service::CreateContent::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Update a content. Only supports full resource update.
    pub fn update_content(
        &self,
        content: impl Into<crate::model::Content>,
    ) -> super::builder::content_service::UpdateContent {
        super::builder::content_service::UpdateContent::new(self.inner.clone())
            .set_content(content.into())
    }

    /// Delete a content.
    pub fn delete_content(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::content_service::DeleteContent {
        super::builder::content_service::DeleteContent::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Get a content resource.
    pub fn get_content(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::content_service::GetContent {
        super::builder::content_service::GetContent::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets the access control policy for a contentitem resource. A `NOT_FOUND`
    /// error is returned if the resource does not exist. An empty policy is
    /// returned if the resource exists but does not have a policy set on it.
    ///
    /// Caller must have Google IAM `dataplex.content.getIamPolicy` permission
    /// on the resource.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::content_service::GetIamPolicy {
        super::builder::content_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Sets the access control policy on the specified contentitem resource.
    /// Replaces any existing policy.
    ///
    /// Caller must have Google IAM `dataplex.content.setIamPolicy` permission
    /// on the resource.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::content_service::SetIamPolicy {
        super::builder::content_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns the caller's permissions on a resource.
    /// If the resource does not exist, an empty set of
    /// permissions is returned (a `NOT_FOUND` error is not returned).
    ///
    /// A caller is not required to have Google IAM permission to make this
    /// request.
    ///
    /// Note: This operation is designed to be used for building permission-aware
    /// UIs and command-line tools, not for authorization checking. This operation
    /// may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::content_service::TestIamPermissions {
        super::builder::content_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// List content.
    pub fn list_content(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::content_service::ListContent {
        super::builder::content_service::ListContent::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::content_service::ListLocations {
        super::builder::content_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::content_service::GetLocation {
        super::builder::content_service::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::content_service::ListOperations {
        super::builder::content_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::content_service::GetOperation {
        super::builder::content_service::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::content_service::DeleteOperation {
        super::builder::content_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::content_service::CancelOperation {
        super::builder::content_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Cloud Dataplex API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_dataplex_v1::client::DataTaxonomyService;
/// let client = DataTaxonomyService::builder().build().await?;
/// // use `client` to make requests to the Cloud Dataplex API.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// DataTaxonomyService enables attribute-based governance. The resources
/// currently offered include DataTaxonomy and DataAttribute.
///
/// # Configuration
///
/// To configure `DataTaxonomyService` use the `with_*` methods in the type returned
/// by [builder()][DataTaxonomyService::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://dataplex.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::data_taxonomy_service::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::data_taxonomy_service::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `DataTaxonomyService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DataTaxonomyService` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
#[deprecated]
pub struct DataTaxonomyService {
    inner: std::sync::Arc<dyn super::stub::dynamic::DataTaxonomyService>,
}

impl DataTaxonomyService {
    /// Returns a builder for [DataTaxonomyService].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_dataplex_v1::client::DataTaxonomyService;
    /// let client = DataTaxonomyService::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::data_taxonomy_service::ClientBuilder {
        gax::client_builder::internal::new_builder(
            super::builder::data_taxonomy_service::client::Factory,
        )
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::DataTaxonomyService + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<std::sync::Arc<dyn super::stub::dynamic::DataTaxonomyService>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::DataTaxonomyService> {
        super::transport::DataTaxonomyService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::DataTaxonomyService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::DataTaxonomyService::new)
    }

    /// Create a DataTaxonomy resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    #[deprecated]
    pub fn create_data_taxonomy(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::CreateDataTaxonomy {
        super::builder::data_taxonomy_service::CreateDataTaxonomy::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a DataTaxonomy resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    #[deprecated]
    pub fn update_data_taxonomy(
        &self,
        data_taxonomy: impl Into<crate::model::DataTaxonomy>,
    ) -> super::builder::data_taxonomy_service::UpdateDataTaxonomy {
        super::builder::data_taxonomy_service::UpdateDataTaxonomy::new(self.inner.clone())
            .set_data_taxonomy(data_taxonomy.into())
    }

    /// Deletes a DataTaxonomy resource. All attributes within the DataTaxonomy
    /// must be deleted before the DataTaxonomy can be deleted.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    #[deprecated]
    pub fn delete_data_taxonomy(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::DeleteDataTaxonomy {
        super::builder::data_taxonomy_service::DeleteDataTaxonomy::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists DataTaxonomy resources in a project and location.
    #[deprecated]
    pub fn list_data_taxonomies(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::ListDataTaxonomies {
        super::builder::data_taxonomy_service::ListDataTaxonomies::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves a DataTaxonomy resource.
    #[deprecated]
    pub fn get_data_taxonomy(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::GetDataTaxonomy {
        super::builder::data_taxonomy_service::GetDataTaxonomy::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Create a DataAttributeBinding resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    #[deprecated]
    pub fn create_data_attribute_binding(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::CreateDataAttributeBinding {
        super::builder::data_taxonomy_service::CreateDataAttributeBinding::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a DataAttributeBinding resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    #[deprecated]
    pub fn update_data_attribute_binding(
        &self,
        data_attribute_binding: impl Into<crate::model::DataAttributeBinding>,
    ) -> super::builder::data_taxonomy_service::UpdateDataAttributeBinding {
        super::builder::data_taxonomy_service::UpdateDataAttributeBinding::new(self.inner.clone())
            .set_data_attribute_binding(data_attribute_binding.into())
    }

    /// Deletes a DataAttributeBinding resource. All attributes within the
    /// DataAttributeBinding must be deleted before the DataAttributeBinding can be
    /// deleted.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    #[deprecated]
    pub fn delete_data_attribute_binding(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::DeleteDataAttributeBinding {
        super::builder::data_taxonomy_service::DeleteDataAttributeBinding::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists DataAttributeBinding resources in a project and location.
    #[deprecated]
    pub fn list_data_attribute_bindings(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::ListDataAttributeBindings {
        super::builder::data_taxonomy_service::ListDataAttributeBindings::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves a DataAttributeBinding resource.
    #[deprecated]
    pub fn get_data_attribute_binding(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::GetDataAttributeBinding {
        super::builder::data_taxonomy_service::GetDataAttributeBinding::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Create a DataAttribute resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    #[deprecated]
    pub fn create_data_attribute(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::CreateDataAttribute {
        super::builder::data_taxonomy_service::CreateDataAttribute::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a DataAttribute resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    #[deprecated]
    pub fn update_data_attribute(
        &self,
        data_attribute: impl Into<crate::model::DataAttribute>,
    ) -> super::builder::data_taxonomy_service::UpdateDataAttribute {
        super::builder::data_taxonomy_service::UpdateDataAttribute::new(self.inner.clone())
            .set_data_attribute(data_attribute.into())
    }

    /// Deletes a Data Attribute resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    #[deprecated]
    pub fn delete_data_attribute(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::DeleteDataAttribute {
        super::builder::data_taxonomy_service::DeleteDataAttribute::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists Data Attribute resources in a DataTaxonomy.
    #[deprecated]
    pub fn list_data_attributes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::ListDataAttributes {
        super::builder::data_taxonomy_service::ListDataAttributes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves a Data Attribute resource.
    #[deprecated]
    pub fn get_data_attribute(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::GetDataAttribute {
        super::builder::data_taxonomy_service::GetDataAttribute::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::ListLocations {
        super::builder::data_taxonomy_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::GetLocation {
        super::builder::data_taxonomy_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::SetIamPolicy {
        super::builder::data_taxonomy_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::GetIamPolicy {
        super::builder::data_taxonomy_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::TestIamPermissions {
        super::builder::data_taxonomy_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::ListOperations {
        super::builder::data_taxonomy_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::GetOperation {
        super::builder::data_taxonomy_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::DeleteOperation {
        super::builder::data_taxonomy_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_taxonomy_service::CancelOperation {
        super::builder::data_taxonomy_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Cloud Dataplex API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_dataplex_v1::client::DataScanService;
/// let client = DataScanService::builder().build().await?;
/// // use `client` to make requests to the Cloud Dataplex API.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// DataScanService manages DataScan resources which can be configured to run
/// various types of data scanning workload and generate enriched metadata (e.g.
/// Data Profile, Data Quality) for the data source.
///
/// # Configuration
///
/// To configure `DataScanService` use the `with_*` methods in the type returned
/// by [builder()][DataScanService::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://dataplex.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::data_scan_service::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::data_scan_service::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `DataScanService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DataScanService` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct DataScanService {
    inner: std::sync::Arc<dyn super::stub::dynamic::DataScanService>,
}

impl DataScanService {
    /// Returns a builder for [DataScanService].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_dataplex_v1::client::DataScanService;
    /// let client = DataScanService::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::data_scan_service::ClientBuilder {
        gax::client_builder::internal::new_builder(
            super::builder::data_scan_service::client::Factory,
        )
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::DataScanService + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<std::sync::Arc<dyn super::stub::dynamic::DataScanService>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::DataScanService> {
        super::transport::DataScanService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::DataScanService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::DataScanService::new)
    }

    /// Creates a DataScan resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_data_scan(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::data_scan_service::CreateDataScan {
        super::builder::data_scan_service::CreateDataScan::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a DataScan resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_data_scan(
        &self,
        data_scan: impl Into<crate::model::DataScan>,
    ) -> super::builder::data_scan_service::UpdateDataScan {
        super::builder::data_scan_service::UpdateDataScan::new(self.inner.clone())
            .set_data_scan(data_scan.into())
    }

    /// Deletes a DataScan resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_data_scan(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_scan_service::DeleteDataScan {
        super::builder::data_scan_service::DeleteDataScan::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets a DataScan resource.
    pub fn get_data_scan(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_scan_service::GetDataScan {
        super::builder::data_scan_service::GetDataScan::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists DataScans.
    pub fn list_data_scans(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::data_scan_service::ListDataScans {
        super::builder::data_scan_service::ListDataScans::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Runs an on-demand execution of a DataScan
    pub fn run_data_scan(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_scan_service::RunDataScan {
        super::builder::data_scan_service::RunDataScan::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets a DataScanJob resource.
    pub fn get_data_scan_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_scan_service::GetDataScanJob {
        super::builder::data_scan_service::GetDataScanJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists DataScanJobs under the given DataScan.
    pub fn list_data_scan_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::data_scan_service::ListDataScanJobs {
        super::builder::data_scan_service::ListDataScanJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Generates recommended data quality rules based on the results of a data
    /// profiling scan.
    ///
    /// Use the recommendations to build rules for a data quality scan.
    pub fn generate_data_quality_rules(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_scan_service::GenerateDataQualityRules {
        super::builder::data_scan_service::GenerateDataQualityRules::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_scan_service::ListLocations {
        super::builder::data_scan_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_scan_service::GetLocation {
        super::builder::data_scan_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::data_scan_service::SetIamPolicy {
        super::builder::data_scan_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::data_scan_service::GetIamPolicy {
        super::builder::data_scan_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::data_scan_service::TestIamPermissions {
        super::builder::data_scan_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_scan_service::ListOperations {
        super::builder::data_scan_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_scan_service::GetOperation {
        super::builder::data_scan_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_scan_service::DeleteOperation {
        super::builder::data_scan_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::data_scan_service::CancelOperation {
        super::builder::data_scan_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Cloud Dataplex API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_dataplex_v1::client::MetadataService;
/// let client = MetadataService::builder().build().await?;
/// // use `client` to make requests to the Cloud Dataplex API.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// Metadata service manages metadata resources such as tables, filesets and
/// partitions.
///
/// # Configuration
///
/// To configure `MetadataService` use the `with_*` methods in the type returned
/// by [builder()][MetadataService::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://dataplex.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::metadata_service::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::metadata_service::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `MetadataService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `MetadataService` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct MetadataService {
    inner: std::sync::Arc<dyn super::stub::dynamic::MetadataService>,
}

impl MetadataService {
    /// Returns a builder for [MetadataService].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_dataplex_v1::client::MetadataService;
    /// let client = MetadataService::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::metadata_service::ClientBuilder {
        gax::client_builder::internal::new_builder(
            super::builder::metadata_service::client::Factory,
        )
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::MetadataService + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<std::sync::Arc<dyn super::stub::dynamic::MetadataService>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::MetadataService> {
        super::transport::MetadataService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::MetadataService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::MetadataService::new)
    }

    /// Create a metadata entity.
    pub fn create_entity(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::metadata_service::CreateEntity {
        super::builder::metadata_service::CreateEntity::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Update a metadata entity. Only supports full resource update.
    pub fn update_entity(
        &self,
        entity: impl Into<crate::model::Entity>,
    ) -> super::builder::metadata_service::UpdateEntity {
        super::builder::metadata_service::UpdateEntity::new(self.inner.clone())
            .set_entity(entity.into())
    }

    /// Delete a metadata entity.
    pub fn delete_entity(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::metadata_service::DeleteEntity {
        super::builder::metadata_service::DeleteEntity::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Get a metadata entity.
    pub fn get_entity(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::metadata_service::GetEntity {
        super::builder::metadata_service::GetEntity::new(self.inner.clone()).set_name(name.into())
    }

    /// List metadata entities in a zone.
    pub fn list_entities(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::metadata_service::ListEntities {
        super::builder::metadata_service::ListEntities::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Create a metadata partition.
    pub fn create_partition(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::metadata_service::CreatePartition {
        super::builder::metadata_service::CreatePartition::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Delete a metadata partition.
    pub fn delete_partition(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::metadata_service::DeletePartition {
        super::builder::metadata_service::DeletePartition::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Get a metadata partition of an entity.
    pub fn get_partition(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::metadata_service::GetPartition {
        super::builder::metadata_service::GetPartition::new(self.inner.clone())
            .set_name(name.into())
    }

    /// List metadata partitions of an entity.
    pub fn list_partitions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::metadata_service::ListPartitions {
        super::builder::metadata_service::ListPartitions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::metadata_service::ListLocations {
        super::builder::metadata_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::metadata_service::GetLocation {
        super::builder::metadata_service::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::metadata_service::SetIamPolicy {
        super::builder::metadata_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::metadata_service::GetIamPolicy {
        super::builder::metadata_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::metadata_service::TestIamPermissions {
        super::builder::metadata_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::metadata_service::ListOperations {
        super::builder::metadata_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::metadata_service::GetOperation {
        super::builder::metadata_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::metadata_service::DeleteOperation {
        super::builder::metadata_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::metadata_service::CancelOperation {
        super::builder::metadata_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Cloud Dataplex API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_dataplex_v1::client::DataplexService;
/// let client = DataplexService::builder().build().await?;
/// // use `client` to make requests to the Cloud Dataplex API.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// Dataplex service provides data lakes as a service. The primary resources
/// offered by this service are Lakes, Zones and Assets which collectively allow
/// a data administrator to organize, manage, secure and catalog data across
/// their organization located across cloud projects in a variety of storage
/// systems including Cloud Storage and BigQuery.
///
/// # Configuration
///
/// To configure `DataplexService` use the `with_*` methods in the type returned
/// by [builder()][DataplexService::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://dataplex.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::dataplex_service::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::dataplex_service::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `DataplexService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DataplexService` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct DataplexService {
    inner: std::sync::Arc<dyn super::stub::dynamic::DataplexService>,
}

impl DataplexService {
    /// Returns a builder for [DataplexService].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_dataplex_v1::client::DataplexService;
    /// let client = DataplexService::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::dataplex_service::ClientBuilder {
        gax::client_builder::internal::new_builder(
            super::builder::dataplex_service::client::Factory,
        )
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::DataplexService + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<std::sync::Arc<dyn super::stub::dynamic::DataplexService>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::DataplexService> {
        super::transport::DataplexService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::DataplexService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::DataplexService::new)
    }

    /// Creates a lake resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_lake(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::CreateLake {
        super::builder::dataplex_service::CreateLake::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a lake resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_lake(
        &self,
        lake: impl Into<crate::model::Lake>,
    ) -> super::builder::dataplex_service::UpdateLake {
        super::builder::dataplex_service::UpdateLake::new(self.inner.clone()).set_lake(lake.into())
    }

    /// Deletes a lake resource. All zones within the lake must be deleted before
    /// the lake can be deleted.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_lake(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::DeleteLake {
        super::builder::dataplex_service::DeleteLake::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists lake resources in a project and location.
    pub fn list_lakes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::ListLakes {
        super::builder::dataplex_service::ListLakes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves a lake resource.
    pub fn get_lake(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::GetLake {
        super::builder::dataplex_service::GetLake::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists action resources in a lake.
    pub fn list_lake_actions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::ListLakeActions {
        super::builder::dataplex_service::ListLakeActions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a zone resource within a lake.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_zone(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::CreateZone {
        super::builder::dataplex_service::CreateZone::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a zone resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_zone(
        &self,
        zone: impl Into<crate::model::Zone>,
    ) -> super::builder::dataplex_service::UpdateZone {
        super::builder::dataplex_service::UpdateZone::new(self.inner.clone()).set_zone(zone.into())
    }

    /// Deletes a zone resource. All assets within a zone must be deleted before
    /// the zone can be deleted.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_zone(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::DeleteZone {
        super::builder::dataplex_service::DeleteZone::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists zone resources in a lake.
    pub fn list_zones(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::ListZones {
        super::builder::dataplex_service::ListZones::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves a zone resource.
    pub fn get_zone(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::GetZone {
        super::builder::dataplex_service::GetZone::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists action resources in a zone.
    pub fn list_zone_actions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::ListZoneActions {
        super::builder::dataplex_service::ListZoneActions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates an asset resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_asset(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::CreateAsset {
        super::builder::dataplex_service::CreateAsset::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates an asset resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_asset(
        &self,
        asset: impl Into<crate::model::Asset>,
    ) -> super::builder::dataplex_service::UpdateAsset {
        super::builder::dataplex_service::UpdateAsset::new(self.inner.clone())
            .set_asset(asset.into())
    }

    /// Deletes an asset resource. The referenced storage resource is detached
    /// (default) or deleted based on the associated Lifecycle policy.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_asset(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::DeleteAsset {
        super::builder::dataplex_service::DeleteAsset::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists asset resources in a zone.
    pub fn list_assets(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::ListAssets {
        super::builder::dataplex_service::ListAssets::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves an asset resource.
    pub fn get_asset(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::GetAsset {
        super::builder::dataplex_service::GetAsset::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists action resources in an asset.
    pub fn list_asset_actions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::ListAssetActions {
        super::builder::dataplex_service::ListAssetActions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a task resource within a lake.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_task(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::CreateTask {
        super::builder::dataplex_service::CreateTask::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Update the task resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_task(
        &self,
        task: impl Into<crate::model::Task>,
    ) -> super::builder::dataplex_service::UpdateTask {
        super::builder::dataplex_service::UpdateTask::new(self.inner.clone()).set_task(task.into())
    }

    /// Delete the task resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_task(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::DeleteTask {
        super::builder::dataplex_service::DeleteTask::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists tasks under the given lake.
    pub fn list_tasks(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::ListTasks {
        super::builder::dataplex_service::ListTasks::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Get task resource.
    pub fn get_task(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::GetTask {
        super::builder::dataplex_service::GetTask::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists Jobs under the given task.
    pub fn list_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::ListJobs {
        super::builder::dataplex_service::ListJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Run an on demand execution of a Task.
    pub fn run_task(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::RunTask {
        super::builder::dataplex_service::RunTask::new(self.inner.clone()).set_name(name.into())
    }

    /// Get job resource.
    pub fn get_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::GetJob {
        super::builder::dataplex_service::GetJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Cancel jobs running for the task resource.
    pub fn cancel_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::CancelJob {
        super::builder::dataplex_service::CancelJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Create an environment resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_environment(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::CreateEnvironment {
        super::builder::dataplex_service::CreateEnvironment::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Update the environment resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_environment(
        &self,
        environment: impl Into<crate::model::Environment>,
    ) -> super::builder::dataplex_service::UpdateEnvironment {
        super::builder::dataplex_service::UpdateEnvironment::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Delete the environment resource. All the child resources must have been
    /// deleted before environment deletion can be initiated.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_environment(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::DeleteEnvironment {
        super::builder::dataplex_service::DeleteEnvironment::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists environments under the given lake.
    pub fn list_environments(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::ListEnvironments {
        super::builder::dataplex_service::ListEnvironments::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Get environment resource.
    pub fn get_environment(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::GetEnvironment {
        super::builder::dataplex_service::GetEnvironment::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists session resources in an environment.
    pub fn list_sessions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::ListSessions {
        super::builder::dataplex_service::ListSessions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::ListLocations {
        super::builder::dataplex_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::GetLocation {
        super::builder::dataplex_service::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::SetIamPolicy {
        super::builder::dataplex_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::GetIamPolicy {
        super::builder::dataplex_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::TestIamPermissions {
        super::builder::dataplex_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::ListOperations {
        super::builder::dataplex_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::GetOperation {
        super::builder::dataplex_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::DeleteOperation {
        super::builder::dataplex_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::dataplex_service::CancelOperation {
        super::builder::dataplex_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
