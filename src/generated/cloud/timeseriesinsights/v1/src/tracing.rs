// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [TimeseriesInsightsController](crate::stubs::TimeseriesInsightsController) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct TimeseriesInsightsController<T>
where
    T: crate::stubs::TimeseriesInsightsController + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> TimeseriesInsightsController<T>
where
    T: crate::stubs::TimeseriesInsightsController + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> crate::stubs::TimeseriesInsightsController for TimeseriesInsightsController<T>
where
    T: crate::stubs::TimeseriesInsightsController + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn list_data_sets(
        &self,
        req: crate::model::ListDataSetsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListDataSetsResponse> {
        self.inner.list_data_sets(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_data_set(
        &self,
        req: crate::model::CreateDataSetRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::DataSet> {
        self.inner.create_data_set(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_data_set(
        &self,
        req: crate::model::DeleteDataSetRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.delete_data_set(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn append_events(
        &self,
        req: crate::model::AppendEventsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::AppendEventsResponse> {
        self.inner.append_events(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn query_data_set(
        &self,
        req: crate::model::QueryDataSetRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::QueryDataSetResponse> {
        self.inner.query_data_set(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn evaluate_slice(
        &self,
        req: crate::model::EvaluateSliceRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::EvaluatedSlice> {
        self.inner.evaluate_slice(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn evaluate_timeseries(
        &self,
        req: crate::model::EvaluateTimeseriesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::EvaluatedSlice> {
        self.inner.evaluate_timeseries(req, options).await
    }
}
