// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::TelcoAutomation].
///
/// Application developers may need to implement this trait to mock
/// `client::TelcoAutomation`.  In other use-cases, application developers only
/// use `client::TelcoAutomation` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait TelcoAutomation: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::TelcoAutomation::list_orchestration_clusters].
    fn list_orchestration_clusters(
        &self,
        _req: crate::model::ListOrchestrationClustersRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListOrchestrationClustersResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListOrchestrationClustersResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::TelcoAutomation::get_orchestration_cluster].
    fn get_orchestration_cluster(
        &self,
        _req: crate::model::GetOrchestrationClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::OrchestrationCluster>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::OrchestrationCluster>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::TelcoAutomation::create_orchestration_cluster].
    fn create_orchestration_cluster(
        &self,
        _req: crate::model::CreateOrchestrationClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::TelcoAutomation::delete_orchestration_cluster].
    fn delete_orchestration_cluster(
        &self,
        _req: crate::model::DeleteOrchestrationClusterRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::TelcoAutomation::list_edge_slms].
    fn list_edge_slms(
        &self,
        _req: crate::model::ListEdgeSlmsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListEdgeSlmsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListEdgeSlmsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::TelcoAutomation::get_edge_slm].
    fn get_edge_slm(
        &self,
        _req: crate::model::GetEdgeSlmRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::EdgeSlm>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::EdgeSlm>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::TelcoAutomation::create_edge_slm].
    fn create_edge_slm(
        &self,
        _req: crate::model::CreateEdgeSlmRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::TelcoAutomation::delete_edge_slm].
    fn delete_edge_slm(
        &self,
        _req: crate::model::DeleteEdgeSlmRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::TelcoAutomation::create_blueprint].
    fn create_blueprint(
        &self,
        _req: crate::model::CreateBlueprintRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Blueprint>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Blueprint>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::TelcoAutomation::update_blueprint].
    fn update_blueprint(
        &self,
        _req: crate::model::UpdateBlueprintRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Blueprint>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Blueprint>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::TelcoAutomation::get_blueprint].
    fn get_blueprint(
        &self,
        _req: crate::model::GetBlueprintRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Blueprint>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Blueprint>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::TelcoAutomation::delete_blueprint].
    fn delete_blueprint(
        &self,
        _req: crate::model::DeleteBlueprintRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::TelcoAutomation::list_blueprints].
    fn list_blueprints(
        &self,
        _req: crate::model::ListBlueprintsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListBlueprintsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListBlueprintsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::TelcoAutomation::approve_blueprint].
    fn approve_blueprint(
        &self,
        _req: crate::model::ApproveBlueprintRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Blueprint>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Blueprint>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::TelcoAutomation::propose_blueprint].
    fn propose_blueprint(
        &self,
        _req: crate::model::ProposeBlueprintRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Blueprint>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Blueprint>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::TelcoAutomation::reject_blueprint].
    fn reject_blueprint(
        &self,
        _req: crate::model::RejectBlueprintRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Blueprint>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Blueprint>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::TelcoAutomation::list_blueprint_revisions].
    fn list_blueprint_revisions(
        &self,
        _req: crate::model::ListBlueprintRevisionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListBlueprintRevisionsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListBlueprintRevisionsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::TelcoAutomation::search_blueprint_revisions].
    fn search_blueprint_revisions(
        &self,
        _req: crate::model::SearchBlueprintRevisionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::SearchBlueprintRevisionsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::SearchBlueprintRevisionsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::TelcoAutomation::search_deployment_revisions].
    fn search_deployment_revisions(
        &self,
        _req: crate::model::SearchDeploymentRevisionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::SearchDeploymentRevisionsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::SearchDeploymentRevisionsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::TelcoAutomation::discard_blueprint_changes].
    fn discard_blueprint_changes(
        &self,
        _req: crate::model::DiscardBlueprintChangesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::DiscardBlueprintChangesResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::DiscardBlueprintChangesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::TelcoAutomation::list_public_blueprints].
    fn list_public_blueprints(
        &self,
        _req: crate::model::ListPublicBlueprintsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListPublicBlueprintsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListPublicBlueprintsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::TelcoAutomation::get_public_blueprint].
    fn get_public_blueprint(
        &self,
        _req: crate::model::GetPublicBlueprintRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::PublicBlueprint>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::PublicBlueprint>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::TelcoAutomation::create_deployment].
    fn create_deployment(
        &self,
        _req: crate::model::CreateDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Deployment>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Deployment>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::TelcoAutomation::update_deployment].
    fn update_deployment(
        &self,
        _req: crate::model::UpdateDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Deployment>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Deployment>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::TelcoAutomation::get_deployment].
    fn get_deployment(
        &self,
        _req: crate::model::GetDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Deployment>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Deployment>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::TelcoAutomation::remove_deployment].
    fn remove_deployment(
        &self,
        _req: crate::model::RemoveDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::TelcoAutomation::list_deployments].
    fn list_deployments(
        &self,
        _req: crate::model::ListDeploymentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::ListDeploymentsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListDeploymentsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::TelcoAutomation::list_deployment_revisions].
    fn list_deployment_revisions(
        &self,
        _req: crate::model::ListDeploymentRevisionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListDeploymentRevisionsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListDeploymentRevisionsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::TelcoAutomation::discard_deployment_changes].
    fn discard_deployment_changes(
        &self,
        _req: crate::model::DiscardDeploymentChangesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::DiscardDeploymentChangesResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::DiscardDeploymentChangesResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::TelcoAutomation::apply_deployment].
    fn apply_deployment(
        &self,
        _req: crate::model::ApplyDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Deployment>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Deployment>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::TelcoAutomation::compute_deployment_status].
    fn compute_deployment_status(
        &self,
        _req: crate::model::ComputeDeploymentStatusRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ComputeDeploymentStatusResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ComputeDeploymentStatusResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::TelcoAutomation::rollback_deployment].
    fn rollback_deployment(
        &self,
        _req: crate::model::RollbackDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::Deployment>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::Deployment>>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::TelcoAutomation::get_hydrated_deployment].
    fn get_hydrated_deployment(
        &self,
        _req: crate::model::GetHydratedDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::HydratedDeployment>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::HydratedDeployment>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::TelcoAutomation::list_hydrated_deployments].
    fn list_hydrated_deployments(
        &self,
        _req: crate::model::ListHydratedDeploymentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::ListHydratedDeploymentsResponse>,
        >,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<crate::model::ListHydratedDeploymentsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::TelcoAutomation::update_hydrated_deployment].
    fn update_hydrated_deployment(
        &self,
        _req: crate::model::UpdateHydratedDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::HydratedDeployment>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::HydratedDeployment>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::TelcoAutomation::apply_hydrated_deployment].
    fn apply_hydrated_deployment(
        &self,
        _req: crate::model::ApplyHydratedDeploymentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::HydratedDeployment>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<crate::model::HydratedDeployment>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::TelcoAutomation::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<location::model::ListLocationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<location::model::ListLocationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::TelcoAutomation::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<location::model::Location>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<location::model::Location>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::TelcoAutomation::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
    > + Send {
        std::future::ready::<
            crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::TelcoAutomation::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<longrunning::model::Operation>>,
    > + Send {
        std::future::ready::<crate::Result<gax::response::Response<longrunning::model::Operation>>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::TelcoAutomation::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::TelcoAutomation::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<gax::response::Response<()>>> + Send {
        std::future::ready::<crate::Result<gax::response::Response<()>>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Returns the polling error policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_error_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        std::sync::Arc::new(gax::polling_error_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        std::sync::Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
