// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use std::sync::Arc;

/// A dyn-compatible, crate-private version of [super::Workstations].
#[async_trait::async_trait]
pub trait Workstations: std::fmt::Debug + Send + Sync {
    async fn get_workstation_cluster(
        &self,
        req: crate::model::GetWorkstationClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::WorkstationCluster>;

    async fn list_workstation_clusters(
        &self,
        req: crate::model::ListWorkstationClustersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListWorkstationClustersResponse>;

    async fn create_workstation_cluster(
        &self,
        req: crate::model::CreateWorkstationClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_workstation_cluster(
        &self,
        req: crate::model::UpdateWorkstationClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_workstation_cluster(
        &self,
        req: crate::model::DeleteWorkstationClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_workstation_config(
        &self,
        req: crate::model::GetWorkstationConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::WorkstationConfig>;

    async fn list_workstation_configs(
        &self,
        req: crate::model::ListWorkstationConfigsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListWorkstationConfigsResponse>;

    async fn list_usable_workstation_configs(
        &self,
        req: crate::model::ListUsableWorkstationConfigsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListUsableWorkstationConfigsResponse>;

    async fn create_workstation_config(
        &self,
        req: crate::model::CreateWorkstationConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_workstation_config(
        &self,
        req: crate::model::UpdateWorkstationConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_workstation_config(
        &self,
        req: crate::model::DeleteWorkstationConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_workstation(
        &self,
        req: crate::model::GetWorkstationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Workstation>;

    async fn list_workstations(
        &self,
        req: crate::model::ListWorkstationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListWorkstationsResponse>;

    async fn list_usable_workstations(
        &self,
        req: crate::model::ListUsableWorkstationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListUsableWorkstationsResponse>;

    async fn create_workstation(
        &self,
        req: crate::model::CreateWorkstationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_workstation(
        &self,
        req: crate::model::UpdateWorkstationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_workstation(
        &self,
        req: crate::model::DeleteWorkstationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn start_workstation(
        &self,
        req: crate::model::StartWorkstationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn stop_workstation(
        &self,
        req: crate::model::StopWorkstationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn generate_access_token(
        &self,
        req: crate::model::GenerateAccessTokenRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateAccessTokenResponse>;

    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy>;

    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse>;

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [super::Workstations] also implement [Workstations].
#[async_trait::async_trait]
impl<T: super::Workstations> Workstations for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn get_workstation_cluster(
        &self,
        req: crate::model::GetWorkstationClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::WorkstationCluster> {
        T::get_workstation_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_workstation_clusters(
        &self,
        req: crate::model::ListWorkstationClustersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListWorkstationClustersResponse> {
        T::list_workstation_clusters(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_workstation_cluster(
        &self,
        req: crate::model::CreateWorkstationClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_workstation_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_workstation_cluster(
        &self,
        req: crate::model::UpdateWorkstationClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_workstation_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_workstation_cluster(
        &self,
        req: crate::model::DeleteWorkstationClusterRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_workstation_cluster(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_workstation_config(
        &self,
        req: crate::model::GetWorkstationConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::WorkstationConfig> {
        T::get_workstation_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_workstation_configs(
        &self,
        req: crate::model::ListWorkstationConfigsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListWorkstationConfigsResponse> {
        T::list_workstation_configs(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_usable_workstation_configs(
        &self,
        req: crate::model::ListUsableWorkstationConfigsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListUsableWorkstationConfigsResponse> {
        T::list_usable_workstation_configs(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_workstation_config(
        &self,
        req: crate::model::CreateWorkstationConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_workstation_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_workstation_config(
        &self,
        req: crate::model::UpdateWorkstationConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_workstation_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_workstation_config(
        &self,
        req: crate::model::DeleteWorkstationConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_workstation_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_workstation(
        &self,
        req: crate::model::GetWorkstationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Workstation> {
        T::get_workstation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_workstations(
        &self,
        req: crate::model::ListWorkstationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListWorkstationsResponse> {
        T::list_workstations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_usable_workstations(
        &self,
        req: crate::model::ListUsableWorkstationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListUsableWorkstationsResponse> {
        T::list_usable_workstations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_workstation(
        &self,
        req: crate::model::CreateWorkstationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_workstation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_workstation(
        &self,
        req: crate::model::UpdateWorkstationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_workstation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_workstation(
        &self,
        req: crate::model::DeleteWorkstationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_workstation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn start_workstation(
        &self,
        req: crate::model::StartWorkstationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::start_workstation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn stop_workstation(
        &self,
        req: crate::model::StopWorkstationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::stop_workstation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn generate_access_token(
        &self,
        req: crate::model::GenerateAccessTokenRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::GenerateAccessTokenResponse> {
        T::generate_access_token(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::set_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::Policy> {
        T::get_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<iam_v1::model::TestIamPermissionsResponse> {
        T::test_iam_permissions(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::delete_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::cancel_operation(self, req, options).await
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        T::get_polling_error_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}
