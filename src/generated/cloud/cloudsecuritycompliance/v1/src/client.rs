// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

/// Implements a client for the Cloud Security Compliance API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_cloudsecuritycompliance_v1::client::Config;
/// let client = Config::builder().build().await?;
/// // use `client` to make requests to the Cloud Security Compliance API.
/// # gax::client_builder::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// Config Service manages compliance frameworks, cloud controls, and their
/// configurations.
///
/// # Configuration
///
/// To configure `Config` use the `with_*` methods in the type returned
/// by [builder()][Config::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://cloudsecuritycompliance.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::config::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::config::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `Config` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Config` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct Config {
    inner: std::sync::Arc<dyn super::stub::dynamic::Config>,
}

impl Config {
    /// Returns a builder for [Config].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_cloudsecuritycompliance_v1::client::Config;
    /// let client = Config::builder().build().await?;
    /// # gax::client_builder::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::config::ClientBuilder {
        gax::client_builder::internal::new_builder(super::builder::config::client::Factory)
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::Config + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(
        config: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<std::sync::Arc<dyn super::stub::dynamic::Config>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<impl super::stub::Config> {
        super::transport::Config::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<impl super::stub::Config> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Config::new)
    }

    /// Lists all Frameworks (both Built-in and Custom) available within a given
    /// parent resource. This method supports pagination.
    /// The latest major version of each Framework is returned.
    pub fn list_frameworks(&self) -> super::builder::config::ListFrameworks {
        super::builder::config::ListFrameworks::new(self.inner.clone())
    }

    /// Gets details of a single Framework.
    /// This method retrieves a Framework resource, which can be either Built-in or
    /// Custom, identified by its name.
    ///
    /// By default, the latest major version of the Framework is returned.
    /// A specific major version can be retrieved by specifying the
    /// `major_revision_id` in the request.
    pub fn get_framework(&self) -> super::builder::config::GetFramework {
        super::builder::config::GetFramework::new(self.inner.clone())
    }

    /// Creates a new Framework with type `Custom` under a given parent resource.
    /// Frameworks with type `Built-in` are managed by Google and cannot be created
    /// through this API.
    pub fn create_framework(&self) -> super::builder::config::CreateFramework {
        super::builder::config::CreateFramework::new(self.inner.clone())
    }

    /// Updates a single Framework.
    /// This method allows for partial updates of a Framework resource. The fields
    /// to be updated are specified using the `update_mask`.
    ///
    /// - If an `update_mask` is provided, only the fields specified in the mask
    ///   will be updated.
    /// - If no `update_mask` is provided, all fields present in the request's
    ///   `framework` body will be used to overwrite the existing resource.
    ///
    /// This operation can only be performed on Frameworks with type `CUSTOM`.
    /// A successful update will result in a new version of the Framework.
    pub fn update_framework(&self) -> super::builder::config::UpdateFramework {
        super::builder::config::UpdateFramework::new(self.inner.clone())
    }

    /// Deletes a single Custom Framework, including all its minor and
    /// minor revisions.
    ///
    /// - This operation can only be performed on Frameworks with type `CUSTOM`.
    ///   Built-in Frameworks cannot be deleted.
    /// - The Framework cannot be deleted if it is currently deployed on any
    ///   resource.
    /// - This action is permanent and cannot be undone.
    pub fn delete_framework(&self) -> super::builder::config::DeleteFramework {
        super::builder::config::DeleteFramework::new(self.inner.clone())
    }

    /// Lists all CloudControls (both Built-in and Custom) available within a given
    /// parent resource. This method supports pagination.
    /// The latest major version of each CloudControl is returned.
    pub fn list_cloud_controls(&self) -> super::builder::config::ListCloudControls {
        super::builder::config::ListCloudControls::new(self.inner.clone())
    }

    /// Gets details of a single CloudControl.
    /// This method retrieves a CloudControl resource, which can be either Built-in
    /// or Custom, identified by its name.
    ///
    /// By default, the latest major version of the CloudControl is returned.
    /// A specific major version can be retrieved by specifying the
    /// `major_revision_id` in the request.
    pub fn get_cloud_control(&self) -> super::builder::config::GetCloudControl {
        super::builder::config::GetCloudControl::new(self.inner.clone())
    }

    /// Creates a new CloudControl with type `Custom` under a given parent
    /// resource. `Built-in` CloudControls are managed by Google and cannot be
    /// created through this API.
    pub fn create_cloud_control(&self) -> super::builder::config::CreateCloudControl {
        super::builder::config::CreateCloudControl::new(self.inner.clone())
    }

    /// Updates a single CloudControl.
    /// This method allows for partial updates of a Custom CloudControl resource.
    /// Built-in CloudControls cannot be updated.
    ///
    /// - If an `update_mask` is provided, only the fields specified in the mask
    ///   will be updated.
    /// - If no `update_mask` is provided, all fields present in the request's
    ///   `cloud_control` body will be used to overwrite the existing resource.
    ///
    /// A successful update will result in a new version of the CloudControl.
    pub fn update_cloud_control(&self) -> super::builder::config::UpdateCloudControl {
        super::builder::config::UpdateCloudControl::new(self.inner.clone())
    }

    /// Deletes a single Custom CloudControl, including all its
    /// major and minor revisions.
    ///
    /// - This operation can only be performed on CloudControls with type `CUSTOM`.
    ///   Built-in CloudControls cannot be deleted.
    /// - The CloudControl cannot be deleted if any of its revisions are currently
    ///   referenced by any Framework.
    /// - This action is permanent and cannot be undone.
    pub fn delete_cloud_control(&self) -> super::builder::config::DeleteCloudControl {
        super::builder::config::DeleteCloudControl::new(self.inner.clone())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(&self) -> super::builder::config::ListLocations {
        super::builder::config::ListLocations::new(self.inner.clone())
    }

    /// Gets information about a location.
    pub fn get_location(&self) -> super::builder::config::GetLocation {
        super::builder::config::GetLocation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(&self) -> super::builder::config::ListOperations {
        super::builder::config::ListOperations::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(&self) -> super::builder::config::GetOperation {
        super::builder::config::GetOperation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(&self) -> super::builder::config::DeleteOperation {
        super::builder::config::DeleteOperation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(&self) -> super::builder::config::CancelOperation {
        super::builder::config::CancelOperation::new(self.inner.clone())
    }
}

/// Implements a client for the Cloud Security Compliance API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_cloudsecuritycompliance_v1::client::Deployment;
/// let client = Deployment::builder().build().await?;
/// // use `client` to make requests to the Cloud Security Compliance API.
/// # gax::client_builder::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// Deployment service allows users to manage deployments of Frameworks and
/// Cloud Controls on a target resource.
///
/// # Configuration
///
/// To configure `Deployment` use the `with_*` methods in the type returned
/// by [builder()][Deployment::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://cloudsecuritycompliance.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::deployment::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::deployment::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `Deployment` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Deployment` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct Deployment {
    inner: std::sync::Arc<dyn super::stub::dynamic::Deployment>,
}

impl Deployment {
    /// Returns a builder for [Deployment].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_cloudsecuritycompliance_v1::client::Deployment;
    /// let client = Deployment::builder().build().await?;
    /// # gax::client_builder::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::deployment::ClientBuilder {
        gax::client_builder::internal::new_builder(super::builder::deployment::client::Factory)
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::Deployment + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(
        config: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<std::sync::Arc<dyn super::stub::dynamic::Deployment>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<impl super::stub::Deployment> {
        super::transport::Deployment::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<impl super::stub::Deployment> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Deployment::new)
    }

    /// Creates a new FrameworkDeployment in a given parent resource.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_framework_deployment(
        &self,
    ) -> super::builder::deployment::CreateFrameworkDeployment {
        super::builder::deployment::CreateFrameworkDeployment::new(self.inner.clone())
    }

    /// Deletes a single FrameworkDeployment.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_framework_deployment(
        &self,
    ) -> super::builder::deployment::DeleteFrameworkDeployment {
        super::builder::deployment::DeleteFrameworkDeployment::new(self.inner.clone())
    }

    /// Gets details of a single FrameworkDeployment.
    pub fn get_framework_deployment(&self) -> super::builder::deployment::GetFrameworkDeployment {
        super::builder::deployment::GetFrameworkDeployment::new(self.inner.clone())
    }

    /// Lists FrameworkDeployments in a given parent resource.
    pub fn list_framework_deployments(
        &self,
    ) -> super::builder::deployment::ListFrameworkDeployments {
        super::builder::deployment::ListFrameworkDeployments::new(self.inner.clone())
    }

    /// Gets details of a single CloudControlDeployment.
    pub fn get_cloud_control_deployment(
        &self,
    ) -> super::builder::deployment::GetCloudControlDeployment {
        super::builder::deployment::GetCloudControlDeployment::new(self.inner.clone())
    }

    /// Lists CloudControlDeployments in a given parent resource.
    pub fn list_cloud_control_deployments(
        &self,
    ) -> super::builder::deployment::ListCloudControlDeployments {
        super::builder::deployment::ListCloudControlDeployments::new(self.inner.clone())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(&self) -> super::builder::deployment::ListLocations {
        super::builder::deployment::ListLocations::new(self.inner.clone())
    }

    /// Gets information about a location.
    pub fn get_location(&self) -> super::builder::deployment::GetLocation {
        super::builder::deployment::GetLocation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(&self) -> super::builder::deployment::ListOperations {
        super::builder::deployment::ListOperations::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(&self) -> super::builder::deployment::GetOperation {
        super::builder::deployment::GetOperation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(&self) -> super::builder::deployment::DeleteOperation {
        super::builder::deployment::DeleteOperation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(&self) -> super::builder::deployment::CancelOperation {
        super::builder::deployment::CancelOperation::new(self.inner.clone())
    }
}
