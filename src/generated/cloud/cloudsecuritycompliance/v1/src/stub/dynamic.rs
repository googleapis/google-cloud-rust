// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

/// A dyn-compatible, crate-private version of [super::Config].
#[async_trait::async_trait]
pub trait Config: std::fmt::Debug + Send + Sync {
    async fn list_frameworks(
        &self,
        req: crate::model::ListFrameworksRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListFrameworksResponse>>;

    async fn get_framework(
        &self,
        req: crate::model::GetFrameworkRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Framework>>;

    async fn create_framework(
        &self,
        req: crate::model::CreateFrameworkRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Framework>>;

    async fn update_framework(
        &self,
        req: crate::model::UpdateFrameworkRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Framework>>;

    async fn delete_framework(
        &self,
        req: crate::model::DeleteFrameworkRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>>;

    async fn list_cloud_controls(
        &self,
        req: crate::model::ListCloudControlsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListCloudControlsResponse>>;

    async fn get_cloud_control(
        &self,
        req: crate::model::GetCloudControlRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::CloudControl>>;

    async fn create_cloud_control(
        &self,
        req: crate::model::CreateCloudControlRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::CloudControl>>;

    async fn update_cloud_control(
        &self,
        req: crate::model::UpdateCloudControlRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::CloudControl>>;

    async fn delete_cloud_control(
        &self,
        req: crate::model::DeleteCloudControlRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>>;

    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<location::model::ListLocationsResponse>>;

    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<location::model::Location>>;

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>>;

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>>;
}

/// All implementations of [super::Config] also implement [Config].
#[async_trait::async_trait]
impl<T: super::Config> Config for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn list_frameworks(
        &self,
        req: crate::model::ListFrameworksRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListFrameworksResponse>> {
        T::list_frameworks(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_framework(
        &self,
        req: crate::model::GetFrameworkRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Framework>> {
        T::get_framework(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_framework(
        &self,
        req: crate::model::CreateFrameworkRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Framework>> {
        T::create_framework(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_framework(
        &self,
        req: crate::model::UpdateFrameworkRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::Framework>> {
        T::update_framework(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_framework(
        &self,
        req: crate::model::DeleteFrameworkRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>> {
        T::delete_framework(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_cloud_controls(
        &self,
        req: crate::model::ListCloudControlsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListCloudControlsResponse>> {
        T::list_cloud_controls(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_cloud_control(
        &self,
        req: crate::model::GetCloudControlRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::CloudControl>> {
        T::get_cloud_control(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_cloud_control(
        &self,
        req: crate::model::CreateCloudControlRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::CloudControl>> {
        T::create_cloud_control(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_cloud_control(
        &self,
        req: crate::model::UpdateCloudControlRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::CloudControl>> {
        T::update_cloud_control(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_cloud_control(
        &self,
        req: crate::model::DeleteCloudControlRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>> {
        T::delete_cloud_control(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<location::model::ListLocationsResponse>> {
        T::list_locations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<location::model::Location>> {
        T::get_location(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>> {
        T::delete_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>> {
        T::cancel_operation(self, req, options).await
    }
}

/// A dyn-compatible, crate-private version of [super::Deployment].
#[async_trait::async_trait]
pub trait Deployment: std::fmt::Debug + Send + Sync {
    async fn create_framework_deployment(
        &self,
        req: crate::model::CreateFrameworkDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn delete_framework_deployment(
        &self,
        req: crate::model::DeleteFrameworkDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn get_framework_deployment(
        &self,
        req: crate::model::GetFrameworkDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::FrameworkDeployment>>;

    async fn list_framework_deployments(
        &self,
        req: crate::model::ListFrameworkDeploymentsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListFrameworkDeploymentsResponse>>;

    async fn get_cloud_control_deployment(
        &self,
        req: crate::model::GetCloudControlDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::CloudControlDeployment>>;

    async fn list_cloud_control_deployments(
        &self,
        req: crate::model::ListCloudControlDeploymentsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListCloudControlDeploymentsResponse>>;

    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<location::model::ListLocationsResponse>>;

    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<location::model::Location>>;

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>>;

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>>;

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>>;

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [super::Deployment] also implement [Deployment].
#[async_trait::async_trait]
impl<T: super::Deployment> Deployment for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn create_framework_deployment(
        &self,
        req: crate::model::CreateFrameworkDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::create_framework_deployment(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_framework_deployment(
        &self,
        req: crate::model::DeleteFrameworkDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::delete_framework_deployment(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_framework_deployment(
        &self,
        req: crate::model::GetFrameworkDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::FrameworkDeployment>> {
        T::get_framework_deployment(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_framework_deployments(
        &self,
        req: crate::model::ListFrameworkDeploymentsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListFrameworkDeploymentsResponse>>
    {
        T::list_framework_deployments(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_cloud_control_deployment(
        &self,
        req: crate::model::GetCloudControlDeploymentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::CloudControlDeployment>> {
        T::get_cloud_control_deployment(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_cloud_control_deployments(
        &self,
        req: crate::model::ListCloudControlDeploymentsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListCloudControlDeploymentsResponse>>
    {
        T::list_cloud_control_deployments(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<location::model::ListLocationsResponse>> {
        T::list_locations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<location::model::Location>> {
        T::get_location(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::ListOperationsResponse>> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<longrunning::model::Operation>> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>> {
        T::delete_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<()>> {
        T::cancel_operation(self, req, options).await
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        T::get_polling_error_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}
