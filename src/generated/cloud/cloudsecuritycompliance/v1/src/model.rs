// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gaxi;
extern crate lazy_static;
extern crate location;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

mod debug;
mod deserialize;
mod serialize;

/// A Framework is a collection of CloudControls to address security and
/// compliance requirements. Frameworks can be used for prevention, detection,
/// and auditing. They can be either built-in, industry-standard frameworks
/// provided by GCP/AZURE/AWS (e.g., NIST, FedRAMP) or custom frameworks created
/// by users.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct Framework {
    /// Required. Identifier. The name of the framework.
    /// Format:
    /// organizations/{organization}/locations/{location}/frameworks/{framework_id}
    pub name: std::string::String,

    /// Output only. Major revision of the framework incremented in ascending
    /// order.
    pub major_revision_id: i64,

    /// Optional. Display name of the framework. The maximum length is 200
    /// characters.
    pub display_name: std::string::String,

    /// Optional. The description of the framework. The maximum length is 2000
    /// characters.
    pub description: std::string::String,

    /// Output only. The type of the framework. The default is TYPE_CUSTOM.
    pub r#type: crate::model::framework::FrameworkType,

    /// Optional. The details of the cloud controls directly added without any
    /// grouping in the framework.
    pub cloud_control_details: std::vec::Vec<crate::model::CloudControlDetails>,

    /// Optional. The category of the framework.
    pub category: std::vec::Vec<crate::model::FrameworkCategory>,

    /// Output only. cloud providers supported
    pub supported_cloud_providers: std::vec::Vec<crate::model::CloudProvider>,

    /// Output only. target resource types supported by the Framework.
    pub supported_target_resource_types: std::vec::Vec<crate::model::TargetResourceType>,

    /// Output only. The supported enforcement modes of the framework.
    pub supported_enforcement_modes: std::vec::Vec<crate::model::EnforcementMode>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Framework {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Framework::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [major_revision_id][crate::model::Framework::major_revision_id].
    pub fn set_major_revision_id<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.major_revision_id = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Framework::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Framework::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::Framework::type].
    pub fn set_type<T: std::convert::Into<crate::model::framework::FrameworkType>>(
        mut self,
        v: T,
    ) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [cloud_control_details][crate::model::Framework::cloud_control_details].
    pub fn set_cloud_control_details<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CloudControlDetails>,
    {
        use std::iter::Iterator;
        self.cloud_control_details = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [category][crate::model::Framework::category].
    pub fn set_category<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::FrameworkCategory>,
    {
        use std::iter::Iterator;
        self.category = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [supported_cloud_providers][crate::model::Framework::supported_cloud_providers].
    pub fn set_supported_cloud_providers<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CloudProvider>,
    {
        use std::iter::Iterator;
        self.supported_cloud_providers = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [supported_target_resource_types][crate::model::Framework::supported_target_resource_types].
    pub fn set_supported_target_resource_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TargetResourceType>,
    {
        use std::iter::Iterator;
        self.supported_target_resource_types = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [supported_enforcement_modes][crate::model::Framework::supported_enforcement_modes].
    pub fn set_supported_enforcement_modes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EnforcementMode>,
    {
        use std::iter::Iterator;
        self.supported_enforcement_modes = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Framework {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.Framework"
    }
}

/// Defines additional types related to [Framework].
pub mod framework {
    #[allow(unused_imports)]
    use super::*;

    /// The type of the framework.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum FrameworkType {
        /// Default value. This value is unused.
        Unspecified,
        /// The framework is a built-in framework if it is created and managed by
        /// GCP.
        BuiltIn,
        /// The framework is a custom framework if it is created and managed by the
        /// user.
        Custom,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [FrameworkType::value] or
        /// [FrameworkType::name].
        UnknownValue(framework_type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod framework_type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl FrameworkType {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::BuiltIn => std::option::Option::Some(1),
                Self::Custom => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("FRAMEWORK_TYPE_UNSPECIFIED"),
                Self::BuiltIn => std::option::Option::Some("BUILT_IN"),
                Self::Custom => std::option::Option::Some("CUSTOM"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for FrameworkType {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for FrameworkType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for FrameworkType {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::BuiltIn,
                2 => Self::Custom,
                _ => Self::UnknownValue(framework_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for FrameworkType {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "FRAMEWORK_TYPE_UNSPECIFIED" => Self::Unspecified,
                "BUILT_IN" => Self::BuiltIn,
                "CUSTOM" => Self::Custom,
                _ => Self::UnknownValue(framework_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for FrameworkType {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::BuiltIn => serializer.serialize_i32(1),
                Self::Custom => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for FrameworkType {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<FrameworkType>::new(
                ".google.cloud.cloudsecuritycompliance.v1.Framework.FrameworkType",
            ))
        }
    }
}

/// CloudControlDetails contains the details of a CloudControl.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct CloudControlDetails {
    /// Required. The name of the CloudControl in the format:
    /// “organizations/{organization}/locations/{location}/
    /// cloudControls/{cloud-control}”
    pub name: std::string::String,

    /// Required. Major revision of cloudcontrol
    pub major_revision_id: i64,

    /// Optional. Parameters is a key-value pair that is required by the
    /// CloudControl. The specification of these parameters will be present in
    /// cloudcontrol.Eg: { "name": "location","value": "us-west-1"}.
    pub parameters: std::vec::Vec<crate::model::Parameter>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CloudControlDetails {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::CloudControlDetails::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [major_revision_id][crate::model::CloudControlDetails::major_revision_id].
    pub fn set_major_revision_id<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.major_revision_id = v.into();
        self
    }

    /// Sets the value of [parameters][crate::model::CloudControlDetails::parameters].
    pub fn set_parameters<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Parameter>,
    {
        use std::iter::Iterator;
        self.parameters = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CloudControlDetails {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.CloudControlDetails"
    }
}

/// FrameworkReference contains the reference of a framework.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct FrameworkReference {
    /// Required. In the format:
    /// organizations/{org}/locations/{location}/frameworks/{framework}
    pub framework: std::string::String,

    /// Optional. Major revision id of the framework. If not specified, corresponds
    /// to the latest revision of the framework.
    pub major_revision_id: std::option::Option<i64>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl FrameworkReference {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [framework][crate::model::FrameworkReference::framework].
    pub fn set_framework<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.framework = v.into();
        self
    }

    /// Sets the value of [major_revision_id][crate::model::FrameworkReference::major_revision_id].
    pub fn set_major_revision_id<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<i64>,
    {
        self.major_revision_id = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [major_revision_id][crate::model::FrameworkReference::major_revision_id].
    pub fn set_or_clear_major_revision_id<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<i64>,
    {
        self.major_revision_id = v.map(|x| x.into());
        self
    }
}

impl wkt::message::Message for FrameworkReference {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.FrameworkReference"
    }
}

/// Parameters is a key-value pair.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct Parameter {
    /// Required. The name of the parameter.
    pub name: std::string::String,

    /// Required. The value of the parameter
    pub parameter_value: std::option::Option<std::boxed::Box<crate::model::ParamValue>>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Parameter {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Parameter::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [parameter_value][crate::model::Parameter::parameter_value].
    pub fn set_parameter_value<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::ParamValue>,
    {
        self.parameter_value = std::option::Option::Some(std::boxed::Box::new(v.into()));
        self
    }

    /// Sets or clears the value of [parameter_value][crate::model::Parameter::parameter_value].
    pub fn set_or_clear_parameter_value<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::ParamValue>,
    {
        self.parameter_value = v.map(|x| std::boxed::Box::new(x.into()));
        self
    }
}

impl wkt::message::Message for Parameter {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.Parameter"
    }
}

/// A CloudControl is the fundamental unit encapsulating the rules
/// to meet a specific security or compliance intent. It can contain
/// various rule types (like Organization Policies, CEL expressions, etc.)
/// enabling different enforcement modes (Preventive, Detective, Audit).
/// CloudControls are often parameterized for reusability and can be either
/// BUILT_IN (provided by Google) or CUSTOM (defined by the user).
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct CloudControl {
    /// Required. Identifier. The resource name of the cloud control.
    /// Format:
    /// organizations/{organization}/locations/{location}/cloudControls/{cloud_control_id}
    pub name: std::string::String,

    /// Output only. Major revision of the cloud control incremented in ascending
    /// order.
    pub major_revision_id: i64,

    /// Optional. A description of the cloud control. The maximum length is 2000
    /// characters.
    pub description: std::string::String,

    /// Optional. The display name of the cloud control. The maximum length is 200
    /// characters.
    pub display_name: std::string::String,

    /// Output only. The supported enforcement mode of the cloud control. Default
    /// is DETECTIVE.
    pub supported_enforcement_modes: std::vec::Vec<crate::model::EnforcementMode>,

    /// Optional. The parameter spec of the cloud control.
    pub parameter_spec: std::vec::Vec<crate::model::ParameterSpec>,

    /// Optional. The Policy to be enforced to prevent/detect resource
    /// non-compliance.
    pub rules: std::vec::Vec<crate::model::Rule>,

    /// Optional. The severity of findings generated by the cloud control.
    pub severity: crate::model::Severity,

    /// Optional. The finding_category of the cloud control. The maximum length is
    /// 255 characters.
    pub finding_category: std::string::String,

    /// Optional. cloud providers supported
    pub supported_cloud_providers: std::vec::Vec<crate::model::CloudProvider>,

    /// Output only. The Frameworks that include this CloudControl
    pub related_frameworks: std::vec::Vec<std::string::String>,

    /// Optional. The remediation steps for the findings generated by the cloud
    /// control. The maximum length is 400 characters.
    pub remediation_steps: std::string::String,

    /// Optional. The categories of the cloud control.
    pub categories: std::vec::Vec<crate::model::CloudControlCategory>,

    /// Output only. The last updated time of the cloud control.
    /// The create_time is used because a new CC is created whenever we update an
    /// existing CC.
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Optional. target resource types supported by the CloudControl.
    pub supported_target_resource_types: std::vec::Vec<crate::model::TargetResourceType>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CloudControl {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::CloudControl::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [major_revision_id][crate::model::CloudControl::major_revision_id].
    pub fn set_major_revision_id<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.major_revision_id = v.into();
        self
    }

    /// Sets the value of [description][crate::model::CloudControl::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::CloudControl::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [supported_enforcement_modes][crate::model::CloudControl::supported_enforcement_modes].
    pub fn set_supported_enforcement_modes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EnforcementMode>,
    {
        use std::iter::Iterator;
        self.supported_enforcement_modes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [parameter_spec][crate::model::CloudControl::parameter_spec].
    pub fn set_parameter_spec<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ParameterSpec>,
    {
        use std::iter::Iterator;
        self.parameter_spec = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [rules][crate::model::CloudControl::rules].
    pub fn set_rules<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Rule>,
    {
        use std::iter::Iterator;
        self.rules = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [severity][crate::model::CloudControl::severity].
    pub fn set_severity<T: std::convert::Into<crate::model::Severity>>(mut self, v: T) -> Self {
        self.severity = v.into();
        self
    }

    /// Sets the value of [finding_category][crate::model::CloudControl::finding_category].
    pub fn set_finding_category<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.finding_category = v.into();
        self
    }

    /// Sets the value of [supported_cloud_providers][crate::model::CloudControl::supported_cloud_providers].
    pub fn set_supported_cloud_providers<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CloudProvider>,
    {
        use std::iter::Iterator;
        self.supported_cloud_providers = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [related_frameworks][crate::model::CloudControl::related_frameworks].
    pub fn set_related_frameworks<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.related_frameworks = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [remediation_steps][crate::model::CloudControl::remediation_steps].
    pub fn set_remediation_steps<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.remediation_steps = v.into();
        self
    }

    /// Sets the value of [categories][crate::model::CloudControl::categories].
    pub fn set_categories<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CloudControlCategory>,
    {
        use std::iter::Iterator;
        self.categories = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [create_time][crate::model::CloudControl::create_time].
    pub fn set_create_time<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::Timestamp>,
    {
        self.create_time = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [create_time][crate::model::CloudControl::create_time].
    pub fn set_or_clear_create_time<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::Timestamp>,
    {
        self.create_time = v.map(|x| x.into());
        self
    }

    /// Sets the value of [supported_target_resource_types][crate::model::CloudControl::supported_target_resource_types].
    pub fn set_supported_target_resource_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TargetResourceType>,
    {
        use std::iter::Iterator;
        self.supported_target_resource_types = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CloudControl {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.CloudControl"
    }
}

/// A parameter spec of the cloud control.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct ParameterSpec {
    /// Required. The name of the parameter.
    pub name: std::string::String,

    /// Optional. The display name of the parameter. The maximum length is 200
    /// characters.
    pub display_name: std::string::String,

    /// Optional. The description of the parameter. The maximum length is 2000
    /// characters.
    pub description: std::string::String,

    /// Required. if the parameter is required
    pub is_required: bool,

    /// Required. Parameter value type.
    pub value_type: crate::model::parameter_spec::ValueType,

    /// Optional. The default value of the parameter.
    pub default_value: std::option::Option<crate::model::ParamValue>,

    /// Optional. List of parameter substitutions.
    pub substitution_rules: std::vec::Vec<crate::model::ParameterSubstitutionRule>,

    /// Optional. ParameterSpec for oneof attributes.
    pub sub_parameters: std::vec::Vec<crate::model::ParameterSpec>,

    /// Optional. The allowed set of values for the parameter.
    pub validation: std::option::Option<crate::model::Validation>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ParameterSpec {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ParameterSpec::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::ParameterSpec::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::ParameterSpec::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [is_required][crate::model::ParameterSpec::is_required].
    pub fn set_is_required<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.is_required = v.into();
        self
    }

    /// Sets the value of [value_type][crate::model::ParameterSpec::value_type].
    pub fn set_value_type<T: std::convert::Into<crate::model::parameter_spec::ValueType>>(
        mut self,
        v: T,
    ) -> Self {
        self.value_type = v.into();
        self
    }

    /// Sets the value of [default_value][crate::model::ParameterSpec::default_value].
    pub fn set_default_value<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::ParamValue>,
    {
        self.default_value = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [default_value][crate::model::ParameterSpec::default_value].
    pub fn set_or_clear_default_value<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::ParamValue>,
    {
        self.default_value = v.map(|x| x.into());
        self
    }

    /// Sets the value of [substitution_rules][crate::model::ParameterSpec::substitution_rules].
    pub fn set_substitution_rules<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ParameterSubstitutionRule>,
    {
        use std::iter::Iterator;
        self.substitution_rules = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [sub_parameters][crate::model::ParameterSpec::sub_parameters].
    pub fn set_sub_parameters<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ParameterSpec>,
    {
        use std::iter::Iterator;
        self.sub_parameters = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [validation][crate::model::ParameterSpec::validation].
    pub fn set_validation<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::Validation>,
    {
        self.validation = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [validation][crate::model::ParameterSpec::validation].
    pub fn set_or_clear_validation<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::Validation>,
    {
        self.validation = v.map(|x| x.into());
        self
    }
}

impl wkt::message::Message for ParameterSpec {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.ParameterSpec"
    }
}

/// Defines additional types related to [ParameterSpec].
pub mod parameter_spec {
    #[allow(unused_imports)]
    use super::*;

    /// The type of the parameter value.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum ValueType {
        /// Default value. This value is unused.
        Unspecified,
        /// String value.
        String,
        /// Boolean value.
        Boolean,
        /// String list value.
        Stringlist,
        /// Numeric value.
        Number,
        /// OneOf value.
        Oneof,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [ValueType::value] or
        /// [ValueType::name].
        UnknownValue(value_type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod value_type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl ValueType {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::String => std::option::Option::Some(3),
                Self::Boolean => std::option::Option::Some(4),
                Self::Stringlist => std::option::Option::Some(5),
                Self::Number => std::option::Option::Some(6),
                Self::Oneof => std::option::Option::Some(7),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("VALUE_TYPE_UNSPECIFIED"),
                Self::String => std::option::Option::Some("STRING"),
                Self::Boolean => std::option::Option::Some("BOOLEAN"),
                Self::Stringlist => std::option::Option::Some("STRINGLIST"),
                Self::Number => std::option::Option::Some("NUMBER"),
                Self::Oneof => std::option::Option::Some("ONEOF"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for ValueType {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for ValueType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for ValueType {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                3 => Self::String,
                4 => Self::Boolean,
                5 => Self::Stringlist,
                6 => Self::Number,
                7 => Self::Oneof,
                _ => Self::UnknownValue(value_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for ValueType {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "VALUE_TYPE_UNSPECIFIED" => Self::Unspecified,
                "STRING" => Self::String,
                "BOOLEAN" => Self::Boolean,
                "STRINGLIST" => Self::Stringlist,
                "NUMBER" => Self::Number,
                "ONEOF" => Self::Oneof,
                _ => Self::UnknownValue(value_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for ValueType {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::String => serializer.serialize_i32(3),
                Self::Boolean => serializer.serialize_i32(4),
                Self::Stringlist => serializer.serialize_i32(5),
                Self::Number => serializer.serialize_i32(6),
                Self::Oneof => serializer.serialize_i32(7),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for ValueType {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<ValueType>::new(
                ".google.cloud.cloudsecuritycompliance.v1.ParameterSpec.ValueType",
            ))
        }
    }
}

/// Validation of the parameter.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct Validation {
    /// Defines validators for parameter values.
    pub constraint: std::option::Option<crate::model::validation::Constraint>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Validation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [constraint][crate::model::Validation::constraint].
    ///
    /// Note that all the setters affecting `constraint` are mutually
    /// exclusive.
    pub fn set_constraint<
        T: std::convert::Into<std::option::Option<crate::model::validation::Constraint>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.constraint = v.into();
        self
    }

    /// The value of [constraint][crate::model::Validation::constraint]
    /// if it holds a `AllowedValues`, `None` if the field is not set or
    /// holds a different branch.
    pub fn allowed_values(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::AllowedValues>> {
        #[allow(unreachable_patterns)]
        self.constraint.as_ref().and_then(|v| match v {
            crate::model::validation::Constraint::AllowedValues(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [constraint][crate::model::Validation::constraint]
    /// to hold a `AllowedValues`.
    ///
    /// Note that all the setters affecting `constraint` are
    /// mutually exclusive.
    pub fn set_allowed_values<
        T: std::convert::Into<std::boxed::Box<crate::model::AllowedValues>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.constraint = std::option::Option::Some(
            crate::model::validation::Constraint::AllowedValues(v.into()),
        );
        self
    }

    /// The value of [constraint][crate::model::Validation::constraint]
    /// if it holds a `IntRange`, `None` if the field is not set or
    /// holds a different branch.
    pub fn int_range(&self) -> std::option::Option<&std::boxed::Box<crate::model::IntRange>> {
        #[allow(unreachable_patterns)]
        self.constraint.as_ref().and_then(|v| match v {
            crate::model::validation::Constraint::IntRange(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [constraint][crate::model::Validation::constraint]
    /// to hold a `IntRange`.
    ///
    /// Note that all the setters affecting `constraint` are
    /// mutually exclusive.
    pub fn set_int_range<T: std::convert::Into<std::boxed::Box<crate::model::IntRange>>>(
        mut self,
        v: T,
    ) -> Self {
        self.constraint =
            std::option::Option::Some(crate::model::validation::Constraint::IntRange(v.into()));
        self
    }

    /// The value of [constraint][crate::model::Validation::constraint]
    /// if it holds a `RegexpPattern`, `None` if the field is not set or
    /// holds a different branch.
    pub fn regexp_pattern(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::RegexpPattern>> {
        #[allow(unreachable_patterns)]
        self.constraint.as_ref().and_then(|v| match v {
            crate::model::validation::Constraint::RegexpPattern(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [constraint][crate::model::Validation::constraint]
    /// to hold a `RegexpPattern`.
    ///
    /// Note that all the setters affecting `constraint` are
    /// mutually exclusive.
    pub fn set_regexp_pattern<
        T: std::convert::Into<std::boxed::Box<crate::model::RegexpPattern>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.constraint = std::option::Option::Some(
            crate::model::validation::Constraint::RegexpPattern(v.into()),
        );
        self
    }
}

impl wkt::message::Message for Validation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.Validation"
    }
}

/// Defines additional types related to [Validation].
pub mod validation {
    #[allow(unused_imports)]
    use super::*;

    /// Defines validators for parameter values.
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Constraint {
        /// Allowed set of values for the parameter.
        AllowedValues(std::boxed::Box<crate::model::AllowedValues>),
        /// Allowed range for numeric parameters.
        IntRange(std::boxed::Box<crate::model::IntRange>),
        /// Regular expression for string parameters.
        RegexpPattern(std::boxed::Box<crate::model::RegexpPattern>),
    }
}

/// Allowed set of values for the parameter.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct AllowedValues {
    /// Required. List of allowed values for the parameter.
    pub values: std::vec::Vec<crate::model::ParamValue>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AllowedValues {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [values][crate::model::AllowedValues::values].
    pub fn set_values<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ParamValue>,
    {
        use std::iter::Iterator;
        self.values = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for AllowedValues {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.AllowedValues"
    }
}

/// Regular Expression Validator for parameter values.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct RegexpPattern {
    /// Required. Regex Pattern to match the value(s) of parameter.
    pub pattern: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RegexpPattern {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [pattern][crate::model::RegexpPattern::pattern].
    pub fn set_pattern<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.pattern = v.into();
        self
    }
}

impl wkt::message::Message for RegexpPattern {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.RegexpPattern"
    }
}

/// Number range for number parameters.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct IntRange {
    /// Required. Minimum allowed value for the numeric parameter (inclusive).
    pub min: i64,

    /// Required. Maximum allowed value for the numeric parameter (inclusive).
    pub max: i64,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl IntRange {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [min][crate::model::IntRange::min].
    pub fn set_min<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.min = v.into();
        self
    }

    /// Sets the value of [max][crate::model::IntRange::max].
    pub fn set_max<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.max = v.into();
        self
    }
}

impl wkt::message::Message for IntRange {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.IntRange"
    }
}

/// A list of strings.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct StringList {
    /// Required. The strings in the list.
    pub values: std::vec::Vec<std::string::String>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl StringList {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [values][crate::model::StringList::values].
    pub fn set_values<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.values = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for StringList {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.StringList"
    }
}

/// Possible parameter value types.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct ParamValue {
    /// The kind of value.
    pub kind: std::option::Option<crate::model::param_value::Kind>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ParamValue {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [kind][crate::model::ParamValue::kind].
    ///
    /// Note that all the setters affecting `kind` are mutually
    /// exclusive.
    pub fn set_kind<T: std::convert::Into<std::option::Option<crate::model::param_value::Kind>>>(
        mut self,
        v: T,
    ) -> Self {
        self.kind = v.into();
        self
    }

    /// The value of [kind][crate::model::ParamValue::kind]
    /// if it holds a `StringValue`, `None` if the field is not set or
    /// holds a different branch.
    pub fn string_value(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.kind.as_ref().and_then(|v| match v {
            crate::model::param_value::Kind::StringValue(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [kind][crate::model::ParamValue::kind]
    /// to hold a `StringValue`.
    ///
    /// Note that all the setters affecting `kind` are
    /// mutually exclusive.
    pub fn set_string_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.kind =
            std::option::Option::Some(crate::model::param_value::Kind::StringValue(v.into()));
        self
    }

    /// The value of [kind][crate::model::ParamValue::kind]
    /// if it holds a `BoolValue`, `None` if the field is not set or
    /// holds a different branch.
    pub fn bool_value(&self) -> std::option::Option<&bool> {
        #[allow(unreachable_patterns)]
        self.kind.as_ref().and_then(|v| match v {
            crate::model::param_value::Kind::BoolValue(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [kind][crate::model::ParamValue::kind]
    /// to hold a `BoolValue`.
    ///
    /// Note that all the setters affecting `kind` are
    /// mutually exclusive.
    pub fn set_bool_value<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.kind = std::option::Option::Some(crate::model::param_value::Kind::BoolValue(v.into()));
        self
    }

    /// The value of [kind][crate::model::ParamValue::kind]
    /// if it holds a `StringListValue`, `None` if the field is not set or
    /// holds a different branch.
    pub fn string_list_value(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::StringList>> {
        #[allow(unreachable_patterns)]
        self.kind.as_ref().and_then(|v| match v {
            crate::model::param_value::Kind::StringListValue(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [kind][crate::model::ParamValue::kind]
    /// to hold a `StringListValue`.
    ///
    /// Note that all the setters affecting `kind` are
    /// mutually exclusive.
    pub fn set_string_list_value<
        T: std::convert::Into<std::boxed::Box<crate::model::StringList>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.kind =
            std::option::Option::Some(crate::model::param_value::Kind::StringListValue(v.into()));
        self
    }

    /// The value of [kind][crate::model::ParamValue::kind]
    /// if it holds a `NumberValue`, `None` if the field is not set or
    /// holds a different branch.
    pub fn number_value(&self) -> std::option::Option<&f64> {
        #[allow(unreachable_patterns)]
        self.kind.as_ref().and_then(|v| match v {
            crate::model::param_value::Kind::NumberValue(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [kind][crate::model::ParamValue::kind]
    /// to hold a `NumberValue`.
    ///
    /// Note that all the setters affecting `kind` are
    /// mutually exclusive.
    pub fn set_number_value<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.kind =
            std::option::Option::Some(crate::model::param_value::Kind::NumberValue(v.into()));
        self
    }

    /// The value of [kind][crate::model::ParamValue::kind]
    /// if it holds a `OneofValue`, `None` if the field is not set or
    /// holds a different branch.
    pub fn oneof_value(&self) -> std::option::Option<&std::boxed::Box<crate::model::Parameter>> {
        #[allow(unreachable_patterns)]
        self.kind.as_ref().and_then(|v| match v {
            crate::model::param_value::Kind::OneofValue(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [kind][crate::model::ParamValue::kind]
    /// to hold a `OneofValue`.
    ///
    /// Note that all the setters affecting `kind` are
    /// mutually exclusive.
    pub fn set_oneof_value<T: std::convert::Into<std::boxed::Box<crate::model::Parameter>>>(
        mut self,
        v: T,
    ) -> Self {
        self.kind =
            std::option::Option::Some(crate::model::param_value::Kind::OneofValue(v.into()));
        self
    }
}

impl wkt::message::Message for ParamValue {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.ParamValue"
    }
}

/// Defines additional types related to [ParamValue].
pub mod param_value {
    #[allow(unused_imports)]
    use super::*;

    /// The kind of value.
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Kind {
        /// Represents a string value.
        StringValue(std::string::String),
        /// Represents a boolean value.
        BoolValue(bool),
        /// Represents a repeated string.
        StringListValue(std::boxed::Box<crate::model::StringList>),
        /// Represents a double value.
        NumberValue(f64),
        /// Represents sub-parameter values.
        OneofValue(std::boxed::Box<crate::model::Parameter>),
    }
}

/// Parameter substitution rules.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct ParameterSubstitutionRule {
    /// The type of substitution.
    pub substitution_type:
        std::option::Option<crate::model::parameter_substitution_rule::SubstitutionType>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ParameterSubstitutionRule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [substitution_type][crate::model::ParameterSubstitutionRule::substitution_type].
    ///
    /// Note that all the setters affecting `substitution_type` are mutually
    /// exclusive.
    pub fn set_substitution_type<
        T: std::convert::Into<
                std::option::Option<crate::model::parameter_substitution_rule::SubstitutionType>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.substitution_type = v.into();
        self
    }

    /// The value of [substitution_type][crate::model::ParameterSubstitutionRule::substitution_type]
    /// if it holds a `PlaceholderSubstitutionRule`, `None` if the field is not set or
    /// holds a different branch.
    pub fn placeholder_substitution_rule(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::PlaceholderSubstitutionRule>> {
        #[allow(unreachable_patterns)]
        self.substitution_type.as_ref().and_then(|v| match v {
            crate::model::parameter_substitution_rule::SubstitutionType::PlaceholderSubstitutionRule(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [substitution_type][crate::model::ParameterSubstitutionRule::substitution_type]
    /// to hold a `PlaceholderSubstitutionRule`.
    ///
    /// Note that all the setters affecting `substitution_type` are
    /// mutually exclusive.
    pub fn set_placeholder_substitution_rule<
        T: std::convert::Into<std::boxed::Box<crate::model::PlaceholderSubstitutionRule>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.substitution_type = std::option::Option::Some(
            crate::model::parameter_substitution_rule::SubstitutionType::PlaceholderSubstitutionRule(
                v.into()
            )
        );
        self
    }

    /// The value of [substitution_type][crate::model::ParameterSubstitutionRule::substitution_type]
    /// if it holds a `AttributeSubstitutionRule`, `None` if the field is not set or
    /// holds a different branch.
    pub fn attribute_substitution_rule(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::AttributeSubstitutionRule>> {
        #[allow(unreachable_patterns)]
        self.substitution_type.as_ref().and_then(|v| match v {
            crate::model::parameter_substitution_rule::SubstitutionType::AttributeSubstitutionRule(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [substitution_type][crate::model::ParameterSubstitutionRule::substitution_type]
    /// to hold a `AttributeSubstitutionRule`.
    ///
    /// Note that all the setters affecting `substitution_type` are
    /// mutually exclusive.
    pub fn set_attribute_substitution_rule<
        T: std::convert::Into<std::boxed::Box<crate::model::AttributeSubstitutionRule>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.substitution_type = std::option::Option::Some(
            crate::model::parameter_substitution_rule::SubstitutionType::AttributeSubstitutionRule(
                v.into(),
            ),
        );
        self
    }
}

impl wkt::message::Message for ParameterSubstitutionRule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.ParameterSubstitutionRule"
    }
}

/// Defines additional types related to [ParameterSubstitutionRule].
pub mod parameter_substitution_rule {
    #[allow(unused_imports)]
    use super::*;

    /// The type of substitution.
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum SubstitutionType {
        /// Placeholder substitution rule.
        PlaceholderSubstitutionRule(std::boxed::Box<crate::model::PlaceholderSubstitutionRule>),
        /// Attribute substitution rule.
        AttributeSubstitutionRule(std::boxed::Box<crate::model::AttributeSubstitutionRule>),
    }
}

/// Attribute at the given path is substituted entirely.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct AttributeSubstitutionRule {
    /// Fully qualified proto attribute path (in dot notation).
    /// Example: rules[0].cel_expression.resource_types_values
    pub attribute: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AttributeSubstitutionRule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [attribute][crate::model::AttributeSubstitutionRule::attribute].
    pub fn set_attribute<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.attribute = v.into();
        self
    }
}

impl wkt::message::Message for AttributeSubstitutionRule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.AttributeSubstitutionRule"
    }
}

/// Placeholder is substituted in the rendered string.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct PlaceholderSubstitutionRule {
    /// Fully qualified proto attribute path (e.g., dot notation)
    pub attribute: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl PlaceholderSubstitutionRule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [attribute][crate::model::PlaceholderSubstitutionRule::attribute].
    pub fn set_attribute<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.attribute = v.into();
        self
    }
}

impl wkt::message::Message for PlaceholderSubstitutionRule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.PlaceholderSubstitutionRule"
    }
}

/// A rule of the cloud control.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct Rule {
    /// Optional. Description of the Rule. The maximum length is 2000 characters.
    pub description: std::string::String,

    /// Required. The functionality enabled by the Rule.
    pub rule_action_types: std::vec::Vec<crate::model::RuleActionType>,

    /// The implementation of the rule.
    pub implementation: std::option::Option<crate::model::rule::Implementation>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Rule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [description][crate::model::Rule::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [rule_action_types][crate::model::Rule::rule_action_types].
    pub fn set_rule_action_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::RuleActionType>,
    {
        use std::iter::Iterator;
        self.rule_action_types = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [implementation][crate::model::Rule::implementation].
    ///
    /// Note that all the setters affecting `implementation` are mutually
    /// exclusive.
    pub fn set_implementation<
        T: std::convert::Into<std::option::Option<crate::model::rule::Implementation>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.implementation = v.into();
        self
    }

    /// The value of [implementation][crate::model::Rule::implementation]
    /// if it holds a `CelExpression`, `None` if the field is not set or
    /// holds a different branch.
    pub fn cel_expression(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::CELExpression>> {
        #[allow(unreachable_patterns)]
        self.implementation.as_ref().and_then(|v| match v {
            crate::model::rule::Implementation::CelExpression(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [implementation][crate::model::Rule::implementation]
    /// to hold a `CelExpression`.
    ///
    /// Note that all the setters affecting `implementation` are
    /// mutually exclusive.
    pub fn set_cel_expression<
        T: std::convert::Into<std::boxed::Box<crate::model::CELExpression>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.implementation =
            std::option::Option::Some(crate::model::rule::Implementation::CelExpression(v.into()));
        self
    }
}

impl wkt::message::Message for Rule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.Rule"
    }
}

/// Defines additional types related to [Rule].
pub mod rule {
    #[allow(unused_imports)]
    use super::*;

    /// The implementation of the rule.
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Implementation {
        /// Logic expression in CEL language.
        CelExpression(std::boxed::Box<crate::model::CELExpression>),
    }
}

/// A [CEL
/// expression](https://cloud.google.com/certificate-authority-service/docs/using-cel).
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct CELExpression {
    /// Required. Logic expression in CEL language.
    /// The max length of the condition is 1000 characters.
    pub expression: std::string::String,

    /// The criteria of the CEL expression.
    pub criteria: std::option::Option<crate::model::cel_expression::Criteria>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CELExpression {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [expression][crate::model::CELExpression::expression].
    pub fn set_expression<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.expression = v.into();
        self
    }

    /// Sets the value of [criteria][crate::model::CELExpression::criteria].
    ///
    /// Note that all the setters affecting `criteria` are mutually
    /// exclusive.
    pub fn set_criteria<
        T: std::convert::Into<std::option::Option<crate::model::cel_expression::Criteria>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.criteria = v.into();
        self
    }

    /// The value of [criteria][crate::model::CELExpression::criteria]
    /// if it holds a `ResourceTypesValues`, `None` if the field is not set or
    /// holds a different branch.
    pub fn resource_types_values(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::StringList>> {
        #[allow(unreachable_patterns)]
        self.criteria.as_ref().and_then(|v| match v {
            crate::model::cel_expression::Criteria::ResourceTypesValues(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [criteria][crate::model::CELExpression::criteria]
    /// to hold a `ResourceTypesValues`.
    ///
    /// Note that all the setters affecting `criteria` are
    /// mutually exclusive.
    pub fn set_resource_types_values<
        T: std::convert::Into<std::boxed::Box<crate::model::StringList>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.criteria = std::option::Option::Some(
            crate::model::cel_expression::Criteria::ResourceTypesValues(v.into()),
        );
        self
    }
}

impl wkt::message::Message for CELExpression {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.CELExpression"
    }
}

/// Defines additional types related to [CELExpression].
pub mod cel_expression {
    #[allow(unused_imports)]
    use super::*;

    /// The criteria of the CEL expression.
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Criteria {
        /// The resource instance types on which this expression is defined.
        /// Format will be of the form : `<canonical service name>/<type>`
        /// Example: `compute.googleapis.com/Instance`.
        ResourceTypesValues(std::boxed::Box<crate::model::StringList>),
    }
}

/// Represents the metadata of the long-running operation.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation finished running.
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Server-defined resource path for the target of the operation.
    pub target: std::string::String,

    /// Output only. Name of the verb executed by the operation.
    pub verb: std::string::String,

    /// Output only. Human-readable status of the operation, if any.
    pub status_message: std::string::String,

    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have been cancelled successfully
    /// have [Operation.error][] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    ///
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub requested_cancellation: bool,

    /// Output only. API version used to start the operation.
    pub api_version: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl OperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_create_time<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::Timestamp>,
    {
        self.create_time = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_or_clear_create_time<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::Timestamp>,
    {
        self.create_time = v.map(|x| x.into());
        self
    }

    /// Sets the value of [end_time][crate::model::OperationMetadata::end_time].
    pub fn set_end_time<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::Timestamp>,
    {
        self.end_time = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [end_time][crate::model::OperationMetadata::end_time].
    pub fn set_or_clear_end_time<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::Timestamp>,
    {
        self.end_time = v.map(|x| x.into());
        self
    }

    /// Sets the value of [target][crate::model::OperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::OperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_message][crate::model::OperationMetadata::status_message].
    pub fn set_status_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_message = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::OperationMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::OperationMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }
}

impl wkt::message::Message for OperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.OperationMetadata"
    }
}

/// Request message for listing Frameworks.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct ListFrameworksRequest {
    /// Required. The parent resource name, in the format
    /// `organizations/{organization}/locations/{location}`.
    /// Only global location is supported.
    pub parent: std::string::String,

    /// Optional. The maximum number of frameworks to return. The default value is
    /// `500`.
    ///
    /// If you exceed the maximum value of `1000`, then the service uses the
    /// maximum value.
    pub page_size: i32,

    /// Optional. A pagination token returned from a previous request to list
    /// frameworks. Provide this token to retrieve the next page of results.
    pub page_token: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListFrameworksRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListFrameworksRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListFrameworksRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListFrameworksRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListFrameworksRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.ListFrameworksRequest"
    }
}

/// Response message for listing Frameworks.
/// Contains a paginated list of Framework resources.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct ListFrameworksResponse {
    /// The list of Framework resources.
    pub frameworks: std::vec::Vec<crate::model::Framework>,

    /// A pagination token. To retrieve the next page of results, call the method
    /// again with this token.
    pub next_page_token: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListFrameworksResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [frameworks][crate::model::ListFrameworksResponse::frameworks].
    pub fn set_frameworks<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Framework>,
    {
        use std::iter::Iterator;
        self.frameworks = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [next_page_token][crate::model::ListFrameworksResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListFrameworksResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.ListFrameworksResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListFrameworksResponse {
    type PageItem = crate::model::Framework;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.frameworks
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request message for getting a Framework.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct GetFrameworkRequest {
    /// Required. The name of the framework to retrieve.
    /// Format:
    /// organizations/{organization}/locations/{location}/frameworks/{framework_id}
    pub name: std::string::String,

    /// Optional. The Framework major version to retrieve. If not specified, the
    /// most recently updated revision_id is retrieved.
    pub major_revision_id: i64,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetFrameworkRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetFrameworkRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [major_revision_id][crate::model::GetFrameworkRequest::major_revision_id].
    pub fn set_major_revision_id<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.major_revision_id = v.into();
        self
    }
}

impl wkt::message::Message for GetFrameworkRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.GetFrameworkRequest"
    }
}

/// Request message for creating a Framework
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct CreateFrameworkRequest {
    /// Required. The parent resource name, in the format
    /// `organizations/{organization}/locations/{location}`.
    pub parent: std::string::String,

    /// Required. ID of the framework.
    /// This is not the full name of the framework.
    /// This is the last part of the full name of the framework.
    pub framework_id: std::string::String,

    /// Required. The resource being created
    pub framework: std::option::Option<crate::model::Framework>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateFrameworkRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateFrameworkRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [framework_id][crate::model::CreateFrameworkRequest::framework_id].
    pub fn set_framework_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.framework_id = v.into();
        self
    }

    /// Sets the value of [framework][crate::model::CreateFrameworkRequest::framework].
    pub fn set_framework<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::Framework>,
    {
        self.framework = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [framework][crate::model::CreateFrameworkRequest::framework].
    pub fn set_or_clear_framework<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::Framework>,
    {
        self.framework = v.map(|x| x.into());
        self
    }
}

impl wkt::message::Message for CreateFrameworkRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.CreateFrameworkRequest"
    }
}

/// Request message for updating a Framework.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct UpdateFrameworkRequest {
    /// Optional. Field mask is used to specify the fields to be overwritten in the
    /// Framework resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields present in the request will be
    /// overwritten.
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The resource being updated
    pub framework: std::option::Option<crate::model::Framework>,

    /// Optional. The major version ID of the framework to update.
    pub major_revision_id: i64,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateFrameworkRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateFrameworkRequest::update_mask].
    pub fn set_update_mask<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::FieldMask>,
    {
        self.update_mask = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [update_mask][crate::model::UpdateFrameworkRequest::update_mask].
    pub fn set_or_clear_update_mask<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::FieldMask>,
    {
        self.update_mask = v.map(|x| x.into());
        self
    }

    /// Sets the value of [framework][crate::model::UpdateFrameworkRequest::framework].
    pub fn set_framework<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::Framework>,
    {
        self.framework = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [framework][crate::model::UpdateFrameworkRequest::framework].
    pub fn set_or_clear_framework<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::Framework>,
    {
        self.framework = v.map(|x| x.into());
        self
    }

    /// Sets the value of [major_revision_id][crate::model::UpdateFrameworkRequest::major_revision_id].
    pub fn set_major_revision_id<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.major_revision_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateFrameworkRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.UpdateFrameworkRequest"
    }
}

/// Request message for deleting a Framework.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct DeleteFrameworkRequest {
    /// Required. Name of the resource, in the format
    /// `organizations/{organization}/locations/{location}/frameworks/{framework}`.
    pub name: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteFrameworkRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteFrameworkRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteFrameworkRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.DeleteFrameworkRequest"
    }
}

/// Request message for listing CloudControls.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct ListCloudControlsRequest {
    /// Required. The parent resource name, in the format
    /// `organizations/{organization}/locations/{location}`.
    pub parent: std::string::String,

    /// Optional. The maximum number of CloudControls to return. The default value
    /// is `500`.
    ///
    /// If you exceed the maximum value of `1000`, then the service uses the
    /// maximum value.
    pub page_size: i32,

    /// Optional. A pagination token returned from a previous request to list
    /// CloudControls. Provide this token to retrieve the next page of results.
    ///
    /// When paginating, parent provided to
    /// ListCloudControls request must match the call that provided the page
    /// token.
    pub page_token: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListCloudControlsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListCloudControlsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListCloudControlsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListCloudControlsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListCloudControlsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.ListCloudControlsRequest"
    }
}

/// Response message for ListCloudControls.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct ListCloudControlsResponse {
    /// The list of CloudControl resources.
    pub cloud_controls: std::vec::Vec<crate::model::CloudControl>,

    /// A pagination token. To retrieve the next page of results, call the method
    /// again with this token.
    pub next_page_token: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListCloudControlsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [cloud_controls][crate::model::ListCloudControlsResponse::cloud_controls].
    pub fn set_cloud_controls<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CloudControl>,
    {
        use std::iter::Iterator;
        self.cloud_controls = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [next_page_token][crate::model::ListCloudControlsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListCloudControlsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.ListCloudControlsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListCloudControlsResponse {
    type PageItem = crate::model::CloudControl;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.cloud_controls
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request message for getting a CloudControl.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct GetCloudControlRequest {
    /// Required. The name of the cloudcontrol to retrieve in the format:
    /// organizations/{organization}/locations/{location}/cloudControls/{cloud_control}
    pub name: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetCloudControlRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetCloudControlRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetCloudControlRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.GetCloudControlRequest"
    }
}

/// Request message for creating a CloudControl
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct CreateCloudControlRequest {
    /// Required. The parent resource name, in the format
    /// `organizations/{organization}/locations/{location}`.
    pub parent: std::string::String,

    /// Required. ID of the CloudControl.
    /// This is the last segment of the CloudControl resource name.
    /// Format: `^[a-zA-Z][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]$`.
    pub cloud_control_id: std::string::String,

    /// Required. The resource being created
    pub cloud_control: std::option::Option<crate::model::CloudControl>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateCloudControlRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateCloudControlRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [cloud_control_id][crate::model::CreateCloudControlRequest::cloud_control_id].
    pub fn set_cloud_control_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.cloud_control_id = v.into();
        self
    }

    /// Sets the value of [cloud_control][crate::model::CreateCloudControlRequest::cloud_control].
    pub fn set_cloud_control<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::CloudControl>,
    {
        self.cloud_control = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [cloud_control][crate::model::CreateCloudControlRequest::cloud_control].
    pub fn set_or_clear_cloud_control<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::CloudControl>,
    {
        self.cloud_control = v.map(|x| x.into());
        self
    }
}

impl wkt::message::Message for CreateCloudControlRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.CreateCloudControlRequest"
    }
}

/// Request message for UpdateCloudControl.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct UpdateCloudControlRequest {
    /// Optional. Field mask is used to specify the fields to be overwritten in the
    /// CloudControl resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields present in the request will be
    /// overwritten. The fields that can be updated are:
    ///
    /// 1. Display_name
    /// 1. Description
    /// 1. Parameters
    /// 1. Rules
    /// 1. ParameterSpec.
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The resource being updated
    pub cloud_control: std::option::Option<crate::model::CloudControl>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateCloudControlRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateCloudControlRequest::update_mask].
    pub fn set_update_mask<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::FieldMask>,
    {
        self.update_mask = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [update_mask][crate::model::UpdateCloudControlRequest::update_mask].
    pub fn set_or_clear_update_mask<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::FieldMask>,
    {
        self.update_mask = v.map(|x| x.into());
        self
    }

    /// Sets the value of [cloud_control][crate::model::UpdateCloudControlRequest::cloud_control].
    pub fn set_cloud_control<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::CloudControl>,
    {
        self.cloud_control = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [cloud_control][crate::model::UpdateCloudControlRequest::cloud_control].
    pub fn set_or_clear_cloud_control<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::CloudControl>,
    {
        self.cloud_control = v.map(|x| x.into());
        self
    }
}

impl wkt::message::Message for UpdateCloudControlRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.UpdateCloudControlRequest"
    }
}

/// Request message for deleting a CloudControl.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct DeleteCloudControlRequest {
    /// Required. Name of the resource, in the format
    /// `organizations/{organization}/locations/{location}/CloudControls/{CloudControl}`.
    pub name: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteCloudControlRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteCloudControlRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteCloudControlRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.DeleteCloudControlRequest"
    }
}

/// FrameworkDeployment represents deployment of a Framework on a target
/// resource. Supported target resources are organizations/{organization},
/// folders/{folder}, and projects/{project}.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct FrameworkDeployment {
    /// Identifier. FrameworkDeployment name in the following format:
    /// organizations/{organization}/locations/{location}/frameworkDeployments/{framework_deployment_id}
    pub name: std::string::String,

    /// Required. The details of the target resource on which the Framework is to
    /// be deployed. It can either be an existing target resource or a new target
    /// resource to be created.
    pub target_resource_config: std::option::Option<crate::model::TargetResourceConfig>,

    /// Output only. The resource on which the Framework is deployed based on the
    /// provided TargetResourceConfig in the following format:
    /// organizations/{organization}, folders/{folder} or projects/{project}
    pub computed_target_resource: std::string::String,

    /// Required. Reference to the framework to be deployed.
    pub framework: std::option::Option<crate::model::FrameworkReference>,

    /// Optional. User provided description of the Framework deployment
    pub description: std::string::String,

    /// Required. Deployment mode and parameters for each of the Cloud Controls in
    /// the framework. Every Cloud Control in the framework must have a
    /// CloudControlMetadata.
    pub cloud_control_metadata: std::vec::Vec<crate::model::CloudControlMetadata>,

    /// Output only. State of the Framework Deployment
    pub deployment_state: crate::model::DeploymentState,

    /// Output only. The time at which the resource was created.
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time at which the resource last updated.
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. To prevent concurrent updates from overwriting each other, always
    /// provide the `etag` when you update a FrameworkDeployment. You can also
    /// provide the `etag` when you delete a FrameworkDeployment, to help
    /// ensure that you're deleting the intended version of the
    /// FrameworkDeployment.
    pub etag: std::string::String,

    /// Output only. The display name of the target resource.
    pub target_resource_display_name: std::string::String,

    /// Output only. The references to the cloud control deployments. It has all
    /// the CloudControlDeployments which are either directly added in the
    /// framework or through a CloudControlGroup. Example: If a framework
    /// deployment deploys two cloud controls, cc-deployment-1 and cc-deployment-2,
    /// then the cloud_control_deployment_references will be:
    /// {
    /// cloud_control_deployment_reference: {
    /// cloud_control_deployment:
    /// "organizations/{organization}/locations/{location}/cloudControlDeployments/cc-deployment-1"
    /// },
    /// cloud_control_deployment_reference: {
    /// cloud_control_deployment:
    /// "organizations/{organization}/locations/{location}/cloudControlDeployments/cc-deployment-2"
    /// }
    pub cloud_control_deployment_references:
        std::vec::Vec<crate::model::CloudControlDeploymentReference>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl FrameworkDeployment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::FrameworkDeployment::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [target_resource_config][crate::model::FrameworkDeployment::target_resource_config].
    pub fn set_target_resource_config<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::TargetResourceConfig>,
    {
        self.target_resource_config = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [target_resource_config][crate::model::FrameworkDeployment::target_resource_config].
    pub fn set_or_clear_target_resource_config<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::TargetResourceConfig>,
    {
        self.target_resource_config = v.map(|x| x.into());
        self
    }

    /// Sets the value of [computed_target_resource][crate::model::FrameworkDeployment::computed_target_resource].
    pub fn set_computed_target_resource<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.computed_target_resource = v.into();
        self
    }

    /// Sets the value of [framework][crate::model::FrameworkDeployment::framework].
    pub fn set_framework<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::FrameworkReference>,
    {
        self.framework = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [framework][crate::model::FrameworkDeployment::framework].
    pub fn set_or_clear_framework<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::FrameworkReference>,
    {
        self.framework = v.map(|x| x.into());
        self
    }

    /// Sets the value of [description][crate::model::FrameworkDeployment::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [cloud_control_metadata][crate::model::FrameworkDeployment::cloud_control_metadata].
    pub fn set_cloud_control_metadata<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CloudControlMetadata>,
    {
        use std::iter::Iterator;
        self.cloud_control_metadata = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [deployment_state][crate::model::FrameworkDeployment::deployment_state].
    pub fn set_deployment_state<T: std::convert::Into<crate::model::DeploymentState>>(
        mut self,
        v: T,
    ) -> Self {
        self.deployment_state = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::FrameworkDeployment::create_time].
    pub fn set_create_time<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::Timestamp>,
    {
        self.create_time = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [create_time][crate::model::FrameworkDeployment::create_time].
    pub fn set_or_clear_create_time<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::Timestamp>,
    {
        self.create_time = v.map(|x| x.into());
        self
    }

    /// Sets the value of [update_time][crate::model::FrameworkDeployment::update_time].
    pub fn set_update_time<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::Timestamp>,
    {
        self.update_time = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [update_time][crate::model::FrameworkDeployment::update_time].
    pub fn set_or_clear_update_time<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::Timestamp>,
    {
        self.update_time = v.map(|x| x.into());
        self
    }

    /// Sets the value of [etag][crate::model::FrameworkDeployment::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of [target_resource_display_name][crate::model::FrameworkDeployment::target_resource_display_name].
    pub fn set_target_resource_display_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.target_resource_display_name = v.into();
        self
    }

    /// Sets the value of [cloud_control_deployment_references][crate::model::FrameworkDeployment::cloud_control_deployment_references].
    pub fn set_cloud_control_deployment_references<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CloudControlDeploymentReference>,
    {
        use std::iter::Iterator;
        self.cloud_control_deployment_references = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for FrameworkDeployment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.FrameworkDeployment"
    }
}

/// CloudControlDeployment represents deployment of a CloudControl on a target
/// resource. Supported target resources are organizations/{organization},
/// folders/{folder}, and projects/{project}.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct CloudControlDeployment {
    /// Identifier. CloudControlDeployment name in the following format:
    /// organizations/{organization}/locations/{location}/cloudControlDeployments/{cloud_control_deployment_id}
    pub name: std::string::String,

    /// Required. The details of the target resource on which the CloudControl is
    /// to be deployed. It can either be an existing target resource or a new
    /// target resource to be created.
    pub target_resource_config: std::option::Option<crate::model::TargetResourceConfig>,

    /// Output only. The resource on which the CloudControl is deployed based on
    /// the provided TargetResourceConfig in the following format:
    /// organizations/{organization}, folders/{folder} or projects/{project}.
    pub target_resource: std::string::String,

    /// Required. Deployment mode and parameters for the Cloud Control.
    pub cloud_control_metadata: std::option::Option<crate::model::CloudControlMetadata>,

    /// Optional. User provided description of the CloudControl deployment
    pub description: std::string::String,

    /// Output only. State of the CloudControl deployment
    pub deployment_state: crate::model::DeploymentState,

    /// Output only. The time at which the resource was created.
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time at which the resource last updated.
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. To prevent concurrent updates from overwriting each other, always
    /// provide the `etag` when you update a CloudControlDeployment. You can also
    /// provide the `etag` when you delete a CloudControlDeployment, to help
    /// ensure that you're deleting the intended version of the
    /// CloudControlDeployment.
    pub etag: std::string::String,

    /// Output only. The CloudControl after substitution of given parameters.
    pub parameter_substituted_cloud_control: std::option::Option<crate::model::CloudControl>,

    /// Output only. The references to the Framework deployments that this Cloud
    /// Control deployment is part of. A Cloud Control deployment can be part of
    /// multiple Framework deployments.
    pub framework_deployment_references: std::vec::Vec<crate::model::FrameworkDeploymentReference>,

    /// Output only. The display name of the target resource.
    pub target_resource_display_name: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CloudControlDeployment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::CloudControlDeployment::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [target_resource_config][crate::model::CloudControlDeployment::target_resource_config].
    pub fn set_target_resource_config<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::TargetResourceConfig>,
    {
        self.target_resource_config = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [target_resource_config][crate::model::CloudControlDeployment::target_resource_config].
    pub fn set_or_clear_target_resource_config<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::TargetResourceConfig>,
    {
        self.target_resource_config = v.map(|x| x.into());
        self
    }

    /// Sets the value of [target_resource][crate::model::CloudControlDeployment::target_resource].
    pub fn set_target_resource<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_resource = v.into();
        self
    }

    /// Sets the value of [cloud_control_metadata][crate::model::CloudControlDeployment::cloud_control_metadata].
    pub fn set_cloud_control_metadata<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::CloudControlMetadata>,
    {
        self.cloud_control_metadata = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [cloud_control_metadata][crate::model::CloudControlDeployment::cloud_control_metadata].
    pub fn set_or_clear_cloud_control_metadata<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::CloudControlMetadata>,
    {
        self.cloud_control_metadata = v.map(|x| x.into());
        self
    }

    /// Sets the value of [description][crate::model::CloudControlDeployment::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [deployment_state][crate::model::CloudControlDeployment::deployment_state].
    pub fn set_deployment_state<T: std::convert::Into<crate::model::DeploymentState>>(
        mut self,
        v: T,
    ) -> Self {
        self.deployment_state = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::CloudControlDeployment::create_time].
    pub fn set_create_time<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::Timestamp>,
    {
        self.create_time = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [create_time][crate::model::CloudControlDeployment::create_time].
    pub fn set_or_clear_create_time<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::Timestamp>,
    {
        self.create_time = v.map(|x| x.into());
        self
    }

    /// Sets the value of [update_time][crate::model::CloudControlDeployment::update_time].
    pub fn set_update_time<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<wkt::Timestamp>,
    {
        self.update_time = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [update_time][crate::model::CloudControlDeployment::update_time].
    pub fn set_or_clear_update_time<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<wkt::Timestamp>,
    {
        self.update_time = v.map(|x| x.into());
        self
    }

    /// Sets the value of [etag][crate::model::CloudControlDeployment::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of [parameter_substituted_cloud_control][crate::model::CloudControlDeployment::parameter_substituted_cloud_control].
    pub fn set_parameter_substituted_cloud_control<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::CloudControl>,
    {
        self.parameter_substituted_cloud_control = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [parameter_substituted_cloud_control][crate::model::CloudControlDeployment::parameter_substituted_cloud_control].
    pub fn set_or_clear_parameter_substituted_cloud_control<T>(
        mut self,
        v: std::option::Option<T>,
    ) -> Self
    where
        T: std::convert::Into<crate::model::CloudControl>,
    {
        self.parameter_substituted_cloud_control = v.map(|x| x.into());
        self
    }

    /// Sets the value of [framework_deployment_references][crate::model::CloudControlDeployment::framework_deployment_references].
    pub fn set_framework_deployment_references<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::FrameworkDeploymentReference>,
    {
        use std::iter::Iterator;
        self.framework_deployment_references = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [target_resource_display_name][crate::model::CloudControlDeployment::target_resource_display_name].
    pub fn set_target_resource_display_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.target_resource_display_name = v.into();
        self
    }
}

impl wkt::message::Message for CloudControlDeployment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.CloudControlDeployment"
    }
}

/// TargetResourceConfig contains either the name of the target_resource or
/// contains the config to create a new target_resource.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct TargetResourceConfig {
    /// Resource config for the target_resource
    pub resource_config: std::option::Option<crate::model::target_resource_config::ResourceConfig>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TargetResourceConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [resource_config][crate::model::TargetResourceConfig::resource_config].
    ///
    /// Note that all the setters affecting `resource_config` are mutually
    /// exclusive.
    pub fn set_resource_config<
        T: std::convert::Into<
                std::option::Option<crate::model::target_resource_config::ResourceConfig>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_config = v.into();
        self
    }

    /// The value of [resource_config][crate::model::TargetResourceConfig::resource_config]
    /// if it holds a `ExistingTargetResource`, `None` if the field is not set or
    /// holds a different branch.
    pub fn existing_target_resource(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.resource_config.as_ref().and_then(|v| match v {
            crate::model::target_resource_config::ResourceConfig::ExistingTargetResource(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [resource_config][crate::model::TargetResourceConfig::resource_config]
    /// to hold a `ExistingTargetResource`.
    ///
    /// Note that all the setters affecting `resource_config` are
    /// mutually exclusive.
    pub fn set_existing_target_resource<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.resource_config = std::option::Option::Some(
            crate::model::target_resource_config::ResourceConfig::ExistingTargetResource(v.into()),
        );
        self
    }

    /// The value of [resource_config][crate::model::TargetResourceConfig::resource_config]
    /// if it holds a `TargetResourceCreationConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn target_resource_creation_config(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::TargetResourceCreationConfig>> {
        #[allow(unreachable_patterns)]
        self.resource_config.as_ref().and_then(|v| match v {
            crate::model::target_resource_config::ResourceConfig::TargetResourceCreationConfig(
                v,
            ) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [resource_config][crate::model::TargetResourceConfig::resource_config]
    /// to hold a `TargetResourceCreationConfig`.
    ///
    /// Note that all the setters affecting `resource_config` are
    /// mutually exclusive.
    pub fn set_target_resource_creation_config<
        T: std::convert::Into<std::boxed::Box<crate::model::TargetResourceCreationConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_config = std::option::Option::Some(
            crate::model::target_resource_config::ResourceConfig::TargetResourceCreationConfig(
                v.into(),
            ),
        );
        self
    }
}

impl wkt::message::Message for TargetResourceConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.TargetResourceConfig"
    }
}

/// Defines additional types related to [TargetResourceConfig].
pub mod target_resource_config {
    #[allow(unused_imports)]
    use super::*;

    /// Resource config for the target_resource
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum ResourceConfig {
        /// Optional. CRM node in format organizations/{organization},
        /// folders/{folder}, or projects/{project}
        ExistingTargetResource(std::string::String),
        /// Optional. Config to create a new resource and use that as the
        /// target_resource for deployment.
        TargetResourceCreationConfig(std::boxed::Box<crate::model::TargetResourceCreationConfig>),
    }
}

/// TargetResourceCreationConfig contains the config to create a new resource to
/// be used as the target_resource of a deployment.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct TargetResourceCreationConfig {
    /// Resource creation config for the target_resource
    pub resource_creation_config:
        std::option::Option<crate::model::target_resource_creation_config::ResourceCreationConfig>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TargetResourceCreationConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [resource_creation_config][crate::model::TargetResourceCreationConfig::resource_creation_config].
    ///
    /// Note that all the setters affecting `resource_creation_config` are mutually
    /// exclusive.
    pub fn set_resource_creation_config<
        T: std::convert::Into<
                std::option::Option<
                    crate::model::target_resource_creation_config::ResourceCreationConfig,
                >,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_creation_config = v.into();
        self
    }

    /// The value of [resource_creation_config][crate::model::TargetResourceCreationConfig::resource_creation_config]
    /// if it holds a `FolderCreationConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn folder_creation_config(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::FolderCreationConfig>> {
        #[allow(unreachable_patterns)]
        self.resource_creation_config.as_ref().and_then(|v| match v {
            crate::model::target_resource_creation_config::ResourceCreationConfig::FolderCreationConfig(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [resource_creation_config][crate::model::TargetResourceCreationConfig::resource_creation_config]
    /// to hold a `FolderCreationConfig`.
    ///
    /// Note that all the setters affecting `resource_creation_config` are
    /// mutually exclusive.
    pub fn set_folder_creation_config<
        T: std::convert::Into<std::boxed::Box<crate::model::FolderCreationConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_creation_config = std::option::Option::Some(
            crate::model::target_resource_creation_config::ResourceCreationConfig::FolderCreationConfig(
                v.into()
            )
        );
        self
    }

    /// The value of [resource_creation_config][crate::model::TargetResourceCreationConfig::resource_creation_config]
    /// if it holds a `ProjectCreationConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn project_creation_config(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::ProjectCreationConfig>> {
        #[allow(unreachable_patterns)]
        self.resource_creation_config.as_ref().and_then(|v| match v {
            crate::model::target_resource_creation_config::ResourceCreationConfig::ProjectCreationConfig(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [resource_creation_config][crate::model::TargetResourceCreationConfig::resource_creation_config]
    /// to hold a `ProjectCreationConfig`.
    ///
    /// Note that all the setters affecting `resource_creation_config` are
    /// mutually exclusive.
    pub fn set_project_creation_config<
        T: std::convert::Into<std::boxed::Box<crate::model::ProjectCreationConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_creation_config = std::option::Option::Some(
            crate::model::target_resource_creation_config::ResourceCreationConfig::ProjectCreationConfig(
                v.into()
            )
        );
        self
    }
}

impl wkt::message::Message for TargetResourceCreationConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.TargetResourceCreationConfig"
    }
}

/// Defines additional types related to [TargetResourceCreationConfig].
pub mod target_resource_creation_config {
    #[allow(unused_imports)]
    use super::*;

    /// Resource creation config for the target_resource
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum ResourceCreationConfig {
        /// Optional. Config to create a new folder to be used as the target_resource
        /// of a deployment.
        FolderCreationConfig(std::boxed::Box<crate::model::FolderCreationConfig>),
        /// Optional. Config to create a new project to be used as the
        /// target_resource of a deployment.
        ProjectCreationConfig(std::boxed::Box<crate::model::ProjectCreationConfig>),
    }
}

/// FolderCreationConfig contains the config to create a new folder to be used
/// as the target_resource of a deployment.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct FolderCreationConfig {
    /// Required. The parent of the folder to be created. It can be an
    /// organizations/{org} or folders/{folder}
    pub parent: std::string::String,

    /// Required. Display name of the folder to be created
    pub folder_display_name: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl FolderCreationConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::FolderCreationConfig::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [folder_display_name][crate::model::FolderCreationConfig::folder_display_name].
    pub fn set_folder_display_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.folder_display_name = v.into();
        self
    }
}

impl wkt::message::Message for FolderCreationConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.FolderCreationConfig"
    }
}

/// ProjectCreationConfig contains the config to create a new project to be used
/// as the target_resource of a deployment.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct ProjectCreationConfig {
    /// Required. organizations/{org} or folders/{folder}
    pub parent: std::string::String,

    /// Required. Display name of the project to be created.
    pub project_display_name: std::string::String,

    /// Required. Billing account id to be used for the project.
    pub billing_account_id: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ProjectCreationConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ProjectCreationConfig::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [project_display_name][crate::model::ProjectCreationConfig::project_display_name].
    pub fn set_project_display_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.project_display_name = v.into();
        self
    }

    /// Sets the value of [billing_account_id][crate::model::ProjectCreationConfig::billing_account_id].
    pub fn set_billing_account_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.billing_account_id = v.into();
        self
    }
}

impl wkt::message::Message for ProjectCreationConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.ProjectCreationConfig"
    }
}

/// CloudControlMetadata contains the enforcement mode and parameters of a Cloud
/// Control Deployment.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct CloudControlMetadata {
    /// Required. Cloud control name and parameters.
    pub cloud_control_details: std::option::Option<crate::model::CloudControlDetails>,

    /// Required. Enforcement mode of the cloud control
    pub enforcement_mode: crate::model::EnforcementMode,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CloudControlMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [cloud_control_details][crate::model::CloudControlMetadata::cloud_control_details].
    pub fn set_cloud_control_details<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::CloudControlDetails>,
    {
        self.cloud_control_details = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [cloud_control_details][crate::model::CloudControlMetadata::cloud_control_details].
    pub fn set_or_clear_cloud_control_details<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::CloudControlDetails>,
    {
        self.cloud_control_details = v.map(|x| x.into());
        self
    }

    /// Sets the value of [enforcement_mode][crate::model::CloudControlMetadata::enforcement_mode].
    pub fn set_enforcement_mode<T: std::convert::Into<crate::model::EnforcementMode>>(
        mut self,
        v: T,
    ) -> Self {
        self.enforcement_mode = v.into();
        self
    }
}

impl wkt::message::Message for CloudControlMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.CloudControlMetadata"
    }
}

/// Request message for CreateFrameworkDeployment API.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct CreateFrameworkDeploymentRequest {
    /// Required. The parent resource of the FrameworkDeployment in the format:
    /// organizations/{organization}/locations/{location}
    /// Only global location is supported.
    pub parent: std::string::String,

    /// Optional. User provided identifier. It should be unique in scope of a
    /// parent. This is optional and if not provided, a random UUID will be
    /// generated.
    pub framework_deployment_id: std::string::String,

    /// Required. The FrameworkDeployment to be created.
    pub framework_deployment: std::option::Option<crate::model::FrameworkDeployment>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateFrameworkDeploymentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateFrameworkDeploymentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [framework_deployment_id][crate::model::CreateFrameworkDeploymentRequest::framework_deployment_id].
    pub fn set_framework_deployment_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.framework_deployment_id = v.into();
        self
    }

    /// Sets the value of [framework_deployment][crate::model::CreateFrameworkDeploymentRequest::framework_deployment].
    pub fn set_framework_deployment<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::FrameworkDeployment>,
    {
        self.framework_deployment = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [framework_deployment][crate::model::CreateFrameworkDeploymentRequest::framework_deployment].
    pub fn set_or_clear_framework_deployment<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::FrameworkDeployment>,
    {
        self.framework_deployment = v.map(|x| x.into());
        self
    }
}

impl wkt::message::Message for CreateFrameworkDeploymentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.CreateFrameworkDeploymentRequest"
    }
}

/// Request message for DeleteFrameworkDeployment.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct DeleteFrameworkDeploymentRequest {
    /// Required. name of the FrameworkDeployment to be deleted in the following
    /// format:
    /// organizations/{organization}/locations/{location}/frameworkDeployments/{framework_deployment_id}
    pub name: std::string::String,

    /// Optional. An opaque identifier for the current version of the resource.
    ///
    /// If you provide this value, then it must match the existing value. If the
    /// values don't match, then the request fails with an
    /// [ABORTED][google.rpc.Code.ABORTED] error.
    ///
    /// If you omit this value, then the resource is deleted regardless of its
    /// current `etag` value.
    pub etag: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteFrameworkDeploymentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteFrameworkDeploymentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::DeleteFrameworkDeploymentRequest::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }
}

impl wkt::message::Message for DeleteFrameworkDeploymentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.DeleteFrameworkDeploymentRequest"
    }
}

/// Request message for GetFrameworkDeployment.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct GetFrameworkDeploymentRequest {
    /// Required. FrameworkDeployment name in the following format:
    /// organizations/{organization}/locations/{location}/frameworkDeployments/{framework_deployment_id}
    pub name: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetFrameworkDeploymentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetFrameworkDeploymentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetFrameworkDeploymentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.GetFrameworkDeploymentRequest"
    }
}

/// Request message for ListFrameworkDeployments.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct ListFrameworkDeploymentsRequest {
    /// Required. parent resource of the FrameworkDeployment in the format:
    /// organizations/{organization}/locations/{location}
    /// Only global location is supported.
    pub parent: std::string::String,

    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    pub page_size: i32,

    /// Optional. A token identifying a page of results the server should return.
    pub page_token: std::string::String,

    /// Optional. Filter to be applied on the resource, defined by EBNF grammar
    /// <https://google.aip.dev/assets/misc/ebnf-filtering.txt>.
    pub filter: std::string::String,

    /// Optional. Sort results. Supported are "name", "name desc" or "" (unsorted).
    pub order_by: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListFrameworkDeploymentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListFrameworkDeploymentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListFrameworkDeploymentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListFrameworkDeploymentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListFrameworkDeploymentsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListFrameworkDeploymentsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListFrameworkDeploymentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.ListFrameworkDeploymentsRequest"
    }
}

/// Response message for ListFrameworkDeployments.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct ListFrameworkDeploymentsResponse {
    /// The list of FrameworkDeployments.
    pub framework_deployments: std::vec::Vec<crate::model::FrameworkDeployment>,

    /// A token identifying a page of results the server should return.
    pub next_page_token: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListFrameworkDeploymentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [framework_deployments][crate::model::ListFrameworkDeploymentsResponse::framework_deployments].
    pub fn set_framework_deployments<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::FrameworkDeployment>,
    {
        use std::iter::Iterator;
        self.framework_deployments = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [next_page_token][crate::model::ListFrameworkDeploymentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListFrameworkDeploymentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.ListFrameworkDeploymentsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListFrameworkDeploymentsResponse {
    type PageItem = crate::model::FrameworkDeployment;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.framework_deployments
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request message for GetCloudControlDeployment.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct GetCloudControlDeploymentRequest {
    /// Required. CloudControlDeployment name in the following format:
    /// organizations/{organization}/locations/{location}/cloudControlDeployments/{cloud_control_deployment_id}
    pub name: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetCloudControlDeploymentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetCloudControlDeploymentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetCloudControlDeploymentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.GetCloudControlDeploymentRequest"
    }
}

/// Request message for ListCloudControlDeployments.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct ListCloudControlDeploymentsRequest {
    /// Required. parent resource of the CloudControlDeployment in the format:
    /// organizations/{organization}/locations/{location}
    /// Only global location is supported.
    pub parent: std::string::String,

    /// Optional. Requested page size. Server may return fewer items than
    /// requested. If unspecified, server will pick an appropriate default.
    pub page_size: i32,

    /// Optional. A token identifying a page of results the server should return.
    pub page_token: std::string::String,

    /// Optional. Filter to be applied on the resource, defined by EBNF grammar
    /// <https://google.aip.dev/assets/misc/ebnf-filtering.txt>.
    pub filter: std::string::String,

    /// Optional. Sort results. Supported are "name", "name desc" or "" (unsorted).
    pub order_by: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListCloudControlDeploymentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListCloudControlDeploymentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListCloudControlDeploymentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListCloudControlDeploymentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListCloudControlDeploymentsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListCloudControlDeploymentsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListCloudControlDeploymentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.ListCloudControlDeploymentsRequest"
    }
}

/// Response message for ListCloudControlDeployments.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct ListCloudControlDeploymentsResponse {
    /// The list of CloudControlDeployments.
    pub cloud_control_deployments: std::vec::Vec<crate::model::CloudControlDeployment>,

    /// A token identifying a page of results the server should return.
    pub next_page_token: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListCloudControlDeploymentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [cloud_control_deployments][crate::model::ListCloudControlDeploymentsResponse::cloud_control_deployments].
    pub fn set_cloud_control_deployments<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CloudControlDeployment>,
    {
        use std::iter::Iterator;
        self.cloud_control_deployments = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [next_page_token][crate::model::ListCloudControlDeploymentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListCloudControlDeploymentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.ListCloudControlDeploymentsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListCloudControlDeploymentsResponse {
    type PageItem = crate::model::CloudControlDeployment;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.cloud_control_deployments
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The reference to a CloudControlDeployment.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct CloudControlDeploymentReference {
    /// Output only. The name of the CloudControlDeployment. The format is:
    /// organizations/{org}/locations/{location}/cloudControlDeployments/{cloud_control_deployment_id}
    pub cloud_control_deployment: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CloudControlDeploymentReference {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [cloud_control_deployment][crate::model::CloudControlDeploymentReference::cloud_control_deployment].
    pub fn set_cloud_control_deployment<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.cloud_control_deployment = v.into();
        self
    }
}

impl wkt::message::Message for CloudControlDeploymentReference {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.CloudControlDeploymentReference"
    }
}

/// The reference to a FrameworkDeployment.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct FrameworkDeploymentReference {
    /// Output only. The name of the FrameworkDeployment. The format is:
    /// organizations/{org}/locations/{location}/frameworkDeployments/{framework_deployment_id}
    pub framework_deployment: std::string::String,

    /// Optional. The reference to the Framework that this deployment is for.
    /// Example: {
    /// framework:
    /// "organizations/{org}/locations/{location}/frameworks/{framework}",
    /// major_revision_id: 1
    /// }
    pub framework_reference: std::option::Option<crate::model::FrameworkReference>,

    /// Optional. The display name of the Framework that this FrameworkDeployment
    /// is for.
    pub framework_display_name: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl FrameworkDeploymentReference {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [framework_deployment][crate::model::FrameworkDeploymentReference::framework_deployment].
    pub fn set_framework_deployment<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.framework_deployment = v.into();
        self
    }

    /// Sets the value of [framework_reference][crate::model::FrameworkDeploymentReference::framework_reference].
    pub fn set_framework_reference<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::FrameworkReference>,
    {
        self.framework_reference = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [framework_reference][crate::model::FrameworkDeploymentReference::framework_reference].
    pub fn set_or_clear_framework_reference<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::FrameworkReference>,
    {
        self.framework_reference = v.map(|x| x.into());
        self
    }

    /// Sets the value of [framework_display_name][crate::model::FrameworkDeploymentReference::framework_display_name].
    pub fn set_framework_display_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.framework_display_name = v.into();
        self
    }
}

impl wkt::message::Message for FrameworkDeploymentReference {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.cloudsecuritycompliance.v1.FrameworkDeploymentReference"
    }
}

/// The enforcement mode of the cloud control.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum EnforcementMode {
    /// Default value. This value is unused.
    Unspecified,
    /// The cloud control is enforced to prevent resource non-compliance.
    Preventive,
    /// The cloud control is enforced to detect resource non-compliance.
    Detective,
    /// The cloud control is enforced to audit resource non-compliance.
    Audit,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [EnforcementMode::value] or
    /// [EnforcementMode::name].
    UnknownValue(enforcement_mode::UnknownValue),
}

#[doc(hidden)]
pub mod enforcement_mode {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl EnforcementMode {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::Preventive => std::option::Option::Some(1),
            Self::Detective => std::option::Option::Some(2),
            Self::Audit => std::option::Option::Some(3),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("ENFORCEMENT_MODE_UNSPECIFIED"),
            Self::Preventive => std::option::Option::Some("PREVENTIVE"),
            Self::Detective => std::option::Option::Some("DETECTIVE"),
            Self::Audit => std::option::Option::Some("AUDIT"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for EnforcementMode {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for EnforcementMode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for EnforcementMode {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::Preventive,
            2 => Self::Detective,
            3 => Self::Audit,
            _ => Self::UnknownValue(enforcement_mode::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for EnforcementMode {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "ENFORCEMENT_MODE_UNSPECIFIED" => Self::Unspecified,
            "PREVENTIVE" => Self::Preventive,
            "DETECTIVE" => Self::Detective,
            "AUDIT" => Self::Audit,
            _ => Self::UnknownValue(enforcement_mode::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for EnforcementMode {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::Preventive => serializer.serialize_i32(1),
            Self::Detective => serializer.serialize_i32(2),
            Self::Audit => serializer.serialize_i32(3),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for EnforcementMode {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<EnforcementMode>::new(
            ".google.cloud.cloudsecuritycompliance.v1.EnforcementMode",
        ))
    }
}

/// The category of the framework.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum FrameworkCategory {
    /// Default value. This value is unused.
    Unspecified,
    /// Standard framework
    IndustryDefinedStandard,
    /// Assured Workloads framework
    AssuredWorkloads,
    /// Data Security framework
    DataSecurity,
    /// Google Best Practices framework
    GoogleBestPractices,
    /// User created framework.
    CustomFramework,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [FrameworkCategory::value] or
    /// [FrameworkCategory::name].
    UnknownValue(framework_category::UnknownValue),
}

#[doc(hidden)]
pub mod framework_category {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl FrameworkCategory {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::IndustryDefinedStandard => std::option::Option::Some(1),
            Self::AssuredWorkloads => std::option::Option::Some(2),
            Self::DataSecurity => std::option::Option::Some(3),
            Self::GoogleBestPractices => std::option::Option::Some(4),
            Self::CustomFramework => std::option::Option::Some(5),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("FRAMEWORK_CATEGORY_UNSPECIFIED"),
            Self::IndustryDefinedStandard => std::option::Option::Some("INDUSTRY_DEFINED_STANDARD"),
            Self::AssuredWorkloads => std::option::Option::Some("ASSURED_WORKLOADS"),
            Self::DataSecurity => std::option::Option::Some("DATA_SECURITY"),
            Self::GoogleBestPractices => std::option::Option::Some("GOOGLE_BEST_PRACTICES"),
            Self::CustomFramework => std::option::Option::Some("CUSTOM_FRAMEWORK"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for FrameworkCategory {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for FrameworkCategory {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for FrameworkCategory {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::IndustryDefinedStandard,
            2 => Self::AssuredWorkloads,
            3 => Self::DataSecurity,
            4 => Self::GoogleBestPractices,
            5 => Self::CustomFramework,
            _ => Self::UnknownValue(framework_category::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for FrameworkCategory {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "FRAMEWORK_CATEGORY_UNSPECIFIED" => Self::Unspecified,
            "INDUSTRY_DEFINED_STANDARD" => Self::IndustryDefinedStandard,
            "ASSURED_WORKLOADS" => Self::AssuredWorkloads,
            "DATA_SECURITY" => Self::DataSecurity,
            "GOOGLE_BEST_PRACTICES" => Self::GoogleBestPractices,
            "CUSTOM_FRAMEWORK" => Self::CustomFramework,
            _ => Self::UnknownValue(framework_category::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for FrameworkCategory {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::IndustryDefinedStandard => serializer.serialize_i32(1),
            Self::AssuredWorkloads => serializer.serialize_i32(2),
            Self::DataSecurity => serializer.serialize_i32(3),
            Self::GoogleBestPractices => serializer.serialize_i32(4),
            Self::CustomFramework => serializer.serialize_i32(5),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for FrameworkCategory {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<FrameworkCategory>::new(
            ".google.cloud.cloudsecuritycompliance.v1.FrameworkCategory",
        ))
    }
}

/// The category of the cloud control.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum CloudControlCategory {
    /// Default value. This value is unused.
    Unspecified,
    /// Infrastructure
    CcCategoryInfrastructure,
    /// Artificial Intelligence
    CcCategoryArtificialIntelligence,
    /// Physical Security
    CcCategoryPhysicalSecurity,
    /// Data Security
    CcCategoryDataSecurity,
    /// Network Security
    CcCategoryNetworkSecurity,
    /// Incident Management
    CcCategoryIncidentManagement,
    /// Identity & Access Management
    CcCategoryIdentityAndAccessManagement,
    /// Encryption
    CcCategoryEncryption,
    /// Logs Management & Infrastructure
    CcCategoryLogsManagementAndInfrastructure,
    /// HR, Admin & Processes
    CcCategoryHrAdminAndProcesses,
    /// Third Party & Sub-Processor Management
    CcCategoryThirdPartyAndSubProcessorManagement,
    /// Legal & Disclosures
    CcCategoryLegalAndDisclosures,
    /// Vulnerability Management
    CcCategoryVulnerabilityManagement,
    /// Privacy
    CcCategoryPrivacy,
    /// BCDR (Business Continuity and Disaster Recovery)
    CcCategoryBcdr,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [CloudControlCategory::value] or
    /// [CloudControlCategory::name].
    UnknownValue(cloud_control_category::UnknownValue),
}

#[doc(hidden)]
pub mod cloud_control_category {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl CloudControlCategory {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::CcCategoryInfrastructure => std::option::Option::Some(1),
            Self::CcCategoryArtificialIntelligence => std::option::Option::Some(2),
            Self::CcCategoryPhysicalSecurity => std::option::Option::Some(3),
            Self::CcCategoryDataSecurity => std::option::Option::Some(4),
            Self::CcCategoryNetworkSecurity => std::option::Option::Some(5),
            Self::CcCategoryIncidentManagement => std::option::Option::Some(6),
            Self::CcCategoryIdentityAndAccessManagement => std::option::Option::Some(7),
            Self::CcCategoryEncryption => std::option::Option::Some(8),
            Self::CcCategoryLogsManagementAndInfrastructure => std::option::Option::Some(9),
            Self::CcCategoryHrAdminAndProcesses => std::option::Option::Some(10),
            Self::CcCategoryThirdPartyAndSubProcessorManagement => std::option::Option::Some(11),
            Self::CcCategoryLegalAndDisclosures => std::option::Option::Some(12),
            Self::CcCategoryVulnerabilityManagement => std::option::Option::Some(13),
            Self::CcCategoryPrivacy => std::option::Option::Some(14),
            Self::CcCategoryBcdr => std::option::Option::Some(15),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("CLOUD_CONTROL_CATEGORY_UNSPECIFIED"),
            Self::CcCategoryInfrastructure => {
                std::option::Option::Some("CC_CATEGORY_INFRASTRUCTURE")
            }
            Self::CcCategoryArtificialIntelligence => {
                std::option::Option::Some("CC_CATEGORY_ARTIFICIAL_INTELLIGENCE")
            }
            Self::CcCategoryPhysicalSecurity => {
                std::option::Option::Some("CC_CATEGORY_PHYSICAL_SECURITY")
            }
            Self::CcCategoryDataSecurity => std::option::Option::Some("CC_CATEGORY_DATA_SECURITY"),
            Self::CcCategoryNetworkSecurity => {
                std::option::Option::Some("CC_CATEGORY_NETWORK_SECURITY")
            }
            Self::CcCategoryIncidentManagement => {
                std::option::Option::Some("CC_CATEGORY_INCIDENT_MANAGEMENT")
            }
            Self::CcCategoryIdentityAndAccessManagement => {
                std::option::Option::Some("CC_CATEGORY_IDENTITY_AND_ACCESS_MANAGEMENT")
            }
            Self::CcCategoryEncryption => std::option::Option::Some("CC_CATEGORY_ENCRYPTION"),
            Self::CcCategoryLogsManagementAndInfrastructure => {
                std::option::Option::Some("CC_CATEGORY_LOGS_MANAGEMENT_AND_INFRASTRUCTURE")
            }
            Self::CcCategoryHrAdminAndProcesses => {
                std::option::Option::Some("CC_CATEGORY_HR_ADMIN_AND_PROCESSES")
            }
            Self::CcCategoryThirdPartyAndSubProcessorManagement => {
                std::option::Option::Some("CC_CATEGORY_THIRD_PARTY_AND_SUB_PROCESSOR_MANAGEMENT")
            }
            Self::CcCategoryLegalAndDisclosures => {
                std::option::Option::Some("CC_CATEGORY_LEGAL_AND_DISCLOSURES")
            }
            Self::CcCategoryVulnerabilityManagement => {
                std::option::Option::Some("CC_CATEGORY_VULNERABILITY_MANAGEMENT")
            }
            Self::CcCategoryPrivacy => std::option::Option::Some("CC_CATEGORY_PRIVACY"),
            Self::CcCategoryBcdr => std::option::Option::Some("CC_CATEGORY_BCDR"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for CloudControlCategory {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for CloudControlCategory {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for CloudControlCategory {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::CcCategoryInfrastructure,
            2 => Self::CcCategoryArtificialIntelligence,
            3 => Self::CcCategoryPhysicalSecurity,
            4 => Self::CcCategoryDataSecurity,
            5 => Self::CcCategoryNetworkSecurity,
            6 => Self::CcCategoryIncidentManagement,
            7 => Self::CcCategoryIdentityAndAccessManagement,
            8 => Self::CcCategoryEncryption,
            9 => Self::CcCategoryLogsManagementAndInfrastructure,
            10 => Self::CcCategoryHrAdminAndProcesses,
            11 => Self::CcCategoryThirdPartyAndSubProcessorManagement,
            12 => Self::CcCategoryLegalAndDisclosures,
            13 => Self::CcCategoryVulnerabilityManagement,
            14 => Self::CcCategoryPrivacy,
            15 => Self::CcCategoryBcdr,
            _ => Self::UnknownValue(cloud_control_category::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for CloudControlCategory {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "CLOUD_CONTROL_CATEGORY_UNSPECIFIED" => Self::Unspecified,
            "CC_CATEGORY_INFRASTRUCTURE" => Self::CcCategoryInfrastructure,
            "CC_CATEGORY_ARTIFICIAL_INTELLIGENCE" => Self::CcCategoryArtificialIntelligence,
            "CC_CATEGORY_PHYSICAL_SECURITY" => Self::CcCategoryPhysicalSecurity,
            "CC_CATEGORY_DATA_SECURITY" => Self::CcCategoryDataSecurity,
            "CC_CATEGORY_NETWORK_SECURITY" => Self::CcCategoryNetworkSecurity,
            "CC_CATEGORY_INCIDENT_MANAGEMENT" => Self::CcCategoryIncidentManagement,
            "CC_CATEGORY_IDENTITY_AND_ACCESS_MANAGEMENT" => {
                Self::CcCategoryIdentityAndAccessManagement
            }
            "CC_CATEGORY_ENCRYPTION" => Self::CcCategoryEncryption,
            "CC_CATEGORY_LOGS_MANAGEMENT_AND_INFRASTRUCTURE" => {
                Self::CcCategoryLogsManagementAndInfrastructure
            }
            "CC_CATEGORY_HR_ADMIN_AND_PROCESSES" => Self::CcCategoryHrAdminAndProcesses,
            "CC_CATEGORY_THIRD_PARTY_AND_SUB_PROCESSOR_MANAGEMENT" => {
                Self::CcCategoryThirdPartyAndSubProcessorManagement
            }
            "CC_CATEGORY_LEGAL_AND_DISCLOSURES" => Self::CcCategoryLegalAndDisclosures,
            "CC_CATEGORY_VULNERABILITY_MANAGEMENT" => Self::CcCategoryVulnerabilityManagement,
            "CC_CATEGORY_PRIVACY" => Self::CcCategoryPrivacy,
            "CC_CATEGORY_BCDR" => Self::CcCategoryBcdr,
            _ => Self::UnknownValue(cloud_control_category::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for CloudControlCategory {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::CcCategoryInfrastructure => serializer.serialize_i32(1),
            Self::CcCategoryArtificialIntelligence => serializer.serialize_i32(2),
            Self::CcCategoryPhysicalSecurity => serializer.serialize_i32(3),
            Self::CcCategoryDataSecurity => serializer.serialize_i32(4),
            Self::CcCategoryNetworkSecurity => serializer.serialize_i32(5),
            Self::CcCategoryIncidentManagement => serializer.serialize_i32(6),
            Self::CcCategoryIdentityAndAccessManagement => serializer.serialize_i32(7),
            Self::CcCategoryEncryption => serializer.serialize_i32(8),
            Self::CcCategoryLogsManagementAndInfrastructure => serializer.serialize_i32(9),
            Self::CcCategoryHrAdminAndProcesses => serializer.serialize_i32(10),
            Self::CcCategoryThirdPartyAndSubProcessorManagement => serializer.serialize_i32(11),
            Self::CcCategoryLegalAndDisclosures => serializer.serialize_i32(12),
            Self::CcCategoryVulnerabilityManagement => serializer.serialize_i32(13),
            Self::CcCategoryPrivacy => serializer.serialize_i32(14),
            Self::CcCategoryBcdr => serializer.serialize_i32(15),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for CloudControlCategory {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<CloudControlCategory>::new(
            ".google.cloud.cloudsecuritycompliance.v1.CloudControlCategory",
        ))
    }
}

/// The cloud platform.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum CloudProvider {
    /// Default value. This value is unused.
    Unspecified,
    /// Amazon Web Services (AWS).
    Aws,
    /// Microsoft Azure.
    Azure,
    /// Google Cloud.
    Gcp,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [CloudProvider::value] or
    /// [CloudProvider::name].
    UnknownValue(cloud_provider::UnknownValue),
}

#[doc(hidden)]
pub mod cloud_provider {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl CloudProvider {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::Aws => std::option::Option::Some(1),
            Self::Azure => std::option::Option::Some(2),
            Self::Gcp => std::option::Option::Some(3),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("CLOUD_PROVIDER_UNSPECIFIED"),
            Self::Aws => std::option::Option::Some("AWS"),
            Self::Azure => std::option::Option::Some("AZURE"),
            Self::Gcp => std::option::Option::Some("GCP"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for CloudProvider {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for CloudProvider {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for CloudProvider {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::Aws,
            2 => Self::Azure,
            3 => Self::Gcp,
            _ => Self::UnknownValue(cloud_provider::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for CloudProvider {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "CLOUD_PROVIDER_UNSPECIFIED" => Self::Unspecified,
            "AWS" => Self::Aws,
            "AZURE" => Self::Azure,
            "GCP" => Self::Gcp,
            _ => Self::UnknownValue(cloud_provider::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for CloudProvider {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::Aws => serializer.serialize_i32(1),
            Self::Azure => serializer.serialize_i32(2),
            Self::Gcp => serializer.serialize_i32(3),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for CloudProvider {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<CloudProvider>::new(
            ".google.cloud.cloudsecuritycompliance.v1.CloudProvider",
        ))
    }
}

/// The severity of the finding.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum Severity {
    /// This value is used for findings when a source doesn't write a severity
    /// value.
    Unspecified,
    /// Vulnerability:
    /// A critical vulnerability is easily discoverable by an external actor,
    /// exploitable, and results in the direct ability to execute arbitrary code,
    /// exfiltrate data, and otherwise gain additional access and privileges to
    /// cloud resources and workloads. Examples include publicly accessible
    /// unprotected user data and public SSH access with weak or no
    /// passwords.
    ///
    /// Threat:
    /// Indicates a threat that is able to access, modify, or delete data or
    /// execute unauthorized code within existing resources.
    Critical,
    /// Vulnerability:
    /// A high risk vulnerability can be easily discovered and exploited in
    /// combination with other vulnerabilities in order to gain direct access and
    /// the ability to execute arbitrary code, exfiltrate data, and otherwise
    /// gain additional access and privileges to cloud resources and workloads.
    /// An example is a database with weak or no passwords that is only
    /// accessible internally. This database could easily be compromised by an
    /// actor that had access to the internal network.
    ///
    /// Threat:
    /// Indicates a threat that is able to create new computational resources in
    /// an environment but not able to access data or execute code in existing
    /// resources.
    High,
    /// Vulnerability:
    /// A medium risk vulnerability could be used by an actor to gain access to
    /// resources or privileges that enable them to eventually (through multiple
    /// steps or a complex exploit) gain access and the ability to execute
    /// arbitrary code or exfiltrate data. An example is a service account with
    /// access to more projects than it should have. If an actor gains access to
    /// the service account, they could potentially use that access to manipulate
    /// a project the service account was not intended to.
    ///
    /// Threat:
    /// Indicates a threat that is able to cause operational impact but may not
    /// access data or execute unauthorized code.
    Medium,
    /// Vulnerability:
    /// A low risk vulnerability hampers a security organization's ability to
    /// detect vulnerabilities or active threats in their deployment, or prevents
    /// the root cause investigation of security issues. An example is monitoring
    /// and logs being disabled for resource configurations and access.
    ///
    /// Threat:
    /// Indicates a threat that has obtained minimal access to an environment but
    /// is not able to access data, execute code, or create resources.
    Low,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [Severity::value] or
    /// [Severity::name].
    UnknownValue(severity::UnknownValue),
}

#[doc(hidden)]
pub mod severity {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl Severity {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::Critical => std::option::Option::Some(1),
            Self::High => std::option::Option::Some(2),
            Self::Medium => std::option::Option::Some(3),
            Self::Low => std::option::Option::Some(4),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("SEVERITY_UNSPECIFIED"),
            Self::Critical => std::option::Option::Some("CRITICAL"),
            Self::High => std::option::Option::Some("HIGH"),
            Self::Medium => std::option::Option::Some("MEDIUM"),
            Self::Low => std::option::Option::Some("LOW"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for Severity {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for Severity {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for Severity {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::Critical,
            2 => Self::High,
            3 => Self::Medium,
            4 => Self::Low,
            _ => Self::UnknownValue(severity::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for Severity {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "SEVERITY_UNSPECIFIED" => Self::Unspecified,
            "CRITICAL" => Self::Critical,
            "HIGH" => Self::High,
            "MEDIUM" => Self::Medium,
            "LOW" => Self::Low,
            _ => Self::UnknownValue(severity::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for Severity {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::Critical => serializer.serialize_i32(1),
            Self::High => serializer.serialize_i32(2),
            Self::Medium => serializer.serialize_i32(3),
            Self::Low => serializer.serialize_i32(4),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for Severity {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<Severity>::new(
            ".google.cloud.cloudsecuritycompliance.v1.Severity",
        ))
    }
}

/// The action type of the rule.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum RuleActionType {
    /// Default value. This value is unused.
    Unspecified,
    /// Preventative action type.
    Preventive,
    /// Detective action type.
    Detective,
    /// Audit action type.
    Audit,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [RuleActionType::value] or
    /// [RuleActionType::name].
    UnknownValue(rule_action_type::UnknownValue),
}

#[doc(hidden)]
pub mod rule_action_type {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl RuleActionType {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::Preventive => std::option::Option::Some(1),
            Self::Detective => std::option::Option::Some(2),
            Self::Audit => std::option::Option::Some(3),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("RULE_ACTION_TYPE_UNSPECIFIED"),
            Self::Preventive => std::option::Option::Some("RULE_ACTION_TYPE_PREVENTIVE"),
            Self::Detective => std::option::Option::Some("RULE_ACTION_TYPE_DETECTIVE"),
            Self::Audit => std::option::Option::Some("RULE_ACTION_TYPE_AUDIT"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for RuleActionType {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for RuleActionType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for RuleActionType {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::Preventive,
            2 => Self::Detective,
            3 => Self::Audit,
            _ => Self::UnknownValue(rule_action_type::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for RuleActionType {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "RULE_ACTION_TYPE_UNSPECIFIED" => Self::Unspecified,
            "RULE_ACTION_TYPE_PREVENTIVE" => Self::Preventive,
            "RULE_ACTION_TYPE_DETECTIVE" => Self::Detective,
            "RULE_ACTION_TYPE_AUDIT" => Self::Audit,
            _ => Self::UnknownValue(rule_action_type::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for RuleActionType {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::Preventive => serializer.serialize_i32(1),
            Self::Detective => serializer.serialize_i32(2),
            Self::Audit => serializer.serialize_i32(3),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for RuleActionType {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<RuleActionType>::new(
            ".google.cloud.cloudsecuritycompliance.v1.RuleActionType",
        ))
    }
}

/// TargetResourceType represents the type of resource that a control or
/// framework can be applied to.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum TargetResourceType {
    /// Default value. This value is unused.
    Unspecified,
    /// Target resource is an Organization.
    TargetResourceCrmTypeOrg,
    /// Target resource is a Folder.
    TargetResourceCrmTypeFolder,
    /// Target resource is a Project.
    TargetResourceCrmTypeProject,
    /// Target resource is an Application.
    Application,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [TargetResourceType::value] or
    /// [TargetResourceType::name].
    UnknownValue(target_resource_type::UnknownValue),
}

#[doc(hidden)]
pub mod target_resource_type {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl TargetResourceType {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::TargetResourceCrmTypeOrg => std::option::Option::Some(1),
            Self::TargetResourceCrmTypeFolder => std::option::Option::Some(2),
            Self::TargetResourceCrmTypeProject => std::option::Option::Some(3),
            Self::Application => std::option::Option::Some(4),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("TARGET_RESOURCE_TYPE_UNSPECIFIED"),
            Self::TargetResourceCrmTypeOrg => {
                std::option::Option::Some("TARGET_RESOURCE_CRM_TYPE_ORG")
            }
            Self::TargetResourceCrmTypeFolder => {
                std::option::Option::Some("TARGET_RESOURCE_CRM_TYPE_FOLDER")
            }
            Self::TargetResourceCrmTypeProject => {
                std::option::Option::Some("TARGET_RESOURCE_CRM_TYPE_PROJECT")
            }
            Self::Application => std::option::Option::Some("TARGET_RESOURCE_TYPE_APPLICATION"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for TargetResourceType {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for TargetResourceType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for TargetResourceType {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::TargetResourceCrmTypeOrg,
            2 => Self::TargetResourceCrmTypeFolder,
            3 => Self::TargetResourceCrmTypeProject,
            4 => Self::Application,
            _ => Self::UnknownValue(target_resource_type::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for TargetResourceType {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "TARGET_RESOURCE_TYPE_UNSPECIFIED" => Self::Unspecified,
            "TARGET_RESOURCE_CRM_TYPE_ORG" => Self::TargetResourceCrmTypeOrg,
            "TARGET_RESOURCE_CRM_TYPE_FOLDER" => Self::TargetResourceCrmTypeFolder,
            "TARGET_RESOURCE_CRM_TYPE_PROJECT" => Self::TargetResourceCrmTypeProject,
            "TARGET_RESOURCE_TYPE_APPLICATION" => Self::Application,
            _ => Self::UnknownValue(target_resource_type::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for TargetResourceType {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::TargetResourceCrmTypeOrg => serializer.serialize_i32(1),
            Self::TargetResourceCrmTypeFolder => serializer.serialize_i32(2),
            Self::TargetResourceCrmTypeProject => serializer.serialize_i32(3),
            Self::Application => serializer.serialize_i32(4),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for TargetResourceType {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<TargetResourceType>::new(
            ".google.cloud.cloudsecuritycompliance.v1.TargetResourceType",
        ))
    }
}

/// DeploymentState represents the state of the Deployment resource.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum DeploymentState {
    /// Unspecified. Invalid state.
    Unspecified,
    /// Validating the deployment.
    Validating,
    /// Deployment is in CREATING state.
    Creating,
    /// Deployment is in DELETING state.
    Deleting,
    /// Deployment has failed. All the changes made by the deployment have been
    /// successfully rolled back. A deployment in the FAILED state can be retried
    /// or deleted.
    Failed,
    /// Deployment is successful and ready to use.
    Ready,
    /// Deployment is partially deployed. All the Cloud Controls were not deployed
    /// successfully. Retrying the operation will resume from the first failed
    /// step.
    PartiallyDeployed,
    /// Deployment is partially deleted. All the Cloud Control Deployments were not
    /// deleted successfully. Retrying the operation will resume from the first
    /// failed step.
    PartiallyDeleted,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [DeploymentState::value] or
    /// [DeploymentState::name].
    UnknownValue(deployment_state::UnknownValue),
}

#[doc(hidden)]
pub mod deployment_state {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl DeploymentState {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::Validating => std::option::Option::Some(1),
            Self::Creating => std::option::Option::Some(2),
            Self::Deleting => std::option::Option::Some(3),
            Self::Failed => std::option::Option::Some(4),
            Self::Ready => std::option::Option::Some(5),
            Self::PartiallyDeployed => std::option::Option::Some(6),
            Self::PartiallyDeleted => std::option::Option::Some(7),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("DEPLOYMENT_STATE_UNSPECIFIED"),
            Self::Validating => std::option::Option::Some("DEPLOYMENT_STATE_VALIDATING"),
            Self::Creating => std::option::Option::Some("DEPLOYMENT_STATE_CREATING"),
            Self::Deleting => std::option::Option::Some("DEPLOYMENT_STATE_DELETING"),
            Self::Failed => std::option::Option::Some("DEPLOYMENT_STATE_FAILED"),
            Self::Ready => std::option::Option::Some("DEPLOYMENT_STATE_READY"),
            Self::PartiallyDeployed => {
                std::option::Option::Some("DEPLOYMENT_STATE_PARTIALLY_DEPLOYED")
            }
            Self::PartiallyDeleted => {
                std::option::Option::Some("DEPLOYMENT_STATE_PARTIALLY_DELETED")
            }
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for DeploymentState {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for DeploymentState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for DeploymentState {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::Validating,
            2 => Self::Creating,
            3 => Self::Deleting,
            4 => Self::Failed,
            5 => Self::Ready,
            6 => Self::PartiallyDeployed,
            7 => Self::PartiallyDeleted,
            _ => Self::UnknownValue(deployment_state::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for DeploymentState {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "DEPLOYMENT_STATE_UNSPECIFIED" => Self::Unspecified,
            "DEPLOYMENT_STATE_VALIDATING" => Self::Validating,
            "DEPLOYMENT_STATE_CREATING" => Self::Creating,
            "DEPLOYMENT_STATE_DELETING" => Self::Deleting,
            "DEPLOYMENT_STATE_FAILED" => Self::Failed,
            "DEPLOYMENT_STATE_READY" => Self::Ready,
            "DEPLOYMENT_STATE_PARTIALLY_DEPLOYED" => Self::PartiallyDeployed,
            "DEPLOYMENT_STATE_PARTIALLY_DELETED" => Self::PartiallyDeleted,
            _ => Self::UnknownValue(deployment_state::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for DeploymentState {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::Validating => serializer.serialize_i32(1),
            Self::Creating => serializer.serialize_i32(2),
            Self::Deleting => serializer.serialize_i32(3),
            Self::Failed => serializer.serialize_i32(4),
            Self::Ready => serializer.serialize_i32(5),
            Self::PartiallyDeployed => serializer.serialize_i32(6),
            Self::PartiallyDeleted => serializer.serialize_i32(7),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for DeploymentState {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<DeploymentState>::new(
            ".google.cloud.cloudsecuritycompliance.v1.DeploymentState",
        ))
    }
}
