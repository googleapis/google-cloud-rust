// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

/// A dyn-compatible, crate-private version of [super::GkeInferenceQuickstart].
#[async_trait::async_trait]
pub trait GkeInferenceQuickstart: std::fmt::Debug + Send + Sync {
    async fn fetch_models(
        &self,
        req: crate::model::FetchModelsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::FetchModelsResponse>>;

    async fn fetch_model_servers(
        &self,
        req: crate::model::FetchModelServersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::FetchModelServersResponse>>;

    async fn fetch_model_server_versions(
        &self,
        req: crate::model::FetchModelServerVersionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::FetchModelServerVersionsResponse>>;

    async fn fetch_profiles(
        &self,
        req: crate::model::FetchProfilesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::FetchProfilesResponse>>;

    async fn generate_optimized_manifest(
        &self,
        req: crate::model::GenerateOptimizedManifestRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::GenerateOptimizedManifestResponse>>;

    async fn fetch_benchmarking_data(
        &self,
        req: crate::model::FetchBenchmarkingDataRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::FetchBenchmarkingDataResponse>>;
}

/// All implementations of [super::GkeInferenceQuickstart] also implement [GkeInferenceQuickstart].
#[async_trait::async_trait]
impl<T: super::GkeInferenceQuickstart> GkeInferenceQuickstart for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn fetch_models(
        &self,
        req: crate::model::FetchModelsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::FetchModelsResponse>> {
        T::fetch_models(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn fetch_model_servers(
        &self,
        req: crate::model::FetchModelServersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::FetchModelServersResponse>> {
        T::fetch_model_servers(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn fetch_model_server_versions(
        &self,
        req: crate::model::FetchModelServerVersionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::FetchModelServerVersionsResponse>>
    {
        T::fetch_model_server_versions(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn fetch_profiles(
        &self,
        req: crate::model::FetchProfilesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::FetchProfilesResponse>> {
        T::fetch_profiles(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn generate_optimized_manifest(
        &self,
        req: crate::model::GenerateOptimizedManifestRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::GenerateOptimizedManifestResponse>>
    {
        T::generate_optimized_manifest(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn fetch_benchmarking_data(
        &self,
        req: crate::model::FetchBenchmarkingDataRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::FetchBenchmarkingDataResponse>> {
        T::fetch_benchmarking_data(self, req, options).await
    }
}
