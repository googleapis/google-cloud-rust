// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::GkeInferenceQuickstart].
///
/// Application developers may need to implement this trait to mock
/// `client::GkeInferenceQuickstart`.  In other use-cases, application developers only
/// use `client::GkeInferenceQuickstart` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait GkeInferenceQuickstart: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::GkeInferenceQuickstart::fetch_models].
    fn fetch_models(
        &self,
        _req: crate::model::FetchModelsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::FetchModelsResponse>>,
    > + Send {
        gaxi::unimplemented::unimplemented_stub()
    }

    /// Implements [super::client::GkeInferenceQuickstart::fetch_model_servers].
    fn fetch_model_servers(
        &self,
        _req: crate::model::FetchModelServersRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::FetchModelServersResponse>>,
    > + Send {
        gaxi::unimplemented::unimplemented_stub()
    }

    /// Implements [super::client::GkeInferenceQuickstart::fetch_model_server_versions].
    fn fetch_model_server_versions(
        &self,
        _req: crate::model::FetchModelServerVersionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::FetchModelServerVersionsResponse>,
        >,
    > + Send {
        gaxi::unimplemented::unimplemented_stub()
    }

    /// Implements [super::client::GkeInferenceQuickstart::fetch_profiles].
    fn fetch_profiles(
        &self,
        _req: crate::model::FetchProfilesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<gax::response::Response<crate::model::FetchProfilesResponse>>,
    > + Send {
        gaxi::unimplemented::unimplemented_stub()
    }

    /// Implements [super::client::GkeInferenceQuickstart::generate_optimized_manifest].
    fn generate_optimized_manifest(
        &self,
        _req: crate::model::GenerateOptimizedManifestRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::GenerateOptimizedManifestResponse>,
        >,
    > + Send {
        gaxi::unimplemented::unimplemented_stub()
    }

    /// Implements [super::client::GkeInferenceQuickstart::fetch_benchmarking_data].
    fn fetch_benchmarking_data(
        &self,
        _req: crate::model::FetchBenchmarkingDataRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<
            gax::response::Response<crate::model::FetchBenchmarkingDataResponse>,
        >,
    > + Send {
        gaxi::unimplemented::unimplemented_stub()
    }
}
