// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Document AI API.
///
/// # Service Description
///
/// Service to call Document AI to process documents according to the
/// processor's definition. Processors are built using state-of-the-art Google
/// AI such as natural language, computer vision, and translation to extract
/// structured information from unstructured or semi-structured documents.
///
/// # Configuration
///
/// `DocumentProcessorService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `DocumentProcessorService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DocumentProcessorService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct DocumentProcessorService {
    inner: Arc<dyn crate::stubs::dynamic::DocumentProcessorService>,
}

impl DocumentProcessorService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::DocumentProcessorService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::DocumentProcessorService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DocumentProcessorService> {
        crate::transport::DocumentProcessorService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DocumentProcessorService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::DocumentProcessorService::new)
    }

    /// Processes a single document.
    pub fn process_document(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::ProcessDocument {
        crate::builders::document_processor_service::ProcessDocument::new(self.inner.clone())
            .set_name(name.into())
    }

    /// LRO endpoint to batch process many documents. The output is written
    /// to Cloud Storage as JSON in the [Document] format.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_process_documents(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::BatchProcessDocuments {
        crate::builders::document_processor_service::BatchProcessDocuments::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Fetches processor types. Note that we don't use
    /// [ListProcessorTypes][google.cloud.documentai.v1.DocumentProcessorService.ListProcessorTypes]
    /// here, because it isn't paginated.
    ///
    /// [google.cloud.documentai.v1.DocumentProcessorService.ListProcessorTypes]: crate::client::DocumentProcessorService::list_processor_types
    pub fn fetch_processor_types(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::FetchProcessorTypes {
        crate::builders::document_processor_service::FetchProcessorTypes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists the processor types that exist.
    pub fn list_processor_types(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::ListProcessorTypes {
        crate::builders::document_processor_service::ListProcessorTypes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a processor type detail.
    pub fn get_processor_type(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::GetProcessorType {
        crate::builders::document_processor_service::GetProcessorType::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all processors which belong to this project.
    pub fn list_processors(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::ListProcessors {
        crate::builders::document_processor_service::ListProcessors::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a processor detail.
    pub fn get_processor(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::GetProcessor {
        crate::builders::document_processor_service::GetProcessor::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Trains a new processor version.
    /// Operation metadata is returned as
    /// [TrainProcessorVersionMetadata][google.cloud.documentai.v1.TrainProcessorVersionMetadata].
    ///
    /// [google.cloud.documentai.v1.TrainProcessorVersionMetadata]: crate::model::TrainProcessorVersionMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn train_processor_version(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::TrainProcessorVersion {
        crate::builders::document_processor_service::TrainProcessorVersion::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a processor version detail.
    pub fn get_processor_version(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::GetProcessorVersion {
        crate::builders::document_processor_service::GetProcessorVersion::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all versions of a processor.
    pub fn list_processor_versions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::ListProcessorVersions {
        crate::builders::document_processor_service::ListProcessorVersions::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes the processor version, all artifacts under the processor version
    /// will be deleted.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_processor_version(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::DeleteProcessorVersion {
        crate::builders::document_processor_service::DeleteProcessorVersion::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deploys the processor version.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn deploy_processor_version(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::DeployProcessorVersion {
        crate::builders::document_processor_service::DeployProcessorVersion::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Undeploys the processor version.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn undeploy_processor_version(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::UndeployProcessorVersion {
        crate::builders::document_processor_service::UndeployProcessorVersion::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Creates a processor from the
    /// [ProcessorType][google.cloud.documentai.v1.ProcessorType] provided. The
    /// processor will be at `ENABLED` state by default after its creation. Note
    /// that this method requires the `documentai.processors.create` permission on
    /// the project, which is highly privileged. A user or service account with
    /// this permission can create new processors that can interact with any gcs
    /// bucket in your project.
    ///
    /// [google.cloud.documentai.v1.ProcessorType]: crate::model::ProcessorType
    pub fn create_processor(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::CreateProcessor {
        crate::builders::document_processor_service::CreateProcessor::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes the processor, unloads all deployed model artifacts if it was
    /// enabled and then deletes all artifacts associated with this processor.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_processor(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::DeleteProcessor {
        crate::builders::document_processor_service::DeleteProcessor::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Enables a processor
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn enable_processor(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::EnableProcessor {
        crate::builders::document_processor_service::EnableProcessor::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Disables a processor
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn disable_processor(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::DisableProcessor {
        crate::builders::document_processor_service::DisableProcessor::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Set the default (active) version of a
    /// [Processor][google.cloud.documentai.v1.Processor] that will be used in
    /// [ProcessDocument][google.cloud.documentai.v1.DocumentProcessorService.ProcessDocument]
    /// and
    /// [BatchProcessDocuments][google.cloud.documentai.v1.DocumentProcessorService.BatchProcessDocuments].
    ///
    /// [google.cloud.documentai.v1.DocumentProcessorService.BatchProcessDocuments]: crate::client::DocumentProcessorService::batch_process_documents
    /// [google.cloud.documentai.v1.DocumentProcessorService.ProcessDocument]: crate::client::DocumentProcessorService::process_document
    /// [google.cloud.documentai.v1.Processor]: crate::model::Processor
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn set_default_processor_version(
        &self,
        processor: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::SetDefaultProcessorVersion {
        crate::builders::document_processor_service::SetDefaultProcessorVersion::new(
            self.inner.clone(),
        )
        .set_processor(processor.into())
    }

    /// Send a document for Human Review. The input document should be processed by
    /// the specified processor.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn review_document(
        &self,
        human_review_config: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::ReviewDocument {
        crate::builders::document_processor_service::ReviewDocument::new(self.inner.clone())
            .set_human_review_config(human_review_config.into())
    }

    /// Evaluates a ProcessorVersion against annotated documents, producing an
    /// Evaluation.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn evaluate_processor_version(
        &self,
        processor_version: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::EvaluateProcessorVersion {
        crate::builders::document_processor_service::EvaluateProcessorVersion::new(
            self.inner.clone(),
        )
        .set_processor_version(processor_version.into())
    }

    /// Retrieves a specific evaluation.
    pub fn get_evaluation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::GetEvaluation {
        crate::builders::document_processor_service::GetEvaluation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Retrieves a set of evaluations for a given processor version.
    pub fn list_evaluations(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::ListEvaluations {
        crate::builders::document_processor_service::ListEvaluations::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::ListLocations {
        crate::builders::document_processor_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::GetLocation {
        crate::builders::document_processor_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::ListOperations {
        crate::builders::document_processor_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::GetOperation {
        crate::builders::document_processor_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::document_processor_service::CancelOperation {
        crate::builders::document_processor_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
