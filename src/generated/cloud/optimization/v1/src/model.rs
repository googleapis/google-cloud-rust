// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gtype;
extern crate lazy_static;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// The desired input location information.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InputConfig {
    /// The input data format that used to store the model in Cloud Storage.
    pub data_format: crate::model::DataFormat,

    /// The location of the input model in cloud storage.
    /// Required.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub source: std::option::Option<crate::model::input_config::Source>,
}

impl InputConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [data_format][crate::model::InputConfig::data_format].
    pub fn set_data_format<T: std::convert::Into<crate::model::DataFormat>>(
        mut self,
        v: T,
    ) -> Self {
        self.data_format = v.into();
        self
    }

    /// Sets the value of `source`.
    pub fn set_source<
        T: std::convert::Into<std::option::Option<crate::model::input_config::Source>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = v.into();
        self
    }

    /// The value of [source][crate::model::InputConfig::source]
    /// if it holds a `GcsSource`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_gcs_source(&self) -> std::option::Option<&std::boxed::Box<crate::model::GcsSource>> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::input_config::Source::GcsSource(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [source][crate::model::InputConfig::source]
    /// to hold a `GcsSource`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_gcs_source<T: std::convert::Into<std::boxed::Box<crate::model::GcsSource>>>(
        mut self,
        v: T,
    ) -> Self {
        self.source =
            std::option::Option::Some(crate::model::input_config::Source::GcsSource(v.into()));
        self
    }
}

impl wkt::message::Message for InputConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.InputConfig"
    }
}

/// Defines additional types related to InputConfig
pub mod input_config {
    #[allow(unused_imports)]
    use super::*;

    /// The location of the input model in cloud storage.
    /// Required.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Source {
        /// The Google Cloud Storage location to read the input from. This must be a
        /// single file.
        GcsSource(std::boxed::Box<crate::model::GcsSource>),
    }
}

/// The desired output location.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OutputConfig {
    /// The output data format that used to store the results in Cloud Storage.
    pub data_format: crate::model::DataFormat,

    /// The location of the output result in cloud storage.
    /// Required.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub destination: std::option::Option<crate::model::output_config::Destination>,
}

impl OutputConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [data_format][crate::model::OutputConfig::data_format].
    pub fn set_data_format<T: std::convert::Into<crate::model::DataFormat>>(
        mut self,
        v: T,
    ) -> Self {
        self.data_format = v.into();
        self
    }

    /// Sets the value of `destination`.
    pub fn set_destination<
        T: std::convert::Into<std::option::Option<crate::model::output_config::Destination>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = v.into();
        self
    }

    /// The value of [destination][crate::model::OutputConfig::destination]
    /// if it holds a `GcsDestination`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_gcs_destination(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::GcsDestination>> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::output_config::Destination::GcsDestination(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [destination][crate::model::OutputConfig::destination]
    /// to hold a `GcsDestination`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_gcs_destination<
        T: std::convert::Into<std::boxed::Box<crate::model::GcsDestination>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::output_config::Destination::GcsDestination(v.into()),
        );
        self
    }
}

impl wkt::message::Message for OutputConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.OutputConfig"
    }
}

/// Defines additional types related to OutputConfig
pub mod output_config {
    #[allow(unused_imports)]
    use super::*;

    /// The location of the output result in cloud storage.
    /// Required.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Destination {
        /// The Google Cloud Storage location to write the output to.
        GcsDestination(std::boxed::Box<crate::model::GcsDestination>),
    }
}

/// The Google Cloud Storage location where the input file will be read from.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GcsSource {
    /// Required. URI of the Google Cloud Storage location.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,
}

impl GcsSource {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [uri][crate::model::GcsSource::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }
}

impl wkt::message::Message for GcsSource {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.GcsSource"
    }
}

/// The Google Cloud Storage location where the output file will be written to.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GcsDestination {
    /// Required. URI of the Google Cloud Storage location.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,
}

impl GcsDestination {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [uri][crate::model::GcsDestination::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }
}

impl wkt::message::Message for GcsDestination {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.GcsDestination"
    }
}

/// The long running operation metadata for async model related methods.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AsyncModelMetadata {
    /// The state of the current operation.
    pub state: crate::model::async_model_metadata::State,

    /// A message providing more details about the current state of the operation.
    /// For example, the error message if the operation is failed.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub state_message: std::string::String,

    /// The creation time of the operation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// The last update time of the operation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,
}

impl AsyncModelMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [state][crate::model::AsyncModelMetadata::state].
    pub fn set_state<T: std::convert::Into<crate::model::async_model_metadata::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [state_message][crate::model::AsyncModelMetadata::state_message].
    pub fn set_state_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.state_message = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::AsyncModelMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::AsyncModelMetadata::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }
}

impl wkt::message::Message for AsyncModelMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.AsyncModelMetadata"
    }
}

/// Defines additional types related to AsyncModelMetadata
pub mod async_model_metadata {
    #[allow(unused_imports)]
    use super::*;

    /// Possible states of the operation.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(std::borrow::Cow<'static, str>);

    impl State {
        /// Creates a new State instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [State](State)
    pub mod state {
        use super::State;

        /// The default value. This value is used if the state is omitted.
        pub const STATE_UNSPECIFIED: State = State::new("STATE_UNSPECIFIED");

        /// Request is being processed.
        pub const RUNNING: State = State::new("RUNNING");

        /// The operation completed successfully.
        pub const SUCCEEDED: State = State::new("SUCCEEDED");

        /// The operation was cancelled.
        pub const CANCELLED: State = State::new("CANCELLED");

        /// The operation has failed.
        pub const FAILED: State = State::new("FAILED");
    }

    impl std::convert::From<std::string::String> for State {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Request to be given to a tour optimization solver which defines the
/// shipment model to solve as well as optimization parameters.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OptimizeToursRequest {
    /// Required. Target project and location to make a call.
    ///
    /// Format: `projects/{project-id}/locations/{location-id}`.
    ///
    /// If no location is specified, a region will be chosen automatically.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// If this timeout is set, the server returns a response before the timeout
    /// period has elapsed or the server deadline for synchronous requests is
    /// reached, whichever is sooner.
    ///
    /// For asynchronous requests, the server will generate a solution (if
    /// possible) before the timeout has elapsed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub timeout: std::option::Option<wkt::Duration>,

    /// Shipment model to solve.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub model: std::option::Option<crate::model::ShipmentModel>,

    /// By default, the solving mode is `DEFAULT_SOLVE` (0).
    pub solving_mode: crate::model::optimize_tours_request::SolvingMode,

    /// Search mode used to solve the request.
    pub search_mode: crate::model::optimize_tours_request::SearchMode,

    /// Guide the optimization algorithm in finding a first solution that is
    /// similar to a previous solution.
    ///
    /// The model is constrained when the first solution is built.
    /// Any shipments not performed on a route are implicitly skipped in the first
    /// solution, but they may be performed in successive solutions.
    ///
    /// The solution must satisfy some basic validity assumptions:
    ///
    /// * for all routes, `vehicle_index` must be in range and not be duplicated.
    /// * for all visits, `shipment_index` and `visit_request_index` must be
    ///   in range.
    /// * a shipment may only be referenced on one route.
    /// * the pickup of a pickup-delivery shipment must be performed before
    ///   the delivery.
    /// * no more than one pickup alternative or delivery alternative of
    ///   a shipment may be performed.
    /// * for all routes, times are increasing (i.e., `vehicle_start_time
    ///   <= visits[0].start_time <= visits[1].start_time ...
    ///   <= vehicle_end_time`).
    /// * a shipment may only be performed on a vehicle that is allowed. A
    ///   vehicle is allowed if
    ///   [Shipment.allowed_vehicle_indices][google.cloud.optimization.v1.Shipment.allowed_vehicle_indices]
    ///   is empty or its `vehicle_index` is included in
    ///   [Shipment.allowed_vehicle_indices][google.cloud.optimization.v1.Shipment.allowed_vehicle_indices].
    ///
    /// If the injected solution is not feasible, a validation error is not
    /// necessarily returned and an error indicating infeasibility may be returned
    /// instead.
    ///
    /// [google.cloud.optimization.v1.Shipment.allowed_vehicle_indices]: crate::model::Shipment::allowed_vehicle_indices
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub injected_first_solution_routes: std::vec::Vec<crate::model::ShipmentRoute>,

    /// Constrain the optimization algorithm to find a final solution that is
    /// similar to a previous solution. For example, this may be used to freeze
    /// portions of routes which have already been completed or which are to be
    /// completed but must not be modified.
    ///
    /// If the injected solution is not feasible, a validation error is not
    /// necessarily returned and an error indicating infeasibility may be returned
    /// instead.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub injected_solution_constraint: std::option::Option<crate::model::InjectedSolutionConstraint>,

    /// If non-empty, the given routes will be refreshed, without modifying their
    /// underlying sequence of visits or travel times: only other details will be
    /// updated. This does not solve the model.
    ///
    /// As of 2020/11, this only populates the polylines of non-empty routes and
    /// requires that `populate_polylines` is true.
    ///
    /// The `route_polyline` fields of the passed-in routes may be inconsistent
    /// with route `transitions`.
    ///
    /// This field must not be used together with `injected_first_solution_routes`
    /// or `injected_solution_constraint`.
    ///
    /// `Shipment.ignore` and `Vehicle.ignore` have no effect on the behavior.
    /// Polylines are still populated between all visits in all non-empty routes
    /// regardless of whether the related shipments or vehicles are ignored.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub refresh_details_routes: std::vec::Vec<crate::model::ShipmentRoute>,

    /// If true:
    ///
    /// * uses
    ///   [ShipmentRoute.vehicle_label][google.cloud.optimization.v1.ShipmentRoute.vehicle_label]
    ///   instead of `vehicle_index` to
    ///   match routes in an injected solution with vehicles in the request;
    ///   reuses the mapping of original
    ///   [ShipmentRoute.vehicle_index][google.cloud.optimization.v1.ShipmentRoute.vehicle_index]
    ///   to new
    ///   [ShipmentRoute.vehicle_index][google.cloud.optimization.v1.ShipmentRoute.vehicle_index]
    ///   to update
    ///   [ConstraintRelaxation.vehicle_indices][google.cloud.optimization.v1.InjectedSolutionConstraint.ConstraintRelaxation.vehicle_indices]
    ///   if non-empty, but the mapping must be unambiguous (i.e., multiple
    ///   `ShipmentRoute`s must not share the same original `vehicle_index`).
    /// * uses
    ///   [ShipmentRoute.Visit.shipment_label][google.cloud.optimization.v1.ShipmentRoute.Visit.shipment_label]
    ///   instead of `shipment_index`
    ///   to match visits in an injected solution with shipments in the request;
    /// * uses
    ///   [SkippedShipment.label][google.cloud.optimization.v1.SkippedShipment.label]
    ///   instead of
    ///   [SkippedShipment.index][google.cloud.optimization.v1.SkippedShipment.index]
    ///   to
    ///   match skipped shipments in the injected solution with request
    ///   shipments.
    ///
    /// This interpretation applies to the `injected_first_solution_routes`,
    /// `injected_solution_constraint`, and `refresh_details_routes` fields.
    /// It can be used when shipment or vehicle indices in the request have
    /// changed since the solution was created, perhaps because shipments or
    /// vehicles have been removed from or added to the request.
    ///
    /// If true, labels in the following categories must appear at most once in
    /// their category:
    ///
    /// * [Vehicle.label][google.cloud.optimization.v1.Vehicle.label] in the
    ///   request;
    /// * [Shipment.label][google.cloud.optimization.v1.Shipment.label] in the
    ///   request;
    /// * [ShipmentRoute.vehicle_label][google.cloud.optimization.v1.ShipmentRoute.vehicle_label] in the injected solution;
    /// * [SkippedShipment.label][google.cloud.optimization.v1.SkippedShipment.label] and [ShipmentRoute.Visit.shipment_label][google.cloud.optimization.v1.ShipmentRoute.Visit.shipment_label] in
    ///   the injected solution (except pickup/delivery visit pairs, whose
    ///   `shipment_label` must appear twice).
    ///
    /// If a `vehicle_label` in the injected solution does not correspond to a
    /// request vehicle, the corresponding route is removed from the solution
    /// along with its visits. If a `shipment_label` in the injected solution does
    /// not correspond to a request shipment, the corresponding visit is removed
    /// from the solution. If a
    /// [SkippedShipment.label][google.cloud.optimization.v1.SkippedShipment.label]
    /// in the injected solution does not correspond to a request shipment, the
    /// `SkippedShipment` is removed from the solution.
    ///
    /// Removing route visits or entire routes from an injected solution may
    /// have an effect on the implied constraints, which may lead to change in
    /// solution, validation errors, or infeasibility.
    ///
    /// NOTE: The caller must ensure that each
    /// [Vehicle.label][google.cloud.optimization.v1.Vehicle.label] (resp.
    /// [Shipment.label][google.cloud.optimization.v1.Shipment.label]) uniquely
    /// identifies a vehicle (resp. shipment) entity used across the two relevant
    /// requests: the past request that produced the `OptimizeToursResponse` used
    /// in the injected solution and the current request that includes the injected
    /// solution. The uniqueness checks described above are not enough to guarantee
    /// this requirement.
    ///
    /// [google.cloud.optimization.v1.InjectedSolutionConstraint.ConstraintRelaxation.vehicle_indices]: crate::model::injected_solution_constraint::ConstraintRelaxation::vehicle_indices
    /// [google.cloud.optimization.v1.Shipment.label]: crate::model::Shipment::label
    /// [google.cloud.optimization.v1.ShipmentRoute.Visit.shipment_label]: crate::model::shipment_route::Visit::shipment_label
    /// [google.cloud.optimization.v1.ShipmentRoute.vehicle_index]: crate::model::ShipmentRoute::vehicle_index
    /// [google.cloud.optimization.v1.ShipmentRoute.vehicle_label]: crate::model::ShipmentRoute::vehicle_label
    /// [google.cloud.optimization.v1.SkippedShipment.index]: crate::model::SkippedShipment::index
    /// [google.cloud.optimization.v1.SkippedShipment.label]: crate::model::SkippedShipment::label
    /// [google.cloud.optimization.v1.Vehicle.label]: crate::model::Vehicle::label
    pub interpret_injected_solutions_using_labels: bool,

    /// Consider traffic estimation in calculating `ShipmentRoute` fields
    /// [Transition.travel_duration][google.cloud.optimization.v1.ShipmentRoute.Transition.travel_duration],
    /// [Visit.start_time][google.cloud.optimization.v1.ShipmentRoute.Visit.start_time],
    /// and `vehicle_end_time`; in setting the
    /// [ShipmentRoute.has_traffic_infeasibilities][google.cloud.optimization.v1.ShipmentRoute.has_traffic_infeasibilities]
    /// field, and in calculating the
    /// [OptimizeToursResponse.total_cost][google.cloud.optimization.v1.OptimizeToursResponse.total_cost]
    /// field.
    ///
    /// [google.cloud.optimization.v1.OptimizeToursResponse.total_cost]: crate::model::OptimizeToursResponse::total_cost
    /// [google.cloud.optimization.v1.ShipmentRoute.Transition.travel_duration]: crate::model::shipment_route::Transition::travel_duration
    /// [google.cloud.optimization.v1.ShipmentRoute.Visit.start_time]: crate::model::shipment_route::Visit::start_time
    /// [google.cloud.optimization.v1.ShipmentRoute.has_traffic_infeasibilities]: crate::model::ShipmentRoute::has_traffic_infeasibilities
    pub consider_road_traffic: bool,

    /// If true, polylines will be populated in response `ShipmentRoute`s.
    pub populate_polylines: bool,

    /// If true, polylines will be populated in response
    /// [ShipmentRoute.transitions][google.cloud.optimization.v1.ShipmentRoute.transitions].
    /// Note that in this case, the polylines will also be populated in the
    /// deprecated `travel_steps`.
    ///
    /// [google.cloud.optimization.v1.ShipmentRoute.transitions]: crate::model::ShipmentRoute::transitions
    pub populate_transition_polylines: bool,

    /// If this is set, then the request can have a deadline
    /// (see <https://grpc.io/blog/deadlines>) of up to 60 minutes.
    /// Otherwise, the maximum deadline is only 30 minutes.
    /// Note that long-lived requests have a significantly larger (but still small)
    /// risk of interruption.
    pub allow_large_deadline_despite_interruption_risk: bool,

    /// If true, travel distances will be computed using geodesic distances instead
    /// of Google Maps distances, and travel times will be computed using geodesic
    /// distances with a speed defined by `geodesic_meters_per_second`.
    pub use_geodesic_distances: bool,

    /// When `use_geodesic_distances` is true, this field must be set and defines
    /// the speed applied to compute travel times. Its value must be at least 1.0
    /// meters/seconds.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub geodesic_meters_per_second: std::option::Option<f64>,

    /// Truncates the number of validation errors returned. These errors are
    /// typically attached to an INVALID_ARGUMENT error payload as a BadRequest
    /// error detail (<https://cloud.google.com/apis/design/errors#error_details>),
    /// unless solving_mode=VALIDATE_ONLY: see the
    /// [OptimizeToursResponse.validation_errors][google.cloud.optimization.v1.OptimizeToursResponse.validation_errors]
    /// field.
    /// This defaults to 100 and is capped at 10,000.
    ///
    /// [google.cloud.optimization.v1.OptimizeToursResponse.validation_errors]: crate::model::OptimizeToursResponse::validation_errors
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub max_validation_errors: std::option::Option<i32>,

    /// Label that may be used to identify this request, reported back in the
    /// [OptimizeToursResponse.request_label][google.cloud.optimization.v1.OptimizeToursResponse.request_label].
    ///
    /// [google.cloud.optimization.v1.OptimizeToursResponse.request_label]: crate::model::OptimizeToursResponse::request_label
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub label: std::string::String,

    /// Deprecated: Use
    /// [OptimizeToursRequest.populate_transition_polylines][google.cloud.optimization.v1.OptimizeToursRequest.populate_transition_polylines]
    /// instead. If true, polylines will be populated in response
    /// [ShipmentRoute.transitions][google.cloud.optimization.v1.ShipmentRoute.transitions].
    /// Note that in this case, the polylines will also be populated in the
    /// deprecated `travel_steps`.
    ///
    /// [google.cloud.optimization.v1.OptimizeToursRequest.populate_transition_polylines]: crate::model::OptimizeToursRequest::populate_transition_polylines
    /// [google.cloud.optimization.v1.ShipmentRoute.transitions]: crate::model::ShipmentRoute::transitions
    pub populate_travel_step_polylines: bool,
}

impl OptimizeToursRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::OptimizeToursRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [timeout][crate::model::OptimizeToursRequest::timeout].
    pub fn set_timeout<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.timeout = v.into();
        self
    }

    /// Sets the value of [model][crate::model::OptimizeToursRequest::model].
    pub fn set_model<T: std::convert::Into<std::option::Option<crate::model::ShipmentModel>>>(
        mut self,
        v: T,
    ) -> Self {
        self.model = v.into();
        self
    }

    /// Sets the value of [solving_mode][crate::model::OptimizeToursRequest::solving_mode].
    pub fn set_solving_mode<
        T: std::convert::Into<crate::model::optimize_tours_request::SolvingMode>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.solving_mode = v.into();
        self
    }

    /// Sets the value of [search_mode][crate::model::OptimizeToursRequest::search_mode].
    pub fn set_search_mode<
        T: std::convert::Into<crate::model::optimize_tours_request::SearchMode>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.search_mode = v.into();
        self
    }

    /// Sets the value of [injected_solution_constraint][crate::model::OptimizeToursRequest::injected_solution_constraint].
    pub fn set_injected_solution_constraint<
        T: std::convert::Into<std::option::Option<crate::model::InjectedSolutionConstraint>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.injected_solution_constraint = v.into();
        self
    }

    /// Sets the value of [interpret_injected_solutions_using_labels][crate::model::OptimizeToursRequest::interpret_injected_solutions_using_labels].
    pub fn set_interpret_injected_solutions_using_labels<T: std::convert::Into<bool>>(
        mut self,
        v: T,
    ) -> Self {
        self.interpret_injected_solutions_using_labels = v.into();
        self
    }

    /// Sets the value of [consider_road_traffic][crate::model::OptimizeToursRequest::consider_road_traffic].
    pub fn set_consider_road_traffic<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.consider_road_traffic = v.into();
        self
    }

    /// Sets the value of [populate_polylines][crate::model::OptimizeToursRequest::populate_polylines].
    pub fn set_populate_polylines<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.populate_polylines = v.into();
        self
    }

    /// Sets the value of [populate_transition_polylines][crate::model::OptimizeToursRequest::populate_transition_polylines].
    pub fn set_populate_transition_polylines<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.populate_transition_polylines = v.into();
        self
    }

    /// Sets the value of [allow_large_deadline_despite_interruption_risk][crate::model::OptimizeToursRequest::allow_large_deadline_despite_interruption_risk].
    pub fn set_allow_large_deadline_despite_interruption_risk<T: std::convert::Into<bool>>(
        mut self,
        v: T,
    ) -> Self {
        self.allow_large_deadline_despite_interruption_risk = v.into();
        self
    }

    /// Sets the value of [use_geodesic_distances][crate::model::OptimizeToursRequest::use_geodesic_distances].
    pub fn set_use_geodesic_distances<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.use_geodesic_distances = v.into();
        self
    }

    /// Sets the value of [geodesic_meters_per_second][crate::model::OptimizeToursRequest::geodesic_meters_per_second].
    pub fn set_geodesic_meters_per_second<T: std::convert::Into<std::option::Option<f64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.geodesic_meters_per_second = v.into();
        self
    }

    /// Sets the value of [max_validation_errors][crate::model::OptimizeToursRequest::max_validation_errors].
    pub fn set_max_validation_errors<T: std::convert::Into<std::option::Option<i32>>>(
        mut self,
        v: T,
    ) -> Self {
        self.max_validation_errors = v.into();
        self
    }

    /// Sets the value of [label][crate::model::OptimizeToursRequest::label].
    pub fn set_label<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.label = v.into();
        self
    }

    /// Sets the value of [populate_travel_step_polylines][crate::model::OptimizeToursRequest::populate_travel_step_polylines].
    pub fn set_populate_travel_step_polylines<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.populate_travel_step_polylines = v.into();
        self
    }

    /// Sets the value of [injected_first_solution_routes][crate::model::OptimizeToursRequest::injected_first_solution_routes].
    pub fn set_injected_first_solution_routes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ShipmentRoute>,
    {
        use std::iter::Iterator;
        self.injected_first_solution_routes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [refresh_details_routes][crate::model::OptimizeToursRequest::refresh_details_routes].
    pub fn set_refresh_details_routes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ShipmentRoute>,
    {
        use std::iter::Iterator;
        self.refresh_details_routes = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for OptimizeToursRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.OptimizeToursRequest"
    }
}

/// Defines additional types related to OptimizeToursRequest
pub mod optimize_tours_request {
    #[allow(unused_imports)]
    use super::*;

    /// Defines how the solver should handle the request. In all modes but
    /// `VALIDATE_ONLY`, if the request is invalid, you will receive an
    /// `INVALID_REQUEST` error. See
    /// [max_validation_errors][google.cloud.optimization.v1.OptimizeToursRequest.max_validation_errors]
    /// to cap the number of errors returned.
    ///
    /// [google.cloud.optimization.v1.OptimizeToursRequest.max_validation_errors]: crate::model::OptimizeToursRequest::max_validation_errors
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct SolvingMode(std::borrow::Cow<'static, str>);

    impl SolvingMode {
        /// Creates a new SolvingMode instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [SolvingMode](SolvingMode)
    pub mod solving_mode {
        use super::SolvingMode;

        /// Solve the model.
        pub const DEFAULT_SOLVE: SolvingMode = SolvingMode::new("DEFAULT_SOLVE");

        /// Only validates the model without solving it: populates as many
        /// [OptimizeToursResponse.validation_errors][google.cloud.optimization.v1.OptimizeToursResponse.validation_errors]
        /// as possible.
        ///
        /// [google.cloud.optimization.v1.OptimizeToursResponse.validation_errors]: crate::model::OptimizeToursResponse::validation_errors
        pub const VALIDATE_ONLY: SolvingMode = SolvingMode::new("VALIDATE_ONLY");

        /// Only populates
        /// [OptimizeToursResponse.validation_errors][google.cloud.optimization.v1.OptimizeToursResponse.validation_errors]
        /// or
        /// [OptimizeToursResponse.skipped_shipments][google.cloud.optimization.v1.OptimizeToursResponse.skipped_shipments],
        /// and doesn't actually solve the rest of the request (`status` and `routes`
        /// are unset in the response).
        /// If infeasibilities in `injected_solution_constraint` routes are detected
        /// they are populated in the
        /// [OptimizeToursResponse.validation_errors][google.cloud.optimization.v1.OptimizeToursResponse.validation_errors]
        /// field and
        /// [OptimizeToursResponse.skipped_shipments][google.cloud.optimization.v1.OptimizeToursResponse.skipped_shipments]
        /// is left empty.
        ///
        /// *IMPORTANT*: not all infeasible shipments are returned here, but only the
        /// ones that are detected as infeasible during preprocessing.
        ///
        /// [google.cloud.optimization.v1.OptimizeToursResponse.skipped_shipments]: crate::model::OptimizeToursResponse::skipped_shipments
        /// [google.cloud.optimization.v1.OptimizeToursResponse.validation_errors]: crate::model::OptimizeToursResponse::validation_errors
        pub const DETECT_SOME_INFEASIBLE_SHIPMENTS: SolvingMode =
            SolvingMode::new("DETECT_SOME_INFEASIBLE_SHIPMENTS");
    }

    impl std::convert::From<std::string::String> for SolvingMode {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// Mode defining the behavior of the search, trading off latency versus
    /// solution quality. In all modes, the global request deadline is enforced.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct SearchMode(std::borrow::Cow<'static, str>);

    impl SearchMode {
        /// Creates a new SearchMode instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [SearchMode](SearchMode)
    pub mod search_mode {
        use super::SearchMode;

        /// Unspecified search mode, equivalent to `RETURN_FAST`.
        pub const SEARCH_MODE_UNSPECIFIED: SearchMode = SearchMode::new("SEARCH_MODE_UNSPECIFIED");

        /// Stop the search after finding the first good solution.
        pub const RETURN_FAST: SearchMode = SearchMode::new("RETURN_FAST");

        /// Spend all the available time to search for better solutions.
        pub const CONSUME_ALL_AVAILABLE_TIME: SearchMode =
            SearchMode::new("CONSUME_ALL_AVAILABLE_TIME");
    }

    impl std::convert::From<std::string::String> for SearchMode {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Response after solving a tour optimization problem containing the routes
/// followed by each vehicle, the shipments which have been skipped and the
/// overall cost of the solution.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OptimizeToursResponse {
    /// Routes computed for each vehicle; the i-th route corresponds to the i-th
    /// vehicle in the model.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub routes: std::vec::Vec<crate::model::ShipmentRoute>,

    /// Copy of the
    /// [OptimizeToursRequest.label][google.cloud.optimization.v1.OptimizeToursRequest.label],
    /// if a label was specified in the request.
    ///
    /// [google.cloud.optimization.v1.OptimizeToursRequest.label]: crate::model::OptimizeToursRequest::label
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_label: std::string::String,

    /// The list of all shipments skipped.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub skipped_shipments: std::vec::Vec<crate::model::SkippedShipment>,

    /// List of all the validation errors that we were able to detect
    /// independently. See the "MULTIPLE ERRORS" explanation for the
    /// [OptimizeToursValidationError][google.cloud.optimization.v1.OptimizeToursValidationError]
    /// message.
    ///
    /// [google.cloud.optimization.v1.OptimizeToursValidationError]: crate::model::OptimizeToursValidationError
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub validation_errors: std::vec::Vec<crate::model::OptimizeToursValidationError>,

    /// Duration, distance and usage metrics for this solution.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub metrics: std::option::Option<crate::model::optimize_tours_response::Metrics>,

    /// Deprecated: Use
    /// [Metrics.total_cost][google.cloud.optimization.v1.OptimizeToursResponse.Metrics.total_cost]
    /// instead. Total cost of the solution. This takes into account all costs:
    /// costs per per hour and travel hour, fixed vehicle costs, unperformed
    /// shipment penalty costs, global duration cost, etc.
    ///
    /// [google.cloud.optimization.v1.OptimizeToursResponse.Metrics.total_cost]: crate::model::optimize_tours_response::Metrics::total_cost
    pub total_cost: f64,
}

impl OptimizeToursResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [request_label][crate::model::OptimizeToursResponse::request_label].
    pub fn set_request_label<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_label = v.into();
        self
    }

    /// Sets the value of [metrics][crate::model::OptimizeToursResponse::metrics].
    pub fn set_metrics<
        T: std::convert::Into<std::option::Option<crate::model::optimize_tours_response::Metrics>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metrics = v.into();
        self
    }

    /// Sets the value of [total_cost][crate::model::OptimizeToursResponse::total_cost].
    pub fn set_total_cost<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.total_cost = v.into();
        self
    }

    /// Sets the value of [routes][crate::model::OptimizeToursResponse::routes].
    pub fn set_routes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ShipmentRoute>,
    {
        use std::iter::Iterator;
        self.routes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [skipped_shipments][crate::model::OptimizeToursResponse::skipped_shipments].
    pub fn set_skipped_shipments<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SkippedShipment>,
    {
        use std::iter::Iterator;
        self.skipped_shipments = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [validation_errors][crate::model::OptimizeToursResponse::validation_errors].
    pub fn set_validation_errors<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::OptimizeToursValidationError>,
    {
        use std::iter::Iterator;
        self.validation_errors = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for OptimizeToursResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.OptimizeToursResponse"
    }
}

/// Defines additional types related to OptimizeToursResponse
pub mod optimize_tours_response {
    #[allow(unused_imports)]
    use super::*;

    /// Overall metrics, aggregated over all routes.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Metrics {
        /// Aggregated over the routes. Each metric is the sum (or max, for loads)
        /// over all
        /// [ShipmentRoute.metrics][google.cloud.optimization.v1.ShipmentRoute.metrics]
        /// fields of the same name.
        ///
        /// [google.cloud.optimization.v1.ShipmentRoute.metrics]: crate::model::ShipmentRoute::metrics
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub aggregated_route_metrics: std::option::Option<crate::model::AggregatedMetrics>,

        /// Number of mandatory shipments skipped.
        pub skipped_mandatory_shipment_count: i32,

        /// Number of vehicles used. Note: if a vehicle route is empty and
        /// [Vehicle.used_if_route_is_empty][google.cloud.optimization.v1.Vehicle.used_if_route_is_empty]
        /// is true, the vehicle is considered used.
        ///
        /// [google.cloud.optimization.v1.Vehicle.used_if_route_is_empty]: crate::model::Vehicle::used_if_route_is_empty
        pub used_vehicle_count: i32,

        /// The earliest start time for a used vehicle, computed as the minimum over
        /// all used vehicles of
        /// [ShipmentRoute.vehicle_start_time][google.cloud.optimization.v1.ShipmentRoute.vehicle_start_time].
        ///
        /// [google.cloud.optimization.v1.ShipmentRoute.vehicle_start_time]: crate::model::ShipmentRoute::vehicle_start_time
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub earliest_vehicle_start_time: std::option::Option<wkt::Timestamp>,

        /// The latest end time for a used vehicle, computed as the maximum over all
        /// used vehicles of
        /// [ShipmentRoute.vehicle_end_time][google.cloud.optimization.v1.ShipmentRoute.vehicle_end_time].
        ///
        /// [google.cloud.optimization.v1.ShipmentRoute.vehicle_end_time]: crate::model::ShipmentRoute::vehicle_end_time
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub latest_vehicle_end_time: std::option::Option<wkt::Timestamp>,

        /// Cost of the solution, broken down by cost-related request fields.
        /// The keys are proto paths, relative to the input OptimizeToursRequest,
        /// e.g. "model.shipments.pickups.cost", and the values are the total cost
        /// generated by the corresponding cost field, aggregated over the whole
        /// solution. In other words, costs["model.shipments.pickups.cost"] is the
        /// sum of all pickup costs over the solution. All costs defined in the model
        /// are reported in detail here with the exception of costs related to
        /// TransitionAttributes that are only reported in an aggregated way as of
        /// 2022/01.
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub costs: std::collections::HashMap<std::string::String, f64>,

        /// Total cost of the solution. The sum of all values in the costs map.
        pub total_cost: f64,
    }

    impl Metrics {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [aggregated_route_metrics][crate::model::optimize_tours_response::Metrics::aggregated_route_metrics].
        pub fn set_aggregated_route_metrics<
            T: std::convert::Into<std::option::Option<crate::model::AggregatedMetrics>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.aggregated_route_metrics = v.into();
            self
        }

        /// Sets the value of [skipped_mandatory_shipment_count][crate::model::optimize_tours_response::Metrics::skipped_mandatory_shipment_count].
        pub fn set_skipped_mandatory_shipment_count<T: std::convert::Into<i32>>(
            mut self,
            v: T,
        ) -> Self {
            self.skipped_mandatory_shipment_count = v.into();
            self
        }

        /// Sets the value of [used_vehicle_count][crate::model::optimize_tours_response::Metrics::used_vehicle_count].
        pub fn set_used_vehicle_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.used_vehicle_count = v.into();
            self
        }

        /// Sets the value of [earliest_vehicle_start_time][crate::model::optimize_tours_response::Metrics::earliest_vehicle_start_time].
        pub fn set_earliest_vehicle_start_time<
            T: std::convert::Into<std::option::Option<wkt::Timestamp>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.earliest_vehicle_start_time = v.into();
            self
        }

        /// Sets the value of [latest_vehicle_end_time][crate::model::optimize_tours_response::Metrics::latest_vehicle_end_time].
        pub fn set_latest_vehicle_end_time<
            T: std::convert::Into<std::option::Option<wkt::Timestamp>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.latest_vehicle_end_time = v.into();
            self
        }

        /// Sets the value of [total_cost][crate::model::optimize_tours_response::Metrics::total_cost].
        pub fn set_total_cost<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.total_cost = v.into();
            self
        }

        /// Sets the value of [costs][crate::model::optimize_tours_response::Metrics::costs].
        pub fn set_costs<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<f64>,
        {
            use std::iter::Iterator;
            self.costs = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl wkt::message::Message for Metrics {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.OptimizeToursResponse.Metrics"
        }
    }
}

/// Request to batch optimize tours as an asynchronous operation.
/// Each input file should contain one `OptimizeToursRequest`, and each output
/// file will contain one `OptimizeToursResponse`. The request contains
/// information to read/write and parse the files. All the input and output files
/// should be under the same project.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchOptimizeToursRequest {
    /// Required. Target project and location to make a call.
    ///
    /// Format: `projects/{project-id}/locations/{location-id}`.
    ///
    /// If no location is specified, a region will be chosen automatically.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Input/Output information each purchase model, such as file paths
    /// and data formats.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub model_configs: std::vec::Vec<crate::model::batch_optimize_tours_request::AsyncModelConfig>,
}

impl BatchOptimizeToursRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::BatchOptimizeToursRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [model_configs][crate::model::BatchOptimizeToursRequest::model_configs].
    pub fn set_model_configs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::batch_optimize_tours_request::AsyncModelConfig>,
    {
        use std::iter::Iterator;
        self.model_configs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchOptimizeToursRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.BatchOptimizeToursRequest"
    }
}

/// Defines additional types related to BatchOptimizeToursRequest
pub mod batch_optimize_tours_request {
    #[allow(unused_imports)]
    use super::*;

    /// Information for solving one optimization model asynchronously.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AsyncModelConfig {
        /// User defined model name, can be used as alias by users to keep track of
        /// models.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub display_name: std::string::String,

        /// Required. Information about the input model.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub input_config: std::option::Option<crate::model::InputConfig>,

        /// Required. The desired output location information.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub output_config: std::option::Option<crate::model::OutputConfig>,

        /// If this is set, the model will be solved in the checkpoint mode. In this
        /// mode, the input model can have a deadline longer than 30 mins without the
        /// risk of interruption. The model will be solved in multiple short-running
        /// stages. Each stage generates an intermediate checkpoint
        /// and stores it in the user's Cloud Storage buckets. The checkpoint
        /// mode should be preferred over
        /// allow_large_deadline_despite_interruption_risk since it prevents the risk
        /// of interruption.
        pub enable_checkpoints: bool,
    }

    impl AsyncModelConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [display_name][crate::model::batch_optimize_tours_request::AsyncModelConfig::display_name].
        pub fn set_display_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.display_name = v.into();
            self
        }

        /// Sets the value of [input_config][crate::model::batch_optimize_tours_request::AsyncModelConfig::input_config].
        pub fn set_input_config<
            T: std::convert::Into<std::option::Option<crate::model::InputConfig>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.input_config = v.into();
            self
        }

        /// Sets the value of [output_config][crate::model::batch_optimize_tours_request::AsyncModelConfig::output_config].
        pub fn set_output_config<
            T: std::convert::Into<std::option::Option<crate::model::OutputConfig>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.output_config = v.into();
            self
        }

        /// Sets the value of [enable_checkpoints][crate::model::batch_optimize_tours_request::AsyncModelConfig::enable_checkpoints].
        pub fn set_enable_checkpoints<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enable_checkpoints = v.into();
            self
        }
    }

    impl wkt::message::Message for AsyncModelConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.BatchOptimizeToursRequest.AsyncModelConfig"
        }
    }
}

/// Response to a `BatchOptimizeToursRequest`. This is returned in
/// the LRO Operation after the operation is complete.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchOptimizeToursResponse {}

impl BatchOptimizeToursResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for BatchOptimizeToursResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.BatchOptimizeToursResponse"
    }
}

/// A shipment model contains a set of shipments which must be performed by a
/// set of vehicles, while minimizing the overall cost, which is the sum of:
///
/// * the cost of routing the vehicles (sum of cost per total time, cost per
///   travel time, and fixed cost over all vehicles).
/// * the unperformed shipment penalties.
/// * the cost of the global duration of the shipments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ShipmentModel {
    /// Set of shipments which must be performed in the model.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub shipments: std::vec::Vec<crate::model::Shipment>,

    /// Set of vehicles which can be used to perform visits.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub vehicles: std::vec::Vec<crate::model::Vehicle>,

    /// Constrains the maximum number of active vehicles. A vehicle is active if
    /// its route performs at least one shipment. This can be used to limit the
    /// number of routes in the case where there are fewer drivers than
    /// vehicles and that the fleet of vehicles is heterogeneous. The optimization
    /// will then select the best subset of vehicles to use.
    /// Must be strictly positive.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub max_active_vehicles: std::option::Option<i32>,

    /// Global start and end time of the model: no times outside of this range
    /// can be considered valid.
    ///
    /// The model's time span must be less than a year, i.e. the `global_end_time`
    /// and the `global_start_time` must be within 31536000 seconds of each other.
    ///
    /// When using `cost_per_*hour` fields, you might want to set this window to a
    /// smaller interval to increase performance (eg. if you model a single day,
    /// you should set the global time limits to that day).
    /// If unset, 00:00:00 UTC, January 1, 1970 (i.e. seconds: 0, nanos: 0) is used
    /// as default.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub global_start_time: std::option::Option<wkt::Timestamp>,

    /// If unset, 00:00:00 UTC, January 1, 1971 (i.e. seconds: 31536000, nanos: 0)
    /// is used as default.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub global_end_time: std::option::Option<wkt::Timestamp>,

    /// The "global duration" of the overall plan is the difference between the
    /// earliest effective start time and the latest effective end time of
    /// all vehicles. Users can assign a cost per hour to that quantity to try
    /// and optimize for earliest job completion, for example. This cost must be in
    /// the same unit as
    /// [Shipment.penalty_cost][google.cloud.optimization.v1.Shipment.penalty_cost].
    ///
    /// [google.cloud.optimization.v1.Shipment.penalty_cost]: crate::model::Shipment::penalty_cost
    pub global_duration_cost_per_hour: f64,

    /// Specifies duration and distance matrices used in the model. If this field
    /// is empty, Google Maps or geodesic distances will be used instead, depending
    /// on the value of the `use_geodesic_distances` field. If it is not empty,
    /// `use_geodesic_distances` cannot be true and neither
    /// `duration_distance_matrix_src_tags` nor `duration_distance_matrix_dst_tags`
    /// can be empty.
    ///
    /// Usage examples:
    ///
    /// * There are two locations: locA and locB.
    /// * 1 vehicle starting its route at locA and ending it at locA.
    /// * 1 pickup visit request at locB.
    ///
    /// ```norust
    /// model {
    ///   vehicles { start_tags: "locA"  end_tags: "locA" }
    ///   shipments { pickups { tags: "locB" } }
    ///   duration_distance_matrix_src_tags: "locA"
    ///   duration_distance_matrix_src_tags: "locB"
    ///   duration_distance_matrix_dst_tags: "locA"
    ///   duration_distance_matrix_dst_tags: "locB"
    ///   duration_distance_matrices {
    ///     rows {  # from: locA
    ///       durations { seconds: 0 }   meters: 0    # to: locA
    ///       durations { seconds: 100 } meters: 1000 # to: locB
    ///     }
    ///     rows {  # from: locB
    ///       durations { seconds: 102 } meters: 990 # to: locA
    ///       durations { seconds: 0 }   meters: 0   # to: locB
    ///     }
    ///   }
    /// }
    /// ```
    ///
    /// * There are three locations: locA, locB and locC.
    /// * 1 vehicle starting its route at locA and ending it at locB, using
    ///   matrix "fast".
    /// * 1 vehicle starting its route at locB and ending it at locB, using
    ///   matrix "slow".
    /// * 1 vehicle starting its route at locB and ending it at locB, using
    ///   matrix "fast".
    /// * 1 pickup visit request at locC.
    ///
    /// ```norust
    /// model {
    ///   vehicles { start_tags: "locA" end_tags: "locB" start_tags: "fast" }
    ///   vehicles { start_tags: "locB" end_tags: "locB" start_tags: "slow" }
    ///   vehicles { start_tags: "locB" end_tags: "locB" start_tags: "fast" }
    ///   shipments { pickups { tags: "locC" } }
    ///   duration_distance_matrix_src_tags: "locA"
    ///   duration_distance_matrix_src_tags: "locB"
    ///   duration_distance_matrix_src_tags: "locC"
    ///   duration_distance_matrix_dst_tags: "locB"
    ///   duration_distance_matrix_dst_tags: "locC"
    ///   duration_distance_matrices {
    ///     vehicle_start_tag: "fast"
    ///     rows {  # from: locA
    ///       durations { seconds: 1000 } meters: 2000 # to: locB
    ///       durations { seconds: 600 }  meters: 1000 # to: locC
    ///     }
    ///     rows {  # from: locB
    ///       durations { seconds: 0 }   meters: 0    # to: locB
    ///       durations { seconds: 700 } meters: 1200 # to: locC
    ///     }
    ///     rows {  # from: locC
    ///       durations { seconds: 702 } meters: 1190 # to: locB
    ///       durations { seconds: 0 }   meters: 0    # to: locC
    ///     }
    ///   }
    ///   duration_distance_matrices {
    ///     vehicle_start_tag: "slow"
    ///     rows {  # from: locA
    ///       durations { seconds: 1800 } meters: 2001 # to: locB
    ///       durations { seconds: 900 }  meters: 1002 # to: locC
    ///     }
    ///     rows {  # from: locB
    ///       durations { seconds: 0 }    meters: 0    # to: locB
    ///       durations { seconds: 1000 } meters: 1202 # to: locC
    ///     }
    ///     rows {  # from: locC
    ///       durations { seconds: 1001 } meters: 1195 # to: locB
    ///       durations { seconds: 0 }    meters: 0    # to: locC
    ///     }
    ///   }
    /// }
    /// ```
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub duration_distance_matrices:
        std::vec::Vec<crate::model::shipment_model::DurationDistanceMatrix>,

    /// Tags defining the sources of the duration and distance matrices;
    /// `duration_distance_matrices(i).rows(j)` defines durations and distances
    /// from visits with tag `duration_distance_matrix_src_tags(j)` to other visits
    /// in matrix i.
    ///
    /// Tags correspond to
    /// [VisitRequest.tags][google.cloud.optimization.v1.Shipment.VisitRequest.tags]
    /// or [Vehicle.start_tags][google.cloud.optimization.v1.Vehicle.start_tags].
    /// A given `VisitRequest` or `Vehicle` must match exactly one tag in this
    /// field. Note that a `Vehicle`'s source, destination and matrix tags may be
    /// the same; similarly a `VisitRequest`'s source and destination tags may be
    /// the same. All tags must be different and cannot be empty strings. If this
    /// field is not empty, then `duration_distance_matrices` must not be empty.
    ///
    /// [google.cloud.optimization.v1.Shipment.VisitRequest.tags]: crate::model::shipment::VisitRequest::tags
    /// [google.cloud.optimization.v1.Vehicle.start_tags]: crate::model::Vehicle::start_tags
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub duration_distance_matrix_src_tags: std::vec::Vec<std::string::String>,

    /// Tags defining the destinations of the duration and distance matrices;
    /// `duration_distance_matrices(i).rows(j).durations(k)` (resp.
    /// `duration_distance_matrices(i).rows(j).meters(k))` defines the duration
    /// (resp. the distance) of the travel from visits with tag
    /// `duration_distance_matrix_src_tags(j)` to visits with tag
    /// `duration_distance_matrix_dst_tags(k)` in matrix i.
    ///
    /// Tags correspond to
    /// [VisitRequest.tags][google.cloud.optimization.v1.Shipment.VisitRequest.tags]
    /// or [Vehicle.start_tags][google.cloud.optimization.v1.Vehicle.start_tags].
    /// A given `VisitRequest` or `Vehicle` must match exactly one tag in this
    /// field. Note that a `Vehicle`'s source, destination and matrix tags may be
    /// the same; similarly a `VisitRequest`'s source and destination tags may be
    /// the same. All tags must be different and cannot be empty strings. If this
    /// field is not empty, then `duration_distance_matrices` must not be empty.
    ///
    /// [google.cloud.optimization.v1.Shipment.VisitRequest.tags]: crate::model::shipment::VisitRequest::tags
    /// [google.cloud.optimization.v1.Vehicle.start_tags]: crate::model::Vehicle::start_tags
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub duration_distance_matrix_dst_tags: std::vec::Vec<std::string::String>,

    /// Transition attributes added to the model.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub transition_attributes: std::vec::Vec<crate::model::TransitionAttributes>,

    /// Sets of incompatible shipment_types (see `ShipmentTypeIncompatibility`).
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub shipment_type_incompatibilities: std::vec::Vec<crate::model::ShipmentTypeIncompatibility>,

    /// Sets of `shipment_type` requirements (see `ShipmentTypeRequirement`).
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub shipment_type_requirements: std::vec::Vec<crate::model::ShipmentTypeRequirement>,

    /// Set of precedence rules which must be enforced in the model.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub precedence_rules: std::vec::Vec<crate::model::shipment_model::PrecedenceRule>,

    /// Deprecated: No longer used.
    /// Set of break rules used in the model.
    /// Each vehicle specifies the `BreakRule` that applies to it via the
    /// [Vehicle.break_rule_indices][google.cloud.optimization.v1.Vehicle.break_rule_indices]
    /// field (which must be a singleton).
    ///
    /// [google.cloud.optimization.v1.Vehicle.break_rule_indices]: crate::model::Vehicle::break_rule_indices
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub break_rules: std::vec::Vec<crate::model::shipment_model::BreakRule>,
}

impl ShipmentModel {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [max_active_vehicles][crate::model::ShipmentModel::max_active_vehicles].
    pub fn set_max_active_vehicles<T: std::convert::Into<std::option::Option<i32>>>(
        mut self,
        v: T,
    ) -> Self {
        self.max_active_vehicles = v.into();
        self
    }

    /// Sets the value of [global_start_time][crate::model::ShipmentModel::global_start_time].
    pub fn set_global_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.global_start_time = v.into();
        self
    }

    /// Sets the value of [global_end_time][crate::model::ShipmentModel::global_end_time].
    pub fn set_global_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.global_end_time = v.into();
        self
    }

    /// Sets the value of [global_duration_cost_per_hour][crate::model::ShipmentModel::global_duration_cost_per_hour].
    pub fn set_global_duration_cost_per_hour<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.global_duration_cost_per_hour = v.into();
        self
    }

    /// Sets the value of [shipments][crate::model::ShipmentModel::shipments].
    pub fn set_shipments<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Shipment>,
    {
        use std::iter::Iterator;
        self.shipments = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [vehicles][crate::model::ShipmentModel::vehicles].
    pub fn set_vehicles<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Vehicle>,
    {
        use std::iter::Iterator;
        self.vehicles = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [duration_distance_matrices][crate::model::ShipmentModel::duration_distance_matrices].
    pub fn set_duration_distance_matrices<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::shipment_model::DurationDistanceMatrix>,
    {
        use std::iter::Iterator;
        self.duration_distance_matrices = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [duration_distance_matrix_src_tags][crate::model::ShipmentModel::duration_distance_matrix_src_tags].
    pub fn set_duration_distance_matrix_src_tags<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.duration_distance_matrix_src_tags = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [duration_distance_matrix_dst_tags][crate::model::ShipmentModel::duration_distance_matrix_dst_tags].
    pub fn set_duration_distance_matrix_dst_tags<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.duration_distance_matrix_dst_tags = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [transition_attributes][crate::model::ShipmentModel::transition_attributes].
    pub fn set_transition_attributes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TransitionAttributes>,
    {
        use std::iter::Iterator;
        self.transition_attributes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [shipment_type_incompatibilities][crate::model::ShipmentModel::shipment_type_incompatibilities].
    pub fn set_shipment_type_incompatibilities<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ShipmentTypeIncompatibility>,
    {
        use std::iter::Iterator;
        self.shipment_type_incompatibilities = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [shipment_type_requirements][crate::model::ShipmentModel::shipment_type_requirements].
    pub fn set_shipment_type_requirements<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ShipmentTypeRequirement>,
    {
        use std::iter::Iterator;
        self.shipment_type_requirements = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [precedence_rules][crate::model::ShipmentModel::precedence_rules].
    pub fn set_precedence_rules<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::shipment_model::PrecedenceRule>,
    {
        use std::iter::Iterator;
        self.precedence_rules = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [break_rules][crate::model::ShipmentModel::break_rules].
    pub fn set_break_rules<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::shipment_model::BreakRule>,
    {
        use std::iter::Iterator;
        self.break_rules = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ShipmentModel {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.ShipmentModel"
    }
}

/// Defines additional types related to ShipmentModel
pub mod shipment_model {
    #[allow(unused_imports)]
    use super::*;

    /// Specifies a duration and distance matrix from visit and vehicle start
    /// locations to visit and vehicle end locations.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct DurationDistanceMatrix {
        /// Specifies the rows of the duration and distance matrix. It must have as
        /// many elements as
        /// [ShipmentModel.duration_distance_matrix_src_tags][google.cloud.optimization.v1.ShipmentModel.duration_distance_matrix_src_tags].
        ///
        /// [google.cloud.optimization.v1.ShipmentModel.duration_distance_matrix_src_tags]: crate::model::ShipmentModel::duration_distance_matrix_src_tags
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub rows: std::vec::Vec<crate::model::shipment_model::duration_distance_matrix::Row>,

        /// Tag defining to which vehicles this duration and distance matrix applies.
        /// If empty, this applies to all vehicles, and there can only be a single
        /// matrix.
        ///
        /// Each vehicle start must match exactly one matrix, i.e. exactly one of
        /// their `start_tags` field must match the `vehicle_start_tag` of a matrix
        /// (and of that matrix only).
        ///
        /// All matrices must have a different `vehicle_start_tag`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub vehicle_start_tag: std::string::String,
    }

    impl DurationDistanceMatrix {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [vehicle_start_tag][crate::model::shipment_model::DurationDistanceMatrix::vehicle_start_tag].
        pub fn set_vehicle_start_tag<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.vehicle_start_tag = v.into();
            self
        }

        /// Sets the value of [rows][crate::model::shipment_model::DurationDistanceMatrix::rows].
        pub fn set_rows<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::shipment_model::duration_distance_matrix::Row>,
        {
            use std::iter::Iterator;
            self.rows = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for DurationDistanceMatrix {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.ShipmentModel.DurationDistanceMatrix"
        }
    }

    /// Defines additional types related to DurationDistanceMatrix
    pub mod duration_distance_matrix {
        #[allow(unused_imports)]
        use super::*;

        /// Specifies a row of the duration and distance matrix.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Row {
            /// Duration values for a given row. It must have as many elements as
            /// [ShipmentModel.duration_distance_matrix_dst_tags][google.cloud.optimization.v1.ShipmentModel.duration_distance_matrix_dst_tags].
            ///
            /// [google.cloud.optimization.v1.ShipmentModel.duration_distance_matrix_dst_tags]: crate::model::ShipmentModel::duration_distance_matrix_dst_tags
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub durations: std::vec::Vec<wkt::Duration>,

            /// Distance values for a given row. If no costs or constraints refer to
            /// distances in the model, this can be left empty; otherwise it must have
            /// as many elements as `durations`.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub meters: std::vec::Vec<f64>,
        }

        impl Row {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [durations][crate::model::shipment_model::duration_distance_matrix::Row::durations].
            pub fn set_durations<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<wkt::Duration>,
            {
                use std::iter::Iterator;
                self.durations = v.into_iter().map(|i| i.into()).collect();
                self
            }

            /// Sets the value of [meters][crate::model::shipment_model::duration_distance_matrix::Row::meters].
            pub fn set_meters<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<f64>,
            {
                use std::iter::Iterator;
                self.meters = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for Row {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.optimization.v1.ShipmentModel.DurationDistanceMatrix.Row"
            }
        }
    }

    /// A precedence rule between two events (each event is the pickup or the
    /// delivery of a shipment): the "second" event has to start at least
    /// `offset_duration` after "first" has started.
    ///
    /// Several precedences can refer to the same (or related) events, e.g.,
    /// "pickup of B happens after delivery of A" and "pickup of C happens after
    /// pickup of B".
    ///
    /// Furthermore, precedences only apply when both shipments are performed and
    /// are otherwise ignored.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct PrecedenceRule {
        /// Shipment index of the "first" event. This field must be specified.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub first_index: std::option::Option<i32>,

        /// Indicates if the "first" event is a delivery.
        pub first_is_delivery: bool,

        /// Shipment index of the "second" event. This field must be specified.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub second_index: std::option::Option<i32>,

        /// Indicates if the "second" event is a delivery.
        pub second_is_delivery: bool,

        /// The offset between the "first" and "second" event. It can be negative.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub offset_duration: std::option::Option<wkt::Duration>,
    }

    impl PrecedenceRule {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [first_index][crate::model::shipment_model::PrecedenceRule::first_index].
        pub fn set_first_index<T: std::convert::Into<std::option::Option<i32>>>(
            mut self,
            v: T,
        ) -> Self {
            self.first_index = v.into();
            self
        }

        /// Sets the value of [first_is_delivery][crate::model::shipment_model::PrecedenceRule::first_is_delivery].
        pub fn set_first_is_delivery<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.first_is_delivery = v.into();
            self
        }

        /// Sets the value of [second_index][crate::model::shipment_model::PrecedenceRule::second_index].
        pub fn set_second_index<T: std::convert::Into<std::option::Option<i32>>>(
            mut self,
            v: T,
        ) -> Self {
            self.second_index = v.into();
            self
        }

        /// Sets the value of [second_is_delivery][crate::model::shipment_model::PrecedenceRule::second_is_delivery].
        pub fn set_second_is_delivery<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.second_is_delivery = v.into();
            self
        }

        /// Sets the value of [offset_duration][crate::model::shipment_model::PrecedenceRule::offset_duration].
        pub fn set_offset_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.offset_duration = v.into();
            self
        }
    }

    impl wkt::message::Message for PrecedenceRule {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.ShipmentModel.PrecedenceRule"
        }
    }

    /// Deprecated: Use top level
    /// [BreakRule][google.cloud.optimization.v1.ShipmentModel.BreakRule] instead.
    /// Rules to generate time breaks for a vehicle (e.g. lunch
    /// breaks). A break is a contiguous period of time during which the vehicle
    /// remains idle at its current position and cannot perform any visit. A break
    /// may occur:
    ///
    /// * during the travel between two visits (which includes the time right
    ///   before or right after a visit, but not in the middle of a visit), in
    ///   which case it extends the corresponding transit time between the visits
    /// * before the vehicle start (the vehicle may not start in the middle of
    ///   a break), in which case it does not affect the vehicle start time.
    /// * after the vehicle end (ditto, with the vehicle end time).
    ///
    /// [google.cloud.optimization.v1.ShipmentModel.BreakRule]: crate::model::shipment_model::BreakRule
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct BreakRule {
        /// Sequence of breaks. See the `BreakRequest` message.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub break_requests: std::vec::Vec<crate::model::shipment_model::break_rule::BreakRequest>,

        /// Several `FrequencyConstraint` may apply. They must all be satisfied by
        /// the `BreakRequest`s of this `BreakRule`. See `FrequencyConstraint`.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub frequency_constraints:
            std::vec::Vec<crate::model::shipment_model::break_rule::FrequencyConstraint>,
    }

    impl BreakRule {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [break_requests][crate::model::shipment_model::BreakRule::break_requests].
        pub fn set_break_requests<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::shipment_model::break_rule::BreakRequest>,
        {
            use std::iter::Iterator;
            self.break_requests = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [frequency_constraints][crate::model::shipment_model::BreakRule::frequency_constraints].
        pub fn set_frequency_constraints<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::shipment_model::break_rule::FrequencyConstraint>,
        {
            use std::iter::Iterator;
            self.frequency_constraints = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for BreakRule {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.ShipmentModel.BreakRule"
        }
    }

    /// Defines additional types related to BreakRule
    pub mod break_rule {
        #[allow(unused_imports)]
        use super::*;

        /// The sequence of breaks (i.e. their number and order) that apply to each
        /// vehicle must be known beforehand. The repeated `BreakRequest`s define
        /// that sequence, in the order in which they must occur. Their time windows
        /// (`earliest_start_time` / `latest_start_time`) may overlap, but they must
        /// be compatible with the order (this is checked).
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct BreakRequest {
            /// Required. Lower bound (inclusive) on the start of the break.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub earliest_start_time: std::option::Option<wkt::Timestamp>,

            /// Required. Upper bound (inclusive) on the start of the break.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub latest_start_time: std::option::Option<wkt::Timestamp>,

            /// Required. Minimum duration of the break. Must be positive.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub min_duration: std::option::Option<wkt::Duration>,
        }

        impl BreakRequest {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [earliest_start_time][crate::model::shipment_model::break_rule::BreakRequest::earliest_start_time].
            pub fn set_earliest_start_time<
                T: std::convert::Into<std::option::Option<wkt::Timestamp>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.earliest_start_time = v.into();
                self
            }

            /// Sets the value of [latest_start_time][crate::model::shipment_model::break_rule::BreakRequest::latest_start_time].
            pub fn set_latest_start_time<
                T: std::convert::Into<std::option::Option<wkt::Timestamp>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.latest_start_time = v.into();
                self
            }

            /// Sets the value of [min_duration][crate::model::shipment_model::break_rule::BreakRequest::min_duration].
            pub fn set_min_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
                mut self,
                v: T,
            ) -> Self {
                self.min_duration = v.into();
                self
            }
        }

        impl wkt::message::Message for BreakRequest {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.optimization.v1.ShipmentModel.BreakRule.BreakRequest"
            }
        }

        /// One may further constrain the frequency and duration of the breaks
        /// specified above, by enforcing a minimum break frequency, such as
        /// "There must be a break of at least 1 hour every 12 hours". Assuming that
        /// this can be interpreted as "Within any sliding time window of 12h, there
        /// must be at least one break of at least one hour", that example would
        /// translate to the following `FrequencyConstraint`:
        ///
        /// ```norust
        /// {
        ///    min_break_duration { seconds: 3600 }         # 1 hour.
        ///    max_inter_break_duration { seconds: 39600 }  # 11 hours (12 - 1 = 11).
        /// }
        /// ```
        ///
        /// The timing and duration of the breaks in the solution will respect all
        /// such constraints, in addition to the time windows and minimum durations
        /// already specified in the `BreakRequest`.
        ///
        /// A `FrequencyConstraint` may in practice apply to non-consecutive breaks.
        /// For example, the following schedule honors the "1h every 12h" example:
        ///
        /// ```norust
        ///   04:00 vehicle start
        ///    .. performing travel and visits ..
        ///   09:00 1 hour break
        ///   10:00 end of the break
        ///    .. performing travel and visits ..
        ///   12:00 20-min lunch break
        ///   12:20 end of the break
        ///    .. performing travel and visits ..
        ///   21:00 1 hour break
        ///   22:00 end of the break
        ///    .. performing travel and visits ..
        ///   23:59 vehicle end
        /// ```
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct FrequencyConstraint {
            /// Required. Minimum break duration for this constraint. Nonnegative.
            /// See description of `FrequencyConstraint`.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub min_break_duration: std::option::Option<wkt::Duration>,

            /// Required. Maximum allowed span of any interval of time in the route
            /// that does not include at least partially a break of `duration >=
            /// min_break_duration`. Must be positive.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub max_inter_break_duration: std::option::Option<wkt::Duration>,
        }

        impl FrequencyConstraint {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [min_break_duration][crate::model::shipment_model::break_rule::FrequencyConstraint::min_break_duration].
            pub fn set_min_break_duration<
                T: std::convert::Into<std::option::Option<wkt::Duration>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.min_break_duration = v.into();
                self
            }

            /// Sets the value of [max_inter_break_duration][crate::model::shipment_model::break_rule::FrequencyConstraint::max_inter_break_duration].
            pub fn set_max_inter_break_duration<
                T: std::convert::Into<std::option::Option<wkt::Duration>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.max_inter_break_duration = v.into();
                self
            }
        }

        impl wkt::message::Message for FrequencyConstraint {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.optimization.v1.ShipmentModel.BreakRule.FrequencyConstraint"
            }
        }
    }
}

/// The shipment of a single item, from one of its pickups to one of its
/// deliveries. For the shipment to be considered as performed, a unique vehicle
/// must visit one of its pickup locations (and decrease its spare capacities
/// accordingly), then visit one of its delivery locations later on (and
/// therefore re-increase its spare capacities accordingly).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Shipment {
    /// Set of pickup alternatives associated to the shipment. If not specified,
    /// the vehicle only needs to visit a location corresponding to the deliveries.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub pickups: std::vec::Vec<crate::model::shipment::VisitRequest>,

    /// Set of delivery alternatives associated to the shipment. If not specified,
    /// the vehicle only needs to visit a location corresponding to the pickups.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub deliveries: std::vec::Vec<crate::model::shipment::VisitRequest>,

    /// Load demands of the shipment (for example weight, volume, number of
    /// pallets etc). The keys in the map should be identifiers describing the type
    /// of the corresponding load, ideally also including the units.
    /// For example: "weight_kg", "volume_gallons", "pallet_count", etc.
    /// If a given key does not appear in the map, the corresponding load is
    /// considered as null.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub load_demands: std::collections::HashMap<std::string::String, crate::model::shipment::Load>,

    /// If the shipment is not completed, this penalty is added to the overall
    /// cost of the routes. A shipment is considered completed if one of its pickup
    /// and delivery alternatives is visited. The cost may be expressed in the
    /// same unit used for all other cost-related fields in the model and must be
    /// positive.
    ///
    /// *IMPORTANT*: If this penalty is not specified, it is considered infinite,
    /// i.e. the shipment must be completed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub penalty_cost: std::option::Option<f64>,

    /// The set of vehicles that may perform this shipment. If empty, all vehicles
    /// may perform it. Vehicles are given by their index in the `ShipmentModel`'s
    /// `vehicles` list.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub allowed_vehicle_indices: std::vec::Vec<i32>,

    /// Specifies the cost that is incurred when this shipment is delivered by each
    /// vehicle. If specified, it must have EITHER:
    ///
    /// * the same number of elements as `costs_per_vehicle_indices`.
    ///   `costs_per_vehicle[i]` corresponds to vehicle
    ///   `costs_per_vehicle_indices[i]` of the model.
    /// * the same number of elements as there are vehicles in the model. The
    ///   i-th element corresponds to vehicle #i of the model.
    ///
    /// These costs must be in the same unit as `penalty_cost` and must not be
    /// negative. Leave this field empty, if there are no such costs.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub costs_per_vehicle: std::vec::Vec<f64>,

    /// Indices of the vehicles to which `costs_per_vehicle` applies. If non-empty,
    /// it must have the same number of elements as `costs_per_vehicle`. A vehicle
    /// index may not be specified more than once. If a vehicle is excluded from
    /// `costs_per_vehicle_indices`, its cost is zero.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub costs_per_vehicle_indices: std::vec::Vec<i32>,

    /// Specifies the maximum relative detour time compared to the shortest path
    /// from pickup to delivery. If specified, it must be nonnegative, and the
    /// shipment must contain at least a pickup and a delivery.
    ///
    /// For example, let t be the shortest time taken to go from the selected
    /// pickup alternative directly to the selected delivery alternative. Then
    /// setting `pickup_to_delivery_relative_detour_limit` enforces:
    ///
    /// ```norust
    /// start_time(delivery) - start_time(pickup) <=
    /// std::ceil(t * (1.0 + pickup_to_delivery_relative_detour_limit))
    /// ```
    ///
    /// If both relative and absolute limits are specified on the same shipment,
    /// the more constraining limit is used for each possible pickup/delivery pair.
    /// As of 2017/10, detours are only supported when travel durations do not
    /// depend on vehicles.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub pickup_to_delivery_relative_detour_limit: std::option::Option<f64>,

    /// Specifies the maximum absolute detour time compared to the shortest path
    /// from pickup to delivery. If specified, it must be nonnegative, and the
    /// shipment must contain at least a pickup and a delivery.
    ///
    /// For example, let t be the shortest time taken to go from the selected
    /// pickup alternative directly to the selected delivery alternative. Then
    /// setting `pickup_to_delivery_absolute_detour_limit` enforces:
    ///
    /// ```norust
    /// start_time(delivery) - start_time(pickup) <=
    /// t + pickup_to_delivery_absolute_detour_limit
    /// ```
    ///
    /// If both relative and absolute limits are specified on the same shipment,
    /// the more constraining limit is used for each possible pickup/delivery pair.
    /// As of 2017/10, detours are only supported when travel durations do not
    /// depend on vehicles.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub pickup_to_delivery_absolute_detour_limit: std::option::Option<wkt::Duration>,

    /// Specifies the maximum duration from start of pickup to start of delivery of
    /// a shipment. If specified, it must be nonnegative, and the shipment must
    /// contain at least a pickup and a delivery. This does not depend on which
    /// alternatives are selected for pickup and delivery, nor on vehicle speed.
    /// This can be specified alongside maximum detour constraints: the solution
    /// will respect both specifications.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub pickup_to_delivery_time_limit: std::option::Option<wkt::Duration>,

    /// Non-empty string specifying a "type" for this shipment.
    /// This feature can be used to define incompatibilities or requirements
    /// between `shipment_types` (see `shipment_type_incompatibilities` and
    /// `shipment_type_requirements` in `ShipmentModel`).
    ///
    /// Differs from `visit_types` which is specified for a single visit: All
    /// pickup/deliveries belonging to the same shipment share the same
    /// `shipment_type`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub shipment_type: std::string::String,

    /// Specifies a label for this shipment. This label is reported in the response
    /// in the `shipment_label` of the corresponding
    /// [ShipmentRoute.Visit][google.cloud.optimization.v1.ShipmentRoute.Visit].
    ///
    /// [google.cloud.optimization.v1.ShipmentRoute.Visit]: crate::model::shipment_route::Visit
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub label: std::string::String,

    /// If true, skip this shipment, but don't apply a `penalty_cost`.
    ///
    /// Ignoring a shipment results in a validation error when there are any
    /// `shipment_type_requirements` in the model.
    ///
    /// Ignoring a shipment that is performed in `injected_first_solution_routes`
    /// or `injected_solution_constraint` is permitted; the solver removes the
    /// related pickup/delivery visits from the performing route.
    /// `precedence_rules` that reference ignored shipments will also be ignored.
    pub ignore: bool,

    /// Deprecated: Use
    /// [Shipment.load_demands][google.cloud.optimization.v1.Shipment.load_demands]
    /// instead.
    ///
    /// [google.cloud.optimization.v1.Shipment.load_demands]: crate::model::Shipment::load_demands
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub demands: std::vec::Vec<crate::model::CapacityQuantity>,
}

impl Shipment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [penalty_cost][crate::model::Shipment::penalty_cost].
    pub fn set_penalty_cost<T: std::convert::Into<std::option::Option<f64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.penalty_cost = v.into();
        self
    }

    /// Sets the value of [pickup_to_delivery_relative_detour_limit][crate::model::Shipment::pickup_to_delivery_relative_detour_limit].
    pub fn set_pickup_to_delivery_relative_detour_limit<
        T: std::convert::Into<std::option::Option<f64>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.pickup_to_delivery_relative_detour_limit = v.into();
        self
    }

    /// Sets the value of [pickup_to_delivery_absolute_detour_limit][crate::model::Shipment::pickup_to_delivery_absolute_detour_limit].
    pub fn set_pickup_to_delivery_absolute_detour_limit<
        T: std::convert::Into<std::option::Option<wkt::Duration>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.pickup_to_delivery_absolute_detour_limit = v.into();
        self
    }

    /// Sets the value of [pickup_to_delivery_time_limit][crate::model::Shipment::pickup_to_delivery_time_limit].
    pub fn set_pickup_to_delivery_time_limit<
        T: std::convert::Into<std::option::Option<wkt::Duration>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.pickup_to_delivery_time_limit = v.into();
        self
    }

    /// Sets the value of [shipment_type][crate::model::Shipment::shipment_type].
    pub fn set_shipment_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.shipment_type = v.into();
        self
    }

    /// Sets the value of [label][crate::model::Shipment::label].
    pub fn set_label<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.label = v.into();
        self
    }

    /// Sets the value of [ignore][crate::model::Shipment::ignore].
    pub fn set_ignore<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.ignore = v.into();
        self
    }

    /// Sets the value of [pickups][crate::model::Shipment::pickups].
    pub fn set_pickups<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::shipment::VisitRequest>,
    {
        use std::iter::Iterator;
        self.pickups = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [deliveries][crate::model::Shipment::deliveries].
    pub fn set_deliveries<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::shipment::VisitRequest>,
    {
        use std::iter::Iterator;
        self.deliveries = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [allowed_vehicle_indices][crate::model::Shipment::allowed_vehicle_indices].
    pub fn set_allowed_vehicle_indices<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<i32>,
    {
        use std::iter::Iterator;
        self.allowed_vehicle_indices = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [costs_per_vehicle][crate::model::Shipment::costs_per_vehicle].
    pub fn set_costs_per_vehicle<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<f64>,
    {
        use std::iter::Iterator;
        self.costs_per_vehicle = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [costs_per_vehicle_indices][crate::model::Shipment::costs_per_vehicle_indices].
    pub fn set_costs_per_vehicle_indices<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<i32>,
    {
        use std::iter::Iterator;
        self.costs_per_vehicle_indices = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [demands][crate::model::Shipment::demands].
    pub fn set_demands<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CapacityQuantity>,
    {
        use std::iter::Iterator;
        self.demands = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [load_demands][crate::model::Shipment::load_demands].
    pub fn set_load_demands<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::shipment::Load>,
    {
        use std::iter::Iterator;
        self.load_demands = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Shipment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.Shipment"
    }
}

/// Defines additional types related to Shipment
pub mod shipment {
    #[allow(unused_imports)]
    use super::*;

    /// Request for a visit which can be done by a vehicle: it has a geo-location
    /// (or two, see below), opening and closing times represented by time windows,
    /// and a service duration time (time spent by the vehicle once it has arrived
    /// to pickup or drop off goods).
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct VisitRequest {
        /// The geo-location where the vehicle arrives when performing this
        /// `VisitRequest`. If the shipment model has duration distance matrices,
        /// `arrival_location` must not be specified.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub arrival_location: std::option::Option<gtype::model::LatLng>,

        /// The waypoint where the vehicle arrives when performing this
        /// `VisitRequest`. If the shipment model has duration distance matrices,
        /// `arrival_waypoint` must not be specified.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub arrival_waypoint: std::option::Option<crate::model::Waypoint>,

        /// The geo-location where the vehicle departs after completing this
        /// `VisitRequest`. Can be omitted if it is the same as `arrival_location`.
        /// If the shipment model has duration distance matrices,
        /// `departure_location` must not be specified.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub departure_location: std::option::Option<gtype::model::LatLng>,

        /// The waypoint where the vehicle departs after completing this
        /// `VisitRequest`. Can be omitted if it is the same as `arrival_waypoint`.
        /// If the shipment model has duration distance matrices,
        /// `departure_waypoint` must not be specified.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub departure_waypoint: std::option::Option<crate::model::Waypoint>,

        /// Specifies tags attached to the visit request.
        /// Empty or duplicate strings are not allowed.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub tags: std::vec::Vec<std::string::String>,

        /// Time windows which constrain the arrival time at a visit.
        /// Note that a vehicle may depart outside of the arrival time window, i.e.
        /// arrival time + duration do not need to be inside a time window. This can
        /// result in waiting time if the vehicle arrives before
        /// [TimeWindow.start_time][google.cloud.optimization.v1.TimeWindow.start_time].
        ///
        /// The absence of `TimeWindow` means that the vehicle can perform this visit
        /// at any time.
        ///
        /// Time windows must be disjoint, i.e. no time window must overlap with or
        /// be adjacent to another, and they must be in increasing order.
        ///
        /// `cost_per_hour_after_soft_end_time` and `soft_end_time` can only
        /// be set if there is a single time window.
        ///
        /// [google.cloud.optimization.v1.TimeWindow.start_time]: crate::model::TimeWindow::start_time
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub time_windows: std::vec::Vec<crate::model::TimeWindow>,

        /// Duration of the visit, i.e. time spent by the vehicle between arrival
        /// and departure (to be added to the possible waiting time; see
        /// `time_windows`).
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub duration: std::option::Option<wkt::Duration>,

        /// Cost to service this visit request on a vehicle route. This can be used
        /// to pay different costs for each alternative pickup or delivery of a
        /// shipment. This cost must be in the same unit as `Shipment.penalty_cost`
        /// and must not be negative.
        pub cost: f64,

        /// Load demands of this visit request. This is just like
        /// [Shipment.load_demands][google.cloud.optimization.v1.Shipment.load_demands]
        /// field, except that it only applies to this
        /// [VisitRequest][google.cloud.optimization.v1.Shipment.VisitRequest]
        /// instead of the whole [Shipment][google.cloud.optimization.v1.Shipment].
        /// The demands listed here are added to the demands listed in
        /// [Shipment.load_demands][google.cloud.optimization.v1.Shipment.load_demands].
        ///
        /// [google.cloud.optimization.v1.Shipment]: crate::model::Shipment
        /// [google.cloud.optimization.v1.Shipment.VisitRequest]: crate::model::shipment::VisitRequest
        /// [google.cloud.optimization.v1.Shipment.load_demands]: crate::model::Shipment::load_demands
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub load_demands:
            std::collections::HashMap<std::string::String, crate::model::shipment::Load>,

        /// Specifies the types of the visit. This may be used to allocate additional
        /// time required for a vehicle to complete this visit (see
        /// [Vehicle.extra_visit_duration_for_visit_type][google.cloud.optimization.v1.Vehicle.extra_visit_duration_for_visit_type]).
        ///
        /// A type can only appear once.
        ///
        /// [google.cloud.optimization.v1.Vehicle.extra_visit_duration_for_visit_type]: crate::model::Vehicle::extra_visit_duration_for_visit_type
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub visit_types: std::vec::Vec<std::string::String>,

        /// Specifies a label for this `VisitRequest`. This label is reported in the
        /// response as `visit_label` in the corresponding
        /// [ShipmentRoute.Visit][google.cloud.optimization.v1.ShipmentRoute.Visit].
        ///
        /// [google.cloud.optimization.v1.ShipmentRoute.Visit]: crate::model::shipment_route::Visit
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub label: std::string::String,

        /// Deprecated: Use
        /// [VisitRequest.load_demands][google.cloud.optimization.v1.Shipment.VisitRequest.load_demands]
        /// instead.
        ///
        /// [google.cloud.optimization.v1.Shipment.VisitRequest.load_demands]: crate::model::shipment::VisitRequest::load_demands
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub demands: std::vec::Vec<crate::model::CapacityQuantity>,
    }

    impl VisitRequest {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [arrival_location][crate::model::shipment::VisitRequest::arrival_location].
        pub fn set_arrival_location<
            T: std::convert::Into<std::option::Option<gtype::model::LatLng>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.arrival_location = v.into();
            self
        }

        /// Sets the value of [arrival_waypoint][crate::model::shipment::VisitRequest::arrival_waypoint].
        pub fn set_arrival_waypoint<
            T: std::convert::Into<std::option::Option<crate::model::Waypoint>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.arrival_waypoint = v.into();
            self
        }

        /// Sets the value of [departure_location][crate::model::shipment::VisitRequest::departure_location].
        pub fn set_departure_location<
            T: std::convert::Into<std::option::Option<gtype::model::LatLng>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.departure_location = v.into();
            self
        }

        /// Sets the value of [departure_waypoint][crate::model::shipment::VisitRequest::departure_waypoint].
        pub fn set_departure_waypoint<
            T: std::convert::Into<std::option::Option<crate::model::Waypoint>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.departure_waypoint = v.into();
            self
        }

        /// Sets the value of [duration][crate::model::shipment::VisitRequest::duration].
        pub fn set_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.duration = v.into();
            self
        }

        /// Sets the value of [cost][crate::model::shipment::VisitRequest::cost].
        pub fn set_cost<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.cost = v.into();
            self
        }

        /// Sets the value of [label][crate::model::shipment::VisitRequest::label].
        pub fn set_label<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.label = v.into();
            self
        }

        /// Sets the value of [tags][crate::model::shipment::VisitRequest::tags].
        pub fn set_tags<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.tags = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [time_windows][crate::model::shipment::VisitRequest::time_windows].
        pub fn set_time_windows<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::TimeWindow>,
        {
            use std::iter::Iterator;
            self.time_windows = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [visit_types][crate::model::shipment::VisitRequest::visit_types].
        pub fn set_visit_types<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.visit_types = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [demands][crate::model::shipment::VisitRequest::demands].
        pub fn set_demands<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::CapacityQuantity>,
        {
            use std::iter::Iterator;
            self.demands = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [load_demands][crate::model::shipment::VisitRequest::load_demands].
        pub fn set_load_demands<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<crate::model::shipment::Load>,
        {
            use std::iter::Iterator;
            self.load_demands = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl wkt::message::Message for VisitRequest {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.Shipment.VisitRequest"
        }
    }

    /// When performing a visit, a predefined amount may be added to the vehicle
    /// load if it's a pickup, or subtracted if it's a delivery. This message
    /// defines such amount. See
    /// [load_demands][google.cloud.optimization.v1.Shipment.load_demands].
    ///
    /// [google.cloud.optimization.v1.Shipment.load_demands]: crate::model::Shipment::load_demands
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Load {
        /// The amount by which the load of the vehicle performing the corresponding
        /// visit will vary. Since it is an integer, users are advised to choose an
        /// appropriate unit to avoid loss of precision. Must be ≥ 0.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub amount: i64,
    }

    impl Load {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [amount][crate::model::shipment::Load::amount].
        pub fn set_amount<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.amount = v.into();
            self
        }
    }

    impl wkt::message::Message for Load {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.Shipment.Load"
        }
    }
}

/// Specifies incompatibilties between shipments depending on their
/// shipment_type. The appearance of incompatible shipments on the same route is
/// restricted based on the incompatibility mode.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ShipmentTypeIncompatibility {
    /// List of incompatible types. Two shipments having different `shipment_types`
    /// among those listed are "incompatible".
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub types: std::vec::Vec<std::string::String>,

    /// Mode applied to the incompatibility.
    pub incompatibility_mode: crate::model::shipment_type_incompatibility::IncompatibilityMode,
}

impl ShipmentTypeIncompatibility {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [incompatibility_mode][crate::model::ShipmentTypeIncompatibility::incompatibility_mode].
    pub fn set_incompatibility_mode<
        T: std::convert::Into<crate::model::shipment_type_incompatibility::IncompatibilityMode>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.incompatibility_mode = v.into();
        self
    }

    /// Sets the value of [types][crate::model::ShipmentTypeIncompatibility::types].
    pub fn set_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.types = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ShipmentTypeIncompatibility {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.ShipmentTypeIncompatibility"
    }
}

/// Defines additional types related to ShipmentTypeIncompatibility
pub mod shipment_type_incompatibility {
    #[allow(unused_imports)]
    use super::*;

    /// Modes defining how the appearance of incompatible shipments are restricted
    /// on the same route.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct IncompatibilityMode(std::borrow::Cow<'static, str>);

    impl IncompatibilityMode {
        /// Creates a new IncompatibilityMode instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [IncompatibilityMode](IncompatibilityMode)
    pub mod incompatibility_mode {
        use super::IncompatibilityMode;

        /// Unspecified incompatibility mode. This value should never be used.
        pub const INCOMPATIBILITY_MODE_UNSPECIFIED: IncompatibilityMode =
            IncompatibilityMode::new("INCOMPATIBILITY_MODE_UNSPECIFIED");

        /// In this mode, two shipments with incompatible types can never share the
        /// same vehicle.
        pub const NOT_PERFORMED_BY_SAME_VEHICLE: IncompatibilityMode =
            IncompatibilityMode::new("NOT_PERFORMED_BY_SAME_VEHICLE");

        /// For two shipments with incompatible types with the
        /// `NOT_IN_SAME_VEHICLE_SIMULTANEOUSLY` incompatibility mode:
        ///
        /// * If both are pickups only (no deliveries) or deliveries only (no
        ///   pickups), they cannot share the same vehicle at all.
        /// * If one of the shipments has a delivery and the other a pickup, the two
        ///   shipments can share the same vehicle iff the former shipment is
        ///   delivered before the latter is picked up.
        pub const NOT_IN_SAME_VEHICLE_SIMULTANEOUSLY: IncompatibilityMode =
            IncompatibilityMode::new("NOT_IN_SAME_VEHICLE_SIMULTANEOUSLY");
    }

    impl std::convert::From<std::string::String> for IncompatibilityMode {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Specifies requirements between shipments based on their shipment_type.
/// The specifics of the requirement are defined by the requirement mode.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ShipmentTypeRequirement {
    /// List of alternative shipment types required by the
    /// `dependent_shipment_types`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub required_shipment_type_alternatives: std::vec::Vec<std::string::String>,

    /// All shipments with a type in the `dependent_shipment_types` field require
    /// at least one shipment of type `required_shipment_type_alternatives` to be
    /// visited on the same route.
    ///
    /// NOTE: Chains of requirements such that a `shipment_type` depends on itself
    /// are not allowed.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub dependent_shipment_types: std::vec::Vec<std::string::String>,

    /// Mode applied to the requirement.
    pub requirement_mode: crate::model::shipment_type_requirement::RequirementMode,
}

impl ShipmentTypeRequirement {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [requirement_mode][crate::model::ShipmentTypeRequirement::requirement_mode].
    pub fn set_requirement_mode<
        T: std::convert::Into<crate::model::shipment_type_requirement::RequirementMode>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.requirement_mode = v.into();
        self
    }

    /// Sets the value of [required_shipment_type_alternatives][crate::model::ShipmentTypeRequirement::required_shipment_type_alternatives].
    pub fn set_required_shipment_type_alternatives<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.required_shipment_type_alternatives = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [dependent_shipment_types][crate::model::ShipmentTypeRequirement::dependent_shipment_types].
    pub fn set_dependent_shipment_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.dependent_shipment_types = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ShipmentTypeRequirement {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.ShipmentTypeRequirement"
    }
}

/// Defines additional types related to ShipmentTypeRequirement
pub mod shipment_type_requirement {
    #[allow(unused_imports)]
    use super::*;

    /// Modes defining the appearance of dependent shipments on a route.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct RequirementMode(std::borrow::Cow<'static, str>);

    impl RequirementMode {
        /// Creates a new RequirementMode instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [RequirementMode](RequirementMode)
    pub mod requirement_mode {
        use super::RequirementMode;

        /// Unspecified requirement mode. This value should never be used.
        pub const REQUIREMENT_MODE_UNSPECIFIED: RequirementMode =
            RequirementMode::new("REQUIREMENT_MODE_UNSPECIFIED");

        /// In this mode, all "dependent" shipments must share the same vehicle as at
        /// least one of their "required" shipments.
        pub const PERFORMED_BY_SAME_VEHICLE: RequirementMode =
            RequirementMode::new("PERFORMED_BY_SAME_VEHICLE");

        /// With the `IN_SAME_VEHICLE_AT_PICKUP_TIME` mode, all "dependent"
        /// shipments need to have at least one "required" shipment on their vehicle
        /// at the time of their pickup.
        ///
        /// A "dependent" shipment pickup must therefore have either:
        ///
        /// * A delivery-only "required" shipment delivered on the route after, or
        /// * A "required" shipment picked up on the route before it, and if the
        ///   "required" shipment has a delivery, this delivery must be performed
        ///   after the "dependent" shipment's pickup.
        pub const IN_SAME_VEHICLE_AT_PICKUP_TIME: RequirementMode =
            RequirementMode::new("IN_SAME_VEHICLE_AT_PICKUP_TIME");

        /// Same as before, except the "dependent" shipments need to have a
        /// "required" shipment on their vehicle at the time of their *delivery*.
        pub const IN_SAME_VEHICLE_AT_DELIVERY_TIME: RequirementMode =
            RequirementMode::new("IN_SAME_VEHICLE_AT_DELIVERY_TIME");
    }

    impl std::convert::From<std::string::String> for RequirementMode {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Encapsulates a set of optional conditions to satisfy when calculating
/// vehicle routes. This is similar to `RouteModifiers` in the Google Maps
/// Platform API; see:
/// <https://developers.google.com/maps/documentation/routes/reference/rest/v2/RouteModifiers>.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RouteModifiers {
    /// Specifies whether to avoid toll roads where reasonable. Preference will be
    /// given to routes not containing toll roads. Applies only to motorized travel
    /// modes.
    pub avoid_tolls: bool,

    /// Specifies whether to avoid highways where reasonable. Preference will be
    /// given to routes not containing highways. Applies only to motorized travel
    /// modes.
    pub avoid_highways: bool,

    /// Specifies whether to avoid ferries where reasonable. Preference will be
    /// given to routes not containing travel by ferries. Applies only to motorized
    /// travel modes.
    pub avoid_ferries: bool,

    /// Optional. Specifies whether to avoid navigating indoors where reasonable.
    /// Preference will be given to routes not containing indoor navigation.
    /// Applies only to the `WALKING` travel mode.
    pub avoid_indoor: bool,
}

impl RouteModifiers {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [avoid_tolls][crate::model::RouteModifiers::avoid_tolls].
    pub fn set_avoid_tolls<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.avoid_tolls = v.into();
        self
    }

    /// Sets the value of [avoid_highways][crate::model::RouteModifiers::avoid_highways].
    pub fn set_avoid_highways<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.avoid_highways = v.into();
        self
    }

    /// Sets the value of [avoid_ferries][crate::model::RouteModifiers::avoid_ferries].
    pub fn set_avoid_ferries<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.avoid_ferries = v.into();
        self
    }

    /// Sets the value of [avoid_indoor][crate::model::RouteModifiers::avoid_indoor].
    pub fn set_avoid_indoor<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.avoid_indoor = v.into();
        self
    }
}

impl wkt::message::Message for RouteModifiers {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.RouteModifiers"
    }
}

/// Models a vehicle in a shipment problem. Solving a shipment problem will
/// build a route starting from `start_location` and ending at `end_location`
/// for this vehicle. A route is a sequence of visits (see `ShipmentRoute`).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Vehicle {
    /// The travel mode which affects the roads usable by the vehicle and its
    /// speed. See also `travel_duration_multiple`.
    pub travel_mode: crate::model::vehicle::TravelMode,

    /// Optional. A set of conditions to satisfy that affect the way routes are
    /// calculated for the given vehicle.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub route_modifiers: std::option::Option<crate::model::RouteModifiers>,

    /// Geographic location where the vehicle starts before picking up any
    /// shipments. If not specified, the vehicle starts at its first pickup.
    /// If the shipment model has duration and distance matrices, `start_location`
    /// must not be specified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_location: std::option::Option<gtype::model::LatLng>,

    /// Waypoint representing a geographic location where the vehicle starts before
    /// picking up any shipments. If neither `start_waypoint` nor `start_location`
    /// is specified, the vehicle starts at its first pickup.
    /// If the shipment model has duration and distance matrices, `start_waypoint`
    /// must not be specified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_waypoint: std::option::Option<crate::model::Waypoint>,

    /// Geographic location where the vehicle ends after it has completed its last
    /// `VisitRequest`. If not specified the vehicle's `ShipmentRoute` ends
    /// immediately when it completes its last `VisitRequest`.
    /// If the shipment model has duration and distance matrices, `end_location`
    /// must not be specified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_location: std::option::Option<gtype::model::LatLng>,

    /// Waypoint representing a geographic location where the vehicle ends after
    /// it has completed its last `VisitRequest`. If neither `end_waypoint` nor
    /// `end_location` is specified, the vehicle's `ShipmentRoute` ends immediately
    /// when it completes its last `VisitRequest`.
    /// If the shipment model has duration and distance matrices, `end_waypoint`
    /// must not be specified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_waypoint: std::option::Option<crate::model::Waypoint>,

    /// Specifies tags attached to the start of the vehicle's route.
    ///
    /// Empty or duplicate strings are not allowed.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub start_tags: std::vec::Vec<std::string::String>,

    /// Specifies tags attached to the end of the vehicle's route.
    ///
    /// Empty or duplicate strings are not allowed.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub end_tags: std::vec::Vec<std::string::String>,

    /// Time windows during which the vehicle may depart its start location.
    /// They must be within the global time limits (see
    /// [ShipmentModel.global_*][google.cloud.optimization.v1.ShipmentModel.global_start_time]
    /// fields). If unspecified, there is no limitation besides those global time
    /// limits.
    ///
    /// Time windows belonging to the same repeated field must be disjoint, i.e. no
    /// time window can overlap with or be adjacent to another, and they must be in
    /// chronological order.
    ///
    /// `cost_per_hour_after_soft_end_time` and `soft_end_time` can only be set if
    /// there is a single time window.
    ///
    /// [google.cloud.optimization.v1.ShipmentModel.global_start_time]: crate::model::ShipmentModel::global_start_time
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub start_time_windows: std::vec::Vec<crate::model::TimeWindow>,

    /// Time windows during which the vehicle may arrive at its end location.
    /// They must be within the global time limits (see
    /// [ShipmentModel.global_*][google.cloud.optimization.v1.ShipmentModel.global_start_time]
    /// fields). If unspecified, there is no limitation besides those global time
    /// limits.
    ///
    /// Time windows belonging to the same repeated field must be disjoint, i.e. no
    /// time window can overlap with or be adjacent to another, and they must be in
    /// chronological order.
    ///
    /// `cost_per_hour_after_soft_end_time` and `soft_end_time` can only be set if
    /// there is a single time window.
    ///
    /// [google.cloud.optimization.v1.ShipmentModel.global_start_time]: crate::model::ShipmentModel::global_start_time
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub end_time_windows: std::vec::Vec<crate::model::TimeWindow>,

    /// Specifies a multiplicative factor that can be used to increase or decrease
    /// travel times of this vehicle. For example, setting this to 2.0 means
    /// that this vehicle is slower and has travel times that are twice what they
    /// are for standard vehicles. This multiple does not affect visit durations.
    /// It does affect cost if `cost_per_hour` or `cost_per_traveled_hour` are
    /// specified. This must be in the range [0.001, 1000.0]. If unset, the vehicle
    /// is standard, and this multiple is considered 1.0.
    ///
    /// WARNING: Travel times will be rounded to the nearest second after this
    /// multiple is applied but before performing any numerical operations, thus,
    /// a small multiple may result in a loss of precision.
    ///
    /// See also `extra_visit_duration_for_visit_type` below.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub travel_duration_multiple: std::option::Option<f64>,

    /// Unloading policy enforced on the vehicle.
    pub unloading_policy: crate::model::vehicle::UnloadingPolicy,

    /// Capacities of the vehicle (weight, volume, # of pallets for example).
    /// The keys in the map are the identifiers of the type of load, consistent
    /// with the keys of the
    /// [Shipment.load_demands][google.cloud.optimization.v1.Shipment.load_demands]
    /// field. If a given key is absent from this map, the corresponding capacity
    /// is considered to be limitless.
    ///
    /// [google.cloud.optimization.v1.Shipment.load_demands]: crate::model::Shipment::load_demands
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub load_limits:
        std::collections::HashMap<std::string::String, crate::model::vehicle::LoadLimit>,

    /// Vehicle costs: all costs add up and must be in the same unit as
    /// [Shipment.penalty_cost][google.cloud.optimization.v1.Shipment.penalty_cost].
    ///
    /// Cost per hour of the vehicle route. This cost is applied to the total time
    /// taken by the route, and includes travel time, waiting time, and visit time.
    /// Using `cost_per_hour` instead of just `cost_per_traveled_hour` may result
    /// in additional latency.
    ///
    /// [google.cloud.optimization.v1.Shipment.penalty_cost]: crate::model::Shipment::penalty_cost
    pub cost_per_hour: f64,

    /// Cost per traveled hour of the vehicle route. This cost is applied only to
    /// travel time taken by the route (i.e., that reported in
    /// [ShipmentRoute.transitions][google.cloud.optimization.v1.ShipmentRoute.transitions]),
    /// and excludes waiting time and visit time.
    ///
    /// [google.cloud.optimization.v1.ShipmentRoute.transitions]: crate::model::ShipmentRoute::transitions
    pub cost_per_traveled_hour: f64,

    /// Cost per kilometer of the vehicle route. This cost is applied to the
    /// distance reported in the
    /// [ShipmentRoute.transitions][google.cloud.optimization.v1.ShipmentRoute.transitions]
    /// and does not apply to any distance implicitly traveled from the
    /// `arrival_location` to the `departure_location` of a single `VisitRequest`.
    ///
    /// [google.cloud.optimization.v1.ShipmentRoute.transitions]: crate::model::ShipmentRoute::transitions
    pub cost_per_kilometer: f64,

    /// Fixed cost applied if this vehicle is used to handle a shipment.
    pub fixed_cost: f64,

    /// This field only applies to vehicles when their route does not serve any
    /// shipments. It indicates if the vehicle should be considered as used or not
    /// in this case.
    ///
    /// If true, the vehicle goes from its start to its end location even if it
    /// doesn't serve any shipments, and time and distance costs resulting from its
    /// start --> end travel are taken into account.
    ///
    /// Otherwise, it doesn't travel from its start to its end location, and no
    /// `break_rule` or delay (from `TransitionAttributes`) are scheduled for this
    /// vehicle. In this case, the vehicle's `ShipmentRoute` doesn't contain any
    /// information except for the vehicle index and label.
    pub used_if_route_is_empty: bool,

    /// Limit applied to the total duration of the vehicle's route. In a given
    /// `OptimizeToursResponse`, the route duration of a vehicle is the
    /// difference between its `vehicle_end_time` and `vehicle_start_time`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub route_duration_limit: std::option::Option<crate::model::vehicle::DurationLimit>,

    /// Limit applied to the travel duration of the vehicle's route. In a given
    /// `OptimizeToursResponse`, the route travel duration is the sum of all its
    /// [transitions.travel_duration][google.cloud.optimization.v1.ShipmentRoute.Transition.travel_duration].
    ///
    /// [google.cloud.optimization.v1.ShipmentRoute.Transition.travel_duration]: crate::model::shipment_route::Transition::travel_duration
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub travel_duration_limit: std::option::Option<crate::model::vehicle::DurationLimit>,

    /// Limit applied to the total distance of the vehicle's route. In a given
    /// `OptimizeToursResponse`, the route distance is the sum of all its
    /// [transitions.travel_distance_meters][google.cloud.optimization.v1.ShipmentRoute.Transition.travel_distance_meters].
    ///
    /// [google.cloud.optimization.v1.ShipmentRoute.Transition.travel_distance_meters]: crate::model::shipment_route::Transition::travel_distance_meters
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub route_distance_limit: std::option::Option<crate::model::DistanceLimit>,

    /// Specifies a map from visit_types strings to durations. The duration is time
    /// in addition to
    /// [VisitRequest.duration][google.cloud.optimization.v1.Shipment.VisitRequest.duration]
    /// to be taken at visits with the specified `visit_types`. This extra visit
    /// duration adds cost if `cost_per_hour` is specified. Keys (i.e.
    /// `visit_types`) cannot be empty strings.
    ///
    /// If a visit request has multiple types, a duration will be added for each
    /// type in the map.
    ///
    /// [google.cloud.optimization.v1.Shipment.VisitRequest.duration]: crate::model::shipment::VisitRequest::duration
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub extra_visit_duration_for_visit_type:
        std::collections::HashMap<std::string::String, wkt::Duration>,

    /// Describes the break schedule to be enforced on this vehicle.
    /// If empty, no breaks will be scheduled for this vehicle.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub break_rule: std::option::Option<crate::model::BreakRule>,

    /// Specifies a label for this vehicle. This label is reported in the response
    /// as the `vehicle_label` of the corresponding
    /// [ShipmentRoute][google.cloud.optimization.v1.ShipmentRoute].
    ///
    /// [google.cloud.optimization.v1.ShipmentRoute]: crate::model::ShipmentRoute
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub label: std::string::String,

    /// If true, `used_if_route_is_empty` must be false, and this vehicle will
    /// remain unused.
    ///
    /// If a shipment is performed by an ignored vehicle in
    /// `injected_first_solution_routes`, it is skipped in the first solution but
    /// is free to be performed in the response.
    ///
    /// If a shipment is performed by an ignored vehicle in
    /// `injected_solution_constraint` and any related pickup/delivery is
    /// constrained to remain on the vehicle (i.e., not relaxed to level
    /// `RELAX_ALL_AFTER_THRESHOLD`), it is skipped in the response.
    /// If a shipment has a non-empty `allowed_vehicle_indices` field and all of
    /// the allowed vehicles are ignored, it is skipped in the response.
    pub ignore: bool,

    /// Deprecated: No longer used.
    /// Indices in the `break_rule` field in the source
    /// [ShipmentModel][google.cloud.optimization.v1.ShipmentModel]. They
    /// correspond to break rules enforced on the vehicle.
    ///
    /// As of 2018/03, at most one rule index per vehicle can be specified.
    ///
    /// [google.cloud.optimization.v1.ShipmentModel]: crate::model::ShipmentModel
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub break_rule_indices: std::vec::Vec<i32>,

    /// Deprecated: Use
    /// [Vehicle.load_limits][google.cloud.optimization.v1.Vehicle.load_limits]
    /// instead.
    ///
    /// [google.cloud.optimization.v1.Vehicle.load_limits]: crate::model::Vehicle::load_limits
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub capacities: std::vec::Vec<crate::model::CapacityQuantity>,

    /// Deprecated: Use
    /// [Vehicle.LoadLimit.start_load_interval][google.cloud.optimization.v1.Vehicle.LoadLimit.start_load_interval]
    /// instead.
    ///
    /// [google.cloud.optimization.v1.Vehicle.LoadLimit.start_load_interval]: crate::model::vehicle::LoadLimit::start_load_interval
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub start_load_intervals: std::vec::Vec<crate::model::CapacityQuantityInterval>,

    /// Deprecated: Use
    /// [Vehicle.LoadLimit.end_load_interval][google.cloud.optimization.v1.Vehicle.LoadLimit.end_load_interval]
    /// instead.
    ///
    /// [google.cloud.optimization.v1.Vehicle.LoadLimit.end_load_interval]: crate::model::vehicle::LoadLimit::end_load_interval
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub end_load_intervals: std::vec::Vec<crate::model::CapacityQuantityInterval>,
}

impl Vehicle {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [travel_mode][crate::model::Vehicle::travel_mode].
    pub fn set_travel_mode<T: std::convert::Into<crate::model::vehicle::TravelMode>>(
        mut self,
        v: T,
    ) -> Self {
        self.travel_mode = v.into();
        self
    }

    /// Sets the value of [route_modifiers][crate::model::Vehicle::route_modifiers].
    pub fn set_route_modifiers<
        T: std::convert::Into<std::option::Option<crate::model::RouteModifiers>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.route_modifiers = v.into();
        self
    }

    /// Sets the value of [start_location][crate::model::Vehicle::start_location].
    pub fn set_start_location<T: std::convert::Into<std::option::Option<gtype::model::LatLng>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_location = v.into();
        self
    }

    /// Sets the value of [start_waypoint][crate::model::Vehicle::start_waypoint].
    pub fn set_start_waypoint<
        T: std::convert::Into<std::option::Option<crate::model::Waypoint>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.start_waypoint = v.into();
        self
    }

    /// Sets the value of [end_location][crate::model::Vehicle::end_location].
    pub fn set_end_location<T: std::convert::Into<std::option::Option<gtype::model::LatLng>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_location = v.into();
        self
    }

    /// Sets the value of [end_waypoint][crate::model::Vehicle::end_waypoint].
    pub fn set_end_waypoint<T: std::convert::Into<std::option::Option<crate::model::Waypoint>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_waypoint = v.into();
        self
    }

    /// Sets the value of [travel_duration_multiple][crate::model::Vehicle::travel_duration_multiple].
    pub fn set_travel_duration_multiple<T: std::convert::Into<std::option::Option<f64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.travel_duration_multiple = v.into();
        self
    }

    /// Sets the value of [unloading_policy][crate::model::Vehicle::unloading_policy].
    pub fn set_unloading_policy<T: std::convert::Into<crate::model::vehicle::UnloadingPolicy>>(
        mut self,
        v: T,
    ) -> Self {
        self.unloading_policy = v.into();
        self
    }

    /// Sets the value of [cost_per_hour][crate::model::Vehicle::cost_per_hour].
    pub fn set_cost_per_hour<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.cost_per_hour = v.into();
        self
    }

    /// Sets the value of [cost_per_traveled_hour][crate::model::Vehicle::cost_per_traveled_hour].
    pub fn set_cost_per_traveled_hour<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.cost_per_traveled_hour = v.into();
        self
    }

    /// Sets the value of [cost_per_kilometer][crate::model::Vehicle::cost_per_kilometer].
    pub fn set_cost_per_kilometer<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.cost_per_kilometer = v.into();
        self
    }

    /// Sets the value of [fixed_cost][crate::model::Vehicle::fixed_cost].
    pub fn set_fixed_cost<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.fixed_cost = v.into();
        self
    }

    /// Sets the value of [used_if_route_is_empty][crate::model::Vehicle::used_if_route_is_empty].
    pub fn set_used_if_route_is_empty<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.used_if_route_is_empty = v.into();
        self
    }

    /// Sets the value of [route_duration_limit][crate::model::Vehicle::route_duration_limit].
    pub fn set_route_duration_limit<
        T: std::convert::Into<std::option::Option<crate::model::vehicle::DurationLimit>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.route_duration_limit = v.into();
        self
    }

    /// Sets the value of [travel_duration_limit][crate::model::Vehicle::travel_duration_limit].
    pub fn set_travel_duration_limit<
        T: std::convert::Into<std::option::Option<crate::model::vehicle::DurationLimit>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.travel_duration_limit = v.into();
        self
    }

    /// Sets the value of [route_distance_limit][crate::model::Vehicle::route_distance_limit].
    pub fn set_route_distance_limit<
        T: std::convert::Into<std::option::Option<crate::model::DistanceLimit>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.route_distance_limit = v.into();
        self
    }

    /// Sets the value of [break_rule][crate::model::Vehicle::break_rule].
    pub fn set_break_rule<T: std::convert::Into<std::option::Option<crate::model::BreakRule>>>(
        mut self,
        v: T,
    ) -> Self {
        self.break_rule = v.into();
        self
    }

    /// Sets the value of [label][crate::model::Vehicle::label].
    pub fn set_label<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.label = v.into();
        self
    }

    /// Sets the value of [ignore][crate::model::Vehicle::ignore].
    pub fn set_ignore<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.ignore = v.into();
        self
    }

    /// Sets the value of [start_tags][crate::model::Vehicle::start_tags].
    pub fn set_start_tags<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.start_tags = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [end_tags][crate::model::Vehicle::end_tags].
    pub fn set_end_tags<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.end_tags = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [start_time_windows][crate::model::Vehicle::start_time_windows].
    pub fn set_start_time_windows<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TimeWindow>,
    {
        use std::iter::Iterator;
        self.start_time_windows = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [end_time_windows][crate::model::Vehicle::end_time_windows].
    pub fn set_end_time_windows<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TimeWindow>,
    {
        use std::iter::Iterator;
        self.end_time_windows = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [break_rule_indices][crate::model::Vehicle::break_rule_indices].
    pub fn set_break_rule_indices<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<i32>,
    {
        use std::iter::Iterator;
        self.break_rule_indices = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [capacities][crate::model::Vehicle::capacities].
    pub fn set_capacities<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CapacityQuantity>,
    {
        use std::iter::Iterator;
        self.capacities = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [start_load_intervals][crate::model::Vehicle::start_load_intervals].
    pub fn set_start_load_intervals<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CapacityQuantityInterval>,
    {
        use std::iter::Iterator;
        self.start_load_intervals = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [end_load_intervals][crate::model::Vehicle::end_load_intervals].
    pub fn set_end_load_intervals<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CapacityQuantityInterval>,
    {
        use std::iter::Iterator;
        self.end_load_intervals = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [load_limits][crate::model::Vehicle::load_limits].
    pub fn set_load_limits<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::vehicle::LoadLimit>,
    {
        use std::iter::Iterator;
        self.load_limits = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [extra_visit_duration_for_visit_type][crate::model::Vehicle::extra_visit_duration_for_visit_type].
    pub fn set_extra_visit_duration_for_visit_type<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::Duration>,
    {
        use std::iter::Iterator;
        self.extra_visit_duration_for_visit_type =
            v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Vehicle {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.Vehicle"
    }
}

/// Defines additional types related to Vehicle
pub mod vehicle {
    #[allow(unused_imports)]
    use super::*;

    /// Defines a load limit applying to a vehicle, e.g. "this truck may only
    /// carry up to 3500 kg". See
    /// [load_limits][google.cloud.optimization.v1.Vehicle.load_limits].
    ///
    /// [google.cloud.optimization.v1.Vehicle.load_limits]: crate::model::Vehicle::load_limits
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct LoadLimit {
        /// The maximum acceptable amount of load.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
        pub max_load: std::option::Option<i64>,

        /// A soft limit of the load. See
        /// [cost_per_unit_above_soft_max][google.cloud.optimization.v1.Vehicle.LoadLimit.cost_per_unit_above_soft_max].
        ///
        /// [google.cloud.optimization.v1.Vehicle.LoadLimit.cost_per_unit_above_soft_max]: crate::model::vehicle::LoadLimit::cost_per_unit_above_soft_max
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub soft_max_load: i64,

        /// If the load ever exceeds
        /// [soft_max_load][google.cloud.optimization.v1.Vehicle.LoadLimit.soft_max_load]
        /// along this vehicle's route, the following cost penalty applies (only once
        /// per vehicle): (load -
        /// [soft_max_load][google.cloud.optimization.v1.Vehicle.LoadLimit.soft_max_load])
        ///
        /// * [cost_per_unit_above_soft_max][google.cloud.optimization.v1.Vehicle.LoadLimit.cost_per_unit_above_soft_max]. All costs
        ///   add up and must be in the same unit as
        ///   [Shipment.penalty_cost][google.cloud.optimization.v1.Shipment.penalty_cost].
        ///
        /// [google.cloud.optimization.v1.Shipment.penalty_cost]: crate::model::Shipment::penalty_cost
        /// [google.cloud.optimization.v1.Vehicle.LoadLimit.cost_per_unit_above_soft_max]: crate::model::vehicle::LoadLimit::cost_per_unit_above_soft_max
        /// [google.cloud.optimization.v1.Vehicle.LoadLimit.soft_max_load]: crate::model::vehicle::LoadLimit::soft_max_load
        pub cost_per_unit_above_soft_max: f64,

        /// The acceptable load interval of the vehicle at the start of the route.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub start_load_interval: std::option::Option<crate::model::vehicle::load_limit::Interval>,

        /// The acceptable load interval of the vehicle at the end of the route.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub end_load_interval: std::option::Option<crate::model::vehicle::load_limit::Interval>,
    }

    impl LoadLimit {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [max_load][crate::model::vehicle::LoadLimit::max_load].
        pub fn set_max_load<T: std::convert::Into<std::option::Option<i64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.max_load = v.into();
            self
        }

        /// Sets the value of [soft_max_load][crate::model::vehicle::LoadLimit::soft_max_load].
        pub fn set_soft_max_load<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.soft_max_load = v.into();
            self
        }

        /// Sets the value of [cost_per_unit_above_soft_max][crate::model::vehicle::LoadLimit::cost_per_unit_above_soft_max].
        pub fn set_cost_per_unit_above_soft_max<T: std::convert::Into<f64>>(
            mut self,
            v: T,
        ) -> Self {
            self.cost_per_unit_above_soft_max = v.into();
            self
        }

        /// Sets the value of [start_load_interval][crate::model::vehicle::LoadLimit::start_load_interval].
        pub fn set_start_load_interval<
            T: std::convert::Into<std::option::Option<crate::model::vehicle::load_limit::Interval>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.start_load_interval = v.into();
            self
        }

        /// Sets the value of [end_load_interval][crate::model::vehicle::LoadLimit::end_load_interval].
        pub fn set_end_load_interval<
            T: std::convert::Into<std::option::Option<crate::model::vehicle::load_limit::Interval>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.end_load_interval = v.into();
            self
        }
    }

    impl wkt::message::Message for LoadLimit {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.Vehicle.LoadLimit"
        }
    }

    /// Defines additional types related to LoadLimit
    pub mod load_limit {
        #[allow(unused_imports)]
        use super::*;

        /// Interval of acceptable load amounts.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Interval {
            /// A minimum acceptable load. Must be ≥ 0.
            /// If they're both specified,
            /// [min][google.cloud.optimization.v1.Vehicle.LoadLimit.Interval.min] must
            /// be ≤
            /// [max][google.cloud.optimization.v1.Vehicle.LoadLimit.Interval.max].
            ///
            /// [google.cloud.optimization.v1.Vehicle.LoadLimit.Interval.max]: crate::model::vehicle::load_limit::Interval::max
            /// [google.cloud.optimization.v1.Vehicle.LoadLimit.Interval.min]: crate::model::vehicle::load_limit::Interval::min
            #[serde_as(as = "serde_with::DisplayFromStr")]
            pub min: i64,

            /// A maximum acceptable load. Must be ≥ 0. If unspecified, the maximum
            /// load is unrestricted by this message.
            /// If they're both specified,
            /// [min][google.cloud.optimization.v1.Vehicle.LoadLimit.Interval.min] must
            /// be ≤
            /// [max][google.cloud.optimization.v1.Vehicle.LoadLimit.Interval.max].
            ///
            /// [google.cloud.optimization.v1.Vehicle.LoadLimit.Interval.max]: crate::model::vehicle::load_limit::Interval::max
            /// [google.cloud.optimization.v1.Vehicle.LoadLimit.Interval.min]: crate::model::vehicle::load_limit::Interval::min
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
            pub max: std::option::Option<i64>,
        }

        impl Interval {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [min][crate::model::vehicle::load_limit::Interval::min].
            pub fn set_min<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
                self.min = v.into();
                self
            }

            /// Sets the value of [max][crate::model::vehicle::load_limit::Interval::max].
            pub fn set_max<T: std::convert::Into<std::option::Option<i64>>>(
                mut self,
                v: T,
            ) -> Self {
                self.max = v.into();
                self
            }
        }

        impl wkt::message::Message for Interval {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.optimization.v1.Vehicle.LoadLimit.Interval"
            }
        }
    }

    /// A limit defining a maximum duration of the route of a vehicle. It can be
    /// either hard or soft.
    ///
    /// When a soft limit field is defined, both the soft max threshold and its
    /// associated cost must be defined together.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct DurationLimit {
        /// A hard limit constraining the duration to be at most max_duration.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub max_duration: std::option::Option<wkt::Duration>,

        /// A soft limit not enforcing a maximum duration limit, but when violated
        /// makes the route incur a cost. This cost adds up to other costs defined in
        /// the model, with the same unit.
        ///
        /// If defined, `soft_max_duration` must be nonnegative. If max_duration is
        /// also defined, `soft_max_duration` must be less than max_duration.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub soft_max_duration: std::option::Option<wkt::Duration>,

        /// Cost per hour incurred if the `soft_max_duration` threshold is violated.
        /// The additional cost is 0 if the duration is under the threshold,
        /// otherwise the cost depends on the duration as follows:
        ///
        /// ```norust
        ///   cost_per_hour_after_soft_max * (duration - soft_max_duration)
        /// ```
        ///
        /// The cost must be nonnegative.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub cost_per_hour_after_soft_max: std::option::Option<f64>,

        /// A soft limit not enforcing a maximum duration limit, but when violated
        /// makes the route incur a cost, quadratic in the duration. This cost adds
        /// up to other costs defined in the model, with the same unit.
        ///
        /// If defined, `quadratic_soft_max_duration` must be nonnegative. If
        /// `max_duration` is also defined, `quadratic_soft_max_duration` must be
        /// less than `max_duration`, and the difference must be no larger than one
        /// day:
        ///
        /// `max_duration - quadratic_soft_max_duration <= 86400 seconds`
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub quadratic_soft_max_duration: std::option::Option<wkt::Duration>,

        /// Cost per square hour incurred if the
        /// `quadratic_soft_max_duration` threshold is violated.
        ///
        /// The additional cost is 0 if the duration is under the threshold,
        /// otherwise the cost depends on the duration as follows:
        ///
        /// ```norust
        ///   cost_per_square_hour_after_quadratic_soft_max *
        ///   (duration - quadratic_soft_max_duration)^2
        /// ```
        ///
        /// The cost must be nonnegative.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub cost_per_square_hour_after_quadratic_soft_max: std::option::Option<f64>,
    }

    impl DurationLimit {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [max_duration][crate::model::vehicle::DurationLimit::max_duration].
        pub fn set_max_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.max_duration = v.into();
            self
        }

        /// Sets the value of [soft_max_duration][crate::model::vehicle::DurationLimit::soft_max_duration].
        pub fn set_soft_max_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.soft_max_duration = v.into();
            self
        }

        /// Sets the value of [cost_per_hour_after_soft_max][crate::model::vehicle::DurationLimit::cost_per_hour_after_soft_max].
        pub fn set_cost_per_hour_after_soft_max<T: std::convert::Into<std::option::Option<f64>>>(
            mut self,
            v: T,
        ) -> Self {
            self.cost_per_hour_after_soft_max = v.into();
            self
        }

        /// Sets the value of [quadratic_soft_max_duration][crate::model::vehicle::DurationLimit::quadratic_soft_max_duration].
        pub fn set_quadratic_soft_max_duration<
            T: std::convert::Into<std::option::Option<wkt::Duration>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.quadratic_soft_max_duration = v.into();
            self
        }

        /// Sets the value of [cost_per_square_hour_after_quadratic_soft_max][crate::model::vehicle::DurationLimit::cost_per_square_hour_after_quadratic_soft_max].
        pub fn set_cost_per_square_hour_after_quadratic_soft_max<
            T: std::convert::Into<std::option::Option<f64>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.cost_per_square_hour_after_quadratic_soft_max = v.into();
            self
        }
    }

    impl wkt::message::Message for DurationLimit {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.Vehicle.DurationLimit"
        }
    }

    /// Travel modes which can be used by vehicles.
    ///
    /// These should be a subset of the Google Maps Platform Routes Preferred API
    /// travel modes, see:
    /// <https://developers.google.com/maps/documentation/routes_preferred/reference/rest/Shared.Types/RouteTravelMode>.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct TravelMode(std::borrow::Cow<'static, str>);

    impl TravelMode {
        /// Creates a new TravelMode instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [TravelMode](TravelMode)
    pub mod travel_mode {
        use super::TravelMode;

        /// Unspecified travel mode, equivalent to `DRIVING`.
        pub const TRAVEL_MODE_UNSPECIFIED: TravelMode = TravelMode::new("TRAVEL_MODE_UNSPECIFIED");

        /// Travel mode corresponding to driving directions (car, ...).
        pub const DRIVING: TravelMode = TravelMode::new("DRIVING");

        /// Travel mode corresponding to walking directions.
        pub const WALKING: TravelMode = TravelMode::new("WALKING");
    }

    impl std::convert::From<std::string::String> for TravelMode {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// Policy on how a vehicle can be unloaded. Applies only to shipments having
    /// both a pickup and a delivery.
    ///
    /// Other shipments are free to occur anywhere on the route independent of
    /// `unloading_policy`.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct UnloadingPolicy(std::borrow::Cow<'static, str>);

    impl UnloadingPolicy {
        /// Creates a new UnloadingPolicy instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [UnloadingPolicy](UnloadingPolicy)
    pub mod unloading_policy {
        use super::UnloadingPolicy;

        /// Unspecified unloading policy; deliveries must just occur after their
        /// corresponding pickups.
        pub const UNLOADING_POLICY_UNSPECIFIED: UnloadingPolicy =
            UnloadingPolicy::new("UNLOADING_POLICY_UNSPECIFIED");

        /// Deliveries must occur in reverse order of pickups
        pub const LAST_IN_FIRST_OUT: UnloadingPolicy = UnloadingPolicy::new("LAST_IN_FIRST_OUT");

        /// Deliveries must occur in the same order as pickups
        pub const FIRST_IN_FIRST_OUT: UnloadingPolicy = UnloadingPolicy::new("FIRST_IN_FIRST_OUT");
    }

    impl std::convert::From<std::string::String> for UnloadingPolicy {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Time windows constrain the time of an event, such as the arrival time at a
/// visit, or the start and end time of a vehicle.
///
/// Hard time window bounds, `start_time` and `end_time`, enforce the earliest
/// and latest time of the event, such that `start_time <= event_time <=
/// end_time`. The soft time window lower bound, `soft_start_time`, expresses a
/// preference for the event to happen at or after `soft_start_time` by incurring
/// a cost proportional to how long before soft_start_time the event occurs. The
/// soft time window upper bound, `soft_end_time`, expresses a preference for the
/// event to happen at or before `soft_end_time` by incurring a cost proportional
/// to how long after `soft_end_time` the event occurs. `start_time`, `end_time`,
/// `soft_start_time` and `soft_end_time` should be within the global time limits
/// (see
/// [ShipmentModel.global_start_time][google.cloud.optimization.v1.ShipmentModel.global_start_time]
/// and
/// [ShipmentModel.global_end_time][google.cloud.optimization.v1.ShipmentModel.global_end_time])
/// and should respect:
///
/// ```norust
///   0 <= `start_time` <= `soft_start_time` <= `end_time` and
///   0 <= `start_time` <= `soft_end_time` <= `end_time`.
/// ```
///
/// [google.cloud.optimization.v1.ShipmentModel.global_end_time]: crate::model::ShipmentModel::global_end_time
/// [google.cloud.optimization.v1.ShipmentModel.global_start_time]: crate::model::ShipmentModel::global_start_time
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TimeWindow {
    /// The hard time window start time. If unspecified it will be set to
    /// `ShipmentModel.global_start_time`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time: std::option::Option<wkt::Timestamp>,

    /// The hard time window end time. If unspecified it will be set to
    /// `ShipmentModel.global_end_time`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// The soft start time of the time window.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub soft_start_time: std::option::Option<wkt::Timestamp>,

    /// The soft end time of the time window.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub soft_end_time: std::option::Option<wkt::Timestamp>,

    /// A cost per hour added to other costs in the model if the event occurs
    /// before soft_start_time, computed as:
    ///
    /// ```norust
    ///    max(0, soft_start_time - t.seconds)
    ///                           * cost_per_hour_before_soft_start_time / 3600,
    /// t being the time of the event.
    /// ```
    ///
    /// This cost must be positive, and the field can only be set if
    /// soft_start_time has been set.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cost_per_hour_before_soft_start_time: std::option::Option<f64>,

    /// A cost per hour added to other costs in the model if the event occurs after
    /// `soft_end_time`, computed as:
    ///
    /// ```norust
    ///    max(0, t.seconds - soft_end_time.seconds)
    ///                     * cost_per_hour_after_soft_end_time / 3600,
    /// t being the time of the event.
    /// ```
    ///
    /// This cost must be positive, and the field can only be set if
    /// `soft_end_time` has been set.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cost_per_hour_after_soft_end_time: std::option::Option<f64>,
}

impl TimeWindow {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [start_time][crate::model::TimeWindow::start_time].
    pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::TimeWindow::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [soft_start_time][crate::model::TimeWindow::soft_start_time].
    pub fn set_soft_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.soft_start_time = v.into();
        self
    }

    /// Sets the value of [soft_end_time][crate::model::TimeWindow::soft_end_time].
    pub fn set_soft_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.soft_end_time = v.into();
        self
    }

    /// Sets the value of [cost_per_hour_before_soft_start_time][crate::model::TimeWindow::cost_per_hour_before_soft_start_time].
    pub fn set_cost_per_hour_before_soft_start_time<
        T: std::convert::Into<std::option::Option<f64>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.cost_per_hour_before_soft_start_time = v.into();
        self
    }

    /// Sets the value of [cost_per_hour_after_soft_end_time][crate::model::TimeWindow::cost_per_hour_after_soft_end_time].
    pub fn set_cost_per_hour_after_soft_end_time<
        T: std::convert::Into<std::option::Option<f64>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.cost_per_hour_after_soft_end_time = v.into();
        self
    }
}

impl wkt::message::Message for TimeWindow {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.TimeWindow"
    }
}

/// Deprecated: Use
/// [Vehicle.LoadLimit.Interval][google.cloud.optimization.v1.Vehicle.LoadLimit.Interval]
/// instead.
///
/// [google.cloud.optimization.v1.Vehicle.LoadLimit.Interval]: crate::model::vehicle::load_limit::Interval
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CapacityQuantity {
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub r#type: std::string::String,

    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub value: i64,
}

impl CapacityQuantity {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [r#type][crate::model::CapacityQuantity::type].
    pub fn set_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [value][crate::model::CapacityQuantity::value].
    pub fn set_value<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.value = v.into();
        self
    }
}

impl wkt::message::Message for CapacityQuantity {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.CapacityQuantity"
    }
}

/// Deprecated: Use
/// [Vehicle.LoadLimit.Interval][google.cloud.optimization.v1.Vehicle.LoadLimit.Interval]
/// instead.
///
/// [google.cloud.optimization.v1.Vehicle.LoadLimit.Interval]: crate::model::vehicle::load_limit::Interval
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CapacityQuantityInterval {
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub r#type: std::string::String,

    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub min_value: std::option::Option<i64>,

    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub max_value: std::option::Option<i64>,
}

impl CapacityQuantityInterval {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [r#type][crate::model::CapacityQuantityInterval::type].
    pub fn set_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [min_value][crate::model::CapacityQuantityInterval::min_value].
    pub fn set_min_value<T: std::convert::Into<std::option::Option<i64>>>(mut self, v: T) -> Self {
        self.min_value = v.into();
        self
    }

    /// Sets the value of [max_value][crate::model::CapacityQuantityInterval::max_value].
    pub fn set_max_value<T: std::convert::Into<std::option::Option<i64>>>(mut self, v: T) -> Self {
        self.max_value = v.into();
        self
    }
}

impl wkt::message::Message for CapacityQuantityInterval {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.CapacityQuantityInterval"
    }
}

/// A limit defining a maximum distance which can be traveled. It can be either
/// hard or soft.
///
/// If a soft limit is defined, both `soft_max_meters` and
/// `cost_per_kilometer_above_soft_max` must be defined and be nonnegative.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DistanceLimit {
    /// A hard limit constraining the distance to be at most max_meters. The limit
    /// must be nonnegative.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub max_meters: std::option::Option<i64>,

    /// A soft limit not enforcing a maximum distance limit, but when violated
    /// results in a cost which adds up to other costs defined in the model,
    /// with the same unit.
    ///
    /// If defined soft_max_meters must be less than max_meters and must be
    /// nonnegative.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
    pub soft_max_meters: std::option::Option<i64>,

    /// Cost per kilometer incurred, increasing up to `soft_max_meters`, with
    /// formula:
    ///
    /// ```norust
    ///   min(distance_meters, soft_max_meters) / 1000.0 *
    ///   cost_per_kilometer_below_soft_max.
    /// ```
    ///
    /// This cost is not supported in `route_distance_limit`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cost_per_kilometer_below_soft_max: std::option::Option<f64>,

    /// Cost per kilometer incurred if distance is above `soft_max_meters` limit.
    /// The additional cost is 0 if the distance is under the limit, otherwise the
    /// formula used to compute the cost is the following:
    ///
    /// ```norust
    ///   (distance_meters - soft_max_meters) / 1000.0 *
    ///   cost_per_kilometer_above_soft_max.
    /// ```
    ///
    /// The cost must be nonnegative.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cost_per_kilometer_above_soft_max: std::option::Option<f64>,
}

impl DistanceLimit {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [max_meters][crate::model::DistanceLimit::max_meters].
    pub fn set_max_meters<T: std::convert::Into<std::option::Option<i64>>>(mut self, v: T) -> Self {
        self.max_meters = v.into();
        self
    }

    /// Sets the value of [soft_max_meters][crate::model::DistanceLimit::soft_max_meters].
    pub fn set_soft_max_meters<T: std::convert::Into<std::option::Option<i64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.soft_max_meters = v.into();
        self
    }

    /// Sets the value of [cost_per_kilometer_below_soft_max][crate::model::DistanceLimit::cost_per_kilometer_below_soft_max].
    pub fn set_cost_per_kilometer_below_soft_max<
        T: std::convert::Into<std::option::Option<f64>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.cost_per_kilometer_below_soft_max = v.into();
        self
    }

    /// Sets the value of [cost_per_kilometer_above_soft_max][crate::model::DistanceLimit::cost_per_kilometer_above_soft_max].
    pub fn set_cost_per_kilometer_above_soft_max<
        T: std::convert::Into<std::option::Option<f64>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.cost_per_kilometer_above_soft_max = v.into();
        self
    }
}

impl wkt::message::Message for DistanceLimit {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.DistanceLimit"
    }
}

/// Specifies attributes of transitions between two consecutive visits on a
/// route. Several `TransitionAttributes` may apply to the same transition: in
/// that case, all extra costs add up and the strictest constraint or limit
/// applies (following natural "AND" semantics).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TransitionAttributes {
    /// Tags defining the set of (src->dst) transitions these attributes apply to.
    ///
    /// A source visit or vehicle start matches iff its
    /// [VisitRequest.tags][google.cloud.optimization.v1.Shipment.VisitRequest.tags]
    /// or [Vehicle.start_tags][google.cloud.optimization.v1.Vehicle.start_tags]
    /// either contains `src_tag` or does not contain `excluded_src_tag` (depending
    /// on which of these two fields is non-empty).
    ///
    /// [google.cloud.optimization.v1.Shipment.VisitRequest.tags]: crate::model::shipment::VisitRequest::tags
    /// [google.cloud.optimization.v1.Vehicle.start_tags]: crate::model::Vehicle::start_tags
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub src_tag: std::string::String,

    /// See `src_tag`. Exactly one of `src_tag` and `excluded_src_tag` must be
    /// non-empty.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub excluded_src_tag: std::string::String,

    /// A destination visit or vehicle end matches iff its
    /// [VisitRequest.tags][google.cloud.optimization.v1.Shipment.VisitRequest.tags]
    /// or [Vehicle.end_tags][google.cloud.optimization.v1.Vehicle.end_tags] either
    /// contains `dst_tag` or does not contain `excluded_dst_tag` (depending on
    /// which of these two fields is non-empty).
    ///
    /// [google.cloud.optimization.v1.Shipment.VisitRequest.tags]: crate::model::shipment::VisitRequest::tags
    /// [google.cloud.optimization.v1.Vehicle.end_tags]: crate::model::Vehicle::end_tags
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub dst_tag: std::string::String,

    /// See `dst_tag`. Exactly one of `dst_tag` and `excluded_dst_tag` must be
    /// non-empty.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub excluded_dst_tag: std::string::String,

    /// Specifies a cost for performing this transition. This is in the same unit
    /// as all other costs in the model and must not be negative. It is applied on
    /// top of all other existing costs.
    pub cost: f64,

    /// Specifies a cost per kilometer applied to the distance traveled while
    /// performing this transition. It adds up to any
    /// [Vehicle.cost_per_kilometer][google.cloud.optimization.v1.Vehicle.cost_per_kilometer]
    /// specified on vehicles.
    ///
    /// [google.cloud.optimization.v1.Vehicle.cost_per_kilometer]: crate::model::Vehicle::cost_per_kilometer
    pub cost_per_kilometer: f64,

    /// Specifies a limit on the distance traveled while performing this
    /// transition.
    ///
    /// As of 2021/06, only soft limits are supported.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub distance_limit: std::option::Option<crate::model::DistanceLimit>,

    /// Specifies a delay incurred when performing this transition.
    ///
    /// This delay always occurs *after* finishing the source visit and *before*
    /// starting the destination visit.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub delay: std::option::Option<wkt::Duration>,
}

impl TransitionAttributes {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [src_tag][crate::model::TransitionAttributes::src_tag].
    pub fn set_src_tag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.src_tag = v.into();
        self
    }

    /// Sets the value of [excluded_src_tag][crate::model::TransitionAttributes::excluded_src_tag].
    pub fn set_excluded_src_tag<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.excluded_src_tag = v.into();
        self
    }

    /// Sets the value of [dst_tag][crate::model::TransitionAttributes::dst_tag].
    pub fn set_dst_tag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.dst_tag = v.into();
        self
    }

    /// Sets the value of [excluded_dst_tag][crate::model::TransitionAttributes::excluded_dst_tag].
    pub fn set_excluded_dst_tag<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.excluded_dst_tag = v.into();
        self
    }

    /// Sets the value of [cost][crate::model::TransitionAttributes::cost].
    pub fn set_cost<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.cost = v.into();
        self
    }

    /// Sets the value of [cost_per_kilometer][crate::model::TransitionAttributes::cost_per_kilometer].
    pub fn set_cost_per_kilometer<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.cost_per_kilometer = v.into();
        self
    }

    /// Sets the value of [distance_limit][crate::model::TransitionAttributes::distance_limit].
    pub fn set_distance_limit<
        T: std::convert::Into<std::option::Option<crate::model::DistanceLimit>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.distance_limit = v.into();
        self
    }

    /// Sets the value of [delay][crate::model::TransitionAttributes::delay].
    pub fn set_delay<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.delay = v.into();
        self
    }
}

impl wkt::message::Message for TransitionAttributes {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.TransitionAttributes"
    }
}

/// Encapsulates a waypoint. Waypoints mark arrival and departure locations of
/// VisitRequests, and start and end locations of Vehicles.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Waypoint {
    /// Indicates that the location of this waypoint is meant to have a preference
    /// for the vehicle to stop at a particular side of road. When you set this
    /// value, the route will pass through the location so that the vehicle can
    /// stop at the side of road that the location is biased towards from the
    /// center of the road. This option works only for the 'DRIVING' travel mode,
    /// and when the 'location_type' is set to 'location'.
    pub side_of_road: bool,

    /// Different ways to represent a location.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub location_type: std::option::Option<crate::model::waypoint::LocationType>,
}

impl Waypoint {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [side_of_road][crate::model::Waypoint::side_of_road].
    pub fn set_side_of_road<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.side_of_road = v.into();
        self
    }

    /// Sets the value of `location_type`.
    pub fn set_location_type<
        T: std::convert::Into<std::option::Option<crate::model::waypoint::LocationType>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.location_type = v.into();
        self
    }

    /// The value of [location_type][crate::model::Waypoint::location_type]
    /// if it holds a `Location`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_location(&self) -> std::option::Option<&std::boxed::Box<crate::model::Location>> {
        #[allow(unreachable_patterns)]
        self.location_type.as_ref().and_then(|v| match v {
            crate::model::waypoint::LocationType::Location(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [location_type][crate::model::Waypoint::location_type]
    /// if it holds a `PlaceId`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_place_id(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.location_type.as_ref().and_then(|v| match v {
            crate::model::waypoint::LocationType::PlaceId(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [location_type][crate::model::Waypoint::location_type]
    /// to hold a `Location`.
    ///
    /// Note that all the setters affecting `location_type` are
    /// mutually exclusive.
    pub fn set_location<T: std::convert::Into<std::boxed::Box<crate::model::Location>>>(
        mut self,
        v: T,
    ) -> Self {
        self.location_type =
            std::option::Option::Some(crate::model::waypoint::LocationType::Location(v.into()));
        self
    }

    /// Sets the value of [location_type][crate::model::Waypoint::location_type]
    /// to hold a `PlaceId`.
    ///
    /// Note that all the setters affecting `location_type` are
    /// mutually exclusive.
    pub fn set_place_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.location_type =
            std::option::Option::Some(crate::model::waypoint::LocationType::PlaceId(v.into()));
        self
    }
}

impl wkt::message::Message for Waypoint {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.Waypoint"
    }
}

/// Defines additional types related to Waypoint
pub mod waypoint {
    #[allow(unused_imports)]
    use super::*;

    /// Different ways to represent a location.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum LocationType {
        /// A point specified using geographic coordinates, including an optional
        /// heading.
        Location(std::boxed::Box<crate::model::Location>),
        /// The POI Place ID associated with the waypoint.
        PlaceId(std::string::String),
    }
}

/// Encapsulates a location (a geographic point, and an optional heading).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Location {
    /// The waypoint's geographic coordinates.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub lat_lng: std::option::Option<gtype::model::LatLng>,

    /// The compass heading associated with the direction of the flow of traffic.
    /// This value is used to specify the side of the road to use for pickup and
    /// drop-off. Heading values can be from 0 to 360, where 0 specifies a heading
    /// of due North, 90 specifies a heading of due East, etc.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub heading: std::option::Option<i32>,
}

impl Location {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [lat_lng][crate::model::Location::lat_lng].
    pub fn set_lat_lng<T: std::convert::Into<std::option::Option<gtype::model::LatLng>>>(
        mut self,
        v: T,
    ) -> Self {
        self.lat_lng = v.into();
        self
    }

    /// Sets the value of [heading][crate::model::Location::heading].
    pub fn set_heading<T: std::convert::Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
        self.heading = v.into();
        self
    }
}

impl wkt::message::Message for Location {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.Location"
    }
}

/// Rules to generate time breaks for a vehicle (e.g. lunch breaks). A break
/// is a contiguous period of time during which the vehicle remains idle at its
/// current position and cannot perform any visit. A break may occur:
///
/// * during the travel between two visits (which includes the time right
///   before or right after a visit, but not in the middle of a visit), in
///   which case it extends the corresponding transit time between the visits,
/// * or before the vehicle start (the vehicle may not start in the middle of
///   a break), in which case it does not affect the vehicle start time.
/// * or after the vehicle end (ditto, with the vehicle end time).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BreakRule {
    /// Sequence of breaks. See the `BreakRequest` message.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub break_requests: std::vec::Vec<crate::model::break_rule::BreakRequest>,

    /// Several `FrequencyConstraint` may apply. They must all be satisfied by
    /// the `BreakRequest`s of this `BreakRule`. See `FrequencyConstraint`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub frequency_constraints: std::vec::Vec<crate::model::break_rule::FrequencyConstraint>,
}

impl BreakRule {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [break_requests][crate::model::BreakRule::break_requests].
    pub fn set_break_requests<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::break_rule::BreakRequest>,
    {
        use std::iter::Iterator;
        self.break_requests = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [frequency_constraints][crate::model::BreakRule::frequency_constraints].
    pub fn set_frequency_constraints<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::break_rule::FrequencyConstraint>,
    {
        use std::iter::Iterator;
        self.frequency_constraints = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BreakRule {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.BreakRule"
    }
}

/// Defines additional types related to BreakRule
pub mod break_rule {
    #[allow(unused_imports)]
    use super::*;

    /// The sequence of breaks (i.e. their number and order) that apply to each
    /// vehicle must be known beforehand. The repeated `BreakRequest`s define
    /// that sequence, in the order in which they must occur. Their time windows
    /// (`earliest_start_time` / `latest_start_time`) may overlap, but they must
    /// be compatible with the order (this is checked).
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct BreakRequest {
        /// Required. Lower bound (inclusive) on the start of the break.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub earliest_start_time: std::option::Option<wkt::Timestamp>,

        /// Required. Upper bound (inclusive) on the start of the break.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub latest_start_time: std::option::Option<wkt::Timestamp>,

        /// Required. Minimum duration of the break. Must be positive.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub min_duration: std::option::Option<wkt::Duration>,
    }

    impl BreakRequest {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [earliest_start_time][crate::model::break_rule::BreakRequest::earliest_start_time].
        pub fn set_earliest_start_time<
            T: std::convert::Into<std::option::Option<wkt::Timestamp>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.earliest_start_time = v.into();
            self
        }

        /// Sets the value of [latest_start_time][crate::model::break_rule::BreakRequest::latest_start_time].
        pub fn set_latest_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
            mut self,
            v: T,
        ) -> Self {
            self.latest_start_time = v.into();
            self
        }

        /// Sets the value of [min_duration][crate::model::break_rule::BreakRequest::min_duration].
        pub fn set_min_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.min_duration = v.into();
            self
        }
    }

    impl wkt::message::Message for BreakRequest {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.BreakRule.BreakRequest"
        }
    }

    /// One may further constrain the frequency and duration of the breaks
    /// specified above, by enforcing a minimum break frequency, such as
    /// "There must be a break of at least 1 hour every 12 hours". Assuming that
    /// this can be interpreted as "Within any sliding time window of 12h, there
    /// must be at least one break of at least one hour", that example would
    /// translate to the following `FrequencyConstraint`:
    ///
    /// ```norust
    /// {
    ///    min_break_duration { seconds: 3600 }         # 1 hour.
    ///    max_inter_break_duration { seconds: 39600 }  # 11 hours (12 - 1 = 11).
    /// }
    /// ```
    ///
    /// The timing and duration of the breaks in the solution will respect all
    /// such constraints, in addition to the time windows and minimum durations
    /// already specified in the `BreakRequest`.
    ///
    /// A `FrequencyConstraint` may in practice apply to non-consecutive breaks.
    /// For example, the following schedule honors the "1h every 12h" example:
    ///
    /// ```norust
    ///   04:00 vehicle start
    ///    .. performing travel and visits ..
    ///   09:00 1 hour break
    ///   10:00 end of the break
    ///    .. performing travel and visits ..
    ///   12:00 20-min lunch break
    ///   12:20 end of the break
    ///    .. performing travel and visits ..
    ///   21:00 1 hour break
    ///   22:00 end of the break
    ///    .. performing travel and visits ..
    ///   23:59 vehicle end
    /// ```
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct FrequencyConstraint {
        /// Required. Minimum break duration for this constraint. Nonnegative.
        /// See description of `FrequencyConstraint`.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub min_break_duration: std::option::Option<wkt::Duration>,

        /// Required. Maximum allowed span of any interval of time in the route that
        /// does not include at least partially a break of `duration >=
        /// min_break_duration`. Must be positive.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub max_inter_break_duration: std::option::Option<wkt::Duration>,
    }

    impl FrequencyConstraint {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [min_break_duration][crate::model::break_rule::FrequencyConstraint::min_break_duration].
        pub fn set_min_break_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.min_break_duration = v.into();
            self
        }

        /// Sets the value of [max_inter_break_duration][crate::model::break_rule::FrequencyConstraint::max_inter_break_duration].
        pub fn set_max_inter_break_duration<
            T: std::convert::Into<std::option::Option<wkt::Duration>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.max_inter_break_duration = v.into();
            self
        }
    }

    impl wkt::message::Message for FrequencyConstraint {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.BreakRule.FrequencyConstraint"
        }
    }
}

/// A vehicle's route can be decomposed, along the time axis, like this (we
/// assume there are n visits):
///
/// ```norust
///   |            |            |          |       |  T[2], |        |      |
///   | Transition |  Visit #0  |          |       |  V[2], |        |      |
///   |     #0     |    aka     |   T[1]   |  V[1] |  ...   | V[n-1] | T[n] |
///   |  aka T[0]  |    V[0]    |          |       | V[n-2],|        |      |
///   |            |            |          |       | T[n-1] |        |      |
///   ^            ^            ^          ^       ^        ^        ^      ^
/// vehicle    V[0].start   V[0].end     V[1].   V[1].    V[n].    V[n]. vehicle
///  start     (arrival)   (departure)   start   end      start    end     end
/// ```
///
/// Note that we make a difference between:
///
/// * "punctual events", such as the vehicle start and end and each visit's start
///   and end (aka arrival and departure). They happen at a given second.
/// * "time intervals", such as the visits themselves, and the transition between
///   visits. Though time intervals can sometimes have zero duration, i.e. start
///   and end at the same second, they often have a positive duration.
///
/// Invariants:
///
/// * If there are n visits, there are n+1 transitions.
/// * A visit is always surrounded by a transition before it (same index) and a
///   transition after it (index + 1).
/// * The vehicle start is always followed by transition #0.
/// * The vehicle end is always preceded by transition #n.
///
/// Zooming in, here is what happens during a `Transition` and a `Visit`:
///
/// ```norust
/// ---+-------------------------------------+-----------------------------+-->
///    |           TRANSITION[i]             |           VISIT[i]          |
///    |                                     |                             |
///    |  * TRAVEL: the vehicle moves from   |      PERFORM the visit:     |
///    |    VISIT[i-1].departure_location to |                             |
///    |    VISIT[i].arrival_location, which |  * Spend some time:         |
///    |    takes a given travel duration    |    the "visit duration".    |
///    |    and distance                     |                             |
///    |                                     |  * Load or unload           |
///    |  * BREAKS: the driver may have      |    some quantities from the |
///    |    breaks (e.g. lunch break).       |    vehicle: the "demand".   |
///    |                                     |                             |
///    |  * WAIT: the driver/vehicle does    |                             |
///    |    nothing. This can happen for     |                             |
///    |    many reasons, for example when   |                             |
///    |    the vehicle reaches the next     |                             |
///    |    event's destination before the   |                             |
///    |    start of its time window         |                             |
///    |                                     |                             |
///    |  * DELAY: *right before* the next   |                             |
///    |    arrival. E.g. the vehicle and/or |                             |
///    |    driver spends time unloading.    |                             |
///    |                                     |                             |
/// ---+-------------------------------------+-----------------------------+-->
///    ^                                     ^                             ^
/// V[i-1].end                           V[i].start                    V[i].end
/// ```
///
/// Lastly, here is how the TRAVEL, BREAKS, DELAY and WAIT can be arranged
/// during a transition.
///
/// * They don't overlap.
/// * The DELAY is unique and *must* be a contiguous period of time right
///   before the next visit (or vehicle end). Thus, it suffice to know the
///   delay duration to know its start and end time.
/// * The BREAKS are contiguous, non-overlapping periods of time. The
///   response specifies the start time and duration of each break.
/// * TRAVEL and WAIT are "preemptable": they can be interrupted several times
///   during this transition. Clients can assume that travel happens "as soon as
///   possible" and that "wait" fills the remaining time.
///
/// A (complex) example:
///
/// ```norust
///                                TRANSITION[i]
/// --++-----+-----------------------------------------------------------++-->
///   ||     |       |           |       |           |         |         ||
///   ||  T  |   B   |     T     |       |     B     |         |    D    ||
///   ||  r  |   r   |     r     |   W   |     r     |    W    |    e    ||
///   ||  a  |   e   |     a     |   a   |     e     |    a    |    l    ||
///   ||  v  |   a   |     v     |   i   |     a     |    i    |    a    ||
///   ||  e  |   k   |     e     |   t   |     k     |    t    |    y    ||
///   ||  l  |       |     l     |       |           |         |         ||
///   ||     |       |           |       |           |         |         ||
/// --++-----------------------------------------------------------------++-->
/// ```
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ShipmentRoute {
    /// Vehicle performing the route, identified by its index in the source
    /// `ShipmentModel`.
    pub vehicle_index: i32,

    /// Label of the vehicle performing this route, equal to
    /// `ShipmentModel.vehicles(vehicle_index).label`, if specified.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub vehicle_label: std::string::String,

    /// Time at which the vehicle starts its route.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub vehicle_start_time: std::option::Option<wkt::Timestamp>,

    /// Time at which the vehicle finishes its route.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub vehicle_end_time: std::option::Option<wkt::Timestamp>,

    /// Ordered sequence of visits representing a route.
    /// visits[i] is the i-th visit in the route.
    /// If this field is empty, the vehicle is considered as unused.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub visits: std::vec::Vec<crate::model::shipment_route::Visit>,

    /// Ordered list of transitions for the route.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub transitions: std::vec::Vec<crate::model::shipment_route::Transition>,

    /// When
    /// [OptimizeToursRequest.consider_road_traffic][google.cloud.optimization.v1.OptimizeToursRequest.consider_road_traffic],
    /// is set to true, this field indicates that inconsistencies in route timings
    /// are predicted using traffic-based travel duration estimates. There may be
    /// insufficient time to complete traffic-adjusted travel, delays, and breaks
    /// between visits, before the first visit, or after the last visit, while
    /// still satisfying the visit and vehicle time windows. For example,
    ///
    /// ```norust
    ///   start_time(previous_visit) + duration(previous_visit) +
    ///   travel_duration(previous_visit, next_visit) > start_time(next_visit)
    /// ```
    ///
    /// Arrival at next_visit will likely happen later than its current
    /// time window due the increased estimate of travel time
    /// `travel_duration(previous_visit, next_visit)` due to traffic. Also, a break
    /// may be forced to overlap with a visit due to an increase in travel time
    /// estimates and visit or break time window restrictions.
    ///
    /// [google.cloud.optimization.v1.OptimizeToursRequest.consider_road_traffic]: crate::model::OptimizeToursRequest::consider_road_traffic
    pub has_traffic_infeasibilities: bool,

    /// The encoded polyline representation of the route.
    /// This field is only populated if
    /// [OptimizeToursRequest.populate_polylines][google.cloud.optimization.v1.OptimizeToursRequest.populate_polylines]
    /// is set to true.
    ///
    /// [google.cloud.optimization.v1.OptimizeToursRequest.populate_polylines]: crate::model::OptimizeToursRequest::populate_polylines
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub route_polyline: std::option::Option<crate::model::shipment_route::EncodedPolyline>,

    /// Breaks scheduled for the vehicle performing this route.
    /// The `breaks` sequence represents time intervals, each starting at the
    /// corresponding `start_time` and lasting `duration` seconds.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub breaks: std::vec::Vec<crate::model::shipment_route::Break>,

    /// Duration, distance and load metrics for this route. The fields of
    /// [AggregatedMetrics][google.cloud.optimization.v1.AggregatedMetrics] are
    /// summed over all
    /// [ShipmentRoute.transitions][google.cloud.optimization.v1.ShipmentRoute.transitions]
    /// or
    /// [ShipmentRoute.visits][google.cloud.optimization.v1.ShipmentRoute.visits],
    /// depending on the context.
    ///
    /// [google.cloud.optimization.v1.AggregatedMetrics]: crate::model::AggregatedMetrics
    /// [google.cloud.optimization.v1.ShipmentRoute.transitions]: crate::model::ShipmentRoute::transitions
    /// [google.cloud.optimization.v1.ShipmentRoute.visits]: crate::model::ShipmentRoute::visits
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub metrics: std::option::Option<crate::model::AggregatedMetrics>,

    /// Cost of the route, broken down by cost-related request fields.
    /// The keys are proto paths, relative to the input OptimizeToursRequest, e.g.
    /// "model.shipments.pickups.cost", and the values are the total cost
    /// generated by the corresponding cost field, aggregated over the whole route.
    /// In other words, costs["model.shipments.pickups.cost"] is the sum of all
    /// pickup costs over the route. All costs defined in the model are reported in
    /// detail here with the exception of costs related to TransitionAttributes
    /// that are only reported in an aggregated way as of 2022/01.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub route_costs: std::collections::HashMap<std::string::String, f64>,

    /// Total cost of the route. The sum of all costs in the cost map.
    pub route_total_cost: f64,

    /// Deprecated: Use
    /// [Transition.vehicle_loads][google.cloud.optimization.v1.ShipmentRoute.Transition.vehicle_loads]
    /// instead. Vehicle loads upon arrival at its end location, for each type
    /// specified in
    /// [Vehicle.capacities][google.cloud.optimization.v1.Vehicle.capacities],
    /// `start_load_intervals`, `end_load_intervals` or demands. Exception: we omit
    /// loads for quantity types unconstrained by intervals and that don't have any
    /// non-zero demand on the route.
    ///
    /// [google.cloud.optimization.v1.ShipmentRoute.Transition.vehicle_loads]: crate::model::shipment_route::Transition::vehicle_loads
    /// [google.cloud.optimization.v1.Vehicle.capacities]: crate::model::Vehicle::capacities
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub end_loads: std::vec::Vec<crate::model::CapacityQuantity>,

    /// Deprecated: Use
    /// [ShipmentRoute.transitions][google.cloud.optimization.v1.ShipmentRoute.transitions]
    /// instead. Ordered list of travel steps for the route.
    ///
    /// [google.cloud.optimization.v1.ShipmentRoute.transitions]: crate::model::ShipmentRoute::transitions
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub travel_steps: std::vec::Vec<crate::model::shipment_route::TravelStep>,

    /// Deprecated: No longer used.
    /// This field will only be populated at the
    /// [ShipmentRoute.Visit][google.cloud.optimization.v1.ShipmentRoute.Visit]
    /// level.
    ///
    /// This field is the extra detour time due to the shipments visited on the
    /// route.
    ///
    /// It is equal to `vehicle_end_time` - `vehicle_start_time` - travel duration
    /// from the vehicle's start_location to its `end_location`.
    ///
    /// [google.cloud.optimization.v1.ShipmentRoute.Visit]: crate::model::shipment_route::Visit
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub vehicle_detour: std::option::Option<wkt::Duration>,

    /// Deprecated: Delay occurring before the vehicle end. See
    /// [TransitionAttributes.delay][google.cloud.optimization.v1.TransitionAttributes.delay].
    ///
    /// [google.cloud.optimization.v1.TransitionAttributes.delay]: crate::model::TransitionAttributes::delay
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub delay_before_vehicle_end: std::option::Option<crate::model::shipment_route::Delay>,
}

impl ShipmentRoute {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [vehicle_index][crate::model::ShipmentRoute::vehicle_index].
    pub fn set_vehicle_index<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.vehicle_index = v.into();
        self
    }

    /// Sets the value of [vehicle_label][crate::model::ShipmentRoute::vehicle_label].
    pub fn set_vehicle_label<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.vehicle_label = v.into();
        self
    }

    /// Sets the value of [vehicle_start_time][crate::model::ShipmentRoute::vehicle_start_time].
    pub fn set_vehicle_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.vehicle_start_time = v.into();
        self
    }

    /// Sets the value of [vehicle_end_time][crate::model::ShipmentRoute::vehicle_end_time].
    pub fn set_vehicle_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.vehicle_end_time = v.into();
        self
    }

    /// Sets the value of [has_traffic_infeasibilities][crate::model::ShipmentRoute::has_traffic_infeasibilities].
    pub fn set_has_traffic_infeasibilities<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.has_traffic_infeasibilities = v.into();
        self
    }

    /// Sets the value of [route_polyline][crate::model::ShipmentRoute::route_polyline].
    pub fn set_route_polyline<
        T: std::convert::Into<std::option::Option<crate::model::shipment_route::EncodedPolyline>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.route_polyline = v.into();
        self
    }

    /// Sets the value of [metrics][crate::model::ShipmentRoute::metrics].
    pub fn set_metrics<
        T: std::convert::Into<std::option::Option<crate::model::AggregatedMetrics>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metrics = v.into();
        self
    }

    /// Sets the value of [route_total_cost][crate::model::ShipmentRoute::route_total_cost].
    pub fn set_route_total_cost<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.route_total_cost = v.into();
        self
    }

    /// Sets the value of [vehicle_detour][crate::model::ShipmentRoute::vehicle_detour].
    pub fn set_vehicle_detour<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.vehicle_detour = v.into();
        self
    }

    /// Sets the value of [delay_before_vehicle_end][crate::model::ShipmentRoute::delay_before_vehicle_end].
    pub fn set_delay_before_vehicle_end<
        T: std::convert::Into<std::option::Option<crate::model::shipment_route::Delay>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.delay_before_vehicle_end = v.into();
        self
    }

    /// Sets the value of [visits][crate::model::ShipmentRoute::visits].
    pub fn set_visits<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::shipment_route::Visit>,
    {
        use std::iter::Iterator;
        self.visits = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [transitions][crate::model::ShipmentRoute::transitions].
    pub fn set_transitions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::shipment_route::Transition>,
    {
        use std::iter::Iterator;
        self.transitions = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [breaks][crate::model::ShipmentRoute::breaks].
    pub fn set_breaks<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::shipment_route::Break>,
    {
        use std::iter::Iterator;
        self.breaks = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [end_loads][crate::model::ShipmentRoute::end_loads].
    pub fn set_end_loads<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CapacityQuantity>,
    {
        use std::iter::Iterator;
        self.end_loads = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [travel_steps][crate::model::ShipmentRoute::travel_steps].
    pub fn set_travel_steps<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::shipment_route::TravelStep>,
    {
        use std::iter::Iterator;
        self.travel_steps = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [route_costs][crate::model::ShipmentRoute::route_costs].
    pub fn set_route_costs<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<f64>,
    {
        use std::iter::Iterator;
        self.route_costs = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for ShipmentRoute {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.ShipmentRoute"
    }
}

/// Defines additional types related to ShipmentRoute
pub mod shipment_route {
    #[allow(unused_imports)]
    use super::*;

    /// Deprecated: Use
    /// [ShipmentRoute.Transition.delay_duration][google.cloud.optimization.v1.ShipmentRoute.Transition.delay_duration]
    /// instead. Time interval spent on the route resulting from a
    /// [TransitionAttributes.delay][google.cloud.optimization.v1.TransitionAttributes.delay].
    ///
    /// [google.cloud.optimization.v1.ShipmentRoute.Transition.delay_duration]: crate::model::shipment_route::Transition::delay_duration
    /// [google.cloud.optimization.v1.TransitionAttributes.delay]: crate::model::TransitionAttributes::delay
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Delay {
        /// Start of the delay.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub start_time: std::option::Option<wkt::Timestamp>,

        /// Duration of the delay.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub duration: std::option::Option<wkt::Duration>,
    }

    impl Delay {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [start_time][crate::model::shipment_route::Delay::start_time].
        pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
            mut self,
            v: T,
        ) -> Self {
            self.start_time = v.into();
            self
        }

        /// Sets the value of [duration][crate::model::shipment_route::Delay::duration].
        pub fn set_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.duration = v.into();
            self
        }
    }

    impl wkt::message::Message for Delay {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.ShipmentRoute.Delay"
        }
    }

    /// A visit performed during a route. This visit corresponds to a pickup or a
    /// delivery of a `Shipment`.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Visit {
        /// Index of the `shipments` field in the source
        /// [ShipmentModel][google.cloud.optimization.v1.ShipmentModel].
        ///
        /// [google.cloud.optimization.v1.ShipmentModel]: crate::model::ShipmentModel
        pub shipment_index: i32,

        /// If true the visit corresponds to a pickup of a `Shipment`. Otherwise, it
        /// corresponds to a delivery.
        pub is_pickup: bool,

        /// Index of `VisitRequest` in either the pickup or delivery field of the
        /// `Shipment` (see `is_pickup`).
        pub visit_request_index: i32,

        /// Time at which the visit starts. Note that the vehicle may arrive earlier
        /// than this at the visit location. Times are consistent with the
        /// `ShipmentModel`.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub start_time: std::option::Option<wkt::Timestamp>,

        /// Total visit load demand as the sum of the shipment and the visit request
        /// `load_demands`. The values are negative if the visit is a delivery.
        /// Demands are reported for the same types as the
        /// [Transition.loads][google.cloud.optimization.v1.ShipmentRoute.Transition]
        /// (see this field).
        ///
        /// [google.cloud.optimization.v1.ShipmentRoute.Transition]: crate::model::shipment_route::Transition
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub load_demands:
            std::collections::HashMap<std::string::String, crate::model::shipment::Load>,

        /// Extra detour time due to the shipments visited on the route before the
        /// visit and to the potential waiting time induced by time windows.
        /// If the visit is a delivery, the detour is computed from the corresponding
        /// pickup visit and is equal to:
        ///
        /// ```norust
        /// start_time(delivery) - start_time(pickup)
        /// - (duration(pickup) + travel duration from the pickup location
        /// to the delivery location).
        /// ```
        ///
        /// Otherwise, it is computed from the vehicle `start_location` and is equal
        /// to:
        ///
        /// ```norust
        /// start_time - vehicle_start_time - travel duration from
        /// the vehicle's `start_location` to the visit.
        /// ```
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub detour: std::option::Option<wkt::Duration>,

        /// Copy of the corresponding `Shipment.label`, if specified in the
        /// `Shipment`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub shipment_label: std::string::String,

        /// Copy of the corresponding
        /// [VisitRequest.label][google.cloud.optimization.v1.Shipment.VisitRequest.label],
        /// if specified in the `VisitRequest`.
        ///
        /// [google.cloud.optimization.v1.Shipment.VisitRequest.label]: crate::model::shipment::VisitRequest::label
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub visit_label: std::string::String,

        /// Deprecated: Use
        /// [Transition.vehicle_loads][google.cloud.optimization.v1.ShipmentRoute.Transition.vehicle_loads]
        /// instead. Vehicle loads upon arrival at the visit location, for each type
        /// specified in
        /// [Vehicle.capacities][google.cloud.optimization.v1.Vehicle.capacities],
        /// `start_load_intervals`, `end_load_intervals` or `demands`.
        ///
        /// Exception: we omit loads for quantity types unconstrained by intervals
        /// and that don't have any non-zero demand on the route.
        ///
        /// [google.cloud.optimization.v1.ShipmentRoute.Transition.vehicle_loads]: crate::model::shipment_route::Transition::vehicle_loads
        /// [google.cloud.optimization.v1.Vehicle.capacities]: crate::model::Vehicle::capacities
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub arrival_loads: std::vec::Vec<crate::model::CapacityQuantity>,

        /// Deprecated: Use
        /// [ShipmentRoute.Transition.delay_duration][google.cloud.optimization.v1.ShipmentRoute.Transition.delay_duration]
        /// instead. Delay occurring before the visit starts.
        ///
        /// [google.cloud.optimization.v1.ShipmentRoute.Transition.delay_duration]: crate::model::shipment_route::Transition::delay_duration
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub delay_before_start: std::option::Option<crate::model::shipment_route::Delay>,

        /// Deprecated: Use
        /// [Visit.load_demands][google.cloud.optimization.v1.ShipmentRoute.Visit.load_demands]
        /// instead.
        ///
        /// [google.cloud.optimization.v1.ShipmentRoute.Visit.load_demands]: crate::model::shipment_route::Visit::load_demands
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub demands: std::vec::Vec<crate::model::CapacityQuantity>,
    }

    impl Visit {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [shipment_index][crate::model::shipment_route::Visit::shipment_index].
        pub fn set_shipment_index<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.shipment_index = v.into();
            self
        }

        /// Sets the value of [is_pickup][crate::model::shipment_route::Visit::is_pickup].
        pub fn set_is_pickup<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.is_pickup = v.into();
            self
        }

        /// Sets the value of [visit_request_index][crate::model::shipment_route::Visit::visit_request_index].
        pub fn set_visit_request_index<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.visit_request_index = v.into();
            self
        }

        /// Sets the value of [start_time][crate::model::shipment_route::Visit::start_time].
        pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
            mut self,
            v: T,
        ) -> Self {
            self.start_time = v.into();
            self
        }

        /// Sets the value of [detour][crate::model::shipment_route::Visit::detour].
        pub fn set_detour<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.detour = v.into();
            self
        }

        /// Sets the value of [shipment_label][crate::model::shipment_route::Visit::shipment_label].
        pub fn set_shipment_label<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.shipment_label = v.into();
            self
        }

        /// Sets the value of [visit_label][crate::model::shipment_route::Visit::visit_label].
        pub fn set_visit_label<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.visit_label = v.into();
            self
        }

        /// Sets the value of [delay_before_start][crate::model::shipment_route::Visit::delay_before_start].
        pub fn set_delay_before_start<
            T: std::convert::Into<std::option::Option<crate::model::shipment_route::Delay>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.delay_before_start = v.into();
            self
        }

        /// Sets the value of [arrival_loads][crate::model::shipment_route::Visit::arrival_loads].
        pub fn set_arrival_loads<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::CapacityQuantity>,
        {
            use std::iter::Iterator;
            self.arrival_loads = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [demands][crate::model::shipment_route::Visit::demands].
        pub fn set_demands<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::CapacityQuantity>,
        {
            use std::iter::Iterator;
            self.demands = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [load_demands][crate::model::shipment_route::Visit::load_demands].
        pub fn set_load_demands<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<crate::model::shipment::Load>,
        {
            use std::iter::Iterator;
            self.load_demands = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl wkt::message::Message for Visit {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.ShipmentRoute.Visit"
        }
    }

    /// Transition between two events on the route. See the description of
    /// [ShipmentRoute][google.cloud.optimization.v1.ShipmentRoute].
    ///
    /// If the vehicle does not have a `start_location` and/or `end_location`, the
    /// corresponding travel metrics are 0.
    ///
    /// [google.cloud.optimization.v1.ShipmentRoute]: crate::model::ShipmentRoute
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Transition {
        /// Travel duration during this transition.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub travel_duration: std::option::Option<wkt::Duration>,

        /// Distance traveled during the transition.
        pub travel_distance_meters: f64,

        /// When traffic is requested via
        /// [OptimizeToursRequest.consider_road_traffic]
        /// [google.cloud.optimization.v1.OptimizeToursRequest.consider_road_traffic],
        /// and the traffic info couldn't be retrieved for a `Transition`, this
        /// boolean is set to true. This may be temporary (rare hiccup in the
        /// realtime traffic servers) or permanent (no data for this location).
        pub traffic_info_unavailable: bool,

        /// Sum of the delay durations applied to this transition. If any, the delay
        /// starts exactly `delay_duration` seconds before the next event (visit or
        /// vehicle end). See
        /// [TransitionAttributes.delay][google.cloud.optimization.v1.TransitionAttributes.delay].
        ///
        /// [google.cloud.optimization.v1.TransitionAttributes.delay]: crate::model::TransitionAttributes::delay
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub delay_duration: std::option::Option<wkt::Duration>,

        /// Sum of the duration of the breaks occurring during this transition, if
        /// any. Details about each break's start time and duration are stored in
        /// [ShipmentRoute.breaks][google.cloud.optimization.v1.ShipmentRoute.breaks].
        ///
        /// [google.cloud.optimization.v1.ShipmentRoute.breaks]: crate::model::ShipmentRoute::breaks
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub break_duration: std::option::Option<wkt::Duration>,

        /// Time spent waiting during this transition. Wait duration corresponds to
        /// idle time and does not include break time. Also note that this wait time
        /// may be split into several non-contiguous intervals.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub wait_duration: std::option::Option<wkt::Duration>,

        /// Total duration of the transition, provided for convenience. It is equal
        /// to:
        ///
        /// * next visit `start_time` (or `vehicle_end_time` if this is the last
        ///   transition) - this transition's `start_time`;
        /// * if `ShipmentRoute.has_traffic_infeasibilities` is false, the following
        ///   additionally holds: `total_duration = travel_duration + delay_duration
        ///
        /// + break_duration + wait_duration`.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub total_duration: std::option::Option<wkt::Duration>,

        /// Start time of this transition.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub start_time: std::option::Option<wkt::Timestamp>,

        /// The encoded polyline representation of the route followed during the
        /// transition.
        /// This field is only populated if [populate_transition_polylines]
        /// [google.cloud.optimization.v1.OptimizeToursRequest.populate_transition_polylines]
        /// is set to true.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub route_polyline: std::option::Option<crate::model::shipment_route::EncodedPolyline>,

        /// Vehicle loads during this transition, for each type that either appears
        /// in this vehicle's
        /// [Vehicle.load_limits][google.cloud.optimization.v1.Vehicle.load_limits],
        /// or that have non-zero
        /// [Shipment.load_demands][google.cloud.optimization.v1.Shipment.load_demands]
        /// on some shipment performed on this route.
        ///
        /// The loads during the first transition are the starting loads of the
        /// vehicle route. Then, after each visit, the visit's `load_demands` are
        /// either added or subtracted to get the next transition's loads, depending
        /// on whether the visit was a pickup or a delivery.
        ///
        /// [google.cloud.optimization.v1.Shipment.load_demands]: crate::model::Shipment::load_demands
        /// [google.cloud.optimization.v1.Vehicle.load_limits]: crate::model::Vehicle::load_limits
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub vehicle_loads: std::collections::HashMap<
            std::string::String,
            crate::model::shipment_route::VehicleLoad,
        >,

        /// Deprecated: Use
        /// [Transition.vehicle_loads][google.cloud.optimization.v1.ShipmentRoute.Transition.vehicle_loads]
        /// instead.
        ///
        /// [google.cloud.optimization.v1.ShipmentRoute.Transition.vehicle_loads]: crate::model::shipment_route::Transition::vehicle_loads
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub loads: std::vec::Vec<crate::model::CapacityQuantity>,
    }

    impl Transition {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [travel_duration][crate::model::shipment_route::Transition::travel_duration].
        pub fn set_travel_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.travel_duration = v.into();
            self
        }

        /// Sets the value of [travel_distance_meters][crate::model::shipment_route::Transition::travel_distance_meters].
        pub fn set_travel_distance_meters<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.travel_distance_meters = v.into();
            self
        }

        /// Sets the value of [traffic_info_unavailable][crate::model::shipment_route::Transition::traffic_info_unavailable].
        pub fn set_traffic_info_unavailable<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.traffic_info_unavailable = v.into();
            self
        }

        /// Sets the value of [delay_duration][crate::model::shipment_route::Transition::delay_duration].
        pub fn set_delay_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.delay_duration = v.into();
            self
        }

        /// Sets the value of [break_duration][crate::model::shipment_route::Transition::break_duration].
        pub fn set_break_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.break_duration = v.into();
            self
        }

        /// Sets the value of [wait_duration][crate::model::shipment_route::Transition::wait_duration].
        pub fn set_wait_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.wait_duration = v.into();
            self
        }

        /// Sets the value of [total_duration][crate::model::shipment_route::Transition::total_duration].
        pub fn set_total_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.total_duration = v.into();
            self
        }

        /// Sets the value of [start_time][crate::model::shipment_route::Transition::start_time].
        pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
            mut self,
            v: T,
        ) -> Self {
            self.start_time = v.into();
            self
        }

        /// Sets the value of [route_polyline][crate::model::shipment_route::Transition::route_polyline].
        pub fn set_route_polyline<
            T: std::convert::Into<std::option::Option<crate::model::shipment_route::EncodedPolyline>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.route_polyline = v.into();
            self
        }

        /// Sets the value of [loads][crate::model::shipment_route::Transition::loads].
        pub fn set_loads<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::CapacityQuantity>,
        {
            use std::iter::Iterator;
            self.loads = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [vehicle_loads][crate::model::shipment_route::Transition::vehicle_loads].
        pub fn set_vehicle_loads<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<crate::model::shipment_route::VehicleLoad>,
        {
            use std::iter::Iterator;
            self.vehicle_loads = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl wkt::message::Message for Transition {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.ShipmentRoute.Transition"
        }
    }

    /// Reports the actual load of the vehicle at some point along the route,
    /// for a given type (see
    /// [Transition.vehicle_loads][google.cloud.optimization.v1.ShipmentRoute.Transition.vehicle_loads]).
    ///
    /// [google.cloud.optimization.v1.ShipmentRoute.Transition.vehicle_loads]: crate::model::shipment_route::Transition::vehicle_loads
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct VehicleLoad {
        /// The amount of load on the vehicle, for the given type. The unit of load
        /// is usually indicated by the type. See
        /// [Transition.vehicle_loads][google.cloud.optimization.v1.ShipmentRoute.Transition.vehicle_loads].
        ///
        /// [google.cloud.optimization.v1.ShipmentRoute.Transition.vehicle_loads]: crate::model::shipment_route::Transition::vehicle_loads
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub amount: i64,
    }

    impl VehicleLoad {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [amount][crate::model::shipment_route::VehicleLoad::amount].
        pub fn set_amount<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.amount = v.into();
            self
        }
    }

    impl wkt::message::Message for VehicleLoad {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.ShipmentRoute.VehicleLoad"
        }
    }

    /// The encoded representation of a polyline. More information on polyline
    /// encoding can be found here:
    /// <https://developers.google.com/maps/documentation/utilities/polylinealgorithm>
    /// <https://developers.google.com/maps/documentation/javascript/reference/geometry#encoding>.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct EncodedPolyline {
        /// String representing encoded points of the polyline.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub points: std::string::String,
    }

    impl EncodedPolyline {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [points][crate::model::shipment_route::EncodedPolyline::points].
        pub fn set_points<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.points = v.into();
            self
        }
    }

    impl wkt::message::Message for EncodedPolyline {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.ShipmentRoute.EncodedPolyline"
        }
    }

    /// Data representing the execution of a break.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Break {
        /// Start time of a break.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub start_time: std::option::Option<wkt::Timestamp>,

        /// Duration of a break.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub duration: std::option::Option<wkt::Duration>,
    }

    impl Break {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [start_time][crate::model::shipment_route::Break::start_time].
        pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
            mut self,
            v: T,
        ) -> Self {
            self.start_time = v.into();
            self
        }

        /// Sets the value of [duration][crate::model::shipment_route::Break::duration].
        pub fn set_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.duration = v.into();
            self
        }
    }

    impl wkt::message::Message for Break {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.ShipmentRoute.Break"
        }
    }

    /// Deprecated: Use
    /// [ShipmentRoute.Transition][google.cloud.optimization.v1.ShipmentRoute.Transition]
    /// instead. Travel between each visit along the route: from the vehicle's
    /// `start_location` to the first visit's `arrival_location`, then from the
    /// first visit's `departure_location` to the second visit's
    /// `arrival_location`, and so on until the vehicle's `end_location`. This
    /// accounts only for the actual travel between visits, not counting the
    /// waiting time, the time spent performing a visit, nor the distance covered
    /// during a visit.
    ///
    /// Invariant: `travel_steps_size() == visits_size() + 1`.
    ///
    /// If the vehicle does not have a start_ and/or end_location, the
    /// corresponding travel metrics are 0 and/or empty.
    ///
    /// [google.cloud.optimization.v1.ShipmentRoute.Transition]: crate::model::shipment_route::Transition
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct TravelStep {
        /// Duration of the travel step.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub duration: std::option::Option<wkt::Duration>,

        /// Distance traveled during the step.
        pub distance_meters: f64,

        /// When traffic is requested via
        /// [OptimizeToursRequest.consider_road_traffic][google.cloud.optimization.v1.OptimizeToursRequest.consider_road_traffic],
        /// and the traffic info couldn't be retrieved for a TravelStep, this boolean
        /// is set to true. This may be temporary (rare hiccup in the realtime
        /// traffic servers) or permanent (no data for this location).
        ///
        /// [google.cloud.optimization.v1.OptimizeToursRequest.consider_road_traffic]: crate::model::OptimizeToursRequest::consider_road_traffic
        pub traffic_info_unavailable: bool,

        /// The encoded polyline representation of the route followed during the
        /// step.
        ///
        /// This field is only populated if
        /// [OptimizeToursRequest.populate_travel_step_polylines][google.cloud.optimization.v1.OptimizeToursRequest.populate_travel_step_polylines]
        /// is set to true.
        ///
        /// [google.cloud.optimization.v1.OptimizeToursRequest.populate_travel_step_polylines]: crate::model::OptimizeToursRequest::populate_travel_step_polylines
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub route_polyline: std::option::Option<crate::model::shipment_route::EncodedPolyline>,
    }

    impl TravelStep {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [duration][crate::model::shipment_route::TravelStep::duration].
        pub fn set_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.duration = v.into();
            self
        }

        /// Sets the value of [distance_meters][crate::model::shipment_route::TravelStep::distance_meters].
        pub fn set_distance_meters<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
            self.distance_meters = v.into();
            self
        }

        /// Sets the value of [traffic_info_unavailable][crate::model::shipment_route::TravelStep::traffic_info_unavailable].
        pub fn set_traffic_info_unavailable<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.traffic_info_unavailable = v.into();
            self
        }

        /// Sets the value of [route_polyline][crate::model::shipment_route::TravelStep::route_polyline].
        pub fn set_route_polyline<
            T: std::convert::Into<std::option::Option<crate::model::shipment_route::EncodedPolyline>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.route_polyline = v.into();
            self
        }
    }

    impl wkt::message::Message for TravelStep {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.ShipmentRoute.TravelStep"
        }
    }
}

/// Specifies details of unperformed shipments in a solution. For trivial cases
/// and/or if we are able to identify the cause for skipping, we report the
/// reason here.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SkippedShipment {
    /// The index corresponds to the index of the shipment in the source
    /// `ShipmentModel`.
    pub index: i32,

    /// Copy of the corresponding
    /// [Shipment.label][google.cloud.optimization.v1.Shipment.label], if specified
    /// in the `Shipment`.
    ///
    /// [google.cloud.optimization.v1.Shipment.label]: crate::model::Shipment::label
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub label: std::string::String,

    /// A list of reasons that explain why the shipment was skipped. See comment
    /// above `Reason`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub reasons: std::vec::Vec<crate::model::skipped_shipment::Reason>,
}

impl SkippedShipment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [index][crate::model::SkippedShipment::index].
    pub fn set_index<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.index = v.into();
        self
    }

    /// Sets the value of [label][crate::model::SkippedShipment::label].
    pub fn set_label<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.label = v.into();
        self
    }

    /// Sets the value of [reasons][crate::model::SkippedShipment::reasons].
    pub fn set_reasons<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::skipped_shipment::Reason>,
    {
        use std::iter::Iterator;
        self.reasons = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SkippedShipment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.SkippedShipment"
    }
}

/// Defines additional types related to SkippedShipment
pub mod skipped_shipment {
    #[allow(unused_imports)]
    use super::*;

    /// If we can explain why the shipment was skipped, reasons will be listed
    /// here. If the reason is not the same for all vehicles, `reason` will have
    /// more than 1 element. A skipped shipment cannot have duplicate reasons,
    /// i.e. where all fields are the same except for `example_vehicle_index`.
    /// Example:
    ///
    /// ```norust
    /// reasons {
    ///   code: DEMAND_EXCEEDS_VEHICLE_CAPACITY
    ///   example_vehicle_index: 1
    ///   example_exceeded_capacity_type: "Apples"
    /// }
    /// reasons {
    ///   code: DEMAND_EXCEEDS_VEHICLE_CAPACITY
    ///   example_vehicle_index: 3
    ///   example_exceeded_capacity_type: "Pears"
    /// }
    /// reasons {
    ///   code: CANNOT_BE_PERFORMED_WITHIN_VEHICLE_DISTANCE_LIMIT
    ///   example_vehicle_index: 1
    /// }
    /// ```
    ///
    /// The skipped shipment is incompatible with all vehicles. The reasons may
    /// be different for all vehicles but at least one vehicle's "Apples"
    /// capacity would be exceeded (including vehicle 1), at least one vehicle's
    /// "Pears" capacity would be exceeded (including vehicle 3) and at least one
    /// vehicle's distance limit would be exceeded (including vehicle 1).
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Reason {
        /// Refer to the comments of Code.
        pub code: crate::model::skipped_shipment::reason::Code,

        /// If the reason is related to a shipment-vehicle incompatibility, this
        /// field provides the index of one relevant vehicle.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub example_vehicle_index: std::option::Option<i32>,

        /// If the reason code is `DEMAND_EXCEEDS_VEHICLE_CAPACITY`, documents one
        /// capacity type that is exceeded.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub example_exceeded_capacity_type: std::string::String,
    }

    impl Reason {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [code][crate::model::skipped_shipment::Reason::code].
        pub fn set_code<T: std::convert::Into<crate::model::skipped_shipment::reason::Code>>(
            mut self,
            v: T,
        ) -> Self {
            self.code = v.into();
            self
        }

        /// Sets the value of [example_vehicle_index][crate::model::skipped_shipment::Reason::example_vehicle_index].
        pub fn set_example_vehicle_index<T: std::convert::Into<std::option::Option<i32>>>(
            mut self,
            v: T,
        ) -> Self {
            self.example_vehicle_index = v.into();
            self
        }

        /// Sets the value of [example_exceeded_capacity_type][crate::model::skipped_shipment::Reason::example_exceeded_capacity_type].
        pub fn set_example_exceeded_capacity_type<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.example_exceeded_capacity_type = v.into();
            self
        }
    }

    impl wkt::message::Message for Reason {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.SkippedShipment.Reason"
        }
    }

    /// Defines additional types related to Reason
    pub mod reason {
        #[allow(unused_imports)]
        use super::*;

        /// Code identifying the reason type. The order here is meaningless. In
        /// particular, it gives no indication of whether a given reason will
        /// appear before another in the solution, if both apply.
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct Code(std::borrow::Cow<'static, str>);

        impl Code {
            /// Creates a new Code instance.
            pub const fn new(v: &'static str) -> Self {
                Self(std::borrow::Cow::Borrowed(v))
            }

            /// Gets the enum value.
            pub fn value(&self) -> &str {
                &self.0
            }
        }

        /// Useful constants to work with [Code](Code)
        pub mod code {
            use super::Code;

            /// This should never be used. If we are unable to understand why a
            /// shipment was skipped, we simply return an empty set of reasons.
            pub const CODE_UNSPECIFIED: Code = Code::new("CODE_UNSPECIFIED");

            /// There is no vehicle in the model making all shipments infeasible.
            pub const NO_VEHICLE: Code = Code::new("NO_VEHICLE");

            /// The demand of the shipment exceeds a vehicle's capacity for some
            /// capacity types, one of which is `example_exceeded_capacity_type`.
            pub const DEMAND_EXCEEDS_VEHICLE_CAPACITY: Code =
                Code::new("DEMAND_EXCEEDS_VEHICLE_CAPACITY");

            /// The minimum distance necessary to perform this shipment, i.e. from
            /// the vehicle's `start_location` to the shipment's pickup and/or delivery
            /// locations and to the vehicle's end location exceeds the vehicle's
            /// `route_distance_limit`.
            ///
            /// Note that for this computation we use the geodesic distances.
            pub const CANNOT_BE_PERFORMED_WITHIN_VEHICLE_DISTANCE_LIMIT: Code =
                Code::new("CANNOT_BE_PERFORMED_WITHIN_VEHICLE_DISTANCE_LIMIT");

            /// The minimum time necessary to perform this shipment, including travel
            /// time, wait time and service time exceeds the vehicle's
            /// `route_duration_limit`.
            ///
            /// Note: travel time is computed in the best-case scenario, namely as
            /// geodesic distance x 36 m/s (roughly 130 km/hour).
            pub const CANNOT_BE_PERFORMED_WITHIN_VEHICLE_DURATION_LIMIT: Code =
                Code::new("CANNOT_BE_PERFORMED_WITHIN_VEHICLE_DURATION_LIMIT");

            /// Same as above but we only compare minimum travel time and the
            /// vehicle's `travel_duration_limit`.
            pub const CANNOT_BE_PERFORMED_WITHIN_VEHICLE_TRAVEL_DURATION_LIMIT: Code =
                Code::new("CANNOT_BE_PERFORMED_WITHIN_VEHICLE_TRAVEL_DURATION_LIMIT");

            /// The vehicle cannot perform this shipment in the best-case scenario
            /// (see `CANNOT_BE_PERFORMED_WITHIN_VEHICLE_DURATION_LIMIT` for time
            /// computation) if it starts at its earliest start time: the total time
            /// would make the vehicle end after its latest end time.
            pub const CANNOT_BE_PERFORMED_WITHIN_VEHICLE_TIME_WINDOWS: Code =
                Code::new("CANNOT_BE_PERFORMED_WITHIN_VEHICLE_TIME_WINDOWS");

            /// The `allowed_vehicle_indices` field of the shipment is not empty and
            /// this vehicle does not belong to it.
            pub const VEHICLE_NOT_ALLOWED: Code = Code::new("VEHICLE_NOT_ALLOWED");
        }

        impl std::convert::From<std::string::String> for Code {
            fn from(value: std::string::String) -> Self {
                Self(std::borrow::Cow::Owned(value))
            }
        }
    }
}

/// Aggregated metrics for
/// [ShipmentRoute][google.cloud.optimization.v1.ShipmentRoute] (resp. for
/// [OptimizeToursResponse][google.cloud.optimization.v1.OptimizeToursResponse]
/// over all [Transition][google.cloud.optimization.v1.ShipmentRoute.Transition]
/// and/or [Visit][google.cloud.optimization.v1.ShipmentRoute.Visit] (resp. over
/// all [ShipmentRoute][google.cloud.optimization.v1.ShipmentRoute]) elements.
///
/// [google.cloud.optimization.v1.OptimizeToursResponse]: crate::model::OptimizeToursResponse
/// [google.cloud.optimization.v1.ShipmentRoute]: crate::model::ShipmentRoute
/// [google.cloud.optimization.v1.ShipmentRoute.Transition]: crate::model::shipment_route::Transition
/// [google.cloud.optimization.v1.ShipmentRoute.Visit]: crate::model::shipment_route::Visit
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AggregatedMetrics {
    /// Number of shipments performed. Note that a pickup and delivery pair only
    /// counts once.
    pub performed_shipment_count: i32,

    /// Total travel duration for a route or a solution.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub travel_duration: std::option::Option<wkt::Duration>,

    /// Total wait duration for a route or a solution.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub wait_duration: std::option::Option<wkt::Duration>,

    /// Total delay duration for a route or a solution.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub delay_duration: std::option::Option<wkt::Duration>,

    /// Total break duration for a route or a solution.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub break_duration: std::option::Option<wkt::Duration>,

    /// Total visit duration for a route or a solution.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub visit_duration: std::option::Option<wkt::Duration>,

    /// The total duration should be equal to the sum of all durations above.
    /// For routes, it also corresponds to:
    /// [ShipmentRoute.vehicle_end_time][google.cloud.optimization.v1.ShipmentRoute.vehicle_end_time]
    /// `-`
    /// [ShipmentRoute.vehicle_start_time][google.cloud.optimization.v1.ShipmentRoute.vehicle_start_time]
    ///
    /// [google.cloud.optimization.v1.ShipmentRoute.vehicle_end_time]: crate::model::ShipmentRoute::vehicle_end_time
    /// [google.cloud.optimization.v1.ShipmentRoute.vehicle_start_time]: crate::model::ShipmentRoute::vehicle_start_time
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub total_duration: std::option::Option<wkt::Duration>,

    /// Total travel distance for a route or a solution.
    pub travel_distance_meters: f64,

    /// Maximum load achieved over the entire route (resp. solution), for each of
    /// the quantities on this route (resp. solution), computed as the maximum over
    /// all
    /// [Transition.vehicle_loads][google.cloud.optimization.v1.ShipmentRoute.Transition.vehicle_loads]
    /// (resp.
    /// [ShipmentRoute.metrics.max_loads][google.cloud.optimization.v1.AggregatedMetrics.max_loads].
    ///
    /// [google.cloud.optimization.v1.AggregatedMetrics.max_loads]: crate::model::AggregatedMetrics::max_loads
    /// [google.cloud.optimization.v1.ShipmentRoute.Transition.vehicle_loads]: crate::model::shipment_route::Transition::vehicle_loads
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub max_loads:
        std::collections::HashMap<std::string::String, crate::model::shipment_route::VehicleLoad>,

    /// Deprecated: Use
    /// [ShipmentRoute.route_costs][google.cloud.optimization.v1.ShipmentRoute.route_costs]
    /// and
    /// [OptimizeToursResponse.Metrics.costs][google.cloud.optimization.v1.OptimizeToursResponse.Metrics.costs]
    /// instead.
    ///
    /// [google.cloud.optimization.v1.OptimizeToursResponse.Metrics.costs]: crate::model::optimize_tours_response::Metrics::costs
    /// [google.cloud.optimization.v1.ShipmentRoute.route_costs]: crate::model::ShipmentRoute::route_costs
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub costs: std::collections::HashMap<std::string::String, f64>,

    /// Deprecated: Use
    /// [ShipmentRoute.route_total_cost][google.cloud.optimization.v1.ShipmentRoute.route_total_cost]
    /// and
    /// [OptimizeToursResponse.Metrics.total_cost][google.cloud.optimization.v1.OptimizeToursResponse.Metrics.total_cost]
    /// instead.
    ///
    /// [google.cloud.optimization.v1.OptimizeToursResponse.Metrics.total_cost]: crate::model::optimize_tours_response::Metrics::total_cost
    /// [google.cloud.optimization.v1.ShipmentRoute.route_total_cost]: crate::model::ShipmentRoute::route_total_cost
    pub total_cost: f64,
}

impl AggregatedMetrics {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [performed_shipment_count][crate::model::AggregatedMetrics::performed_shipment_count].
    pub fn set_performed_shipment_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.performed_shipment_count = v.into();
        self
    }

    /// Sets the value of [travel_duration][crate::model::AggregatedMetrics::travel_duration].
    pub fn set_travel_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.travel_duration = v.into();
        self
    }

    /// Sets the value of [wait_duration][crate::model::AggregatedMetrics::wait_duration].
    pub fn set_wait_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.wait_duration = v.into();
        self
    }

    /// Sets the value of [delay_duration][crate::model::AggregatedMetrics::delay_duration].
    pub fn set_delay_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.delay_duration = v.into();
        self
    }

    /// Sets the value of [break_duration][crate::model::AggregatedMetrics::break_duration].
    pub fn set_break_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.break_duration = v.into();
        self
    }

    /// Sets the value of [visit_duration][crate::model::AggregatedMetrics::visit_duration].
    pub fn set_visit_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.visit_duration = v.into();
        self
    }

    /// Sets the value of [total_duration][crate::model::AggregatedMetrics::total_duration].
    pub fn set_total_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.total_duration = v.into();
        self
    }

    /// Sets the value of [travel_distance_meters][crate::model::AggregatedMetrics::travel_distance_meters].
    pub fn set_travel_distance_meters<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.travel_distance_meters = v.into();
        self
    }

    /// Sets the value of [total_cost][crate::model::AggregatedMetrics::total_cost].
    pub fn set_total_cost<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.total_cost = v.into();
        self
    }

    /// Sets the value of [max_loads][crate::model::AggregatedMetrics::max_loads].
    pub fn set_max_loads<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::shipment_route::VehicleLoad>,
    {
        use std::iter::Iterator;
        self.max_loads = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [costs][crate::model::AggregatedMetrics::costs].
    pub fn set_costs<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<f64>,
    {
        use std::iter::Iterator;
        self.costs = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for AggregatedMetrics {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.AggregatedMetrics"
    }
}

/// Solution injected in the request including information about which visits
/// must be constrained and how they must be constrained.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InjectedSolutionConstraint {
    /// Routes of the solution to inject. Some routes may be omitted from the
    /// original solution. The routes and skipped shipments must satisfy the basic
    /// validity assumptions listed for `injected_first_solution_routes`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub routes: std::vec::Vec<crate::model::ShipmentRoute>,

    /// Skipped shipments of the solution to inject. Some may be omitted from the
    /// original solution. See the `routes` field.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub skipped_shipments: std::vec::Vec<crate::model::SkippedShipment>,

    /// For zero or more groups of vehicles, specifies when and how much to relax
    /// constraints. If this field is empty, all non-empty vehicle routes are
    /// fully constrained.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub constraint_relaxations:
        std::vec::Vec<crate::model::injected_solution_constraint::ConstraintRelaxation>,
}

impl InjectedSolutionConstraint {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [routes][crate::model::InjectedSolutionConstraint::routes].
    pub fn set_routes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ShipmentRoute>,
    {
        use std::iter::Iterator;
        self.routes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [skipped_shipments][crate::model::InjectedSolutionConstraint::skipped_shipments].
    pub fn set_skipped_shipments<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SkippedShipment>,
    {
        use std::iter::Iterator;
        self.skipped_shipments = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [constraint_relaxations][crate::model::InjectedSolutionConstraint::constraint_relaxations].
    pub fn set_constraint_relaxations<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::injected_solution_constraint::ConstraintRelaxation>,
    {
        use std::iter::Iterator;
        self.constraint_relaxations = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for InjectedSolutionConstraint {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.InjectedSolutionConstraint"
    }
}

/// Defines additional types related to InjectedSolutionConstraint
pub mod injected_solution_constraint {
    #[allow(unused_imports)]
    use super::*;

    /// For a group of vehicles, specifies at what threshold(s) constraints on
    /// visits will be relaxed and to which level. Shipments listed in
    /// the `skipped_shipment` field are constrained to be skipped; i.e., they
    /// cannot be performed.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ConstraintRelaxation {
        /// All the visit constraint relaxations that will apply to visits on
        /// routes with vehicles in `vehicle_indices`.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub relaxations: std::vec::Vec<
            crate::model::injected_solution_constraint::constraint_relaxation::Relaxation,
        >,

        /// Specifies the vehicle indices to which the visit constraint
        /// `relaxations` apply. If empty, this is considered the default and the
        /// `relaxations` apply to all vehicles that are not specified in other
        /// `constraint_relaxations`. There can be at most one default, i.e., at
        /// most one constraint relaxation field is allowed empty
        /// `vehicle_indices`. A vehicle index can only be listed once, even within
        /// several `constraint_relaxations`.
        ///
        /// A vehicle index is mapped the same as
        /// [ShipmentRoute.vehicle_index][google.cloud.optimization.v1.ShipmentRoute.vehicle_index],
        /// if `interpret_injected_solutions_using_labels` is true (see `fields`
        /// comment).
        ///
        /// [google.cloud.optimization.v1.ShipmentRoute.vehicle_index]: crate::model::ShipmentRoute::vehicle_index
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub vehicle_indices: std::vec::Vec<i32>,
    }

    impl ConstraintRelaxation {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [relaxations][crate::model::injected_solution_constraint::ConstraintRelaxation::relaxations].
        pub fn set_relaxations<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<
                crate::model::injected_solution_constraint::constraint_relaxation::Relaxation,
            >,
        {
            use std::iter::Iterator;
            self.relaxations = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [vehicle_indices][crate::model::injected_solution_constraint::ConstraintRelaxation::vehicle_indices].
        pub fn set_vehicle_indices<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<i32>,
        {
            use std::iter::Iterator;
            self.vehicle_indices = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for ConstraintRelaxation {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.InjectedSolutionConstraint.ConstraintRelaxation"
        }
    }

    /// Defines additional types related to ConstraintRelaxation
    pub mod constraint_relaxation {
        #[allow(unused_imports)]
        use super::*;

        /// If `relaxations` is empty, the start time and sequence of all visits
        /// on `routes` are fully constrained and no new visits may be inserted or
        /// added to those routes. Also, a vehicle's start and end time in
        /// `routes` is fully constrained, unless the vehicle is empty (i.e., has no
        /// visits and has `used_if_route_is_empty` set to false in the model).
        ///
        /// `relaxations(i).level` specifies the constraint relaxation level applied
        /// to a visit #j that satisfies:
        ///
        /// * `route.visits(j).start_time >= relaxations(i).threshold_time` AND
        /// * `j + 1 >= relaxations(i).threshold_visit_count`
        ///
        /// Similarly, the vehicle start is relaxed to `relaxations(i).level` if it
        /// satisfies:
        ///
        /// * `vehicle_start_time >= relaxations(i).threshold_time` AND
        /// * `relaxations(i).threshold_visit_count == 0`
        ///   and the vehicle end is relaxed to `relaxations(i).level` if it satisfies:
        /// * `vehicle_end_time >= relaxations(i).threshold_time` AND
        /// * `route.visits_size() + 1 >= relaxations(i).threshold_visit_count`
        ///
        /// To apply a relaxation level if a visit meets the `threshold_visit_count`
        /// OR the `threshold_time` add two `relaxations` with the same `level`:
        /// one with only `threshold_visit_count` set and the other with only
        /// `threshold_time` set. If a visit satisfies the conditions of multiple
        /// `relaxations`, the most relaxed level applies. As a result, from the
        /// vehicle start through the route visits in order to the vehicle end, the
        /// relaxation level becomes more relaxed: i.e., the relaxation level is
        /// non-decreasing as the route progresses.
        ///
        /// The timing and sequence of route visits that do not satisfy the
        /// threshold conditions of any `relaxations` are fully constrained
        /// and no visits may be inserted into these sequences. Also, if a
        /// vehicle start or end does not satisfy the conditions of any
        /// relaxation the time is fixed, unless the vehicle is empty.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Relaxation {

            /// The constraint relaxation level that applies when the conditions
            /// at or after `threshold_time` AND at least `threshold_visit_count` are
            /// satisfied.
            pub level: crate::model::injected_solution_constraint::constraint_relaxation::relaxation::Level,

            /// The time at or after which the relaxation `level` may be applied.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub threshold_time: std::option::Option<wkt::Timestamp>,

            /// The number of visits at or after which the relaxation `level` may be
            /// applied. If `threshold_visit_count` is 0 (or unset), the `level` may be
            /// applied directly at the vehicle start.
            ///
            /// If it is `route.visits_size() + 1`, the `level` may only be applied to
            /// the vehicle end. If it is more than `route.visits_size() + 1`,
            /// `level` is not applied at all for that route.
            pub threshold_visit_count: i32,
        }

        impl Relaxation {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [level][crate::model::injected_solution_constraint::constraint_relaxation::Relaxation::level].
            pub fn set_level<T: std::convert::Into<crate::model::injected_solution_constraint::constraint_relaxation::relaxation::Level>>(mut self, v: T) -> Self{
                self.level = v.into();
                self
            }

            /// Sets the value of [threshold_time][crate::model::injected_solution_constraint::constraint_relaxation::Relaxation::threshold_time].
            pub fn set_threshold_time<
                T: std::convert::Into<std::option::Option<wkt::Timestamp>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.threshold_time = v.into();
                self
            }

            /// Sets the value of [threshold_visit_count][crate::model::injected_solution_constraint::constraint_relaxation::Relaxation::threshold_visit_count].
            pub fn set_threshold_visit_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
                self.threshold_visit_count = v.into();
                self
            }
        }

        impl wkt::message::Message for Relaxation {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.optimization.v1.InjectedSolutionConstraint.ConstraintRelaxation.Relaxation"
            }
        }

        /// Defines additional types related to Relaxation
        pub mod relaxation {
            #[allow(unused_imports)]
            use super::*;

            /// Expresses the different constraint relaxation levels, which are
            /// applied for a visit and those that follow when it satisfies the
            /// threshold conditions.
            ///
            /// The enumeration below is in order of increasing relaxation.
            #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
            pub struct Level(std::borrow::Cow<'static, str>);

            impl Level {
                /// Creates a new Level instance.
                pub const fn new(v: &'static str) -> Self {
                    Self(std::borrow::Cow::Borrowed(v))
                }

                /// Gets the enum value.
                pub fn value(&self) -> &str {
                    &self.0
                }
            }

            /// Useful constants to work with [Level](Level)
            pub mod level {
                use super::Level;

                /// Implicit default relaxation level: no constraints are relaxed,
                /// i.e., all visits are fully constrained.
                ///
                /// This value must not be explicitly used in `level`.
                pub const LEVEL_UNSPECIFIED: Level = Level::new("LEVEL_UNSPECIFIED");

                /// Visit start times and vehicle start/end times will be relaxed, but
                /// each visit remains bound to the same vehicle and the visit sequence
                /// must be observed: no visit can be inserted between them or before
                /// them.
                pub const RELAX_VISIT_TIMES_AFTER_THRESHOLD: Level =
                    Level::new("RELAX_VISIT_TIMES_AFTER_THRESHOLD");

                /// Same as `RELAX_VISIT_TIMES_AFTER_THRESHOLD`, but the visit sequence
                /// is also relaxed: visits can only be performed by this vehicle, but
                /// can potentially become unperformed.
                pub const RELAX_VISIT_TIMES_AND_SEQUENCE_AFTER_THRESHOLD: Level =
                    Level::new("RELAX_VISIT_TIMES_AND_SEQUENCE_AFTER_THRESHOLD");

                /// Same as `RELAX_VISIT_TIMES_AND_SEQUENCE_AFTER_THRESHOLD`, but the
                /// vehicle is also relaxed: visits are completely free at or after the
                /// threshold time and can potentially become unperformed.
                pub const RELAX_ALL_AFTER_THRESHOLD: Level =
                    Level::new("RELAX_ALL_AFTER_THRESHOLD");
            }

            impl std::convert::From<std::string::String> for Level {
                fn from(value: std::string::String) -> Self {
                    Self(std::borrow::Cow::Owned(value))
                }
            }
        }
    }
}

/// Describes an error encountered when validating an `OptimizeToursRequest`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OptimizeToursValidationError {
    /// A validation error is defined by the pair (`code`, `display_name`) which
    /// are always present.
    ///
    /// Other fields (below) provide more context about the error.
    ///
    /// *MULTIPLE ERRORS*:
    /// When there are multiple errors, the validation process tries to output
    /// several of them. Much like a compiler, this is an imperfect process. Some
    /// validation errors will be "fatal", meaning that they stop the entire
    /// validation process. This is the case for `display_name="UNSPECIFIED"`
    /// errors, among others. Some may cause the validation process to skip other
    /// errors.
    ///
    /// *STABILITY*:
    /// `code` and `display_name` should be very stable. But new codes and
    /// display names may appear over time, which may cause a given (invalid)
    /// request to yield a different (`code`, `display_name`) pair because the new
    /// error hid the old one (see "MULTIPLE ERRORS").
    ///
    /// *REFERENCE*: A list of all (code, name) pairs:
    ///
    /// * UNSPECIFIED = 0;
    ///
    /// * VALIDATION_TIMEOUT_ERROR = 10; Validation couldn't be completed within
    ///   the deadline.
    ///
    /// * REQUEST_OPTIONS_ERROR = 12;
    ///
    ///   * REQUEST_OPTIONS_INVALID_SOLVING_MODE = 1201;
    ///   * REQUEST_OPTIONS_INVALID_MAX_VALIDATION_ERRORS = 1203;
    ///   * REQUEST_OPTIONS_INVALID_GEODESIC_METERS_PER_SECOND = 1204;
    ///   * REQUEST_OPTIONS_GEODESIC_METERS_PER_SECOND_TOO_SMALL = 1205;
    ///   * REQUEST_OPTIONS_MISSING_GEODESIC_METERS_PER_SECOND = 1206;
    ///   * REQUEST_OPTIONS_POPULATE_PATHFINDER_TRIPS_AND_GEODESIC_DISTANCE
    ///     = 1207;
    ///   * REQUEST_OPTIONS_COST_MODEL_OPTIONS_AND_GEODESIC_DISTANCE = 1208;
    ///   * REQUEST_OPTIONS_TRAVEL_MODE_INCOMPATIBLE_WITH_TRAFFIC = 1211;
    ///   * REQUEST_OPTIONS_MULTIPLE_TRAFFIC_FLAVORS = 1212;
    ///   * REQUEST_OPTIONS_INVALID_TRAFFIC_FLAVOR = 1213;
    ///   * REQUEST_OPTIONS_TRAFFIC_ENABLED_WITHOUT_GLOBAL_START_TIME = 1214;
    ///   * REQUEST_OPTIONS_TRAFFIC_ENABLED_WITH_PRECEDENCES = 1215;
    ///   * REQUEST_OPTIONS_TRAFFIC_PREFILL_MODE_INVALID = 1216;
    ///   * REQUEST_OPTIONS_TRAFFIC_PREFILL_ENABLED_WITHOUT_TRAFFIC = 1217;
    /// * INJECTED_SOLUTION_ERROR = 20;
    ///
    ///   * INJECTED_SOLUTION_MISSING_LABEL = 2000;
    ///   * INJECTED_SOLUTION_DUPLICATE_LABEL = 2001;
    ///   * INJECTED_SOLUTION_AMBIGUOUS_INDEX = 2002;
    ///   * INJECTED_SOLUTION_INFEASIBLE_AFTER_GETTING_TRAVEL_TIMES = 2003;
    ///   * INJECTED_SOLUTION_TRANSITION_INCONSISTENT_WITH_ACTUAL_TRAVEL = 2004;
    ///   * INJECTED_SOLUTION_CONCURRENT_SOLUTION_TYPES = 2005;
    ///   * INJECTED_SOLUTION_MORE_THAN_ONE_PER_TYPE = 2006;
    ///   * INJECTED_SOLUTION_REFRESH_WITHOUT_POPULATE = 2008;
    ///   * INJECTED_SOLUTION_CONSTRAINED_ROUTE_PORTION_INFEASIBLE = 2010;
    /// * SHIPMENT_MODEL_ERROR = 22;
    ///
    ///   * SHIPMENT_MODEL_TOO_LARGE = 2200;
    ///   * SHIPMENT_MODEL_TOO_MANY_CAPACITY_TYPES = 2201;
    ///   * SHIPMENT_MODEL_GLOBAL_START_TIME_NEGATIVE_OR_NAN = 2202;
    ///   * SHIPMENT_MODEL_GLOBAL_END_TIME_TOO_LARGE_OR_NAN = 2203;
    ///   * SHIPMENT_MODEL_GLOBAL_START_TIME_AFTER_GLOBAL_END_TIME = 2204;
    ///   * SHIPMENT_MODEL_GLOBAL_DURATION_TOO_LONG = 2205;
    ///   * SHIPMENT_MODEL_MAX_ACTIVE_VEHICLES_NOT_POSITIVE = 2206;
    ///   * SHIPMENT_MODEL_DURATION_MATRIX_TOO_LARGE = 2207;
    /// * INDEX_ERROR = 24;
    ///
    /// * TAG_ERROR = 26;
    ///
    /// * TIME_WINDOW_ERROR = 28;
    ///
    ///   * TIME_WINDOW_INVALID_START_TIME = 2800;
    ///   * TIME_WINDOW_INVALID_END_TIME = 2801;
    ///   * TIME_WINDOW_INVALID_SOFT_START_TIME = 2802;
    ///   * TIME_WINDOW_INVALID_SOFT_END_TIME = 2803;
    ///   * TIME_WINDOW_OUTSIDE_GLOBAL_TIME_WINDOW = 2804;
    ///   * TIME_WINDOW_START_TIME_AFTER_END_TIME = 2805;
    ///   * TIME_WINDOW_INVALID_COST_PER_HOUR_BEFORE_SOFT_START_TIME = 2806;
    ///   * TIME_WINDOW_INVALID_COST_PER_HOUR_AFTER_SOFT_END_TIME = 2807;
    ///   * TIME_WINDOW_COST_BEFORE_SOFT_START_TIME_WITHOUT_SOFT_START_TIME
    ///     = 2808;
    ///   * TIME_WINDOW_COST_AFTER_SOFT_END_TIME_WITHOUT_SOFT_END_TIME = 2809;
    ///   * TIME_WINDOW_SOFT_START_TIME_WITHOUT_COST_BEFORE_SOFT_START_TIME
    ///     = 2810;
    ///   * TIME_WINDOW_SOFT_END_TIME_WITHOUT_COST_AFTER_SOFT_END_TIME = 2811;
    ///   * TIME_WINDOW_OVERLAPPING_ADJACENT_OR_EARLIER_THAN_PREVIOUS = 2812;
    ///   * TIME_WINDOW_START_TIME_AFTER_SOFT_START_TIME = 2813;
    ///   * TIME_WINDOW_SOFT_START_TIME_AFTER_END_TIME = 2814;
    ///   * TIME_WINDOW_START_TIME_AFTER_SOFT_END_TIME = 2815;
    ///   * TIME_WINDOW_SOFT_END_TIME_AFTER_END_TIME = 2816;
    ///   * TIME_WINDOW_COST_BEFORE_SOFT_START_TIME_SET_AND_MULTIPLE_WINDOWS
    ///     = 2817;
    ///   * TIME_WINDOW_COST_AFTER_SOFT_END_TIME_SET_AND_MULTIPLE_WINDOWS = 2818;
    ///   * TRANSITION_ATTRIBUTES_ERROR = 30;
    ///   * TRANSITION_ATTRIBUTES_INVALID_COST = 3000;
    ///   * TRANSITION_ATTRIBUTES_INVALID_COST_PER_KILOMETER = 3001;
    ///   * TRANSITION_ATTRIBUTES_DUPLICATE_TAG_PAIR = 3002;
    ///   * TRANSITION_ATTRIBUTES_DISTANCE_LIMIT_MAX_METERS_UNSUPPORTED = 3003;
    ///   * TRANSITION_ATTRIBUTES_UNSPECIFIED_SOURCE_TAGS = 3004;
    ///   * TRANSITION_ATTRIBUTES_CONFLICTING_SOURCE_TAGS_FIELDS = 3005;
    ///   * TRANSITION_ATTRIBUTES_UNSPECIFIED_DESTINATION_TAGS = 3006;
    ///   * TRANSITION_ATTRIBUTES_CONFLICTING_DESTINATION_TAGS_FIELDS = 3007;
    ///   * TRANSITION_ATTRIBUTES_DELAY_DURATION_NEGATIVE_OR_NAN = 3008;
    ///   * TRANSITION_ATTRIBUTES_DELAY_DURATION_EXCEEDS_GLOBAL_DURATION = 3009;
    /// * AMOUNT_ERROR = 31;
    ///
    ///   * AMOUNT_NEGATIVE_VALUE = 3100;
    /// * LOAD_LIMIT_ERROR = 33;
    ///
    ///   * LOAD_LIMIT_INVALID_COST_ABOVE_SOFT_MAX = 3303;
    ///   * LOAD_LIMIT_SOFT_MAX_WITHOUT_COST_ABOVE_SOFT_MAX = 3304;
    ///   * LOAD_LIMIT_COST_ABOVE_SOFT_MAX_WITHOUT_SOFT_MAX = 3305;
    ///   * LOAD_LIMIT_NEGATIVE_SOFT_MAX = 3306;
    ///   * LOAD_LIMIT_MIXED_DEMAND_TYPE = 3307;
    ///   * LOAD_LIMIT_MAX_LOAD_NEGATIVE_VALUE = 3308;
    ///   * LOAD_LIMIT_SOFT_MAX_ABOVE_MAX = 3309;
    /// * INTERVAL_ERROR = 34;
    ///
    ///   * INTERVAL_MIN_EXCEEDS_MAX = 3401;
    ///   * INTERVAL_NEGATIVE_MIN = 3402;
    ///   * INTERVAL_NEGATIVE_MAX = 3403;
    ///   * INTERVAL_MIN_EXCEEDS_CAPACITY = 3404;
    ///   * INTERVAL_MAX_EXCEEDS_CAPACITY = 3405;
    /// * DISTANCE_LIMIT_ERROR = 36;
    ///
    ///   * DISTANCE_LIMIT_INVALID_COST_AFTER_SOFT_MAX = 3601;
    ///   * DISTANCE_LIMIT_SOFT_MAX_WITHOUT_COST_AFTER_SOFT_MAX = 3602;
    ///   * DISTANCE_LIMIT_COST_AFTER_SOFT_MAX_WITHOUT_SOFT_MAX = 3603;
    ///   * DISTANCE_LIMIT_NEGATIVE_MAX = 3604;
    ///   * DISTANCE_LIMIT_NEGATIVE_SOFT_MAX = 3605;
    ///   * DISTANCE_LIMIT_SOFT_MAX_LARGER_THAN_MAX = 3606;
    /// * DURATION_LIMIT_ERROR = 38;
    ///
    ///   * DURATION_LIMIT_MAX_DURATION_NEGATIVE_OR_NAN = 3800;
    ///   * DURATION_LIMIT_SOFT_MAX_DURATION_NEGATIVE_OR_NAN = 3801;
    ///   * DURATION_LIMIT_INVALID_COST_PER_HOUR_AFTER_SOFT_MAX = 3802;
    ///   * DURATION_LIMIT_SOFT_MAX_WITHOUT_COST_AFTER_SOFT_MAX = 3803;
    ///   * DURATION_LIMIT_COST_AFTER_SOFT_MAX_WITHOUT_SOFT_MAX = 3804;
    ///   * DURATION_LIMIT_QUADRATIC_SOFT_MAX_DURATION_NEGATIVE_OR_NAN = 3805;
    ///   * DURATION_LIMIT_INVALID_COST_AFTER_QUADRATIC_SOFT_MAX = 3806;
    ///   * DURATION_LIMIT_QUADRATIC_SOFT_MAX_WITHOUT_COST_PER_SQUARE_HOUR
    ///     = 3807;
    ///   * DURATION_LIMIT_COST_PER_SQUARE_HOUR_WITHOUT_QUADRATIC_SOFT_MAX
    ///     = 3808;
    ///   * DURATION_LIMIT_QUADRATIC_SOFT_MAX_WITHOUT_MAX = 3809;
    ///   * DURATION_LIMIT_SOFT_MAX_LARGER_THAN_MAX = 3810;
    ///   * DURATION_LIMIT_QUADRATIC_SOFT_MAX_LARGER_THAN_MAX = 3811;
    ///   * DURATION_LIMIT_DIFF_BETWEEN_MAX_AND_QUADRATIC_SOFT_MAX_TOO_LARGE
    ///     = 3812;
    ///   * DURATION_LIMIT_MAX_DURATION_EXCEEDS_GLOBAL_DURATION = 3813;
    ///   * DURATION_LIMIT_SOFT_MAX_DURATION_EXCEEDS_GLOBAL_DURATION = 3814;
    ///   * DURATION_LIMIT_QUADRATIC_SOFT_MAX_DURATION_EXCEEDS_GLOBAL_DURATION
    ///     = 3815;
    /// * SHIPMENT_ERROR = 40;
    ///
    ///   * SHIPMENT_PD_LIMIT_WITHOUT_PICKUP_AND_DELIVERY = 4014;
    ///   * SHIPMENT_PD_ABSOLUTE_DETOUR_LIMIT_DURATION_NEGATIVE_OR_NAN = 4000;
    ///   * SHIPMENT_PD_ABSOLUTE_DETOUR_LIMIT_DURATION_EXCEEDS_GLOBAL_DURATION
    ///     = 4001;
    ///   * SHIPMENT_PD_RELATIVE_DETOUR_LIMIT_INVALID = 4015;
    ///   * SHIPMENT_PD_DETOUR_LIMIT_AND_EXTRA_VISIT_DURATION = 4016;
    ///   * SHIPMENT_PD_TIME_LIMIT_DURATION_NEGATIVE_OR_NAN = 4002;
    ///   * SHIPMENT_PD_TIME_LIMIT_DURATION_EXCEEDS_GLOBAL_DURATION = 4003;
    ///   * SHIPMENT_EMPTY_SHIPMENT_TYPE = 4004;
    ///   * SHIPMENT_NO_PICKUP_NO_DELIVERY = 4005;
    ///   * SHIPMENT_INVALID_PENALTY_COST = 4006;
    ///   * SHIPMENT_ALLOWED_VEHICLE_INDEX_OUT_OF_BOUNDS = 4007;
    ///   * SHIPMENT_DUPLICATE_ALLOWED_VEHICLE_INDEX = 4008;
    ///   * SHIPMENT_INCONSISTENT_COST_FOR_VEHICLE_SIZE_WITHOUT_INDEX = 4009;
    ///   * SHIPMENT_INCONSISTENT_COST_FOR_VEHICLE_SIZE_WITH_INDEX = 4010;
    ///   * SHIPMENT_INVALID_COST_FOR_VEHICLE = 4011;
    ///   * SHIPMENT_COST_FOR_VEHICLE_INDEX_OUT_OF_BOUNDS = 4012;
    ///   * SHIPMENT_DUPLICATE_COST_FOR_VEHICLE_INDEX = 4013;
    /// * VEHICLE_ERROR = 42;
    ///
    ///   * VEHICLE_EMPTY_REQUIRED_OPERATOR_TYPE = 4200;
    ///   * VEHICLE_DUPLICATE_REQUIRED_OPERATOR_TYPE = 4201;
    ///   * VEHICLE_NO_OPERATOR_WITH_REQUIRED_OPERATOR_TYPE = 4202;
    ///   * VEHICLE_EMPTY_START_TAG = 4203;
    ///   * VEHICLE_DUPLICATE_START_TAG = 4204;
    ///   * VEHICLE_EMPTY_END_TAG = 4205;
    ///   * VEHICLE_DUPLICATE_END_TAG = 4206;
    ///   * VEHICLE_EXTRA_VISIT_DURATION_NEGATIVE_OR_NAN = 4207;
    ///   * VEHICLE_EXTRA_VISIT_DURATION_EXCEEDS_GLOBAL_DURATION = 4208;
    ///   * VEHICLE_EXTRA_VISIT_DURATION_EMPTY_KEY = 4209;
    ///   * VEHICLE_FIRST_SHIPMENT_INDEX_OUT_OF_BOUNDS = 4210;
    ///   * VEHICLE_FIRST_SHIPMENT_IGNORED = 4211;
    ///   * VEHICLE_FIRST_SHIPMENT_NOT_BOUND = 4212;
    ///   * VEHICLE_LAST_SHIPMENT_INDEX_OUT_OF_BOUNDS = 4213;
    ///   * VEHICLE_LAST_SHIPMENT_IGNORED = 4214;
    ///   * VEHICLE_LAST_SHIPMENT_NOT_BOUND = 4215;
    ///   * VEHICLE_IGNORED_WITH_USED_IF_ROUTE_IS_EMPTY = 4216;
    ///   * VEHICLE_INVALID_COST_PER_KILOMETER = 4217;
    ///   * VEHICLE_INVALID_COST_PER_HOUR = 4218;
    ///   * VEHICLE_INVALID_COST_PER_TRAVELED_HOUR = 4219;
    ///   * VEHICLE_INVALID_FIXED_COST = 4220;
    ///   * VEHICLE_INVALID_TRAVEL_DURATION_MULTIPLE = 4221;
    ///   * VEHICLE_TRAVEL_DURATION_MULTIPLE_WITH_SHIPMENT_PD_DETOUR_LIMITS
    ///     = 4223;
    ///   * VEHICLE_MATRIX_INDEX_WITH_SHIPMENT_PD_DETOUR_LIMITS = 4224;
    ///   * VEHICLE_MINIMUM_DURATION_LONGER_THAN_DURATION_LIMIT = 4222;
    /// * VISIT_REQUEST_ERROR = 44;
    ///
    ///   * VISIT_REQUEST_EMPTY_TAG = 4400;
    ///   * VISIT_REQUEST_DUPLICATE_TAG = 4401;
    ///   * VISIT_REQUEST_DURATION_NEGATIVE_OR_NAN = 4404;
    ///   * VISIT_REQUEST_DURATION_EXCEEDS_GLOBAL_DURATION = 4405;
    /// * PRECEDENCE_ERROR = 46;
    ///
    ///   * PRECEDENCE_RULE_MISSING_FIRST_INDEX = 4600;
    ///   * PRECEDENCE_RULE_MISSING_SECOND_INDEX = 4601;
    ///   * PRECEDENCE_RULE_FIRST_INDEX_OUT_OF_BOUNDS = 4602;
    ///   * PRECEDENCE_RULE_SECOND_INDEX_OUT_OF_BOUNDS = 4603;
    ///   * PRECEDENCE_RULE_DUPLICATE_INDEX = 4604;
    ///   * PRECEDENCE_RULE_INEXISTENT_FIRST_VISIT_REQUEST = 4605;
    ///   * PRECEDENCE_RULE_INEXISTENT_SECOND_VISIT_REQUEST = 4606;
    /// * BREAK_ERROR = 48;
    ///
    ///   * BREAK_RULE_EMPTY = 4800;
    ///   * BREAK_REQUEST_UNSPECIFIED_DURATION = 4801;
    ///   * BREAK_REQUEST_UNSPECIFIED_EARLIEST_START_TIME = 4802;
    ///   * BREAK_REQUEST_UNSPECIFIED_LATEST_START_TIME = 4803;
    ///   * BREAK_REQUEST_DURATION_NEGATIVE_OR_NAN = 4804; = 4804;
    ///   * BREAK_REQUEST_LATEST_START_TIME_BEFORE_EARLIEST_START_TIME = 4805;
    ///   * BREAK_REQUEST_EARLIEST_START_TIME_BEFORE_GLOBAL_START_TIME = 4806;
    ///   * BREAK_REQUEST_LATEST_END_TIME_AFTER_GLOBAL_END_TIME = 4807;
    ///   * BREAK_REQUEST_NON_SCHEDULABLE = 4808;
    ///   * BREAK_FREQUENCY_MAX_INTER_BREAK_DURATION_NEGATIVE_OR_NAN = 4809;
    ///   * BREAK_FREQUENCY_MIN_BREAK_DURATION_NEGATIVE_OR_NAN = 4810;
    ///   * BREAK_FREQUENCY_MIN_BREAK_DURATION_EXCEEDS_GLOBAL_DURATION = 4811;
    ///   * BREAK_FREQUENCY_MAX_INTER_BREAK_DURATION_EXCEEDS_GLOBAL_DURATION
    ///     = 4812;
    ///   * BREAK_REQUEST_DURATION_EXCEEDS_GLOBAL_DURATION = 4813;
    ///   * BREAK_FREQUENCY_MISSING_MAX_INTER_BREAK_DURATION = 4814;
    ///   * BREAK_FREQUENCY_MISSING_MIN_BREAK_DURATION = 4815;
    /// * SHIPMENT_TYPE_INCOMPATIBILITY_ERROR = 50;
    ///
    ///   * SHIPMENT_TYPE_INCOMPATIBILITY_EMPTY_TYPE = 5001;
    ///   * SHIPMENT_TYPE_INCOMPATIBILITY_LESS_THAN_TWO_TYPES = 5002;
    ///   * SHIPMENT_TYPE_INCOMPATIBILITY_DUPLICATE_TYPE = 5003;
    ///   * SHIPMENT_TYPE_INCOMPATIBILITY_INVALID_INCOMPATIBILITY_MODE = 5004;
    ///   * SHIPMENT_TYPE_INCOMPATIBILITY_TOO_MANY_INCOMPATIBILITIES = 5005;
    /// * SHIPMENT_TYPE_REQUIREMENT_ERROR = 52;
    ///
    ///   * SHIPMENT_TYPE_REQUIREMENT_NO_REQUIRED_TYPE = 52001;
    ///   * SHIPMENT_TYPE_REQUIREMENT_NO_DEPENDENT_TYPE = 52002;
    ///   * SHIPMENT_TYPE_REQUIREMENT_INVALID_REQUIREMENT_MODE = 52003;
    ///   * SHIPMENT_TYPE_REQUIREMENT_TOO_MANY_REQUIREMENTS = 52004;
    ///   * SHIPMENT_TYPE_REQUIREMENT_EMPTY_REQUIRED_TYPE = 52005;
    ///   * SHIPMENT_TYPE_REQUIREMENT_DUPLICATE_REQUIRED_TYPE = 52006;
    ///   * SHIPMENT_TYPE_REQUIREMENT_NO_REQUIRED_TYPE_FOUND = 52007;
    ///   * SHIPMENT_TYPE_REQUIREMENT_EMPTY_DEPENDENT_TYPE = 52008;
    ///   * SHIPMENT_TYPE_REQUIREMENT_DUPLICATE_DEPENDENT_TYPE = 52009;
    ///   * SHIPMENT_TYPE_REQUIREMENT_SELF_DEPENDENT_TYPE = 52010;
    ///   * SHIPMENT_TYPE_REQUIREMENT_GRAPH_HAS_CYCLES = 52011;
    /// * VEHICLE_OPERATOR_ERROR = 54;
    ///
    ///   * VEHICLE_OPERATOR_EMPTY_TYPE = 5400;
    ///   * VEHICLE_OPERATOR_MULTIPLE_START_TIME_WINDOWS = 5401;
    ///   * VEHICLE_OPERATOR_SOFT_START_TIME_WINDOW = 5402;
    ///   * VEHICLE_OPERATOR_MULTIPLE_END_TIME_WINDOWS = 5403;
    ///   * VEHICLE_OPERATOR_SOFT_END_TIME_WINDOW = 5404;
    /// * DURATION_SECONDS_MATRIX_ERROR = 56;
    ///
    ///   * DURATION_SECONDS_MATRIX_DURATION_NEGATIVE_OR_NAN = 5600;
    ///   * DURATION_SECONDS_MATRIX_DURATION_EXCEEDS_GLOBAL_DURATION = 5601;
    pub code: i32,

    /// The error display name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// An error context may involve 0, 1 (most of the time) or more fields. For
    /// example, referring to vehicle #4 and shipment #2's first pickup can be
    /// done as follows:
    ///
    /// ```norust
    /// fields { name: "vehicles" index: 4}
    /// fields { name: "shipments" index: 2 sub_field {name: "pickups" index: 0} }
    /// ```
    ///
    /// Note, however, that the cardinality of `fields` should not change for a
    /// given error code.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub fields: std::vec::Vec<crate::model::optimize_tours_validation_error::FieldReference>,

    /// Human-readable string describing the error. There is a 1:1 mapping
    /// between `code` and `error_message` (when code != "UNSPECIFIED").
    ///
    /// *STABILITY*: Not stable: the error message associated to a given `code` may
    /// change (hopefully to clarify it) over time. Please rely on the
    /// `display_name` and `code` instead.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub error_message: std::string::String,

    /// May contain the value(s) of the field(s). This is not always available. You
    /// should absolutely not rely on it and use it only for manual model
    /// debugging.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub offending_values: std::string::String,
}

impl OptimizeToursValidationError {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [code][crate::model::OptimizeToursValidationError::code].
    pub fn set_code<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.code = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::OptimizeToursValidationError::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [error_message][crate::model::OptimizeToursValidationError::error_message].
    pub fn set_error_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.error_message = v.into();
        self
    }

    /// Sets the value of [offending_values][crate::model::OptimizeToursValidationError::offending_values].
    pub fn set_offending_values<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.offending_values = v.into();
        self
    }

    /// Sets the value of [fields][crate::model::OptimizeToursValidationError::fields].
    pub fn set_fields<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::optimize_tours_validation_error::FieldReference>,
    {
        use std::iter::Iterator;
        self.fields = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for OptimizeToursValidationError {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.optimization.v1.OptimizeToursValidationError"
    }
}

/// Defines additional types related to OptimizeToursValidationError
pub mod optimize_tours_validation_error {
    #[allow(unused_imports)]
    use super::*;

    /// Specifies a context for the validation error. A `FieldReference` always
    /// refers to a given field in this file and follows the same hierarchical
    /// structure. For example, we may specify element #2 of `start_time_windows`
    /// of vehicle #5 using:
    ///
    /// ```norust
    /// name: "vehicles" index: 5 sub_field { name: "end_time_windows" index: 2 }
    /// ```
    ///
    /// We however omit top-level entities such as `OptimizeToursRequest` or
    /// `ShipmentModel` to avoid crowding the message.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct FieldReference {
        /// Name of the field, e.g., "vehicles".
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,

        /// Recursively nested sub-field, if needed.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub sub_field: std::option::Option<
            std::boxed::Box<crate::model::optimize_tours_validation_error::FieldReference>,
        >,

        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub index_or_key: std::option::Option<
            crate::model::optimize_tours_validation_error::field_reference::IndexOrKey,
        >,
    }

    impl FieldReference {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [name][crate::model::optimize_tours_validation_error::FieldReference::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }

        /// Sets the value of [sub_field][crate::model::optimize_tours_validation_error::FieldReference::sub_field].
        pub fn set_sub_field<
            T: std::convert::Into<
                std::option::Option<
                    std::boxed::Box<crate::model::optimize_tours_validation_error::FieldReference>,
                >,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.sub_field = v.into();
            self
        }

        /// Sets the value of `index_or_key`.
        pub fn set_index_or_key<
            T: std::convert::Into<
                std::option::Option<
                    crate::model::optimize_tours_validation_error::field_reference::IndexOrKey,
                >,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.index_or_key = v.into();
            self
        }

        /// The value of [index_or_key][crate::model::optimize_tours_validation_error::FieldReference::index_or_key]
        /// if it holds a `Index`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_index(&self) -> std::option::Option<&i32> {
            #[allow(unreachable_patterns)]
            self.index_or_key.as_ref().and_then(|v| match v {
                crate::model::optimize_tours_validation_error::field_reference::IndexOrKey::Index(v) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// The value of [index_or_key][crate::model::optimize_tours_validation_error::FieldReference::index_or_key]
        /// if it holds a `Key`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_key(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.index_or_key.as_ref().and_then(|v| match v {
                crate::model::optimize_tours_validation_error::field_reference::IndexOrKey::Key(
                    v,
                ) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [index_or_key][crate::model::optimize_tours_validation_error::FieldReference::index_or_key]
        /// to hold a `Index`.
        ///
        /// Note that all the setters affecting `index_or_key` are
        /// mutually exclusive.
        pub fn set_index<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.index_or_key = std::option::Option::Some(
                crate::model::optimize_tours_validation_error::field_reference::IndexOrKey::Index(
                    v.into(),
                ),
            );
            self
        }

        /// Sets the value of [index_or_key][crate::model::optimize_tours_validation_error::FieldReference::index_or_key]
        /// to hold a `Key`.
        ///
        /// Note that all the setters affecting `index_or_key` are
        /// mutually exclusive.
        pub fn set_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.index_or_key = std::option::Option::Some(
                crate::model::optimize_tours_validation_error::field_reference::IndexOrKey::Key(
                    v.into(),
                ),
            );
            self
        }
    }

    impl wkt::message::Message for FieldReference {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.optimization.v1.OptimizeToursValidationError.FieldReference"
        }
    }

    /// Defines additional types related to FieldReference
    pub mod field_reference {
        #[allow(unused_imports)]
        use super::*;

        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum IndexOrKey {
            /// Index of the field if repeated.
            Index(i32),
            /// Key if the field is a map.
            Key(std::string::String),
        }
    }
}

/// Data formats for input and output files.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct DataFormat(std::borrow::Cow<'static, str>);

impl DataFormat {
    /// Creates a new DataFormat instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [DataFormat](DataFormat)
pub mod data_format {
    use super::DataFormat;

    /// Default value.
    pub const DATA_FORMAT_UNSPECIFIED: DataFormat = DataFormat::new("DATA_FORMAT_UNSPECIFIED");

    /// Input data in json format.
    pub const JSON: DataFormat = DataFormat::new("JSON");

    /// Input data in string format.
    pub const STRING: DataFormat = DataFormat::new("STRING");
}

impl std::convert::From<std::string::String> for DataFormat {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}
