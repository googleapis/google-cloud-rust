// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Optimization API.
///
/// # Service Description
///
/// A service for optimizing vehicle tours.
///
/// Validity of certain types of fields:
///
/// * `google.protobuf.Timestamp`
///   * Times are in Unix time: seconds since 1970-01-01T00:00:00+00:00.
///   * seconds must be in [0, 253402300799],
///     i.e. in [1970-01-01T00:00:00+00:00, 9999-12-31T23:59:59+00:00].
///   * nanos must be unset or set to 0.
/// * `google.protobuf.Duration`
///   * seconds must be in [0, 253402300799],
///     i.e. in [1970-01-01T00:00:00+00:00, 9999-12-31T23:59:59+00:00].
///   * nanos must be unset or set to 0.
/// * `google.type.LatLng`
///   * latitude must be in [-90.0, 90.0].
///   * longitude must be in [-180.0, 180.0].
///   * at least one of latitude and longitude must be non-zero.
///
/// # Configuration
///
/// `FleetRouting` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `FleetRouting` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `FleetRouting` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct FleetRouting {
    inner: Arc<dyn crate::stubs::dynamic::FleetRouting>,
}

impl FleetRouting {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::FleetRouting + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::FleetRouting>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::FleetRouting> {
        crate::transport::FleetRouting::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::FleetRouting> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::FleetRouting::new)
    }

    /// Sends an `OptimizeToursRequest` containing a `ShipmentModel` and returns an
    /// `OptimizeToursResponse` containing `ShipmentRoute`s, which are a set of
    /// routes to be performed by vehicles minimizing the overall cost.
    ///
    /// A `ShipmentModel` model consists mainly of `Shipment`s that need to be
    /// carried out and `Vehicle`s that can be used to transport the `Shipment`s.
    /// The `ShipmentRoute`s assign `Shipment`s to `Vehicle`s. More specifically,
    /// they assign a series of `Visit`s to each vehicle, where a `Visit`
    /// corresponds to a `VisitRequest`, which is a pickup or delivery for a
    /// `Shipment`.
    ///
    /// The goal is to provide an assignment of `ShipmentRoute`s to `Vehicle`s that
    /// minimizes the total cost where cost has many components defined in the
    /// `ShipmentModel`.
    pub fn optimize_tours(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::fleet_routing::OptimizeTours {
        crate::builders::fleet_routing::OptimizeTours::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Optimizes vehicle tours for one or more `OptimizeToursRequest`
    /// messages as a batch.
    ///
    /// This method is a Long Running Operation (LRO). The inputs for optimization
    /// (`OptimizeToursRequest` messages) and outputs (`OptimizeToursResponse`
    /// messages) are read/written from/to Cloud Storage in user-specified
    /// format. Like the `OptimizeTours` method, each `OptimizeToursRequest`
    /// contains a `ShipmentModel` and returns an `OptimizeToursResponse`
    /// containing `ShipmentRoute`s, which are a set of routes to be performed by
    /// vehicles minimizing the overall cost.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_optimize_tours(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::fleet_routing::BatchOptimizeTours {
        crate::builders::fleet_routing::BatchOptimizeTours::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::fleet_routing::GetOperation {
        crate::builders::fleet_routing::GetOperation::new(self.inner.clone()).set_name(name.into())
    }
}
