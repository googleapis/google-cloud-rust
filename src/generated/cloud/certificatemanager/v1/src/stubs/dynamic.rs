// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use std::sync::Arc;

/// A dyn-compatible, crate-private version of [super::CertificateManager].
#[async_trait::async_trait]
pub trait CertificateManager: std::fmt::Debug + Send + Sync {
    async fn list_certificates(
        &self,
        req: crate::model::ListCertificatesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCertificatesResponse>;

    async fn get_certificate(
        &self,
        req: crate::model::GetCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Certificate>;

    async fn create_certificate(
        &self,
        req: crate::model::CreateCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_certificate(
        &self,
        req: crate::model::UpdateCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_certificate(
        &self,
        req: crate::model::DeleteCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_certificate_maps(
        &self,
        req: crate::model::ListCertificateMapsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCertificateMapsResponse>;

    async fn get_certificate_map(
        &self,
        req: crate::model::GetCertificateMapRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CertificateMap>;

    async fn create_certificate_map(
        &self,
        req: crate::model::CreateCertificateMapRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_certificate_map(
        &self,
        req: crate::model::UpdateCertificateMapRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_certificate_map(
        &self,
        req: crate::model::DeleteCertificateMapRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_certificate_map_entries(
        &self,
        req: crate::model::ListCertificateMapEntriesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCertificateMapEntriesResponse>;

    async fn get_certificate_map_entry(
        &self,
        req: crate::model::GetCertificateMapEntryRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CertificateMapEntry>;

    async fn create_certificate_map_entry(
        &self,
        req: crate::model::CreateCertificateMapEntryRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_certificate_map_entry(
        &self,
        req: crate::model::UpdateCertificateMapEntryRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_certificate_map_entry(
        &self,
        req: crate::model::DeleteCertificateMapEntryRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_dns_authorizations(
        &self,
        req: crate::model::ListDnsAuthorizationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListDnsAuthorizationsResponse>;

    async fn get_dns_authorization(
        &self,
        req: crate::model::GetDnsAuthorizationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::DnsAuthorization>;

    async fn create_dns_authorization(
        &self,
        req: crate::model::CreateDnsAuthorizationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_dns_authorization(
        &self,
        req: crate::model::UpdateDnsAuthorizationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_dns_authorization(
        &self,
        req: crate::model::DeleteDnsAuthorizationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_certificate_issuance_configs(
        &self,
        req: crate::model::ListCertificateIssuanceConfigsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCertificateIssuanceConfigsResponse>;

    async fn get_certificate_issuance_config(
        &self,
        req: crate::model::GetCertificateIssuanceConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CertificateIssuanceConfig>;

    async fn create_certificate_issuance_config(
        &self,
        req: crate::model::CreateCertificateIssuanceConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_certificate_issuance_config(
        &self,
        req: crate::model::DeleteCertificateIssuanceConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_trust_configs(
        &self,
        req: crate::model::ListTrustConfigsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListTrustConfigsResponse>;

    async fn get_trust_config(
        &self,
        req: crate::model::GetTrustConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::TrustConfig>;

    async fn create_trust_config(
        &self,
        req: crate::model::CreateTrustConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_trust_config(
        &self,
        req: crate::model::UpdateTrustConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_trust_config(
        &self,
        req: crate::model::DeleteTrustConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse>;

    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location>;

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [crate::stubs::CertificateManager] also implement [CertificateManager].
#[async_trait::async_trait]
impl<T: crate::stubs::CertificateManager> CertificateManager for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn list_certificates(
        &self,
        req: crate::model::ListCertificatesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCertificatesResponse> {
        T::list_certificates(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_certificate(
        &self,
        req: crate::model::GetCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Certificate> {
        T::get_certificate(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_certificate(
        &self,
        req: crate::model::CreateCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_certificate(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_certificate(
        &self,
        req: crate::model::UpdateCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_certificate(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_certificate(
        &self,
        req: crate::model::DeleteCertificateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_certificate(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_certificate_maps(
        &self,
        req: crate::model::ListCertificateMapsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCertificateMapsResponse> {
        T::list_certificate_maps(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_certificate_map(
        &self,
        req: crate::model::GetCertificateMapRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CertificateMap> {
        T::get_certificate_map(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_certificate_map(
        &self,
        req: crate::model::CreateCertificateMapRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_certificate_map(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_certificate_map(
        &self,
        req: crate::model::UpdateCertificateMapRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_certificate_map(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_certificate_map(
        &self,
        req: crate::model::DeleteCertificateMapRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_certificate_map(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_certificate_map_entries(
        &self,
        req: crate::model::ListCertificateMapEntriesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCertificateMapEntriesResponse> {
        T::list_certificate_map_entries(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_certificate_map_entry(
        &self,
        req: crate::model::GetCertificateMapEntryRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CertificateMapEntry> {
        T::get_certificate_map_entry(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_certificate_map_entry(
        &self,
        req: crate::model::CreateCertificateMapEntryRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_certificate_map_entry(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_certificate_map_entry(
        &self,
        req: crate::model::UpdateCertificateMapEntryRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_certificate_map_entry(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_certificate_map_entry(
        &self,
        req: crate::model::DeleteCertificateMapEntryRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_certificate_map_entry(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_dns_authorizations(
        &self,
        req: crate::model::ListDnsAuthorizationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListDnsAuthorizationsResponse> {
        T::list_dns_authorizations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_dns_authorization(
        &self,
        req: crate::model::GetDnsAuthorizationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::DnsAuthorization> {
        T::get_dns_authorization(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_dns_authorization(
        &self,
        req: crate::model::CreateDnsAuthorizationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_dns_authorization(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_dns_authorization(
        &self,
        req: crate::model::UpdateDnsAuthorizationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_dns_authorization(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_dns_authorization(
        &self,
        req: crate::model::DeleteDnsAuthorizationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_dns_authorization(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_certificate_issuance_configs(
        &self,
        req: crate::model::ListCertificateIssuanceConfigsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCertificateIssuanceConfigsResponse> {
        T::list_certificate_issuance_configs(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_certificate_issuance_config(
        &self,
        req: crate::model::GetCertificateIssuanceConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::CertificateIssuanceConfig> {
        T::get_certificate_issuance_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_certificate_issuance_config(
        &self,
        req: crate::model::CreateCertificateIssuanceConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_certificate_issuance_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_certificate_issuance_config(
        &self,
        req: crate::model::DeleteCertificateIssuanceConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_certificate_issuance_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_trust_configs(
        &self,
        req: crate::model::ListTrustConfigsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListTrustConfigsResponse> {
        T::list_trust_configs(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_trust_config(
        &self,
        req: crate::model::GetTrustConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::TrustConfig> {
        T::get_trust_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_trust_config(
        &self,
        req: crate::model::CreateTrustConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_trust_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_trust_config(
        &self,
        req: crate::model::UpdateTrustConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_trust_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_trust_config(
        &self,
        req: crate::model::DeleteTrustConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_trust_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse> {
        T::list_locations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location> {
        T::get_location(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::delete_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::cancel_operation(self, req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        T::get_polling_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}
