// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Agents][google.cloud.dialogflow.cx.v3.Agent].
///
/// [google.cloud.dialogflow.cx.v3.Agent]: crate::model::Agent
///
/// # Configuration
///
/// `Agents` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Agents` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Agents` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Agents {
    inner: Arc<dyn super::stubs::dynamic::Agents>,
}

impl Agents {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::Agents + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::Agents>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Agents> {
        super::transport::Agents::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Agents> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Agents::new)
    }

    /// Returns the list of all agents in the specified location.
    pub fn list_agents(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::agents::ListAgents {
        super::builders::agents::ListAgents::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Retrieves the specified agent.
    pub fn get_agent(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::agents::GetAgent {
        super::builders::agents::GetAgent::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates an agent in the specified location.
    ///
    /// Note: You should always train flows prior to sending them queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    pub fn create_agent(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::agents::CreateAgent {
        super::builders::agents::CreateAgent::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates the specified agent.
    ///
    /// Note: You should always train flows prior to sending them queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    pub fn update_agent(
        &self,
        agent: impl Into<crate::model::Agent>,
    ) -> super::builders::agents::UpdateAgent {
        super::builders::agents::UpdateAgent::new(self.inner.clone()).set_agent(agent.into())
    }

    /// Deletes the specified agent.
    pub fn delete_agent(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::agents::DeleteAgent {
        super::builders::agents::DeleteAgent::new(self.inner.clone()).set_name(name.into())
    }

    /// Exports the specified agent to a binary file.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`:
    ///   [ExportAgentResponse][google.cloud.dialogflow.cx.v3.ExportAgentResponse]
    ///
    /// [google.cloud.dialogflow.cx.v3.ExportAgentResponse]: crate::model::ExportAgentResponse
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_agent(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::agents::ExportAgent {
        super::builders::agents::ExportAgent::new(self.inner.clone()).set_name(name.into())
    }

    /// Restores the specified agent from a binary file.
    ///
    /// Replaces the current agent with a new one. Note that all existing resources
    /// in agent (e.g. intents, entity types, flows) will be removed.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`: An [Empty
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
    ///
    /// Note: You should always train flows prior to sending them queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn restore_agent(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::agents::RestoreAgent {
        super::builders::agents::RestoreAgent::new(self.inner.clone()).set_name(name.into())
    }

    /// Validates the specified agent and creates or updates validation results.
    /// The agent in draft version is validated. Please call this API after the
    /// training is completed to get the complete validation results.
    pub fn validate_agent(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::agents::ValidateAgent {
        super::builders::agents::ValidateAgent::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets the latest agent validation result. Agent validation is performed
    /// when ValidateAgent is called.
    pub fn get_agent_validation_result(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::agents::GetAgentValidationResult {
        super::builders::agents::GetAgentValidationResult::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets the generative settings for the agent.
    pub fn get_generative_settings(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::agents::GetGenerativeSettings {
        super::builders::agents::GetGenerativeSettings::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates the generative settings for the agent.
    pub fn update_generative_settings(
        &self,
        generative_settings: impl Into<crate::model::GenerativeSettings>,
    ) -> super::builders::agents::UpdateGenerativeSettings {
        super::builders::agents::UpdateGenerativeSettings::new(self.inner.clone())
            .set_generative_settings(generative_settings.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::agents::ListLocations {
        super::builders::agents::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::agents::GetLocation {
        super::builders::agents::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::agents::ListOperations {
        super::builders::agents::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::agents::GetOperation {
        super::builders::agents::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::agents::CancelOperation {
        super::builders::agents::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Changelogs][google.cloud.dialogflow.cx.v3.Changelog].
///
/// [google.cloud.dialogflow.cx.v3.Changelog]: crate::model::Changelog
///
/// # Configuration
///
/// `Changelogs` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Changelogs` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Changelogs` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Changelogs {
    inner: Arc<dyn super::stubs::dynamic::Changelogs>,
}

impl Changelogs {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::Changelogs + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::Changelogs>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Changelogs> {
        super::transport::Changelogs::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Changelogs> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Changelogs::new)
    }

    /// Returns the list of Changelogs.
    pub fn list_changelogs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::changelogs::ListChangelogs {
        super::builders::changelogs::ListChangelogs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves the specified Changelog.
    pub fn get_changelog(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::changelogs::GetChangelog {
        super::builders::changelogs::GetChangelog::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::changelogs::ListLocations {
        super::builders::changelogs::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::changelogs::GetLocation {
        super::builders::changelogs::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::changelogs::ListOperations {
        super::builders::changelogs::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::changelogs::GetOperation {
        super::builders::changelogs::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::changelogs::CancelOperation {
        super::builders::changelogs::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Deployments][google.cloud.dialogflow.cx.v3.Deployment].
///
/// [google.cloud.dialogflow.cx.v3.Deployment]: crate::model::Deployment
///
/// # Configuration
///
/// `Deployments` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Deployments` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Deployments` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Deployments {
    inner: Arc<dyn super::stubs::dynamic::Deployments>,
}

impl Deployments {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::Deployments + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::Deployments>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Deployments> {
        super::transport::Deployments::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Deployments> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Deployments::new)
    }

    /// Returns the list of all deployments in the specified
    /// [Environment][google.cloud.dialogflow.cx.v3.Environment].
    ///
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    pub fn list_deployments(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::deployments::ListDeployments {
        super::builders::deployments::ListDeployments::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves the specified
    /// [Deployment][google.cloud.dialogflow.cx.v3.Deployment].
    ///
    /// [google.cloud.dialogflow.cx.v3.Deployment]: crate::model::Deployment
    pub fn get_deployment(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::deployments::GetDeployment {
        super::builders::deployments::GetDeployment::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::deployments::ListLocations {
        super::builders::deployments::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::deployments::GetLocation {
        super::builders::deployments::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::deployments::ListOperations {
        super::builders::deployments::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::deployments::GetOperation {
        super::builders::deployments::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::deployments::CancelOperation {
        super::builders::deployments::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [EntityTypes][google.cloud.dialogflow.cx.v3.EntityType].
///
/// [google.cloud.dialogflow.cx.v3.EntityType]: crate::model::EntityType
///
/// # Configuration
///
/// `EntityTypes` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `EntityTypes` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `EntityTypes` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct EntityTypes {
    inner: Arc<dyn super::stubs::dynamic::EntityTypes>,
}

impl EntityTypes {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::EntityTypes + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::EntityTypes>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::EntityTypes> {
        super::transport::EntityTypes::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::EntityTypes> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::EntityTypes::new)
    }

    /// Retrieves the specified entity type.
    pub fn get_entity_type(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::entity_types::GetEntityType {
        super::builders::entity_types::GetEntityType::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates an entity type in the specified agent.
    ///
    /// Note: You should always train a flow prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    pub fn create_entity_type(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::entity_types::CreateEntityType {
        super::builders::entity_types::CreateEntityType::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the specified entity type.
    ///
    /// Note: You should always train a flow prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    pub fn update_entity_type(
        &self,
        entity_type: impl Into<crate::model::EntityType>,
    ) -> super::builders::entity_types::UpdateEntityType {
        super::builders::entity_types::UpdateEntityType::new(self.inner.clone())
            .set_entity_type(entity_type.into())
    }

    /// Deletes the specified entity type.
    ///
    /// Note: You should always train a flow prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    pub fn delete_entity_type(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::entity_types::DeleteEntityType {
        super::builders::entity_types::DeleteEntityType::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Returns the list of all entity types in the specified agent.
    pub fn list_entity_types(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::entity_types::ListEntityTypes {
        super::builders::entity_types::ListEntityTypes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Exports the selected entity types.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_entity_types(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::entity_types::ExportEntityTypes {
        super::builders::entity_types::ExportEntityTypes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Imports the specified entitytypes into the agent.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_entity_types(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::entity_types::ImportEntityTypes {
        super::builders::entity_types::ImportEntityTypes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::entity_types::ListLocations {
        super::builders::entity_types::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::entity_types::GetLocation {
        super::builders::entity_types::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::entity_types::ListOperations {
        super::builders::entity_types::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::entity_types::GetOperation {
        super::builders::entity_types::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::entity_types::CancelOperation {
        super::builders::entity_types::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing
/// [Environments][google.cloud.dialogflow.cx.v3.Environment].
///
/// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
///
/// # Configuration
///
/// `Environments` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Environments` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Environments` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Environments {
    inner: Arc<dyn super::stubs::dynamic::Environments>,
}

impl Environments {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::Environments + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::Environments>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Environments> {
        super::transport::Environments::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Environments> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Environments::new)
    }

    /// Returns the list of all environments in the specified
    /// [Agent][google.cloud.dialogflow.cx.v3.Agent].
    ///
    /// [google.cloud.dialogflow.cx.v3.Agent]: crate::model::Agent
    pub fn list_environments(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::environments::ListEnvironments {
        super::builders::environments::ListEnvironments::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves the specified
    /// [Environment][google.cloud.dialogflow.cx.v3.Environment].
    ///
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    pub fn get_environment(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::environments::GetEnvironment {
        super::builders::environments::GetEnvironment::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates an [Environment][google.cloud.dialogflow.cx.v3.Environment] in the
    /// specified [Agent][google.cloud.dialogflow.cx.v3.Agent].
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`: [Environment][google.cloud.dialogflow.cx.v3.Environment]
    ///
    /// [google.cloud.dialogflow.cx.v3.Agent]: crate::model::Agent
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_environment(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::environments::CreateEnvironment {
        super::builders::environments::CreateEnvironment::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the specified
    /// [Environment][google.cloud.dialogflow.cx.v3.Environment].
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`: [Environment][google.cloud.dialogflow.cx.v3.Environment]
    ///
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_environment(
        &self,
        environment: impl Into<crate::model::Environment>,
    ) -> super::builders::environments::UpdateEnvironment {
        super::builders::environments::UpdateEnvironment::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Deletes the specified
    /// [Environment][google.cloud.dialogflow.cx.v3.Environment].
    ///
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    pub fn delete_environment(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::environments::DeleteEnvironment {
        super::builders::environments::DeleteEnvironment::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Looks up the history of the specified
    /// [Environment][google.cloud.dialogflow.cx.v3.Environment].
    ///
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    pub fn lookup_environment_history(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::environments::LookupEnvironmentHistory {
        super::builders::environments::LookupEnvironmentHistory::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Kicks off a continuous test under the specified
    /// [Environment][google.cloud.dialogflow.cx.v3.Environment].
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [RunContinuousTestMetadata][google.cloud.dialogflow.cx.v3.RunContinuousTestMetadata]
    /// - `response`:
    ///   [RunContinuousTestResponse][google.cloud.dialogflow.cx.v3.RunContinuousTestResponse]
    ///
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    /// [google.cloud.dialogflow.cx.v3.RunContinuousTestMetadata]: crate::model::RunContinuousTestMetadata
    /// [google.cloud.dialogflow.cx.v3.RunContinuousTestResponse]: crate::model::RunContinuousTestResponse
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn run_continuous_test(
        &self,
        environment: impl Into<std::string::String>,
    ) -> super::builders::environments::RunContinuousTest {
        super::builders::environments::RunContinuousTest::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Fetches a list of continuous test results for a given environment.
    pub fn list_continuous_test_results(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::environments::ListContinuousTestResults {
        super::builders::environments::ListContinuousTestResults::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deploys a flow to the specified
    /// [Environment][google.cloud.dialogflow.cx.v3.Environment].
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [DeployFlowMetadata][google.cloud.dialogflow.cx.v3.DeployFlowMetadata]
    /// - `response`:
    ///   [DeployFlowResponse][google.cloud.dialogflow.cx.v3.DeployFlowResponse]
    ///
    /// [google.cloud.dialogflow.cx.v3.DeployFlowMetadata]: crate::model::DeployFlowMetadata
    /// [google.cloud.dialogflow.cx.v3.DeployFlowResponse]: crate::model::DeployFlowResponse
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn deploy_flow(
        &self,
        environment: impl Into<std::string::String>,
    ) -> super::builders::environments::DeployFlow {
        super::builders::environments::DeployFlow::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::environments::ListLocations {
        super::builders::environments::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::environments::GetLocation {
        super::builders::environments::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::environments::ListOperations {
        super::builders::environments::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::environments::GetOperation {
        super::builders::environments::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::environments::CancelOperation {
        super::builders::environments::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Experiments][google.cloud.dialogflow.cx.v3.Experiment].
///
/// [google.cloud.dialogflow.cx.v3.Experiment]: crate::model::Experiment
///
/// # Configuration
///
/// `Experiments` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Experiments` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Experiments` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Experiments {
    inner: Arc<dyn super::stubs::dynamic::Experiments>,
}

impl Experiments {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::Experiments + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::Experiments>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Experiments> {
        super::transport::Experiments::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Experiments> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Experiments::new)
    }

    /// Returns the list of all experiments in the specified
    /// [Environment][google.cloud.dialogflow.cx.v3.Environment].
    ///
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    pub fn list_experiments(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::experiments::ListExperiments {
        super::builders::experiments::ListExperiments::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves the specified
    /// [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
    ///
    /// [google.cloud.dialogflow.cx.v3.Experiment]: crate::model::Experiment
    pub fn get_experiment(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::experiments::GetExperiment {
        super::builders::experiments::GetExperiment::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates an [Experiment][google.cloud.dialogflow.cx.v3.Experiment] in the
    /// specified [Environment][google.cloud.dialogflow.cx.v3.Environment].
    ///
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    /// [google.cloud.dialogflow.cx.v3.Experiment]: crate::model::Experiment
    pub fn create_experiment(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::experiments::CreateExperiment {
        super::builders::experiments::CreateExperiment::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the specified
    /// [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
    ///
    /// [google.cloud.dialogflow.cx.v3.Experiment]: crate::model::Experiment
    pub fn update_experiment(
        &self,
        experiment: impl Into<crate::model::Experiment>,
    ) -> super::builders::experiments::UpdateExperiment {
        super::builders::experiments::UpdateExperiment::new(self.inner.clone())
            .set_experiment(experiment.into())
    }

    /// Deletes the specified
    /// [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
    ///
    /// [google.cloud.dialogflow.cx.v3.Experiment]: crate::model::Experiment
    pub fn delete_experiment(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::experiments::DeleteExperiment {
        super::builders::experiments::DeleteExperiment::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Starts the specified
    /// [Experiment][google.cloud.dialogflow.cx.v3.Experiment]. This rpc only
    /// changes the state of experiment from PENDING to RUNNING.
    ///
    /// [google.cloud.dialogflow.cx.v3.Experiment]: crate::model::Experiment
    pub fn start_experiment(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::experiments::StartExperiment {
        super::builders::experiments::StartExperiment::new(self.inner.clone()).set_name(name.into())
    }

    /// Stops the specified [Experiment][google.cloud.dialogflow.cx.v3.Experiment].
    /// This rpc only changes the state of experiment from RUNNING to DONE.
    ///
    /// [google.cloud.dialogflow.cx.v3.Experiment]: crate::model::Experiment
    pub fn stop_experiment(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::experiments::StopExperiment {
        super::builders::experiments::StopExperiment::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::experiments::ListLocations {
        super::builders::experiments::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::experiments::GetLocation {
        super::builders::experiments::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::experiments::ListOperations {
        super::builders::experiments::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::experiments::GetOperation {
        super::builders::experiments::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::experiments::CancelOperation {
        super::builders::experiments::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Flows][google.cloud.dialogflow.cx.v3.Flow].
///
/// [google.cloud.dialogflow.cx.v3.Flow]: crate::model::Flow
///
/// # Configuration
///
/// `Flows` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Flows` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Flows` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Flows {
    inner: Arc<dyn super::stubs::dynamic::Flows>,
}

impl Flows {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::Flows + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::Flows>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(conf: gax::options::ClientConfig) -> Result<impl super::stubs::Flows> {
        super::transport::Flows::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Flows> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Flows::new)
    }

    /// Creates a flow in the specified agent.
    ///
    /// Note: You should always train a flow prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    pub fn create_flow(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::flows::CreateFlow {
        super::builders::flows::CreateFlow::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Deletes a specified flow.
    pub fn delete_flow(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::flows::DeleteFlow {
        super::builders::flows::DeleteFlow::new(self.inner.clone()).set_name(name.into())
    }

    /// Returns the list of all flows in the specified agent.
    pub fn list_flows(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::flows::ListFlows {
        super::builders::flows::ListFlows::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Retrieves the specified flow.
    pub fn get_flow(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::flows::GetFlow {
        super::builders::flows::GetFlow::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates the specified flow.
    ///
    /// Note: You should always train a flow prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    pub fn update_flow(
        &self,
        flow: impl Into<crate::model::Flow>,
    ) -> super::builders::flows::UpdateFlow {
        super::builders::flows::UpdateFlow::new(self.inner.clone()).set_flow(flow.into())
    }

    /// Trains the specified flow. Note that only the flow in 'draft' environment
    /// is trained.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`: An [Empty
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
    ///
    /// Note: You should always train a flow prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn train_flow(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::flows::TrainFlow {
        super::builders::flows::TrainFlow::new(self.inner.clone()).set_name(name.into())
    }

    /// Validates the specified flow and creates or updates validation results.
    /// Please call this API after the training is completed to get the complete
    /// validation results.
    pub fn validate_flow(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::flows::ValidateFlow {
        super::builders::flows::ValidateFlow::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets the latest flow validation result. Flow validation is performed
    /// when ValidateFlow is called.
    pub fn get_flow_validation_result(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::flows::GetFlowValidationResult {
        super::builders::flows::GetFlowValidationResult::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Imports the specified flow to the specified agent from a binary file.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`:
    ///   [ImportFlowResponse][google.cloud.dialogflow.cx.v3.ImportFlowResponse]
    ///
    /// Note: You should always train a flow prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    ///
    /// [google.cloud.dialogflow.cx.v3.ImportFlowResponse]: crate::model::ImportFlowResponse
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_flow(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::flows::ImportFlow {
        super::builders::flows::ImportFlow::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Exports the specified flow to a binary file.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`:
    ///   [ExportFlowResponse][google.cloud.dialogflow.cx.v3.ExportFlowResponse]
    ///
    /// Note that resources (e.g. intents, entities, webhooks) that the flow
    /// references will also be exported.
    ///
    /// [google.cloud.dialogflow.cx.v3.ExportFlowResponse]: crate::model::ExportFlowResponse
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_flow(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::flows::ExportFlow {
        super::builders::flows::ExportFlow::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::flows::ListLocations {
        super::builders::flows::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::flows::GetLocation {
        super::builders::flows::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::flows::ListOperations {
        super::builders::flows::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::flows::GetOperation {
        super::builders::flows::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::flows::CancelOperation {
        super::builders::flows::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Generators][google.cloud.dialogflow.cx.v3.Generator]
///
/// [google.cloud.dialogflow.cx.v3.Generator]: crate::model::Generator
///
/// # Configuration
///
/// `Generators` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Generators` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Generators` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Generators {
    inner: Arc<dyn super::stubs::dynamic::Generators>,
}

impl Generators {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::Generators + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::Generators>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Generators> {
        super::transport::Generators::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Generators> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Generators::new)
    }

    /// Returns the list of all generators in the specified agent.
    pub fn list_generators(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::generators::ListGenerators {
        super::builders::generators::ListGenerators::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves the specified generator.
    pub fn get_generator(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::generators::GetGenerator {
        super::builders::generators::GetGenerator::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a generator in the specified agent.
    pub fn create_generator(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::generators::CreateGenerator {
        super::builders::generators::CreateGenerator::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Update the specified generator.
    pub fn update_generator(
        &self,
        generator: impl Into<crate::model::Generator>,
    ) -> super::builders::generators::UpdateGenerator {
        super::builders::generators::UpdateGenerator::new(self.inner.clone())
            .set_generator(generator.into())
    }

    /// Deletes the specified generators.
    pub fn delete_generator(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::generators::DeleteGenerator {
        super::builders::generators::DeleteGenerator::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::generators::ListLocations {
        super::builders::generators::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::generators::GetLocation {
        super::builders::generators::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::generators::ListOperations {
        super::builders::generators::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::generators::GetOperation {
        super::builders::generators::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::generators::CancelOperation {
        super::builders::generators::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Intents][google.cloud.dialogflow.cx.v3.Intent].
///
/// [google.cloud.dialogflow.cx.v3.Intent]: crate::model::Intent
///
/// # Configuration
///
/// `Intents` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Intents` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Intents` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Intents {
    inner: Arc<dyn super::stubs::dynamic::Intents>,
}

impl Intents {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::Intents + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::Intents>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Intents> {
        super::transport::Intents::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Intents> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Intents::new)
    }

    /// Returns the list of all intents in the specified agent.
    pub fn list_intents(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::intents::ListIntents {
        super::builders::intents::ListIntents::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Retrieves the specified intent.
    pub fn get_intent(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::intents::GetIntent {
        super::builders::intents::GetIntent::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates an intent in the specified agent.
    ///
    /// Note: You should always train a flow prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    pub fn create_intent(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::intents::CreateIntent {
        super::builders::intents::CreateIntent::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates the specified intent.
    ///
    /// Note: You should always train a flow prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    pub fn update_intent(
        &self,
        intent: impl Into<crate::model::Intent>,
    ) -> super::builders::intents::UpdateIntent {
        super::builders::intents::UpdateIntent::new(self.inner.clone()).set_intent(intent.into())
    }

    /// Deletes the specified intent.
    ///
    /// Note: You should always train a flow prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    pub fn delete_intent(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::intents::DeleteIntent {
        super::builders::intents::DeleteIntent::new(self.inner.clone()).set_name(name.into())
    }

    /// Imports the specified intents into the agent.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [ImportIntentsMetadata][google.cloud.dialogflow.cx.v3.ImportIntentsMetadata]
    /// - `response`:
    ///   [ImportIntentsResponse][google.cloud.dialogflow.cx.v3.ImportIntentsResponse]
    ///
    /// [google.cloud.dialogflow.cx.v3.ImportIntentsMetadata]: crate::model::ImportIntentsMetadata
    /// [google.cloud.dialogflow.cx.v3.ImportIntentsResponse]: crate::model::ImportIntentsResponse
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_intents(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::intents::ImportIntents {
        super::builders::intents::ImportIntents::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Exports the selected intents.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [ExportIntentsMetadata][google.cloud.dialogflow.cx.v3.ExportIntentsMetadata]
    /// - `response`:
    ///   [ExportIntentsResponse][google.cloud.dialogflow.cx.v3.ExportIntentsResponse]
    ///
    /// [google.cloud.dialogflow.cx.v3.ExportIntentsMetadata]: crate::model::ExportIntentsMetadata
    /// [google.cloud.dialogflow.cx.v3.ExportIntentsResponse]: crate::model::ExportIntentsResponse
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_intents(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::intents::ExportIntents {
        super::builders::intents::ExportIntents::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::intents::ListLocations {
        super::builders::intents::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::intents::GetLocation {
        super::builders::intents::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::intents::ListOperations {
        super::builders::intents::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::intents::GetOperation {
        super::builders::intents::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::intents::CancelOperation {
        super::builders::intents::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Pages][google.cloud.dialogflow.cx.v3.Page].
///
/// [google.cloud.dialogflow.cx.v3.Page]: crate::model::Page
///
/// # Configuration
///
/// `Pages` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Pages` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Pages` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Pages {
    inner: Arc<dyn super::stubs::dynamic::Pages>,
}

impl Pages {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::Pages + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::Pages>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(conf: gax::options::ClientConfig) -> Result<impl super::stubs::Pages> {
        super::transport::Pages::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Pages> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Pages::new)
    }

    /// Returns the list of all pages in the specified flow.
    pub fn list_pages(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::pages::ListPages {
        super::builders::pages::ListPages::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Retrieves the specified page.
    pub fn get_page(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::pages::GetPage {
        super::builders::pages::GetPage::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a page in the specified flow.
    ///
    /// Note: You should always train a flow prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    pub fn create_page(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::pages::CreatePage {
        super::builders::pages::CreatePage::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates the specified page.
    ///
    /// Note: You should always train a flow prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    pub fn update_page(
        &self,
        page: impl Into<crate::model::Page>,
    ) -> super::builders::pages::UpdatePage {
        super::builders::pages::UpdatePage::new(self.inner.clone()).set_page(page.into())
    }

    /// Deletes the specified page.
    ///
    /// Note: You should always train a flow prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    pub fn delete_page(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::pages::DeletePage {
        super::builders::pages::DeletePage::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::pages::ListLocations {
        super::builders::pages::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::pages::GetLocation {
        super::builders::pages::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::pages::ListOperations {
        super::builders::pages::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::pages::GetOperation {
        super::builders::pages::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::pages::CancelOperation {
        super::builders::pages::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing security settings for Dialogflow.
///
/// # Configuration
///
/// `SecuritySettingsService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SecuritySettingsService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SecuritySettingsService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SecuritySettingsService {
    inner: Arc<dyn super::stubs::dynamic::SecuritySettingsService>,
}

impl SecuritySettingsService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::SecuritySettingsService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::SecuritySettingsService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::SecuritySettingsService> {
        super::transport::SecuritySettingsService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::SecuritySettingsService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::SecuritySettingsService::new)
    }

    /// Create security settings in the specified location.
    pub fn create_security_settings(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::security_settings_service::CreateSecuritySettings {
        super::builders::security_settings_service::CreateSecuritySettings::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves the specified
    /// [SecuritySettings][google.cloud.dialogflow.cx.v3.SecuritySettings]. The
    /// returned settings may be stale by up to 1 minute.
    ///
    /// [google.cloud.dialogflow.cx.v3.SecuritySettings]: crate::model::SecuritySettings
    pub fn get_security_settings(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::security_settings_service::GetSecuritySettings {
        super::builders::security_settings_service::GetSecuritySettings::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates the specified
    /// [SecuritySettings][google.cloud.dialogflow.cx.v3.SecuritySettings].
    ///
    /// [google.cloud.dialogflow.cx.v3.SecuritySettings]: crate::model::SecuritySettings
    pub fn update_security_settings(
        &self,
        security_settings: impl Into<crate::model::SecuritySettings>,
    ) -> super::builders::security_settings_service::UpdateSecuritySettings {
        super::builders::security_settings_service::UpdateSecuritySettings::new(self.inner.clone())
            .set_security_settings(security_settings.into())
    }

    /// Returns the list of all security settings in the specified location.
    pub fn list_security_settings(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::security_settings_service::ListSecuritySettings {
        super::builders::security_settings_service::ListSecuritySettings::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes the specified
    /// [SecuritySettings][google.cloud.dialogflow.cx.v3.SecuritySettings].
    ///
    /// [google.cloud.dialogflow.cx.v3.SecuritySettings]: crate::model::SecuritySettings
    pub fn delete_security_settings(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::security_settings_service::DeleteSecuritySettings {
        super::builders::security_settings_service::DeleteSecuritySettings::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::security_settings_service::ListLocations {
        super::builders::security_settings_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::security_settings_service::GetLocation {
        super::builders::security_settings_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::security_settings_service::ListOperations {
        super::builders::security_settings_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::security_settings_service::GetOperation {
        super::builders::security_settings_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::security_settings_service::CancelOperation {
        super::builders::security_settings_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// A session represents an interaction with a user. You retrieve user input
/// and pass it to the
/// [DetectIntent][google.cloud.dialogflow.cx.v3.Sessions.DetectIntent] method to
/// determine user intent and respond.
///
/// [google.cloud.dialogflow.cx.v3.Sessions.DetectIntent]: crate::client::Sessions::detect_intent
///
/// # Configuration
///
/// `Sessions` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Sessions` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Sessions` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Sessions {
    inner: Arc<dyn super::stubs::dynamic::Sessions>,
}

impl Sessions {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::Sessions + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::Sessions>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Sessions> {
        super::transport::Sessions::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Sessions> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Sessions::new)
    }

    /// Processes a natural language query and returns structured, actionable data
    /// as a result. This method is not idempotent, because it may cause session
    /// entity types to be updated, which in turn might affect results of future
    /// queries.
    ///
    /// Note: Always use agent versions for production traffic.
    /// See [Versions and
    /// environments](https://cloud.google.com/dialogflow/cx/docs/concept/version).
    pub fn detect_intent(
        &self,
        session: impl Into<std::string::String>,
    ) -> super::builders::sessions::DetectIntent {
        super::builders::sessions::DetectIntent::new(self.inner.clone()).set_session(session.into())
    }

    /// Returns preliminary intent match results, doesn't change the session
    /// status.
    pub fn match_intent(
        &self,
        session: impl Into<std::string::String>,
    ) -> super::builders::sessions::MatchIntent {
        super::builders::sessions::MatchIntent::new(self.inner.clone()).set_session(session.into())
    }

    /// Fulfills a matched intent returned by
    /// [MatchIntent][google.cloud.dialogflow.cx.v3.Sessions.MatchIntent]. Must be
    /// called after
    /// [MatchIntent][google.cloud.dialogflow.cx.v3.Sessions.MatchIntent], with
    /// input from
    /// [MatchIntentResponse][google.cloud.dialogflow.cx.v3.MatchIntentResponse].
    /// Otherwise, the behavior is undefined.
    ///
    /// [google.cloud.dialogflow.cx.v3.MatchIntentResponse]: crate::model::MatchIntentResponse
    /// [google.cloud.dialogflow.cx.v3.Sessions.MatchIntent]: crate::client::Sessions::match_intent
    pub fn fulfill_intent(
        &self,
        match_intent_request: impl Into<crate::model::MatchIntentRequest>,
    ) -> super::builders::sessions::FulfillIntent {
        super::builders::sessions::FulfillIntent::new(self.inner.clone())
            .set_match_intent_request(match_intent_request.into())
    }

    /// Updates the feedback received from the user for a single turn of the bot
    /// response.
    pub fn submit_answer_feedback(
        &self,
        session: impl Into<std::string::String>,
    ) -> super::builders::sessions::SubmitAnswerFeedback {
        super::builders::sessions::SubmitAnswerFeedback::new(self.inner.clone())
            .set_session(session.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::sessions::ListLocations {
        super::builders::sessions::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::sessions::GetLocation {
        super::builders::sessions::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::sessions::ListOperations {
        super::builders::sessions::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::sessions::GetOperation {
        super::builders::sessions::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::sessions::CancelOperation {
        super::builders::sessions::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing
/// [SessionEntityTypes][google.cloud.dialogflow.cx.v3.SessionEntityType].
///
/// [google.cloud.dialogflow.cx.v3.SessionEntityType]: crate::model::SessionEntityType
///
/// # Configuration
///
/// `SessionEntityTypes` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SessionEntityTypes` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SessionEntityTypes` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SessionEntityTypes {
    inner: Arc<dyn super::stubs::dynamic::SessionEntityTypes>,
}

impl SessionEntityTypes {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::SessionEntityTypes + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::SessionEntityTypes>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::SessionEntityTypes> {
        super::transport::SessionEntityTypes::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::SessionEntityTypes> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::SessionEntityTypes::new)
    }

    /// Returns the list of all session entity types in the specified session.
    pub fn list_session_entity_types(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::session_entity_types::ListSessionEntityTypes {
        super::builders::session_entity_types::ListSessionEntityTypes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves the specified session entity type.
    pub fn get_session_entity_type(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::session_entity_types::GetSessionEntityType {
        super::builders::session_entity_types::GetSessionEntityType::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a session entity type.
    pub fn create_session_entity_type(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::session_entity_types::CreateSessionEntityType {
        super::builders::session_entity_types::CreateSessionEntityType::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the specified session entity type.
    pub fn update_session_entity_type(
        &self,
        session_entity_type: impl Into<crate::model::SessionEntityType>,
    ) -> super::builders::session_entity_types::UpdateSessionEntityType {
        super::builders::session_entity_types::UpdateSessionEntityType::new(self.inner.clone())
            .set_session_entity_type(session_entity_type.into())
    }

    /// Deletes the specified session entity type.
    pub fn delete_session_entity_type(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::session_entity_types::DeleteSessionEntityType {
        super::builders::session_entity_types::DeleteSessionEntityType::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::session_entity_types::ListLocations {
        super::builders::session_entity_types::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::session_entity_types::GetLocation {
        super::builders::session_entity_types::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::session_entity_types::ListOperations {
        super::builders::session_entity_types::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::session_entity_types::GetOperation {
        super::builders::session_entity_types::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::session_entity_types::CancelOperation {
        super::builders::session_entity_types::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Test Cases][google.cloud.dialogflow.cx.v3.TestCase] and
/// [Test Case Results][google.cloud.dialogflow.cx.v3.TestCaseResult].
///
/// [google.cloud.dialogflow.cx.v3.TestCase]: crate::model::TestCase
/// [google.cloud.dialogflow.cx.v3.TestCaseResult]: crate::model::TestCaseResult
///
/// # Configuration
///
/// `TestCases` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `TestCases` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `TestCases` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct TestCases {
    inner: Arc<dyn super::stubs::dynamic::TestCases>,
}

impl TestCases {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::TestCases + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::TestCases>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::TestCases> {
        super::transport::TestCases::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::TestCases> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::TestCases::new)
    }

    /// Fetches a list of test cases for a given agent.
    pub fn list_test_cases(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::test_cases::ListTestCases {
        super::builders::test_cases::ListTestCases::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Batch deletes test cases.
    pub fn batch_delete_test_cases(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::test_cases::BatchDeleteTestCases {
        super::builders::test_cases::BatchDeleteTestCases::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a test case.
    pub fn get_test_case(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::test_cases::GetTestCase {
        super::builders::test_cases::GetTestCase::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a test case for the given agent.
    pub fn create_test_case(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::test_cases::CreateTestCase {
        super::builders::test_cases::CreateTestCase::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the specified test case.
    pub fn update_test_case(
        &self,
        test_case: impl Into<crate::model::TestCase>,
    ) -> super::builders::test_cases::UpdateTestCase {
        super::builders::test_cases::UpdateTestCase::new(self.inner.clone())
            .set_test_case(test_case.into())
    }

    /// Kicks off a test case run.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [RunTestCaseMetadata][google.cloud.dialogflow.cx.v3.RunTestCaseMetadata]
    /// - `response`:
    ///   [RunTestCaseResponse][google.cloud.dialogflow.cx.v3.RunTestCaseResponse]
    ///
    /// [google.cloud.dialogflow.cx.v3.RunTestCaseMetadata]: crate::model::RunTestCaseMetadata
    /// [google.cloud.dialogflow.cx.v3.RunTestCaseResponse]: crate::model::RunTestCaseResponse
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn run_test_case(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::test_cases::RunTestCase {
        super::builders::test_cases::RunTestCase::new(self.inner.clone()).set_name(name.into())
    }

    /// Kicks off a batch run of test cases.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [BatchRunTestCasesMetadata][google.cloud.dialogflow.cx.v3.BatchRunTestCasesMetadata]
    /// - `response`:
    ///   [BatchRunTestCasesResponse][google.cloud.dialogflow.cx.v3.BatchRunTestCasesResponse]
    ///
    /// [google.cloud.dialogflow.cx.v3.BatchRunTestCasesMetadata]: crate::model::BatchRunTestCasesMetadata
    /// [google.cloud.dialogflow.cx.v3.BatchRunTestCasesResponse]: crate::model::BatchRunTestCasesResponse
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_run_test_cases(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::test_cases::BatchRunTestCases {
        super::builders::test_cases::BatchRunTestCases::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Calculates the test coverage for an agent.
    pub fn calculate_coverage(
        &self,
        agent: impl Into<std::string::String>,
    ) -> super::builders::test_cases::CalculateCoverage {
        super::builders::test_cases::CalculateCoverage::new(self.inner.clone())
            .set_agent(agent.into())
    }

    /// Imports the test cases from a Cloud Storage bucket or a local file. It
    /// always creates new test cases and won't overwrite any existing ones. The
    /// provided ID in the imported test case is neglected.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [ImportTestCasesMetadata][google.cloud.dialogflow.cx.v3.ImportTestCasesMetadata]
    /// - `response`:
    ///   [ImportTestCasesResponse][google.cloud.dialogflow.cx.v3.ImportTestCasesResponse]
    ///
    /// [google.cloud.dialogflow.cx.v3.ImportTestCasesMetadata]: crate::model::ImportTestCasesMetadata
    /// [google.cloud.dialogflow.cx.v3.ImportTestCasesResponse]: crate::model::ImportTestCasesResponse
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_test_cases(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::test_cases::ImportTestCases {
        super::builders::test_cases::ImportTestCases::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Exports the test cases under the agent to a Cloud Storage bucket or a local
    /// file. Filter can be applied to export a subset of test cases.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [ExportTestCasesMetadata][google.cloud.dialogflow.cx.v3.ExportTestCasesMetadata]
    /// - `response`:
    ///   [ExportTestCasesResponse][google.cloud.dialogflow.cx.v3.ExportTestCasesResponse]
    ///
    /// [google.cloud.dialogflow.cx.v3.ExportTestCasesMetadata]: crate::model::ExportTestCasesMetadata
    /// [google.cloud.dialogflow.cx.v3.ExportTestCasesResponse]: crate::model::ExportTestCasesResponse
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_test_cases(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::test_cases::ExportTestCases {
        super::builders::test_cases::ExportTestCases::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Fetches the list of run results for the given test case. A maximum of 100
    /// results are kept for each test case.
    pub fn list_test_case_results(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::test_cases::ListTestCaseResults {
        super::builders::test_cases::ListTestCaseResults::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a test case result.
    pub fn get_test_case_result(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::test_cases::GetTestCaseResult {
        super::builders::test_cases::GetTestCaseResult::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::test_cases::ListLocations {
        super::builders::test_cases::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::test_cases::GetLocation {
        super::builders::test_cases::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::test_cases::ListOperations {
        super::builders::test_cases::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::test_cases::GetOperation {
        super::builders::test_cases::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::test_cases::CancelOperation {
        super::builders::test_cases::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing
/// [TransitionRouteGroups][google.cloud.dialogflow.cx.v3.TransitionRouteGroup].
///
/// [google.cloud.dialogflow.cx.v3.TransitionRouteGroup]: crate::model::TransitionRouteGroup
///
/// # Configuration
///
/// `TransitionRouteGroups` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `TransitionRouteGroups` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `TransitionRouteGroups` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct TransitionRouteGroups {
    inner: Arc<dyn super::stubs::dynamic::TransitionRouteGroups>,
}

impl TransitionRouteGroups {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::TransitionRouteGroups + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::TransitionRouteGroups>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::TransitionRouteGroups> {
        super::transport::TransitionRouteGroups::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::TransitionRouteGroups> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::TransitionRouteGroups::new)
    }

    /// Returns the list of all transition route groups in the specified flow.
    pub fn list_transition_route_groups(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::transition_route_groups::ListTransitionRouteGroups {
        super::builders::transition_route_groups::ListTransitionRouteGroups::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves the specified
    /// [TransitionRouteGroup][google.cloud.dialogflow.cx.v3.TransitionRouteGroup].
    ///
    /// [google.cloud.dialogflow.cx.v3.TransitionRouteGroup]: crate::model::TransitionRouteGroup
    pub fn get_transition_route_group(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::transition_route_groups::GetTransitionRouteGroup {
        super::builders::transition_route_groups::GetTransitionRouteGroup::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates an
    /// [TransitionRouteGroup][google.cloud.dialogflow.cx.v3.TransitionRouteGroup]
    /// in the specified flow.
    ///
    /// Note: You should always train a flow prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    ///
    /// [google.cloud.dialogflow.cx.v3.TransitionRouteGroup]: crate::model::TransitionRouteGroup
    pub fn create_transition_route_group(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::transition_route_groups::CreateTransitionRouteGroup {
        super::builders::transition_route_groups::CreateTransitionRouteGroup::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Updates the specified
    /// [TransitionRouteGroup][google.cloud.dialogflow.cx.v3.TransitionRouteGroup].
    ///
    /// Note: You should always train a flow prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    ///
    /// [google.cloud.dialogflow.cx.v3.TransitionRouteGroup]: crate::model::TransitionRouteGroup
    pub fn update_transition_route_group(
        &self,
        transition_route_group: impl Into<crate::model::TransitionRouteGroup>,
    ) -> super::builders::transition_route_groups::UpdateTransitionRouteGroup {
        super::builders::transition_route_groups::UpdateTransitionRouteGroup::new(
            self.inner.clone(),
        )
        .set_transition_route_group(transition_route_group.into())
    }

    /// Deletes the specified
    /// [TransitionRouteGroup][google.cloud.dialogflow.cx.v3.TransitionRouteGroup].
    ///
    /// Note: You should always train a flow prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/cx/docs/concept/training).
    ///
    /// [google.cloud.dialogflow.cx.v3.TransitionRouteGroup]: crate::model::TransitionRouteGroup
    pub fn delete_transition_route_group(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::transition_route_groups::DeleteTransitionRouteGroup {
        super::builders::transition_route_groups::DeleteTransitionRouteGroup::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::transition_route_groups::ListLocations {
        super::builders::transition_route_groups::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::transition_route_groups::GetLocation {
        super::builders::transition_route_groups::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::transition_route_groups::ListOperations {
        super::builders::transition_route_groups::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::transition_route_groups::GetOperation {
        super::builders::transition_route_groups::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::transition_route_groups::CancelOperation {
        super::builders::transition_route_groups::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Versions][google.cloud.dialogflow.cx.v3.Version].
///
/// [google.cloud.dialogflow.cx.v3.Version]: crate::model::Version
///
/// # Configuration
///
/// `Versions` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Versions` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Versions` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Versions {
    inner: Arc<dyn super::stubs::dynamic::Versions>,
}

impl Versions {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::Versions + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::Versions>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Versions> {
        super::transport::Versions::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Versions> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Versions::new)
    }

    /// Returns the list of all versions in the specified
    /// [Flow][google.cloud.dialogflow.cx.v3.Flow].
    ///
    /// [google.cloud.dialogflow.cx.v3.Flow]: crate::model::Flow
    pub fn list_versions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::versions::ListVersions {
        super::builders::versions::ListVersions::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Retrieves the specified [Version][google.cloud.dialogflow.cx.v3.Version].
    ///
    /// [google.cloud.dialogflow.cx.v3.Version]: crate::model::Version
    pub fn get_version(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::versions::GetVersion {
        super::builders::versions::GetVersion::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a [Version][google.cloud.dialogflow.cx.v3.Version] in the specified
    /// [Flow][google.cloud.dialogflow.cx.v3.Flow].
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [CreateVersionOperationMetadata][google.cloud.dialogflow.cx.v3.CreateVersionOperationMetadata]
    /// - `response`: [Version][google.cloud.dialogflow.cx.v3.Version]
    ///
    /// [google.cloud.dialogflow.cx.v3.CreateVersionOperationMetadata]: crate::model::CreateVersionOperationMetadata
    /// [google.cloud.dialogflow.cx.v3.Flow]: crate::model::Flow
    /// [google.cloud.dialogflow.cx.v3.Version]: crate::model::Version
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_version(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::versions::CreateVersion {
        super::builders::versions::CreateVersion::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates the specified [Version][google.cloud.dialogflow.cx.v3.Version].
    ///
    /// [google.cloud.dialogflow.cx.v3.Version]: crate::model::Version
    pub fn update_version(
        &self,
        version: impl Into<crate::model::Version>,
    ) -> super::builders::versions::UpdateVersion {
        super::builders::versions::UpdateVersion::new(self.inner.clone())
            .set_version(version.into())
    }

    /// Deletes the specified [Version][google.cloud.dialogflow.cx.v3.Version].
    ///
    /// [google.cloud.dialogflow.cx.v3.Version]: crate::model::Version
    pub fn delete_version(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::versions::DeleteVersion {
        super::builders::versions::DeleteVersion::new(self.inner.clone()).set_name(name.into())
    }

    /// Loads resources in the specified version to the draft flow.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`: An [Empty
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn load_version(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::versions::LoadVersion {
        super::builders::versions::LoadVersion::new(self.inner.clone()).set_name(name.into())
    }

    /// Compares the specified base version with target version.
    pub fn compare_versions(
        &self,
        base_version: impl Into<std::string::String>,
    ) -> super::builders::versions::CompareVersions {
        super::builders::versions::CompareVersions::new(self.inner.clone())
            .set_base_version(base_version.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::versions::ListLocations {
        super::builders::versions::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::versions::GetLocation {
        super::builders::versions::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::versions::ListOperations {
        super::builders::versions::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::versions::GetOperation {
        super::builders::versions::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::versions::CancelOperation {
        super::builders::versions::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Webhooks][google.cloud.dialogflow.cx.v3.Webhook].
///
/// [google.cloud.dialogflow.cx.v3.Webhook]: crate::model::Webhook
///
/// # Configuration
///
/// `Webhooks` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Webhooks` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Webhooks` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Webhooks {
    inner: Arc<dyn super::stubs::dynamic::Webhooks>,
}

impl Webhooks {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stubs::Webhooks + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stubs::dynamic::Webhooks>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Webhooks> {
        super::transport::Webhooks::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stubs::Webhooks> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Webhooks::new)
    }

    /// Returns the list of all webhooks in the specified agent.
    pub fn list_webhooks(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::webhooks::ListWebhooks {
        super::builders::webhooks::ListWebhooks::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Retrieves the specified webhook.
    pub fn get_webhook(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::webhooks::GetWebhook {
        super::builders::webhooks::GetWebhook::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a webhook in the specified agent.
    pub fn create_webhook(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builders::webhooks::CreateWebhook {
        super::builders::webhooks::CreateWebhook::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates the specified webhook.
    pub fn update_webhook(
        &self,
        webhook: impl Into<crate::model::Webhook>,
    ) -> super::builders::webhooks::UpdateWebhook {
        super::builders::webhooks::UpdateWebhook::new(self.inner.clone())
            .set_webhook(webhook.into())
    }

    /// Deletes the specified webhook.
    pub fn delete_webhook(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::webhooks::DeleteWebhook {
        super::builders::webhooks::DeleteWebhook::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::webhooks::ListLocations {
        super::builders::webhooks::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::webhooks::GetLocation {
        super::builders::webhooks::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::webhooks::ListOperations {
        super::builders::webhooks::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::webhooks::GetOperation {
        super::builders::webhooks::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builders::webhooks::CancelOperation {
        super::builders::webhooks::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}
