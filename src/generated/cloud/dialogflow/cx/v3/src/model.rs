// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gaxi;
extern crate gtype;
extern crate lazy_static;
extern crate location;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate rpc;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Hierarchical advanced settings for agent/flow/page/fulfillment/parameter.
/// Settings exposed at lower level overrides the settings exposed at higher
/// level. Overriding occurs at the sub-setting level. For example, the
/// playback_interruption_settings at fulfillment level only overrides the
/// playback_interruption_settings at the agent level, leaving other settings
/// at the agent level unchanged.
///
/// DTMF settings does not override each other. DTMF settings set at different
/// levels define DTMF detections running in parallel.
///
/// Hierarchy: Agent->Flow->Page->Fulfillment/Parameter.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AdvancedSettings {
    /// If present, incoming audio is exported by Dialogflow to the configured
    /// Google Cloud Storage destination.
    /// Exposed at the following levels:
    ///
    /// - Agent level
    /// - Flow level
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub audio_export_gcs_destination: std::option::Option<crate::model::GcsDestination>,

    /// Settings for speech to text detection.
    /// Exposed at the following levels:
    ///
    /// - Agent level
    /// - Flow level
    /// - Page level
    /// - Parameter level
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub speech_settings: std::option::Option<crate::model::advanced_settings::SpeechSettings>,

    /// Settings for DTMF.
    /// Exposed at the following levels:
    ///
    /// - Agent level
    /// - Flow level
    /// - Page level
    /// - Parameter level.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub dtmf_settings: std::option::Option<crate::model::advanced_settings::DtmfSettings>,

    /// Settings for logging.
    /// Settings for Dialogflow History, Contact Center messages, StackDriver logs,
    /// and speech logging.
    /// Exposed at the following levels:
    ///
    /// - Agent level.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub logging_settings: std::option::Option<crate::model::advanced_settings::LoggingSettings>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AdvancedSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [audio_export_gcs_destination][crate::model::AdvancedSettings::audio_export_gcs_destination].
    pub fn set_audio_export_gcs_destination<
        T: std::convert::Into<std::option::Option<crate::model::GcsDestination>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.audio_export_gcs_destination = v.into();
        self
    }

    /// Sets the value of [speech_settings][crate::model::AdvancedSettings::speech_settings].
    pub fn set_speech_settings<
        T: std::convert::Into<std::option::Option<crate::model::advanced_settings::SpeechSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.speech_settings = v.into();
        self
    }

    /// Sets the value of [dtmf_settings][crate::model::AdvancedSettings::dtmf_settings].
    pub fn set_dtmf_settings<
        T: std::convert::Into<std::option::Option<crate::model::advanced_settings::DtmfSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.dtmf_settings = v.into();
        self
    }

    /// Sets the value of [logging_settings][crate::model::AdvancedSettings::logging_settings].
    pub fn set_logging_settings<
        T: std::convert::Into<std::option::Option<crate::model::advanced_settings::LoggingSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.logging_settings = v.into();
        self
    }
}

impl wkt::message::Message for AdvancedSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.AdvancedSettings"
    }
}

/// Defines additional types related to [AdvancedSettings].
pub mod advanced_settings {
    #[allow(unused_imports)]
    use super::*;

    /// Define behaviors of speech to text detection.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SpeechSettings {
        /// Sensitivity of the speech model that detects the end of speech.
        /// Scale from 0 to 100.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub endpointer_sensitivity: i32,

        /// Timeout before detecting no speech.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub no_speech_timeout: std::option::Option<wkt::Duration>,

        /// Use timeout based endpointing, interpreting endpointer sensitivity as
        /// seconds of timeout value.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub use_timeout_based_endpointing: bool,

        /// Mapping from language to Speech-to-Text model. The mapped Speech-to-Text
        /// model will be selected for requests from its corresponding language.
        /// For more information, see
        /// [Speech
        /// models](https://cloud.google.com/dialogflow/cx/docs/concept/speech-models).
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub models: std::collections::HashMap<std::string::String, std::string::String>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SpeechSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [endpointer_sensitivity][crate::model::advanced_settings::SpeechSettings::endpointer_sensitivity].
        pub fn set_endpointer_sensitivity<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.endpointer_sensitivity = v.into();
            self
        }

        /// Sets the value of [no_speech_timeout][crate::model::advanced_settings::SpeechSettings::no_speech_timeout].
        pub fn set_no_speech_timeout<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.no_speech_timeout = v.into();
            self
        }

        /// Sets the value of [use_timeout_based_endpointing][crate::model::advanced_settings::SpeechSettings::use_timeout_based_endpointing].
        pub fn set_use_timeout_based_endpointing<T: std::convert::Into<bool>>(
            mut self,
            v: T,
        ) -> Self {
            self.use_timeout_based_endpointing = v.into();
            self
        }

        /// Sets the value of [models][crate::model::advanced_settings::SpeechSettings::models].
        pub fn set_models<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.models = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl wkt::message::Message for SpeechSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.AdvancedSettings.SpeechSettings"
        }
    }

    /// Define behaviors for DTMF (dual tone multi frequency).
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct DtmfSettings {
        /// If true, incoming audio is processed for DTMF (dual tone multi frequency)
        /// events. For example, if the caller presses a button on their telephone
        /// keypad and DTMF processing is enabled, Dialogflow will detect the
        /// event (e.g. a "3" was pressed) in the incoming audio and pass the event
        /// to the bot to drive business logic (e.g. when 3 is pressed, return the
        /// account balance).
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enabled: bool,

        /// Max length of DTMF digits.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub max_digits: i32,

        /// The digit that terminates a DTMF digit sequence.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub finish_digit: std::string::String,

        /// Interdigit timeout setting for matching dtmf input to regex.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub interdigit_timeout_duration: std::option::Option<wkt::Duration>,

        /// Endpoint timeout setting for matching dtmf input to regex.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub endpointing_timeout_duration: std::option::Option<wkt::Duration>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl DtmfSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [enabled][crate::model::advanced_settings::DtmfSettings::enabled].
        pub fn set_enabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enabled = v.into();
            self
        }

        /// Sets the value of [max_digits][crate::model::advanced_settings::DtmfSettings::max_digits].
        pub fn set_max_digits<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.max_digits = v.into();
            self
        }

        /// Sets the value of [finish_digit][crate::model::advanced_settings::DtmfSettings::finish_digit].
        pub fn set_finish_digit<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.finish_digit = v.into();
            self
        }

        /// Sets the value of [interdigit_timeout_duration][crate::model::advanced_settings::DtmfSettings::interdigit_timeout_duration].
        pub fn set_interdigit_timeout_duration<
            T: std::convert::Into<std::option::Option<wkt::Duration>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.interdigit_timeout_duration = v.into();
            self
        }

        /// Sets the value of [endpointing_timeout_duration][crate::model::advanced_settings::DtmfSettings::endpointing_timeout_duration].
        pub fn set_endpointing_timeout_duration<
            T: std::convert::Into<std::option::Option<wkt::Duration>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.endpointing_timeout_duration = v.into();
            self
        }
    }

    impl wkt::message::Message for DtmfSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.AdvancedSettings.DtmfSettings"
        }
    }

    /// Define behaviors on logging.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct LoggingSettings {
        /// Enables Google Cloud Logging.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enable_stackdriver_logging: bool,

        /// Enables DF Interaction logging.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enable_interaction_logging: bool,

        /// Enables consent-based end-user input redaction, if true, a pre-defined
        /// session parameter `$session.params.conversation-redaction` will be
        /// used to determine if the utterance should be redacted.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enable_consent_based_redaction: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl LoggingSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [enable_stackdriver_logging][crate::model::advanced_settings::LoggingSettings::enable_stackdriver_logging].
        pub fn set_enable_stackdriver_logging<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enable_stackdriver_logging = v.into();
            self
        }

        /// Sets the value of [enable_interaction_logging][crate::model::advanced_settings::LoggingSettings::enable_interaction_logging].
        pub fn set_enable_interaction_logging<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enable_interaction_logging = v.into();
            self
        }

        /// Sets the value of [enable_consent_based_redaction][crate::model::advanced_settings::LoggingSettings::enable_consent_based_redaction].
        pub fn set_enable_consent_based_redaction<T: std::convert::Into<bool>>(
            mut self,
            v: T,
        ) -> Self {
            self.enable_consent_based_redaction = v.into();
            self
        }
    }

    impl wkt::message::Message for LoggingSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.AdvancedSettings.LoggingSettings"
        }
    }
}

/// Settings related to speech recognition.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SpeechToTextSettings {
    /// Whether to use speech adaptation for speech recognition.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_speech_adaptation: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SpeechToTextSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [enable_speech_adaptation][crate::model::SpeechToTextSettings::enable_speech_adaptation].
    pub fn set_enable_speech_adaptation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_speech_adaptation = v.into();
        self
    }
}

impl wkt::message::Message for SpeechToTextSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.SpeechToTextSettings"
    }
}

/// Agents are best described as Natural Language Understanding (NLU) modules
/// that transform user requests into actionable data. You can include agents
/// in your app, product, or service to determine user intent and respond to the
/// user in a natural way.
///
/// After you create an agent, you can add
/// [Intents][google.cloud.dialogflow.cx.v3.Intent], [Entity
/// Types][google.cloud.dialogflow.cx.v3.EntityType],
/// [Flows][google.cloud.dialogflow.cx.v3.Flow],
/// [Fulfillments][google.cloud.dialogflow.cx.v3.Fulfillment],
/// [Webhooks][google.cloud.dialogflow.cx.v3.Webhook],
/// [TransitionRouteGroups][google.cloud.dialogflow.cx.v3.TransitionRouteGroup]
/// and so on to manage the conversation flows.
///
/// [google.cloud.dialogflow.cx.v3.EntityType]: crate::model::EntityType
/// [google.cloud.dialogflow.cx.v3.Flow]: crate::model::Flow
/// [google.cloud.dialogflow.cx.v3.Fulfillment]: crate::model::Fulfillment
/// [google.cloud.dialogflow.cx.v3.Intent]: crate::model::Intent
/// [google.cloud.dialogflow.cx.v3.TransitionRouteGroup]: crate::model::TransitionRouteGroup
/// [google.cloud.dialogflow.cx.v3.Webhook]: crate::model::Webhook
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Agent {
    /// The unique identifier of the agent.
    /// Required for the
    /// [Agents.UpdateAgent][google.cloud.dialogflow.cx.v3.Agents.UpdateAgent]
    /// method.
    /// [Agents.CreateAgent][google.cloud.dialogflow.cx.v3.Agents.CreateAgent]
    /// populates the name automatically.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Agents.CreateAgent]: crate::client::Agents::create_agent
    /// [google.cloud.dialogflow.cx.v3.Agents.UpdateAgent]: crate::client::Agents::update_agent
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The human-readable name of the agent, unique within the location.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Required. Immutable. The default language of the agent as a language tag.
    /// See [Language
    /// Support](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// for a list of the currently supported language codes.
    /// This field cannot be set by the
    /// [Agents.UpdateAgent][google.cloud.dialogflow.cx.v3.Agents.UpdateAgent]
    /// method.
    ///
    /// [google.cloud.dialogflow.cx.v3.Agents.UpdateAgent]: crate::client::Agents::update_agent
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub default_language_code: std::string::String,

    /// The list of all languages supported by the agent (except for the
    /// `default_language_code`).
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub supported_language_codes: std::vec::Vec<std::string::String>,

    /// Required. The time zone of the agent from the [time zone
    /// database](https://www.iana.org/time-zones), e.g., America/New_York,
    /// Europe/Paris.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub time_zone: std::string::String,

    /// The description of the agent. The maximum length is 500 characters. If
    /// exceeded, the request is rejected.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// The URI of the agent's avatar. Avatars are used throughout the Dialogflow
    /// console and in the self-hosted [Web
    /// Demo](https://cloud.google.com/dialogflow/docs/integrations/web-demo)
    /// integration.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub avatar_uri: std::string::String,

    /// Speech recognition related settings.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub speech_to_text_settings: std::option::Option<crate::model::SpeechToTextSettings>,

    /// Immutable. Name of the start flow in this agent. A start flow will be
    /// automatically created when the agent is created, and can only be deleted by
    /// deleting the agent. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub start_flow: std::string::String,

    /// Name of the
    /// [SecuritySettings][google.cloud.dialogflow.cx.v3.SecuritySettings]
    /// reference for the agent. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/securitySettings/<SecuritySettingsID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.SecuritySettings]: crate::model::SecuritySettings
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub security_settings: std::string::String,

    /// Indicates if stackdriver logging is enabled for the agent.
    /// Please use
    /// [agent.advanced_settings][google.cloud.dialogflow.cx.v3.AdvancedSettings.LoggingSettings]
    /// instead.
    ///
    /// [google.cloud.dialogflow.cx.v3.AdvancedSettings.LoggingSettings]: crate::model::advanced_settings::LoggingSettings
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[deprecated]
    pub enable_stackdriver_logging: bool,

    /// Indicates if automatic spell correction is enabled in detect intent
    /// requests.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_spell_correction: bool,

    /// Optional. Enable training multi-lingual models for this agent. These models
    /// will be trained on all the languages supported by the agent.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_multi_language_training: bool,

    /// Indicates whether the agent is locked for changes. If the agent is locked,
    /// modifications to the agent will be rejected except for [RestoreAgent][].
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub locked: bool,

    /// Hierarchical advanced settings for this agent. The settings exposed at the
    /// lower level overrides the settings exposed at the higher level.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub advanced_settings: std::option::Option<crate::model::AdvancedSettings>,

    /// Git integration settings for this agent.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub git_integration_settings: std::option::Option<crate::model::agent::GitIntegrationSettings>,

    /// Settings on instructing the speech synthesizer on how to generate the
    /// output audio content.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub text_to_speech_settings: std::option::Option<crate::model::TextToSpeechSettings>,

    /// Gen App Builder-related agent-level settings.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub gen_app_builder_settings: std::option::Option<crate::model::agent::GenAppBuilderSettings>,

    /// Optional. Answer feedback collection settings.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub answer_feedback_settings: std::option::Option<crate::model::agent::AnswerFeedbackSettings>,

    /// Optional. Settings for end user personalization.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub personalization_settings: std::option::Option<crate::model::agent::PersonalizationSettings>,

    /// Optional. Settings for custom client certificates.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub client_certificate_settings:
        std::option::Option<crate::model::agent::ClientCertificateSettings>,

    /// Optional. Output only. A read only boolean field reflecting Zone Separation
    /// status of the agent.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub satisfies_pzs: std::option::Option<bool>,

    /// Optional. Output only. A read only boolean field reflecting Zone Isolation
    /// status of the agent.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub satisfies_pzi: std::option::Option<bool>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Agent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Agent::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Agent::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [default_language_code][crate::model::Agent::default_language_code].
    pub fn set_default_language_code<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.default_language_code = v.into();
        self
    }

    /// Sets the value of [time_zone][crate::model::Agent::time_zone].
    pub fn set_time_zone<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.time_zone = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Agent::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [avatar_uri][crate::model::Agent::avatar_uri].
    pub fn set_avatar_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.avatar_uri = v.into();
        self
    }

    /// Sets the value of [speech_to_text_settings][crate::model::Agent::speech_to_text_settings].
    pub fn set_speech_to_text_settings<
        T: std::convert::Into<std::option::Option<crate::model::SpeechToTextSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.speech_to_text_settings = v.into();
        self
    }

    /// Sets the value of [start_flow][crate::model::Agent::start_flow].
    pub fn set_start_flow<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.start_flow = v.into();
        self
    }

    /// Sets the value of [security_settings][crate::model::Agent::security_settings].
    pub fn set_security_settings<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.security_settings = v.into();
        self
    }

    /// Sets the value of [enable_stackdriver_logging][crate::model::Agent::enable_stackdriver_logging].
    #[deprecated]
    pub fn set_enable_stackdriver_logging<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_stackdriver_logging = v.into();
        self
    }

    /// Sets the value of [enable_spell_correction][crate::model::Agent::enable_spell_correction].
    pub fn set_enable_spell_correction<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_spell_correction = v.into();
        self
    }

    /// Sets the value of [enable_multi_language_training][crate::model::Agent::enable_multi_language_training].
    pub fn set_enable_multi_language_training<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_multi_language_training = v.into();
        self
    }

    /// Sets the value of [locked][crate::model::Agent::locked].
    pub fn set_locked<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.locked = v.into();
        self
    }

    /// Sets the value of [advanced_settings][crate::model::Agent::advanced_settings].
    pub fn set_advanced_settings<
        T: std::convert::Into<std::option::Option<crate::model::AdvancedSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.advanced_settings = v.into();
        self
    }

    /// Sets the value of [git_integration_settings][crate::model::Agent::git_integration_settings].
    pub fn set_git_integration_settings<
        T: std::convert::Into<std::option::Option<crate::model::agent::GitIntegrationSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.git_integration_settings = v.into();
        self
    }

    /// Sets the value of [text_to_speech_settings][crate::model::Agent::text_to_speech_settings].
    pub fn set_text_to_speech_settings<
        T: std::convert::Into<std::option::Option<crate::model::TextToSpeechSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.text_to_speech_settings = v.into();
        self
    }

    /// Sets the value of [gen_app_builder_settings][crate::model::Agent::gen_app_builder_settings].
    pub fn set_gen_app_builder_settings<
        T: std::convert::Into<std::option::Option<crate::model::agent::GenAppBuilderSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.gen_app_builder_settings = v.into();
        self
    }

    /// Sets the value of [answer_feedback_settings][crate::model::Agent::answer_feedback_settings].
    pub fn set_answer_feedback_settings<
        T: std::convert::Into<std::option::Option<crate::model::agent::AnswerFeedbackSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.answer_feedback_settings = v.into();
        self
    }

    /// Sets the value of [personalization_settings][crate::model::Agent::personalization_settings].
    pub fn set_personalization_settings<
        T: std::convert::Into<std::option::Option<crate::model::agent::PersonalizationSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.personalization_settings = v.into();
        self
    }

    /// Sets the value of [client_certificate_settings][crate::model::Agent::client_certificate_settings].
    pub fn set_client_certificate_settings<
        T: std::convert::Into<std::option::Option<crate::model::agent::ClientCertificateSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.client_certificate_settings = v.into();
        self
    }

    /// Sets the value of [satisfies_pzs][crate::model::Agent::satisfies_pzs].
    pub fn set_satisfies_pzs<T: std::convert::Into<std::option::Option<bool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.satisfies_pzs = v.into();
        self
    }

    /// Sets the value of [satisfies_pzi][crate::model::Agent::satisfies_pzi].
    pub fn set_satisfies_pzi<T: std::convert::Into<std::option::Option<bool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.satisfies_pzi = v.into();
        self
    }

    /// Sets the value of [supported_language_codes][crate::model::Agent::supported_language_codes].
    pub fn set_supported_language_codes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.supported_language_codes = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Agent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.Agent"
    }
}

/// Defines additional types related to [Agent].
pub mod agent {
    #[allow(unused_imports)]
    use super::*;

    /// Settings for connecting to Git repository for an agent.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct GitIntegrationSettings {
        /// The git settings to specific systems.
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub git_settings:
            std::option::Option<crate::model::agent::git_integration_settings::GitSettings>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl GitIntegrationSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [git_settings][crate::model::agent::GitIntegrationSettings::git_settings].
        ///
        /// Note that all the setters affecting `git_settings` are mutually
        /// exclusive.
        pub fn set_git_settings<
            T: std::convert::Into<
                    std::option::Option<crate::model::agent::git_integration_settings::GitSettings>,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.git_settings = v.into();
            self
        }

        /// The value of [git_settings][crate::model::agent::GitIntegrationSettings::git_settings]
        /// if it holds a `GithubSettings`, `None` if the field is not set or
        /// holds a different branch.
        pub fn github_settings(
            &self,
        ) -> std::option::Option<
            &std::boxed::Box<crate::model::agent::git_integration_settings::GithubSettings>,
        > {
            #[allow(unreachable_patterns)]
            self.git_settings.as_ref().and_then(|v| match v {
                crate::model::agent::git_integration_settings::GitSettings::GithubSettings(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [git_settings][crate::model::agent::GitIntegrationSettings::git_settings]
        /// to hold a `GithubSettings`.
        ///
        /// Note that all the setters affecting `git_settings` are
        /// mutually exclusive.
        pub fn set_github_settings<
            T: std::convert::Into<
                    std::boxed::Box<crate::model::agent::git_integration_settings::GithubSettings>,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.git_settings = std::option::Option::Some(
                crate::model::agent::git_integration_settings::GitSettings::GithubSettings(
                    v.into(),
                ),
            );
            self
        }
    }

    impl wkt::message::Message for GitIntegrationSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Agent.GitIntegrationSettings"
        }
    }

    /// Defines additional types related to [GitIntegrationSettings].
    pub mod git_integration_settings {
        #[allow(unused_imports)]
        use super::*;

        /// Settings of integration with GitHub.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct GithubSettings {
            /// The unique repository display name for the GitHub repository.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub display_name: std::string::String,

            /// The GitHub repository URI related to the agent.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub repository_uri: std::string::String,

            /// The branch of the GitHub repository tracked for this agent.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub tracking_branch: std::string::String,

            /// The access token used to authenticate the access to the GitHub
            /// repository.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub access_token: std::string::String,

            /// A list of branches configured to be used from Dialogflow.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub branches: std::vec::Vec<std::string::String>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl GithubSettings {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [display_name][crate::model::agent::git_integration_settings::GithubSettings::display_name].
            pub fn set_display_name<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.display_name = v.into();
                self
            }

            /// Sets the value of [repository_uri][crate::model::agent::git_integration_settings::GithubSettings::repository_uri].
            pub fn set_repository_uri<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.repository_uri = v.into();
                self
            }

            /// Sets the value of [tracking_branch][crate::model::agent::git_integration_settings::GithubSettings::tracking_branch].
            pub fn set_tracking_branch<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.tracking_branch = v.into();
                self
            }

            /// Sets the value of [access_token][crate::model::agent::git_integration_settings::GithubSettings::access_token].
            pub fn set_access_token<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.access_token = v.into();
                self
            }

            /// Sets the value of [branches][crate::model::agent::git_integration_settings::GithubSettings::branches].
            pub fn set_branches<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<std::string::String>,
            {
                use std::iter::Iterator;
                self.branches = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for GithubSettings {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.cx.v3.Agent.GitIntegrationSettings.GithubSettings"
            }
        }

        /// The git settings to specific systems.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum GitSettings {
            /// GitHub settings.
            GithubSettings(
                std::boxed::Box<crate::model::agent::git_integration_settings::GithubSettings>,
            ),
        }
    }

    /// Settings for Gen App Builder.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct GenAppBuilderSettings {
        /// Required. The full name of the Gen App Builder engine related to this
        /// agent if there is one. Format: `projects/{Project ID}/locations/{Location
        /// ID}/collections/{Collection ID}/engines/{Engine ID}`
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub engine: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl GenAppBuilderSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [engine][crate::model::agent::GenAppBuilderSettings::engine].
        pub fn set_engine<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.engine = v.into();
            self
        }
    }

    impl wkt::message::Message for GenAppBuilderSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Agent.GenAppBuilderSettings"
        }
    }

    /// Settings for answer feedback collection.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AnswerFeedbackSettings {
        /// Optional. If enabled, end users will be able to provide
        /// [answer feedback][google.cloud.dialogflow.cx.v3.AnswerFeedback] to
        /// Dialogflow responses. Feature works only if interaction logging is
        /// enabled in the Dialogflow agent.
        ///
        /// [google.cloud.dialogflow.cx.v3.AnswerFeedback]: crate::model::AnswerFeedback
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enable_answer_feedback: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl AnswerFeedbackSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [enable_answer_feedback][crate::model::agent::AnswerFeedbackSettings::enable_answer_feedback].
        pub fn set_enable_answer_feedback<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enable_answer_feedback = v.into();
            self
        }
    }

    impl wkt::message::Message for AnswerFeedbackSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Agent.AnswerFeedbackSettings"
        }
    }

    /// Settings for end user personalization.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct PersonalizationSettings {
        /// Optional. Default end user metadata, used when processing DetectIntent
        /// requests. Recommended to be filled as a template instead of hard-coded
        /// value, for example { "age": "$session.params.age" }. The data will be
        /// merged with the
        /// [QueryParameters.end_user_metadata][google.cloud.dialogflow.cx.v3.QueryParameters.end_user_metadata]
        /// in
        /// [DetectIntentRequest.query_params][google.cloud.dialogflow.cx.v3.DetectIntentRequest.query_params]
        /// during query processing.
        ///
        /// [google.cloud.dialogflow.cx.v3.DetectIntentRequest.query_params]: crate::model::DetectIntentRequest::query_params
        /// [google.cloud.dialogflow.cx.v3.QueryParameters.end_user_metadata]: crate::model::QueryParameters::end_user_metadata
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub default_end_user_metadata: std::option::Option<wkt::Struct>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl PersonalizationSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [default_end_user_metadata][crate::model::agent::PersonalizationSettings::default_end_user_metadata].
        pub fn set_default_end_user_metadata<
            T: std::convert::Into<std::option::Option<wkt::Struct>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.default_end_user_metadata = v.into();
            self
        }
    }

    impl wkt::message::Message for PersonalizationSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Agent.PersonalizationSettings"
        }
    }

    /// Settings for custom client certificates.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ClientCertificateSettings {
        /// Required. The ssl certificate encoded in PEM format. This string must
        /// include the begin header and end footer lines.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub ssl_certificate: std::string::String,

        /// Required. The name of the SecretManager secret version resource storing
        /// the private key encoded in PEM format. Format:
        /// `projects/{project}/secrets/{secret}/versions/{version}`
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub private_key: std::string::String,

        /// Optional. The name of the SecretManager secret version resource storing
        /// the passphrase. 'passphrase' should be left unset if the private key is
        /// not encrypted.
        /// Format: `projects/{project}/secrets/{secret}/versions/{version}`
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub passphrase: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ClientCertificateSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [ssl_certificate][crate::model::agent::ClientCertificateSettings::ssl_certificate].
        pub fn set_ssl_certificate<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.ssl_certificate = v.into();
            self
        }

        /// Sets the value of [private_key][crate::model::agent::ClientCertificateSettings::private_key].
        pub fn set_private_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.private_key = v.into();
            self
        }

        /// Sets the value of [passphrase][crate::model::agent::ClientCertificateSettings::passphrase].
        pub fn set_passphrase<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.passphrase = v.into();
            self
        }
    }

    impl wkt::message::Message for ClientCertificateSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Agent.ClientCertificateSettings"
        }
    }
}

/// The request message for
/// [Agents.ListAgents][google.cloud.dialogflow.cx.v3.Agents.ListAgents].
///
/// [google.cloud.dialogflow.cx.v3.Agents.ListAgents]: crate::client::Agents::list_agents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListAgentsRequest {
    /// Required. The location to list all agents for.
    /// Format: `projects/<ProjectID>/locations/<LocationID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return in a single page. By default 100 and
    /// at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListAgentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListAgentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListAgentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListAgentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListAgentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListAgentsRequest"
    }
}

/// The response message for
/// [Agents.ListAgents][google.cloud.dialogflow.cx.v3.Agents.ListAgents].
///
/// [google.cloud.dialogflow.cx.v3.Agents.ListAgents]: crate::client::Agents::list_agents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListAgentsResponse {
    /// The list of agents. There will be a maximum number of items returned based
    /// on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub agents: std::vec::Vec<crate::model::Agent>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListAgentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListAgentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [agents][crate::model::ListAgentsResponse::agents].
    pub fn set_agents<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Agent>,
    {
        use std::iter::Iterator;
        self.agents = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListAgentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListAgentsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListAgentsResponse {
    type PageItem = crate::model::Agent;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.agents
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Agents.GetAgent][google.cloud.dialogflow.cx.v3.Agents.GetAgent].
///
/// [google.cloud.dialogflow.cx.v3.Agents.GetAgent]: crate::client::Agents::get_agent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetAgentRequest {
    /// Required. The name of the agent.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetAgentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetAgentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetAgentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetAgentRequest"
    }
}

/// The request message for
/// [Agents.CreateAgent][google.cloud.dialogflow.cx.v3.Agents.CreateAgent].
///
/// [google.cloud.dialogflow.cx.v3.Agents.CreateAgent]: crate::client::Agents::create_agent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateAgentRequest {
    /// Required. The location to create a agent for.
    /// Format: `projects/<ProjectID>/locations/<LocationID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The agent to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub agent: std::option::Option<crate::model::Agent>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateAgentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateAgentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [agent][crate::model::CreateAgentRequest::agent].
    pub fn set_agent<T: std::convert::Into<std::option::Option<crate::model::Agent>>>(
        mut self,
        v: T,
    ) -> Self {
        self.agent = v.into();
        self
    }
}

impl wkt::message::Message for CreateAgentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CreateAgentRequest"
    }
}

/// The request message for
/// [Agents.UpdateAgent][google.cloud.dialogflow.cx.v3.Agents.UpdateAgent].
///
/// [google.cloud.dialogflow.cx.v3.Agents.UpdateAgent]: crate::client::Agents::update_agent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateAgentRequest {
    /// Required. The agent to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub agent: std::option::Option<crate::model::Agent>,

    /// The mask to control which fields get updated. If the mask is not present,
    /// all fields will be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateAgentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [agent][crate::model::UpdateAgentRequest::agent].
    pub fn set_agent<T: std::convert::Into<std::option::Option<crate::model::Agent>>>(
        mut self,
        v: T,
    ) -> Self {
        self.agent = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateAgentRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateAgentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.UpdateAgentRequest"
    }
}

/// The request message for
/// [Agents.DeleteAgent][google.cloud.dialogflow.cx.v3.Agents.DeleteAgent].
///
/// [google.cloud.dialogflow.cx.v3.Agents.DeleteAgent]: crate::client::Agents::delete_agent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteAgentRequest {
    /// Required. The name of the agent to delete.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteAgentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteAgentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteAgentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DeleteAgentRequest"
    }
}

/// The request message for
/// [Agents.ExportAgent][google.cloud.dialogflow.cx.v3.Agents.ExportAgent].
///
/// [google.cloud.dialogflow.cx.v3.Agents.ExportAgent]: crate::client::Agents::export_agent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportAgentRequest {
    /// Required. The name of the agent to export.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. The [Google Cloud
    /// Storage](https://cloud.google.com/storage/docs/) URI to export the agent
    /// to. The format of this URI must be `gs://<bucket-name>/<object-name>`. If
    /// left unspecified, the serialized agent is returned inline.
    ///
    /// Dialogflow performs a write operation for the Cloud Storage object
    /// on the caller's behalf, so your request authentication must
    /// have write permissions for the object. For more information, see
    /// [Dialogflow access
    /// control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub agent_uri: std::string::String,

    /// Optional. The data format of the exported agent. If not specified, `BLOB`
    /// is assumed.
    pub data_format: crate::model::export_agent_request::DataFormat,

    /// Optional. Environment name. If not set, draft environment is assumed.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub environment: std::string::String,

    /// Optional. The Git branch to export the agent to.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub git_destination: std::option::Option<crate::model::export_agent_request::GitDestination>,

    /// Optional. Whether to include BigQuery Export setting.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub include_bigquery_export_settings: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExportAgentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ExportAgentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [agent_uri][crate::model::ExportAgentRequest::agent_uri].
    pub fn set_agent_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.agent_uri = v.into();
        self
    }

    /// Sets the value of [data_format][crate::model::ExportAgentRequest::data_format].
    pub fn set_data_format<
        T: std::convert::Into<crate::model::export_agent_request::DataFormat>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.data_format = v.into();
        self
    }

    /// Sets the value of [environment][crate::model::ExportAgentRequest::environment].
    pub fn set_environment<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.environment = v.into();
        self
    }

    /// Sets the value of [git_destination][crate::model::ExportAgentRequest::git_destination].
    pub fn set_git_destination<
        T: std::convert::Into<std::option::Option<crate::model::export_agent_request::GitDestination>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.git_destination = v.into();
        self
    }

    /// Sets the value of [include_bigquery_export_settings][crate::model::ExportAgentRequest::include_bigquery_export_settings].
    pub fn set_include_bigquery_export_settings<T: std::convert::Into<bool>>(
        mut self,
        v: T,
    ) -> Self {
        self.include_bigquery_export_settings = v.into();
        self
    }
}

impl wkt::message::Message for ExportAgentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ExportAgentRequest"
    }
}

/// Defines additional types related to [ExportAgentRequest].
pub mod export_agent_request {
    #[allow(unused_imports)]
    use super::*;

    /// Settings for exporting to a git branch.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct GitDestination {
        /// Tracking branch for the git push.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub tracking_branch: std::string::String,

        /// Commit message for the git push.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub commit_message: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl GitDestination {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [tracking_branch][crate::model::export_agent_request::GitDestination::tracking_branch].
        pub fn set_tracking_branch<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.tracking_branch = v.into();
            self
        }

        /// Sets the value of [commit_message][crate::model::export_agent_request::GitDestination::commit_message].
        pub fn set_commit_message<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.commit_message = v.into();
            self
        }
    }

    impl wkt::message::Message for GitDestination {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.ExportAgentRequest.GitDestination"
        }
    }

    /// Data format of the exported agent.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum DataFormat {
        /// Unspecified format.
        Unspecified,
        /// Agent content will be exported as raw bytes.
        Blob,
        /// Agent content will be exported in JSON Package format.
        JsonPackage,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [DataFormat::value] or
        /// [DataFormat::name].
        UnknownValue(data_format::UnknownValue),
    }

    #[doc(hidden)]
    pub mod data_format {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl DataFormat {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Blob => std::option::Option::Some(1),
                Self::JsonPackage => std::option::Option::Some(4),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("DATA_FORMAT_UNSPECIFIED"),
                Self::Blob => std::option::Option::Some("BLOB"),
                Self::JsonPackage => std::option::Option::Some("JSON_PACKAGE"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for DataFormat {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for DataFormat {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for DataFormat {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Blob,
                4 => Self::JsonPackage,
                _ => Self::UnknownValue(data_format::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for DataFormat {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "DATA_FORMAT_UNSPECIFIED" => Self::Unspecified,
                "BLOB" => Self::Blob,
                "JSON_PACKAGE" => Self::JsonPackage,
                _ => Self::UnknownValue(data_format::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for DataFormat {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Blob => serializer.serialize_i32(1),
                Self::JsonPackage => serializer.serialize_i32(4),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for DataFormat {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<DataFormat>::new(
                ".google.cloud.dialogflow.cx.v3.ExportAgentRequest.DataFormat",
            ))
        }
    }
}

/// The response message for
/// [Agents.ExportAgent][google.cloud.dialogflow.cx.v3.Agents.ExportAgent].
///
/// [google.cloud.dialogflow.cx.v3.Agents.ExportAgent]: crate::client::Agents::export_agent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportAgentResponse {
    /// The exported agent.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub agent: std::option::Option<crate::model::export_agent_response::Agent>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExportAgentResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [agent][crate::model::ExportAgentResponse::agent].
    ///
    /// Note that all the setters affecting `agent` are mutually
    /// exclusive.
    pub fn set_agent<
        T: std::convert::Into<std::option::Option<crate::model::export_agent_response::Agent>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.agent = v.into();
        self
    }

    /// The value of [agent][crate::model::ExportAgentResponse::agent]
    /// if it holds a `AgentUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn agent_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.agent.as_ref().and_then(|v| match v {
            crate::model::export_agent_response::Agent::AgentUri(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [agent][crate::model::ExportAgentResponse::agent]
    /// if it holds a `AgentContent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn agent_content(&self) -> std::option::Option<&::bytes::Bytes> {
        #[allow(unreachable_patterns)]
        self.agent.as_ref().and_then(|v| match v {
            crate::model::export_agent_response::Agent::AgentContent(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [agent][crate::model::ExportAgentResponse::agent]
    /// if it holds a `CommitSha`, `None` if the field is not set or
    /// holds a different branch.
    pub fn commit_sha(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.agent.as_ref().and_then(|v| match v {
            crate::model::export_agent_response::Agent::CommitSha(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [agent][crate::model::ExportAgentResponse::agent]
    /// to hold a `AgentUri`.
    ///
    /// Note that all the setters affecting `agent` are
    /// mutually exclusive.
    pub fn set_agent_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.agent = std::option::Option::Some(
            crate::model::export_agent_response::Agent::AgentUri(v.into()),
        );
        self
    }

    /// Sets the value of [agent][crate::model::ExportAgentResponse::agent]
    /// to hold a `AgentContent`.
    ///
    /// Note that all the setters affecting `agent` are
    /// mutually exclusive.
    pub fn set_agent_content<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.agent = std::option::Option::Some(
            crate::model::export_agent_response::Agent::AgentContent(v.into()),
        );
        self
    }

    /// Sets the value of [agent][crate::model::ExportAgentResponse::agent]
    /// to hold a `CommitSha`.
    ///
    /// Note that all the setters affecting `agent` are
    /// mutually exclusive.
    pub fn set_commit_sha<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.agent = std::option::Option::Some(
            crate::model::export_agent_response::Agent::CommitSha(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ExportAgentResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ExportAgentResponse"
    }
}

/// Defines additional types related to [ExportAgentResponse].
pub mod export_agent_response {
    #[allow(unused_imports)]
    use super::*;

    /// The exported agent.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Agent {
        /// The URI to a file containing the exported agent. This field is populated
        /// if `agent_uri` is specified in
        /// [ExportAgentRequest][google.cloud.dialogflow.cx.v3.ExportAgentRequest].
        ///
        /// [google.cloud.dialogflow.cx.v3.ExportAgentRequest]: crate::model::ExportAgentRequest
        AgentUri(std::string::String),
        /// Uncompressed raw byte content for agent. This field is populated
        /// if none of `agent_uri` and `git_destination` are specified in
        /// [ExportAgentRequest][google.cloud.dialogflow.cx.v3.ExportAgentRequest].
        ///
        /// [google.cloud.dialogflow.cx.v3.ExportAgentRequest]: crate::model::ExportAgentRequest
        AgentContent(::bytes::Bytes),
        /// Commit SHA of the git push. This field is populated if
        /// `git_destination` is specified in
        /// [ExportAgentRequest][google.cloud.dialogflow.cx.v3.ExportAgentRequest].
        ///
        /// [google.cloud.dialogflow.cx.v3.ExportAgentRequest]: crate::model::ExportAgentRequest
        CommitSha(std::string::String),
    }
}

/// The request message for
/// [Agents.RestoreAgent][google.cloud.dialogflow.cx.v3.Agents.RestoreAgent].
///
/// [google.cloud.dialogflow.cx.v3.Agents.RestoreAgent]: crate::client::Agents::restore_agent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RestoreAgentRequest {
    /// Required. The name of the agent to restore into.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Agent restore mode. If not specified, `KEEP` is assumed.
    pub restore_option: crate::model::restore_agent_request::RestoreOption,

    /// Required. The agent to restore.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub agent: std::option::Option<crate::model::restore_agent_request::Agent>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RestoreAgentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::RestoreAgentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [restore_option][crate::model::RestoreAgentRequest::restore_option].
    pub fn set_restore_option<
        T: std::convert::Into<crate::model::restore_agent_request::RestoreOption>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.restore_option = v.into();
        self
    }

    /// Sets the value of [agent][crate::model::RestoreAgentRequest::agent].
    ///
    /// Note that all the setters affecting `agent` are mutually
    /// exclusive.
    pub fn set_agent<
        T: std::convert::Into<std::option::Option<crate::model::restore_agent_request::Agent>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.agent = v.into();
        self
    }

    /// The value of [agent][crate::model::RestoreAgentRequest::agent]
    /// if it holds a `AgentUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn agent_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.agent.as_ref().and_then(|v| match v {
            crate::model::restore_agent_request::Agent::AgentUri(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [agent][crate::model::RestoreAgentRequest::agent]
    /// if it holds a `AgentContent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn agent_content(&self) -> std::option::Option<&::bytes::Bytes> {
        #[allow(unreachable_patterns)]
        self.agent.as_ref().and_then(|v| match v {
            crate::model::restore_agent_request::Agent::AgentContent(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [agent][crate::model::RestoreAgentRequest::agent]
    /// if it holds a `GitSource`, `None` if the field is not set or
    /// holds a different branch.
    pub fn git_source(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::restore_agent_request::GitSource>> {
        #[allow(unreachable_patterns)]
        self.agent.as_ref().and_then(|v| match v {
            crate::model::restore_agent_request::Agent::GitSource(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [agent][crate::model::RestoreAgentRequest::agent]
    /// to hold a `AgentUri`.
    ///
    /// Note that all the setters affecting `agent` are
    /// mutually exclusive.
    pub fn set_agent_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.agent = std::option::Option::Some(
            crate::model::restore_agent_request::Agent::AgentUri(v.into()),
        );
        self
    }

    /// Sets the value of [agent][crate::model::RestoreAgentRequest::agent]
    /// to hold a `AgentContent`.
    ///
    /// Note that all the setters affecting `agent` are
    /// mutually exclusive.
    pub fn set_agent_content<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.agent = std::option::Option::Some(
            crate::model::restore_agent_request::Agent::AgentContent(v.into()),
        );
        self
    }

    /// Sets the value of [agent][crate::model::RestoreAgentRequest::agent]
    /// to hold a `GitSource`.
    ///
    /// Note that all the setters affecting `agent` are
    /// mutually exclusive.
    pub fn set_git_source<
        T: std::convert::Into<std::boxed::Box<crate::model::restore_agent_request::GitSource>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.agent = std::option::Option::Some(
            crate::model::restore_agent_request::Agent::GitSource(v.into()),
        );
        self
    }
}

impl wkt::message::Message for RestoreAgentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.RestoreAgentRequest"
    }
}

/// Defines additional types related to [RestoreAgentRequest].
pub mod restore_agent_request {
    #[allow(unused_imports)]
    use super::*;

    /// Settings for restoring from a git branch
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct GitSource {
        /// tracking branch for the git pull
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub tracking_branch: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl GitSource {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [tracking_branch][crate::model::restore_agent_request::GitSource::tracking_branch].
        pub fn set_tracking_branch<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.tracking_branch = v.into();
            self
        }
    }

    impl wkt::message::Message for GitSource {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.RestoreAgentRequest.GitSource"
        }
    }

    /// Restore option.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum RestoreOption {
        /// Unspecified. Treated as KEEP.
        Unspecified,
        /// Always respect the settings from the exported agent file. It may cause
        /// a restoration failure if some settings (e.g. model type) are not
        /// supported in the target agent.
        Keep,
        /// Fallback to default settings if some settings are not supported in the
        /// target agent.
        Fallback,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [RestoreOption::value] or
        /// [RestoreOption::name].
        UnknownValue(restore_option::UnknownValue),
    }

    #[doc(hidden)]
    pub mod restore_option {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl RestoreOption {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Keep => std::option::Option::Some(1),
                Self::Fallback => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("RESTORE_OPTION_UNSPECIFIED"),
                Self::Keep => std::option::Option::Some("KEEP"),
                Self::Fallback => std::option::Option::Some("FALLBACK"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for RestoreOption {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for RestoreOption {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for RestoreOption {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Keep,
                2 => Self::Fallback,
                _ => Self::UnknownValue(restore_option::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for RestoreOption {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "RESTORE_OPTION_UNSPECIFIED" => Self::Unspecified,
                "KEEP" => Self::Keep,
                "FALLBACK" => Self::Fallback,
                _ => Self::UnknownValue(restore_option::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for RestoreOption {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Keep => serializer.serialize_i32(1),
                Self::Fallback => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for RestoreOption {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<RestoreOption>::new(
                ".google.cloud.dialogflow.cx.v3.RestoreAgentRequest.RestoreOption",
            ))
        }
    }

    /// Required. The agent to restore.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Agent {
        /// The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI
        /// to restore agent from. The format of this URI must be
        /// `gs://<bucket-name>/<object-name>`.
        ///
        /// Dialogflow performs a read operation for the Cloud Storage object
        /// on the caller's behalf, so your request authentication must
        /// have read permissions for the object. For more information, see
        /// [Dialogflow access
        /// control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
        AgentUri(std::string::String),
        /// Uncompressed raw byte content for agent.
        AgentContent(::bytes::Bytes),
        /// Setting for restoring from a git branch
        GitSource(std::boxed::Box<crate::model::restore_agent_request::GitSource>),
    }
}

/// The request message for
/// [Agents.ValidateAgent][google.cloud.dialogflow.cx.v3.Agents.ValidateAgent].
///
/// [google.cloud.dialogflow.cx.v3.Agents.ValidateAgent]: crate::client::Agents::validate_agent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ValidateAgentRequest {
    /// Required. The agent to validate.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// If not specified, the agent's default language is used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ValidateAgentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ValidateAgentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::ValidateAgentRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for ValidateAgentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ValidateAgentRequest"
    }
}

/// The request message for
/// [Agents.GetAgentValidationResult][google.cloud.dialogflow.cx.v3.Agents.GetAgentValidationResult].
///
/// [google.cloud.dialogflow.cx.v3.Agents.GetAgentValidationResult]: crate::client::Agents::get_agent_validation_result
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetAgentValidationResultRequest {
    /// Required. The agent name.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/validationResult`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// If not specified, the agent's default language is used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetAgentValidationResultRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetAgentValidationResultRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::GetAgentValidationResultRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for GetAgentValidationResultRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetAgentValidationResultRequest"
    }
}

/// The response message for
/// [Agents.GetAgentValidationResult][google.cloud.dialogflow.cx.v3.Agents.GetAgentValidationResult].
///
/// [google.cloud.dialogflow.cx.v3.Agents.GetAgentValidationResult]: crate::client::Agents::get_agent_validation_result
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AgentValidationResult {
    /// The unique identifier of the agent validation result.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/validationResult`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Contains all flow validation results.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub flow_validation_results: std::vec::Vec<crate::model::FlowValidationResult>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AgentValidationResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::AgentValidationResult::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [flow_validation_results][crate::model::AgentValidationResult::flow_validation_results].
    pub fn set_flow_validation_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::FlowValidationResult>,
    {
        use std::iter::Iterator;
        self.flow_validation_results = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for AgentValidationResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.AgentValidationResult"
    }
}

/// Request for
/// [GetGenerativeSettings][google.cloud.dialogflow.cx.v3.Agents.GetGenerativeSettings]
/// RPC.
///
/// [google.cloud.dialogflow.cx.v3.Agents.GetGenerativeSettings]: crate::client::Agents::get_generative_settings
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetGenerativeSettingsRequest {
    /// Required. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/generativeSettings`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Language code of the generative settings.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetGenerativeSettingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetGenerativeSettingsRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::GetGenerativeSettingsRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for GetGenerativeSettingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetGenerativeSettingsRequest"
    }
}

/// Request for
/// [UpdateGenerativeSettings][google.cloud.dialogflow.cx.v3.Agents.UpdateGenerativeSettings]
/// RPC.
///
/// [google.cloud.dialogflow.cx.v3.Agents.UpdateGenerativeSettings]: crate::client::Agents::update_generative_settings
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateGenerativeSettingsRequest {
    /// Required. Generative settings to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub generative_settings: std::option::Option<crate::model::GenerativeSettings>,

    /// Optional. The mask to control which fields get updated. If the mask is not
    /// present, all fields will be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateGenerativeSettingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [generative_settings][crate::model::UpdateGenerativeSettingsRequest::generative_settings].
    pub fn set_generative_settings<
        T: std::convert::Into<std::option::Option<crate::model::GenerativeSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.generative_settings = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateGenerativeSettingsRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateGenerativeSettingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.UpdateGenerativeSettingsRequest"
    }
}

/// Information for a word recognized by the speech recognizer.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SpeechWordInfo {
    /// The word this info is for.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub word: std::string::String,

    /// Time offset relative to the beginning of the audio that corresponds to the
    /// start of the spoken word. This is an experimental feature and the accuracy
    /// of the time offset can vary.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_offset: std::option::Option<wkt::Duration>,

    /// Time offset relative to the beginning of the audio that corresponds to the
    /// end of the spoken word. This is an experimental feature and the accuracy of
    /// the time offset can vary.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_offset: std::option::Option<wkt::Duration>,

    /// The Speech confidence between 0.0 and 1.0 for this word. A higher number
    /// indicates an estimated greater likelihood that the recognized word is
    /// correct. The default of 0.0 is a sentinel value indicating that confidence
    /// was not set.
    ///
    /// This field is not guaranteed to be fully stable over time for the same
    /// audio input. Users should also not rely on it to always be provided.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub confidence: f32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SpeechWordInfo {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [word][crate::model::SpeechWordInfo::word].
    pub fn set_word<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.word = v.into();
        self
    }

    /// Sets the value of [start_offset][crate::model::SpeechWordInfo::start_offset].
    pub fn set_start_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_offset = v.into();
        self
    }

    /// Sets the value of [end_offset][crate::model::SpeechWordInfo::end_offset].
    pub fn set_end_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_offset = v.into();
        self
    }

    /// Sets the value of [confidence][crate::model::SpeechWordInfo::confidence].
    pub fn set_confidence<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.confidence = v.into();
        self
    }
}

impl wkt::message::Message for SpeechWordInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.SpeechWordInfo"
    }
}

/// Configuration of the barge-in behavior. Barge-in instructs the API to return
/// a detected utterance at a proper time while the client is playing back the
/// response audio from a previous request. When the client sees the
/// utterance, it should stop the playback and immediately get ready for
/// receiving the responses for the current request.
///
/// The barge-in handling requires the client to start streaming audio input
/// as soon as it starts playing back the audio from the previous response. The
/// playback is modeled into two phases:
///
/// * No barge-in phase: which goes first and during which speech detection
///   should not be carried out.
///
/// * Barge-in phase: which follows the no barge-in phase and during which
///   the API starts speech detection and may inform the client that an utterance
///   has been detected. Note that no-speech event is not expected in this
///   phase.
///
///
/// The client provides this configuration in terms of the durations of those
/// two phases. The durations are measured in terms of the audio length from the
/// start of the input audio.
///
/// No-speech event is a response with END_OF_UTTERANCE without any transcript
/// following up.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BargeInConfig {
    /// Duration that is not eligible for barge-in at the beginning of the input
    /// audio.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub no_barge_in_duration: std::option::Option<wkt::Duration>,

    /// Total duration for the playback at the beginning of the input audio.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub total_duration: std::option::Option<wkt::Duration>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BargeInConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [no_barge_in_duration][crate::model::BargeInConfig::no_barge_in_duration].
    pub fn set_no_barge_in_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.no_barge_in_duration = v.into();
        self
    }

    /// Sets the value of [total_duration][crate::model::BargeInConfig::total_duration].
    pub fn set_total_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.total_duration = v.into();
        self
    }
}

impl wkt::message::Message for BargeInConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.BargeInConfig"
    }
}

/// Instructs the speech recognizer on how to process the audio content.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InputAudioConfig {
    /// Required. Audio encoding of the audio content to process.
    pub audio_encoding: crate::model::AudioEncoding,

    /// Sample rate (in Hertz) of the audio content sent in the query.
    /// Refer to
    /// [Cloud Speech API
    /// documentation](https://cloud.google.com/speech-to-text/docs/basics) for
    /// more details.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub sample_rate_hertz: i32,

    /// Optional. If `true`, Dialogflow returns
    /// [SpeechWordInfo][google.cloud.dialogflow.cx.v3.SpeechWordInfo] in
    /// [StreamingRecognitionResult][google.cloud.dialogflow.cx.v3.StreamingRecognitionResult]
    /// with information about the recognized speech words, e.g. start and end time
    /// offsets. If false or unspecified, Speech doesn't return any word-level
    /// information.
    ///
    /// [google.cloud.dialogflow.cx.v3.SpeechWordInfo]: crate::model::SpeechWordInfo
    /// [google.cloud.dialogflow.cx.v3.StreamingRecognitionResult]: crate::model::StreamingRecognitionResult
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_word_info: bool,

    /// Optional. A list of strings containing words and phrases that the speech
    /// recognizer should recognize with higher likelihood.
    ///
    /// See [the Cloud Speech
    /// documentation](https://cloud.google.com/speech-to-text/docs/basics#phrase-hints)
    /// for more details.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub phrase_hints: std::vec::Vec<std::string::String>,

    /// Optional. Which Speech model to select for the given request.
    /// For more information, see
    /// [Speech
    /// models](https://cloud.google.com/dialogflow/cx/docs/concept/speech-models).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub model: std::string::String,

    /// Optional. Which variant of the [Speech
    /// model][google.cloud.dialogflow.cx.v3.InputAudioConfig.model] to use.
    ///
    /// [google.cloud.dialogflow.cx.v3.InputAudioConfig.model]: crate::model::InputAudioConfig::model
    pub model_variant: crate::model::SpeechModelVariant,

    /// Optional. If `false` (default), recognition does not cease until the
    /// client closes the stream.
    /// If `true`, the recognizer will detect a single spoken utterance in input
    /// audio. Recognition ceases when it detects the audio's voice has
    /// stopped or paused. In this case, once a detected intent is received, the
    /// client should close the stream and start a new request with a new stream as
    /// needed.
    /// Note: This setting is relevant only for streaming methods.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub single_utterance: bool,

    /// Configuration of barge-in behavior during the streaming of input audio.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub barge_in_config: std::option::Option<crate::model::BargeInConfig>,

    /// If `true`, the request will opt out for STT conformer model migration.
    /// This field will be deprecated once force migration takes place in June
    /// 2024. Please refer to [Dialogflow CX Speech model
    /// migration](https://cloud.google.com/dialogflow/cx/docs/concept/speech-model-migration).
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub opt_out_conformer_model_migration: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl InputAudioConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [audio_encoding][crate::model::InputAudioConfig::audio_encoding].
    pub fn set_audio_encoding<T: std::convert::Into<crate::model::AudioEncoding>>(
        mut self,
        v: T,
    ) -> Self {
        self.audio_encoding = v.into();
        self
    }

    /// Sets the value of [sample_rate_hertz][crate::model::InputAudioConfig::sample_rate_hertz].
    pub fn set_sample_rate_hertz<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.sample_rate_hertz = v.into();
        self
    }

    /// Sets the value of [enable_word_info][crate::model::InputAudioConfig::enable_word_info].
    pub fn set_enable_word_info<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_word_info = v.into();
        self
    }

    /// Sets the value of [model][crate::model::InputAudioConfig::model].
    pub fn set_model<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.model = v.into();
        self
    }

    /// Sets the value of [model_variant][crate::model::InputAudioConfig::model_variant].
    pub fn set_model_variant<T: std::convert::Into<crate::model::SpeechModelVariant>>(
        mut self,
        v: T,
    ) -> Self {
        self.model_variant = v.into();
        self
    }

    /// Sets the value of [single_utterance][crate::model::InputAudioConfig::single_utterance].
    pub fn set_single_utterance<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.single_utterance = v.into();
        self
    }

    /// Sets the value of [barge_in_config][crate::model::InputAudioConfig::barge_in_config].
    pub fn set_barge_in_config<
        T: std::convert::Into<std::option::Option<crate::model::BargeInConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.barge_in_config = v.into();
        self
    }

    /// Sets the value of [opt_out_conformer_model_migration][crate::model::InputAudioConfig::opt_out_conformer_model_migration].
    pub fn set_opt_out_conformer_model_migration<T: std::convert::Into<bool>>(
        mut self,
        v: T,
    ) -> Self {
        self.opt_out_conformer_model_migration = v.into();
        self
    }

    /// Sets the value of [phrase_hints][crate::model::InputAudioConfig::phrase_hints].
    pub fn set_phrase_hints<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.phrase_hints = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for InputAudioConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.InputAudioConfig"
    }
}

/// Description of which voice to use for speech synthesis.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct VoiceSelectionParams {
    /// Optional. The name of the voice. If not set, the service will choose a
    /// voice based on the other parameters such as language_code and
    /// [ssml_gender][google.cloud.dialogflow.cx.v3.VoiceSelectionParams.ssml_gender].
    ///
    /// For the list of available voices, please refer to [Supported voices and
    /// languages](https://cloud.google.com/text-to-speech/docs/voices).
    ///
    /// [google.cloud.dialogflow.cx.v3.VoiceSelectionParams.ssml_gender]: crate::model::VoiceSelectionParams::ssml_gender
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. The preferred gender of the voice. If not set, the service will
    /// choose a voice based on the other parameters such as language_code and
    /// [name][google.cloud.dialogflow.cx.v3.VoiceSelectionParams.name]. Note that
    /// this is only a preference, not requirement. If a voice of the appropriate
    /// gender is not available, the synthesizer substitutes a voice with a
    /// different gender rather than failing the request.
    ///
    /// [google.cloud.dialogflow.cx.v3.VoiceSelectionParams.name]: crate::model::VoiceSelectionParams::name
    pub ssml_gender: crate::model::SsmlVoiceGender,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl VoiceSelectionParams {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::VoiceSelectionParams::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [ssml_gender][crate::model::VoiceSelectionParams::ssml_gender].
    pub fn set_ssml_gender<T: std::convert::Into<crate::model::SsmlVoiceGender>>(
        mut self,
        v: T,
    ) -> Self {
        self.ssml_gender = v.into();
        self
    }
}

impl wkt::message::Message for VoiceSelectionParams {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.VoiceSelectionParams"
    }
}

/// Configuration of how speech should be synthesized.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SynthesizeSpeechConfig {
    /// Optional. Speaking rate/speed, in the range [0.25, 4.0]. 1.0 is the normal
    /// native speed supported by the specific voice. 2.0 is twice as fast, and
    /// 0.5 is half as fast. If unset(0.0), defaults to the native 1.0 speed. Any
    /// other values < 0.25 or > 4.0 will return an error.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub speaking_rate: f64,

    /// Optional. Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20
    /// semitones from the original pitch. -20 means decrease 20 semitones from the
    /// original pitch.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub pitch: f64,

    /// Optional. Volume gain (in dB) of the normal native volume supported by the
    /// specific voice, in the range [-96.0, 16.0]. If unset, or set to a value of
    /// 0.0 (dB), will play at normal native signal amplitude. A value of -6.0 (dB)
    /// will play at approximately half the amplitude of the normal native signal
    /// amplitude. A value of +6.0 (dB) will play at approximately twice the
    /// amplitude of the normal native signal amplitude. We strongly recommend not
    /// to exceed +10 (dB) as there's usually no effective increase in loudness for
    /// any value greater than that.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub volume_gain_db: f64,

    /// Optional. An identifier which selects 'audio effects' profiles that are
    /// applied on (post synthesized) text to speech. Effects are applied on top of
    /// each other in the order they are given.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub effects_profile_id: std::vec::Vec<std::string::String>,

    /// Optional. The desired voice of the synthesized audio.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub voice: std::option::Option<crate::model::VoiceSelectionParams>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SynthesizeSpeechConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [speaking_rate][crate::model::SynthesizeSpeechConfig::speaking_rate].
    pub fn set_speaking_rate<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.speaking_rate = v.into();
        self
    }

    /// Sets the value of [pitch][crate::model::SynthesizeSpeechConfig::pitch].
    pub fn set_pitch<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.pitch = v.into();
        self
    }

    /// Sets the value of [volume_gain_db][crate::model::SynthesizeSpeechConfig::volume_gain_db].
    pub fn set_volume_gain_db<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.volume_gain_db = v.into();
        self
    }

    /// Sets the value of [voice][crate::model::SynthesizeSpeechConfig::voice].
    pub fn set_voice<
        T: std::convert::Into<std::option::Option<crate::model::VoiceSelectionParams>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.voice = v.into();
        self
    }

    /// Sets the value of [effects_profile_id][crate::model::SynthesizeSpeechConfig::effects_profile_id].
    pub fn set_effects_profile_id<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.effects_profile_id = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SynthesizeSpeechConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.SynthesizeSpeechConfig"
    }
}

/// Instructs the speech synthesizer how to generate the output audio content.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OutputAudioConfig {
    /// Required. Audio encoding of the synthesized audio content.
    pub audio_encoding: crate::model::OutputAudioEncoding,

    /// Optional. The synthesis sample rate (in hertz) for this audio. If not
    /// provided, then the synthesizer will use the default sample rate based on
    /// the audio encoding. If this is different from the voice's natural sample
    /// rate, then the synthesizer will honor this request by converting to the
    /// desired sample rate (which might result in worse audio quality).
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub sample_rate_hertz: i32,

    /// Optional. Configuration of how speech should be synthesized.
    /// If not specified,
    /// [Agent.text_to_speech_settings][google.cloud.dialogflow.cx.v3.Agent.text_to_speech_settings]
    /// is applied.
    ///
    /// [google.cloud.dialogflow.cx.v3.Agent.text_to_speech_settings]: crate::model::Agent::text_to_speech_settings
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub synthesize_speech_config: std::option::Option<crate::model::SynthesizeSpeechConfig>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl OutputAudioConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [audio_encoding][crate::model::OutputAudioConfig::audio_encoding].
    pub fn set_audio_encoding<T: std::convert::Into<crate::model::OutputAudioEncoding>>(
        mut self,
        v: T,
    ) -> Self {
        self.audio_encoding = v.into();
        self
    }

    /// Sets the value of [sample_rate_hertz][crate::model::OutputAudioConfig::sample_rate_hertz].
    pub fn set_sample_rate_hertz<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.sample_rate_hertz = v.into();
        self
    }

    /// Sets the value of [synthesize_speech_config][crate::model::OutputAudioConfig::synthesize_speech_config].
    pub fn set_synthesize_speech_config<
        T: std::convert::Into<std::option::Option<crate::model::SynthesizeSpeechConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.synthesize_speech_config = v.into();
        self
    }
}

impl wkt::message::Message for OutputAudioConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.OutputAudioConfig"
    }
}

/// Settings related to speech synthesizing.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TextToSpeechSettings {
    /// Configuration of how speech should be synthesized, mapping from language
    /// (<https://cloud.google.com/dialogflow/cx/docs/reference/language>) to
    /// SynthesizeSpeechConfig.
    ///
    /// These settings affect:
    ///
    /// - The [phone
    ///   gateway](https://cloud.google.com/dialogflow/cx/docs/concept/integration/phone-gateway)
    ///   synthesize configuration set via
    ///   [Agent.text_to_speech_settings][google.cloud.dialogflow.cx.v3.Agent.text_to_speech_settings].
    ///
    /// - How speech is synthesized when invoking
    ///   [session][google.cloud.dialogflow.cx.v3.Sessions] APIs.
    ///   [Agent.text_to_speech_settings][google.cloud.dialogflow.cx.v3.Agent.text_to_speech_settings]
    ///   only applies if
    ///   [OutputAudioConfig.synthesize_speech_config][google.cloud.dialogflow.cx.v3.OutputAudioConfig.synthesize_speech_config]
    ///   is not specified.
    ///
    ///
    /// [google.cloud.dialogflow.cx.v3.Agent.text_to_speech_settings]: crate::model::Agent::text_to_speech_settings
    /// [google.cloud.dialogflow.cx.v3.OutputAudioConfig.synthesize_speech_config]: crate::model::OutputAudioConfig::synthesize_speech_config
    /// [google.cloud.dialogflow.cx.v3.Sessions]: crate::client::Sessions
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub synthesize_speech_configs:
        std::collections::HashMap<std::string::String, crate::model::SynthesizeSpeechConfig>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TextToSpeechSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [synthesize_speech_configs][crate::model::TextToSpeechSettings::synthesize_speech_configs].
    pub fn set_synthesize_speech_configs<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::SynthesizeSpeechConfig>,
    {
        use std::iter::Iterator;
        self.synthesize_speech_configs = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for TextToSpeechSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.TextToSpeechSettings"
    }
}

/// The request message for
/// [Changelogs.ListChangelogs][google.cloud.dialogflow.cx.v3.Changelogs.ListChangelogs].
///
/// [google.cloud.dialogflow.cx.v3.Changelogs.ListChangelogs]: crate::client::Changelogs::list_changelogs
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListChangelogsRequest {
    /// Required. The agent containing the changelogs.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The filter string. Supports filter by user_email, resource, type and
    /// create_time. Some examples:
    ///
    /// . By user email:
    ///   user_email = "someone@google.com"
    /// . By resource name:
    ///   resource = "projects/123/locations/global/agents/456/flows/789"
    /// . By resource display name:
    ///   display_name = "my agent"
    /// . By action:
    ///   action = "Create"
    /// . By type:
    ///   type = "flows"
    /// . By create time. Currently predicates on `create_time` and
    ///   `create_time_epoch_seconds` are supported:
    ///   create_time_epoch_seconds > 1551790877 AND create_time <=
    ///   2017-01-15T01:30:15.01Z
    /// . Combination of above filters:
    ///   resource = "projects/123/locations/global/agents/456/flows/789"
    ///   AND user_email = "someone@google.com"
    ///   AND create_time <= 2017-01-15T01:30:15.01Z
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// The maximum number of items to return in a single page. By default 100 and
    /// at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListChangelogsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListChangelogsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListChangelogsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListChangelogsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListChangelogsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListChangelogsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListChangelogsRequest"
    }
}

/// The response message for
/// [Changelogs.ListChangelogs][google.cloud.dialogflow.cx.v3.Changelogs.ListChangelogs].
///
/// [google.cloud.dialogflow.cx.v3.Changelogs.ListChangelogs]: crate::client::Changelogs::list_changelogs
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListChangelogsResponse {
    /// The list of changelogs. There will be a maximum number of items returned
    /// based on the page_size field in the request. The changelogs will be ordered
    /// by timestamp.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub changelogs: std::vec::Vec<crate::model::Changelog>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListChangelogsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListChangelogsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [changelogs][crate::model::ListChangelogsResponse::changelogs].
    pub fn set_changelogs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Changelog>,
    {
        use std::iter::Iterator;
        self.changelogs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListChangelogsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListChangelogsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListChangelogsResponse {
    type PageItem = crate::model::Changelog;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.changelogs
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Changelogs.GetChangelog][google.cloud.dialogflow.cx.v3.Changelogs.GetChangelog].
///
/// [google.cloud.dialogflow.cx.v3.Changelogs.GetChangelog]: crate::client::Changelogs::get_changelog
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetChangelogRequest {
    /// Required. The name of the changelog to get.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/changelogs/<ChangelogID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetChangelogRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetChangelogRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetChangelogRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetChangelogRequest"
    }
}

/// Changelogs represents a change made to a given agent.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Changelog {
    /// The unique identifier of the changelog.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/changelogs/<ChangelogID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Email address of the authenticated user.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub user_email: std::string::String,

    /// The affected resource display name of the change.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// The action of the change.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub action: std::string::String,

    /// The affected resource type.
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub r#type: std::string::String,

    /// The affected resource name of the change.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub resource: std::string::String,

    /// The timestamp of the change.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// The affected language code of the change.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Changelog {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Changelog::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [user_email][crate::model::Changelog::user_email].
    pub fn set_user_email<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.user_email = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Changelog::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [action][crate::model::Changelog::action].
    pub fn set_action<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.action = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::Changelog::type].
    pub fn set_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [resource][crate::model::Changelog::resource].
    pub fn set_resource<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.resource = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Changelog::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::Changelog::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for Changelog {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.Changelog"
    }
}

/// A data store connection. It represents a data store in Discovery Engine and
/// the type of the contents it contains.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DataStoreConnection {
    /// The type of the connected data store.
    pub data_store_type: crate::model::DataStoreType,

    /// The full name of the referenced data store.
    /// Formats:
    /// `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`
    /// `projects/{project}/locations/{location}/dataStores/{data_store}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub data_store: std::string::String,

    /// The document processing mode for the data store connection. Should only be
    /// set for PUBLIC_WEB and UNSTRUCTURED data stores. If not set it is
    /// considered as DOCUMENTS, as this is the legacy mode.
    pub document_processing_mode: crate::model::DocumentProcessingMode,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DataStoreConnection {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [data_store_type][crate::model::DataStoreConnection::data_store_type].
    pub fn set_data_store_type<T: std::convert::Into<crate::model::DataStoreType>>(
        mut self,
        v: T,
    ) -> Self {
        self.data_store_type = v.into();
        self
    }

    /// Sets the value of [data_store][crate::model::DataStoreConnection::data_store].
    pub fn set_data_store<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.data_store = v.into();
        self
    }

    /// Sets the value of [document_processing_mode][crate::model::DataStoreConnection::document_processing_mode].
    pub fn set_document_processing_mode<
        T: std::convert::Into<crate::model::DocumentProcessingMode>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.document_processing_mode = v.into();
        self
    }
}

impl wkt::message::Message for DataStoreConnection {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DataStoreConnection"
    }
}

/// Data store connection feature output signals.
/// Might be only partially field if processing stop before the final answer.
/// Reasons for this can be, but are not limited to: empty UCS search results,
/// positive RAI check outcome, grounding failure, ...
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DataStoreConnectionSignals {
    /// Optional. Diagnostic info related to the rewriter model call.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub rewriter_model_call_signals:
        std::option::Option<crate::model::data_store_connection_signals::RewriterModelCallSignals>,

    /// Optional. Rewritten string query used for search.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rewritten_query: std::string::String,

    /// Optional. Search snippets included in the answer generation prompt.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub search_snippets: std::vec::Vec<crate::model::data_store_connection_signals::SearchSnippet>,

    /// Optional. Diagnostic info related to the answer generation model call.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub answer_generation_model_call_signals: std::option::Option<
        crate::model::data_store_connection_signals::AnswerGenerationModelCallSignals,
    >,

    /// Optional. The final compiled answer.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub answer: std::string::String,

    /// Optional. Answer parts with relevant citations.
    /// Concatenation of texts should add up the `answer` (not counting
    /// whitespaces).
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub answer_parts: std::vec::Vec<crate::model::data_store_connection_signals::AnswerPart>,

    /// Optional. Snippets cited by the answer generation model from the most to
    /// least relevant.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub cited_snippets: std::vec::Vec<crate::model::data_store_connection_signals::CitedSnippet>,

    /// Optional. Grounding signals.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub grounding_signals:
        std::option::Option<crate::model::data_store_connection_signals::GroundingSignals>,

    /// Optional. Safety check result.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub safety_signals:
        std::option::Option<crate::model::data_store_connection_signals::SafetySignals>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DataStoreConnectionSignals {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [rewriter_model_call_signals][crate::model::DataStoreConnectionSignals::rewriter_model_call_signals].
    pub fn set_rewriter_model_call_signals<
        T: std::convert::Into<
                std::option::Option<
                    crate::model::data_store_connection_signals::RewriterModelCallSignals,
                >,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.rewriter_model_call_signals = v.into();
        self
    }

    /// Sets the value of [rewritten_query][crate::model::DataStoreConnectionSignals::rewritten_query].
    pub fn set_rewritten_query<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rewritten_query = v.into();
        self
    }

    /// Sets the value of [answer_generation_model_call_signals][crate::model::DataStoreConnectionSignals::answer_generation_model_call_signals].
    pub fn set_answer_generation_model_call_signals<
        T: std::convert::Into<
                std::option::Option<
                    crate::model::data_store_connection_signals::AnswerGenerationModelCallSignals,
                >,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.answer_generation_model_call_signals = v.into();
        self
    }

    /// Sets the value of [answer][crate::model::DataStoreConnectionSignals::answer].
    pub fn set_answer<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.answer = v.into();
        self
    }

    /// Sets the value of [grounding_signals][crate::model::DataStoreConnectionSignals::grounding_signals].
    pub fn set_grounding_signals<
        T: std::convert::Into<
                std::option::Option<crate::model::data_store_connection_signals::GroundingSignals>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.grounding_signals = v.into();
        self
    }

    /// Sets the value of [safety_signals][crate::model::DataStoreConnectionSignals::safety_signals].
    pub fn set_safety_signals<
        T: std::convert::Into<
                std::option::Option<crate::model::data_store_connection_signals::SafetySignals>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.safety_signals = v.into();
        self
    }

    /// Sets the value of [search_snippets][crate::model::DataStoreConnectionSignals::search_snippets].
    pub fn set_search_snippets<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::data_store_connection_signals::SearchSnippet>,
    {
        use std::iter::Iterator;
        self.search_snippets = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [answer_parts][crate::model::DataStoreConnectionSignals::answer_parts].
    pub fn set_answer_parts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::data_store_connection_signals::AnswerPart>,
    {
        use std::iter::Iterator;
        self.answer_parts = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [cited_snippets][crate::model::DataStoreConnectionSignals::cited_snippets].
    pub fn set_cited_snippets<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::data_store_connection_signals::CitedSnippet>,
    {
        use std::iter::Iterator;
        self.cited_snippets = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for DataStoreConnectionSignals {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DataStoreConnectionSignals"
    }
}

/// Defines additional types related to [DataStoreConnectionSignals].
pub mod data_store_connection_signals {
    #[allow(unused_imports)]
    use super::*;

    /// Diagnostic info related to the rewriter model call.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RewriterModelCallSignals {
        /// Prompt as sent to the model.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub rendered_prompt: std::string::String,

        /// Output of the generative model.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub model_output: std::string::String,

        /// Name of the generative model. For example, "gemini-ultra", "gemini-pro",
        /// "gemini-1.5-flash" etc. Defaults to "Other" if the model is unknown.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub model: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl RewriterModelCallSignals {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [rendered_prompt][crate::model::data_store_connection_signals::RewriterModelCallSignals::rendered_prompt].
        pub fn set_rendered_prompt<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.rendered_prompt = v.into();
            self
        }

        /// Sets the value of [model_output][crate::model::data_store_connection_signals::RewriterModelCallSignals::model_output].
        pub fn set_model_output<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.model_output = v.into();
            self
        }

        /// Sets the value of [model][crate::model::data_store_connection_signals::RewriterModelCallSignals::model].
        pub fn set_model<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.model = v.into();
            self
        }
    }

    impl wkt::message::Message for RewriterModelCallSignals {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.DataStoreConnectionSignals.RewriterModelCallSignals"
        }
    }

    /// Search snippet details.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SearchSnippet {
        /// Title of the enclosing document.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub document_title: std::string::String,

        /// Uri for the document. Present if specified for the document.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub document_uri: std::string::String,

        /// Text included in the prompt.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub text: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SearchSnippet {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [document_title][crate::model::data_store_connection_signals::SearchSnippet::document_title].
        pub fn set_document_title<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.document_title = v.into();
            self
        }

        /// Sets the value of [document_uri][crate::model::data_store_connection_signals::SearchSnippet::document_uri].
        pub fn set_document_uri<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.document_uri = v.into();
            self
        }

        /// Sets the value of [text][crate::model::data_store_connection_signals::SearchSnippet::text].
        pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.text = v.into();
            self
        }
    }

    impl wkt::message::Message for SearchSnippet {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.DataStoreConnectionSignals.SearchSnippet"
        }
    }

    /// Diagnostic info related to the answer generation model call.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AnswerGenerationModelCallSignals {
        /// Prompt as sent to the model.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub rendered_prompt: std::string::String,

        /// Output of the generative model.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub model_output: std::string::String,

        /// Name of the generative model. For example, "gemini-ultra", "gemini-pro",
        /// "gemini-1.5-flash" etc. Defaults to "Other" if the model is unknown.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub model: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl AnswerGenerationModelCallSignals {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [rendered_prompt][crate::model::data_store_connection_signals::AnswerGenerationModelCallSignals::rendered_prompt].
        pub fn set_rendered_prompt<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.rendered_prompt = v.into();
            self
        }

        /// Sets the value of [model_output][crate::model::data_store_connection_signals::AnswerGenerationModelCallSignals::model_output].
        pub fn set_model_output<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.model_output = v.into();
            self
        }

        /// Sets the value of [model][crate::model::data_store_connection_signals::AnswerGenerationModelCallSignals::model].
        pub fn set_model<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.model = v.into();
            self
        }
    }

    impl wkt::message::Message for AnswerGenerationModelCallSignals {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.DataStoreConnectionSignals.AnswerGenerationModelCallSignals"
        }
    }

    /// Answer part with citation.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AnswerPart {
        /// Substring of the answer.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub text: std::string::String,

        /// Citations for this answer part. Indices of `search_snippets`.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub supporting_indices: std::vec::Vec<i32>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl AnswerPart {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [text][crate::model::data_store_connection_signals::AnswerPart::text].
        pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.text = v.into();
            self
        }

        /// Sets the value of [supporting_indices][crate::model::data_store_connection_signals::AnswerPart::supporting_indices].
        pub fn set_supporting_indices<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<i32>,
        {
            use std::iter::Iterator;
            self.supporting_indices = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for AnswerPart {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.DataStoreConnectionSignals.AnswerPart"
        }
    }

    /// Snippet cited by the answer generation model.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct CitedSnippet {
        /// Details of the snippet.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub search_snippet:
            std::option::Option<crate::model::data_store_connection_signals::SearchSnippet>,

        /// Index of the snippet in `search_snippets` field.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub snippet_index: i32,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl CitedSnippet {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [search_snippet][crate::model::data_store_connection_signals::CitedSnippet::search_snippet].
        pub fn set_search_snippet<
            T: std::convert::Into<
                    std::option::Option<crate::model::data_store_connection_signals::SearchSnippet>,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.search_snippet = v.into();
            self
        }

        /// Sets the value of [snippet_index][crate::model::data_store_connection_signals::CitedSnippet::snippet_index].
        pub fn set_snippet_index<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.snippet_index = v.into();
            self
        }
    }

    impl wkt::message::Message for CitedSnippet {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.DataStoreConnectionSignals.CitedSnippet"
        }
    }

    /// Grounding signals.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct GroundingSignals {
        /// Represents the decision of the grounding check.
        pub decision:
            crate::model::data_store_connection_signals::grounding_signals::GroundingDecision,

        /// Grounding score bucket setting.
        pub score:
            crate::model::data_store_connection_signals::grounding_signals::GroundingScoreBucket,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl GroundingSignals {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [decision][crate::model::data_store_connection_signals::GroundingSignals::decision].
        pub fn set_decision<T: std::convert::Into<crate::model::data_store_connection_signals::grounding_signals::GroundingDecision>>(mut self, v: T) -> Self{
            self.decision = v.into();
            self
        }

        /// Sets the value of [score][crate::model::data_store_connection_signals::GroundingSignals::score].
        pub fn set_score<T: std::convert::Into<crate::model::data_store_connection_signals::grounding_signals::GroundingScoreBucket>>(mut self, v: T) -> Self{
            self.score = v.into();
            self
        }
    }

    impl wkt::message::Message for GroundingSignals {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.DataStoreConnectionSignals.GroundingSignals"
        }
    }

    /// Defines additional types related to [GroundingSignals].
    pub mod grounding_signals {
        #[allow(unused_imports)]
        use super::*;

        /// Represents the decision of the grounding check.
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum GroundingDecision {
            /// Decision not specified.
            Unspecified,
            /// Grounding have accepted the answer.
            AcceptedByGrounding,
            /// Grounding have rejected the answer.
            RejectedByGrounding,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [GroundingDecision::value] or
            /// [GroundingDecision::name].
            UnknownValue(grounding_decision::UnknownValue),
        }

        #[doc(hidden)]
        pub mod grounding_decision {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl GroundingDecision {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::Unspecified => std::option::Option::Some(0),
                    Self::AcceptedByGrounding => std::option::Option::Some(1),
                    Self::RejectedByGrounding => std::option::Option::Some(2),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::Unspecified => {
                        std::option::Option::Some("GROUNDING_DECISION_UNSPECIFIED")
                    }
                    Self::AcceptedByGrounding => std::option::Option::Some("ACCEPTED_BY_GROUNDING"),
                    Self::RejectedByGrounding => std::option::Option::Some("REJECTED_BY_GROUNDING"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for GroundingDecision {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for GroundingDecision {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for GroundingDecision {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::Unspecified,
                    1 => Self::AcceptedByGrounding,
                    2 => Self::RejectedByGrounding,
                    _ => Self::UnknownValue(grounding_decision::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for GroundingDecision {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "GROUNDING_DECISION_UNSPECIFIED" => Self::Unspecified,
                    "ACCEPTED_BY_GROUNDING" => Self::AcceptedByGrounding,
                    "REJECTED_BY_GROUNDING" => Self::RejectedByGrounding,
                    _ => Self::UnknownValue(grounding_decision::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for GroundingDecision {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::Unspecified => serializer.serialize_i32(0),
                    Self::AcceptedByGrounding => serializer.serialize_i32(1),
                    Self::RejectedByGrounding => serializer.serialize_i32(2),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for GroundingDecision {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<GroundingDecision>::new(
                    ".google.cloud.dialogflow.cx.v3.DataStoreConnectionSignals.GroundingSignals.GroundingDecision"))
            }
        }

        /// Grounding score buckets.
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum GroundingScoreBucket {
            /// Score not specified.
            Unspecified,
            /// We have very low confidence that the answer is grounded.
            VeryLow,
            /// We have low confidence that the answer is grounded.
            Low,
            /// We have medium confidence that the answer is grounded.
            Medium,
            /// We have high confidence that the answer is grounded.
            High,
            /// We have very high confidence that the answer is grounded.
            VeryHigh,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [GroundingScoreBucket::value] or
            /// [GroundingScoreBucket::name].
            UnknownValue(grounding_score_bucket::UnknownValue),
        }

        #[doc(hidden)]
        pub mod grounding_score_bucket {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl GroundingScoreBucket {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::Unspecified => std::option::Option::Some(0),
                    Self::VeryLow => std::option::Option::Some(1),
                    Self::Low => std::option::Option::Some(3),
                    Self::Medium => std::option::Option::Some(4),
                    Self::High => std::option::Option::Some(5),
                    Self::VeryHigh => std::option::Option::Some(6),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::Unspecified => {
                        std::option::Option::Some("GROUNDING_SCORE_BUCKET_UNSPECIFIED")
                    }
                    Self::VeryLow => std::option::Option::Some("VERY_LOW"),
                    Self::Low => std::option::Option::Some("LOW"),
                    Self::Medium => std::option::Option::Some("MEDIUM"),
                    Self::High => std::option::Option::Some("HIGH"),
                    Self::VeryHigh => std::option::Option::Some("VERY_HIGH"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for GroundingScoreBucket {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for GroundingScoreBucket {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for GroundingScoreBucket {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::Unspecified,
                    1 => Self::VeryLow,
                    3 => Self::Low,
                    4 => Self::Medium,
                    5 => Self::High,
                    6 => Self::VeryHigh,
                    _ => Self::UnknownValue(grounding_score_bucket::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for GroundingScoreBucket {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "GROUNDING_SCORE_BUCKET_UNSPECIFIED" => Self::Unspecified,
                    "VERY_LOW" => Self::VeryLow,
                    "LOW" => Self::Low,
                    "MEDIUM" => Self::Medium,
                    "HIGH" => Self::High,
                    "VERY_HIGH" => Self::VeryHigh,
                    _ => Self::UnknownValue(grounding_score_bucket::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for GroundingScoreBucket {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::Unspecified => serializer.serialize_i32(0),
                    Self::VeryLow => serializer.serialize_i32(1),
                    Self::Low => serializer.serialize_i32(3),
                    Self::Medium => serializer.serialize_i32(4),
                    Self::High => serializer.serialize_i32(5),
                    Self::VeryHigh => serializer.serialize_i32(6),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for GroundingScoreBucket {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<GroundingScoreBucket>::new(
                    ".google.cloud.dialogflow.cx.v3.DataStoreConnectionSignals.GroundingSignals.GroundingScoreBucket"))
            }
        }
    }

    /// Safety check results.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SafetySignals {
        /// Safety decision.
        pub decision: crate::model::data_store_connection_signals::safety_signals::SafetyDecision,

        /// Specifies banned phrase match subject.
        pub banned_phrase_match:
            crate::model::data_store_connection_signals::safety_signals::BannedPhraseMatch,

        /// The matched banned phrase if there was a match.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub matched_banned_phrase: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SafetySignals {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [decision][crate::model::data_store_connection_signals::SafetySignals::decision].
        pub fn set_decision<
            T: std::convert::Into<
                    crate::model::data_store_connection_signals::safety_signals::SafetyDecision,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.decision = v.into();
            self
        }

        /// Sets the value of [banned_phrase_match][crate::model::data_store_connection_signals::SafetySignals::banned_phrase_match].
        pub fn set_banned_phrase_match<
            T: std::convert::Into<
                    crate::model::data_store_connection_signals::safety_signals::BannedPhraseMatch,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.banned_phrase_match = v.into();
            self
        }

        /// Sets the value of [matched_banned_phrase][crate::model::data_store_connection_signals::SafetySignals::matched_banned_phrase].
        pub fn set_matched_banned_phrase<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.matched_banned_phrase = v.into();
            self
        }
    }

    impl wkt::message::Message for SafetySignals {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.DataStoreConnectionSignals.SafetySignals"
        }
    }

    /// Defines additional types related to [SafetySignals].
    pub mod safety_signals {
        #[allow(unused_imports)]
        use super::*;

        /// Safety decision.
        /// All kinds of check are incorporated into this final decision, including
        /// banned phrases check.
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum SafetyDecision {
            /// Decision not specified.
            Unspecified,
            /// No manual or automatic safety check fired.
            AcceptedBySafetyCheck,
            /// One ore more safety checks fired.
            RejectedBySafetyCheck,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [SafetyDecision::value] or
            /// [SafetyDecision::name].
            UnknownValue(safety_decision::UnknownValue),
        }

        #[doc(hidden)]
        pub mod safety_decision {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl SafetyDecision {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::Unspecified => std::option::Option::Some(0),
                    Self::AcceptedBySafetyCheck => std::option::Option::Some(1),
                    Self::RejectedBySafetyCheck => std::option::Option::Some(2),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::Unspecified => std::option::Option::Some("SAFETY_DECISION_UNSPECIFIED"),
                    Self::AcceptedBySafetyCheck => {
                        std::option::Option::Some("ACCEPTED_BY_SAFETY_CHECK")
                    }
                    Self::RejectedBySafetyCheck => {
                        std::option::Option::Some("REJECTED_BY_SAFETY_CHECK")
                    }
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for SafetyDecision {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for SafetyDecision {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for SafetyDecision {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::Unspecified,
                    1 => Self::AcceptedBySafetyCheck,
                    2 => Self::RejectedBySafetyCheck,
                    _ => Self::UnknownValue(safety_decision::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for SafetyDecision {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "SAFETY_DECISION_UNSPECIFIED" => Self::Unspecified,
                    "ACCEPTED_BY_SAFETY_CHECK" => Self::AcceptedBySafetyCheck,
                    "REJECTED_BY_SAFETY_CHECK" => Self::RejectedBySafetyCheck,
                    _ => Self::UnknownValue(safety_decision::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for SafetyDecision {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::Unspecified => serializer.serialize_i32(0),
                    Self::AcceptedBySafetyCheck => serializer.serialize_i32(1),
                    Self::RejectedBySafetyCheck => serializer.serialize_i32(2),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for SafetyDecision {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<SafetyDecision>::new(
                    ".google.cloud.dialogflow.cx.v3.DataStoreConnectionSignals.SafetySignals.SafetyDecision"))
            }
        }

        /// Specifies banned phrase match subject.
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum BannedPhraseMatch {
            /// No banned phrase check was executed.
            Unspecified,
            /// All banned phrase checks led to no match.
            None,
            /// A banned phrase matched the query.
            Query,
            /// A banned phrase matched the response.
            Response,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [BannedPhraseMatch::value] or
            /// [BannedPhraseMatch::name].
            UnknownValue(banned_phrase_match::UnknownValue),
        }

        #[doc(hidden)]
        pub mod banned_phrase_match {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl BannedPhraseMatch {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::Unspecified => std::option::Option::Some(0),
                    Self::None => std::option::Option::Some(1),
                    Self::Query => std::option::Option::Some(2),
                    Self::Response => std::option::Option::Some(3),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::Unspecified => {
                        std::option::Option::Some("BANNED_PHRASE_MATCH_UNSPECIFIED")
                    }
                    Self::None => std::option::Option::Some("BANNED_PHRASE_MATCH_NONE"),
                    Self::Query => std::option::Option::Some("BANNED_PHRASE_MATCH_QUERY"),
                    Self::Response => std::option::Option::Some("BANNED_PHRASE_MATCH_RESPONSE"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for BannedPhraseMatch {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for BannedPhraseMatch {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for BannedPhraseMatch {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::Unspecified,
                    1 => Self::None,
                    2 => Self::Query,
                    3 => Self::Response,
                    _ => Self::UnknownValue(banned_phrase_match::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for BannedPhraseMatch {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "BANNED_PHRASE_MATCH_UNSPECIFIED" => Self::Unspecified,
                    "BANNED_PHRASE_MATCH_NONE" => Self::None,
                    "BANNED_PHRASE_MATCH_QUERY" => Self::Query,
                    "BANNED_PHRASE_MATCH_RESPONSE" => Self::Response,
                    _ => Self::UnknownValue(banned_phrase_match::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for BannedPhraseMatch {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::Unspecified => serializer.serialize_i32(0),
                    Self::None => serializer.serialize_i32(1),
                    Self::Query => serializer.serialize_i32(2),
                    Self::Response => serializer.serialize_i32(3),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for BannedPhraseMatch {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<BannedPhraseMatch>::new(
                    ".google.cloud.dialogflow.cx.v3.DataStoreConnectionSignals.SafetySignals.BannedPhraseMatch"))
            }
        }
    }
}

/// Represents a deployment in an environment. A deployment happens when a flow
/// version configured to be active in the environment. You can configure running
/// pre-deployment steps, e.g. running validation test cases, experiment
/// auto-rollout, etc.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Deployment {
    /// The name of the deployment.
    /// Format:
    /// projects/\<ProjectID\>/locations/\<LocationID\>/agents/\<AgentID\>/environments/\<EnvironmentID\>/deployments/\<DeploymentID\>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The name of the flow version for this deployment.
    /// Format:
    /// projects/\<ProjectID\>/locations/\<LocationID\>/agents/\<AgentID\>/flows/\<FlowID\>/versions/\<VerionID\>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub flow_version: std::string::String,

    /// The current state of the deployment.
    pub state: crate::model::deployment::State,

    /// Result of the deployment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub result: std::option::Option<crate::model::deployment::Result>,

    /// Start time of this deployment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time: std::option::Option<wkt::Timestamp>,

    /// End time of this deployment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Deployment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Deployment::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [flow_version][crate::model::Deployment::flow_version].
    pub fn set_flow_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.flow_version = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Deployment::state].
    pub fn set_state<T: std::convert::Into<crate::model::deployment::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [result][crate::model::Deployment::result].
    pub fn set_result<
        T: std::convert::Into<std::option::Option<crate::model::deployment::Result>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.result = v.into();
        self
    }

    /// Sets the value of [start_time][crate::model::Deployment::start_time].
    pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::Deployment::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }
}

impl wkt::message::Message for Deployment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.Deployment"
    }
}

/// Defines additional types related to [Deployment].
pub mod deployment {
    #[allow(unused_imports)]
    use super::*;

    /// Result of the deployment.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Result {
        /// Results of test cases running before the deployment.
        /// Format:
        /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/testCases/<TestCaseID>/results/<TestCaseResultID>`.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub deployment_test_results: std::vec::Vec<std::string::String>,

        /// The name of the experiment triggered by this deployment.
        /// Format:
        /// projects/\<ProjectID\>/locations/\<LocationID\>/agents/\<AgentID\>/environments/\<EnvironmentID\>/experiments/\<ExperimentID\>.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub experiment: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Result {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [experiment][crate::model::deployment::Result::experiment].
        pub fn set_experiment<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.experiment = v.into();
            self
        }

        /// Sets the value of [deployment_test_results][crate::model::deployment::Result::deployment_test_results].
        pub fn set_deployment_test_results<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.deployment_test_results = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for Result {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Deployment.Result"
        }
    }

    /// The state of the deployment.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum State {
        /// State unspecified.
        Unspecified,
        /// The deployment is running.
        Running,
        /// The deployment succeeded.
        Succeeded,
        /// The deployment failed.
        Failed,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [State::value] or
        /// [State::name].
        UnknownValue(state::UnknownValue),
    }

    #[doc(hidden)]
    pub mod state {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl State {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Running => std::option::Option::Some(1),
                Self::Succeeded => std::option::Option::Some(2),
                Self::Failed => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("STATE_UNSPECIFIED"),
                Self::Running => std::option::Option::Some("RUNNING"),
                Self::Succeeded => std::option::Option::Some("SUCCEEDED"),
                Self::Failed => std::option::Option::Some("FAILED"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for State {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Running,
                2 => Self::Succeeded,
                3 => Self::Failed,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for State {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "STATE_UNSPECIFIED" => Self::Unspecified,
                "RUNNING" => Self::Running,
                "SUCCEEDED" => Self::Succeeded,
                "FAILED" => Self::Failed,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for State {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Running => serializer.serialize_i32(1),
                Self::Succeeded => serializer.serialize_i32(2),
                Self::Failed => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for State {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<State>::new(
                ".google.cloud.dialogflow.cx.v3.Deployment.State",
            ))
        }
    }
}

/// The request message for
/// [Deployments.ListDeployments][google.cloud.dialogflow.cx.v3.Deployments.ListDeployments].
///
/// [google.cloud.dialogflow.cx.v3.Deployments.ListDeployments]: crate::client::Deployments::list_deployments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListDeploymentsRequest {
    /// Required. The [Environment][google.cloud.dialogflow.cx.v3.Environment] to
    /// list all environments for. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return in a single page. By default 20 and
    /// at most 100.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListDeploymentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListDeploymentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListDeploymentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListDeploymentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListDeploymentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListDeploymentsRequest"
    }
}

/// The response message for
/// [Deployments.ListDeployments][google.cloud.dialogflow.cx.v3.Deployments.ListDeployments].
///
/// [google.cloud.dialogflow.cx.v3.Deployments.ListDeployments]: crate::client::Deployments::list_deployments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListDeploymentsResponse {
    /// The list of deployments. There will be a maximum number of items
    /// returned based on the page_size field in the request. The list may in some
    /// cases be empty or contain fewer entries than page_size even if this isn't
    /// the last page.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub deployments: std::vec::Vec<crate::model::Deployment>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListDeploymentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListDeploymentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [deployments][crate::model::ListDeploymentsResponse::deployments].
    pub fn set_deployments<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Deployment>,
    {
        use std::iter::Iterator;
        self.deployments = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListDeploymentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListDeploymentsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListDeploymentsResponse {
    type PageItem = crate::model::Deployment;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.deployments
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Deployments.GetDeployment][google.cloud.dialogflow.cx.v3.Deployments.GetDeployment].
///
/// [google.cloud.dialogflow.cx.v3.Deployments.GetDeployment]: crate::client::Deployments::get_deployment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetDeploymentRequest {
    /// Required. The name of the
    /// [Deployment][google.cloud.dialogflow.cx.v3.Deployment]. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>/deployments/<DeploymentID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Deployment]: crate::model::Deployment
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetDeploymentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetDeploymentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetDeploymentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetDeploymentRequest"
    }
}

/// Entities are extracted from user input and represent parameters that are
/// meaningful to your application. For example, a date range, a proper name
/// such as a geographic location or landmark, and so on. Entities represent
/// actionable data for your application.
///
/// When you define an entity, you can also include synonyms that all map to
/// that entity. For example, "soft drink", "soda", "pop", and so on.
///
/// There are three types of entities:
///
/// * **System** - entities that are defined by the Dialogflow API for common
///   data types such as date, time, currency, and so on. A system entity is
///   represented by the `EntityType` type.
///
/// * **Custom** - entities that are defined by you that represent
///   actionable data that is meaningful to your application. For example,
///   you could define a `pizza.sauce` entity for red or white pizza sauce,
///   a `pizza.cheese` entity for the different types of cheese on a pizza,
///   a `pizza.topping` entity for different toppings, and so on. A custom
///   entity is represented by the `EntityType` type.
///
/// * **User** - entities that are built for an individual user such as
///   favorites, preferences, playlists, and so on. A user entity is
///   represented by the
///   [SessionEntityType][google.cloud.dialogflow.cx.v3.SessionEntityType]
///   type.
///
///
/// For more information about entity types, see the [Dialogflow
/// documentation](https://cloud.google.com/dialogflow/docs/entities-overview).
///
/// [google.cloud.dialogflow.cx.v3.SessionEntityType]: crate::model::SessionEntityType
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EntityType {
    /// The unique identifier of the entity type.
    /// Required for
    /// [EntityTypes.UpdateEntityType][google.cloud.dialogflow.cx.v3.EntityTypes.UpdateEntityType].
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/entityTypes/<EntityTypeID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.EntityTypes.UpdateEntityType]: crate::client::EntityTypes::update_entity_type
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The human-readable name of the entity type, unique within the
    /// agent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Required. Indicates the kind of entity type.
    pub kind: crate::model::entity_type::Kind,

    /// Indicates whether the entity type can be automatically expanded.
    pub auto_expansion_mode: crate::model::entity_type::AutoExpansionMode,

    /// The collection of entity entries associated with the entity type.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub entities: std::vec::Vec<crate::model::entity_type::Entity>,

    /// Collection of exceptional words and phrases that shouldn't be matched.
    /// For example, if you have a size entity type with entry `giant`(an
    /// adjective), you might consider adding `giants`(a noun) as an exclusion.
    /// If the kind of entity type is `KIND_MAP`, then the phrases specified by
    /// entities and excluded phrases should be mutually exclusive.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub excluded_phrases: std::vec::Vec<crate::model::entity_type::ExcludedPhrase>,

    /// Enables fuzzy entity extraction during classification.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_fuzzy_extraction: bool,

    /// Indicates whether parameters of the entity type should be redacted in log.
    /// If redaction is enabled, page parameters and intent parameters referring to
    /// the entity type will be replaced by parameter name when logging.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub redact: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl EntityType {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::EntityType::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::EntityType::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [kind][crate::model::EntityType::kind].
    pub fn set_kind<T: std::convert::Into<crate::model::entity_type::Kind>>(
        mut self,
        v: T,
    ) -> Self {
        self.kind = v.into();
        self
    }

    /// Sets the value of [auto_expansion_mode][crate::model::EntityType::auto_expansion_mode].
    pub fn set_auto_expansion_mode<
        T: std::convert::Into<crate::model::entity_type::AutoExpansionMode>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.auto_expansion_mode = v.into();
        self
    }

    /// Sets the value of [enable_fuzzy_extraction][crate::model::EntityType::enable_fuzzy_extraction].
    pub fn set_enable_fuzzy_extraction<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_fuzzy_extraction = v.into();
        self
    }

    /// Sets the value of [redact][crate::model::EntityType::redact].
    pub fn set_redact<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.redact = v.into();
        self
    }

    /// Sets the value of [entities][crate::model::EntityType::entities].
    pub fn set_entities<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::entity_type::Entity>,
    {
        use std::iter::Iterator;
        self.entities = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [excluded_phrases][crate::model::EntityType::excluded_phrases].
    pub fn set_excluded_phrases<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::entity_type::ExcludedPhrase>,
    {
        use std::iter::Iterator;
        self.excluded_phrases = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for EntityType {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.EntityType"
    }
}

/// Defines additional types related to [EntityType].
pub mod entity_type {
    #[allow(unused_imports)]
    use super::*;

    /// An **entity entry** for an associated entity type.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Entity {
        /// Required. The primary value associated with this entity entry.
        /// For example, if the entity type is *vegetable*, the value could be
        /// *scallions*.
        ///
        /// For `KIND_MAP` entity types:
        ///
        /// * A canonical value to be used in place of synonyms.
        ///
        /// For `KIND_LIST` entity types:
        ///
        /// * A string that can contain references to other entity types (with or
        ///   without aliases).
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub value: std::string::String,

        /// Required. A collection of value synonyms. For example, if the entity type
        /// is *vegetable*, and `value` is *scallions*, a synonym could be *green
        /// onions*.
        ///
        /// For `KIND_LIST` entity types:
        ///
        /// * This collection must contain exactly one synonym equal to `value`.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub synonyms: std::vec::Vec<std::string::String>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Entity {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [value][crate::model::entity_type::Entity::value].
        pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.value = v.into();
            self
        }

        /// Sets the value of [synonyms][crate::model::entity_type::Entity::synonyms].
        pub fn set_synonyms<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.synonyms = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for Entity {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.EntityType.Entity"
        }
    }

    /// An excluded entity phrase that should not be matched.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ExcludedPhrase {
        /// Required. The word or phrase to be excluded.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub value: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ExcludedPhrase {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [value][crate::model::entity_type::ExcludedPhrase::value].
        pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.value = v.into();
            self
        }
    }

    impl wkt::message::Message for ExcludedPhrase {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.EntityType.ExcludedPhrase"
        }
    }

    /// Represents kinds of entities.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Kind {
        /// Not specified. This value should be never used.
        Unspecified,
        /// Map entity types allow mapping of a group of synonyms to a canonical
        /// value.
        Map,
        /// List entity types contain a set of entries that do not map to canonical
        /// values. However, list entity types can contain references to other entity
        /// types (with or without aliases).
        List,
        /// Regexp entity types allow to specify regular expressions in entries
        /// values.
        Regexp,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [Kind::value] or
        /// [Kind::name].
        UnknownValue(kind::UnknownValue),
    }

    #[doc(hidden)]
    pub mod kind {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl Kind {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Map => std::option::Option::Some(1),
                Self::List => std::option::Option::Some(2),
                Self::Regexp => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("KIND_UNSPECIFIED"),
                Self::Map => std::option::Option::Some("KIND_MAP"),
                Self::List => std::option::Option::Some("KIND_LIST"),
                Self::Regexp => std::option::Option::Some("KIND_REGEXP"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for Kind {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for Kind {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for Kind {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Map,
                2 => Self::List,
                3 => Self::Regexp,
                _ => Self::UnknownValue(kind::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for Kind {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "KIND_UNSPECIFIED" => Self::Unspecified,
                "KIND_MAP" => Self::Map,
                "KIND_LIST" => Self::List,
                "KIND_REGEXP" => Self::Regexp,
                _ => Self::UnknownValue(kind::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for Kind {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Map => serializer.serialize_i32(1),
                Self::List => serializer.serialize_i32(2),
                Self::Regexp => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for Kind {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<Kind>::new(
                ".google.cloud.dialogflow.cx.v3.EntityType.Kind",
            ))
        }
    }

    /// Represents different entity type expansion modes. Automated expansion
    /// allows an agent to recognize values that have not been explicitly listed in
    /// the entity (for example, new kinds of shopping list items).
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum AutoExpansionMode {
        /// Auto expansion disabled for the entity.
        Unspecified,
        /// Allows an agent to recognize values that have not been explicitly
        /// listed in the entity.
        Default,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [AutoExpansionMode::value] or
        /// [AutoExpansionMode::name].
        UnknownValue(auto_expansion_mode::UnknownValue),
    }

    #[doc(hidden)]
    pub mod auto_expansion_mode {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl AutoExpansionMode {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Default => std::option::Option::Some(1),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("AUTO_EXPANSION_MODE_UNSPECIFIED"),
                Self::Default => std::option::Option::Some("AUTO_EXPANSION_MODE_DEFAULT"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for AutoExpansionMode {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for AutoExpansionMode {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for AutoExpansionMode {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Default,
                _ => Self::UnknownValue(auto_expansion_mode::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for AutoExpansionMode {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "AUTO_EXPANSION_MODE_UNSPECIFIED" => Self::Unspecified,
                "AUTO_EXPANSION_MODE_DEFAULT" => Self::Default,
                _ => Self::UnknownValue(auto_expansion_mode::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for AutoExpansionMode {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Default => serializer.serialize_i32(1),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for AutoExpansionMode {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<AutoExpansionMode>::new(
                ".google.cloud.dialogflow.cx.v3.EntityType.AutoExpansionMode",
            ))
        }
    }
}

/// The request message for
/// [EntityTypes.ExportEntityTypes][google.cloud.dialogflow.cx.v3.EntityTypes.ExportEntityTypes].
///
/// [google.cloud.dialogflow.cx.v3.EntityTypes.ExportEntityTypes]: crate::client::EntityTypes::export_entity_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportEntityTypesRequest {
    /// Required. The name of the parent agent to export entity types.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The name of the entity types to export.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/entityTypes/<EntityTypeID>`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub entity_types: std::vec::Vec<std::string::String>,

    /// Optional. The data format of the exported entity types. If not specified,
    /// `BLOB` is assumed.
    pub data_format: crate::model::export_entity_types_request::DataFormat,

    /// Optional. The language to retrieve the entity type for. The following
    /// fields are language dependent:
    ///
    /// * `EntityType.entities.value`
    /// * `EntityType.entities.synonyms`
    /// * `EntityType.excluded_phrases.value`
    ///
    /// If not specified, all language dependent fields will be retrieved.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// The destination to export.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub destination: std::option::Option<crate::model::export_entity_types_request::Destination>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExportEntityTypesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ExportEntityTypesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [data_format][crate::model::ExportEntityTypesRequest::data_format].
    pub fn set_data_format<
        T: std::convert::Into<crate::model::export_entity_types_request::DataFormat>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.data_format = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::ExportEntityTypesRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [entity_types][crate::model::ExportEntityTypesRequest::entity_types].
    pub fn set_entity_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.entity_types = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [destination][crate::model::ExportEntityTypesRequest::destination].
    ///
    /// Note that all the setters affecting `destination` are mutually
    /// exclusive.
    pub fn set_destination<
        T: std::convert::Into<
                std::option::Option<crate::model::export_entity_types_request::Destination>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = v.into();
        self
    }

    /// The value of [destination][crate::model::ExportEntityTypesRequest::destination]
    /// if it holds a `EntityTypesUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn entity_types_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::export_entity_types_request::Destination::EntityTypesUri(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [destination][crate::model::ExportEntityTypesRequest::destination]
    /// if it holds a `EntityTypesContentInline`, `None` if the field is not set or
    /// holds a different branch.
    pub fn entity_types_content_inline(&self) -> std::option::Option<&bool> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::export_entity_types_request::Destination::EntityTypesContentInline(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [destination][crate::model::ExportEntityTypesRequest::destination]
    /// to hold a `EntityTypesUri`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_entity_types_uri<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::export_entity_types_request::Destination::EntityTypesUri(v.into()),
        );
        self
    }

    /// Sets the value of [destination][crate::model::ExportEntityTypesRequest::destination]
    /// to hold a `EntityTypesContentInline`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_entity_types_content_inline<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::export_entity_types_request::Destination::EntityTypesContentInline(
                v.into(),
            ),
        );
        self
    }
}

impl wkt::message::Message for ExportEntityTypesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ExportEntityTypesRequest"
    }
}

/// Defines additional types related to [ExportEntityTypesRequest].
pub mod export_entity_types_request {
    #[allow(unused_imports)]
    use super::*;

    /// Data format of the exported entity types.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum DataFormat {
        /// Unspecified format. Treated as `BLOB`.
        Unspecified,
        /// EntityTypes will be exported as raw bytes.
        Blob,
        /// EntityTypes will be exported in JSON Package format.
        JsonPackage,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [DataFormat::value] or
        /// [DataFormat::name].
        UnknownValue(data_format::UnknownValue),
    }

    #[doc(hidden)]
    pub mod data_format {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl DataFormat {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Blob => std::option::Option::Some(1),
                Self::JsonPackage => std::option::Option::Some(5),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("DATA_FORMAT_UNSPECIFIED"),
                Self::Blob => std::option::Option::Some("BLOB"),
                Self::JsonPackage => std::option::Option::Some("JSON_PACKAGE"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for DataFormat {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for DataFormat {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for DataFormat {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Blob,
                5 => Self::JsonPackage,
                _ => Self::UnknownValue(data_format::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for DataFormat {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "DATA_FORMAT_UNSPECIFIED" => Self::Unspecified,
                "BLOB" => Self::Blob,
                "JSON_PACKAGE" => Self::JsonPackage,
                _ => Self::UnknownValue(data_format::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for DataFormat {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Blob => serializer.serialize_i32(1),
                Self::JsonPackage => serializer.serialize_i32(5),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for DataFormat {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<DataFormat>::new(
                ".google.cloud.dialogflow.cx.v3.ExportEntityTypesRequest.DataFormat",
            ))
        }
    }

    /// The destination to export.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Destination {
        /// Optional. The [Google Cloud
        /// Storage](https://cloud.google.com/storage/docs/) URI to export the entity
        /// types to. The format of this URI must be
        /// `gs://<bucket-name>/<object-name>`.
        ///
        /// Dialogflow performs a write operation for the Cloud Storage object
        /// on the caller's behalf, so your request authentication must
        /// have write permissions for the object. For more information, see
        /// [Dialogflow access
        /// control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
        EntityTypesUri(std::string::String),
        /// Optional. The option to return the serialized entity types inline.
        EntityTypesContentInline(bool),
    }
}

/// The response message for
/// [EntityTypes.ExportEntityTypes][google.cloud.dialogflow.cx.v3.EntityTypes.ExportEntityTypes].
///
/// [google.cloud.dialogflow.cx.v3.EntityTypes.ExportEntityTypes]: crate::client::EntityTypes::export_entity_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportEntityTypesResponse {
    /// Exported entity types can be either in cloud storage or local download.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub exported_entity_types:
        std::option::Option<crate::model::export_entity_types_response::ExportedEntityTypes>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExportEntityTypesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [exported_entity_types][crate::model::ExportEntityTypesResponse::exported_entity_types].
    ///
    /// Note that all the setters affecting `exported_entity_types` are mutually
    /// exclusive.
    pub fn set_exported_entity_types<
        T: std::convert::Into<
                std::option::Option<
                    crate::model::export_entity_types_response::ExportedEntityTypes,
                >,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.exported_entity_types = v.into();
        self
    }

    /// The value of [exported_entity_types][crate::model::ExportEntityTypesResponse::exported_entity_types]
    /// if it holds a `EntityTypesUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn entity_types_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.exported_entity_types.as_ref().and_then(|v| match v {
            crate::model::export_entity_types_response::ExportedEntityTypes::EntityTypesUri(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [exported_entity_types][crate::model::ExportEntityTypesResponse::exported_entity_types]
    /// if it holds a `EntityTypesContent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn entity_types_content(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::InlineDestination>> {
        #[allow(unreachable_patterns)]
        self.exported_entity_types.as_ref().and_then(|v| match v {
            crate::model::export_entity_types_response::ExportedEntityTypes::EntityTypesContent(
                v,
            ) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [exported_entity_types][crate::model::ExportEntityTypesResponse::exported_entity_types]
    /// to hold a `EntityTypesUri`.
    ///
    /// Note that all the setters affecting `exported_entity_types` are
    /// mutually exclusive.
    pub fn set_entity_types_uri<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.exported_entity_types = std::option::Option::Some(
            crate::model::export_entity_types_response::ExportedEntityTypes::EntityTypesUri(
                v.into(),
            ),
        );
        self
    }

    /// Sets the value of [exported_entity_types][crate::model::ExportEntityTypesResponse::exported_entity_types]
    /// to hold a `EntityTypesContent`.
    ///
    /// Note that all the setters affecting `exported_entity_types` are
    /// mutually exclusive.
    pub fn set_entity_types_content<
        T: std::convert::Into<std::boxed::Box<crate::model::InlineDestination>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.exported_entity_types = std::option::Option::Some(
            crate::model::export_entity_types_response::ExportedEntityTypes::EntityTypesContent(
                v.into(),
            ),
        );
        self
    }
}

impl wkt::message::Message for ExportEntityTypesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ExportEntityTypesResponse"
    }
}

/// Defines additional types related to [ExportEntityTypesResponse].
pub mod export_entity_types_response {
    #[allow(unused_imports)]
    use super::*;

    /// Exported entity types can be either in cloud storage or local download.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum ExportedEntityTypes {
        /// The URI to a file containing the exported entity types. This field is
        /// populated only if `entity_types_uri` is specified in
        /// [ExportEntityTypesRequest][google.cloud.dialogflow.cx.v3.ExportEntityTypesRequest].
        ///
        /// [google.cloud.dialogflow.cx.v3.ExportEntityTypesRequest]: crate::model::ExportEntityTypesRequest
        EntityTypesUri(std::string::String),
        /// Uncompressed byte content for entity types. This field is populated only
        /// if `entity_types_content_inline` is set to true in
        /// [ExportEntityTypesRequest][google.cloud.dialogflow.cx.v3.ExportEntityTypesRequest].
        ///
        /// [google.cloud.dialogflow.cx.v3.ExportEntityTypesRequest]: crate::model::ExportEntityTypesRequest
        EntityTypesContent(std::boxed::Box<crate::model::InlineDestination>),
    }
}

/// Metadata returned for the
/// [EntityTypes.ExportEntityTypes][google.cloud.dialogflow.cx.v3.EntityTypes.ExportEntityTypes]
/// long running operation.
///
/// [google.cloud.dialogflow.cx.v3.EntityTypes.ExportEntityTypes]: crate::client::EntityTypes::export_entity_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportEntityTypesMetadata {
    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExportEntityTypesMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for ExportEntityTypesMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ExportEntityTypesMetadata"
    }
}

/// The request message for
/// [EntityTypes.ImportEntityTypes][google.cloud.dialogflow.cx.v3.EntityTypes.ImportEntityTypes].
///
/// [google.cloud.dialogflow.cx.v3.EntityTypes.ImportEntityTypes]: crate::client::EntityTypes::import_entity_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportEntityTypesRequest {
    /// Required. The agent to import the entity types into.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Merge option for importing entity types.
    pub merge_option: crate::model::import_entity_types_request::MergeOption,

    /// Optional. The target entity type to import into.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/entity_types/<EntityTypeID>`.
    /// If set, there should be only one entity type included in
    /// [entity_types][google.cloud.dialogflow.cx.v3.ImportEntityTypesRequest.entity_types],
    /// of which the type should match the type of the target entity type. All
    /// [entities][google.cloud.dialogflow.cx.v3.EntityType.entities] in the
    /// imported entity type will be added to the target entity type.
    ///
    /// [google.cloud.dialogflow.cx.v3.EntityType.entities]: crate::model::EntityType::entities
    /// [google.cloud.dialogflow.cx.v3.ImportEntityTypesRequest.entity_types]: crate::model::ImportEntityTypesRequest::entity_types
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_entity_type: std::string::String,

    /// Required. The entity types to import.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub entity_types: std::option::Option<crate::model::import_entity_types_request::EntityTypes>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportEntityTypesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ImportEntityTypesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [merge_option][crate::model::ImportEntityTypesRequest::merge_option].
    pub fn set_merge_option<
        T: std::convert::Into<crate::model::import_entity_types_request::MergeOption>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.merge_option = v.into();
        self
    }

    /// Sets the value of [target_entity_type][crate::model::ImportEntityTypesRequest::target_entity_type].
    pub fn set_target_entity_type<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.target_entity_type = v.into();
        self
    }

    /// Sets the value of [entity_types][crate::model::ImportEntityTypesRequest::entity_types].
    ///
    /// Note that all the setters affecting `entity_types` are mutually
    /// exclusive.
    pub fn set_entity_types<
        T: std::convert::Into<
                std::option::Option<crate::model::import_entity_types_request::EntityTypes>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.entity_types = v.into();
        self
    }

    /// The value of [entity_types][crate::model::ImportEntityTypesRequest::entity_types]
    /// if it holds a `EntityTypesUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn entity_types_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.entity_types.as_ref().and_then(|v| match v {
            crate::model::import_entity_types_request::EntityTypes::EntityTypesUri(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [entity_types][crate::model::ImportEntityTypesRequest::entity_types]
    /// if it holds a `EntityTypesContent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn entity_types_content(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::InlineSource>> {
        #[allow(unreachable_patterns)]
        self.entity_types.as_ref().and_then(|v| match v {
            crate::model::import_entity_types_request::EntityTypes::EntityTypesContent(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [entity_types][crate::model::ImportEntityTypesRequest::entity_types]
    /// to hold a `EntityTypesUri`.
    ///
    /// Note that all the setters affecting `entity_types` are
    /// mutually exclusive.
    pub fn set_entity_types_uri<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.entity_types = std::option::Option::Some(
            crate::model::import_entity_types_request::EntityTypes::EntityTypesUri(v.into()),
        );
        self
    }

    /// Sets the value of [entity_types][crate::model::ImportEntityTypesRequest::entity_types]
    /// to hold a `EntityTypesContent`.
    ///
    /// Note that all the setters affecting `entity_types` are
    /// mutually exclusive.
    pub fn set_entity_types_content<
        T: std::convert::Into<std::boxed::Box<crate::model::InlineSource>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.entity_types = std::option::Option::Some(
            crate::model::import_entity_types_request::EntityTypes::EntityTypesContent(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ImportEntityTypesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ImportEntityTypesRequest"
    }
}

/// Defines additional types related to [ImportEntityTypesRequest].
pub mod import_entity_types_request {
    #[allow(unused_imports)]
    use super::*;

    /// Merge option when display name conflicts exist during import.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum MergeOption {
        /// Unspecified. If used, system uses REPORT_CONFLICT as default.
        Unspecified,
        /// Replace the original entity type in the agent with the new entity type
        /// when display name conflicts exist.
        Replace,
        /// Merge the original entity type with the new entity type when display name
        /// conflicts exist.
        Merge,
        /// Create new entity types with new display names to differentiate them from
        /// the existing entity types when display name conflicts exist.
        Rename,
        /// Report conflict information if display names conflict is detected.
        /// Otherwise, import entity types.
        ReportConflict,
        /// Keep the original entity type and discard the conflicting new entity type
        /// when display name conflicts exist.
        Keep,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [MergeOption::value] or
        /// [MergeOption::name].
        UnknownValue(merge_option::UnknownValue),
    }

    #[doc(hidden)]
    pub mod merge_option {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl MergeOption {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Replace => std::option::Option::Some(1),
                Self::Merge => std::option::Option::Some(2),
                Self::Rename => std::option::Option::Some(3),
                Self::ReportConflict => std::option::Option::Some(4),
                Self::Keep => std::option::Option::Some(5),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("MERGE_OPTION_UNSPECIFIED"),
                Self::Replace => std::option::Option::Some("REPLACE"),
                Self::Merge => std::option::Option::Some("MERGE"),
                Self::Rename => std::option::Option::Some("RENAME"),
                Self::ReportConflict => std::option::Option::Some("REPORT_CONFLICT"),
                Self::Keep => std::option::Option::Some("KEEP"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for MergeOption {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for MergeOption {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for MergeOption {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Replace,
                2 => Self::Merge,
                3 => Self::Rename,
                4 => Self::ReportConflict,
                5 => Self::Keep,
                _ => Self::UnknownValue(merge_option::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for MergeOption {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "MERGE_OPTION_UNSPECIFIED" => Self::Unspecified,
                "REPLACE" => Self::Replace,
                "MERGE" => Self::Merge,
                "RENAME" => Self::Rename,
                "REPORT_CONFLICT" => Self::ReportConflict,
                "KEEP" => Self::Keep,
                _ => Self::UnknownValue(merge_option::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for MergeOption {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Replace => serializer.serialize_i32(1),
                Self::Merge => serializer.serialize_i32(2),
                Self::Rename => serializer.serialize_i32(3),
                Self::ReportConflict => serializer.serialize_i32(4),
                Self::Keep => serializer.serialize_i32(5),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for MergeOption {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<MergeOption>::new(
                ".google.cloud.dialogflow.cx.v3.ImportEntityTypesRequest.MergeOption",
            ))
        }
    }

    /// Required. The entity types to import.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum EntityTypes {
        /// The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI
        /// to import entity types from. The format of this URI must be
        /// `gs://<bucket-name>/<object-name>`.
        ///
        /// Dialogflow performs a read operation for the Cloud Storage object
        /// on the caller's behalf, so your request authentication must
        /// have read permissions for the object. For more information, see
        /// [Dialogflow access
        /// control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
        EntityTypesUri(std::string::String),
        /// Uncompressed byte content of entity types.
        EntityTypesContent(std::boxed::Box<crate::model::InlineSource>),
    }
}

/// The response message for
/// [EntityTypes.ImportEntityTypes][google.cloud.dialogflow.cx.v3.EntityTypes.ImportEntityTypes].
///
/// [google.cloud.dialogflow.cx.v3.EntityTypes.ImportEntityTypes]: crate::client::EntityTypes::import_entity_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportEntityTypesResponse {
    /// The unique identifier of the imported entity types.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/entity_types/<EntityTypeID>`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub entity_types: std::vec::Vec<std::string::String>,

    /// Info which resources have conflicts when
    /// [REPORT_CONFLICT][ImportEntityTypesResponse.REPORT_CONFLICT] merge_option
    /// is set in ImportEntityTypesRequest.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub conflicting_resources:
        std::option::Option<crate::model::import_entity_types_response::ConflictingResources>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportEntityTypesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conflicting_resources][crate::model::ImportEntityTypesResponse::conflicting_resources].
    pub fn set_conflicting_resources<
        T: std::convert::Into<
                std::option::Option<
                    crate::model::import_entity_types_response::ConflictingResources,
                >,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.conflicting_resources = v.into();
        self
    }

    /// Sets the value of [entity_types][crate::model::ImportEntityTypesResponse::entity_types].
    pub fn set_entity_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.entity_types = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ImportEntityTypesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ImportEntityTypesResponse"
    }
}

/// Defines additional types related to [ImportEntityTypesResponse].
pub mod import_entity_types_response {
    #[allow(unused_imports)]
    use super::*;

    /// Conflicting resources detected during the import process. Only filled when
    /// [REPORT_CONFLICT][ImportEntityTypesResponse.REPORT_CONFLICT] is set in the
    /// request and there are conflicts in the display names.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ConflictingResources {
        /// Display names of conflicting entity types.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub entity_type_display_names: std::vec::Vec<std::string::String>,

        /// Display names of conflicting entities.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub entity_display_names: std::vec::Vec<std::string::String>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ConflictingResources {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [entity_type_display_names][crate::model::import_entity_types_response::ConflictingResources::entity_type_display_names].
        pub fn set_entity_type_display_names<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.entity_type_display_names = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [entity_display_names][crate::model::import_entity_types_response::ConflictingResources::entity_display_names].
        pub fn set_entity_display_names<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.entity_display_names = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for ConflictingResources {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.ImportEntityTypesResponse.ConflictingResources"
        }
    }
}

/// Metadata returned for the
/// [EntityTypes.ImportEntityTypes][google.cloud.dialogflow.cx.v3.EntityTypes.ImportEntityTypes]
/// long running operation.
///
/// [google.cloud.dialogflow.cx.v3.EntityTypes.ImportEntityTypes]: crate::client::EntityTypes::import_entity_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportEntityTypesMetadata {
    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportEntityTypesMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for ImportEntityTypesMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ImportEntityTypesMetadata"
    }
}

/// The request message for
/// [EntityTypes.ListEntityTypes][google.cloud.dialogflow.cx.v3.EntityTypes.ListEntityTypes].
///
/// [google.cloud.dialogflow.cx.v3.EntityTypes.ListEntityTypes]: crate::client::EntityTypes::list_entity_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListEntityTypesRequest {
    /// Required. The agent to list all entity types for.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The language to list entity types for. The following fields are language
    /// dependent:
    ///
    /// * `EntityType.entities.value`
    /// * `EntityType.entities.synonyms`
    /// * `EntityType.excluded_phrases.value`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// The maximum number of items to return in a single page. By default 100 and
    /// at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListEntityTypesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListEntityTypesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::ListEntityTypesRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListEntityTypesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListEntityTypesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListEntityTypesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListEntityTypesRequest"
    }
}

/// The response message for
/// [EntityTypes.ListEntityTypes][google.cloud.dialogflow.cx.v3.EntityTypes.ListEntityTypes].
///
/// [google.cloud.dialogflow.cx.v3.EntityTypes.ListEntityTypes]: crate::client::EntityTypes::list_entity_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListEntityTypesResponse {
    /// The list of entity types. There will be a maximum number of items returned
    /// based on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub entity_types: std::vec::Vec<crate::model::EntityType>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListEntityTypesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListEntityTypesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [entity_types][crate::model::ListEntityTypesResponse::entity_types].
    pub fn set_entity_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EntityType>,
    {
        use std::iter::Iterator;
        self.entity_types = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListEntityTypesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListEntityTypesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListEntityTypesResponse {
    type PageItem = crate::model::EntityType;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.entity_types
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [EntityTypes.GetEntityType][google.cloud.dialogflow.cx.v3.EntityTypes.GetEntityType].
///
/// [google.cloud.dialogflow.cx.v3.EntityTypes.GetEntityType]: crate::client::EntityTypes::get_entity_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetEntityTypeRequest {
    /// Required. The name of the entity type.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/entityTypes/<EntityTypeID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The language to retrieve the entity type for. The following fields are
    /// language dependent:
    ///
    /// * `EntityType.entities.value`
    /// * `EntityType.entities.synonyms`
    /// * `EntityType.excluded_phrases.value`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetEntityTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetEntityTypeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::GetEntityTypeRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for GetEntityTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetEntityTypeRequest"
    }
}

/// The request message for
/// [EntityTypes.CreateEntityType][google.cloud.dialogflow.cx.v3.EntityTypes.CreateEntityType].
///
/// [google.cloud.dialogflow.cx.v3.EntityTypes.CreateEntityType]: crate::client::EntityTypes::create_entity_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateEntityTypeRequest {
    /// Required. The agent to create a entity type for.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The entity type to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub entity_type: std::option::Option<crate::model::EntityType>,

    /// The language of the following fields in `entity_type`:
    ///
    /// * `EntityType.entities.value`
    /// * `EntityType.entities.synonyms`
    /// * `EntityType.excluded_phrases.value`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateEntityTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateEntityTypeRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [entity_type][crate::model::CreateEntityTypeRequest::entity_type].
    pub fn set_entity_type<T: std::convert::Into<std::option::Option<crate::model::EntityType>>>(
        mut self,
        v: T,
    ) -> Self {
        self.entity_type = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::CreateEntityTypeRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for CreateEntityTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CreateEntityTypeRequest"
    }
}

/// The request message for
/// [EntityTypes.UpdateEntityType][google.cloud.dialogflow.cx.v3.EntityTypes.UpdateEntityType].
///
/// [google.cloud.dialogflow.cx.v3.EntityTypes.UpdateEntityType]: crate::client::EntityTypes::update_entity_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateEntityTypeRequest {
    /// Required. The entity type to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub entity_type: std::option::Option<crate::model::EntityType>,

    /// The language of the following fields in `entity_type`:
    ///
    /// * `EntityType.entities.value`
    /// * `EntityType.entities.synonyms`
    /// * `EntityType.excluded_phrases.value`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// The mask to control which fields get updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateEntityTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [entity_type][crate::model::UpdateEntityTypeRequest::entity_type].
    pub fn set_entity_type<T: std::convert::Into<std::option::Option<crate::model::EntityType>>>(
        mut self,
        v: T,
    ) -> Self {
        self.entity_type = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::UpdateEntityTypeRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateEntityTypeRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateEntityTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.UpdateEntityTypeRequest"
    }
}

/// The request message for
/// [EntityTypes.DeleteEntityType][google.cloud.dialogflow.cx.v3.EntityTypes.DeleteEntityType].
///
/// [google.cloud.dialogflow.cx.v3.EntityTypes.DeleteEntityType]: crate::client::EntityTypes::delete_entity_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteEntityTypeRequest {
    /// Required. The name of the entity type to delete.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/entityTypes/<EntityTypeID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// This field has no effect for entity type not being used.
    /// For entity types that are used by intents or pages:
    ///
    /// * If `force` is set to false, an error will be returned with message
    ///   indicating the referencing resources.
    /// * If `force` is set to true, Dialogflow will remove the entity type, as
    ///   well as any references to the entity type (i.e. Page
    ///   [parameter][google.cloud.dialogflow.cx.v3.Form.Parameter] of the entity
    ///   type will be changed to
    ///   '@sys.any' and intent
    ///   [parameter][google.cloud.dialogflow.cx.v3.Intent.Parameter] of the
    ///   entity type will be removed).
    ///
    /// [google.cloud.dialogflow.cx.v3.Form.Parameter]: crate::model::form::Parameter
    /// [google.cloud.dialogflow.cx.v3.Intent.Parameter]: crate::model::intent::Parameter
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub force: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteEntityTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteEntityTypeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [force][crate::model::DeleteEntityTypeRequest::force].
    pub fn set_force<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.force = v.into();
        self
    }
}

impl wkt::message::Message for DeleteEntityTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DeleteEntityTypeRequest"
    }
}

/// Represents an environment for an agent. You can create multiple versions
/// of your agent and publish them to separate environments. When you edit an
/// agent, you are editing the draft agent. At any point, you can save the draft
/// agent as an agent version, which is an immutable snapshot of your agent. When
/// you save the draft agent, it is published to the default environment. When
/// you create agent versions, you can publish them to custom environments. You
/// can create a variety of custom environments for testing, development,
/// production, etc.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Environment {
    /// The name of the environment.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The human-readable name of the environment (unique in an agent).
    /// Limit of 64 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// The human-readable description of the environment. The maximum length is
    /// 500 characters. If exceeded, the request is rejected.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// A list of configurations for flow versions. You should include version
    /// configs for all flows that are reachable from [`Start
    /// Flow`][Agent.start_flow] in the agent. Otherwise, an error will be
    /// returned.
    ///
    /// [Agent.start_flow]: crate::model::Agent::start_flow
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub version_configs: std::vec::Vec<crate::model::environment::VersionConfig>,

    /// Output only. Update time of this environment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// The test cases config for continuous tests of this environment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub test_cases_config: std::option::Option<crate::model::environment::TestCasesConfig>,

    /// The webhook configuration for this environment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub webhook_config: std::option::Option<crate::model::environment::WebhookConfig>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Environment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Environment::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Environment::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Environment::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Environment::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [test_cases_config][crate::model::Environment::test_cases_config].
    pub fn set_test_cases_config<
        T: std::convert::Into<std::option::Option<crate::model::environment::TestCasesConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.test_cases_config = v.into();
        self
    }

    /// Sets the value of [webhook_config][crate::model::Environment::webhook_config].
    pub fn set_webhook_config<
        T: std::convert::Into<std::option::Option<crate::model::environment::WebhookConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.webhook_config = v.into();
        self
    }

    /// Sets the value of [version_configs][crate::model::Environment::version_configs].
    pub fn set_version_configs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::environment::VersionConfig>,
    {
        use std::iter::Iterator;
        self.version_configs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Environment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.Environment"
    }
}

/// Defines additional types related to [Environment].
pub mod environment {
    #[allow(unused_imports)]
    use super::*;

    /// Configuration for the version.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct VersionConfig {
        /// Required. Both flow and playbook versions are supported.
        /// Format for flow version:
        /// projects/\<ProjectID\>/locations/\<LocationID\>/agents/\<AgentID\>/flows/\<FlowID\>/versions/\<VersionID\>.
        /// Format for playbook version:
        /// projects/\<ProjectID\>/locations/\<LocationID\>/agents/\<AgentID\>/playbooks/\<PlaybookID\>/versions/\<VersionID\>.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub version: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl VersionConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [version][crate::model::environment::VersionConfig::version].
        pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.version = v.into();
            self
        }
    }

    impl wkt::message::Message for VersionConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Environment.VersionConfig"
        }
    }

    /// The configuration for continuous tests.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct TestCasesConfig {
        /// A list of test case names to run. They should be under the same agent.
        /// Format of each test case name:
        /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/testCases/<TestCaseID>`
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub test_cases: std::vec::Vec<std::string::String>,

        /// Whether to run test cases in
        /// [TestCasesConfig.test_cases][google.cloud.dialogflow.cx.v3.Environment.TestCasesConfig.test_cases]
        /// periodically. Default false. If set to true, run once a day.
        ///
        /// [google.cloud.dialogflow.cx.v3.Environment.TestCasesConfig.test_cases]: crate::model::environment::TestCasesConfig::test_cases
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enable_continuous_run: bool,

        /// Whether to run test cases in
        /// [TestCasesConfig.test_cases][google.cloud.dialogflow.cx.v3.Environment.TestCasesConfig.test_cases]
        /// before deploying a flow version to the environment. Default false.
        ///
        /// [google.cloud.dialogflow.cx.v3.Environment.TestCasesConfig.test_cases]: crate::model::environment::TestCasesConfig::test_cases
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enable_predeployment_run: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl TestCasesConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [enable_continuous_run][crate::model::environment::TestCasesConfig::enable_continuous_run].
        pub fn set_enable_continuous_run<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enable_continuous_run = v.into();
            self
        }

        /// Sets the value of [enable_predeployment_run][crate::model::environment::TestCasesConfig::enable_predeployment_run].
        pub fn set_enable_predeployment_run<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enable_predeployment_run = v.into();
            self
        }

        /// Sets the value of [test_cases][crate::model::environment::TestCasesConfig::test_cases].
        pub fn set_test_cases<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.test_cases = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for TestCasesConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Environment.TestCasesConfig"
        }
    }

    /// Configuration for webhooks.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct WebhookConfig {
        /// The list of webhooks to override for the agent environment. The webhook
        /// must exist in the agent. You can override fields in
        /// [`generic_web_service`][google.cloud.dialogflow.cx.v3.Webhook.generic_web_service]
        /// and
        /// [`service_directory`][google.cloud.dialogflow.cx.v3.Webhook.service_directory].
        ///
        /// [google.cloud.dialogflow.cx.v3.Webhook.generic_web_service]: crate::model::Webhook::webhook
        /// [google.cloud.dialogflow.cx.v3.Webhook.service_directory]: crate::model::Webhook::webhook
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub webhook_overrides: std::vec::Vec<crate::model::Webhook>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl WebhookConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [webhook_overrides][crate::model::environment::WebhookConfig::webhook_overrides].
        pub fn set_webhook_overrides<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::Webhook>,
        {
            use std::iter::Iterator;
            self.webhook_overrides = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for WebhookConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Environment.WebhookConfig"
        }
    }
}

/// The request message for
/// [Environments.ListEnvironments][google.cloud.dialogflow.cx.v3.Environments.ListEnvironments].
///
/// [google.cloud.dialogflow.cx.v3.Environments.ListEnvironments]: crate::client::Environments::list_environments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListEnvironmentsRequest {
    /// Required. The [Agent][google.cloud.dialogflow.cx.v3.Agent] to list all
    /// environments for. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Agent]: crate::model::Agent
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return in a single page. By default 20 and
    /// at most 100.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListEnvironmentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListEnvironmentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListEnvironmentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListEnvironmentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListEnvironmentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListEnvironmentsRequest"
    }
}

/// The response message for
/// [Environments.ListEnvironments][google.cloud.dialogflow.cx.v3.Environments.ListEnvironments].
///
/// [google.cloud.dialogflow.cx.v3.Environments.ListEnvironments]: crate::client::Environments::list_environments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListEnvironmentsResponse {
    /// The list of environments. There will be a maximum number of items
    /// returned based on the page_size field in the request. The list may in some
    /// cases be empty or contain fewer entries than page_size even if this isn't
    /// the last page.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub environments: std::vec::Vec<crate::model::Environment>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListEnvironmentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListEnvironmentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [environments][crate::model::ListEnvironmentsResponse::environments].
    pub fn set_environments<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Environment>,
    {
        use std::iter::Iterator;
        self.environments = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListEnvironmentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListEnvironmentsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListEnvironmentsResponse {
    type PageItem = crate::model::Environment;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.environments
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Environments.GetEnvironment][google.cloud.dialogflow.cx.v3.Environments.GetEnvironment].
///
/// [google.cloud.dialogflow.cx.v3.Environments.GetEnvironment]: crate::client::Environments::get_environment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetEnvironmentRequest {
    /// Required. The name of the
    /// [Environment][google.cloud.dialogflow.cx.v3.Environment]. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetEnvironmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetEnvironmentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetEnvironmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetEnvironmentRequest"
    }
}

/// The request message for
/// [Environments.CreateEnvironment][google.cloud.dialogflow.cx.v3.Environments.CreateEnvironment].
///
/// [google.cloud.dialogflow.cx.v3.Environments.CreateEnvironment]: crate::client::Environments::create_environment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateEnvironmentRequest {
    /// Required. The [Agent][google.cloud.dialogflow.cx.v3.Agent] to create an
    /// [Environment][google.cloud.dialogflow.cx.v3.Environment] for. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Agent]: crate::model::Agent
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The environment to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub environment: std::option::Option<crate::model::Environment>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateEnvironmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateEnvironmentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [environment][crate::model::CreateEnvironmentRequest::environment].
    pub fn set_environment<
        T: std::convert::Into<std::option::Option<crate::model::Environment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.environment = v.into();
        self
    }
}

impl wkt::message::Message for CreateEnvironmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CreateEnvironmentRequest"
    }
}

/// The request message for
/// [Environments.UpdateEnvironment][google.cloud.dialogflow.cx.v3.Environments.UpdateEnvironment].
///
/// [google.cloud.dialogflow.cx.v3.Environments.UpdateEnvironment]: crate::client::Environments::update_environment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateEnvironmentRequest {
    /// Required. The environment to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub environment: std::option::Option<crate::model::Environment>,

    /// Required. The mask to control which fields get updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateEnvironmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [environment][crate::model::UpdateEnvironmentRequest::environment].
    pub fn set_environment<
        T: std::convert::Into<std::option::Option<crate::model::Environment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.environment = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateEnvironmentRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateEnvironmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.UpdateEnvironmentRequest"
    }
}

/// The request message for
/// [Environments.DeleteEnvironment][google.cloud.dialogflow.cx.v3.Environments.DeleteEnvironment].
///
/// [google.cloud.dialogflow.cx.v3.Environments.DeleteEnvironment]: crate::client::Environments::delete_environment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteEnvironmentRequest {
    /// Required. The name of the
    /// [Environment][google.cloud.dialogflow.cx.v3.Environment] to delete. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteEnvironmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteEnvironmentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteEnvironmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DeleteEnvironmentRequest"
    }
}

/// The request message for
/// [Environments.LookupEnvironmentHistory][google.cloud.dialogflow.cx.v3.Environments.LookupEnvironmentHistory].
///
/// [google.cloud.dialogflow.cx.v3.Environments.LookupEnvironmentHistory]: crate::client::Environments::lookup_environment_history
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LookupEnvironmentHistoryRequest {
    /// Required. Resource name of the environment to look up the history for.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The maximum number of items to return in a single page. By default 100 and
    /// at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl LookupEnvironmentHistoryRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::LookupEnvironmentHistoryRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::LookupEnvironmentHistoryRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::LookupEnvironmentHistoryRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for LookupEnvironmentHistoryRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.LookupEnvironmentHistoryRequest"
    }
}

/// The response message for
/// [Environments.LookupEnvironmentHistory][google.cloud.dialogflow.cx.v3.Environments.LookupEnvironmentHistory].
///
/// [google.cloud.dialogflow.cx.v3.Environments.LookupEnvironmentHistory]: crate::client::Environments::lookup_environment_history
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LookupEnvironmentHistoryResponse {
    /// Represents a list of snapshots for an environment. Time of the snapshots is
    /// stored in
    /// [`update_time`][google.cloud.dialogflow.cx.v3.Environment.update_time].
    ///
    /// [google.cloud.dialogflow.cx.v3.Environment.update_time]: crate::model::Environment::update_time
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub environments: std::vec::Vec<crate::model::Environment>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl LookupEnvironmentHistoryResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::LookupEnvironmentHistoryResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [environments][crate::model::LookupEnvironmentHistoryResponse::environments].
    pub fn set_environments<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Environment>,
    {
        use std::iter::Iterator;
        self.environments = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for LookupEnvironmentHistoryResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.LookupEnvironmentHistoryResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for LookupEnvironmentHistoryResponse {
    type PageItem = crate::model::Environment;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.environments
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Represents a result from running a test case in an agent environment.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ContinuousTestResult {
    /// The resource name for the continuous test result. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>/continuousTestResults/<ContinuousTestResultID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The result of this continuous test run, i.e. whether all the tests in this
    /// continuous test run pass or not.
    pub result: crate::model::continuous_test_result::AggregatedTestResult,

    /// A list of individual test case results names in this continuous test run.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub test_case_results: std::vec::Vec<std::string::String>,

    /// Time when the continuous testing run starts.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub run_time: std::option::Option<wkt::Timestamp>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ContinuousTestResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ContinuousTestResult::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [result][crate::model::ContinuousTestResult::result].
    pub fn set_result<
        T: std::convert::Into<crate::model::continuous_test_result::AggregatedTestResult>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.result = v.into();
        self
    }

    /// Sets the value of [run_time][crate::model::ContinuousTestResult::run_time].
    pub fn set_run_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.run_time = v.into();
        self
    }

    /// Sets the value of [test_case_results][crate::model::ContinuousTestResult::test_case_results].
    pub fn set_test_case_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.test_case_results = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ContinuousTestResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ContinuousTestResult"
    }
}

/// Defines additional types related to [ContinuousTestResult].
pub mod continuous_test_result {
    #[allow(unused_imports)]
    use super::*;

    /// The overall result for a continuous test run in an agent environment.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum AggregatedTestResult {
        /// Not specified. Should never be used.
        Unspecified,
        /// All the tests passed.
        Passed,
        /// At least one test did not pass.
        Failed,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [AggregatedTestResult::value] or
        /// [AggregatedTestResult::name].
        UnknownValue(aggregated_test_result::UnknownValue),
    }

    #[doc(hidden)]
    pub mod aggregated_test_result {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl AggregatedTestResult {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Passed => std::option::Option::Some(1),
                Self::Failed => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => {
                    std::option::Option::Some("AGGREGATED_TEST_RESULT_UNSPECIFIED")
                }
                Self::Passed => std::option::Option::Some("PASSED"),
                Self::Failed => std::option::Option::Some("FAILED"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for AggregatedTestResult {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for AggregatedTestResult {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for AggregatedTestResult {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Passed,
                2 => Self::Failed,
                _ => Self::UnknownValue(aggregated_test_result::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for AggregatedTestResult {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "AGGREGATED_TEST_RESULT_UNSPECIFIED" => Self::Unspecified,
                "PASSED" => Self::Passed,
                "FAILED" => Self::Failed,
                _ => Self::UnknownValue(aggregated_test_result::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for AggregatedTestResult {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Passed => serializer.serialize_i32(1),
                Self::Failed => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for AggregatedTestResult {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<AggregatedTestResult>::new(
                ".google.cloud.dialogflow.cx.v3.ContinuousTestResult.AggregatedTestResult",
            ))
        }
    }
}

/// The request message for
/// [Environments.RunContinuousTest][google.cloud.dialogflow.cx.v3.Environments.RunContinuousTest].
///
/// [google.cloud.dialogflow.cx.v3.Environments.RunContinuousTest]: crate::client::Environments::run_continuous_test
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RunContinuousTestRequest {
    /// Required. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub environment: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RunContinuousTestRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [environment][crate::model::RunContinuousTestRequest::environment].
    pub fn set_environment<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.environment = v.into();
        self
    }
}

impl wkt::message::Message for RunContinuousTestRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.RunContinuousTestRequest"
    }
}

/// The response message for
/// [Environments.RunContinuousTest][google.cloud.dialogflow.cx.v3.Environments.RunContinuousTest].
///
/// [google.cloud.dialogflow.cx.v3.Environments.RunContinuousTest]: crate::client::Environments::run_continuous_test
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RunContinuousTestResponse {
    /// The result for a continuous test run.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub continuous_test_result: std::option::Option<crate::model::ContinuousTestResult>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RunContinuousTestResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [continuous_test_result][crate::model::RunContinuousTestResponse::continuous_test_result].
    pub fn set_continuous_test_result<
        T: std::convert::Into<std::option::Option<crate::model::ContinuousTestResult>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.continuous_test_result = v.into();
        self
    }
}

impl wkt::message::Message for RunContinuousTestResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.RunContinuousTestResponse"
    }
}

/// Metadata returned for the
/// [Environments.RunContinuousTest][google.cloud.dialogflow.cx.v3.Environments.RunContinuousTest]
/// long running operation.
///
/// [google.cloud.dialogflow.cx.v3.Environments.RunContinuousTest]: crate::client::Environments::run_continuous_test
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RunContinuousTestMetadata {
    /// The test errors.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub errors: std::vec::Vec<crate::model::TestError>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RunContinuousTestMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [errors][crate::model::RunContinuousTestMetadata::errors].
    pub fn set_errors<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TestError>,
    {
        use std::iter::Iterator;
        self.errors = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for RunContinuousTestMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.RunContinuousTestMetadata"
    }
}

/// The request message for
/// [Environments.ListContinuousTestResults][google.cloud.dialogflow.cx.v3.Environments.ListContinuousTestResults].
///
/// [google.cloud.dialogflow.cx.v3.Environments.ListContinuousTestResults]: crate::client::Environments::list_continuous_test_results
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListContinuousTestResultsRequest {
    /// Required. The environment to list results for.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return in a single page. By default 100 and
    /// at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListContinuousTestResultsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListContinuousTestResultsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListContinuousTestResultsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListContinuousTestResultsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListContinuousTestResultsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListContinuousTestResultsRequest"
    }
}

/// The response message for [Environments.ListTestCaseResults][].
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListContinuousTestResultsResponse {
    /// The list of continuous test results.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub continuous_test_results: std::vec::Vec<crate::model::ContinuousTestResult>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListContinuousTestResultsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListContinuousTestResultsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [continuous_test_results][crate::model::ListContinuousTestResultsResponse::continuous_test_results].
    pub fn set_continuous_test_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ContinuousTestResult>,
    {
        use std::iter::Iterator;
        self.continuous_test_results = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListContinuousTestResultsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListContinuousTestResultsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListContinuousTestResultsResponse {
    type PageItem = crate::model::ContinuousTestResult;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.continuous_test_results
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Environments.DeployFlow][google.cloud.dialogflow.cx.v3.Environments.DeployFlow].
///
/// [google.cloud.dialogflow.cx.v3.Environments.DeployFlow]: crate::client::Environments::deploy_flow
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeployFlowRequest {
    /// Required. The environment to deploy the flow to.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub environment: std::string::String,

    /// Required. The flow version to deploy.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/versions/<VersionID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub flow_version: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeployFlowRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [environment][crate::model::DeployFlowRequest::environment].
    pub fn set_environment<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.environment = v.into();
        self
    }

    /// Sets the value of [flow_version][crate::model::DeployFlowRequest::flow_version].
    pub fn set_flow_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.flow_version = v.into();
        self
    }
}

impl wkt::message::Message for DeployFlowRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DeployFlowRequest"
    }
}

/// The response message for
/// [Environments.DeployFlow][google.cloud.dialogflow.cx.v3.Environments.DeployFlow].
///
/// [google.cloud.dialogflow.cx.v3.Environments.DeployFlow]: crate::client::Environments::deploy_flow
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeployFlowResponse {
    /// The updated environment where the flow is deployed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub environment: std::option::Option<crate::model::Environment>,

    /// The name of the flow version
    /// [Deployment][google.cloud.dialogflow.cx.v3.Deployment]. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>/deployments/<DeploymentID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Deployment]: crate::model::Deployment
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub deployment: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeployFlowResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [environment][crate::model::DeployFlowResponse::environment].
    pub fn set_environment<
        T: std::convert::Into<std::option::Option<crate::model::Environment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.environment = v.into();
        self
    }

    /// Sets the value of [deployment][crate::model::DeployFlowResponse::deployment].
    pub fn set_deployment<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.deployment = v.into();
        self
    }
}

impl wkt::message::Message for DeployFlowResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DeployFlowResponse"
    }
}

/// Metadata returned for the
/// [Environments.DeployFlow][google.cloud.dialogflow.cx.v3.Environments.DeployFlow]
/// long running operation.
///
/// [google.cloud.dialogflow.cx.v3.Environments.DeployFlow]: crate::client::Environments::deploy_flow
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeployFlowMetadata {
    /// Errors of running deployment tests.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub test_errors: std::vec::Vec<crate::model::TestError>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeployFlowMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [test_errors][crate::model::DeployFlowMetadata::test_errors].
    pub fn set_test_errors<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TestError>,
    {
        use std::iter::Iterator;
        self.test_errors = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for DeployFlowMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DeployFlowMetadata"
    }
}

/// Represents an experiment in an environment.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Experiment {
    /// The name of the experiment.
    /// Format:
    /// projects/\<ProjectID\>/locations/\<LocationID\>/agents/\<AgentID\>/environments/\<EnvironmentID\>/experiments/\<ExperimentID\>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The human-readable name of the experiment (unique in an
    /// environment). Limit of 64 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// The human-readable description of the experiment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// The current state of the experiment.
    /// Transition triggered by Experiments.StartExperiment: DRAFT->RUNNING.
    /// Transition triggered by Experiments.CancelExperiment: DRAFT->DONE or
    /// RUNNING->DONE.
    pub state: crate::model::experiment::State,

    /// The definition of the experiment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub definition: std::option::Option<crate::model::experiment::Definition>,

    /// The configuration for auto rollout. If set, there should be exactly two
    /// variants in the experiment (control variant being the default version of
    /// the flow), the traffic allocation for the non-control variant will
    /// gradually increase to 100% when conditions are met, and eventually
    /// replace the control variant to become the default version of the flow.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub rollout_config: std::option::Option<crate::model::RolloutConfig>,

    /// State of the auto rollout process.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub rollout_state: std::option::Option<crate::model::RolloutState>,

    /// The reason why rollout has failed. Should only be set when state is
    /// ROLLOUT_FAILED.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout_failure_reason: std::string::String,

    /// Inference result of the experiment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub result: std::option::Option<crate::model::experiment::Result>,

    /// Creation time of this experiment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Start time of this experiment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time: std::option::Option<wkt::Timestamp>,

    /// End time of this experiment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Last update time of this experiment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub last_update_time: std::option::Option<wkt::Timestamp>,

    /// Maximum number of days to run the experiment/rollout. If auto-rollout is
    /// not enabled, default value and maximum will be 30 days. If auto-rollout is
    /// enabled, default value and maximum will be 6 days.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub experiment_length: std::option::Option<wkt::Duration>,

    /// The history of updates to the experiment variants.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub variants_history: std::vec::Vec<crate::model::VariantsHistory>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Experiment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Experiment::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Experiment::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Experiment::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Experiment::state].
    pub fn set_state<T: std::convert::Into<crate::model::experiment::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [definition][crate::model::Experiment::definition].
    pub fn set_definition<
        T: std::convert::Into<std::option::Option<crate::model::experiment::Definition>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.definition = v.into();
        self
    }

    /// Sets the value of [rollout_config][crate::model::Experiment::rollout_config].
    pub fn set_rollout_config<
        T: std::convert::Into<std::option::Option<crate::model::RolloutConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.rollout_config = v.into();
        self
    }

    /// Sets the value of [rollout_state][crate::model::Experiment::rollout_state].
    pub fn set_rollout_state<
        T: std::convert::Into<std::option::Option<crate::model::RolloutState>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.rollout_state = v.into();
        self
    }

    /// Sets the value of [rollout_failure_reason][crate::model::Experiment::rollout_failure_reason].
    pub fn set_rollout_failure_reason<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.rollout_failure_reason = v.into();
        self
    }

    /// Sets the value of [result][crate::model::Experiment::result].
    pub fn set_result<
        T: std::convert::Into<std::option::Option<crate::model::experiment::Result>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.result = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Experiment::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [start_time][crate::model::Experiment::start_time].
    pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::Experiment::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [last_update_time][crate::model::Experiment::last_update_time].
    pub fn set_last_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.last_update_time = v.into();
        self
    }

    /// Sets the value of [experiment_length][crate::model::Experiment::experiment_length].
    pub fn set_experiment_length<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.experiment_length = v.into();
        self
    }

    /// Sets the value of [variants_history][crate::model::Experiment::variants_history].
    pub fn set_variants_history<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::VariantsHistory>,
    {
        use std::iter::Iterator;
        self.variants_history = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Experiment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.Experiment"
    }
}

/// Defines additional types related to [Experiment].
pub mod experiment {
    #[allow(unused_imports)]
    use super::*;

    /// Definition of the experiment.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Definition {
        /// The condition defines which subset of sessions are selected for
        /// this experiment. If not specified, all sessions are eligible. E.g.
        /// "query_input.language_code=en" See the [conditions
        /// reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub condition: std::string::String,

        /// The variants of the experiment. We currently only support single variant
        /// experiment.
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub variants: std::option::Option<crate::model::experiment::definition::Variants>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Definition {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [condition][crate::model::experiment::Definition::condition].
        pub fn set_condition<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.condition = v.into();
            self
        }

        /// Sets the value of [variants][crate::model::experiment::Definition::variants].
        ///
        /// Note that all the setters affecting `variants` are mutually
        /// exclusive.
        pub fn set_variants<
            T: std::convert::Into<std::option::Option<crate::model::experiment::definition::Variants>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.variants = v.into();
            self
        }

        /// The value of [variants][crate::model::experiment::Definition::variants]
        /// if it holds a `VersionVariants`, `None` if the field is not set or
        /// holds a different branch.
        pub fn version_variants(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::VersionVariants>> {
            #[allow(unreachable_patterns)]
            self.variants.as_ref().and_then(|v| match v {
                crate::model::experiment::definition::Variants::VersionVariants(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [variants][crate::model::experiment::Definition::variants]
        /// to hold a `VersionVariants`.
        ///
        /// Note that all the setters affecting `variants` are
        /// mutually exclusive.
        pub fn set_version_variants<
            T: std::convert::Into<std::boxed::Box<crate::model::VersionVariants>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.variants = std::option::Option::Some(
                crate::model::experiment::definition::Variants::VersionVariants(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for Definition {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Experiment.Definition"
        }
    }

    /// Defines additional types related to [Definition].
    pub mod definition {
        #[allow(unused_imports)]
        use super::*;

        /// The variants of the experiment. We currently only support single variant
        /// experiment.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum Variants {
            /// The flow versions as the variants of this experiment.
            VersionVariants(std::boxed::Box<crate::model::VersionVariants>),
        }
    }

    /// The inference result which includes an objective metric to optimize and the
    /// confidence interval.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Result {
        /// Version variants and metrics.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub version_metrics: std::vec::Vec<crate::model::experiment::result::VersionMetrics>,

        /// The last time the experiment's stats data was updated. Will have default
        /// value if stats have never been computed for this experiment.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub last_update_time: std::option::Option<wkt::Timestamp>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Result {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [last_update_time][crate::model::experiment::Result::last_update_time].
        pub fn set_last_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
            mut self,
            v: T,
        ) -> Self {
            self.last_update_time = v.into();
            self
        }

        /// Sets the value of [version_metrics][crate::model::experiment::Result::version_metrics].
        pub fn set_version_metrics<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::experiment::result::VersionMetrics>,
        {
            use std::iter::Iterator;
            self.version_metrics = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for Result {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Experiment.Result"
        }
    }

    /// Defines additional types related to [Result].
    pub mod result {
        #[allow(unused_imports)]
        use super::*;

        /// A confidence interval is a range of possible values for the experiment
        /// objective you are trying to measure.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct ConfidenceInterval {
            /// The confidence level used to construct the interval, i.e. there is X%
            /// chance that the true value is within this interval.
            #[serde(skip_serializing_if = "wkt::internal::is_default")]
            pub confidence_level: f64,

            /// The percent change between an experiment metric's value and the value
            /// for its control.
            #[serde(skip_serializing_if = "wkt::internal::is_default")]
            pub ratio: f64,

            /// Lower bound of the interval.
            #[serde(skip_serializing_if = "wkt::internal::is_default")]
            pub lower_bound: f64,

            /// Upper bound of the interval.
            #[serde(skip_serializing_if = "wkt::internal::is_default")]
            pub upper_bound: f64,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl ConfidenceInterval {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [confidence_level][crate::model::experiment::result::ConfidenceInterval::confidence_level].
            pub fn set_confidence_level<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
                self.confidence_level = v.into();
                self
            }

            /// Sets the value of [ratio][crate::model::experiment::result::ConfidenceInterval::ratio].
            pub fn set_ratio<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
                self.ratio = v.into();
                self
            }

            /// Sets the value of [lower_bound][crate::model::experiment::result::ConfidenceInterval::lower_bound].
            pub fn set_lower_bound<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
                self.lower_bound = v.into();
                self
            }

            /// Sets the value of [upper_bound][crate::model::experiment::result::ConfidenceInterval::upper_bound].
            pub fn set_upper_bound<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
                self.upper_bound = v.into();
                self
            }
        }

        impl wkt::message::Message for ConfidenceInterval {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.cx.v3.Experiment.Result.ConfidenceInterval"
            }
        }

        /// Metric and corresponding confidence intervals.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Metric {
            /// Ratio-based metric type. Only one of type or count_type is specified in
            /// each Metric.
            #[serde(rename = "type")]
            pub r#type: crate::model::experiment::result::MetricType,

            /// Count-based metric type. Only one of type or count_type is specified in
            /// each Metric.
            pub count_type: crate::model::experiment::result::CountType,

            /// The probability that the treatment is better than all other treatments
            /// in the experiment
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub confidence_interval:
                std::option::Option<crate::model::experiment::result::ConfidenceInterval>,

            /// The actual value of the metric.
            #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
            pub value: std::option::Option<crate::model::experiment::result::metric::Value>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl Metric {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [r#type][crate::model::experiment::result::Metric::type].
            pub fn set_type<T: std::convert::Into<crate::model::experiment::result::MetricType>>(
                mut self,
                v: T,
            ) -> Self {
                self.r#type = v.into();
                self
            }

            /// Sets the value of [count_type][crate::model::experiment::result::Metric::count_type].
            pub fn set_count_type<
                T: std::convert::Into<crate::model::experiment::result::CountType>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.count_type = v.into();
                self
            }

            /// Sets the value of [confidence_interval][crate::model::experiment::result::Metric::confidence_interval].
            pub fn set_confidence_interval<
                T: std::convert::Into<
                        std::option::Option<crate::model::experiment::result::ConfidenceInterval>,
                    >,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.confidence_interval = v.into();
                self
            }

            /// Sets the value of [value][crate::model::experiment::result::Metric::value].
            ///
            /// Note that all the setters affecting `value` are mutually
            /// exclusive.
            pub fn set_value<
                T: std::convert::Into<
                        std::option::Option<crate::model::experiment::result::metric::Value>,
                    >,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.value = v.into();
                self
            }

            /// The value of [value][crate::model::experiment::result::Metric::value]
            /// if it holds a `Ratio`, `None` if the field is not set or
            /// holds a different branch.
            pub fn ratio(&self) -> std::option::Option<&f64> {
                #[allow(unreachable_patterns)]
                self.value.as_ref().and_then(|v| match v {
                    crate::model::experiment::result::metric::Value::Ratio(v) => {
                        std::option::Option::Some(v)
                    }
                    _ => std::option::Option::None,
                })
            }

            /// The value of [value][crate::model::experiment::result::Metric::value]
            /// if it holds a `Count`, `None` if the field is not set or
            /// holds a different branch.
            pub fn count(&self) -> std::option::Option<&f64> {
                #[allow(unreachable_patterns)]
                self.value.as_ref().and_then(|v| match v {
                    crate::model::experiment::result::metric::Value::Count(v) => {
                        std::option::Option::Some(v)
                    }
                    _ => std::option::Option::None,
                })
            }

            /// Sets the value of [value][crate::model::experiment::result::Metric::value]
            /// to hold a `Ratio`.
            ///
            /// Note that all the setters affecting `value` are
            /// mutually exclusive.
            pub fn set_ratio<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
                self.value = std::option::Option::Some(
                    crate::model::experiment::result::metric::Value::Ratio(v.into()),
                );
                self
            }

            /// Sets the value of [value][crate::model::experiment::result::Metric::value]
            /// to hold a `Count`.
            ///
            /// Note that all the setters affecting `value` are
            /// mutually exclusive.
            pub fn set_count<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
                self.value = std::option::Option::Some(
                    crate::model::experiment::result::metric::Value::Count(v.into()),
                );
                self
            }
        }

        impl wkt::message::Message for Metric {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.cx.v3.Experiment.Result.Metric"
            }
        }

        /// Defines additional types related to [Metric].
        pub mod metric {
            #[allow(unused_imports)]
            use super::*;

            /// The actual value of the metric.
            #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(rename_all = "camelCase")]
            #[non_exhaustive]
            pub enum Value {
                /// Ratio value of a metric.
                Ratio(f64),
                /// Count value of a metric.
                Count(f64),
            }
        }

        /// Version variant and associated metrics.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct VersionMetrics {
            /// The name of the flow [Version][google.cloud.dialogflow.cx.v3.Version].
            /// Format:
            /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/versions/<VersionID>`.
            ///
            /// [google.cloud.dialogflow.cx.v3.Version]: crate::model::Version
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub version: std::string::String,

            /// The metrics and corresponding confidence intervals in the inference
            /// result.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub metrics: std::vec::Vec<crate::model::experiment::result::Metric>,

            /// Number of sessions that were allocated to this version.
            #[serde(skip_serializing_if = "wkt::internal::is_default")]
            pub session_count: i32,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl VersionMetrics {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [version][crate::model::experiment::result::VersionMetrics::version].
            pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.version = v.into();
                self
            }

            /// Sets the value of [session_count][crate::model::experiment::result::VersionMetrics::session_count].
            pub fn set_session_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
                self.session_count = v.into();
                self
            }

            /// Sets the value of [metrics][crate::model::experiment::result::VersionMetrics::metrics].
            pub fn set_metrics<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<crate::model::experiment::result::Metric>,
            {
                use std::iter::Iterator;
                self.metrics = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for VersionMetrics {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.cx.v3.Experiment.Result.VersionMetrics"
            }
        }

        /// Types of ratio-based metric for Dialogflow experiment.
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum MetricType {
            /// Metric unspecified.
            MetricUnspecified,
            /// Percentage of contained sessions without user calling back in 24 hours.
            ContainedSessionNoCallbackRate,
            /// Percentage of sessions that were handed to a human agent.
            LiveAgentHandoffRate,
            /// Percentage of sessions with the same user calling back.
            CallbackSessionRate,
            /// Percentage of sessions where user hung up.
            AbandonedSessionRate,
            /// Percentage of sessions reached Dialogflow 'END_PAGE' or
            /// 'END_SESSION'.
            SessionEndRate,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [MetricType::value] or
            /// [MetricType::name].
            UnknownValue(metric_type::UnknownValue),
        }

        #[doc(hidden)]
        pub mod metric_type {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl MetricType {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::MetricUnspecified => std::option::Option::Some(0),
                    Self::ContainedSessionNoCallbackRate => std::option::Option::Some(1),
                    Self::LiveAgentHandoffRate => std::option::Option::Some(2),
                    Self::CallbackSessionRate => std::option::Option::Some(3),
                    Self::AbandonedSessionRate => std::option::Option::Some(4),
                    Self::SessionEndRate => std::option::Option::Some(5),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::MetricUnspecified => std::option::Option::Some("METRIC_UNSPECIFIED"),
                    Self::ContainedSessionNoCallbackRate => {
                        std::option::Option::Some("CONTAINED_SESSION_NO_CALLBACK_RATE")
                    }
                    Self::LiveAgentHandoffRate => {
                        std::option::Option::Some("LIVE_AGENT_HANDOFF_RATE")
                    }
                    Self::CallbackSessionRate => std::option::Option::Some("CALLBACK_SESSION_RATE"),
                    Self::AbandonedSessionRate => {
                        std::option::Option::Some("ABANDONED_SESSION_RATE")
                    }
                    Self::SessionEndRate => std::option::Option::Some("SESSION_END_RATE"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for MetricType {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for MetricType {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for MetricType {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::MetricUnspecified,
                    1 => Self::ContainedSessionNoCallbackRate,
                    2 => Self::LiveAgentHandoffRate,
                    3 => Self::CallbackSessionRate,
                    4 => Self::AbandonedSessionRate,
                    5 => Self::SessionEndRate,
                    _ => Self::UnknownValue(metric_type::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for MetricType {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "METRIC_UNSPECIFIED" => Self::MetricUnspecified,
                    "CONTAINED_SESSION_NO_CALLBACK_RATE" => Self::ContainedSessionNoCallbackRate,
                    "LIVE_AGENT_HANDOFF_RATE" => Self::LiveAgentHandoffRate,
                    "CALLBACK_SESSION_RATE" => Self::CallbackSessionRate,
                    "ABANDONED_SESSION_RATE" => Self::AbandonedSessionRate,
                    "SESSION_END_RATE" => Self::SessionEndRate,
                    _ => Self::UnknownValue(metric_type::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for MetricType {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::MetricUnspecified => serializer.serialize_i32(0),
                    Self::ContainedSessionNoCallbackRate => serializer.serialize_i32(1),
                    Self::LiveAgentHandoffRate => serializer.serialize_i32(2),
                    Self::CallbackSessionRate => serializer.serialize_i32(3),
                    Self::AbandonedSessionRate => serializer.serialize_i32(4),
                    Self::SessionEndRate => serializer.serialize_i32(5),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for MetricType {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<MetricType>::new(
                    ".google.cloud.dialogflow.cx.v3.Experiment.Result.MetricType",
                ))
            }
        }

        /// Types of count-based metric for Dialogflow experiment.
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum CountType {
            /// Count type unspecified.
            Unspecified,
            /// Total number of occurrences of a 'NO_MATCH'.
            TotalNoMatchCount,
            /// Total number of turn counts.
            TotalTurnCount,
            /// Average turn count in a session.
            AverageTurnCount,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [CountType::value] or
            /// [CountType::name].
            UnknownValue(count_type::UnknownValue),
        }

        #[doc(hidden)]
        pub mod count_type {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl CountType {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::Unspecified => std::option::Option::Some(0),
                    Self::TotalNoMatchCount => std::option::Option::Some(1),
                    Self::TotalTurnCount => std::option::Option::Some(2),
                    Self::AverageTurnCount => std::option::Option::Some(3),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::Unspecified => std::option::Option::Some("COUNT_TYPE_UNSPECIFIED"),
                    Self::TotalNoMatchCount => std::option::Option::Some("TOTAL_NO_MATCH_COUNT"),
                    Self::TotalTurnCount => std::option::Option::Some("TOTAL_TURN_COUNT"),
                    Self::AverageTurnCount => std::option::Option::Some("AVERAGE_TURN_COUNT"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for CountType {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for CountType {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for CountType {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::Unspecified,
                    1 => Self::TotalNoMatchCount,
                    2 => Self::TotalTurnCount,
                    3 => Self::AverageTurnCount,
                    _ => Self::UnknownValue(count_type::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for CountType {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "COUNT_TYPE_UNSPECIFIED" => Self::Unspecified,
                    "TOTAL_NO_MATCH_COUNT" => Self::TotalNoMatchCount,
                    "TOTAL_TURN_COUNT" => Self::TotalTurnCount,
                    "AVERAGE_TURN_COUNT" => Self::AverageTurnCount,
                    _ => Self::UnknownValue(count_type::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for CountType {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::Unspecified => serializer.serialize_i32(0),
                    Self::TotalNoMatchCount => serializer.serialize_i32(1),
                    Self::TotalTurnCount => serializer.serialize_i32(2),
                    Self::AverageTurnCount => serializer.serialize_i32(3),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for CountType {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<CountType>::new(
                    ".google.cloud.dialogflow.cx.v3.Experiment.Result.CountType",
                ))
            }
        }
    }

    /// The state of the experiment.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum State {
        /// State unspecified.
        Unspecified,
        /// The experiment is created but not started yet.
        Draft,
        /// The experiment is running.
        Running,
        /// The experiment is done.
        Done,
        /// The experiment with auto-rollout enabled has failed.
        RolloutFailed,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [State::value] or
        /// [State::name].
        UnknownValue(state::UnknownValue),
    }

    #[doc(hidden)]
    pub mod state {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl State {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Draft => std::option::Option::Some(1),
                Self::Running => std::option::Option::Some(2),
                Self::Done => std::option::Option::Some(3),
                Self::RolloutFailed => std::option::Option::Some(4),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("STATE_UNSPECIFIED"),
                Self::Draft => std::option::Option::Some("DRAFT"),
                Self::Running => std::option::Option::Some("RUNNING"),
                Self::Done => std::option::Option::Some("DONE"),
                Self::RolloutFailed => std::option::Option::Some("ROLLOUT_FAILED"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for State {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Draft,
                2 => Self::Running,
                3 => Self::Done,
                4 => Self::RolloutFailed,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for State {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "STATE_UNSPECIFIED" => Self::Unspecified,
                "DRAFT" => Self::Draft,
                "RUNNING" => Self::Running,
                "DONE" => Self::Done,
                "ROLLOUT_FAILED" => Self::RolloutFailed,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for State {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Draft => serializer.serialize_i32(1),
                Self::Running => serializer.serialize_i32(2),
                Self::Done => serializer.serialize_i32(3),
                Self::RolloutFailed => serializer.serialize_i32(4),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for State {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<State>::new(
                ".google.cloud.dialogflow.cx.v3.Experiment.State",
            ))
        }
    }
}

/// A list of flow version variants.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct VersionVariants {
    /// A list of flow version variants.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub variants: std::vec::Vec<crate::model::version_variants::Variant>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl VersionVariants {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [variants][crate::model::VersionVariants::variants].
    pub fn set_variants<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::version_variants::Variant>,
    {
        use std::iter::Iterator;
        self.variants = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for VersionVariants {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.VersionVariants"
    }
}

/// Defines additional types related to [VersionVariants].
pub mod version_variants {
    #[allow(unused_imports)]
    use super::*;

    /// A single flow version with specified traffic allocation.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Variant {
        /// The name of the flow version.
        /// Format:
        /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/versions/<VersionID>`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub version: std::string::String,

        /// Percentage of the traffic which should be routed to this
        /// version of flow. Traffic allocation for a single flow must sum up to 1.0.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub traffic_allocation: f32,

        /// Whether the variant is for the control group.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub is_control_group: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Variant {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [version][crate::model::version_variants::Variant::version].
        pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.version = v.into();
            self
        }

        /// Sets the value of [traffic_allocation][crate::model::version_variants::Variant::traffic_allocation].
        pub fn set_traffic_allocation<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
            self.traffic_allocation = v.into();
            self
        }

        /// Sets the value of [is_control_group][crate::model::version_variants::Variant::is_control_group].
        pub fn set_is_control_group<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.is_control_group = v.into();
            self
        }
    }

    impl wkt::message::Message for Variant {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.VersionVariants.Variant"
        }
    }
}

/// The history of variants update.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct VariantsHistory {
    /// Update time of the variants.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// The variants updated. We currently only support single variant
    /// experiment.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub variants: std::option::Option<crate::model::variants_history::Variants>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl VariantsHistory {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_time][crate::model::VariantsHistory::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [variants][crate::model::VariantsHistory::variants].
    ///
    /// Note that all the setters affecting `variants` are mutually
    /// exclusive.
    pub fn set_variants<
        T: std::convert::Into<std::option::Option<crate::model::variants_history::Variants>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.variants = v.into();
        self
    }

    /// The value of [variants][crate::model::VariantsHistory::variants]
    /// if it holds a `VersionVariants`, `None` if the field is not set or
    /// holds a different branch.
    pub fn version_variants(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::VersionVariants>> {
        #[allow(unreachable_patterns)]
        self.variants.as_ref().and_then(|v| match v {
            crate::model::variants_history::Variants::VersionVariants(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [variants][crate::model::VariantsHistory::variants]
    /// to hold a `VersionVariants`.
    ///
    /// Note that all the setters affecting `variants` are
    /// mutually exclusive.
    pub fn set_version_variants<
        T: std::convert::Into<std::boxed::Box<crate::model::VersionVariants>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.variants = std::option::Option::Some(
            crate::model::variants_history::Variants::VersionVariants(v.into()),
        );
        self
    }
}

impl wkt::message::Message for VariantsHistory {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.VariantsHistory"
    }
}

/// Defines additional types related to [VariantsHistory].
pub mod variants_history {
    #[allow(unused_imports)]
    use super::*;

    /// The variants updated. We currently only support single variant
    /// experiment.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Variants {
        /// The flow versions as the variants.
        VersionVariants(std::boxed::Box<crate::model::VersionVariants>),
    }
}

/// The configuration for auto rollout.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RolloutConfig {
    /// Steps to roll out a flow version. Steps should be sorted by percentage in
    /// ascending order.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub rollout_steps: std::vec::Vec<crate::model::rollout_config::RolloutStep>,

    /// The conditions that are used to evaluate the success of a rollout
    /// step. If not specified, all rollout steps will proceed to the next one
    /// unless failure conditions are met. E.g. "containment_rate > 60% AND
    /// callback_rate < 20%". See the [conditions
    /// reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rollout_condition: std::string::String,

    /// The conditions that are used to evaluate the failure of a rollout
    /// step. If not specified, no rollout steps will fail. E.g. "containment_rate
    /// < 10% OR average_turn_count < 3". See the [conditions
    /// reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub failure_condition: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RolloutConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [rollout_condition][crate::model::RolloutConfig::rollout_condition].
    pub fn set_rollout_condition<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.rollout_condition = v.into();
        self
    }

    /// Sets the value of [failure_condition][crate::model::RolloutConfig::failure_condition].
    pub fn set_failure_condition<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.failure_condition = v.into();
        self
    }

    /// Sets the value of [rollout_steps][crate::model::RolloutConfig::rollout_steps].
    pub fn set_rollout_steps<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::rollout_config::RolloutStep>,
    {
        use std::iter::Iterator;
        self.rollout_steps = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for RolloutConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.RolloutConfig"
    }
}

/// Defines additional types related to [RolloutConfig].
pub mod rollout_config {
    #[allow(unused_imports)]
    use super::*;

    /// A single rollout step with specified traffic allocation.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RolloutStep {
        /// The name of the rollout step;
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub display_name: std::string::String,

        /// The percentage of traffic allocated to the flow version of this rollout
        /// step. (0%, 100%].
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub traffic_percent: i32,

        /// The minimum time that this step should last. Should be longer than 1
        /// hour. If not set, the default minimum duration for each step will be 1
        /// hour.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub min_duration: std::option::Option<wkt::Duration>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl RolloutStep {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [display_name][crate::model::rollout_config::RolloutStep::display_name].
        pub fn set_display_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.display_name = v.into();
            self
        }

        /// Sets the value of [traffic_percent][crate::model::rollout_config::RolloutStep::traffic_percent].
        pub fn set_traffic_percent<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.traffic_percent = v.into();
            self
        }

        /// Sets the value of [min_duration][crate::model::rollout_config::RolloutStep::min_duration].
        pub fn set_min_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.min_duration = v.into();
            self
        }
    }

    impl wkt::message::Message for RolloutStep {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.RolloutConfig.RolloutStep"
        }
    }
}

/// State of the auto-rollout process.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RolloutState {
    /// Display name of the current auto rollout step.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub step: std::string::String,

    /// Index of the current step in the auto rollout steps list.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub step_index: i32,

    /// Start time of the current step.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time: std::option::Option<wkt::Timestamp>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RolloutState {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [step][crate::model::RolloutState::step].
    pub fn set_step<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.step = v.into();
        self
    }

    /// Sets the value of [step_index][crate::model::RolloutState::step_index].
    pub fn set_step_index<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.step_index = v.into();
        self
    }

    /// Sets the value of [start_time][crate::model::RolloutState::start_time].
    pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time = v.into();
        self
    }
}

impl wkt::message::Message for RolloutState {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.RolloutState"
    }
}

/// The request message for
/// [Experiments.ListExperiments][google.cloud.dialogflow.cx.v3.Experiments.ListExperiments].
///
/// [google.cloud.dialogflow.cx.v3.Experiments.ListExperiments]: crate::client::Experiments::list_experiments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListExperimentsRequest {
    /// Required. The [Environment][google.cloud.dialogflow.cx.v3.Environment] to
    /// list all environments for. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return in a single page. By default 20 and
    /// at most 100.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListExperimentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListExperimentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListExperimentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListExperimentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListExperimentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListExperimentsRequest"
    }
}

/// The response message for
/// [Experiments.ListExperiments][google.cloud.dialogflow.cx.v3.Experiments.ListExperiments].
///
/// [google.cloud.dialogflow.cx.v3.Experiments.ListExperiments]: crate::client::Experiments::list_experiments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListExperimentsResponse {
    /// The list of experiments. There will be a maximum number of items
    /// returned based on the page_size field in the request. The list may in some
    /// cases be empty or contain fewer entries than page_size even if this isn't
    /// the last page.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub experiments: std::vec::Vec<crate::model::Experiment>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListExperimentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListExperimentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [experiments][crate::model::ListExperimentsResponse::experiments].
    pub fn set_experiments<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Experiment>,
    {
        use std::iter::Iterator;
        self.experiments = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListExperimentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListExperimentsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListExperimentsResponse {
    type PageItem = crate::model::Experiment;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.experiments
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Experiments.GetExperiment][google.cloud.dialogflow.cx.v3.Experiments.GetExperiment].
///
/// [google.cloud.dialogflow.cx.v3.Experiments.GetExperiment]: crate::client::Experiments::get_experiment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetExperimentRequest {
    /// Required. The name of the
    /// [Environment][google.cloud.dialogflow.cx.v3.Environment]. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>/experiments/<ExperimentID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetExperimentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetExperimentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetExperimentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetExperimentRequest"
    }
}

/// The request message for
/// [Experiments.CreateExperiment][google.cloud.dialogflow.cx.v3.Experiments.CreateExperiment].
///
/// [google.cloud.dialogflow.cx.v3.Experiments.CreateExperiment]: crate::client::Experiments::create_experiment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateExperimentRequest {
    /// Required. The [Agent][google.cloud.dialogflow.cx.v3.Agent] to create an
    /// [Environment][google.cloud.dialogflow.cx.v3.Environment] for. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Agent]: crate::model::Agent
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The experiment to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub experiment: std::option::Option<crate::model::Experiment>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateExperimentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateExperimentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [experiment][crate::model::CreateExperimentRequest::experiment].
    pub fn set_experiment<T: std::convert::Into<std::option::Option<crate::model::Experiment>>>(
        mut self,
        v: T,
    ) -> Self {
        self.experiment = v.into();
        self
    }
}

impl wkt::message::Message for CreateExperimentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CreateExperimentRequest"
    }
}

/// The request message for
/// [Experiments.UpdateExperiment][google.cloud.dialogflow.cx.v3.Experiments.UpdateExperiment].
///
/// [google.cloud.dialogflow.cx.v3.Experiments.UpdateExperiment]: crate::client::Experiments::update_experiment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateExperimentRequest {
    /// Required. The experiment to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub experiment: std::option::Option<crate::model::Experiment>,

    /// Required. The mask to control which fields get updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateExperimentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [experiment][crate::model::UpdateExperimentRequest::experiment].
    pub fn set_experiment<T: std::convert::Into<std::option::Option<crate::model::Experiment>>>(
        mut self,
        v: T,
    ) -> Self {
        self.experiment = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateExperimentRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateExperimentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.UpdateExperimentRequest"
    }
}

/// The request message for
/// [Experiments.DeleteExperiment][google.cloud.dialogflow.cx.v3.Experiments.DeleteExperiment].
///
/// [google.cloud.dialogflow.cx.v3.Experiments.DeleteExperiment]: crate::client::Experiments::delete_experiment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteExperimentRequest {
    /// Required. The name of the
    /// [Environment][google.cloud.dialogflow.cx.v3.Environment] to delete. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>/experiments/<ExperimentID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Environment]: crate::model::Environment
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteExperimentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteExperimentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteExperimentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DeleteExperimentRequest"
    }
}

/// The request message for
/// [Experiments.StartExperiment][google.cloud.dialogflow.cx.v3.Experiments.StartExperiment].
///
/// [google.cloud.dialogflow.cx.v3.Experiments.StartExperiment]: crate::client::Experiments::start_experiment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StartExperimentRequest {
    /// Required. Resource name of the experiment to start.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>/experiments/<ExperimentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl StartExperimentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::StartExperimentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for StartExperimentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.StartExperimentRequest"
    }
}

/// The request message for
/// [Experiments.StopExperiment][google.cloud.dialogflow.cx.v3.Experiments.StopExperiment].
///
/// [google.cloud.dialogflow.cx.v3.Experiments.StopExperiment]: crate::client::Experiments::stop_experiment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StopExperimentRequest {
    /// Required. Resource name of the experiment to stop.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>/experiments/<ExperimentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl StopExperimentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::StopExperimentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for StopExperimentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.StopExperimentRequest"
    }
}

/// Settings related to NLU.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct NluSettings {
    /// Indicates the type of NLU model.
    pub model_type: crate::model::nlu_settings::ModelType,

    /// To filter out false positive results and still get variety in matched
    /// natural language inputs for your agent, you can tune the machine learning
    /// classification threshold. If the returned score value is less than the
    /// threshold value, then a no-match event will be triggered. The score values
    /// range from 0.0 (completely uncertain) to 1.0 (completely certain). If set
    /// to 0.0, the default of 0.3 is used. You can set a separate classification
    /// threshold for the flow in each language enabled for the agent.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub classification_threshold: f32,

    /// Indicates NLU model training mode.
    pub model_training_mode: crate::model::nlu_settings::ModelTrainingMode,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl NluSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [model_type][crate::model::NluSettings::model_type].
    pub fn set_model_type<T: std::convert::Into<crate::model::nlu_settings::ModelType>>(
        mut self,
        v: T,
    ) -> Self {
        self.model_type = v.into();
        self
    }

    /// Sets the value of [classification_threshold][crate::model::NluSettings::classification_threshold].
    pub fn set_classification_threshold<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.classification_threshold = v.into();
        self
    }

    /// Sets the value of [model_training_mode][crate::model::NluSettings::model_training_mode].
    pub fn set_model_training_mode<
        T: std::convert::Into<crate::model::nlu_settings::ModelTrainingMode>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.model_training_mode = v.into();
        self
    }
}

impl wkt::message::Message for NluSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.NluSettings"
    }
}

/// Defines additional types related to [NluSettings].
pub mod nlu_settings {
    #[allow(unused_imports)]
    use super::*;

    /// NLU model type.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum ModelType {
        /// Not specified. `MODEL_TYPE_STANDARD` will be used.
        Unspecified,
        /// Use standard NLU model.
        Standard,
        /// Use advanced NLU model.
        Advanced,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [ModelType::value] or
        /// [ModelType::name].
        UnknownValue(model_type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod model_type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl ModelType {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Standard => std::option::Option::Some(1),
                Self::Advanced => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("MODEL_TYPE_UNSPECIFIED"),
                Self::Standard => std::option::Option::Some("MODEL_TYPE_STANDARD"),
                Self::Advanced => std::option::Option::Some("MODEL_TYPE_ADVANCED"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for ModelType {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for ModelType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for ModelType {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Standard,
                3 => Self::Advanced,
                _ => Self::UnknownValue(model_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for ModelType {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "MODEL_TYPE_UNSPECIFIED" => Self::Unspecified,
                "MODEL_TYPE_STANDARD" => Self::Standard,
                "MODEL_TYPE_ADVANCED" => Self::Advanced,
                _ => Self::UnknownValue(model_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for ModelType {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Standard => serializer.serialize_i32(1),
                Self::Advanced => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for ModelType {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<ModelType>::new(
                ".google.cloud.dialogflow.cx.v3.NluSettings.ModelType",
            ))
        }
    }

    /// NLU model training mode.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum ModelTrainingMode {
        /// Not specified. `MODEL_TRAINING_MODE_AUTOMATIC` will be used.
        Unspecified,
        /// NLU model training is automatically triggered when a flow gets modified.
        /// User can also manually trigger model training in this mode.
        Automatic,
        /// User needs to manually trigger NLU model training. Best for large flows
        /// whose models take long time to train.
        Manual,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [ModelTrainingMode::value] or
        /// [ModelTrainingMode::name].
        UnknownValue(model_training_mode::UnknownValue),
    }

    #[doc(hidden)]
    pub mod model_training_mode {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl ModelTrainingMode {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Automatic => std::option::Option::Some(1),
                Self::Manual => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("MODEL_TRAINING_MODE_UNSPECIFIED"),
                Self::Automatic => std::option::Option::Some("MODEL_TRAINING_MODE_AUTOMATIC"),
                Self::Manual => std::option::Option::Some("MODEL_TRAINING_MODE_MANUAL"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for ModelTrainingMode {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for ModelTrainingMode {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for ModelTrainingMode {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Automatic,
                2 => Self::Manual,
                _ => Self::UnknownValue(model_training_mode::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for ModelTrainingMode {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "MODEL_TRAINING_MODE_UNSPECIFIED" => Self::Unspecified,
                "MODEL_TRAINING_MODE_AUTOMATIC" => Self::Automatic,
                "MODEL_TRAINING_MODE_MANUAL" => Self::Manual,
                _ => Self::UnknownValue(model_training_mode::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for ModelTrainingMode {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Automatic => serializer.serialize_i32(1),
                Self::Manual => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for ModelTrainingMode {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<ModelTrainingMode>::new(
                ".google.cloud.dialogflow.cx.v3.NluSettings.ModelTrainingMode",
            ))
        }
    }
}

/// Flows represents the conversation flows when you build your chatbot agent.
///
/// A flow consists of many pages connected by the transition routes.
/// Conversations always start with the built-in Start Flow (with an all-0 ID).
/// Transition routes can direct the conversation session from the current flow
/// (parent flow) to another flow (sub flow). When the sub flow is finished,
/// Dialogflow will bring the session back to the parent flow, where the sub flow
/// is started.
///
/// Usually, when a transition route is followed by a matched intent, the intent
/// will be "consumed". This means the intent won't activate more transition
/// routes. However, when the followed transition route moves the conversation
/// session into a different flow, the matched intent can be carried over and to
/// be consumed in the target flow.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Flow {
    /// The unique identifier of the flow.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The human-readable name of the flow.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// The description of the flow. The maximum length is 500 characters. If
    /// exceeded, the request is rejected.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// A flow's transition routes serve two purposes:
    ///
    /// * They are responsible for matching the user's first utterances in the
    ///   flow.
    /// * They are inherited by every page's [transition
    ///   routes][Page.transition_routes] and can support use cases such as the user
    ///   saying "help" or "can I talk to a human?", which can be handled in a common
    ///   way regardless of the current page. Transition routes defined in the page
    ///   have higher priority than those defined in the flow.
    ///
    /// TransitionRoutes are evaluated in the following order:
    ///
    /// * TransitionRoutes with intent specified.
    /// * TransitionRoutes with only condition specified.
    ///
    /// TransitionRoutes with intent specified are inherited by pages in the flow.
    ///
    /// [Page.transition_routes]: crate::model::Page::transition_routes
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub transition_routes: std::vec::Vec<crate::model::TransitionRoute>,

    /// A flow's event handlers serve two purposes:
    ///
    /// * They are responsible for handling events (e.g. no match,
    ///   webhook errors) in the flow.
    /// * They are inherited by every page's [event
    ///   handlers][Page.event_handlers], which can be used to handle common events
    ///   regardless of the current page. Event handlers defined in the page
    ///   have higher priority than those defined in the flow.
    ///
    /// Unlike
    /// [transition_routes][google.cloud.dialogflow.cx.v3.Flow.transition_routes],
    /// these handlers are evaluated on a first-match basis. The first one that
    /// matches the event get executed, with the rest being ignored.
    ///
    /// [Page.event_handlers]: crate::model::Page::event_handlers
    /// [google.cloud.dialogflow.cx.v3.Flow.transition_routes]: crate::model::Flow::transition_routes
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub event_handlers: std::vec::Vec<crate::model::EventHandler>,

    /// A flow's transition route group serve two purposes:
    ///
    /// * They are responsible for matching the user's first utterances in the
    ///   flow.
    /// * They are inherited by every page's [transition
    ///   route groups][Page.transition_route_groups]. Transition route groups
    ///   defined in the page have higher priority than those defined in the flow.
    ///
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/transitionRouteGroups/<TransitionRouteGroupID>`
    /// or
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/transitionRouteGroups/<TransitionRouteGroupID>`
    /// for agent-level groups.
    ///
    /// [Page.transition_route_groups]: crate::model::Page::transition_route_groups
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub transition_route_groups: std::vec::Vec<std::string::String>,

    /// NLU related settings of the flow.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub nlu_settings: std::option::Option<crate::model::NluSettings>,

    /// Hierarchical advanced settings for this flow. The settings exposed at the
    /// lower level overrides the settings exposed at the higher level.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub advanced_settings: std::option::Option<crate::model::AdvancedSettings>,

    /// Optional. Knowledge connector configuration.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub knowledge_connector_settings: std::option::Option<crate::model::KnowledgeConnectorSettings>,

    /// Optional. Multi-lingual agent settings for this flow.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub multi_language_settings: std::option::Option<crate::model::flow::MultiLanguageSettings>,

    /// Indicates whether the flow is locked for changes. If the flow is locked,
    /// modifications to the flow will be rejected.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub locked: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Flow {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Flow::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Flow::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Flow::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [nlu_settings][crate::model::Flow::nlu_settings].
    pub fn set_nlu_settings<
        T: std::convert::Into<std::option::Option<crate::model::NluSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.nlu_settings = v.into();
        self
    }

    /// Sets the value of [advanced_settings][crate::model::Flow::advanced_settings].
    pub fn set_advanced_settings<
        T: std::convert::Into<std::option::Option<crate::model::AdvancedSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.advanced_settings = v.into();
        self
    }

    /// Sets the value of [knowledge_connector_settings][crate::model::Flow::knowledge_connector_settings].
    pub fn set_knowledge_connector_settings<
        T: std::convert::Into<std::option::Option<crate::model::KnowledgeConnectorSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.knowledge_connector_settings = v.into();
        self
    }

    /// Sets the value of [multi_language_settings][crate::model::Flow::multi_language_settings].
    pub fn set_multi_language_settings<
        T: std::convert::Into<std::option::Option<crate::model::flow::MultiLanguageSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.multi_language_settings = v.into();
        self
    }

    /// Sets the value of [locked][crate::model::Flow::locked].
    pub fn set_locked<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.locked = v.into();
        self
    }

    /// Sets the value of [transition_routes][crate::model::Flow::transition_routes].
    pub fn set_transition_routes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TransitionRoute>,
    {
        use std::iter::Iterator;
        self.transition_routes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [event_handlers][crate::model::Flow::event_handlers].
    pub fn set_event_handlers<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EventHandler>,
    {
        use std::iter::Iterator;
        self.event_handlers = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [transition_route_groups][crate::model::Flow::transition_route_groups].
    pub fn set_transition_route_groups<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.transition_route_groups = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Flow {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.Flow"
    }
}

/// Defines additional types related to [Flow].
pub mod flow {
    #[allow(unused_imports)]
    use super::*;

    /// Settings for multi-lingual agents.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct MultiLanguageSettings {
        /// Optional. Enable multi-language detection for this flow. This can be set
        /// only if [agent level multi language
        /// setting][Agent.enable_multi_language_training] is enabled.
        ///
        /// [Agent.enable_multi_language_training]: crate::model::Agent::enable_multi_language_training
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enable_multi_language_detection: bool,

        /// Optional. Agent will respond in the detected language if the detected
        /// language code is in the supported resolved languages for this flow. This
        /// will be used only if multi-language training is enabled in the
        /// [agent][google.cloud.dialogflow.cx.v3.Agent.enable_multi_language_training]
        /// and multi-language detection is enabled in the
        /// [flow][google.cloud.dialogflow.cx.v3.Flow.MultiLanguageSettings.enable_multi_language_detection].
        /// The supported languages must be a subset of the languages supported by
        /// the agent.
        ///
        /// [google.cloud.dialogflow.cx.v3.Agent.enable_multi_language_training]: crate::model::Agent::enable_multi_language_training
        /// [google.cloud.dialogflow.cx.v3.Flow.MultiLanguageSettings.enable_multi_language_detection]: crate::model::flow::MultiLanguageSettings::enable_multi_language_detection
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub supported_response_language_codes: std::vec::Vec<std::string::String>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl MultiLanguageSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [enable_multi_language_detection][crate::model::flow::MultiLanguageSettings::enable_multi_language_detection].
        pub fn set_enable_multi_language_detection<T: std::convert::Into<bool>>(
            mut self,
            v: T,
        ) -> Self {
            self.enable_multi_language_detection = v.into();
            self
        }

        /// Sets the value of [supported_response_language_codes][crate::model::flow::MultiLanguageSettings::supported_response_language_codes].
        pub fn set_supported_response_language_codes<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.supported_response_language_codes = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for MultiLanguageSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Flow.MultiLanguageSettings"
        }
    }
}

/// The request message for
/// [Flows.CreateFlow][google.cloud.dialogflow.cx.v3.Flows.CreateFlow].
///
/// [google.cloud.dialogflow.cx.v3.Flows.CreateFlow]: crate::client::Flows::create_flow
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateFlowRequest {
    /// Required. The agent to create a flow for.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The flow to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub flow: std::option::Option<crate::model::Flow>,

    /// The language of the following fields in `flow`:
    ///
    /// * `Flow.event_handlers.trigger_fulfillment.messages`
    /// * `Flow.event_handlers.trigger_fulfillment.conditional_cases`
    /// * `Flow.transition_routes.trigger_fulfillment.messages`
    /// * `Flow.transition_routes.trigger_fulfillment.conditional_cases`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateFlowRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateFlowRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [flow][crate::model::CreateFlowRequest::flow].
    pub fn set_flow<T: std::convert::Into<std::option::Option<crate::model::Flow>>>(
        mut self,
        v: T,
    ) -> Self {
        self.flow = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::CreateFlowRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for CreateFlowRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CreateFlowRequest"
    }
}

/// The request message for
/// [Flows.DeleteFlow][google.cloud.dialogflow.cx.v3.Flows.DeleteFlow].
///
/// [google.cloud.dialogflow.cx.v3.Flows.DeleteFlow]: crate::client::Flows::delete_flow
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteFlowRequest {
    /// Required. The name of the flow to delete.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// This field has no effect for flows with no incoming transitions.
    /// For flows with incoming transitions:
    ///
    /// * If `force` is set to false, an error will be returned with message
    ///   indicating the incoming transitions.
    /// * If `force` is set to true, Dialogflow will remove the flow, as well as
    ///   any transitions to the flow (i.e. [Target
    ///   flow][EventHandler.target_flow] in event handlers or [Target
    ///   flow][TransitionRoute.target_flow] in transition routes that point to
    ///   this flow will be cleared).
    ///
    /// [EventHandler.target_flow]: crate::model::EventHandler::target
    /// [TransitionRoute.target_flow]: crate::model::TransitionRoute::target
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub force: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteFlowRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteFlowRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [force][crate::model::DeleteFlowRequest::force].
    pub fn set_force<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.force = v.into();
        self
    }
}

impl wkt::message::Message for DeleteFlowRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DeleteFlowRequest"
    }
}

/// The request message for
/// [Flows.ListFlows][google.cloud.dialogflow.cx.v3.Flows.ListFlows].
///
/// [google.cloud.dialogflow.cx.v3.Flows.ListFlows]: crate::client::Flows::list_flows
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListFlowsRequest {
    /// Required. The agent containing the flows.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return in a single page. By default 100 and
    /// at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// The language to list flows for. The following fields are language
    /// dependent:
    ///
    /// * `Flow.event_handlers.trigger_fulfillment.messages`
    /// * `Flow.event_handlers.trigger_fulfillment.conditional_cases`
    /// * `Flow.transition_routes.trigger_fulfillment.messages`
    /// * `Flow.transition_routes.trigger_fulfillment.conditional_cases`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListFlowsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListFlowsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListFlowsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListFlowsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::ListFlowsRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for ListFlowsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListFlowsRequest"
    }
}

/// The response message for
/// [Flows.ListFlows][google.cloud.dialogflow.cx.v3.Flows.ListFlows].
///
/// [google.cloud.dialogflow.cx.v3.Flows.ListFlows]: crate::client::Flows::list_flows
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListFlowsResponse {
    /// The list of flows. There will be a maximum number of items returned based
    /// on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub flows: std::vec::Vec<crate::model::Flow>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListFlowsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListFlowsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [flows][crate::model::ListFlowsResponse::flows].
    pub fn set_flows<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Flow>,
    {
        use std::iter::Iterator;
        self.flows = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListFlowsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListFlowsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListFlowsResponse {
    type PageItem = crate::model::Flow;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.flows
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The response message for
/// [Flows.GetFlow][google.cloud.dialogflow.cx.v3.Flows.GetFlow].
///
/// [google.cloud.dialogflow.cx.v3.Flows.GetFlow]: crate::client::Flows::get_flow
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetFlowRequest {
    /// Required. The name of the flow to get.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The language to retrieve the flow for. The following fields are language
    /// dependent:
    ///
    /// * `Flow.event_handlers.trigger_fulfillment.messages`
    /// * `Flow.event_handlers.trigger_fulfillment.conditional_cases`
    /// * `Flow.transition_routes.trigger_fulfillment.messages`
    /// * `Flow.transition_routes.trigger_fulfillment.conditional_cases`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetFlowRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetFlowRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::GetFlowRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for GetFlowRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetFlowRequest"
    }
}

/// The request message for
/// [Flows.UpdateFlow][google.cloud.dialogflow.cx.v3.Flows.UpdateFlow].
///
/// [google.cloud.dialogflow.cx.v3.Flows.UpdateFlow]: crate::client::Flows::update_flow
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateFlowRequest {
    /// Required. The flow to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub flow: std::option::Option<crate::model::Flow>,

    /// The mask to control which fields get updated. If the mask is not present,
    /// all fields will be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// The language of the following fields in `flow`:
    ///
    /// * `Flow.event_handlers.trigger_fulfillment.messages`
    /// * `Flow.event_handlers.trigger_fulfillment.conditional_cases`
    /// * `Flow.transition_routes.trigger_fulfillment.messages`
    /// * `Flow.transition_routes.trigger_fulfillment.conditional_cases`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateFlowRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [flow][crate::model::UpdateFlowRequest::flow].
    pub fn set_flow<T: std::convert::Into<std::option::Option<crate::model::Flow>>>(
        mut self,
        v: T,
    ) -> Self {
        self.flow = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateFlowRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::UpdateFlowRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for UpdateFlowRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.UpdateFlowRequest"
    }
}

/// The request message for
/// [Flows.TrainFlow][google.cloud.dialogflow.cx.v3.Flows.TrainFlow].
///
/// [google.cloud.dialogflow.cx.v3.Flows.TrainFlow]: crate::client::Flows::train_flow
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TrainFlowRequest {
    /// Required. The flow to train.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TrainFlowRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::TrainFlowRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for TrainFlowRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.TrainFlowRequest"
    }
}

/// The request message for
/// [Flows.ValidateFlow][google.cloud.dialogflow.cx.v3.Flows.ValidateFlow].
///
/// [google.cloud.dialogflow.cx.v3.Flows.ValidateFlow]: crate::client::Flows::validate_flow
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ValidateFlowRequest {
    /// Required. The flow to validate.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// If not specified, the agent's default language is used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ValidateFlowRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ValidateFlowRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::ValidateFlowRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for ValidateFlowRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ValidateFlowRequest"
    }
}

/// The request message for
/// [Flows.GetFlowValidationResult][google.cloud.dialogflow.cx.v3.Flows.GetFlowValidationResult].
///
/// [google.cloud.dialogflow.cx.v3.Flows.GetFlowValidationResult]: crate::client::Flows::get_flow_validation_result
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetFlowValidationResultRequest {
    /// Required. The flow name.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/validationResult`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// If not specified, the agent's default language is used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetFlowValidationResultRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetFlowValidationResultRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::GetFlowValidationResultRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for GetFlowValidationResultRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetFlowValidationResultRequest"
    }
}

/// The response message for
/// [Flows.GetFlowValidationResult][google.cloud.dialogflow.cx.v3.Flows.GetFlowValidationResult].
///
/// [google.cloud.dialogflow.cx.v3.Flows.GetFlowValidationResult]: crate::client::Flows::get_flow_validation_result
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FlowValidationResult {
    /// The unique identifier of the flow validation result.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/validationResult`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Contains all validation messages.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub validation_messages: std::vec::Vec<crate::model::ValidationMessage>,

    /// Last time the flow was validated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl FlowValidationResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::FlowValidationResult::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::FlowValidationResult::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [validation_messages][crate::model::FlowValidationResult::validation_messages].
    pub fn set_validation_messages<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ValidationMessage>,
    {
        use std::iter::Iterator;
        self.validation_messages = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for FlowValidationResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.FlowValidationResult"
    }
}

/// The request message for
/// [Flows.ImportFlow][google.cloud.dialogflow.cx.v3.Flows.ImportFlow].
///
/// [google.cloud.dialogflow.cx.v3.Flows.ImportFlow]: crate::client::Flows::import_flow
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportFlowRequest {
    /// Required. The agent to import the flow into.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Flow import mode. If not specified, `KEEP` is assumed.
    pub import_option: crate::model::import_flow_request::ImportOption,

    /// Optional. Specifies the import strategy used when resolving resource
    /// conflicts.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub flow_import_strategy: std::option::Option<crate::model::FlowImportStrategy>,

    /// Required. The flow to import.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub flow: std::option::Option<crate::model::import_flow_request::Flow>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportFlowRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ImportFlowRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [import_option][crate::model::ImportFlowRequest::import_option].
    pub fn set_import_option<
        T: std::convert::Into<crate::model::import_flow_request::ImportOption>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.import_option = v.into();
        self
    }

    /// Sets the value of [flow_import_strategy][crate::model::ImportFlowRequest::flow_import_strategy].
    pub fn set_flow_import_strategy<
        T: std::convert::Into<std::option::Option<crate::model::FlowImportStrategy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.flow_import_strategy = v.into();
        self
    }

    /// Sets the value of [flow][crate::model::ImportFlowRequest::flow].
    ///
    /// Note that all the setters affecting `flow` are mutually
    /// exclusive.
    pub fn set_flow<
        T: std::convert::Into<std::option::Option<crate::model::import_flow_request::Flow>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.flow = v.into();
        self
    }

    /// The value of [flow][crate::model::ImportFlowRequest::flow]
    /// if it holds a `FlowUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn flow_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.flow.as_ref().and_then(|v| match v {
            crate::model::import_flow_request::Flow::FlowUri(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [flow][crate::model::ImportFlowRequest::flow]
    /// if it holds a `FlowContent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn flow_content(&self) -> std::option::Option<&::bytes::Bytes> {
        #[allow(unreachable_patterns)]
        self.flow.as_ref().and_then(|v| match v {
            crate::model::import_flow_request::Flow::FlowContent(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [flow][crate::model::ImportFlowRequest::flow]
    /// to hold a `FlowUri`.
    ///
    /// Note that all the setters affecting `flow` are
    /// mutually exclusive.
    pub fn set_flow_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.flow =
            std::option::Option::Some(crate::model::import_flow_request::Flow::FlowUri(v.into()));
        self
    }

    /// Sets the value of [flow][crate::model::ImportFlowRequest::flow]
    /// to hold a `FlowContent`.
    ///
    /// Note that all the setters affecting `flow` are
    /// mutually exclusive.
    pub fn set_flow_content<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.flow = std::option::Option::Some(
            crate::model::import_flow_request::Flow::FlowContent(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ImportFlowRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ImportFlowRequest"
    }
}

/// Defines additional types related to [ImportFlowRequest].
pub mod import_flow_request {
    #[allow(unused_imports)]
    use super::*;

    /// Import option.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum ImportOption {
        /// Unspecified. Treated as `KEEP`.
        Unspecified,
        /// Always respect settings in exported flow content. It may cause a
        /// import failure if some settings (e.g. custom NLU) are not supported in
        /// the agent to import into.
        Keep,
        /// Fallback to default settings if some settings are not supported in the
        /// agent to import into. E.g. Standard NLU will be used if custom NLU is
        /// not available.
        Fallback,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [ImportOption::value] or
        /// [ImportOption::name].
        UnknownValue(import_option::UnknownValue),
    }

    #[doc(hidden)]
    pub mod import_option {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl ImportOption {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Keep => std::option::Option::Some(1),
                Self::Fallback => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("IMPORT_OPTION_UNSPECIFIED"),
                Self::Keep => std::option::Option::Some("KEEP"),
                Self::Fallback => std::option::Option::Some("FALLBACK"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for ImportOption {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for ImportOption {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for ImportOption {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Keep,
                2 => Self::Fallback,
                _ => Self::UnknownValue(import_option::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for ImportOption {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "IMPORT_OPTION_UNSPECIFIED" => Self::Unspecified,
                "KEEP" => Self::Keep,
                "FALLBACK" => Self::Fallback,
                _ => Self::UnknownValue(import_option::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for ImportOption {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Keep => serializer.serialize_i32(1),
                Self::Fallback => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for ImportOption {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<ImportOption>::new(
                ".google.cloud.dialogflow.cx.v3.ImportFlowRequest.ImportOption",
            ))
        }
    }

    /// Required. The flow to import.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Flow {
        /// The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI
        /// to import flow from. The format of this URI must be
        /// `gs://<bucket-name>/<object-name>`.
        ///
        /// Dialogflow performs a read operation for the Cloud Storage object
        /// on the caller's behalf, so your request authentication must
        /// have read permissions for the object. For more information, see
        /// [Dialogflow access
        /// control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
        FlowUri(std::string::String),
        /// Uncompressed raw byte content for flow.
        FlowContent(::bytes::Bytes),
    }
}

/// The flow import strategy used for resource conflict resolution associated
/// with an [ImportFlowRequest][google.cloud.dialogflow.cx.v3.ImportFlowRequest].
///
/// [google.cloud.dialogflow.cx.v3.ImportFlowRequest]: crate::model::ImportFlowRequest
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FlowImportStrategy {
    /// Optional. Import strategy for resource conflict resolution, applied
    /// globally throughout the flow. It will be applied for all display name
    /// conflicts in the imported content. If not specified, 'CREATE_NEW' is
    /// assumed.
    pub global_import_strategy: crate::model::ImportStrategy,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl FlowImportStrategy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [global_import_strategy][crate::model::FlowImportStrategy::global_import_strategy].
    pub fn set_global_import_strategy<T: std::convert::Into<crate::model::ImportStrategy>>(
        mut self,
        v: T,
    ) -> Self {
        self.global_import_strategy = v.into();
        self
    }
}

impl wkt::message::Message for FlowImportStrategy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.FlowImportStrategy"
    }
}

/// The response message for
/// [Flows.ImportFlow][google.cloud.dialogflow.cx.v3.Flows.ImportFlow].
///
/// [google.cloud.dialogflow.cx.v3.Flows.ImportFlow]: crate::client::Flows::import_flow
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportFlowResponse {
    /// The unique identifier of the new flow.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub flow: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportFlowResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [flow][crate::model::ImportFlowResponse::flow].
    pub fn set_flow<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.flow = v.into();
        self
    }
}

impl wkt::message::Message for ImportFlowResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ImportFlowResponse"
    }
}

/// The request message for
/// [Flows.ExportFlow][google.cloud.dialogflow.cx.v3.Flows.ExportFlow].
///
/// [google.cloud.dialogflow.cx.v3.Flows.ExportFlow]: crate::client::Flows::export_flow
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportFlowRequest {
    /// Required. The name of the flow to export.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. The [Google Cloud
    /// Storage](https://cloud.google.com/storage/docs/) URI to export the flow to.
    /// The format of this URI must be `gs://<bucket-name>/<object-name>`. If left
    /// unspecified, the serialized flow is returned inline.
    ///
    /// Dialogflow performs a write operation for the Cloud Storage object
    /// on the caller's behalf, so your request authentication must
    /// have write permissions for the object. For more information, see
    /// [Dialogflow access
    /// control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub flow_uri: std::string::String,

    /// Optional. Whether to export flows referenced by the specified flow.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub include_referenced_flows: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExportFlowRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ExportFlowRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [flow_uri][crate::model::ExportFlowRequest::flow_uri].
    pub fn set_flow_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.flow_uri = v.into();
        self
    }

    /// Sets the value of [include_referenced_flows][crate::model::ExportFlowRequest::include_referenced_flows].
    pub fn set_include_referenced_flows<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.include_referenced_flows = v.into();
        self
    }
}

impl wkt::message::Message for ExportFlowRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ExportFlowRequest"
    }
}

/// The response message for
/// [Flows.ExportFlow][google.cloud.dialogflow.cx.v3.Flows.ExportFlow].
///
/// [google.cloud.dialogflow.cx.v3.Flows.ExportFlow]: crate::client::Flows::export_flow
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportFlowResponse {
    /// The exported flow.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub flow: std::option::Option<crate::model::export_flow_response::Flow>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExportFlowResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [flow][crate::model::ExportFlowResponse::flow].
    ///
    /// Note that all the setters affecting `flow` are mutually
    /// exclusive.
    pub fn set_flow<
        T: std::convert::Into<std::option::Option<crate::model::export_flow_response::Flow>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.flow = v.into();
        self
    }

    /// The value of [flow][crate::model::ExportFlowResponse::flow]
    /// if it holds a `FlowUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn flow_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.flow.as_ref().and_then(|v| match v {
            crate::model::export_flow_response::Flow::FlowUri(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [flow][crate::model::ExportFlowResponse::flow]
    /// if it holds a `FlowContent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn flow_content(&self) -> std::option::Option<&::bytes::Bytes> {
        #[allow(unreachable_patterns)]
        self.flow.as_ref().and_then(|v| match v {
            crate::model::export_flow_response::Flow::FlowContent(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [flow][crate::model::ExportFlowResponse::flow]
    /// to hold a `FlowUri`.
    ///
    /// Note that all the setters affecting `flow` are
    /// mutually exclusive.
    pub fn set_flow_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.flow =
            std::option::Option::Some(crate::model::export_flow_response::Flow::FlowUri(v.into()));
        self
    }

    /// Sets the value of [flow][crate::model::ExportFlowResponse::flow]
    /// to hold a `FlowContent`.
    ///
    /// Note that all the setters affecting `flow` are
    /// mutually exclusive.
    pub fn set_flow_content<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.flow = std::option::Option::Some(
            crate::model::export_flow_response::Flow::FlowContent(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ExportFlowResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ExportFlowResponse"
    }
}

/// Defines additional types related to [ExportFlowResponse].
pub mod export_flow_response {
    #[allow(unused_imports)]
    use super::*;

    /// The exported flow.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Flow {
        /// The URI to a file containing the exported flow. This field is populated
        /// only if `flow_uri` is specified in
        /// [ExportFlowRequest][google.cloud.dialogflow.cx.v3.ExportFlowRequest].
        ///
        /// [google.cloud.dialogflow.cx.v3.ExportFlowRequest]: crate::model::ExportFlowRequest
        FlowUri(std::string::String),
        /// Uncompressed raw byte content for flow.
        FlowContent(::bytes::Bytes),
    }
}

/// A fulfillment can do one or more of the following actions at the same time:
///
/// * Generate rich message responses.
/// * Set parameter values.
/// * Call the webhook.
///
/// Fulfillments can be called at various stages in the
/// [Page][google.cloud.dialogflow.cx.v3.Page] or
/// [Form][google.cloud.dialogflow.cx.v3.Form] lifecycle. For example, when a
/// [DetectIntentRequest][google.cloud.dialogflow.cx.v3.DetectIntentRequest]
/// drives a session to enter a new page, the page's entry fulfillment can add a
/// static response to the
/// [QueryResult][google.cloud.dialogflow.cx.v3.QueryResult] in the returning
/// [DetectIntentResponse][google.cloud.dialogflow.cx.v3.DetectIntentResponse],
/// call the webhook (for example, to load user data from a database), or both.
///
/// [google.cloud.dialogflow.cx.v3.DetectIntentRequest]: crate::model::DetectIntentRequest
/// [google.cloud.dialogflow.cx.v3.DetectIntentResponse]: crate::model::DetectIntentResponse
/// [google.cloud.dialogflow.cx.v3.Form]: crate::model::Form
/// [google.cloud.dialogflow.cx.v3.Page]: crate::model::Page
/// [google.cloud.dialogflow.cx.v3.QueryResult]: crate::model::QueryResult
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Fulfillment {
    /// The list of rich message responses to present to the user.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub messages: std::vec::Vec<crate::model::ResponseMessage>,

    /// The webhook to call.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/webhooks/<WebhookID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub webhook: std::string::String,

    /// Whether Dialogflow should return currently queued fulfillment response
    /// messages in streaming APIs. If a webhook is specified, it happens before
    /// Dialogflow invokes webhook.
    /// Warning:
    ///
    /// ) This flag only affects streaming API. Responses are still queued
    ///   and returned once in non-streaming API.
    /// ) The flag can be enabled in any fulfillment but only the first 3 partial
    ///   responses will be returned. You may only want to apply it to fulfillments
    ///   that have slow webhooks.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub return_partial_responses: bool,

    /// The value of this field will be populated in the
    /// [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest]
    /// `fulfillmentInfo.tag` field by Dialogflow when the associated webhook is
    /// called.
    /// The tag is typically used by the webhook service to identify which
    /// fulfillment is being called, but it could be used for other purposes.
    /// This field is required if `webhook` is specified.
    ///
    /// [google.cloud.dialogflow.cx.v3.WebhookRequest]: crate::model::WebhookRequest
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub tag: std::string::String,

    /// Set parameter values before executing the webhook.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub set_parameter_actions: std::vec::Vec<crate::model::fulfillment::SetParameterAction>,

    /// Conditional cases for this fulfillment.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub conditional_cases: std::vec::Vec<crate::model::fulfillment::ConditionalCases>,

    /// Hierarchical advanced settings for this fulfillment. The settings exposed
    /// at the lower level overrides the settings exposed at the higher level.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub advanced_settings: std::option::Option<crate::model::AdvancedSettings>,

    /// If the flag is true, the agent will utilize LLM to generate a text
    /// response. If LLM generation fails, the defined
    /// [responses][google.cloud.dialogflow.cx.v3.Fulfillment.messages] in the
    /// fulfillment will be respected. This flag is only useful for fulfillments
    /// associated with no-match event handlers.
    ///
    /// [google.cloud.dialogflow.cx.v3.Fulfillment.messages]: crate::model::Fulfillment::messages
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_generative_fallback: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Fulfillment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [webhook][crate::model::Fulfillment::webhook].
    pub fn set_webhook<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.webhook = v.into();
        self
    }

    /// Sets the value of [return_partial_responses][crate::model::Fulfillment::return_partial_responses].
    pub fn set_return_partial_responses<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.return_partial_responses = v.into();
        self
    }

    /// Sets the value of [tag][crate::model::Fulfillment::tag].
    pub fn set_tag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.tag = v.into();
        self
    }

    /// Sets the value of [advanced_settings][crate::model::Fulfillment::advanced_settings].
    pub fn set_advanced_settings<
        T: std::convert::Into<std::option::Option<crate::model::AdvancedSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.advanced_settings = v.into();
        self
    }

    /// Sets the value of [enable_generative_fallback][crate::model::Fulfillment::enable_generative_fallback].
    pub fn set_enable_generative_fallback<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_generative_fallback = v.into();
        self
    }

    /// Sets the value of [messages][crate::model::Fulfillment::messages].
    pub fn set_messages<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ResponseMessage>,
    {
        use std::iter::Iterator;
        self.messages = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [set_parameter_actions][crate::model::Fulfillment::set_parameter_actions].
    pub fn set_set_parameter_actions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::fulfillment::SetParameterAction>,
    {
        use std::iter::Iterator;
        self.set_parameter_actions = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [conditional_cases][crate::model::Fulfillment::conditional_cases].
    pub fn set_conditional_cases<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::fulfillment::ConditionalCases>,
    {
        use std::iter::Iterator;
        self.conditional_cases = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Fulfillment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.Fulfillment"
    }
}

/// Defines additional types related to [Fulfillment].
pub mod fulfillment {
    #[allow(unused_imports)]
    use super::*;

    /// Setting a parameter value.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SetParameterAction {
        /// Display name of the parameter.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub parameter: std::string::String,

        /// The new value of the parameter. A null value clears the parameter.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub value: std::option::Option<wkt::Value>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SetParameterAction {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [parameter][crate::model::fulfillment::SetParameterAction::parameter].
        pub fn set_parameter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.parameter = v.into();
            self
        }

        /// Sets the value of [value][crate::model::fulfillment::SetParameterAction::value].
        pub fn set_value<T: std::convert::Into<std::option::Option<wkt::Value>>>(
            mut self,
            v: T,
        ) -> Self {
            self.value = v.into();
            self
        }
    }

    impl wkt::message::Message for SetParameterAction {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Fulfillment.SetParameterAction"
        }
    }

    /// A list of cascading if-else conditions. Cases are mutually exclusive.
    /// The first one with a matching condition is selected, all the rest ignored.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ConditionalCases {
        /// A list of cascading if-else conditions.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub cases: std::vec::Vec<crate::model::fulfillment::conditional_cases::Case>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ConditionalCases {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [cases][crate::model::fulfillment::ConditionalCases::cases].
        pub fn set_cases<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::fulfillment::conditional_cases::Case>,
        {
            use std::iter::Iterator;
            self.cases = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for ConditionalCases {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Fulfillment.ConditionalCases"
        }
    }

    /// Defines additional types related to [ConditionalCases].
    pub mod conditional_cases {
        #[allow(unused_imports)]
        use super::*;

        /// Each case has a Boolean condition. When it is evaluated to be True, the
        /// corresponding messages will be selected and evaluated recursively.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Case {
            /// The condition to activate and select this case. Empty means the
            /// condition is always true. The condition is evaluated against [form
            /// parameters][Form.parameters] or [session
            /// parameters][SessionInfo.parameters].
            ///
            /// See the [conditions
            /// reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
            ///
            /// [Form.parameters]: crate::model::Form::parameters
            /// [SessionInfo.parameters]: crate::model::SessionInfo::parameters
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub condition: std::string::String,

            /// A list of case content.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub case_content:
                std::vec::Vec<crate::model::fulfillment::conditional_cases::case::CaseContent>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl Case {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [condition][crate::model::fulfillment::conditional_cases::Case::condition].
            pub fn set_condition<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.condition = v.into();
                self
            }

            /// Sets the value of [case_content][crate::model::fulfillment::conditional_cases::Case::case_content].
            pub fn set_case_content<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<
                        crate::model::fulfillment::conditional_cases::case::CaseContent,
                    >,
            {
                use std::iter::Iterator;
                self.case_content = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for Case {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.cx.v3.Fulfillment.ConditionalCases.Case"
            }
        }

        /// Defines additional types related to [Case].
        pub mod case {
            #[allow(unused_imports)]
            use super::*;

            /// The list of messages or conditional cases to activate for this case.
            #[serde_with::serde_as]
            #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(default, rename_all = "camelCase")]
            #[non_exhaustive]
            pub struct CaseContent {

                /// Either a message is returned or additional cases to be evaluated.
                #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
                pub cases_or_message: std::option::Option<crate::model::fulfillment::conditional_cases::case::case_content::CasesOrMessage>,

                #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
                _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
            }

            impl CaseContent {
                pub fn new() -> Self {
                    std::default::Default::default()
                }

                /// Sets the value of [cases_or_message][crate::model::fulfillment::conditional_cases::case::CaseContent::cases_or_message].
                ///
                /// Note that all the setters affecting `cases_or_message` are mutually
                /// exclusive.
                pub fn set_cases_or_message<T: std::convert::Into<std::option::Option<crate::model::fulfillment::conditional_cases::case::case_content::CasesOrMessage>>>(mut self, v: T) -> Self
                {
                    self.cases_or_message = v.into();
                    self
                }

                /// The value of [cases_or_message][crate::model::fulfillment::conditional_cases::case::CaseContent::cases_or_message]
                /// if it holds a `Message`, `None` if the field is not set or
                /// holds a different branch.
                pub fn message(
                    &self,
                ) -> std::option::Option<&std::boxed::Box<crate::model::ResponseMessage>>
                {
                    #[allow(unreachable_patterns)]
                    self.cases_or_message.as_ref().and_then(|v| match v {
                        crate::model::fulfillment::conditional_cases::case::case_content::CasesOrMessage::Message(v) => std::option::Option::Some(v),
                        _ => std::option::Option::None,
                    })
                }

                /// The value of [cases_or_message][crate::model::fulfillment::conditional_cases::case::CaseContent::cases_or_message]
                /// if it holds a `AdditionalCases`, `None` if the field is not set or
                /// holds a different branch.
                pub fn additional_cases(
                    &self,
                ) -> std::option::Option<
                    &std::boxed::Box<crate::model::fulfillment::ConditionalCases>,
                > {
                    #[allow(unreachable_patterns)]
                    self.cases_or_message.as_ref().and_then(|v| match v {
                        crate::model::fulfillment::conditional_cases::case::case_content::CasesOrMessage::AdditionalCases(v) => std::option::Option::Some(v),
                        _ => std::option::Option::None,
                    })
                }

                /// Sets the value of [cases_or_message][crate::model::fulfillment::conditional_cases::case::CaseContent::cases_or_message]
                /// to hold a `Message`.
                ///
                /// Note that all the setters affecting `cases_or_message` are
                /// mutually exclusive.
                pub fn set_message<
                    T: std::convert::Into<std::boxed::Box<crate::model::ResponseMessage>>,
                >(
                    mut self,
                    v: T,
                ) -> Self {
                    self.cases_or_message = std::option::Option::Some(
                        crate::model::fulfillment::conditional_cases::case::case_content::CasesOrMessage::Message(
                            v.into()
                        )
                    );
                    self
                }

                /// Sets the value of [cases_or_message][crate::model::fulfillment::conditional_cases::case::CaseContent::cases_or_message]
                /// to hold a `AdditionalCases`.
                ///
                /// Note that all the setters affecting `cases_or_message` are
                /// mutually exclusive.
                pub fn set_additional_cases<
                    T: std::convert::Into<
                            std::boxed::Box<crate::model::fulfillment::ConditionalCases>,
                        >,
                >(
                    mut self,
                    v: T,
                ) -> Self {
                    self.cases_or_message = std::option::Option::Some(
                        crate::model::fulfillment::conditional_cases::case::case_content::CasesOrMessage::AdditionalCases(
                            v.into()
                        )
                    );
                    self
                }
            }

            impl wkt::message::Message for CaseContent {
                fn typename() -> &'static str {
                    "type.googleapis.com/google.cloud.dialogflow.cx.v3.Fulfillment.ConditionalCases.Case.CaseContent"
                }
            }

            /// Defines additional types related to [CaseContent].
            pub mod case_content {
                #[allow(unused_imports)]
                use super::*;

                /// Either a message is returned or additional cases to be evaluated.
                #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
                #[serde(rename_all = "camelCase")]
                #[non_exhaustive]
                pub enum CasesOrMessage {
                    /// Returned message.
                    Message(std::boxed::Box<crate::model::ResponseMessage>),
                    /// Additional cases to be evaluated.
                    AdditionalCases(std::boxed::Box<crate::model::fulfillment::ConditionalCases>),
                }
            }
        }
    }
}

/// Google Cloud Storage location for a Dialogflow operation that writes or
/// exports objects (e.g. exported agent or transcripts) outside of Dialogflow.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GcsDestination {
    /// Required. The Google Cloud Storage URI for the exported objects. A URI is
    /// of the form: `gs://bucket/object-name-or-prefix` Whether a full object
    /// name, or just a prefix, its usage depends on the Dialogflow operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GcsDestination {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [uri][crate::model::GcsDestination::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }
}

impl wkt::message::Message for GcsDestination {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GcsDestination"
    }
}

/// Settings for Generative AI.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GenerativeSettings {
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/generativeSettings`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Settings for Generative Fallback.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub fallback_settings: std::option::Option<crate::model::generative_settings::FallbackSettings>,

    /// Settings for Generative Safety.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub generative_safety_settings: std::option::Option<crate::model::SafetySettings>,

    /// Settings for knowledge connector.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub knowledge_connector_settings:
        std::option::Option<crate::model::generative_settings::KnowledgeConnectorSettings>,

    /// Language for this settings.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GenerativeSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GenerativeSettings::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [fallback_settings][crate::model::GenerativeSettings::fallback_settings].
    pub fn set_fallback_settings<
        T: std::convert::Into<
                std::option::Option<crate::model::generative_settings::FallbackSettings>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.fallback_settings = v.into();
        self
    }

    /// Sets the value of [generative_safety_settings][crate::model::GenerativeSettings::generative_safety_settings].
    pub fn set_generative_safety_settings<
        T: std::convert::Into<std::option::Option<crate::model::SafetySettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.generative_safety_settings = v.into();
        self
    }

    /// Sets the value of [knowledge_connector_settings][crate::model::GenerativeSettings::knowledge_connector_settings].
    pub fn set_knowledge_connector_settings<
        T: std::convert::Into<
                std::option::Option<crate::model::generative_settings::KnowledgeConnectorSettings>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.knowledge_connector_settings = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::GenerativeSettings::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for GenerativeSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GenerativeSettings"
    }
}

/// Defines additional types related to [GenerativeSettings].
pub mod generative_settings {
    #[allow(unused_imports)]
    use super::*;

    /// Settings for Generative Fallback.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct FallbackSettings {
        /// Display name of the selected prompt.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub selected_prompt: std::string::String,

        /// Stored prompts that can be selected, for example default templates like
        /// "conservative" or "chatty", or user defined ones.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub prompt_templates:
            std::vec::Vec<crate::model::generative_settings::fallback_settings::PromptTemplate>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl FallbackSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [selected_prompt][crate::model::generative_settings::FallbackSettings::selected_prompt].
        pub fn set_selected_prompt<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.selected_prompt = v.into();
            self
        }

        /// Sets the value of [prompt_templates][crate::model::generative_settings::FallbackSettings::prompt_templates].
        pub fn set_prompt_templates<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<
                    crate::model::generative_settings::fallback_settings::PromptTemplate,
                >,
        {
            use std::iter::Iterator;
            self.prompt_templates = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for FallbackSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.GenerativeSettings.FallbackSettings"
        }
    }

    /// Defines additional types related to [FallbackSettings].
    pub mod fallback_settings {
        #[allow(unused_imports)]
        use super::*;

        /// Prompt template.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct PromptTemplate {
            /// Prompt name.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub display_name: std::string::String,

            /// Prompt text that is sent to a LLM on no-match default, placeholders are
            /// filled downstream. For example: "Here is a conversation $conversation,
            /// a response is: "
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub prompt_text: std::string::String,

            /// If the flag is true, the prompt is frozen and cannot be modified by
            /// users.
            #[serde(skip_serializing_if = "wkt::internal::is_default")]
            pub frozen: bool,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl PromptTemplate {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [display_name][crate::model::generative_settings::fallback_settings::PromptTemplate::display_name].
            pub fn set_display_name<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.display_name = v.into();
                self
            }

            /// Sets the value of [prompt_text][crate::model::generative_settings::fallback_settings::PromptTemplate::prompt_text].
            pub fn set_prompt_text<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.prompt_text = v.into();
                self
            }

            /// Sets the value of [frozen][crate::model::generative_settings::fallback_settings::PromptTemplate::frozen].
            pub fn set_frozen<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
                self.frozen = v.into();
                self
            }
        }

        impl wkt::message::Message for PromptTemplate {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.cx.v3.GenerativeSettings.FallbackSettings.PromptTemplate"
            }
        }
    }

    /// Settings for knowledge connector. These parameters are used for LLM prompt
    /// like "You are \<agent\>. You are a helpful and verbose <agent_identity> at
    /// \<business\>, <business_description>. Your task is to help humans on
    /// <agent_scope>".
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct KnowledgeConnectorSettings {
        /// Name of the company, organization or other entity that the agent
        /// represents. Used for knowledge connector LLM prompt and for knowledge
        /// search.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub business: std::string::String,

        /// Name of the virtual agent. Used for LLM prompt. Can be left empty.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub agent: std::string::String,

        /// Identity of the agent, e.g. "virtual agent", "AI assistant".
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub agent_identity: std::string::String,

        /// Company description, used for LLM prompt, e.g. "a family company selling
        /// freshly roasted coffee beans".
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub business_description: std::string::String,

        /// Agent scope, e.g. "Example company website", "internal Example
        /// company website for employees", "manual of car owner".
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub agent_scope: std::string::String,

        /// Whether to disable fallback to Data Store search results (in case the LLM
        /// couldn't pick a proper answer). Per default the feature is enabled.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub disable_data_store_fallback: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl KnowledgeConnectorSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [business][crate::model::generative_settings::KnowledgeConnectorSettings::business].
        pub fn set_business<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.business = v.into();
            self
        }

        /// Sets the value of [agent][crate::model::generative_settings::KnowledgeConnectorSettings::agent].
        pub fn set_agent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.agent = v.into();
            self
        }

        /// Sets the value of [agent_identity][crate::model::generative_settings::KnowledgeConnectorSettings::agent_identity].
        pub fn set_agent_identity<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.agent_identity = v.into();
            self
        }

        /// Sets the value of [business_description][crate::model::generative_settings::KnowledgeConnectorSettings::business_description].
        pub fn set_business_description<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.business_description = v.into();
            self
        }

        /// Sets the value of [agent_scope][crate::model::generative_settings::KnowledgeConnectorSettings::agent_scope].
        pub fn set_agent_scope<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.agent_scope = v.into();
            self
        }

        /// Sets the value of [disable_data_store_fallback][crate::model::generative_settings::KnowledgeConnectorSettings::disable_data_store_fallback].
        pub fn set_disable_data_store_fallback<T: std::convert::Into<bool>>(
            mut self,
            v: T,
        ) -> Self {
            self.disable_data_store_fallback = v.into();
            self
        }
    }

    impl wkt::message::Message for KnowledgeConnectorSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.GenerativeSettings.KnowledgeConnectorSettings"
        }
    }
}

/// Generators contain prompt to be sent to the LLM model to generate text. The
/// prompt can contain parameters which will be resolved before calling the
/// model. It can optionally contain banned phrases to ensure the model responses
/// are safe.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Generator {
    /// The unique identifier of the generator.
    /// Must be set for the
    /// [Generators.UpdateGenerator][google.cloud.dialogflow.cx.v3.Generators.UpdateGenerator]
    /// method. [Generators.CreateGenerate][] populates the name automatically.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/generators/<GeneratorID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Generators.UpdateGenerator]: crate::client::Generators::update_generator
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The human-readable name of the generator, unique within the
    /// agent. The prompt contains pre-defined parameters such as $conversation,
    /// $last-user-utterance, etc. populated by Dialogflow. It can also contain
    /// custom placeholders which will be resolved during fulfillment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Required. Prompt for the LLM model.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub prompt_text: std::option::Option<crate::model::Phrase>,

    /// Optional. List of custom placeholders in the prompt text.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub placeholders: std::vec::Vec<crate::model::generator::Placeholder>,

    /// Parameters passed to the LLM to configure its behavior.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub model_parameter: std::option::Option<crate::model::generator::ModelParameter>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Generator {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Generator::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Generator::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [prompt_text][crate::model::Generator::prompt_text].
    pub fn set_prompt_text<T: std::convert::Into<std::option::Option<crate::model::Phrase>>>(
        mut self,
        v: T,
    ) -> Self {
        self.prompt_text = v.into();
        self
    }

    /// Sets the value of [model_parameter][crate::model::Generator::model_parameter].
    pub fn set_model_parameter<
        T: std::convert::Into<std::option::Option<crate::model::generator::ModelParameter>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.model_parameter = v.into();
        self
    }

    /// Sets the value of [placeholders][crate::model::Generator::placeholders].
    pub fn set_placeholders<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::generator::Placeholder>,
    {
        use std::iter::Iterator;
        self.placeholders = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Generator {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.Generator"
    }
}

/// Defines additional types related to [Generator].
pub mod generator {
    #[allow(unused_imports)]
    use super::*;

    /// Represents a custom placeholder in the prompt text.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Placeholder {
        /// Unique ID used to map custom placeholder to parameters in fulfillment.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub id: std::string::String,

        /// Custom placeholder value in the prompt text.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Placeholder {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [id][crate::model::generator::Placeholder::id].
        pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.id = v.into();
            self
        }

        /// Sets the value of [name][crate::model::generator::Placeholder::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }
    }

    impl wkt::message::Message for Placeholder {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Generator.Placeholder"
        }
    }

    /// Parameters to be passed to the LLM. If not set, default values will be
    /// used.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ModelParameter {
        /// The temperature used for sampling. Temperature sampling occurs after both
        /// topP and topK have been applied.
        /// Valid range: [0.0, 1.0]
        /// Low temperature = less random. High temperature = more random.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub temperature: std::option::Option<f32>,

        /// The maximum number of tokens to generate.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub max_decode_steps: std::option::Option<i32>,

        /// If set, only the tokens comprising the top top_p probability mass are
        /// considered. If both top_p and top_k are
        /// set, top_p will be used for further refining candidates selected with
        /// top_k.
        /// Valid range: (0.0, 1.0].
        /// Small topP = less random. Large topP = more random.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub top_p: std::option::Option<f32>,

        /// If set, the sampling process in each step is limited to the top_k tokens
        /// with highest probabilities.
        /// Valid range: [1, 40] or 1000+.
        /// Small topK = less random. Large topK = more random.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub top_k: std::option::Option<i32>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ModelParameter {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [temperature][crate::model::generator::ModelParameter::temperature].
        pub fn set_temperature<T: std::convert::Into<std::option::Option<f32>>>(
            mut self,
            v: T,
        ) -> Self {
            self.temperature = v.into();
            self
        }

        /// Sets the value of [max_decode_steps][crate::model::generator::ModelParameter::max_decode_steps].
        pub fn set_max_decode_steps<T: std::convert::Into<std::option::Option<i32>>>(
            mut self,
            v: T,
        ) -> Self {
            self.max_decode_steps = v.into();
            self
        }

        /// Sets the value of [top_p][crate::model::generator::ModelParameter::top_p].
        pub fn set_top_p<T: std::convert::Into<std::option::Option<f32>>>(mut self, v: T) -> Self {
            self.top_p = v.into();
            self
        }

        /// Sets the value of [top_k][crate::model::generator::ModelParameter::top_k].
        pub fn set_top_k<T: std::convert::Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
            self.top_k = v.into();
            self
        }
    }

    impl wkt::message::Message for ModelParameter {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Generator.ModelParameter"
        }
    }
}

/// Text input which can be used for prompt or banned phrases.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Phrase {
    /// Required. Text input which can be used for prompt or banned phrases.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub text: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Phrase {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [text][crate::model::Phrase::text].
    pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.text = v.into();
        self
    }
}

impl wkt::message::Message for Phrase {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.Phrase"
    }
}

/// The request message for
/// [Generators.ListGenerators][google.cloud.dialogflow.cx.v3.Generators.ListGenerators].
///
/// [google.cloud.dialogflow.cx.v3.Generators.ListGenerators]: crate::client::Generators::list_generators
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListGeneratorsRequest {
    /// Required. The agent to list all generators for.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The language to list generators for.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// The maximum number of items to return in a single page. By default 100 and
    /// at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListGeneratorsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListGeneratorsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::ListGeneratorsRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListGeneratorsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListGeneratorsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListGeneratorsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListGeneratorsRequest"
    }
}

/// The response message for
/// [Generators.ListGenerators][google.cloud.dialogflow.cx.v3.Generators.ListGenerators].
///
/// [google.cloud.dialogflow.cx.v3.Generators.ListGenerators]: crate::client::Generators::list_generators
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListGeneratorsResponse {
    /// The list of generators. There will be a maximum number of items returned
    /// based on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub generators: std::vec::Vec<crate::model::Generator>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListGeneratorsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListGeneratorsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [generators][crate::model::ListGeneratorsResponse::generators].
    pub fn set_generators<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Generator>,
    {
        use std::iter::Iterator;
        self.generators = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListGeneratorsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListGeneratorsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListGeneratorsResponse {
    type PageItem = crate::model::Generator;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.generators
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Generators.GetGenerator][google.cloud.dialogflow.cx.v3.Generators.GetGenerator].
///
/// [google.cloud.dialogflow.cx.v3.Generators.GetGenerator]: crate::client::Generators::get_generator
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetGeneratorRequest {
    /// Required. The name of the generator.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/generators/<GeneratorID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The language to list generators for.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetGeneratorRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetGeneratorRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::GetGeneratorRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for GetGeneratorRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetGeneratorRequest"
    }
}

/// The request message for
/// [Generators.CreateGenerator][google.cloud.dialogflow.cx.v3.Generators.CreateGenerator].
///
/// [google.cloud.dialogflow.cx.v3.Generators.CreateGenerator]: crate::client::Generators::create_generator
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateGeneratorRequest {
    /// Required. The agent to create a generator for.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The generator to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub generator: std::option::Option<crate::model::Generator>,

    /// The language to create generators for the following fields:
    ///
    /// * `Generator.prompt_text.text`
    ///   If not specified, the agent's default language is used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateGeneratorRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateGeneratorRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [generator][crate::model::CreateGeneratorRequest::generator].
    pub fn set_generator<T: std::convert::Into<std::option::Option<crate::model::Generator>>>(
        mut self,
        v: T,
    ) -> Self {
        self.generator = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::CreateGeneratorRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for CreateGeneratorRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CreateGeneratorRequest"
    }
}

/// The request message for
/// [Generators.UpdateGenerator][google.cloud.dialogflow.cx.v3.Generators.UpdateGenerator].
///
/// [google.cloud.dialogflow.cx.v3.Generators.UpdateGenerator]: crate::client::Generators::update_generator
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateGeneratorRequest {
    /// Required. The generator to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub generator: std::option::Option<crate::model::Generator>,

    /// The language to list generators for.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// The mask to control which fields get updated. If the mask is not present,
    /// all fields will be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateGeneratorRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [generator][crate::model::UpdateGeneratorRequest::generator].
    pub fn set_generator<T: std::convert::Into<std::option::Option<crate::model::Generator>>>(
        mut self,
        v: T,
    ) -> Self {
        self.generator = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::UpdateGeneratorRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateGeneratorRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateGeneratorRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.UpdateGeneratorRequest"
    }
}

/// The request message for
/// [Generators.DeleteGenerator][google.cloud.dialogflow.cx.v3.Generators.DeleteGenerator].
///
/// [google.cloud.dialogflow.cx.v3.Generators.DeleteGenerator]: crate::client::Generators::delete_generator
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteGeneratorRequest {
    /// Required. The name of the generator to delete.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/generators/<GeneratorID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// This field has no effect for generators not being used.
    /// For generators that are used by pages/flows/transition route groups:
    ///
    /// * If `force` is set to false, an error will be returned with message
    ///   indicating the referenced resources.
    /// * If `force` is set to true, Dialogflow will remove the generator, as well
    ///   as any references to the generator (i.e.
    ///   [Generator][Fulfillment.generator]) in fulfillments.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub force: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteGeneratorRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteGeneratorRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [force][crate::model::DeleteGeneratorRequest::force].
    pub fn set_force<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.force = v.into();
        self
    }
}

impl wkt::message::Message for DeleteGeneratorRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DeleteGeneratorRequest"
    }
}

/// Inline destination for a Dialogflow operation that writes or exports objects
/// (e.g. [intents][google.cloud.dialogflow.cx.v3.Intent]) outside of Dialogflow.
///
/// [google.cloud.dialogflow.cx.v3.Intent]: crate::model::Intent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InlineDestination {
    /// Output only. The uncompressed byte content for the objects.
    /// Only populated in responses.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub content: ::bytes::Bytes,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl InlineDestination {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [content][crate::model::InlineDestination::content].
    pub fn set_content<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.content = v.into();
        self
    }
}

impl wkt::message::Message for InlineDestination {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.InlineDestination"
    }
}

/// Inline source for a Dialogflow operation that reads or imports objects
/// (e.g. [intents][google.cloud.dialogflow.cx.v3.Intent]) into Dialogflow.
///
/// [google.cloud.dialogflow.cx.v3.Intent]: crate::model::Intent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InlineSource {
    /// The uncompressed byte content for the objects.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub content: ::bytes::Bytes,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl InlineSource {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [content][crate::model::InlineSource::content].
    pub fn set_content<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.content = v.into();
        self
    }
}

impl wkt::message::Message for InlineSource {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.InlineSource"
    }
}

/// An intent represents a user's intent to interact with a conversational agent.
///
/// You can provide information for the Dialogflow API to use to match user input
/// to an intent by adding training phrases (i.e., examples of user input) to
/// your intent.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Intent {
    /// The unique identifier of the intent.
    /// Required for the
    /// [Intents.UpdateIntent][google.cloud.dialogflow.cx.v3.Intents.UpdateIntent]
    /// method.
    /// [Intents.CreateIntent][google.cloud.dialogflow.cx.v3.Intents.CreateIntent]
    /// populates the name automatically.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/intents/<IntentID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Intents.CreateIntent]: crate::client::Intents::create_intent
    /// [google.cloud.dialogflow.cx.v3.Intents.UpdateIntent]: crate::client::Intents::update_intent
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The human-readable name of the intent, unique within the agent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// The collection of training phrases the agent is trained on to identify the
    /// intent.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub training_phrases: std::vec::Vec<crate::model::intent::TrainingPhrase>,

    /// The collection of parameters associated with the intent.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub parameters: std::vec::Vec<crate::model::intent::Parameter>,

    /// The priority of this intent. Higher numbers represent higher
    /// priorities.
    ///
    /// - If the supplied value is unspecified or 0, the service
    ///   translates the value to 500,000, which corresponds to the
    ///   `Normal` priority in the console.
    /// - If the supplied value is negative, the intent is ignored
    ///   in runtime detect intent requests.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub priority: i32,

    /// Indicates whether this is a fallback intent. Currently only default
    /// fallback intent is allowed in the agent, which is added upon agent
    /// creation.
    /// Adding training phrases to fallback intent is useful in the case of
    /// requests that are mistakenly matched, since training phrases assigned to
    /// fallback intents act as negative examples that triggers no-match event.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub is_fallback: bool,

    /// The key/value metadata to label an intent. Labels can contain
    /// lowercase letters, digits and the symbols '-' and '_'. International
    /// characters are allowed, including letters from unicase alphabets. Keys must
    /// start with a letter. Keys and values can be no longer than 63 characters
    /// and no more than 128 bytes.
    ///
    /// Prefix "sys-" is reserved for Dialogflow defined labels. Currently allowed
    /// Dialogflow defined labels include:
    ///
    /// * sys-head
    /// * sys-contextual
    ///   The above labels do not require value. "sys-head" means the intent is a
    ///   head intent. "sys.contextual" means the intent is a contextual intent.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Human readable description for better understanding an intent like its
    /// scope, content, result etc. Maximum character limit: 140 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Intent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Intent::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Intent::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [priority][crate::model::Intent::priority].
    pub fn set_priority<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.priority = v.into();
        self
    }

    /// Sets the value of [is_fallback][crate::model::Intent::is_fallback].
    pub fn set_is_fallback<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.is_fallback = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Intent::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [training_phrases][crate::model::Intent::training_phrases].
    pub fn set_training_phrases<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::intent::TrainingPhrase>,
    {
        use std::iter::Iterator;
        self.training_phrases = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [parameters][crate::model::Intent::parameters].
    pub fn set_parameters<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::intent::Parameter>,
    {
        use std::iter::Iterator;
        self.parameters = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::Intent::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Intent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.Intent"
    }
}

/// Defines additional types related to [Intent].
pub mod intent {
    #[allow(unused_imports)]
    use super::*;

    /// Represents an example that the agent is trained on to identify the intent.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct TrainingPhrase {
        /// Output only. The unique identifier of the training phrase.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub id: std::string::String,

        /// Required. The ordered list of training phrase parts.
        /// The parts are concatenated in order to form the training phrase.
        ///
        /// Note: The API does not automatically annotate training phrases like the
        /// Dialogflow Console does.
        ///
        /// Note: Do not forget to include whitespace at part boundaries, so the
        /// training phrase is well formatted when the parts are concatenated.
        ///
        /// If the training phrase does not need to be annotated with parameters,
        /// you just need a single part with only the
        /// [Part.text][google.cloud.dialogflow.cx.v3.Intent.TrainingPhrase.Part.text]
        /// field set.
        ///
        /// If you want to annotate the training phrase, you must create multiple
        /// parts, where the fields of each part are populated in one of two ways:
        ///
        /// - `Part.text` is set to a part of the phrase that has no parameters.
        /// - `Part.text` is set to a part of the phrase that you want to annotate,
        ///   and the `parameter_id` field is set.
        ///
        /// [google.cloud.dialogflow.cx.v3.Intent.TrainingPhrase.Part.text]: crate::model::intent::training_phrase::Part::text
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub parts: std::vec::Vec<crate::model::intent::training_phrase::Part>,

        /// Indicates how many times this example was added to the intent.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub repeat_count: i32,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl TrainingPhrase {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [id][crate::model::intent::TrainingPhrase::id].
        pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.id = v.into();
            self
        }

        /// Sets the value of [repeat_count][crate::model::intent::TrainingPhrase::repeat_count].
        pub fn set_repeat_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.repeat_count = v.into();
            self
        }

        /// Sets the value of [parts][crate::model::intent::TrainingPhrase::parts].
        pub fn set_parts<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::intent::training_phrase::Part>,
        {
            use std::iter::Iterator;
            self.parts = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for TrainingPhrase {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Intent.TrainingPhrase"
        }
    }

    /// Defines additional types related to [TrainingPhrase].
    pub mod training_phrase {
        #[allow(unused_imports)]
        use super::*;

        /// Represents a part of a training phrase.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Part {
            /// Required. The text for this part.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub text: std::string::String,

            /// The [parameter][google.cloud.dialogflow.cx.v3.Intent.Parameter] used to
            /// annotate this part of the training phrase. This field is required for
            /// annotated parts of the training phrase.
            ///
            /// [google.cloud.dialogflow.cx.v3.Intent.Parameter]: crate::model::intent::Parameter
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub parameter_id: std::string::String,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl Part {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [text][crate::model::intent::training_phrase::Part::text].
            pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.text = v.into();
                self
            }

            /// Sets the value of [parameter_id][crate::model::intent::training_phrase::Part::parameter_id].
            pub fn set_parameter_id<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.parameter_id = v.into();
                self
            }
        }

        impl wkt::message::Message for Part {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.cx.v3.Intent.TrainingPhrase.Part"
            }
        }
    }

    /// Represents an intent parameter.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Parameter {
        /// Required. The unique identifier of the parameter. This field
        /// is used by [training
        /// phrases][google.cloud.dialogflow.cx.v3.Intent.TrainingPhrase] to annotate
        /// their [parts][google.cloud.dialogflow.cx.v3.Intent.TrainingPhrase.Part].
        ///
        /// [google.cloud.dialogflow.cx.v3.Intent.TrainingPhrase]: crate::model::intent::TrainingPhrase
        /// [google.cloud.dialogflow.cx.v3.Intent.TrainingPhrase.Part]: crate::model::intent::training_phrase::Part
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub id: std::string::String,

        /// Required. The entity type of the parameter.
        /// Format:
        /// `projects/-/locations/-/agents/-/entityTypes/<SystemEntityTypeID>` for
        /// system entity types (for example,
        /// `projects/-/locations/-/agents/-/entityTypes/sys.date`), or
        /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/entityTypes/<EntityTypeID>`
        /// for developer entity types.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub entity_type: std::string::String,

        /// Indicates whether the parameter represents a list of values.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub is_list: bool,

        /// Indicates whether the parameter content should be redacted in log. If
        /// redaction is enabled, the parameter content will be replaced by parameter
        /// name during logging.
        /// Note: the parameter content is subject to redaction if either parameter
        /// level redaction or [entity type level
        /// redaction][google.cloud.dialogflow.cx.v3.EntityType.redact] is enabled.
        ///
        /// [google.cloud.dialogflow.cx.v3.EntityType.redact]: crate::model::EntityType::redact
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub redact: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Parameter {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [id][crate::model::intent::Parameter::id].
        pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.id = v.into();
            self
        }

        /// Sets the value of [entity_type][crate::model::intent::Parameter::entity_type].
        pub fn set_entity_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.entity_type = v.into();
            self
        }

        /// Sets the value of [is_list][crate::model::intent::Parameter::is_list].
        pub fn set_is_list<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.is_list = v.into();
            self
        }

        /// Sets the value of [redact][crate::model::intent::Parameter::redact].
        pub fn set_redact<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.redact = v.into();
            self
        }
    }

    impl wkt::message::Message for Parameter {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Intent.Parameter"
        }
    }
}

/// The request message for
/// [Intents.ListIntents][google.cloud.dialogflow.cx.v3.Intents.ListIntents].
///
/// [google.cloud.dialogflow.cx.v3.Intents.ListIntents]: crate::client::Intents::list_intents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListIntentsRequest {
    /// Required. The agent to list all intents for.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The language to list intents for. The following fields are language
    /// dependent:
    ///
    /// * `Intent.training_phrases.parts.text`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// The resource view to apply to the returned intent.
    pub intent_view: crate::model::IntentView,

    /// The maximum number of items to return in a single page. By default 100 and
    /// at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListIntentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListIntentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::ListIntentsRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [intent_view][crate::model::ListIntentsRequest::intent_view].
    pub fn set_intent_view<T: std::convert::Into<crate::model::IntentView>>(
        mut self,
        v: T,
    ) -> Self {
        self.intent_view = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListIntentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListIntentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListIntentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListIntentsRequest"
    }
}

/// The response message for
/// [Intents.ListIntents][google.cloud.dialogflow.cx.v3.Intents.ListIntents].
///
/// [google.cloud.dialogflow.cx.v3.Intents.ListIntents]: crate::client::Intents::list_intents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListIntentsResponse {
    /// The list of intents. There will be a maximum number of items returned based
    /// on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub intents: std::vec::Vec<crate::model::Intent>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListIntentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListIntentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [intents][crate::model::ListIntentsResponse::intents].
    pub fn set_intents<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Intent>,
    {
        use std::iter::Iterator;
        self.intents = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListIntentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListIntentsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListIntentsResponse {
    type PageItem = crate::model::Intent;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.intents
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Intents.GetIntent][google.cloud.dialogflow.cx.v3.Intents.GetIntent].
///
/// [google.cloud.dialogflow.cx.v3.Intents.GetIntent]: crate::client::Intents::get_intent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetIntentRequest {
    /// Required. The name of the intent.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/intents/<IntentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The language to retrieve the intent for. The following fields are language
    /// dependent:
    ///
    /// * `Intent.training_phrases.parts.text`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetIntentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetIntentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::GetIntentRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for GetIntentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetIntentRequest"
    }
}

/// The request message for
/// [Intents.CreateIntent][google.cloud.dialogflow.cx.v3.Intents.CreateIntent].
///
/// [google.cloud.dialogflow.cx.v3.Intents.CreateIntent]: crate::client::Intents::create_intent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateIntentRequest {
    /// Required. The agent to create an intent for.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The intent to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub intent: std::option::Option<crate::model::Intent>,

    /// The language of the following fields in `intent`:
    ///
    /// * `Intent.training_phrases.parts.text`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateIntentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateIntentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [intent][crate::model::CreateIntentRequest::intent].
    pub fn set_intent<T: std::convert::Into<std::option::Option<crate::model::Intent>>>(
        mut self,
        v: T,
    ) -> Self {
        self.intent = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::CreateIntentRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for CreateIntentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CreateIntentRequest"
    }
}

/// The request message for
/// [Intents.UpdateIntent][google.cloud.dialogflow.cx.v3.Intents.UpdateIntent].
///
/// [google.cloud.dialogflow.cx.v3.Intents.UpdateIntent]: crate::client::Intents::update_intent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateIntentRequest {
    /// Required. The intent to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub intent: std::option::Option<crate::model::Intent>,

    /// The language of the following fields in `intent`:
    ///
    /// * `Intent.training_phrases.parts.text`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// The mask to control which fields get updated. If the mask is not present,
    /// all fields will be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateIntentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [intent][crate::model::UpdateIntentRequest::intent].
    pub fn set_intent<T: std::convert::Into<std::option::Option<crate::model::Intent>>>(
        mut self,
        v: T,
    ) -> Self {
        self.intent = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::UpdateIntentRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateIntentRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateIntentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.UpdateIntentRequest"
    }
}

/// The request message for
/// [Intents.DeleteIntent][google.cloud.dialogflow.cx.v3.Intents.DeleteIntent].
///
/// [google.cloud.dialogflow.cx.v3.Intents.DeleteIntent]: crate::client::Intents::delete_intent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteIntentRequest {
    /// Required. The name of the intent to delete.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/intents/<IntentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteIntentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteIntentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteIntentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DeleteIntentRequest"
    }
}

/// The request message for
/// [Intents.ImportIntents][google.cloud.dialogflow.cx.v3.Intents.ImportIntents].
///
/// [google.cloud.dialogflow.cx.v3.Intents.ImportIntents]: crate::client::Intents::import_intents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportIntentsRequest {
    /// Required. The agent to import the intents into.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Merge option for importing intents. If not specified, `REJECT` is assumed.
    pub merge_option: crate::model::import_intents_request::MergeOption,

    /// Required. The intents to import.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub intents: std::option::Option<crate::model::import_intents_request::Intents>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportIntentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ImportIntentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [merge_option][crate::model::ImportIntentsRequest::merge_option].
    pub fn set_merge_option<
        T: std::convert::Into<crate::model::import_intents_request::MergeOption>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.merge_option = v.into();
        self
    }

    /// Sets the value of [intents][crate::model::ImportIntentsRequest::intents].
    ///
    /// Note that all the setters affecting `intents` are mutually
    /// exclusive.
    pub fn set_intents<
        T: std::convert::Into<std::option::Option<crate::model::import_intents_request::Intents>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.intents = v.into();
        self
    }

    /// The value of [intents][crate::model::ImportIntentsRequest::intents]
    /// if it holds a `IntentsUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn intents_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.intents.as_ref().and_then(|v| match v {
            crate::model::import_intents_request::Intents::IntentsUri(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [intents][crate::model::ImportIntentsRequest::intents]
    /// if it holds a `IntentsContent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn intents_content(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::InlineSource>> {
        #[allow(unreachable_patterns)]
        self.intents.as_ref().and_then(|v| match v {
            crate::model::import_intents_request::Intents::IntentsContent(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [intents][crate::model::ImportIntentsRequest::intents]
    /// to hold a `IntentsUri`.
    ///
    /// Note that all the setters affecting `intents` are
    /// mutually exclusive.
    pub fn set_intents_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.intents = std::option::Option::Some(
            crate::model::import_intents_request::Intents::IntentsUri(v.into()),
        );
        self
    }

    /// Sets the value of [intents][crate::model::ImportIntentsRequest::intents]
    /// to hold a `IntentsContent`.
    ///
    /// Note that all the setters affecting `intents` are
    /// mutually exclusive.
    pub fn set_intents_content<
        T: std::convert::Into<std::boxed::Box<crate::model::InlineSource>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.intents = std::option::Option::Some(
            crate::model::import_intents_request::Intents::IntentsContent(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ImportIntentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ImportIntentsRequest"
    }
}

/// Defines additional types related to [ImportIntentsRequest].
pub mod import_intents_request {
    #[allow(unused_imports)]
    use super::*;

    /// Merge option when display name conflicts exist during import.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum MergeOption {
        /// Unspecified. Should not be used.
        Unspecified,
        /// DEPRECATED: Please use
        /// [REPORT_CONFLICT][ImportIntentsRequest.REPORT_CONFLICT] instead.
        /// Fail the request if there are intents whose display names conflict with
        /// the display names of intents in the agent.
        #[deprecated]
        Reject,
        /// Replace the original intent in the agent with the new intent when display
        /// name conflicts exist.
        Replace,
        /// Merge the original intent with the new intent when display name conflicts
        /// exist.
        Merge,
        /// Create new intents with new display names to differentiate them from the
        /// existing intents when display name conflicts exist.
        Rename,
        /// Report conflict information if display names conflict is detected.
        /// Otherwise, import intents.
        ReportConflict,
        /// Keep the original intent and discard the conflicting new intent when
        /// display name conflicts exist.
        Keep,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [MergeOption::value] or
        /// [MergeOption::name].
        UnknownValue(merge_option::UnknownValue),
    }

    #[doc(hidden)]
    pub mod merge_option {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl MergeOption {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Reject => std::option::Option::Some(1),
                Self::Replace => std::option::Option::Some(2),
                Self::Merge => std::option::Option::Some(3),
                Self::Rename => std::option::Option::Some(4),
                Self::ReportConflict => std::option::Option::Some(5),
                Self::Keep => std::option::Option::Some(6),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("MERGE_OPTION_UNSPECIFIED"),
                Self::Reject => std::option::Option::Some("REJECT"),
                Self::Replace => std::option::Option::Some("REPLACE"),
                Self::Merge => std::option::Option::Some("MERGE"),
                Self::Rename => std::option::Option::Some("RENAME"),
                Self::ReportConflict => std::option::Option::Some("REPORT_CONFLICT"),
                Self::Keep => std::option::Option::Some("KEEP"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for MergeOption {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for MergeOption {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for MergeOption {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Reject,
                2 => Self::Replace,
                3 => Self::Merge,
                4 => Self::Rename,
                5 => Self::ReportConflict,
                6 => Self::Keep,
                _ => Self::UnknownValue(merge_option::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for MergeOption {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "MERGE_OPTION_UNSPECIFIED" => Self::Unspecified,
                "REJECT" => Self::Reject,
                "REPLACE" => Self::Replace,
                "MERGE" => Self::Merge,
                "RENAME" => Self::Rename,
                "REPORT_CONFLICT" => Self::ReportConflict,
                "KEEP" => Self::Keep,
                _ => Self::UnknownValue(merge_option::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for MergeOption {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Reject => serializer.serialize_i32(1),
                Self::Replace => serializer.serialize_i32(2),
                Self::Merge => serializer.serialize_i32(3),
                Self::Rename => serializer.serialize_i32(4),
                Self::ReportConflict => serializer.serialize_i32(5),
                Self::Keep => serializer.serialize_i32(6),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for MergeOption {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<MergeOption>::new(
                ".google.cloud.dialogflow.cx.v3.ImportIntentsRequest.MergeOption",
            ))
        }
    }

    /// Required. The intents to import.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Intents {
        /// The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI
        /// to import intents from. The format of this URI must be
        /// `gs://<bucket-name>/<object-name>`.
        ///
        /// Dialogflow performs a read operation for the Cloud Storage object
        /// on the caller's behalf, so your request authentication must
        /// have read permissions for the object. For more information, see
        /// [Dialogflow access
        /// control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
        IntentsUri(std::string::String),
        /// Uncompressed byte content of intents.
        IntentsContent(std::boxed::Box<crate::model::InlineSource>),
    }
}

/// The response message for
/// [Intents.ImportIntents][google.cloud.dialogflow.cx.v3.Intents.ImportIntents].
///
/// [google.cloud.dialogflow.cx.v3.Intents.ImportIntents]: crate::client::Intents::import_intents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportIntentsResponse {
    /// The unique identifier of the imported intents.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/intents/<IntentID>`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub intents: std::vec::Vec<std::string::String>,

    /// Info which resources have conflicts when
    /// [REPORT_CONFLICT][ImportIntentsResponse.REPORT_CONFLICT] merge_option is
    /// set in ImportIntentsRequest.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub conflicting_resources:
        std::option::Option<crate::model::import_intents_response::ConflictingResources>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportIntentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conflicting_resources][crate::model::ImportIntentsResponse::conflicting_resources].
    pub fn set_conflicting_resources<
        T: std::convert::Into<
                std::option::Option<crate::model::import_intents_response::ConflictingResources>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.conflicting_resources = v.into();
        self
    }

    /// Sets the value of [intents][crate::model::ImportIntentsResponse::intents].
    pub fn set_intents<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.intents = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ImportIntentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ImportIntentsResponse"
    }
}

/// Defines additional types related to [ImportIntentsResponse].
pub mod import_intents_response {
    #[allow(unused_imports)]
    use super::*;

    /// Conflicting resources detected during the import process. Only filled when
    /// [REPORT_CONFLICT][ImportIntentsResponse.REPORT_CONFLICT] is set in the
    /// request and there are conflicts in the display names.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ConflictingResources {
        /// Display names of conflicting intents.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub intent_display_names: std::vec::Vec<std::string::String>,

        /// Display names of conflicting entities.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub entity_display_names: std::vec::Vec<std::string::String>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ConflictingResources {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [intent_display_names][crate::model::import_intents_response::ConflictingResources::intent_display_names].
        pub fn set_intent_display_names<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.intent_display_names = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [entity_display_names][crate::model::import_intents_response::ConflictingResources::entity_display_names].
        pub fn set_entity_display_names<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.entity_display_names = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for ConflictingResources {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.ImportIntentsResponse.ConflictingResources"
        }
    }
}

/// Metadata returned for the
/// [Intents.ImportIntents][google.cloud.dialogflow.cx.v3.Intents.ImportIntents]
/// long running operation.
///
/// [google.cloud.dialogflow.cx.v3.Intents.ImportIntents]: crate::client::Intents::import_intents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportIntentsMetadata {
    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportIntentsMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for ImportIntentsMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ImportIntentsMetadata"
    }
}

/// The request message for
/// [Intents.ExportIntents][google.cloud.dialogflow.cx.v3.Intents.ExportIntents].
///
/// [google.cloud.dialogflow.cx.v3.Intents.ExportIntents]: crate::client::Intents::export_intents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportIntentsRequest {
    /// Required. The name of the parent agent to export intents.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The name of the intents to export.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/intents/<IntentID>`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub intents: std::vec::Vec<std::string::String>,

    /// Optional. The data format of the exported intents. If not specified, `BLOB`
    /// is assumed.
    pub data_format: crate::model::export_intents_request::DataFormat,

    /// The destination to export.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub destination: std::option::Option<crate::model::export_intents_request::Destination>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExportIntentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ExportIntentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [data_format][crate::model::ExportIntentsRequest::data_format].
    pub fn set_data_format<
        T: std::convert::Into<crate::model::export_intents_request::DataFormat>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.data_format = v.into();
        self
    }

    /// Sets the value of [intents][crate::model::ExportIntentsRequest::intents].
    pub fn set_intents<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.intents = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [destination][crate::model::ExportIntentsRequest::destination].
    ///
    /// Note that all the setters affecting `destination` are mutually
    /// exclusive.
    pub fn set_destination<
        T: std::convert::Into<std::option::Option<crate::model::export_intents_request::Destination>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = v.into();
        self
    }

    /// The value of [destination][crate::model::ExportIntentsRequest::destination]
    /// if it holds a `IntentsUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn intents_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::export_intents_request::Destination::IntentsUri(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [destination][crate::model::ExportIntentsRequest::destination]
    /// if it holds a `IntentsContentInline`, `None` if the field is not set or
    /// holds a different branch.
    pub fn intents_content_inline(&self) -> std::option::Option<&bool> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::export_intents_request::Destination::IntentsContentInline(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [destination][crate::model::ExportIntentsRequest::destination]
    /// to hold a `IntentsUri`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_intents_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::export_intents_request::Destination::IntentsUri(v.into()),
        );
        self
    }

    /// Sets the value of [destination][crate::model::ExportIntentsRequest::destination]
    /// to hold a `IntentsContentInline`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_intents_content_inline<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::export_intents_request::Destination::IntentsContentInline(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ExportIntentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ExportIntentsRequest"
    }
}

/// Defines additional types related to [ExportIntentsRequest].
pub mod export_intents_request {
    #[allow(unused_imports)]
    use super::*;

    /// Data format of the exported intents.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum DataFormat {
        /// Unspecified format. Treated as `BLOB`.
        Unspecified,
        /// Intents will be exported as raw bytes.
        Blob,
        /// Intents will be exported in JSON format.
        Json,
        /// Intents will be exported in CSV format.
        Csv,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [DataFormat::value] or
        /// [DataFormat::name].
        UnknownValue(data_format::UnknownValue),
    }

    #[doc(hidden)]
    pub mod data_format {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl DataFormat {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Blob => std::option::Option::Some(1),
                Self::Json => std::option::Option::Some(2),
                Self::Csv => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("DATA_FORMAT_UNSPECIFIED"),
                Self::Blob => std::option::Option::Some("BLOB"),
                Self::Json => std::option::Option::Some("JSON"),
                Self::Csv => std::option::Option::Some("CSV"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for DataFormat {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for DataFormat {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for DataFormat {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Blob,
                2 => Self::Json,
                3 => Self::Csv,
                _ => Self::UnknownValue(data_format::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for DataFormat {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "DATA_FORMAT_UNSPECIFIED" => Self::Unspecified,
                "BLOB" => Self::Blob,
                "JSON" => Self::Json,
                "CSV" => Self::Csv,
                _ => Self::UnknownValue(data_format::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for DataFormat {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Blob => serializer.serialize_i32(1),
                Self::Json => serializer.serialize_i32(2),
                Self::Csv => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for DataFormat {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<DataFormat>::new(
                ".google.cloud.dialogflow.cx.v3.ExportIntentsRequest.DataFormat",
            ))
        }
    }

    /// The destination to export.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Destination {
        /// Optional. The [Google Cloud
        /// Storage](https://cloud.google.com/storage/docs/) URI to export the
        /// intents to. The format of this URI must be
        /// `gs://<bucket-name>/<object-name>`.
        ///
        /// Dialogflow performs a write operation for the Cloud Storage object
        /// on the caller's behalf, so your request authentication must
        /// have write permissions for the object. For more information, see
        /// [Dialogflow access
        /// control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
        IntentsUri(std::string::String),
        /// Optional. The option to return the serialized intents inline.
        IntentsContentInline(bool),
    }
}

/// The response message for
/// [Intents.ExportIntents][google.cloud.dialogflow.cx.v3.Intents.ExportIntents].
///
/// [google.cloud.dialogflow.cx.v3.Intents.ExportIntents]: crate::client::Intents::export_intents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportIntentsResponse {
    /// The exported intents.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub intents: std::option::Option<crate::model::export_intents_response::Intents>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExportIntentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [intents][crate::model::ExportIntentsResponse::intents].
    ///
    /// Note that all the setters affecting `intents` are mutually
    /// exclusive.
    pub fn set_intents<
        T: std::convert::Into<std::option::Option<crate::model::export_intents_response::Intents>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.intents = v.into();
        self
    }

    /// The value of [intents][crate::model::ExportIntentsResponse::intents]
    /// if it holds a `IntentsUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn intents_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.intents.as_ref().and_then(|v| match v {
            crate::model::export_intents_response::Intents::IntentsUri(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [intents][crate::model::ExportIntentsResponse::intents]
    /// if it holds a `IntentsContent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn intents_content(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::InlineDestination>> {
        #[allow(unreachable_patterns)]
        self.intents.as_ref().and_then(|v| match v {
            crate::model::export_intents_response::Intents::IntentsContent(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [intents][crate::model::ExportIntentsResponse::intents]
    /// to hold a `IntentsUri`.
    ///
    /// Note that all the setters affecting `intents` are
    /// mutually exclusive.
    pub fn set_intents_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.intents = std::option::Option::Some(
            crate::model::export_intents_response::Intents::IntentsUri(v.into()),
        );
        self
    }

    /// Sets the value of [intents][crate::model::ExportIntentsResponse::intents]
    /// to hold a `IntentsContent`.
    ///
    /// Note that all the setters affecting `intents` are
    /// mutually exclusive.
    pub fn set_intents_content<
        T: std::convert::Into<std::boxed::Box<crate::model::InlineDestination>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.intents = std::option::Option::Some(
            crate::model::export_intents_response::Intents::IntentsContent(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ExportIntentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ExportIntentsResponse"
    }
}

/// Defines additional types related to [ExportIntentsResponse].
pub mod export_intents_response {
    #[allow(unused_imports)]
    use super::*;

    /// The exported intents.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Intents {
        /// The URI to a file containing the exported intents. This field is
        /// populated only if `intents_uri` is specified in
        /// [ExportIntentsRequest][google.cloud.dialogflow.cx.v3.ExportIntentsRequest].
        ///
        /// [google.cloud.dialogflow.cx.v3.ExportIntentsRequest]: crate::model::ExportIntentsRequest
        IntentsUri(std::string::String),
        /// Uncompressed byte content for intents. This field is populated only if
        /// `intents_content_inline` is set to true in
        /// [ExportIntentsRequest][google.cloud.dialogflow.cx.v3.ExportIntentsRequest].
        ///
        /// [google.cloud.dialogflow.cx.v3.ExportIntentsRequest]: crate::model::ExportIntentsRequest
        IntentsContent(std::boxed::Box<crate::model::InlineDestination>),
    }
}

/// Metadata returned for the
/// [Intents.ExportIntents][google.cloud.dialogflow.cx.v3.Intents.ExportIntents]
/// long running operation.
///
/// [google.cloud.dialogflow.cx.v3.Intents.ExportIntents]: crate::client::Intents::export_intents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportIntentsMetadata {
    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExportIntentsMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for ExportIntentsMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ExportIntentsMetadata"
    }
}

/// A Dialogflow CX conversation (session) can be described and visualized as a
/// state machine. The states of a CX session are represented by pages.
///
/// For each flow, you define many pages, where your combined pages can handle a
/// complete conversation on the topics the flow is designed for. At any given
/// moment, exactly one page is the current page, the current page is considered
/// active, and the flow associated with that page is considered active. Every
/// flow has a special start page. When a flow initially becomes active, the
/// start page page becomes the current page. For each conversational turn, the
/// current page will either stay the same or transition to another page.
///
/// You configure each page to collect information from the end-user that is
/// relevant for the conversational state represented by the page.
///
/// For more information, see the
/// [Page guide](https://cloud.google.com/dialogflow/cx/docs/concept/page).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Page {
    /// The unique identifier of the page.
    /// Required for the
    /// [Pages.UpdatePage][google.cloud.dialogflow.cx.v3.Pages.UpdatePage] method.
    /// [Pages.CreatePage][google.cloud.dialogflow.cx.v3.Pages.CreatePage]
    /// populates the name automatically.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/pages/<PageID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Pages.CreatePage]: crate::client::Pages::create_page
    /// [google.cloud.dialogflow.cx.v3.Pages.UpdatePage]: crate::client::Pages::update_page
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The human-readable name of the page, unique within the flow.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// The description of the page. The maximum length is 500 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// The fulfillment to call when the session is entering the page.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub entry_fulfillment: std::option::Option<crate::model::Fulfillment>,

    /// The form associated with the page, used for collecting parameters
    /// relevant to the page.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub form: std::option::Option<crate::model::Form>,

    /// Ordered list of
    /// [`TransitionRouteGroups`][google.cloud.dialogflow.cx.v3.TransitionRouteGroup]
    /// added to the page. Transition route groups must be unique within a page. If
    /// the page links both flow-level transition route groups and agent-level
    /// transition route groups, the flow-level ones will have higher priority and
    /// will be put before the agent-level ones.
    ///
    /// * If multiple transition routes within a page scope refer to the same
    ///   intent, then the precedence order is: page's transition route -> page's
    ///   transition route group -> flow's transition routes.
    ///
    /// * If multiple transition route groups within a page contain the same
    ///   intent, then the first group in the ordered list takes precedence.
    ///
    ///
    /// Format:`projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/transitionRouteGroups/<TransitionRouteGroupID>`
    /// or
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/transitionRouteGroups/<TransitionRouteGroupID>`
    /// for agent-level groups.
    ///
    /// [google.cloud.dialogflow.cx.v3.TransitionRouteGroup]: crate::model::TransitionRouteGroup
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub transition_route_groups: std::vec::Vec<std::string::String>,

    /// A list of transitions for the transition rules of this page.
    /// They route the conversation to another page in the same flow, or another
    /// flow.
    ///
    /// When we are in a certain page, the TransitionRoutes are evaluated in the
    /// following order:
    ///
    /// * TransitionRoutes defined in the page with intent specified.
    /// * TransitionRoutes defined in the
    ///   [transition route
    ///   groups][google.cloud.dialogflow.cx.v3.Page.transition_route_groups]
    ///   with intent specified.
    /// * TransitionRoutes defined in flow with intent specified.
    /// * TransitionRoutes defined in the
    ///   [transition route
    ///   groups][google.cloud.dialogflow.cx.v3.Flow.transition_route_groups]
    ///   with intent specified.
    /// * TransitionRoutes defined in the page with only condition specified.
    /// * TransitionRoutes defined in the
    ///   [transition route
    ///   groups][google.cloud.dialogflow.cx.v3.Page.transition_route_groups]
    ///   with only condition specified.
    ///
    /// [google.cloud.dialogflow.cx.v3.Flow.transition_route_groups]: crate::model::Flow::transition_route_groups
    /// [google.cloud.dialogflow.cx.v3.Page.transition_route_groups]: crate::model::Page::transition_route_groups
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub transition_routes: std::vec::Vec<crate::model::TransitionRoute>,

    /// Handlers associated with the page to handle events such as webhook errors,
    /// no match or no input.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub event_handlers: std::vec::Vec<crate::model::EventHandler>,

    /// Hierarchical advanced settings for this page. The settings exposed at the
    /// lower level overrides the settings exposed at the higher level.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub advanced_settings: std::option::Option<crate::model::AdvancedSettings>,

    /// Optional. Knowledge connector configuration.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub knowledge_connector_settings: std::option::Option<crate::model::KnowledgeConnectorSettings>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Page {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Page::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Page::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Page::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [entry_fulfillment][crate::model::Page::entry_fulfillment].
    pub fn set_entry_fulfillment<
        T: std::convert::Into<std::option::Option<crate::model::Fulfillment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.entry_fulfillment = v.into();
        self
    }

    /// Sets the value of [form][crate::model::Page::form].
    pub fn set_form<T: std::convert::Into<std::option::Option<crate::model::Form>>>(
        mut self,
        v: T,
    ) -> Self {
        self.form = v.into();
        self
    }

    /// Sets the value of [advanced_settings][crate::model::Page::advanced_settings].
    pub fn set_advanced_settings<
        T: std::convert::Into<std::option::Option<crate::model::AdvancedSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.advanced_settings = v.into();
        self
    }

    /// Sets the value of [knowledge_connector_settings][crate::model::Page::knowledge_connector_settings].
    pub fn set_knowledge_connector_settings<
        T: std::convert::Into<std::option::Option<crate::model::KnowledgeConnectorSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.knowledge_connector_settings = v.into();
        self
    }

    /// Sets the value of [transition_route_groups][crate::model::Page::transition_route_groups].
    pub fn set_transition_route_groups<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.transition_route_groups = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [transition_routes][crate::model::Page::transition_routes].
    pub fn set_transition_routes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TransitionRoute>,
    {
        use std::iter::Iterator;
        self.transition_routes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [event_handlers][crate::model::Page::event_handlers].
    pub fn set_event_handlers<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EventHandler>,
    {
        use std::iter::Iterator;
        self.event_handlers = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Page {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.Page"
    }
}

/// A form is a data model that groups related parameters that can be collected
/// from the user. The process in which the agent prompts the user and collects
/// parameter values from the user is called form filling. A form can be added to
/// a [page][google.cloud.dialogflow.cx.v3.Page]. When form filling is done, the
/// filled parameters will be written to the
/// [session][google.cloud.dialogflow.cx.v3.SessionInfo.parameters].
///
/// [google.cloud.dialogflow.cx.v3.Page]: crate::model::Page
/// [google.cloud.dialogflow.cx.v3.SessionInfo.parameters]: crate::model::SessionInfo::parameters
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Form {
    /// Parameters to collect from the user.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub parameters: std::vec::Vec<crate::model::form::Parameter>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Form {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parameters][crate::model::Form::parameters].
    pub fn set_parameters<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::form::Parameter>,
    {
        use std::iter::Iterator;
        self.parameters = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Form {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.Form"
    }
}

/// Defines additional types related to [Form].
pub mod form {
    #[allow(unused_imports)]
    use super::*;

    /// Represents a form parameter.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Parameter {
        /// Required. The human-readable name of the parameter, unique within the
        /// form.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub display_name: std::string::String,

        /// Indicates whether the parameter is required. Optional parameters will not
        /// trigger prompts; however, they are filled if the user specifies them.
        /// Required parameters must be filled before form filling concludes.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub required: bool,

        /// Required. The entity type of the parameter.
        /// Format:
        /// `projects/-/locations/-/agents/-/entityTypes/<SystemEntityTypeID>` for
        /// system entity types (for example,
        /// `projects/-/locations/-/agents/-/entityTypes/sys.date`), or
        /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/entityTypes/<EntityTypeID>`
        /// for developer entity types.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub entity_type: std::string::String,

        /// Indicates whether the parameter represents a list of values.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub is_list: bool,

        /// Required. Defines fill behavior for the parameter.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub fill_behavior: std::option::Option<crate::model::form::parameter::FillBehavior>,

        /// The default value of an optional parameter. If the parameter is required,
        /// the default value will be ignored.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub default_value: std::option::Option<wkt::Value>,

        /// Indicates whether the parameter content should be redacted in log.  If
        /// redaction is enabled, the parameter content will be replaced by parameter
        /// name during logging.
        /// Note: the parameter content is subject to redaction if either parameter
        /// level redaction or [entity type level
        /// redaction][google.cloud.dialogflow.cx.v3.EntityType.redact] is enabled.
        ///
        /// [google.cloud.dialogflow.cx.v3.EntityType.redact]: crate::model::EntityType::redact
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub redact: bool,

        /// Hierarchical advanced settings for this parameter. The settings exposed
        /// at the lower level overrides the settings exposed at the higher level.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub advanced_settings: std::option::Option<crate::model::AdvancedSettings>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Parameter {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [display_name][crate::model::form::Parameter::display_name].
        pub fn set_display_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.display_name = v.into();
            self
        }

        /// Sets the value of [required][crate::model::form::Parameter::required].
        pub fn set_required<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.required = v.into();
            self
        }

        /// Sets the value of [entity_type][crate::model::form::Parameter::entity_type].
        pub fn set_entity_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.entity_type = v.into();
            self
        }

        /// Sets the value of [is_list][crate::model::form::Parameter::is_list].
        pub fn set_is_list<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.is_list = v.into();
            self
        }

        /// Sets the value of [fill_behavior][crate::model::form::Parameter::fill_behavior].
        pub fn set_fill_behavior<
            T: std::convert::Into<std::option::Option<crate::model::form::parameter::FillBehavior>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.fill_behavior = v.into();
            self
        }

        /// Sets the value of [default_value][crate::model::form::Parameter::default_value].
        pub fn set_default_value<T: std::convert::Into<std::option::Option<wkt::Value>>>(
            mut self,
            v: T,
        ) -> Self {
            self.default_value = v.into();
            self
        }

        /// Sets the value of [redact][crate::model::form::Parameter::redact].
        pub fn set_redact<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.redact = v.into();
            self
        }

        /// Sets the value of [advanced_settings][crate::model::form::Parameter::advanced_settings].
        pub fn set_advanced_settings<
            T: std::convert::Into<std::option::Option<crate::model::AdvancedSettings>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.advanced_settings = v.into();
            self
        }
    }

    impl wkt::message::Message for Parameter {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Form.Parameter"
        }
    }

    /// Defines additional types related to [Parameter].
    pub mod parameter {
        #[allow(unused_imports)]
        use super::*;

        /// Configuration for how the filling of a parameter should be handled.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct FillBehavior {
            /// Required. The fulfillment to provide the initial prompt that the agent
            /// can present to the user in order to fill the parameter.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub initial_prompt_fulfillment: std::option::Option<crate::model::Fulfillment>,

            /// The handlers for parameter-level events, used to provide reprompt for
            /// the parameter or transition to a different page/flow. The supported
            /// events are:
            ///
            /// * `sys.no-match-<N>`, where N can be from 1 to 6
            /// * `sys.no-match-default`
            /// * `sys.no-input-<N>`, where N can be from 1 to 6
            /// * `sys.no-input-default`
            /// * `sys.invalid-parameter`
            ///
            /// `initial_prompt_fulfillment` provides the first prompt for the
            /// parameter.
            ///
            /// If the user's response does not fill the parameter, a
            /// no-match/no-input event will be triggered, and the fulfillment
            /// associated with the `sys.no-match-1`/`sys.no-input-1` handler (if
            /// defined) will be called to provide a prompt. The
            /// `sys.no-match-2`/`sys.no-input-2` handler (if defined) will respond to
            /// the next no-match/no-input event, and so on.
            ///
            /// A `sys.no-match-default` or `sys.no-input-default` handler will be used
            /// to handle all following no-match/no-input events after all numbered
            /// no-match/no-input handlers for the parameter are consumed.
            ///
            /// A `sys.invalid-parameter` handler can be defined to handle the case
            /// where the parameter values have been `invalidated` by webhook. For
            /// example, if the user's response fill the parameter, however the
            /// parameter was invalidated by webhook, the fulfillment associated with
            /// the `sys.invalid-parameter` handler (if defined) will be called to
            /// provide a prompt.
            ///
            /// If the event handler for the corresponding event can't be found on the
            /// parameter, `initial_prompt_fulfillment` will be re-prompted.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub reprompt_event_handlers: std::vec::Vec<crate::model::EventHandler>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl FillBehavior {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [initial_prompt_fulfillment][crate::model::form::parameter::FillBehavior::initial_prompt_fulfillment].
            pub fn set_initial_prompt_fulfillment<
                T: std::convert::Into<std::option::Option<crate::model::Fulfillment>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.initial_prompt_fulfillment = v.into();
                self
            }

            /// Sets the value of [reprompt_event_handlers][crate::model::form::parameter::FillBehavior::reprompt_event_handlers].
            pub fn set_reprompt_event_handlers<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<crate::model::EventHandler>,
            {
                use std::iter::Iterator;
                self.reprompt_event_handlers = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for FillBehavior {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.cx.v3.Form.Parameter.FillBehavior"
            }
        }
    }
}

/// An event handler specifies an
/// [event][google.cloud.dialogflow.cx.v3.EventHandler.event] that can be handled
/// during a session. When the specified event happens, the following actions are
/// taken in order:
///
/// * If there is a
///   [`trigger_fulfillment`][google.cloud.dialogflow.cx.v3.EventHandler.trigger_fulfillment]
///   associated with the event, it will be called.
/// * If there is a
///   [`target_page`][google.cloud.dialogflow.cx.v3.EventHandler.target_page]
///   associated with the event, the session will transition into the specified
///   page.
/// * If there is a
///   [`target_flow`][google.cloud.dialogflow.cx.v3.EventHandler.target_flow]
///   associated with the event, the session will transition into the specified
///   flow.
///
/// [google.cloud.dialogflow.cx.v3.EventHandler.event]: crate::model::EventHandler::event
/// [google.cloud.dialogflow.cx.v3.EventHandler.target_flow]: crate::model::EventHandler::target
/// [google.cloud.dialogflow.cx.v3.EventHandler.target_page]: crate::model::EventHandler::target
/// [google.cloud.dialogflow.cx.v3.EventHandler.trigger_fulfillment]: crate::model::EventHandler::trigger_fulfillment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EventHandler {
    /// Output only. The unique identifier of this event handler.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The name of the event to handle.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub event: std::string::String,

    /// The fulfillment to call when the event occurs.
    /// Handling webhook errors with a fulfillment enabled with webhook could
    /// cause infinite loop. It is invalid to specify such fulfillment for a
    /// handler handling webhooks.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub trigger_fulfillment: std::option::Option<crate::model::Fulfillment>,

    /// The target to transition to, either a page in the same host flow (the flow
    /// that owns this
    /// [TransitionRoute][google.cloud.dialogflow.cx.v3.TransitionRoute]), or
    /// another flow in the same agent.
    ///
    /// [google.cloud.dialogflow.cx.v3.TransitionRoute]: crate::model::TransitionRoute
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub target: std::option::Option<crate::model::event_handler::Target>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl EventHandler {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::EventHandler::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [event][crate::model::EventHandler::event].
    pub fn set_event<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.event = v.into();
        self
    }

    /// Sets the value of [trigger_fulfillment][crate::model::EventHandler::trigger_fulfillment].
    pub fn set_trigger_fulfillment<
        T: std::convert::Into<std::option::Option<crate::model::Fulfillment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.trigger_fulfillment = v.into();
        self
    }

    /// Sets the value of [target][crate::model::EventHandler::target].
    ///
    /// Note that all the setters affecting `target` are mutually
    /// exclusive.
    pub fn set_target<
        T: std::convert::Into<std::option::Option<crate::model::event_handler::Target>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.target = v.into();
        self
    }

    /// The value of [target][crate::model::EventHandler::target]
    /// if it holds a `TargetPage`, `None` if the field is not set or
    /// holds a different branch.
    pub fn target_page(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.target.as_ref().and_then(|v| match v {
            crate::model::event_handler::Target::TargetPage(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [target][crate::model::EventHandler::target]
    /// if it holds a `TargetFlow`, `None` if the field is not set or
    /// holds a different branch.
    pub fn target_flow(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.target.as_ref().and_then(|v| match v {
            crate::model::event_handler::Target::TargetFlow(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [target][crate::model::EventHandler::target]
    /// to hold a `TargetPage`.
    ///
    /// Note that all the setters affecting `target` are
    /// mutually exclusive.
    pub fn set_target_page<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target =
            std::option::Option::Some(crate::model::event_handler::Target::TargetPage(v.into()));
        self
    }

    /// Sets the value of [target][crate::model::EventHandler::target]
    /// to hold a `TargetFlow`.
    ///
    /// Note that all the setters affecting `target` are
    /// mutually exclusive.
    pub fn set_target_flow<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target =
            std::option::Option::Some(crate::model::event_handler::Target::TargetFlow(v.into()));
        self
    }
}

impl wkt::message::Message for EventHandler {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.EventHandler"
    }
}

/// Defines additional types related to [EventHandler].
pub mod event_handler {
    #[allow(unused_imports)]
    use super::*;

    /// The target to transition to, either a page in the same host flow (the flow
    /// that owns this
    /// [TransitionRoute][google.cloud.dialogflow.cx.v3.TransitionRoute]), or
    /// another flow in the same agent.
    ///
    /// [google.cloud.dialogflow.cx.v3.TransitionRoute]: crate::model::TransitionRoute
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Target {
        /// The target page to transition to.
        /// Format:
        /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/pages/<PageID>`.
        TargetPage(std::string::String),
        /// The target flow to transition to.
        /// Format:
        /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`.
        TargetFlow(std::string::String),
    }
}

/// A transition route specifies a [intent][google.cloud.dialogflow.cx.v3.Intent]
/// that can be matched and/or a data condition that can be evaluated during a
/// session. When a specified transition is matched, the following actions are
/// taken in order:
///
/// * If there is a
///   [`trigger_fulfillment`][google.cloud.dialogflow.cx.v3.TransitionRoute.trigger_fulfillment]
///   associated with the transition, it will be called.
/// * If there is a
///   [`target_page`][google.cloud.dialogflow.cx.v3.TransitionRoute.target_page]
///   associated with the transition, the session will transition into the
///   specified page.
/// * If there is a
///   [`target_flow`][google.cloud.dialogflow.cx.v3.TransitionRoute.target_flow]
///   associated with the transition, the session will transition into the
///   specified flow.
///
/// [google.cloud.dialogflow.cx.v3.Intent]: crate::model::Intent
/// [google.cloud.dialogflow.cx.v3.TransitionRoute.target_flow]: crate::model::TransitionRoute::target
/// [google.cloud.dialogflow.cx.v3.TransitionRoute.target_page]: crate::model::TransitionRoute::target
/// [google.cloud.dialogflow.cx.v3.TransitionRoute.trigger_fulfillment]: crate::model::TransitionRoute::trigger_fulfillment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TransitionRoute {
    /// Output only. The unique identifier of this transition route.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. The description of the transition route. The maximum length is
    /// 500 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// The unique identifier of an [Intent][google.cloud.dialogflow.cx.v3.Intent].
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/intents/<IntentID>`.
    /// Indicates that the transition can only happen when the given intent is
    /// matched.
    /// At least one of `intent` or `condition` must be specified. When both
    /// `intent` and `condition` are specified, the transition can only happen
    /// when both are fulfilled.
    ///
    /// [google.cloud.dialogflow.cx.v3.Intent]: crate::model::Intent
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub intent: std::string::String,

    /// The condition to evaluate against [form
    /// parameters][google.cloud.dialogflow.cx.v3.Form.parameters] or [session
    /// parameters][google.cloud.dialogflow.cx.v3.SessionInfo.parameters].
    ///
    /// See the [conditions
    /// reference](https://cloud.google.com/dialogflow/cx/docs/reference/condition).
    /// At least one of `intent` or `condition` must be specified. When both
    /// `intent` and `condition` are specified, the transition can only happen
    /// when both are fulfilled.
    ///
    /// [google.cloud.dialogflow.cx.v3.Form.parameters]: crate::model::Form::parameters
    /// [google.cloud.dialogflow.cx.v3.SessionInfo.parameters]: crate::model::SessionInfo::parameters
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub condition: std::string::String,

    /// The fulfillment to call when the condition is satisfied. At least one of
    /// `trigger_fulfillment` and `target` must be specified. When both are
    /// defined, `trigger_fulfillment` is executed first.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub trigger_fulfillment: std::option::Option<crate::model::Fulfillment>,

    /// The target to transition to, either a page in the same host flow (the flow
    /// that owns this
    /// [TransitionRoute][google.cloud.dialogflow.cx.v3.TransitionRoute]), or
    /// another flow in the same agent.
    ///
    /// [google.cloud.dialogflow.cx.v3.TransitionRoute]: crate::model::TransitionRoute
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub target: std::option::Option<crate::model::transition_route::Target>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TransitionRoute {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::TransitionRoute::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::TransitionRoute::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [intent][crate::model::TransitionRoute::intent].
    pub fn set_intent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.intent = v.into();
        self
    }

    /// Sets the value of [condition][crate::model::TransitionRoute::condition].
    pub fn set_condition<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.condition = v.into();
        self
    }

    /// Sets the value of [trigger_fulfillment][crate::model::TransitionRoute::trigger_fulfillment].
    pub fn set_trigger_fulfillment<
        T: std::convert::Into<std::option::Option<crate::model::Fulfillment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.trigger_fulfillment = v.into();
        self
    }

    /// Sets the value of [target][crate::model::TransitionRoute::target].
    ///
    /// Note that all the setters affecting `target` are mutually
    /// exclusive.
    pub fn set_target<
        T: std::convert::Into<std::option::Option<crate::model::transition_route::Target>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.target = v.into();
        self
    }

    /// The value of [target][crate::model::TransitionRoute::target]
    /// if it holds a `TargetPage`, `None` if the field is not set or
    /// holds a different branch.
    pub fn target_page(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.target.as_ref().and_then(|v| match v {
            crate::model::transition_route::Target::TargetPage(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [target][crate::model::TransitionRoute::target]
    /// if it holds a `TargetFlow`, `None` if the field is not set or
    /// holds a different branch.
    pub fn target_flow(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.target.as_ref().and_then(|v| match v {
            crate::model::transition_route::Target::TargetFlow(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [target][crate::model::TransitionRoute::target]
    /// to hold a `TargetPage`.
    ///
    /// Note that all the setters affecting `target` are
    /// mutually exclusive.
    pub fn set_target_page<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target =
            std::option::Option::Some(crate::model::transition_route::Target::TargetPage(v.into()));
        self
    }

    /// Sets the value of [target][crate::model::TransitionRoute::target]
    /// to hold a `TargetFlow`.
    ///
    /// Note that all the setters affecting `target` are
    /// mutually exclusive.
    pub fn set_target_flow<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target =
            std::option::Option::Some(crate::model::transition_route::Target::TargetFlow(v.into()));
        self
    }
}

impl wkt::message::Message for TransitionRoute {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.TransitionRoute"
    }
}

/// Defines additional types related to [TransitionRoute].
pub mod transition_route {
    #[allow(unused_imports)]
    use super::*;

    /// The target to transition to, either a page in the same host flow (the flow
    /// that owns this
    /// [TransitionRoute][google.cloud.dialogflow.cx.v3.TransitionRoute]), or
    /// another flow in the same agent.
    ///
    /// [google.cloud.dialogflow.cx.v3.TransitionRoute]: crate::model::TransitionRoute
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Target {
        /// The target page to transition to.
        /// Format:
        /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/pages/<PageID>`.
        TargetPage(std::string::String),
        /// The target flow to transition to.
        /// Format:
        /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`.
        TargetFlow(std::string::String),
    }
}

/// The request message for
/// [Pages.ListPages][google.cloud.dialogflow.cx.v3.Pages.ListPages].
///
/// [google.cloud.dialogflow.cx.v3.Pages.ListPages]: crate::client::Pages::list_pages
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListPagesRequest {
    /// Required. The flow to list all pages for.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The language to list pages for. The following fields are language
    /// dependent:
    ///
    /// * `Page.entry_fulfillment.messages`
    /// * `Page.entry_fulfillment.conditional_cases`
    /// * `Page.event_handlers.trigger_fulfillment.messages`
    /// * `Page.event_handlers.trigger_fulfillment.conditional_cases`
    /// * `Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages`
    ///
    /// `Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases`
    ///
    /// * `Page.form.parameters.fill_behavior.reprompt_event_handlers.messages`
    ///
    /// `Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases`
    ///
    /// * `Page.transition_routes.trigger_fulfillment.messages`
    /// * `Page.transition_routes.trigger_fulfillment.conditional_cases`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// The maximum number of items to return in a single page. By default 100 and
    /// at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListPagesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListPagesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::ListPagesRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListPagesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListPagesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListPagesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListPagesRequest"
    }
}

/// The response message for
/// [Pages.ListPages][google.cloud.dialogflow.cx.v3.Pages.ListPages].
///
/// [google.cloud.dialogflow.cx.v3.Pages.ListPages]: crate::client::Pages::list_pages
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListPagesResponse {
    /// The list of pages. There will be a maximum number of items returned based
    /// on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub pages: std::vec::Vec<crate::model::Page>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListPagesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListPagesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [pages][crate::model::ListPagesResponse::pages].
    pub fn set_pages<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Page>,
    {
        use std::iter::Iterator;
        self.pages = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListPagesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListPagesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListPagesResponse {
    type PageItem = crate::model::Page;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.pages
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Pages.GetPage][google.cloud.dialogflow.cx.v3.Pages.GetPage].
///
/// [google.cloud.dialogflow.cx.v3.Pages.GetPage]: crate::client::Pages::get_page
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetPageRequest {
    /// Required. The name of the page.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/pages/<PageID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The language to retrieve the page for. The following fields are language
    /// dependent:
    ///
    /// * `Page.entry_fulfillment.messages`
    /// * `Page.entry_fulfillment.conditional_cases`
    /// * `Page.event_handlers.trigger_fulfillment.messages`
    /// * `Page.event_handlers.trigger_fulfillment.conditional_cases`
    /// * `Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages`
    ///
    /// `Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases`
    ///
    /// * `Page.form.parameters.fill_behavior.reprompt_event_handlers.messages`
    ///
    /// `Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases`
    ///
    /// * `Page.transition_routes.trigger_fulfillment.messages`
    /// * `Page.transition_routes.trigger_fulfillment.conditional_cases`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetPageRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetPageRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::GetPageRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for GetPageRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetPageRequest"
    }
}

/// The request message for
/// [Pages.CreatePage][google.cloud.dialogflow.cx.v3.Pages.CreatePage].
///
/// [google.cloud.dialogflow.cx.v3.Pages.CreatePage]: crate::client::Pages::create_page
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreatePageRequest {
    /// Required. The flow to create a page for.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The page to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub page: std::option::Option<crate::model::Page>,

    /// The language of the following fields in `page`:
    ///
    /// * `Page.entry_fulfillment.messages`
    /// * `Page.entry_fulfillment.conditional_cases`
    /// * `Page.event_handlers.trigger_fulfillment.messages`
    /// * `Page.event_handlers.trigger_fulfillment.conditional_cases`
    /// * `Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages`
    ///
    /// `Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases`
    ///
    /// * `Page.form.parameters.fill_behavior.reprompt_event_handlers.messages`
    ///
    /// `Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases`
    ///
    /// * `Page.transition_routes.trigger_fulfillment.messages`
    /// * `Page.transition_routes.trigger_fulfillment.conditional_cases`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreatePageRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreatePageRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page][crate::model::CreatePageRequest::page].
    pub fn set_page<T: std::convert::Into<std::option::Option<crate::model::Page>>>(
        mut self,
        v: T,
    ) -> Self {
        self.page = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::CreatePageRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for CreatePageRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CreatePageRequest"
    }
}

/// The request message for
/// [Pages.UpdatePage][google.cloud.dialogflow.cx.v3.Pages.UpdatePage].
///
/// [google.cloud.dialogflow.cx.v3.Pages.UpdatePage]: crate::client::Pages::update_page
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdatePageRequest {
    /// Required. The page to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub page: std::option::Option<crate::model::Page>,

    /// The language of the following fields in `page`:
    ///
    /// * `Page.entry_fulfillment.messages`
    /// * `Page.entry_fulfillment.conditional_cases`
    /// * `Page.event_handlers.trigger_fulfillment.messages`
    /// * `Page.event_handlers.trigger_fulfillment.conditional_cases`
    /// * `Page.form.parameters.fill_behavior.initial_prompt_fulfillment.messages`
    ///
    /// `Page.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases`
    ///
    /// * `Page.form.parameters.fill_behavior.reprompt_event_handlers.messages`
    ///
    /// `Page.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases`
    ///
    /// * `Page.transition_routes.trigger_fulfillment.messages`
    /// * `Page.transition_routes.trigger_fulfillment.conditional_cases`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// The mask to control which fields get updated. If the mask is not present,
    /// all fields will be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdatePageRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [page][crate::model::UpdatePageRequest::page].
    pub fn set_page<T: std::convert::Into<std::option::Option<crate::model::Page>>>(
        mut self,
        v: T,
    ) -> Self {
        self.page = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::UpdatePageRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdatePageRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdatePageRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.UpdatePageRequest"
    }
}

/// The request message for
/// [Pages.DeletePage][google.cloud.dialogflow.cx.v3.Pages.DeletePage].
///
/// [google.cloud.dialogflow.cx.v3.Pages.DeletePage]: crate::client::Pages::delete_page
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeletePageRequest {
    /// Required. The name of the page to delete.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/Flows/<flowID>/pages/<PageID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// This field has no effect for pages with no incoming transitions.
    /// For pages with incoming transitions:
    ///
    /// * If `force` is set to false, an error will be returned with message
    ///   indicating the incoming transitions.
    /// * If `force` is set to true, Dialogflow will remove the page, as well as
    ///   any transitions to the page (i.e. [Target
    ///   page][EventHandler.target_page] in event handlers or [Target
    ///   page][TransitionRoute.target_page] in transition routes that point to
    ///   this page will be cleared).
    ///
    /// [EventHandler.target_page]: crate::model::EventHandler::target
    /// [TransitionRoute.target_page]: crate::model::TransitionRoute::target
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub force: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeletePageRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeletePageRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [force][crate::model::DeletePageRequest::force].
    pub fn set_force<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.force = v.into();
        self
    }
}

impl wkt::message::Message for DeletePageRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DeletePageRequest"
    }
}

/// The Knowledge Connector settings for this page or flow.
/// This includes information such as the attached Knowledge Bases, and the way
/// to execute fulfillment.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct KnowledgeConnectorSettings {
    /// Whether Knowledge Connector is enabled or not.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enabled: bool,

    /// The fulfillment to be triggered.
    ///
    /// When the answers from the Knowledge Connector are selected by Dialogflow,
    /// you can utitlize the request scoped parameter `$request.knowledge.answers`
    /// (contains up to the 5 highest confidence answers) and
    /// `$request.knowledge.questions` (contains the corresponding questions) to
    /// construct the fulfillment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub trigger_fulfillment: std::option::Option<crate::model::Fulfillment>,

    /// Optional. List of related data store connections.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub data_store_connections: std::vec::Vec<crate::model::DataStoreConnection>,

    /// The target to transition to, either a page in the same host flow (the flow
    /// that owns this
    /// [KnowledgeConnectorSettings][google.cloud.dialogflow.cx.v3.KnowledgeConnectorSettings]),
    /// or another flow in the same agent.
    ///
    /// [google.cloud.dialogflow.cx.v3.KnowledgeConnectorSettings]: crate::model::KnowledgeConnectorSettings
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub target: std::option::Option<crate::model::knowledge_connector_settings::Target>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl KnowledgeConnectorSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [enabled][crate::model::KnowledgeConnectorSettings::enabled].
    pub fn set_enabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enabled = v.into();
        self
    }

    /// Sets the value of [trigger_fulfillment][crate::model::KnowledgeConnectorSettings::trigger_fulfillment].
    pub fn set_trigger_fulfillment<
        T: std::convert::Into<std::option::Option<crate::model::Fulfillment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.trigger_fulfillment = v.into();
        self
    }

    /// Sets the value of [data_store_connections][crate::model::KnowledgeConnectorSettings::data_store_connections].
    pub fn set_data_store_connections<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::DataStoreConnection>,
    {
        use std::iter::Iterator;
        self.data_store_connections = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [target][crate::model::KnowledgeConnectorSettings::target].
    ///
    /// Note that all the setters affecting `target` are mutually
    /// exclusive.
    pub fn set_target<
        T: std::convert::Into<std::option::Option<crate::model::knowledge_connector_settings::Target>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.target = v.into();
        self
    }

    /// The value of [target][crate::model::KnowledgeConnectorSettings::target]
    /// if it holds a `TargetPage`, `None` if the field is not set or
    /// holds a different branch.
    pub fn target_page(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.target.as_ref().and_then(|v| match v {
            crate::model::knowledge_connector_settings::Target::TargetPage(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [target][crate::model::KnowledgeConnectorSettings::target]
    /// if it holds a `TargetFlow`, `None` if the field is not set or
    /// holds a different branch.
    pub fn target_flow(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.target.as_ref().and_then(|v| match v {
            crate::model::knowledge_connector_settings::Target::TargetFlow(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [target][crate::model::KnowledgeConnectorSettings::target]
    /// to hold a `TargetPage`.
    ///
    /// Note that all the setters affecting `target` are
    /// mutually exclusive.
    pub fn set_target_page<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = std::option::Option::Some(
            crate::model::knowledge_connector_settings::Target::TargetPage(v.into()),
        );
        self
    }

    /// Sets the value of [target][crate::model::KnowledgeConnectorSettings::target]
    /// to hold a `TargetFlow`.
    ///
    /// Note that all the setters affecting `target` are
    /// mutually exclusive.
    pub fn set_target_flow<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = std::option::Option::Some(
            crate::model::knowledge_connector_settings::Target::TargetFlow(v.into()),
        );
        self
    }
}

impl wkt::message::Message for KnowledgeConnectorSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.KnowledgeConnectorSettings"
    }
}

/// Defines additional types related to [KnowledgeConnectorSettings].
pub mod knowledge_connector_settings {
    #[allow(unused_imports)]
    use super::*;

    /// The target to transition to, either a page in the same host flow (the flow
    /// that owns this
    /// [KnowledgeConnectorSettings][google.cloud.dialogflow.cx.v3.KnowledgeConnectorSettings]),
    /// or another flow in the same agent.
    ///
    /// [google.cloud.dialogflow.cx.v3.KnowledgeConnectorSettings]: crate::model::KnowledgeConnectorSettings
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Target {
        /// The target page to transition to.
        /// Format:
        /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/pages/<PageID>`.
        TargetPage(std::string::String),
        /// The target flow to transition to.
        /// Format:
        /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`.
        TargetFlow(std::string::String),
    }
}

/// Represents a response message that can be returned by a conversational agent.
///
/// Response messages are also used for output audio synthesis. The approach is
/// as follows:
///
/// * If at least one OutputAudioText response is present, then all
///   OutputAudioText responses are linearly concatenated, and the result is used
///   for output audio synthesis.
/// * If the OutputAudioText responses are a mixture of text and SSML, then the
///   concatenated result is treated as SSML; otherwise, the result is treated as
///   either text or SSML as appropriate. The agent designer should ideally use
///   either text or SSML consistently throughout the bot design.
/// * Otherwise, all Text responses are linearly concatenated, and the result is
///   used for output audio synthesis.
///
/// This approach allows for more sophisticated user experience scenarios, where
/// the text displayed to the user may differ from what is heard.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ResponseMessage {
    /// Response type.
    pub response_type: crate::model::response_message::ResponseType,

    /// The channel which the response is associated with. Clients can specify the
    /// channel via
    /// [QueryParameters.channel][google.cloud.dialogflow.cx.v3.QueryParameters.channel],
    /// and only associated channel response will be returned.
    ///
    /// [google.cloud.dialogflow.cx.v3.QueryParameters.channel]: crate::model::QueryParameters::channel
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub channel: std::string::String,

    /// Required. The rich response message.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub message: std::option::Option<crate::model::response_message::Message>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ResponseMessage {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [response_type][crate::model::ResponseMessage::response_type].
    pub fn set_response_type<
        T: std::convert::Into<crate::model::response_message::ResponseType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.response_type = v.into();
        self
    }

    /// Sets the value of [channel][crate::model::ResponseMessage::channel].
    pub fn set_channel<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.channel = v.into();
        self
    }

    /// Sets the value of [message][crate::model::ResponseMessage::message].
    ///
    /// Note that all the setters affecting `message` are mutually
    /// exclusive.
    pub fn set_message<
        T: std::convert::Into<std::option::Option<crate::model::response_message::Message>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.message = v.into();
        self
    }

    /// The value of [message][crate::model::ResponseMessage::message]
    /// if it holds a `Text`, `None` if the field is not set or
    /// holds a different branch.
    pub fn text(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::response_message::Text>> {
        #[allow(unreachable_patterns)]
        self.message.as_ref().and_then(|v| match v {
            crate::model::response_message::Message::Text(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [message][crate::model::ResponseMessage::message]
    /// if it holds a `Payload`, `None` if the field is not set or
    /// holds a different branch.
    pub fn payload(&self) -> std::option::Option<&std::boxed::Box<wkt::Struct>> {
        #[allow(unreachable_patterns)]
        self.message.as_ref().and_then(|v| match v {
            crate::model::response_message::Message::Payload(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [message][crate::model::ResponseMessage::message]
    /// if it holds a `ConversationSuccess`, `None` if the field is not set or
    /// holds a different branch.
    pub fn conversation_success(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::response_message::ConversationSuccess>>
    {
        #[allow(unreachable_patterns)]
        self.message.as_ref().and_then(|v| match v {
            crate::model::response_message::Message::ConversationSuccess(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [message][crate::model::ResponseMessage::message]
    /// if it holds a `OutputAudioText`, `None` if the field is not set or
    /// holds a different branch.
    pub fn output_audio_text(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::response_message::OutputAudioText>>
    {
        #[allow(unreachable_patterns)]
        self.message.as_ref().and_then(|v| match v {
            crate::model::response_message::Message::OutputAudioText(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [message][crate::model::ResponseMessage::message]
    /// if it holds a `LiveAgentHandoff`, `None` if the field is not set or
    /// holds a different branch.
    pub fn live_agent_handoff(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::response_message::LiveAgentHandoff>>
    {
        #[allow(unreachable_patterns)]
        self.message.as_ref().and_then(|v| match v {
            crate::model::response_message::Message::LiveAgentHandoff(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [message][crate::model::ResponseMessage::message]
    /// if it holds a `EndInteraction`, `None` if the field is not set or
    /// holds a different branch.
    pub fn end_interaction(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::response_message::EndInteraction>> {
        #[allow(unreachable_patterns)]
        self.message.as_ref().and_then(|v| match v {
            crate::model::response_message::Message::EndInteraction(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [message][crate::model::ResponseMessage::message]
    /// if it holds a `PlayAudio`, `None` if the field is not set or
    /// holds a different branch.
    pub fn play_audio(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::response_message::PlayAudio>> {
        #[allow(unreachable_patterns)]
        self.message.as_ref().and_then(|v| match v {
            crate::model::response_message::Message::PlayAudio(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [message][crate::model::ResponseMessage::message]
    /// if it holds a `MixedAudio`, `None` if the field is not set or
    /// holds a different branch.
    pub fn mixed_audio(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::response_message::MixedAudio>> {
        #[allow(unreachable_patterns)]
        self.message.as_ref().and_then(|v| match v {
            crate::model::response_message::Message::MixedAudio(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [message][crate::model::ResponseMessage::message]
    /// if it holds a `TelephonyTransferCall`, `None` if the field is not set or
    /// holds a different branch.
    pub fn telephony_transfer_call(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::response_message::TelephonyTransferCall>>
    {
        #[allow(unreachable_patterns)]
        self.message.as_ref().and_then(|v| match v {
            crate::model::response_message::Message::TelephonyTransferCall(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [message][crate::model::ResponseMessage::message]
    /// if it holds a `KnowledgeInfoCard`, `None` if the field is not set or
    /// holds a different branch.
    pub fn knowledge_info_card(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::response_message::KnowledgeInfoCard>>
    {
        #[allow(unreachable_patterns)]
        self.message.as_ref().and_then(|v| match v {
            crate::model::response_message::Message::KnowledgeInfoCard(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [message][crate::model::ResponseMessage::message]
    /// to hold a `Text`.
    ///
    /// Note that all the setters affecting `message` are
    /// mutually exclusive.
    pub fn set_text<
        T: std::convert::Into<std::boxed::Box<crate::model::response_message::Text>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.message =
            std::option::Option::Some(crate::model::response_message::Message::Text(v.into()));
        self
    }

    /// Sets the value of [message][crate::model::ResponseMessage::message]
    /// to hold a `Payload`.
    ///
    /// Note that all the setters affecting `message` are
    /// mutually exclusive.
    pub fn set_payload<T: std::convert::Into<std::boxed::Box<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.message =
            std::option::Option::Some(crate::model::response_message::Message::Payload(v.into()));
        self
    }

    /// Sets the value of [message][crate::model::ResponseMessage::message]
    /// to hold a `ConversationSuccess`.
    ///
    /// Note that all the setters affecting `message` are
    /// mutually exclusive.
    pub fn set_conversation_success<
        T: std::convert::Into<std::boxed::Box<crate::model::response_message::ConversationSuccess>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.message = std::option::Option::Some(
            crate::model::response_message::Message::ConversationSuccess(v.into()),
        );
        self
    }

    /// Sets the value of [message][crate::model::ResponseMessage::message]
    /// to hold a `OutputAudioText`.
    ///
    /// Note that all the setters affecting `message` are
    /// mutually exclusive.
    pub fn set_output_audio_text<
        T: std::convert::Into<std::boxed::Box<crate::model::response_message::OutputAudioText>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.message = std::option::Option::Some(
            crate::model::response_message::Message::OutputAudioText(v.into()),
        );
        self
    }

    /// Sets the value of [message][crate::model::ResponseMessage::message]
    /// to hold a `LiveAgentHandoff`.
    ///
    /// Note that all the setters affecting `message` are
    /// mutually exclusive.
    pub fn set_live_agent_handoff<
        T: std::convert::Into<std::boxed::Box<crate::model::response_message::LiveAgentHandoff>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.message = std::option::Option::Some(
            crate::model::response_message::Message::LiveAgentHandoff(v.into()),
        );
        self
    }

    /// Sets the value of [message][crate::model::ResponseMessage::message]
    /// to hold a `EndInteraction`.
    ///
    /// Note that all the setters affecting `message` are
    /// mutually exclusive.
    pub fn set_end_interaction<
        T: std::convert::Into<std::boxed::Box<crate::model::response_message::EndInteraction>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.message = std::option::Option::Some(
            crate::model::response_message::Message::EndInteraction(v.into()),
        );
        self
    }

    /// Sets the value of [message][crate::model::ResponseMessage::message]
    /// to hold a `PlayAudio`.
    ///
    /// Note that all the setters affecting `message` are
    /// mutually exclusive.
    pub fn set_play_audio<
        T: std::convert::Into<std::boxed::Box<crate::model::response_message::PlayAudio>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.message =
            std::option::Option::Some(crate::model::response_message::Message::PlayAudio(v.into()));
        self
    }

    /// Sets the value of [message][crate::model::ResponseMessage::message]
    /// to hold a `MixedAudio`.
    ///
    /// Note that all the setters affecting `message` are
    /// mutually exclusive.
    pub fn set_mixed_audio<
        T: std::convert::Into<std::boxed::Box<crate::model::response_message::MixedAudio>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.message = std::option::Option::Some(
            crate::model::response_message::Message::MixedAudio(v.into()),
        );
        self
    }

    /// Sets the value of [message][crate::model::ResponseMessage::message]
    /// to hold a `TelephonyTransferCall`.
    ///
    /// Note that all the setters affecting `message` are
    /// mutually exclusive.
    pub fn set_telephony_transfer_call<
        T: std::convert::Into<std::boxed::Box<crate::model::response_message::TelephonyTransferCall>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.message = std::option::Option::Some(
            crate::model::response_message::Message::TelephonyTransferCall(v.into()),
        );
        self
    }

    /// Sets the value of [message][crate::model::ResponseMessage::message]
    /// to hold a `KnowledgeInfoCard`.
    ///
    /// Note that all the setters affecting `message` are
    /// mutually exclusive.
    pub fn set_knowledge_info_card<
        T: std::convert::Into<std::boxed::Box<crate::model::response_message::KnowledgeInfoCard>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.message = std::option::Option::Some(
            crate::model::response_message::Message::KnowledgeInfoCard(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ResponseMessage {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ResponseMessage"
    }
}

/// Defines additional types related to [ResponseMessage].
pub mod response_message {
    #[allow(unused_imports)]
    use super::*;

    /// The text response message.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Text {
        /// Required. A collection of text response variants. If multiple variants
        /// are defined, only one text response variant is returned at runtime.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub text: std::vec::Vec<std::string::String>,

        /// Output only. Whether the playback of this message can be interrupted by
        /// the end user's speech and the client can then starts the next Dialogflow
        /// request.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub allow_playback_interruption: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Text {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [allow_playback_interruption][crate::model::response_message::Text::allow_playback_interruption].
        pub fn set_allow_playback_interruption<T: std::convert::Into<bool>>(
            mut self,
            v: T,
        ) -> Self {
            self.allow_playback_interruption = v.into();
            self
        }

        /// Sets the value of [text][crate::model::response_message::Text::text].
        pub fn set_text<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.text = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for Text {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.ResponseMessage.Text"
        }
    }

    /// Indicates that the conversation should be handed off to a live agent.
    ///
    /// Dialogflow only uses this to determine which conversations were handed off
    /// to a human agent for measurement purposes. What else to do with this signal
    /// is up to you and your handoff procedures.
    ///
    /// You may set this, for example:
    ///
    /// * In the
    ///   [entry_fulfillment][google.cloud.dialogflow.cx.v3.Page.entry_fulfillment]
    ///   of a [Page][google.cloud.dialogflow.cx.v3.Page] if
    ///   entering the page indicates something went extremely wrong in the
    ///   conversation.
    /// * In a webhook response when you determine that the customer issue can only
    ///   be handled by a human.
    ///
    /// [google.cloud.dialogflow.cx.v3.Page]: crate::model::Page
    /// [google.cloud.dialogflow.cx.v3.Page.entry_fulfillment]: crate::model::Page::entry_fulfillment
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct LiveAgentHandoff {
        /// Custom metadata for your handoff procedure. Dialogflow doesn't impose
        /// any structure on this.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub metadata: std::option::Option<wkt::Struct>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl LiveAgentHandoff {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [metadata][crate::model::response_message::LiveAgentHandoff::metadata].
        pub fn set_metadata<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
            mut self,
            v: T,
        ) -> Self {
            self.metadata = v.into();
            self
        }
    }

    impl wkt::message::Message for LiveAgentHandoff {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.ResponseMessage.LiveAgentHandoff"
        }
    }

    /// Indicates that the conversation succeeded, i.e., the bot handled the issue
    /// that the customer talked to it about.
    ///
    /// Dialogflow only uses this to determine which conversations should be
    /// counted as successful and doesn't process the metadata in this message in
    /// any way. Note that Dialogflow also considers conversations that get to the
    /// conversation end page as successful even if they don't return
    /// [ConversationSuccess][google.cloud.dialogflow.cx.v3.ResponseMessage.ConversationSuccess].
    ///
    /// You may set this, for example:
    ///
    /// * In the
    ///   [entry_fulfillment][google.cloud.dialogflow.cx.v3.Page.entry_fulfillment]
    ///   of a [Page][google.cloud.dialogflow.cx.v3.Page] if
    ///   entering the page indicates that the conversation succeeded.
    /// * In a webhook response when you determine that you handled the customer
    ///   issue.
    ///
    /// [google.cloud.dialogflow.cx.v3.Page]: crate::model::Page
    /// [google.cloud.dialogflow.cx.v3.Page.entry_fulfillment]: crate::model::Page::entry_fulfillment
    /// [google.cloud.dialogflow.cx.v3.ResponseMessage.ConversationSuccess]: crate::model::response_message::ConversationSuccess
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ConversationSuccess {
        /// Custom metadata. Dialogflow doesn't impose any structure on this.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub metadata: std::option::Option<wkt::Struct>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ConversationSuccess {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [metadata][crate::model::response_message::ConversationSuccess::metadata].
        pub fn set_metadata<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
            mut self,
            v: T,
        ) -> Self {
            self.metadata = v.into();
            self
        }
    }

    impl wkt::message::Message for ConversationSuccess {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.ResponseMessage.ConversationSuccess"
        }
    }

    /// A text or ssml response that is preferentially used for TTS output audio
    /// synthesis, as described in the comment on the ResponseMessage message.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct OutputAudioText {
        /// Output only. Whether the playback of this message can be interrupted by
        /// the end user's speech and the client can then starts the next Dialogflow
        /// request.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub allow_playback_interruption: bool,

        /// The source, which is either plain text or SSML.
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub source: std::option::Option<crate::model::response_message::output_audio_text::Source>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl OutputAudioText {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [allow_playback_interruption][crate::model::response_message::OutputAudioText::allow_playback_interruption].
        pub fn set_allow_playback_interruption<T: std::convert::Into<bool>>(
            mut self,
            v: T,
        ) -> Self {
            self.allow_playback_interruption = v.into();
            self
        }

        /// Sets the value of [source][crate::model::response_message::OutputAudioText::source].
        ///
        /// Note that all the setters affecting `source` are mutually
        /// exclusive.
        pub fn set_source<
            T: std::convert::Into<
                    std::option::Option<crate::model::response_message::output_audio_text::Source>,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.source = v.into();
            self
        }

        /// The value of [source][crate::model::response_message::OutputAudioText::source]
        /// if it holds a `Text`, `None` if the field is not set or
        /// holds a different branch.
        pub fn text(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.source.as_ref().and_then(|v| match v {
                crate::model::response_message::output_audio_text::Source::Text(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [source][crate::model::response_message::OutputAudioText::source]
        /// if it holds a `Ssml`, `None` if the field is not set or
        /// holds a different branch.
        pub fn ssml(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.source.as_ref().and_then(|v| match v {
                crate::model::response_message::output_audio_text::Source::Ssml(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [source][crate::model::response_message::OutputAudioText::source]
        /// to hold a `Text`.
        ///
        /// Note that all the setters affecting `source` are
        /// mutually exclusive.
        pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.source = std::option::Option::Some(
                crate::model::response_message::output_audio_text::Source::Text(v.into()),
            );
            self
        }

        /// Sets the value of [source][crate::model::response_message::OutputAudioText::source]
        /// to hold a `Ssml`.
        ///
        /// Note that all the setters affecting `source` are
        /// mutually exclusive.
        pub fn set_ssml<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.source = std::option::Option::Some(
                crate::model::response_message::output_audio_text::Source::Ssml(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for OutputAudioText {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.ResponseMessage.OutputAudioText"
        }
    }

    /// Defines additional types related to [OutputAudioText].
    pub mod output_audio_text {
        #[allow(unused_imports)]
        use super::*;

        /// The source, which is either plain text or SSML.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum Source {
            /// The raw text to be synthesized.
            Text(std::string::String),
            /// The SSML text to be synthesized. For more information, see
            /// [SSML](/speech/text-to-speech/docs/ssml).
            Ssml(std::string::String),
        }
    }

    /// Indicates that interaction with the Dialogflow agent has ended.
    /// This message is generated by Dialogflow only and not supposed to be
    /// defined by the user.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct EndInteraction {
        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl EndInteraction {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for EndInteraction {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.ResponseMessage.EndInteraction"
        }
    }

    /// Specifies an audio clip to be played by the client as part of the response.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct PlayAudio {
        /// Required. URI of the audio clip. Dialogflow does not impose any
        /// validation on this value. It is specific to the client that reads it.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub audio_uri: std::string::String,

        /// Output only. Whether the playback of this message can be interrupted by
        /// the end user's speech and the client can then starts the next Dialogflow
        /// request.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub allow_playback_interruption: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl PlayAudio {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [audio_uri][crate::model::response_message::PlayAudio::audio_uri].
        pub fn set_audio_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.audio_uri = v.into();
            self
        }

        /// Sets the value of [allow_playback_interruption][crate::model::response_message::PlayAudio::allow_playback_interruption].
        pub fn set_allow_playback_interruption<T: std::convert::Into<bool>>(
            mut self,
            v: T,
        ) -> Self {
            self.allow_playback_interruption = v.into();
            self
        }
    }

    impl wkt::message::Message for PlayAudio {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.ResponseMessage.PlayAudio"
        }
    }

    /// Represents an audio message that is composed of both segments
    /// synthesized from the Dialogflow agent prompts and ones hosted externally
    /// at the specified URIs.
    /// The external URIs are specified via
    /// [play_audio][google.cloud.dialogflow.cx.v3.ResponseMessage.play_audio].
    /// This message is generated by Dialogflow only and not supposed to be
    /// defined by the user.
    ///
    /// [google.cloud.dialogflow.cx.v3.ResponseMessage.play_audio]: crate::model::ResponseMessage::message
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct MixedAudio {
        /// Segments this audio response is composed of.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub segments: std::vec::Vec<crate::model::response_message::mixed_audio::Segment>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl MixedAudio {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [segments][crate::model::response_message::MixedAudio::segments].
        pub fn set_segments<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::response_message::mixed_audio::Segment>,
        {
            use std::iter::Iterator;
            self.segments = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for MixedAudio {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.ResponseMessage.MixedAudio"
        }
    }

    /// Defines additional types related to [MixedAudio].
    pub mod mixed_audio {
        #[allow(unused_imports)]
        use super::*;

        /// Represents one segment of audio.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Segment {
            /// Output only. Whether the playback of this segment can be interrupted by
            /// the end user's speech and the client should then start the next
            /// Dialogflow request.
            #[serde(skip_serializing_if = "wkt::internal::is_default")]
            pub allow_playback_interruption: bool,

            /// Content of the segment.
            #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
            pub content:
                std::option::Option<crate::model::response_message::mixed_audio::segment::Content>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl Segment {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [allow_playback_interruption][crate::model::response_message::mixed_audio::Segment::allow_playback_interruption].
            pub fn set_allow_playback_interruption<T: std::convert::Into<bool>>(
                mut self,
                v: T,
            ) -> Self {
                self.allow_playback_interruption = v.into();
                self
            }

            /// Sets the value of [content][crate::model::response_message::mixed_audio::Segment::content].
            ///
            /// Note that all the setters affecting `content` are mutually
            /// exclusive.
            pub fn set_content<
                T: std::convert::Into<
                        std::option::Option<
                            crate::model::response_message::mixed_audio::segment::Content,
                        >,
                    >,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.content = v.into();
                self
            }

            /// The value of [content][crate::model::response_message::mixed_audio::Segment::content]
            /// if it holds a `Audio`, `None` if the field is not set or
            /// holds a different branch.
            pub fn audio(&self) -> std::option::Option<&::bytes::Bytes> {
                #[allow(unreachable_patterns)]
                self.content.as_ref().and_then(|v| match v {
                    crate::model::response_message::mixed_audio::segment::Content::Audio(v) => {
                        std::option::Option::Some(v)
                    }
                    _ => std::option::Option::None,
                })
            }

            /// The value of [content][crate::model::response_message::mixed_audio::Segment::content]
            /// if it holds a `Uri`, `None` if the field is not set or
            /// holds a different branch.
            pub fn uri(&self) -> std::option::Option<&std::string::String> {
                #[allow(unreachable_patterns)]
                self.content.as_ref().and_then(|v| match v {
                    crate::model::response_message::mixed_audio::segment::Content::Uri(v) => {
                        std::option::Option::Some(v)
                    }
                    _ => std::option::Option::None,
                })
            }

            /// Sets the value of [content][crate::model::response_message::mixed_audio::Segment::content]
            /// to hold a `Audio`.
            ///
            /// Note that all the setters affecting `content` are
            /// mutually exclusive.
            pub fn set_audio<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
                self.content = std::option::Option::Some(
                    crate::model::response_message::mixed_audio::segment::Content::Audio(v.into()),
                );
                self
            }

            /// Sets the value of [content][crate::model::response_message::mixed_audio::Segment::content]
            /// to hold a `Uri`.
            ///
            /// Note that all the setters affecting `content` are
            /// mutually exclusive.
            pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.content = std::option::Option::Some(
                    crate::model::response_message::mixed_audio::segment::Content::Uri(v.into()),
                );
                self
            }
        }

        impl wkt::message::Message for Segment {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.cx.v3.ResponseMessage.MixedAudio.Segment"
            }
        }

        /// Defines additional types related to [Segment].
        pub mod segment {
            #[allow(unused_imports)]
            use super::*;

            /// Content of the segment.
            #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(rename_all = "camelCase")]
            #[non_exhaustive]
            pub enum Content {
                /// Raw audio synthesized from the Dialogflow agent's response using
                /// the output config specified in the request.
                Audio(::bytes::Bytes),
                /// Client-specific URI that points to an audio clip accessible to the
                /// client. Dialogflow does not impose any validation on it.
                Uri(std::string::String),
            }
        }
    }

    /// Represents the signal that telles the client to transfer the phone call
    /// connected to the agent to a third-party endpoint.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct TelephonyTransferCall {
        /// Endpoint to transfer the call to.
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub endpoint:
            std::option::Option<crate::model::response_message::telephony_transfer_call::Endpoint>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl TelephonyTransferCall {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [endpoint][crate::model::response_message::TelephonyTransferCall::endpoint].
        ///
        /// Note that all the setters affecting `endpoint` are mutually
        /// exclusive.
        pub fn set_endpoint<
            T: std::convert::Into<
                    std::option::Option<
                        crate::model::response_message::telephony_transfer_call::Endpoint,
                    >,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.endpoint = v.into();
            self
        }

        /// The value of [endpoint][crate::model::response_message::TelephonyTransferCall::endpoint]
        /// if it holds a `PhoneNumber`, `None` if the field is not set or
        /// holds a different branch.
        pub fn phone_number(&self) -> std::option::Option<&std::string::String> {
            #[allow(unreachable_patterns)]
            self.endpoint.as_ref().and_then(|v| match v {
                crate::model::response_message::telephony_transfer_call::Endpoint::PhoneNumber(
                    v,
                ) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [endpoint][crate::model::response_message::TelephonyTransferCall::endpoint]
        /// to hold a `PhoneNumber`.
        ///
        /// Note that all the setters affecting `endpoint` are
        /// mutually exclusive.
        pub fn set_phone_number<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.endpoint = std::option::Option::Some(
                crate::model::response_message::telephony_transfer_call::Endpoint::PhoneNumber(
                    v.into(),
                ),
            );
            self
        }
    }

    impl wkt::message::Message for TelephonyTransferCall {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.ResponseMessage.TelephonyTransferCall"
        }
    }

    /// Defines additional types related to [TelephonyTransferCall].
    pub mod telephony_transfer_call {
        #[allow(unused_imports)]
        use super::*;

        /// Endpoint to transfer the call to.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum Endpoint {
            /// Transfer the call to a phone number
            /// in [E.164 format](https://en.wikipedia.org/wiki/E.164).
            PhoneNumber(std::string::String),
        }
    }

    /// Represents info card response. If the response contains generative
    /// knowledge prediction, Dialogflow will return a payload with Infobot
    /// Messenger compatible info card.
    ///
    /// Otherwise, the info card response is skipped.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct KnowledgeInfoCard {
        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl KnowledgeInfoCard {
        pub fn new() -> Self {
            std::default::Default::default()
        }
    }

    impl wkt::message::Message for KnowledgeInfoCard {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.ResponseMessage.KnowledgeInfoCard"
        }
    }

    /// Represents different response types.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum ResponseType {
        /// Not specified.
        Unspecified,
        /// The response is from an [entry
        /// prompt][google.cloud.dialogflow.cx.v3.Page.entry_fulfillment] in the
        /// page.
        ///
        /// [google.cloud.dialogflow.cx.v3.Page.entry_fulfillment]: crate::model::Page::entry_fulfillment
        EntryPrompt,
        /// The response is from [form-filling
        /// prompt][google.cloud.dialogflow.cx.v3.Form.Parameter.fill_behavior] in
        /// the page.
        ///
        /// [google.cloud.dialogflow.cx.v3.Form.Parameter.fill_behavior]: crate::model::form::Parameter::fill_behavior
        ParameterPrompt,
        /// The response is from a [transition
        /// route][google.cloud.dialogflow.cx.v3.TransitionRoute] or an [event
        /// handler][EventHandler] in the page or flow or transition route group.
        ///
        /// [EventHandler]: crate::model::EventHandler
        /// [google.cloud.dialogflow.cx.v3.TransitionRoute]: crate::model::TransitionRoute
        HandlerPrompt,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [ResponseType::value] or
        /// [ResponseType::name].
        UnknownValue(response_type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod response_type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl ResponseType {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::EntryPrompt => std::option::Option::Some(1),
                Self::ParameterPrompt => std::option::Option::Some(2),
                Self::HandlerPrompt => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("RESPONSE_TYPE_UNSPECIFIED"),
                Self::EntryPrompt => std::option::Option::Some("ENTRY_PROMPT"),
                Self::ParameterPrompt => std::option::Option::Some("PARAMETER_PROMPT"),
                Self::HandlerPrompt => std::option::Option::Some("HANDLER_PROMPT"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for ResponseType {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for ResponseType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for ResponseType {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::EntryPrompt,
                2 => Self::ParameterPrompt,
                3 => Self::HandlerPrompt,
                _ => Self::UnknownValue(response_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for ResponseType {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "RESPONSE_TYPE_UNSPECIFIED" => Self::Unspecified,
                "ENTRY_PROMPT" => Self::EntryPrompt,
                "PARAMETER_PROMPT" => Self::ParameterPrompt,
                "HANDLER_PROMPT" => Self::HandlerPrompt,
                _ => Self::UnknownValue(response_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for ResponseType {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::EntryPrompt => serializer.serialize_i32(1),
                Self::ParameterPrompt => serializer.serialize_i32(2),
                Self::HandlerPrompt => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for ResponseType {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<ResponseType>::new(
                ".google.cloud.dialogflow.cx.v3.ResponseMessage.ResponseType",
            ))
        }
    }

    /// Required. The rich response message.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Message {
        /// Returns a text response.
        Text(std::boxed::Box<crate::model::response_message::Text>),
        /// Returns a response containing a custom, platform-specific payload.
        Payload(std::boxed::Box<wkt::Struct>),
        /// Indicates that the conversation succeeded.
        ConversationSuccess(std::boxed::Box<crate::model::response_message::ConversationSuccess>),
        /// A text or ssml response that is preferentially used for TTS output audio
        /// synthesis, as described in the comment on the ResponseMessage message.
        OutputAudioText(std::boxed::Box<crate::model::response_message::OutputAudioText>),
        /// Hands off conversation to a human agent.
        LiveAgentHandoff(std::boxed::Box<crate::model::response_message::LiveAgentHandoff>),
        /// Output only. A signal that indicates the interaction with the Dialogflow
        /// agent has ended. This message is generated by Dialogflow only when the
        /// conversation reaches `END_SESSION` page. It is not supposed to be defined
        /// by the user.
        ///
        /// It's guaranteed that there is at most one such message in each response.
        EndInteraction(std::boxed::Box<crate::model::response_message::EndInteraction>),
        /// Signal that the client should play an audio clip hosted at a
        /// client-specific URI. Dialogflow uses this to construct
        /// [mixed_audio][google.cloud.dialogflow.cx.v3.ResponseMessage.mixed_audio].
        /// However, Dialogflow itself does not try to read or process the URI in any
        /// way.
        ///
        /// [google.cloud.dialogflow.cx.v3.ResponseMessage.mixed_audio]: crate::model::ResponseMessage::message
        PlayAudio(std::boxed::Box<crate::model::response_message::PlayAudio>),
        /// Output only. An audio response message composed of both the synthesized
        /// Dialogflow agent responses and responses defined via
        /// [play_audio][google.cloud.dialogflow.cx.v3.ResponseMessage.play_audio].
        /// This message is generated by Dialogflow only and not supposed to be
        /// defined by the user.
        ///
        /// [google.cloud.dialogflow.cx.v3.ResponseMessage.play_audio]: crate::model::ResponseMessage::message
        MixedAudio(std::boxed::Box<crate::model::response_message::MixedAudio>),
        /// A signal that the client should transfer the phone call connected to
        /// this agent to a third-party endpoint.
        TelephonyTransferCall(
            std::boxed::Box<crate::model::response_message::TelephonyTransferCall>,
        ),
        /// Represents info card for knowledge answers, to be better rendered in
        /// Dialogflow Messenger.
        KnowledgeInfoCard(std::boxed::Box<crate::model::response_message::KnowledgeInfoCard>),
    }
}

/// Settings for Generative Safety.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SafetySettings {
    /// Banned phrases for generated text.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub banned_phrases: std::vec::Vec<crate::model::safety_settings::Phrase>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SafetySettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [banned_phrases][crate::model::SafetySettings::banned_phrases].
    pub fn set_banned_phrases<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::safety_settings::Phrase>,
    {
        use std::iter::Iterator;
        self.banned_phrases = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SafetySettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.SafetySettings"
    }
}

/// Defines additional types related to [SafetySettings].
pub mod safety_settings {
    #[allow(unused_imports)]
    use super::*;

    /// Text input which can be used for prompt or banned phrases.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Phrase {
        /// Required. Text input which can be used for prompt or banned phrases.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub text: std::string::String,

        /// Required. Language code of the phrase.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub language_code: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Phrase {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [text][crate::model::safety_settings::Phrase::text].
        pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.text = v.into();
            self
        }

        /// Sets the value of [language_code][crate::model::safety_settings::Phrase::language_code].
        pub fn set_language_code<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.language_code = v.into();
            self
        }
    }

    impl wkt::message::Message for Phrase {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.SafetySettings.Phrase"
        }
    }
}

/// The request message for
/// [SecuritySettingsService.GetSecuritySettings][google.cloud.dialogflow.cx.v3.SecuritySettingsService.GetSecuritySettings].
///
/// [google.cloud.dialogflow.cx.v3.SecuritySettingsService.GetSecuritySettings]: crate::client::SecuritySettingsService::get_security_settings
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetSecuritySettingsRequest {
    /// Required. Resource name of the settings.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/securitySettings/<securitysettingsID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetSecuritySettingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetSecuritySettingsRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetSecuritySettingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetSecuritySettingsRequest"
    }
}

/// The request message for
/// [SecuritySettingsService.UpdateSecuritySettings][google.cloud.dialogflow.cx.v3.SecuritySettingsService.UpdateSecuritySettings].
///
/// [google.cloud.dialogflow.cx.v3.SecuritySettingsService.UpdateSecuritySettings]: crate::client::SecuritySettingsService::update_security_settings
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateSecuritySettingsRequest {
    /// Required. [SecuritySettings] object that contains values for each of the
    /// fields to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub security_settings: std::option::Option<crate::model::SecuritySettings>,

    /// Required. The mask to control which fields get updated. If the mask is not
    /// present, all fields will be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateSecuritySettingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [security_settings][crate::model::UpdateSecuritySettingsRequest::security_settings].
    pub fn set_security_settings<
        T: std::convert::Into<std::option::Option<crate::model::SecuritySettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.security_settings = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateSecuritySettingsRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateSecuritySettingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.UpdateSecuritySettingsRequest"
    }
}

/// The request message for [SecuritySettings.ListSecuritySettings][].
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSecuritySettingsRequest {
    /// Required. The location to list all security settings for.
    /// Format: `projects/<ProjectID>/locations/<LocationID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return in a single page. By default 20 and
    /// at most 100.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListSecuritySettingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListSecuritySettingsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListSecuritySettingsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListSecuritySettingsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListSecuritySettingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListSecuritySettingsRequest"
    }
}

/// The response message for [SecuritySettings.ListSecuritySettings][].
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSecuritySettingsResponse {
    /// The list of security settings.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub security_settings: std::vec::Vec<crate::model::SecuritySettings>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListSecuritySettingsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListSecuritySettingsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [security_settings][crate::model::ListSecuritySettingsResponse::security_settings].
    pub fn set_security_settings<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SecuritySettings>,
    {
        use std::iter::Iterator;
        self.security_settings = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListSecuritySettingsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListSecuritySettingsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListSecuritySettingsResponse {
    type PageItem = crate::model::SecuritySettings;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.security_settings
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for [SecuritySettings.CreateSecuritySettings][].
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateSecuritySettingsRequest {
    /// Required. The location to create an
    /// [SecuritySettings][google.cloud.dialogflow.cx.v3.SecuritySettings] for.
    /// Format: `projects/<ProjectID>/locations/<LocationID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.SecuritySettings]: crate::model::SecuritySettings
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The security settings to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub security_settings: std::option::Option<crate::model::SecuritySettings>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateSecuritySettingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateSecuritySettingsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [security_settings][crate::model::CreateSecuritySettingsRequest::security_settings].
    pub fn set_security_settings<
        T: std::convert::Into<std::option::Option<crate::model::SecuritySettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.security_settings = v.into();
        self
    }
}

impl wkt::message::Message for CreateSecuritySettingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CreateSecuritySettingsRequest"
    }
}

/// The request message for [SecuritySettings.DeleteSecuritySettings][].
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteSecuritySettingsRequest {
    /// Required. The name of the
    /// [SecuritySettings][google.cloud.dialogflow.cx.v3.SecuritySettings] to
    /// delete. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/securitySettings/<SecuritySettingsID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.SecuritySettings]: crate::model::SecuritySettings
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteSecuritySettingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteSecuritySettingsRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteSecuritySettingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DeleteSecuritySettingsRequest"
    }
}

/// Represents the settings related to security issues, such as data redaction
/// and data retention. It may take hours for updates on the settings to
/// propagate to all the related components and take effect.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SecuritySettings {
    /// Resource name of the settings.
    /// Required for the
    /// [SecuritySettingsService.UpdateSecuritySettings][google.cloud.dialogflow.cx.v3.SecuritySettingsService.UpdateSecuritySettings]
    /// method.
    /// [SecuritySettingsService.CreateSecuritySettings][google.cloud.dialogflow.cx.v3.SecuritySettingsService.CreateSecuritySettings]
    /// populates the name automatically. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/securitySettings/<SecuritySettingsID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.SecuritySettingsService.CreateSecuritySettings]: crate::client::SecuritySettingsService::create_security_settings
    /// [google.cloud.dialogflow.cx.v3.SecuritySettingsService.UpdateSecuritySettings]: crate::client::SecuritySettingsService::update_security_settings
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The human-readable name of the security settings, unique within
    /// the location.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Strategy that defines how we do redaction.
    pub redaction_strategy: crate::model::security_settings::RedactionStrategy,

    /// Defines the data for which Dialogflow applies redaction. Dialogflow does
    /// not redact data that it does not have access to – for example, Cloud
    /// logging.
    pub redaction_scope: crate::model::security_settings::RedactionScope,

    /// [DLP](https://cloud.google.com/dlp/docs) inspect template name. Use this
    /// template to define inspect base settings.
    ///
    /// The `DLP Inspect Templates Reader` role is needed on the Dialogflow
    /// service identity service account (has the form
    /// `service-PROJECT_NUMBER@gcp-sa-dialogflow.iam.gserviceaccount.com`)
    /// for your agent's project.
    ///
    /// If empty, we use the default DLP inspect config.
    ///
    /// The template name will have one of the following formats:
    /// `projects/<ProjectID>/locations/<LocationID>/inspectTemplates/<TemplateID>`
    /// OR
    /// `organizations/<OrganizationID>/locations/<LocationID>/inspectTemplates/<TemplateID>`
    ///
    /// Note: `inspect_template` must be located in the same region as the
    /// `SecuritySettings`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub inspect_template: std::string::String,

    /// [DLP](https://cloud.google.com/dlp/docs) deidentify template name. Use this
    /// template to define de-identification configuration for the content.
    ///
    /// The `DLP De-identify Templates Reader` role is needed on the Dialogflow
    /// service identity service account (has the form
    /// `service-PROJECT_NUMBER@gcp-sa-dialogflow.iam.gserviceaccount.com`)
    /// for your agent's project.
    ///
    /// If empty, Dialogflow replaces sensitive info with `[redacted]` text.
    ///
    /// The template name will have one of the following formats:
    /// `projects/<ProjectID>/locations/<LocationID>/deidentifyTemplates/<TemplateID>`
    /// OR
    /// `organizations/<OrganizationID>/locations/<LocationID>/deidentifyTemplates/<TemplateID>`
    ///
    /// Note: `deidentify_template` must be located in the same region as the
    /// `SecuritySettings`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub deidentify_template: std::string::String,

    /// List of types of data to remove when retention settings triggers purge.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub purge_data_types: std::vec::Vec<crate::model::security_settings::PurgeDataType>,

    /// Controls audio export settings for post-conversation analytics when
    /// ingesting audio to conversations via [Participants.AnalyzeContent][] or
    /// [Participants.StreamingAnalyzeContent][].
    ///
    /// If
    /// [retention_strategy][google.cloud.dialogflow.cx.v3.SecuritySettings.retention_strategy]
    /// is set to REMOVE_AFTER_CONVERSATION or [audio_export_settings.gcs_bucket][]
    /// is empty, audio export is disabled.
    ///
    /// If audio export is enabled, audio is recorded and saved to
    /// [audio_export_settings.gcs_bucket][], subject to retention policy of
    /// [audio_export_settings.gcs_bucket][].
    ///
    /// This setting won't effect audio input for implicit sessions via
    /// [Sessions.DetectIntent][google.cloud.dialogflow.cx.v3.Sessions.DetectIntent]
    /// or
    /// [Sessions.StreamingDetectIntent][google.cloud.dialogflow.cx.v3.Sessions.StreamingDetectIntent].
    ///
    /// [google.cloud.dialogflow.cx.v3.SecuritySettings.retention_strategy]: crate::model::SecuritySettings::data_retention
    /// [google.cloud.dialogflow.cx.v3.Sessions.DetectIntent]: crate::client::Sessions::detect_intent
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub audio_export_settings:
        std::option::Option<crate::model::security_settings::AudioExportSettings>,

    /// Controls conversation exporting settings to Insights after conversation is
    /// completed.
    ///
    /// If
    /// [retention_strategy][google.cloud.dialogflow.cx.v3.SecuritySettings.retention_strategy]
    /// is set to REMOVE_AFTER_CONVERSATION, Insights export is disabled no matter
    /// what you configure here.
    ///
    /// [google.cloud.dialogflow.cx.v3.SecuritySettings.retention_strategy]: crate::model::SecuritySettings::data_retention
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub insights_export_settings:
        std::option::Option<crate::model::security_settings::InsightsExportSettings>,

    /// Specifies how data is retained. Note that even if the data is
    /// purged due to retention policy, we may still hold it in backup storage for
    /// a few days without allowing direct readings.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub data_retention: std::option::Option<crate::model::security_settings::DataRetention>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SecuritySettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::SecuritySettings::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::SecuritySettings::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [redaction_strategy][crate::model::SecuritySettings::redaction_strategy].
    pub fn set_redaction_strategy<
        T: std::convert::Into<crate::model::security_settings::RedactionStrategy>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.redaction_strategy = v.into();
        self
    }

    /// Sets the value of [redaction_scope][crate::model::SecuritySettings::redaction_scope].
    pub fn set_redaction_scope<
        T: std::convert::Into<crate::model::security_settings::RedactionScope>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.redaction_scope = v.into();
        self
    }

    /// Sets the value of [inspect_template][crate::model::SecuritySettings::inspect_template].
    pub fn set_inspect_template<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.inspect_template = v.into();
        self
    }

    /// Sets the value of [deidentify_template][crate::model::SecuritySettings::deidentify_template].
    pub fn set_deidentify_template<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.deidentify_template = v.into();
        self
    }

    /// Sets the value of [audio_export_settings][crate::model::SecuritySettings::audio_export_settings].
    pub fn set_audio_export_settings<
        T: std::convert::Into<
                std::option::Option<crate::model::security_settings::AudioExportSettings>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.audio_export_settings = v.into();
        self
    }

    /// Sets the value of [insights_export_settings][crate::model::SecuritySettings::insights_export_settings].
    pub fn set_insights_export_settings<
        T: std::convert::Into<
                std::option::Option<crate::model::security_settings::InsightsExportSettings>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.insights_export_settings = v.into();
        self
    }

    /// Sets the value of [purge_data_types][crate::model::SecuritySettings::purge_data_types].
    pub fn set_purge_data_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::security_settings::PurgeDataType>,
    {
        use std::iter::Iterator;
        self.purge_data_types = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [data_retention][crate::model::SecuritySettings::data_retention].
    ///
    /// Note that all the setters affecting `data_retention` are mutually
    /// exclusive.
    pub fn set_data_retention<
        T: std::convert::Into<std::option::Option<crate::model::security_settings::DataRetention>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.data_retention = v.into();
        self
    }

    /// The value of [data_retention][crate::model::SecuritySettings::data_retention]
    /// if it holds a `RetentionWindowDays`, `None` if the field is not set or
    /// holds a different branch.
    pub fn retention_window_days(&self) -> std::option::Option<&i32> {
        #[allow(unreachable_patterns)]
        self.data_retention.as_ref().and_then(|v| match v {
            crate::model::security_settings::DataRetention::RetentionWindowDays(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [data_retention][crate::model::SecuritySettings::data_retention]
    /// if it holds a `RetentionStrategy`, `None` if the field is not set or
    /// holds a different branch.
    pub fn retention_strategy(
        &self,
    ) -> std::option::Option<&crate::model::security_settings::RetentionStrategy> {
        #[allow(unreachable_patterns)]
        self.data_retention.as_ref().and_then(|v| match v {
            crate::model::security_settings::DataRetention::RetentionStrategy(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [data_retention][crate::model::SecuritySettings::data_retention]
    /// to hold a `RetentionWindowDays`.
    ///
    /// Note that all the setters affecting `data_retention` are
    /// mutually exclusive.
    pub fn set_retention_window_days<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.data_retention = std::option::Option::Some(
            crate::model::security_settings::DataRetention::RetentionWindowDays(v.into()),
        );
        self
    }

    /// Sets the value of [data_retention][crate::model::SecuritySettings::data_retention]
    /// to hold a `RetentionStrategy`.
    ///
    /// Note that all the setters affecting `data_retention` are
    /// mutually exclusive.
    pub fn set_retention_strategy<
        T: std::convert::Into<crate::model::security_settings::RetentionStrategy>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.data_retention = std::option::Option::Some(
            crate::model::security_settings::DataRetention::RetentionStrategy(v.into()),
        );
        self
    }
}

impl wkt::message::Message for SecuritySettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.SecuritySettings"
    }
}

/// Defines additional types related to [SecuritySettings].
pub mod security_settings {
    #[allow(unused_imports)]
    use super::*;

    /// Settings for exporting audio.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AudioExportSettings {
        /// Cloud Storage bucket to export audio record to.
        /// Setting this field would grant the Storage Object Creator role to
        /// the Dialogflow Service Agent.
        /// API caller that tries to modify this field should have the permission of
        /// storage.buckets.setIamPolicy.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub gcs_bucket: std::string::String,

        /// Filename pattern for exported audio.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub audio_export_pattern: std::string::String,

        /// Enable audio redaction if it is true.
        /// Note that this only redacts end-user audio data;
        /// Synthesised audio from the virtual agent is not redacted.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enable_audio_redaction: bool,

        /// File format for exported audio file. Currently only in telephony
        /// recordings.
        pub audio_format: crate::model::security_settings::audio_export_settings::AudioFormat,

        /// Whether to store TTS audio. By default, TTS audio from the virtual agent
        /// is not exported.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub store_tts_audio: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl AudioExportSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [gcs_bucket][crate::model::security_settings::AudioExportSettings::gcs_bucket].
        pub fn set_gcs_bucket<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.gcs_bucket = v.into();
            self
        }

        /// Sets the value of [audio_export_pattern][crate::model::security_settings::AudioExportSettings::audio_export_pattern].
        pub fn set_audio_export_pattern<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.audio_export_pattern = v.into();
            self
        }

        /// Sets the value of [enable_audio_redaction][crate::model::security_settings::AudioExportSettings::enable_audio_redaction].
        pub fn set_enable_audio_redaction<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enable_audio_redaction = v.into();
            self
        }

        /// Sets the value of [audio_format][crate::model::security_settings::AudioExportSettings::audio_format].
        pub fn set_audio_format<
            T: std::convert::Into<crate::model::security_settings::audio_export_settings::AudioFormat>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.audio_format = v.into();
            self
        }

        /// Sets the value of [store_tts_audio][crate::model::security_settings::AudioExportSettings::store_tts_audio].
        pub fn set_store_tts_audio<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.store_tts_audio = v.into();
            self
        }
    }

    impl wkt::message::Message for AudioExportSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.SecuritySettings.AudioExportSettings"
        }
    }

    /// Defines additional types related to [AudioExportSettings].
    pub mod audio_export_settings {
        #[allow(unused_imports)]
        use super::*;

        /// File format for exported audio file. Currently only in telephony
        /// recordings.
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum AudioFormat {
            /// Unspecified. Do not use.
            Unspecified,
            /// G.711 mu-law PCM with 8kHz sample rate.
            Mulaw,
            /// MP3 file format.
            Mp3,
            /// OGG Vorbis.
            Ogg,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [AudioFormat::value] or
            /// [AudioFormat::name].
            UnknownValue(audio_format::UnknownValue),
        }

        #[doc(hidden)]
        pub mod audio_format {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl AudioFormat {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::Unspecified => std::option::Option::Some(0),
                    Self::Mulaw => std::option::Option::Some(1),
                    Self::Mp3 => std::option::Option::Some(2),
                    Self::Ogg => std::option::Option::Some(3),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::Unspecified => std::option::Option::Some("AUDIO_FORMAT_UNSPECIFIED"),
                    Self::Mulaw => std::option::Option::Some("MULAW"),
                    Self::Mp3 => std::option::Option::Some("MP3"),
                    Self::Ogg => std::option::Option::Some("OGG"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for AudioFormat {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for AudioFormat {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for AudioFormat {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::Unspecified,
                    1 => Self::Mulaw,
                    2 => Self::Mp3,
                    3 => Self::Ogg,
                    _ => Self::UnknownValue(audio_format::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for AudioFormat {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "AUDIO_FORMAT_UNSPECIFIED" => Self::Unspecified,
                    "MULAW" => Self::Mulaw,
                    "MP3" => Self::Mp3,
                    "OGG" => Self::Ogg,
                    _ => Self::UnknownValue(audio_format::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for AudioFormat {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::Unspecified => serializer.serialize_i32(0),
                    Self::Mulaw => serializer.serialize_i32(1),
                    Self::Mp3 => serializer.serialize_i32(2),
                    Self::Ogg => serializer.serialize_i32(3),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for AudioFormat {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<AudioFormat>::new(
                    ".google.cloud.dialogflow.cx.v3.SecuritySettings.AudioExportSettings.AudioFormat"))
            }
        }
    }

    /// Settings for exporting conversations to
    /// [Insights](https://cloud.google.com/contact-center/insights/docs).
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct InsightsExportSettings {
        /// If enabled, we will automatically exports
        /// conversations to Insights and Insights runs its analyzers.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enable_insights_export: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl InsightsExportSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [enable_insights_export][crate::model::security_settings::InsightsExportSettings::enable_insights_export].
        pub fn set_enable_insights_export<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enable_insights_export = v.into();
            self
        }
    }

    impl wkt::message::Message for InsightsExportSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.SecuritySettings.InsightsExportSettings"
        }
    }

    /// Defines how we redact data.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum RedactionStrategy {
        /// Do not redact.
        Unspecified,
        /// Call redaction service to clean up the data to be persisted.
        RedactWithService,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [RedactionStrategy::value] or
        /// [RedactionStrategy::name].
        UnknownValue(redaction_strategy::UnknownValue),
    }

    #[doc(hidden)]
    pub mod redaction_strategy {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl RedactionStrategy {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::RedactWithService => std::option::Option::Some(1),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("REDACTION_STRATEGY_UNSPECIFIED"),
                Self::RedactWithService => std::option::Option::Some("REDACT_WITH_SERVICE"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for RedactionStrategy {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for RedactionStrategy {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for RedactionStrategy {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::RedactWithService,
                _ => Self::UnknownValue(redaction_strategy::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for RedactionStrategy {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "REDACTION_STRATEGY_UNSPECIFIED" => Self::Unspecified,
                "REDACT_WITH_SERVICE" => Self::RedactWithService,
                _ => Self::UnknownValue(redaction_strategy::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for RedactionStrategy {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::RedactWithService => serializer.serialize_i32(1),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for RedactionStrategy {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<RedactionStrategy>::new(
                ".google.cloud.dialogflow.cx.v3.SecuritySettings.RedactionStrategy",
            ))
        }
    }

    /// Defines what types of data to redact.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum RedactionScope {
        /// Don't redact any kind of data.
        Unspecified,
        /// On data to be written to disk or similar devices that are capable of
        /// holding data even if power is disconnected. This includes data that are
        /// temporarily saved on disk.
        RedactDiskStorage,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [RedactionScope::value] or
        /// [RedactionScope::name].
        UnknownValue(redaction_scope::UnknownValue),
    }

    #[doc(hidden)]
    pub mod redaction_scope {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl RedactionScope {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::RedactDiskStorage => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("REDACTION_SCOPE_UNSPECIFIED"),
                Self::RedactDiskStorage => std::option::Option::Some("REDACT_DISK_STORAGE"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for RedactionScope {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for RedactionScope {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for RedactionScope {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                2 => Self::RedactDiskStorage,
                _ => Self::UnknownValue(redaction_scope::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for RedactionScope {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "REDACTION_SCOPE_UNSPECIFIED" => Self::Unspecified,
                "REDACT_DISK_STORAGE" => Self::RedactDiskStorage,
                _ => Self::UnknownValue(redaction_scope::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for RedactionScope {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::RedactDiskStorage => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for RedactionScope {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<RedactionScope>::new(
                ".google.cloud.dialogflow.cx.v3.SecuritySettings.RedactionScope",
            ))
        }
    }

    /// Defines how long we retain persisted data that contains sensitive info.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum RetentionStrategy {
        /// Retains the persisted data with Dialogflow's internal default 365d TTLs.
        Unspecified,
        /// Removes data when the conversation ends. If there is no [Conversation][]
        /// explicitly established, a default conversation ends when the
        /// corresponding Dialogflow session ends.
        RemoveAfterConversation,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [RetentionStrategy::value] or
        /// [RetentionStrategy::name].
        UnknownValue(retention_strategy::UnknownValue),
    }

    #[doc(hidden)]
    pub mod retention_strategy {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl RetentionStrategy {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::RemoveAfterConversation => std::option::Option::Some(1),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("RETENTION_STRATEGY_UNSPECIFIED"),
                Self::RemoveAfterConversation => {
                    std::option::Option::Some("REMOVE_AFTER_CONVERSATION")
                }
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for RetentionStrategy {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for RetentionStrategy {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for RetentionStrategy {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::RemoveAfterConversation,
                _ => Self::UnknownValue(retention_strategy::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for RetentionStrategy {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "RETENTION_STRATEGY_UNSPECIFIED" => Self::Unspecified,
                "REMOVE_AFTER_CONVERSATION" => Self::RemoveAfterConversation,
                _ => Self::UnknownValue(retention_strategy::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for RetentionStrategy {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::RemoveAfterConversation => serializer.serialize_i32(1),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for RetentionStrategy {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<RetentionStrategy>::new(
                ".google.cloud.dialogflow.cx.v3.SecuritySettings.RetentionStrategy",
            ))
        }
    }

    /// Type of data we purge after retention settings triggers purge.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum PurgeDataType {
        /// Unspecified. Do not use.
        Unspecified,
        /// Dialogflow history. This does not include Cloud logging, which is
        /// owned by the user - not Dialogflow.
        DialogflowHistory,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [PurgeDataType::value] or
        /// [PurgeDataType::name].
        UnknownValue(purge_data_type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod purge_data_type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl PurgeDataType {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::DialogflowHistory => std::option::Option::Some(1),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("PURGE_DATA_TYPE_UNSPECIFIED"),
                Self::DialogflowHistory => std::option::Option::Some("DIALOGFLOW_HISTORY"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for PurgeDataType {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for PurgeDataType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for PurgeDataType {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::DialogflowHistory,
                _ => Self::UnknownValue(purge_data_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for PurgeDataType {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "PURGE_DATA_TYPE_UNSPECIFIED" => Self::Unspecified,
                "DIALOGFLOW_HISTORY" => Self::DialogflowHistory,
                _ => Self::UnknownValue(purge_data_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for PurgeDataType {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::DialogflowHistory => serializer.serialize_i32(1),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for PurgeDataType {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<PurgeDataType>::new(
                ".google.cloud.dialogflow.cx.v3.SecuritySettings.PurgeDataType",
            ))
        }
    }

    /// Specifies how data is retained. Note that even if the data is
    /// purged due to retention policy, we may still hold it in backup storage for
    /// a few days without allowing direct readings.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum DataRetention {
        /// Retains the data for the specified number of days.
        /// User must set a value lower than Dialogflow's default 365d TTL (30 days
        /// for Agent Assist traffic), higher value will be ignored and use default.
        /// Setting a value higher than that has no effect. A missing value or
        /// setting to 0 also means we use default TTL.
        /// When data retention configuration is changed, it only applies to the data
        /// created after the change; the TTL of existing data created before the
        /// change stays intact.
        RetentionWindowDays(i32),
        /// Specifies the retention behavior defined by
        /// [SecuritySettings.RetentionStrategy][google.cloud.dialogflow.cx.v3.SecuritySettings.RetentionStrategy].
        ///
        /// [google.cloud.dialogflow.cx.v3.SecuritySettings.RetentionStrategy]: crate::model::security_settings::RetentionStrategy
        RetentionStrategy(crate::model::security_settings::RetentionStrategy),
    }
}

/// Stores information about feedback provided by users about a response.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AnswerFeedback {
    /// Optional. Rating from user for the specific Dialogflow response.
    pub rating: crate::model::answer_feedback::Rating,

    /// Optional. In case of thumbs down rating provided, users can optionally
    /// provide context about the rating.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub rating_reason: std::option::Option<crate::model::answer_feedback::RatingReason>,

    /// Optional. Custom rating from the user about the provided answer, with
    /// maximum length of 1024 characters. For example, client could use a
    /// customized JSON object to indicate the rating.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub custom_rating: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AnswerFeedback {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [rating][crate::model::AnswerFeedback::rating].
    pub fn set_rating<T: std::convert::Into<crate::model::answer_feedback::Rating>>(
        mut self,
        v: T,
    ) -> Self {
        self.rating = v.into();
        self
    }

    /// Sets the value of [rating_reason][crate::model::AnswerFeedback::rating_reason].
    pub fn set_rating_reason<
        T: std::convert::Into<std::option::Option<crate::model::answer_feedback::RatingReason>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.rating_reason = v.into();
        self
    }

    /// Sets the value of [custom_rating][crate::model::AnswerFeedback::custom_rating].
    pub fn set_custom_rating<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.custom_rating = v.into();
        self
    }
}

impl wkt::message::Message for AnswerFeedback {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.AnswerFeedback"
    }
}

/// Defines additional types related to [AnswerFeedback].
pub mod answer_feedback {
    #[allow(unused_imports)]
    use super::*;

    /// Stores extra information about why users provided thumbs down rating.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct RatingReason {
        /// Optional. Custom reason labels for thumbs down rating provided by the
        /// user. The maximum number of labels allowed is 10 and the maximum length
        /// of a single label is 128 characters.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub reason_labels: std::vec::Vec<std::string::String>,

        /// Optional. Additional feedback about the rating.
        /// This field can be populated without choosing a predefined `reason`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub feedback: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl RatingReason {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [feedback][crate::model::answer_feedback::RatingReason::feedback].
        pub fn set_feedback<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.feedback = v.into();
            self
        }

        /// Sets the value of [reason_labels][crate::model::answer_feedback::RatingReason::reason_labels].
        pub fn set_reason_labels<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.reason_labels = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for RatingReason {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.AnswerFeedback.RatingReason"
        }
    }

    /// Represents thumbs up/down rating provided by user about a response.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Rating {
        /// Rating not specified.
        Unspecified,
        /// Thumbs up feedback from user.
        ThumbsUp,
        /// Thumbs down feedback from user.
        ThumbsDown,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [Rating::value] or
        /// [Rating::name].
        UnknownValue(rating::UnknownValue),
    }

    #[doc(hidden)]
    pub mod rating {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl Rating {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::ThumbsUp => std::option::Option::Some(1),
                Self::ThumbsDown => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("RATING_UNSPECIFIED"),
                Self::ThumbsUp => std::option::Option::Some("THUMBS_UP"),
                Self::ThumbsDown => std::option::Option::Some("THUMBS_DOWN"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for Rating {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for Rating {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for Rating {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::ThumbsUp,
                2 => Self::ThumbsDown,
                _ => Self::UnknownValue(rating::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for Rating {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "RATING_UNSPECIFIED" => Self::Unspecified,
                "THUMBS_UP" => Self::ThumbsUp,
                "THUMBS_DOWN" => Self::ThumbsDown,
                _ => Self::UnknownValue(rating::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for Rating {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::ThumbsUp => serializer.serialize_i32(1),
                Self::ThumbsDown => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for Rating {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<Rating>::new(
                ".google.cloud.dialogflow.cx.v3.AnswerFeedback.Rating",
            ))
        }
    }
}

/// The request to set the feedback for a bot answer.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SubmitAnswerFeedbackRequest {
    /// Required. The name of the session the feedback was sent to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub session: std::string::String,

    /// Required. ID of the response to update its feedback. This is the same as
    /// DetectIntentResponse.response_id.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub response_id: std::string::String,

    /// Required. Feedback provided for a bot answer.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub answer_feedback: std::option::Option<crate::model::AnswerFeedback>,

    /// Optional. The mask to control which fields to update. If the mask is not
    /// present, all fields will be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SubmitAnswerFeedbackRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [session][crate::model::SubmitAnswerFeedbackRequest::session].
    pub fn set_session<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.session = v.into();
        self
    }

    /// Sets the value of [response_id][crate::model::SubmitAnswerFeedbackRequest::response_id].
    pub fn set_response_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.response_id = v.into();
        self
    }

    /// Sets the value of [answer_feedback][crate::model::SubmitAnswerFeedbackRequest::answer_feedback].
    pub fn set_answer_feedback<
        T: std::convert::Into<std::option::Option<crate::model::AnswerFeedback>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.answer_feedback = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::SubmitAnswerFeedbackRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for SubmitAnswerFeedbackRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.SubmitAnswerFeedbackRequest"
    }
}

/// The request to detect user's intent.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DetectIntentRequest {
    /// Required. The name of the session this query is sent to.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<Session
    /// ID>` or
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>/sessions/<SessionID>`.
    /// If `Environment ID` is not specified, we assume default 'draft'
    /// environment.
    /// It's up to the API caller to choose an appropriate `Session ID`. It can be
    /// a random number or some type of session identifiers (preferably hashed).
    /// The length of the `Session ID` must not exceed 36 characters.
    ///
    /// For more information, see the [sessions
    /// guide](https://cloud.google.com/dialogflow/cx/docs/concept/session).
    ///
    /// Note: Always use agent versions for production traffic.
    /// See [Versions and
    /// environments](https://cloud.google.com/dialogflow/cx/docs/concept/version).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub session: std::string::String,

    /// The parameters of this query.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_params: std::option::Option<crate::model::QueryParameters>,

    /// Required. The input specification.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_input: std::option::Option<crate::model::QueryInput>,

    /// Instructs the speech synthesizer how to generate the output audio.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub output_audio_config: std::option::Option<crate::model::OutputAudioConfig>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DetectIntentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [session][crate::model::DetectIntentRequest::session].
    pub fn set_session<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.session = v.into();
        self
    }

    /// Sets the value of [query_params][crate::model::DetectIntentRequest::query_params].
    pub fn set_query_params<
        T: std::convert::Into<std::option::Option<crate::model::QueryParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query_params = v.into();
        self
    }

    /// Sets the value of [query_input][crate::model::DetectIntentRequest::query_input].
    pub fn set_query_input<T: std::convert::Into<std::option::Option<crate::model::QueryInput>>>(
        mut self,
        v: T,
    ) -> Self {
        self.query_input = v.into();
        self
    }

    /// Sets the value of [output_audio_config][crate::model::DetectIntentRequest::output_audio_config].
    pub fn set_output_audio_config<
        T: std::convert::Into<std::option::Option<crate::model::OutputAudioConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.output_audio_config = v.into();
        self
    }
}

impl wkt::message::Message for DetectIntentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DetectIntentRequest"
    }
}

/// The message returned from the DetectIntent method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DetectIntentResponse {
    /// Output only. The unique identifier of the response. It can be used to
    /// locate a response in the training example set or for reporting issues.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub response_id: std::string::String,

    /// The result of the conversational query.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_result: std::option::Option<crate::model::QueryResult>,

    /// The audio data bytes encoded as specified in the request.
    /// Note: The output audio is generated based on the values of default platform
    /// text responses found in the
    /// [`query_result.response_messages`][google.cloud.dialogflow.cx.v3.QueryResult.response_messages]
    /// field. If multiple default text responses exist, they will be concatenated
    /// when generating audio. If no default platform text responses exist, the
    /// generated audio content will be empty.
    ///
    /// In some scenarios, multiple output audio fields may be present in the
    /// response structure. In these cases, only the top-most-level audio output
    /// has content.
    ///
    /// [google.cloud.dialogflow.cx.v3.QueryResult.response_messages]: crate::model::QueryResult::response_messages
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub output_audio: ::bytes::Bytes,

    /// The config used by the speech synthesizer to generate the output audio.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub output_audio_config: std::option::Option<crate::model::OutputAudioConfig>,

    /// Response type.
    pub response_type: crate::model::detect_intent_response::ResponseType,

    /// Indicates whether the partial response can be cancelled when a later
    /// response arrives. e.g. if the agent specified some music as partial
    /// response, it can be cancelled.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub allow_cancellation: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DetectIntentResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [response_id][crate::model::DetectIntentResponse::response_id].
    pub fn set_response_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.response_id = v.into();
        self
    }

    /// Sets the value of [query_result][crate::model::DetectIntentResponse::query_result].
    pub fn set_query_result<
        T: std::convert::Into<std::option::Option<crate::model::QueryResult>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query_result = v.into();
        self
    }

    /// Sets the value of [output_audio][crate::model::DetectIntentResponse::output_audio].
    pub fn set_output_audio<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.output_audio = v.into();
        self
    }

    /// Sets the value of [output_audio_config][crate::model::DetectIntentResponse::output_audio_config].
    pub fn set_output_audio_config<
        T: std::convert::Into<std::option::Option<crate::model::OutputAudioConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.output_audio_config = v.into();
        self
    }

    /// Sets the value of [response_type][crate::model::DetectIntentResponse::response_type].
    pub fn set_response_type<
        T: std::convert::Into<crate::model::detect_intent_response::ResponseType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.response_type = v.into();
        self
    }

    /// Sets the value of [allow_cancellation][crate::model::DetectIntentResponse::allow_cancellation].
    pub fn set_allow_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_cancellation = v.into();
        self
    }
}

impl wkt::message::Message for DetectIntentResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DetectIntentResponse"
    }
}

/// Defines additional types related to [DetectIntentResponse].
pub mod detect_intent_response {
    #[allow(unused_imports)]
    use super::*;

    /// Represents different DetectIntentResponse types.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum ResponseType {
        /// Not specified. This should never happen.
        Unspecified,
        /// Partial response. e.g. Aggregated responses in a Fulfillment that enables
        /// `return_partial_response` can be returned as partial response.
        /// WARNING: partial response is not eligible for barge-in.
        Partial,
        /// Final response.
        Final,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [ResponseType::value] or
        /// [ResponseType::name].
        UnknownValue(response_type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod response_type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl ResponseType {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Partial => std::option::Option::Some(1),
                Self::Final => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("RESPONSE_TYPE_UNSPECIFIED"),
                Self::Partial => std::option::Option::Some("PARTIAL"),
                Self::Final => std::option::Option::Some("FINAL"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for ResponseType {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for ResponseType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for ResponseType {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Partial,
                2 => Self::Final,
                _ => Self::UnknownValue(response_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for ResponseType {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "RESPONSE_TYPE_UNSPECIFIED" => Self::Unspecified,
                "PARTIAL" => Self::Partial,
                "FINAL" => Self::Final,
                _ => Self::UnknownValue(response_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for ResponseType {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Partial => serializer.serialize_i32(1),
                Self::Final => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for ResponseType {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<ResponseType>::new(
                ".google.cloud.dialogflow.cx.v3.DetectIntentResponse.ResponseType",
            ))
        }
    }
}

/// The top-level message sent by the client to the
/// [Sessions.StreamingDetectIntent][google.cloud.dialogflow.cx.v3.Sessions.StreamingDetectIntent]
/// method.
///
/// Multiple request messages should be sent in order:
///
/// . The first message must contain
///   [session][google.cloud.dialogflow.cx.v3.StreamingDetectIntentRequest.session],
///   [query_input][google.cloud.dialogflow.cx.v3.StreamingDetectIntentRequest.query_input]
///   plus optionally
///   [query_params][google.cloud.dialogflow.cx.v3.StreamingDetectIntentRequest.query_params].
///   If the client wants to receive an audio response, it should also contain
///   [output_audio_config][google.cloud.dialogflow.cx.v3.StreamingDetectIntentRequest.output_audio_config].
///
/// . If
///   [query_input][google.cloud.dialogflow.cx.v3.StreamingDetectIntentRequest.query_input]
///   was set to
///   [query_input.audio.config][google.cloud.dialogflow.cx.v3.AudioInput.config],
///   all subsequent messages must contain
///   [query_input.audio.audio][google.cloud.dialogflow.cx.v3.AudioInput.audio]
///   to continue with Speech recognition. If you decide to rather detect an
///   intent from text input after you already started Speech recognition,
///   please send a message with
///   [query_input.text][google.cloud.dialogflow.cx.v3.QueryInput.text].
///
/// . However, note that:
///
///   * Dialogflow will bill you for the audio duration so far.
///   * Dialogflow discards all Speech recognition results in favor of the
///     input text.
///   * Dialogflow will use the language code from the first message.
///
/// After you sent all input, you must half-close or abort the request stream.
///
/// [google.cloud.dialogflow.cx.v3.AudioInput.audio]: crate::model::AudioInput::audio
/// [google.cloud.dialogflow.cx.v3.AudioInput.config]: crate::model::AudioInput::config
/// [google.cloud.dialogflow.cx.v3.QueryInput.text]: crate::model::QueryInput::input
/// [google.cloud.dialogflow.cx.v3.StreamingDetectIntentRequest.output_audio_config]: crate::model::StreamingDetectIntentRequest::output_audio_config
/// [google.cloud.dialogflow.cx.v3.StreamingDetectIntentRequest.query_input]: crate::model::StreamingDetectIntentRequest::query_input
/// [google.cloud.dialogflow.cx.v3.StreamingDetectIntentRequest.query_params]: crate::model::StreamingDetectIntentRequest::query_params
/// [google.cloud.dialogflow.cx.v3.StreamingDetectIntentRequest.session]: crate::model::StreamingDetectIntentRequest::session
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StreamingDetectIntentRequest {
    /// The name of the session this query is sent to.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<SessionID>`
    /// or
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>/sessions/<SessionID>`.
    /// If `Environment ID` is not specified, we assume default 'draft'
    /// environment.
    /// It's up to the API caller to choose an appropriate `Session ID`. It can be
    /// a random number or some type of session identifiers (preferably hashed).
    /// The length of the `Session ID` must not exceed 36 characters.
    /// Note: session must be set in the first request.
    ///
    /// For more information, see the [sessions
    /// guide](https://cloud.google.com/dialogflow/cx/docs/concept/session).
    ///
    /// Note: Always use agent versions for production traffic.
    /// See [Versions and
    /// environments](https://cloud.google.com/dialogflow/cx/docs/concept/version).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub session: std::string::String,

    /// The parameters of this query.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_params: std::option::Option<crate::model::QueryParameters>,

    /// Required. The input specification.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_input: std::option::Option<crate::model::QueryInput>,

    /// Instructs the speech synthesizer how to generate the output audio.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub output_audio_config: std::option::Option<crate::model::OutputAudioConfig>,

    /// Enable partial detect intent response. If this flag is not enabled,
    /// response stream still contains only one final `DetectIntentResponse` even
    /// if some `Fulfillment`s in the agent have been configured to return partial
    /// responses.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_partial_response: bool,

    /// If true, `StreamingDetectIntentResponse.debugging_info` will get populated.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_debugging_info: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl StreamingDetectIntentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [session][crate::model::StreamingDetectIntentRequest::session].
    pub fn set_session<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.session = v.into();
        self
    }

    /// Sets the value of [query_params][crate::model::StreamingDetectIntentRequest::query_params].
    pub fn set_query_params<
        T: std::convert::Into<std::option::Option<crate::model::QueryParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query_params = v.into();
        self
    }

    /// Sets the value of [query_input][crate::model::StreamingDetectIntentRequest::query_input].
    pub fn set_query_input<T: std::convert::Into<std::option::Option<crate::model::QueryInput>>>(
        mut self,
        v: T,
    ) -> Self {
        self.query_input = v.into();
        self
    }

    /// Sets the value of [output_audio_config][crate::model::StreamingDetectIntentRequest::output_audio_config].
    pub fn set_output_audio_config<
        T: std::convert::Into<std::option::Option<crate::model::OutputAudioConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.output_audio_config = v.into();
        self
    }

    /// Sets the value of [enable_partial_response][crate::model::StreamingDetectIntentRequest::enable_partial_response].
    pub fn set_enable_partial_response<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_partial_response = v.into();
        self
    }

    /// Sets the value of [enable_debugging_info][crate::model::StreamingDetectIntentRequest::enable_debugging_info].
    pub fn set_enable_debugging_info<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_debugging_info = v.into();
        self
    }
}

impl wkt::message::Message for StreamingDetectIntentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.StreamingDetectIntentRequest"
    }
}

/// Cloud conversation info for easier debugging.
/// It will get populated in `StreamingDetectIntentResponse` or
/// `StreamingAnalyzeContentResponse` when the flag `enable_debugging_info` is
/// set to true in corresponding requests.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CloudConversationDebuggingInfo {
    /// Number of input audio data chunks in streaming requests.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub audio_data_chunks: i32,

    /// Time offset of the end of speech utterance relative to the
    /// beginning of the first audio chunk.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub result_end_time_offset: std::option::Option<wkt::Duration>,

    /// Duration of first audio chunk.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub first_audio_duration: std::option::Option<wkt::Duration>,

    /// Whether client used single utterance mode.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub single_utterance: bool,

    /// Time offsets of the speech partial results relative to the beginning of
    /// the stream.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub speech_partial_results_end_times: std::vec::Vec<wkt::Duration>,

    /// Time offsets of the speech final results (is_final=true) relative to the
    /// beginning of the stream.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub speech_final_results_end_times: std::vec::Vec<wkt::Duration>,

    /// Total number of partial responses.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub partial_responses: i32,

    /// Time offset of Speaker ID stream close time relative to the Speech stream
    /// close time in milliseconds. Only meaningful for conversations involving
    /// passive verification.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub speaker_id_passive_latency_ms_offset: i32,

    /// Whether a barge-in event is triggered in this request.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub bargein_event_triggered: bool,

    /// Whether speech uses single utterance mode.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub speech_single_utterance: bool,

    /// Time offsets of the DTMF partial results relative to the beginning of
    /// the stream.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub dtmf_partial_results_times: std::vec::Vec<wkt::Duration>,

    /// Time offsets of the DTMF final results relative to the beginning of
    /// the stream.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub dtmf_final_results_times: std::vec::Vec<wkt::Duration>,

    /// Time offset of the end-of-single-utterance signal relative to the
    /// beginning of the stream.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub single_utterance_end_time_offset: std::option::Option<wkt::Duration>,

    /// No speech timeout settings for the stream.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub no_speech_timeout: std::option::Option<wkt::Duration>,

    /// Speech endpointing timeout settings for the stream.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub endpointing_timeout: std::option::Option<wkt::Duration>,

    /// Whether the streaming terminates with an injected text query.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub is_input_text: bool,

    /// Client half close time in terms of input audio duration.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub client_half_close_time_offset: std::option::Option<wkt::Duration>,

    /// Client half close time in terms of API streaming duration.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub client_half_close_streaming_time_offset: std::option::Option<wkt::Duration>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CloudConversationDebuggingInfo {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [audio_data_chunks][crate::model::CloudConversationDebuggingInfo::audio_data_chunks].
    pub fn set_audio_data_chunks<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.audio_data_chunks = v.into();
        self
    }

    /// Sets the value of [result_end_time_offset][crate::model::CloudConversationDebuggingInfo::result_end_time_offset].
    pub fn set_result_end_time_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.result_end_time_offset = v.into();
        self
    }

    /// Sets the value of [first_audio_duration][crate::model::CloudConversationDebuggingInfo::first_audio_duration].
    pub fn set_first_audio_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.first_audio_duration = v.into();
        self
    }

    /// Sets the value of [single_utterance][crate::model::CloudConversationDebuggingInfo::single_utterance].
    pub fn set_single_utterance<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.single_utterance = v.into();
        self
    }

    /// Sets the value of [partial_responses][crate::model::CloudConversationDebuggingInfo::partial_responses].
    pub fn set_partial_responses<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.partial_responses = v.into();
        self
    }

    /// Sets the value of [speaker_id_passive_latency_ms_offset][crate::model::CloudConversationDebuggingInfo::speaker_id_passive_latency_ms_offset].
    pub fn set_speaker_id_passive_latency_ms_offset<T: std::convert::Into<i32>>(
        mut self,
        v: T,
    ) -> Self {
        self.speaker_id_passive_latency_ms_offset = v.into();
        self
    }

    /// Sets the value of [bargein_event_triggered][crate::model::CloudConversationDebuggingInfo::bargein_event_triggered].
    pub fn set_bargein_event_triggered<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.bargein_event_triggered = v.into();
        self
    }

    /// Sets the value of [speech_single_utterance][crate::model::CloudConversationDebuggingInfo::speech_single_utterance].
    pub fn set_speech_single_utterance<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.speech_single_utterance = v.into();
        self
    }

    /// Sets the value of [single_utterance_end_time_offset][crate::model::CloudConversationDebuggingInfo::single_utterance_end_time_offset].
    pub fn set_single_utterance_end_time_offset<
        T: std::convert::Into<std::option::Option<wkt::Duration>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.single_utterance_end_time_offset = v.into();
        self
    }

    /// Sets the value of [no_speech_timeout][crate::model::CloudConversationDebuggingInfo::no_speech_timeout].
    pub fn set_no_speech_timeout<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.no_speech_timeout = v.into();
        self
    }

    /// Sets the value of [endpointing_timeout][crate::model::CloudConversationDebuggingInfo::endpointing_timeout].
    pub fn set_endpointing_timeout<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.endpointing_timeout = v.into();
        self
    }

    /// Sets the value of [is_input_text][crate::model::CloudConversationDebuggingInfo::is_input_text].
    pub fn set_is_input_text<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.is_input_text = v.into();
        self
    }

    /// Sets the value of [client_half_close_time_offset][crate::model::CloudConversationDebuggingInfo::client_half_close_time_offset].
    pub fn set_client_half_close_time_offset<
        T: std::convert::Into<std::option::Option<wkt::Duration>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.client_half_close_time_offset = v.into();
        self
    }

    /// Sets the value of [client_half_close_streaming_time_offset][crate::model::CloudConversationDebuggingInfo::client_half_close_streaming_time_offset].
    pub fn set_client_half_close_streaming_time_offset<
        T: std::convert::Into<std::option::Option<wkt::Duration>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.client_half_close_streaming_time_offset = v.into();
        self
    }

    /// Sets the value of [speech_partial_results_end_times][crate::model::CloudConversationDebuggingInfo::speech_partial_results_end_times].
    pub fn set_speech_partial_results_end_times<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::Duration>,
    {
        use std::iter::Iterator;
        self.speech_partial_results_end_times = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [speech_final_results_end_times][crate::model::CloudConversationDebuggingInfo::speech_final_results_end_times].
    pub fn set_speech_final_results_end_times<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::Duration>,
    {
        use std::iter::Iterator;
        self.speech_final_results_end_times = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [dtmf_partial_results_times][crate::model::CloudConversationDebuggingInfo::dtmf_partial_results_times].
    pub fn set_dtmf_partial_results_times<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::Duration>,
    {
        use std::iter::Iterator;
        self.dtmf_partial_results_times = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [dtmf_final_results_times][crate::model::CloudConversationDebuggingInfo::dtmf_final_results_times].
    pub fn set_dtmf_final_results_times<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::Duration>,
    {
        use std::iter::Iterator;
        self.dtmf_final_results_times = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CloudConversationDebuggingInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CloudConversationDebuggingInfo"
    }
}

/// The top-level message returned from the
/// [StreamingDetectIntent][google.cloud.dialogflow.cx.v3.Sessions.StreamingDetectIntent]
/// method.
///
/// Multiple response messages can be returned in order:
///
/// * If the `StreamingDetectIntentRequest.query_input.audio` field was
///   set, the first M messages contain `recognition_result`.
///   Each `recognition_result` represents a more complete transcript of what
///   the user said. The last `recognition_result` has `is_final` set to
///   `true`.
///
/// * If the `StreamingDetectIntentRequest.enable_partial_response` field was
///   true, the `detect_intent_response` field is populated for each
///   of the following N responses, where 0 <= N <= 5.
///   These responses set the
///   [DetectIntentResponse.response_type][google.cloud.dialogflow.cx.v3.DetectIntentResponse.response_type]
///   field to `PARTIAL`.
///
///
/// For the last response message, the `detect_intent_response` is fully
/// populated, and
/// [DetectIntentResponse.response_type][google.cloud.dialogflow.cx.v3.DetectIntentResponse.response_type]
/// is set to `FINAL`.
///
/// [google.cloud.dialogflow.cx.v3.DetectIntentResponse.response_type]: crate::model::DetectIntentResponse::response_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StreamingDetectIntentResponse {
    /// Debugging info that would get populated when
    /// `StreamingDetectIntentRequest.enable_debugging_info` is set to true.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub debugging_info: std::option::Option<crate::model::CloudConversationDebuggingInfo>,

    /// The output response.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub response: std::option::Option<crate::model::streaming_detect_intent_response::Response>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl StreamingDetectIntentResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [debugging_info][crate::model::StreamingDetectIntentResponse::debugging_info].
    pub fn set_debugging_info<
        T: std::convert::Into<std::option::Option<crate::model::CloudConversationDebuggingInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.debugging_info = v.into();
        self
    }

    /// Sets the value of [response][crate::model::StreamingDetectIntentResponse::response].
    ///
    /// Note that all the setters affecting `response` are mutually
    /// exclusive.
    pub fn set_response<
        T: std::convert::Into<
                std::option::Option<crate::model::streaming_detect_intent_response::Response>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.response = v.into();
        self
    }

    /// The value of [response][crate::model::StreamingDetectIntentResponse::response]
    /// if it holds a `RecognitionResult`, `None` if the field is not set or
    /// holds a different branch.
    pub fn recognition_result(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::StreamingRecognitionResult>> {
        #[allow(unreachable_patterns)]
        self.response.as_ref().and_then(|v| match v {
            crate::model::streaming_detect_intent_response::Response::RecognitionResult(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [response][crate::model::StreamingDetectIntentResponse::response]
    /// if it holds a `DetectIntentResponse`, `None` if the field is not set or
    /// holds a different branch.
    pub fn detect_intent_response(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::DetectIntentResponse>> {
        #[allow(unreachable_patterns)]
        self.response.as_ref().and_then(|v| match v {
            crate::model::streaming_detect_intent_response::Response::DetectIntentResponse(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [response][crate::model::StreamingDetectIntentResponse::response]
    /// to hold a `RecognitionResult`.
    ///
    /// Note that all the setters affecting `response` are
    /// mutually exclusive.
    pub fn set_recognition_result<
        T: std::convert::Into<std::boxed::Box<crate::model::StreamingRecognitionResult>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.response = std::option::Option::Some(
            crate::model::streaming_detect_intent_response::Response::RecognitionResult(v.into()),
        );
        self
    }

    /// Sets the value of [response][crate::model::StreamingDetectIntentResponse::response]
    /// to hold a `DetectIntentResponse`.
    ///
    /// Note that all the setters affecting `response` are
    /// mutually exclusive.
    pub fn set_detect_intent_response<
        T: std::convert::Into<std::boxed::Box<crate::model::DetectIntentResponse>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.response = std::option::Option::Some(
            crate::model::streaming_detect_intent_response::Response::DetectIntentResponse(
                v.into(),
            ),
        );
        self
    }
}

impl wkt::message::Message for StreamingDetectIntentResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.StreamingDetectIntentResponse"
    }
}

/// Defines additional types related to [StreamingDetectIntentResponse].
pub mod streaming_detect_intent_response {
    #[allow(unused_imports)]
    use super::*;

    /// The output response.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Response {
        /// The result of speech recognition.
        RecognitionResult(std::boxed::Box<crate::model::StreamingRecognitionResult>),
        /// The response from detect intent.
        DetectIntentResponse(std::boxed::Box<crate::model::DetectIntentResponse>),
    }
}

/// Contains a speech recognition result corresponding to a portion of the audio
/// that is currently being processed or an indication that this is the end
/// of the single requested utterance.
///
/// While end-user audio is being processed, Dialogflow sends a series of
/// results. Each result may contain a `transcript` value. A transcript
/// represents a portion of the utterance. While the recognizer is processing
/// audio, transcript values may be interim values or finalized values.
/// Once a transcript is finalized, the `is_final` value is set to true and
/// processing continues for the next transcript.
///
/// If `StreamingDetectIntentRequest.query_input.audio.config.single_utterance`
/// was true, and the recognizer has completed processing audio,
/// the `message_type` value is set to `END_OF_SINGLE_UTTERANCE and the
/// following (last) result contains the last finalized transcript.
///
/// The complete end-user utterance is determined by concatenating the
/// finalized transcript values received for the series of results.
///
/// In the following example, single utterance is enabled. In the case where
/// single utterance is not enabled, result 7 would not occur.
///
/// ```norust
/// Num | transcript              | message_type            | is_final
/// --- | ----------------------- | ----------------------- | --------
/// 1   | "tube"                  | TRANSCRIPT              | false
/// 2   | "to be a"               | TRANSCRIPT              | false
/// 3   | "to be"                 | TRANSCRIPT              | false
/// 4   | "to be or not to be"    | TRANSCRIPT              | true
/// 5   | "that's"                | TRANSCRIPT              | false
/// 6   | "that is                | TRANSCRIPT              | false
/// 7   | unset                   | END_OF_SINGLE_UTTERANCE | unset
/// 8   | " that is the question" | TRANSCRIPT              | true
/// ```
///
/// Concatenating the finalized transcripts with `is_final` set to true,
/// the complete utterance becomes "to be or not to be that is the question".
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StreamingRecognitionResult {
    /// Type of the result message.
    pub message_type: crate::model::streaming_recognition_result::MessageType,

    /// Transcript text representing the words that the user spoke.
    /// Populated if and only if `message_type` = `TRANSCRIPT`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub transcript: std::string::String,

    /// If `false`, the `StreamingRecognitionResult` represents an
    /// interim result that may change. If `true`, the recognizer will not return
    /// any further hypotheses about this piece of the audio. May only be populated
    /// for `message_type` = `TRANSCRIPT`.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub is_final: bool,

    /// The Speech confidence between 0.0 and 1.0 for the current portion of audio.
    /// A higher number indicates an estimated greater likelihood that the
    /// recognized words are correct. The default of 0.0 is a sentinel value
    /// indicating that confidence was not set.
    ///
    /// This field is typically only provided if `is_final` is true and you should
    /// not rely on it being accurate or even set.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub confidence: f32,

    /// An estimate of the likelihood that the speech recognizer will
    /// not change its guess about this interim recognition result:
    ///
    /// * If the value is unspecified or 0.0, Dialogflow didn't compute the
    ///   stability. In particular, Dialogflow will only provide stability for
    ///   `TRANSCRIPT` results with `is_final = false`.
    /// * Otherwise, the value is in (0.0, 1.0] where 0.0 means completely
    ///   unstable and 1.0 means completely stable.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub stability: f32,

    /// Word-specific information for the words recognized by Speech in
    /// [transcript][google.cloud.dialogflow.cx.v3.StreamingRecognitionResult.transcript].
    /// Populated if and only if `message_type` = `TRANSCRIPT` and
    /// [InputAudioConfig.enable_word_info] is set.
    ///
    /// [google.cloud.dialogflow.cx.v3.StreamingRecognitionResult.transcript]: crate::model::StreamingRecognitionResult::transcript
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub speech_word_info: std::vec::Vec<crate::model::SpeechWordInfo>,

    /// Time offset of the end of this Speech recognition result relative to the
    /// beginning of the audio. Only populated for `message_type` =
    /// `TRANSCRIPT`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub speech_end_offset: std::option::Option<wkt::Duration>,

    /// Detected language code for the transcript.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl StreamingRecognitionResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [message_type][crate::model::StreamingRecognitionResult::message_type].
    pub fn set_message_type<
        T: std::convert::Into<crate::model::streaming_recognition_result::MessageType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.message_type = v.into();
        self
    }

    /// Sets the value of [transcript][crate::model::StreamingRecognitionResult::transcript].
    pub fn set_transcript<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.transcript = v.into();
        self
    }

    /// Sets the value of [is_final][crate::model::StreamingRecognitionResult::is_final].
    pub fn set_is_final<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.is_final = v.into();
        self
    }

    /// Sets the value of [confidence][crate::model::StreamingRecognitionResult::confidence].
    pub fn set_confidence<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.confidence = v.into();
        self
    }

    /// Sets the value of [stability][crate::model::StreamingRecognitionResult::stability].
    pub fn set_stability<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.stability = v.into();
        self
    }

    /// Sets the value of [speech_end_offset][crate::model::StreamingRecognitionResult::speech_end_offset].
    pub fn set_speech_end_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.speech_end_offset = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::StreamingRecognitionResult::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [speech_word_info][crate::model::StreamingRecognitionResult::speech_word_info].
    pub fn set_speech_word_info<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SpeechWordInfo>,
    {
        use std::iter::Iterator;
        self.speech_word_info = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for StreamingRecognitionResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.StreamingRecognitionResult"
    }
}

/// Defines additional types related to [StreamingRecognitionResult].
pub mod streaming_recognition_result {
    #[allow(unused_imports)]
    use super::*;

    /// Type of the response message.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum MessageType {
        /// Not specified. Should never be used.
        Unspecified,
        /// Message contains a (possibly partial) transcript.
        Transcript,
        /// This event indicates that the server has detected the end of the user's
        /// speech utterance and expects no additional speech. Therefore, the server
        /// will not process additional audio (although it may subsequently return
        /// additional results). The client should stop sending additional audio
        /// data, half-close the gRPC connection, and wait for any additional results
        /// until the server closes the gRPC connection. This message is only sent if
        /// [`single_utterance`][google.cloud.dialogflow.cx.v3.InputAudioConfig.single_utterance]
        /// was set to `true`, and is not used otherwise.
        ///
        /// [google.cloud.dialogflow.cx.v3.InputAudioConfig.single_utterance]: crate::model::InputAudioConfig::single_utterance
        EndOfSingleUtterance,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [MessageType::value] or
        /// [MessageType::name].
        UnknownValue(message_type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod message_type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl MessageType {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Transcript => std::option::Option::Some(1),
                Self::EndOfSingleUtterance => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("MESSAGE_TYPE_UNSPECIFIED"),
                Self::Transcript => std::option::Option::Some("TRANSCRIPT"),
                Self::EndOfSingleUtterance => std::option::Option::Some("END_OF_SINGLE_UTTERANCE"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for MessageType {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for MessageType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for MessageType {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Transcript,
                2 => Self::EndOfSingleUtterance,
                _ => Self::UnknownValue(message_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for MessageType {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "MESSAGE_TYPE_UNSPECIFIED" => Self::Unspecified,
                "TRANSCRIPT" => Self::Transcript,
                "END_OF_SINGLE_UTTERANCE" => Self::EndOfSingleUtterance,
                _ => Self::UnknownValue(message_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for MessageType {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Transcript => serializer.serialize_i32(1),
                Self::EndOfSingleUtterance => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for MessageType {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<MessageType>::new(
                ".google.cloud.dialogflow.cx.v3.StreamingRecognitionResult.MessageType",
            ))
        }
    }
}

/// Represents the parameters of a conversational query.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct QueryParameters {
    /// The time zone of this conversational query from the [time zone
    /// database](https://www.iana.org/time-zones), e.g., America/New_York,
    /// Europe/Paris. If not provided, the time zone specified in the agent is
    /// used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub time_zone: std::string::String,

    /// The geo location of this conversational query.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub geo_location: std::option::Option<gtype::model::LatLng>,

    /// Additional session entity types to replace or extend developer entity types
    /// with. The entity synonyms apply to all languages and persist for the
    /// session of this query.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub session_entity_types: std::vec::Vec<crate::model::SessionEntityType>,

    /// This field can be used to pass custom data into the webhook associated with
    /// the agent. Arbitrary JSON objects are supported.
    /// Some integrations that query a Dialogflow agent may provide additional
    /// information in the payload.
    /// In particular, for the Dialogflow Phone Gateway integration, this field has
    /// the form:
    ///
    /// ```norust
    /// {
    ///  "telephony": {
    ///    "caller_id": "+18558363987"
    ///  }
    /// }
    /// ```
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub payload: std::option::Option<wkt::Struct>,

    /// Additional parameters to be put into [session
    /// parameters][SessionInfo.parameters]. To remove a
    /// parameter from the session, clients should explicitly set the parameter
    /// value to null.
    ///
    /// You can reference the session parameters in the agent with the following
    /// format: $session.params.parameter-id.
    ///
    /// Depending on your protocol or client library language, this is a
    /// map, associative array, symbol table, dictionary, or JSON object
    /// composed of a collection of (MapKey, MapValue) pairs:
    ///
    /// * MapKey type: string
    /// * MapKey value: parameter name
    /// * MapValue type: If parameter's entity type is a composite entity then use
    ///   map, otherwise, depending on the parameter value type, it could be one of
    ///   string, number, boolean, null, list or map.
    /// * MapValue value: If parameter's entity type is a composite entity then use
    ///   map from composite entity property names to property values, otherwise,
    ///   use parameter value.
    ///
    /// [SessionInfo.parameters]: crate::model::SessionInfo::parameters
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub parameters: std::option::Option<wkt::Struct>,

    /// The unique identifier of the [page][google.cloud.dialogflow.cx.v3.Page] to
    /// override the [current page][QueryResult.current_page] in the session.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/pages/<PageID>`.
    ///
    /// If `current_page` is specified, the previous state of the session will be
    /// ignored by Dialogflow, including the [previous
    /// page][QueryResult.current_page] and the [previous session
    /// parameters][QueryResult.parameters].
    /// In most cases,
    /// [current_page][google.cloud.dialogflow.cx.v3.QueryParameters.current_page]
    /// and [parameters][google.cloud.dialogflow.cx.v3.QueryParameters.parameters]
    /// should be configured together to direct a session to a specific state.
    ///
    /// [QueryResult.current_page]: crate::model::QueryResult::current_page
    /// [QueryResult.parameters]: crate::model::QueryResult::parameters
    /// [google.cloud.dialogflow.cx.v3.Page]: crate::model::Page
    /// [google.cloud.dialogflow.cx.v3.QueryParameters.current_page]: crate::model::QueryParameters::current_page
    /// [google.cloud.dialogflow.cx.v3.QueryParameters.parameters]: crate::model::QueryParameters::parameters
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub current_page: std::string::String,

    /// Whether to disable webhook calls for this request.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub disable_webhook: bool,

    /// Configures whether sentiment analysis should be performed. If not
    /// provided, sentiment analysis is not performed.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub analyze_query_text_sentiment: bool,

    /// This field can be used to pass HTTP headers for a webhook
    /// call. These headers will be sent to webhook along with the headers that
    /// have been configured through Dialogflow web console. The headers defined
    /// within this field will overwrite the headers configured through Dialogflow
    /// console if there is a conflict. Header names are case-insensitive.
    /// Google's specified headers are not allowed. Including: "Host",
    /// "Content-Length", "Connection", "From", "User-Agent", "Accept-Encoding",
    /// "If-Modified-Since", "If-None-Match", "X-Forwarded-For", etc.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub webhook_headers: std::collections::HashMap<std::string::String, std::string::String>,

    /// A list of flow versions to override for the request.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/versions/<VersionID>`.
    ///
    /// If version 1 of flow X is included in this list, the traffic of
    /// flow X will go through version 1 regardless of the version configuration in
    /// the environment. Each flow can have at most one version specified in this
    /// list.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub flow_versions: std::vec::Vec<std::string::String>,

    /// The channel which this query is for.
    ///
    /// If specified, only the
    /// [ResponseMessage][google.cloud.dialogflow.cx.v3.ResponseMessage] associated
    /// with the channel will be returned. If no
    /// [ResponseMessage][google.cloud.dialogflow.cx.v3.ResponseMessage] is
    /// associated with the channel, it falls back to the
    /// [ResponseMessage][google.cloud.dialogflow.cx.v3.ResponseMessage] with
    /// unspecified channel.
    ///
    /// If unspecified, the
    /// [ResponseMessage][google.cloud.dialogflow.cx.v3.ResponseMessage] with
    /// unspecified channel will be returned.
    ///
    /// [google.cloud.dialogflow.cx.v3.ResponseMessage]: crate::model::ResponseMessage
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub channel: std::string::String,

    /// Optional. Configure lifetime of the Dialogflow session.
    /// By default, a Dialogflow session remains active and its data is stored for
    /// 30 minutes after the last request is sent for the session.
    /// This value should be no longer than 1 day.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub session_ttl: std::option::Option<wkt::Duration>,

    /// Optional. Information about the end-user to improve the relevance and
    /// accuracy of generative answers.
    ///
    /// This will be interpreted and used by a language model, so, for good
    /// results, the data should be self-descriptive, and in a simple structure.
    ///
    /// Example:
    ///
    /// ```norust
    /// {
    ///   "subscription plan": "Business Premium Plus",
    ///   "devices owned": [
    ///     {"model": "Google Pixel 7"},
    ///     {"model": "Google Pixel Tablet"}
    ///   ]
    /// }
    /// ```
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_user_metadata: std::option::Option<wkt::Struct>,

    /// Optional. Search configuration for UCS search queries.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub search_config: std::option::Option<crate::model::SearchConfig>,

    /// Optional. If set to true and data stores are involved in serving the
    /// request then
    /// DetectIntentResponse.query_result.data_store_connection_signals
    /// will be filled with data that can help evaluations.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[deprecated]
    pub populate_data_store_connection_signals: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl QueryParameters {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [time_zone][crate::model::QueryParameters::time_zone].
    pub fn set_time_zone<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.time_zone = v.into();
        self
    }

    /// Sets the value of [geo_location][crate::model::QueryParameters::geo_location].
    pub fn set_geo_location<T: std::convert::Into<std::option::Option<gtype::model::LatLng>>>(
        mut self,
        v: T,
    ) -> Self {
        self.geo_location = v.into();
        self
    }

    /// Sets the value of [payload][crate::model::QueryParameters::payload].
    pub fn set_payload<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.payload = v.into();
        self
    }

    /// Sets the value of [parameters][crate::model::QueryParameters::parameters].
    pub fn set_parameters<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.parameters = v.into();
        self
    }

    /// Sets the value of [current_page][crate::model::QueryParameters::current_page].
    pub fn set_current_page<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.current_page = v.into();
        self
    }

    /// Sets the value of [disable_webhook][crate::model::QueryParameters::disable_webhook].
    pub fn set_disable_webhook<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.disable_webhook = v.into();
        self
    }

    /// Sets the value of [analyze_query_text_sentiment][crate::model::QueryParameters::analyze_query_text_sentiment].
    pub fn set_analyze_query_text_sentiment<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.analyze_query_text_sentiment = v.into();
        self
    }

    /// Sets the value of [channel][crate::model::QueryParameters::channel].
    pub fn set_channel<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.channel = v.into();
        self
    }

    /// Sets the value of [session_ttl][crate::model::QueryParameters::session_ttl].
    pub fn set_session_ttl<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.session_ttl = v.into();
        self
    }

    /// Sets the value of [end_user_metadata][crate::model::QueryParameters::end_user_metadata].
    pub fn set_end_user_metadata<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_user_metadata = v.into();
        self
    }

    /// Sets the value of [search_config][crate::model::QueryParameters::search_config].
    pub fn set_search_config<
        T: std::convert::Into<std::option::Option<crate::model::SearchConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.search_config = v.into();
        self
    }

    /// Sets the value of [populate_data_store_connection_signals][crate::model::QueryParameters::populate_data_store_connection_signals].
    #[deprecated]
    pub fn set_populate_data_store_connection_signals<T: std::convert::Into<bool>>(
        mut self,
        v: T,
    ) -> Self {
        self.populate_data_store_connection_signals = v.into();
        self
    }

    /// Sets the value of [session_entity_types][crate::model::QueryParameters::session_entity_types].
    pub fn set_session_entity_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SessionEntityType>,
    {
        use std::iter::Iterator;
        self.session_entity_types = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [flow_versions][crate::model::QueryParameters::flow_versions].
    pub fn set_flow_versions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.flow_versions = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [webhook_headers][crate::model::QueryParameters::webhook_headers].
    pub fn set_webhook_headers<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.webhook_headers = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for QueryParameters {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.QueryParameters"
    }
}

/// Search configuration for UCS search queries.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SearchConfig {
    /// Optional. Boosting configuration for the datastores.
    ///
    /// Maps from datastore name to their boost configuration. Do not specify more
    /// than one BoostSpecs for each datastore name. If multiple BoostSpecs are
    /// provided for the same datastore name, the behavior is undefined.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub boost_specs: std::vec::Vec<crate::model::BoostSpecs>,

    /// Optional. Filter configuration for the datastores.
    ///
    /// Maps from datastore name to the filter expression for that datastore. Do
    /// not specify more than one FilterSpecs for each datastore name. If multiple
    /// FilterSpecs are provided for the same datastore name, the behavior is
    /// undefined.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub filter_specs: std::vec::Vec<crate::model::FilterSpecs>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SearchConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [boost_specs][crate::model::SearchConfig::boost_specs].
    pub fn set_boost_specs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::BoostSpecs>,
    {
        use std::iter::Iterator;
        self.boost_specs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [filter_specs][crate::model::SearchConfig::filter_specs].
    pub fn set_filter_specs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::FilterSpecs>,
    {
        use std::iter::Iterator;
        self.filter_specs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SearchConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.SearchConfig"
    }
}

/// Boost specification to boost certain documents.
/// A copy of google.cloud.discoveryengine.v1main.BoostSpec, field documentation
/// is available at
/// <https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1alpha/BoostSpec>
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BoostSpec {
    /// Optional. Condition boost specifications. If a document matches multiple
    /// conditions in the specifications, boost scores from these specifications
    /// are all applied and combined in a non-linear way. Maximum number of
    /// specifications is 20.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub condition_boost_specs: std::vec::Vec<crate::model::boost_spec::ConditionBoostSpec>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BoostSpec {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [condition_boost_specs][crate::model::BoostSpec::condition_boost_specs].
    pub fn set_condition_boost_specs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::boost_spec::ConditionBoostSpec>,
    {
        use std::iter::Iterator;
        self.condition_boost_specs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BoostSpec {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.BoostSpec"
    }
}

/// Defines additional types related to [BoostSpec].
pub mod boost_spec {
    #[allow(unused_imports)]
    use super::*;

    /// Boost applies to documents which match a condition.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ConditionBoostSpec {
        /// Optional. An expression which specifies a boost condition. The syntax and
        /// supported fields are the same as a filter expression.
        /// Examples:
        ///
        /// * To boost documents with document ID "doc_1" or "doc_2", and
        ///   color
        ///   "Red" or "Blue":
        ///   * (id: ANY("doc_1", "doc_2")) AND (color: ANY("Red","Blue"))
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub condition: std::string::String,

        /// Optional. Strength of the condition boost, which should be in [-1, 1].
        /// Negative boost means demotion. Default is 0.0.
        ///
        /// Setting to 1.0 gives the document a big promotion. However, it does not
        /// necessarily mean that the boosted document will be the top result at
        /// all times, nor that other documents will be excluded. Results could
        /// still be shown even when none of them matches the condition. And
        /// results that are significantly more relevant to the search query can
        /// still trump your heavily favored but irrelevant documents.
        ///
        /// Setting to -1.0 gives the document a big demotion. However, results
        /// that are deeply relevant might still be shown. The document will have
        /// an upstream battle to get a fairly high ranking, but it is not blocked
        /// out completely.
        ///
        /// Setting to 0.0 means no boost applied. The boosting condition is
        /// ignored.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub boost: f32,

        /// Optional. Complex specification for custom ranking based on customer
        /// defined attribute value.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub boost_control_spec:
            std::option::Option<crate::model::boost_spec::condition_boost_spec::BoostControlSpec>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ConditionBoostSpec {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [condition][crate::model::boost_spec::ConditionBoostSpec::condition].
        pub fn set_condition<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.condition = v.into();
            self
        }

        /// Sets the value of [boost][crate::model::boost_spec::ConditionBoostSpec::boost].
        pub fn set_boost<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
            self.boost = v.into();
            self
        }

        /// Sets the value of [boost_control_spec][crate::model::boost_spec::ConditionBoostSpec::boost_control_spec].
        pub fn set_boost_control_spec<
            T: std::convert::Into<
                    std::option::Option<
                        crate::model::boost_spec::condition_boost_spec::BoostControlSpec,
                    >,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.boost_control_spec = v.into();
            self
        }
    }

    impl wkt::message::Message for ConditionBoostSpec {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.BoostSpec.ConditionBoostSpec"
        }
    }

    /// Defines additional types related to [ConditionBoostSpec].
    pub mod condition_boost_spec {
        #[allow(unused_imports)]
        use super::*;

        /// Specification for custom ranking based on customer specified attribute
        /// value. It provides more controls for customized ranking than the simple
        /// (condition, boost) combination above.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct BoostControlSpec {

            /// Optional. The name of the field whose value will be used to determine
            /// the boost amount.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub field_name: std::string::String,

            /// Optional. The attribute type to be used to determine the boost amount.
            /// The attribute value can be derived from the field value of the
            /// specified field_name. In the case of numerical it is straightforward
            /// i.e. attribute_value = numerical_field_value. In the case of freshness
            /// however, attribute_value = (time.now() - datetime_field_value).
            pub attribute_type: crate::model::boost_spec::condition_boost_spec::boost_control_spec::AttributeType,

            /// Optional. The interpolation type to be applied to connect the control
            /// points listed below.
            pub interpolation_type: crate::model::boost_spec::condition_boost_spec::boost_control_spec::InterpolationType,

            /// Optional. The control points used to define the curve. The monotonic
            /// function (defined through the interpolation_type above) passes through
            /// the control points listed here.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub control_points: std::vec::Vec<crate::model::boost_spec::condition_boost_spec::boost_control_spec::ControlPoint>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl BoostControlSpec {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [field_name][crate::model::boost_spec::condition_boost_spec::BoostControlSpec::field_name].
            pub fn set_field_name<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.field_name = v.into();
                self
            }

            /// Sets the value of [attribute_type][crate::model::boost_spec::condition_boost_spec::BoostControlSpec::attribute_type].
            pub fn set_attribute_type<T: std::convert::Into<crate::model::boost_spec::condition_boost_spec::boost_control_spec::AttributeType>>(mut self, v: T) -> Self{
                self.attribute_type = v.into();
                self
            }

            /// Sets the value of [interpolation_type][crate::model::boost_spec::condition_boost_spec::BoostControlSpec::interpolation_type].
            pub fn set_interpolation_type<T: std::convert::Into<crate::model::boost_spec::condition_boost_spec::boost_control_spec::InterpolationType>>(mut self, v: T) -> Self{
                self.interpolation_type = v.into();
                self
            }

            /// Sets the value of [control_points][crate::model::boost_spec::condition_boost_spec::BoostControlSpec::control_points].
            pub fn set_control_points<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<crate::model::boost_spec::condition_boost_spec::boost_control_spec::ControlPoint>
            {
                use std::iter::Iterator;
                self.control_points = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for BoostControlSpec {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.cx.v3.BoostSpec.ConditionBoostSpec.BoostControlSpec"
            }
        }

        /// Defines additional types related to [BoostControlSpec].
        pub mod boost_control_spec {
            #[allow(unused_imports)]
            use super::*;

            /// The control points used to define the curve. The curve defined
            /// through these control points can only be monotonically increasing
            /// or decreasing(constant values are acceptable).
            #[serde_with::serde_as]
            #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(default, rename_all = "camelCase")]
            #[non_exhaustive]
            pub struct ControlPoint {
                /// Optional. Can be one of:
                ///
                /// . The numerical field value.
                /// . The duration spec for freshness:
                ///   The value must be formatted as an XSD `dayTimeDuration` value (a
                ///   restricted subset of an ISO 8601 duration value). The pattern for
                ///   this is: `[nD][T[nH][nM][nS]]`.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub attribute_value: std::string::String,

                /// Optional. The value between -1 to 1 by which to boost the score if
                /// the attribute_value evaluates to the value specified above.
                #[serde(skip_serializing_if = "wkt::internal::is_default")]
                pub boost_amount: f32,

                #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
                _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
            }

            impl ControlPoint {
                pub fn new() -> Self {
                    std::default::Default::default()
                }

                /// Sets the value of [attribute_value][crate::model::boost_spec::condition_boost_spec::boost_control_spec::ControlPoint::attribute_value].
                pub fn set_attribute_value<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.attribute_value = v.into();
                    self
                }

                /// Sets the value of [boost_amount][crate::model::boost_spec::condition_boost_spec::boost_control_spec::ControlPoint::boost_amount].
                pub fn set_boost_amount<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
                    self.boost_amount = v.into();
                    self
                }
            }

            impl wkt::message::Message for ControlPoint {
                fn typename() -> &'static str {
                    "type.googleapis.com/google.cloud.dialogflow.cx.v3.BoostSpec.ConditionBoostSpec.BoostControlSpec.ControlPoint"
                }
            }

            /// The attribute(or function) for which the custom ranking is to be
            /// applied.
            ///
            /// # Working with unknown values
            ///
            /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
            /// additional enum variants at any time. Adding new variants is not considered
            /// a breaking change. Applications should write their code in anticipation of:
            ///
            /// - New values appearing in future releases of the client library, **and**
            /// - New values received dynamically, without application changes.
            ///
            /// Please consult the [Working with enums] section in the user guide for some
            /// guidelines.
            ///
            /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
            #[derive(Clone, Debug, PartialEq)]
            #[non_exhaustive]
            pub enum AttributeType {
                /// Unspecified AttributeType.
                Unspecified,
                /// The value of the numerical field will be used to dynamically update
                /// the boost amount. In this case, the attribute_value (the x value)
                /// of the control point will be the actual value of the numerical
                /// field for which the boost_amount is specified.
                Numerical,
                /// For the freshness use case the attribute value will be the duration
                /// between the current time and the date in the datetime field
                /// specified. The value must be formatted as an XSD `dayTimeDuration`
                /// value (a restricted subset of an ISO 8601 duration value). The
                /// pattern for this is: `[nD][T[nH][nM][nS]]`.
                /// E.g. `5D`, `3DT12H30M`, `T24H`.
                Freshness,
                /// If set, the enum was initialized with an unknown value.
                ///
                /// Applications can examine the value using [AttributeType::value] or
                /// [AttributeType::name].
                UnknownValue(attribute_type::UnknownValue),
            }

            #[doc(hidden)]
            pub mod attribute_type {
                #[allow(unused_imports)]
                use super::*;
                #[derive(Clone, Debug, PartialEq)]
                pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
            }

            impl AttributeType {
                /// Gets the enum value.
                ///
                /// Returns `None` if the enum contains an unknown value deserialized from
                /// the string representation of enums.
                pub fn value(&self) -> std::option::Option<i32> {
                    match self {
                        Self::Unspecified => std::option::Option::Some(0),
                        Self::Numerical => std::option::Option::Some(1),
                        Self::Freshness => std::option::Option::Some(2),
                        Self::UnknownValue(u) => u.0.value(),
                    }
                }

                /// Gets the enum value as a string.
                ///
                /// Returns `None` if the enum contains an unknown value deserialized from
                /// the integer representation of enums.
                pub fn name(&self) -> std::option::Option<&str> {
                    match self {
                        Self::Unspecified => {
                            std::option::Option::Some("ATTRIBUTE_TYPE_UNSPECIFIED")
                        }
                        Self::Numerical => std::option::Option::Some("NUMERICAL"),
                        Self::Freshness => std::option::Option::Some("FRESHNESS"),
                        Self::UnknownValue(u) => u.0.name(),
                    }
                }
            }

            impl std::default::Default for AttributeType {
                fn default() -> Self {
                    use std::convert::From;
                    Self::from(0)
                }
            }

            impl std::fmt::Display for AttributeType {
                fn fmt(
                    &self,
                    f: &mut std::fmt::Formatter<'_>,
                ) -> std::result::Result<(), std::fmt::Error> {
                    wkt::internal::display_enum(f, self.name(), self.value())
                }
            }

            impl std::convert::From<i32> for AttributeType {
                fn from(value: i32) -> Self {
                    match value {
                        0 => Self::Unspecified,
                        1 => Self::Numerical,
                        2 => Self::Freshness,
                        _ => Self::UnknownValue(attribute_type::UnknownValue(
                            wkt::internal::UnknownEnumValue::Integer(value),
                        )),
                    }
                }
            }

            impl std::convert::From<&str> for AttributeType {
                fn from(value: &str) -> Self {
                    use std::string::ToString;
                    match value {
                        "ATTRIBUTE_TYPE_UNSPECIFIED" => Self::Unspecified,
                        "NUMERICAL" => Self::Numerical,
                        "FRESHNESS" => Self::Freshness,
                        _ => Self::UnknownValue(attribute_type::UnknownValue(
                            wkt::internal::UnknownEnumValue::String(value.to_string()),
                        )),
                    }
                }
            }

            impl serde::ser::Serialize for AttributeType {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::Serializer,
                {
                    match self {
                        Self::Unspecified => serializer.serialize_i32(0),
                        Self::Numerical => serializer.serialize_i32(1),
                        Self::Freshness => serializer.serialize_i32(2),
                        Self::UnknownValue(u) => u.0.serialize(serializer),
                    }
                }
            }

            impl<'de> serde::de::Deserialize<'de> for AttributeType {
                fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
                where
                    D: serde::Deserializer<'de>,
                {
                    deserializer.deserialize_any(wkt::internal::EnumVisitor::<AttributeType>::new(
                        ".google.cloud.dialogflow.cx.v3.BoostSpec.ConditionBoostSpec.BoostControlSpec.AttributeType"))
                }
            }

            /// The interpolation type to be applied. Default will be linear
            /// (Piecewise Linear).
            ///
            /// # Working with unknown values
            ///
            /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
            /// additional enum variants at any time. Adding new variants is not considered
            /// a breaking change. Applications should write their code in anticipation of:
            ///
            /// - New values appearing in future releases of the client library, **and**
            /// - New values received dynamically, without application changes.
            ///
            /// Please consult the [Working with enums] section in the user guide for some
            /// guidelines.
            ///
            /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
            #[derive(Clone, Debug, PartialEq)]
            #[non_exhaustive]
            pub enum InterpolationType {
                /// Interpolation type is unspecified. In this case, it defaults to
                /// Linear.
                Unspecified,
                /// Piecewise linear interpolation will be applied.
                Linear,
                /// If set, the enum was initialized with an unknown value.
                ///
                /// Applications can examine the value using [InterpolationType::value] or
                /// [InterpolationType::name].
                UnknownValue(interpolation_type::UnknownValue),
            }

            #[doc(hidden)]
            pub mod interpolation_type {
                #[allow(unused_imports)]
                use super::*;
                #[derive(Clone, Debug, PartialEq)]
                pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
            }

            impl InterpolationType {
                /// Gets the enum value.
                ///
                /// Returns `None` if the enum contains an unknown value deserialized from
                /// the string representation of enums.
                pub fn value(&self) -> std::option::Option<i32> {
                    match self {
                        Self::Unspecified => std::option::Option::Some(0),
                        Self::Linear => std::option::Option::Some(1),
                        Self::UnknownValue(u) => u.0.value(),
                    }
                }

                /// Gets the enum value as a string.
                ///
                /// Returns `None` if the enum contains an unknown value deserialized from
                /// the integer representation of enums.
                pub fn name(&self) -> std::option::Option<&str> {
                    match self {
                        Self::Unspecified => {
                            std::option::Option::Some("INTERPOLATION_TYPE_UNSPECIFIED")
                        }
                        Self::Linear => std::option::Option::Some("LINEAR"),
                        Self::UnknownValue(u) => u.0.name(),
                    }
                }
            }

            impl std::default::Default for InterpolationType {
                fn default() -> Self {
                    use std::convert::From;
                    Self::from(0)
                }
            }

            impl std::fmt::Display for InterpolationType {
                fn fmt(
                    &self,
                    f: &mut std::fmt::Formatter<'_>,
                ) -> std::result::Result<(), std::fmt::Error> {
                    wkt::internal::display_enum(f, self.name(), self.value())
                }
            }

            impl std::convert::From<i32> for InterpolationType {
                fn from(value: i32) -> Self {
                    match value {
                        0 => Self::Unspecified,
                        1 => Self::Linear,
                        _ => Self::UnknownValue(interpolation_type::UnknownValue(
                            wkt::internal::UnknownEnumValue::Integer(value),
                        )),
                    }
                }
            }

            impl std::convert::From<&str> for InterpolationType {
                fn from(value: &str) -> Self {
                    use std::string::ToString;
                    match value {
                        "INTERPOLATION_TYPE_UNSPECIFIED" => Self::Unspecified,
                        "LINEAR" => Self::Linear,
                        _ => Self::UnknownValue(interpolation_type::UnknownValue(
                            wkt::internal::UnknownEnumValue::String(value.to_string()),
                        )),
                    }
                }
            }

            impl serde::ser::Serialize for InterpolationType {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::Serializer,
                {
                    match self {
                        Self::Unspecified => serializer.serialize_i32(0),
                        Self::Linear => serializer.serialize_i32(1),
                        Self::UnknownValue(u) => u.0.serialize(serializer),
                    }
                }
            }

            impl<'de> serde::de::Deserialize<'de> for InterpolationType {
                fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
                where
                    D: serde::Deserializer<'de>,
                {
                    deserializer.deserialize_any(wkt::internal::EnumVisitor::<InterpolationType>::new(
                        ".google.cloud.dialogflow.cx.v3.BoostSpec.ConditionBoostSpec.BoostControlSpec.InterpolationType"))
                }
            }
        }
    }
}

/// Boost specifications for data stores.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BoostSpecs {
    /// Optional. Data Stores where the boosting configuration is applied. The full
    /// names of the referenced data stores. Formats:
    /// `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`
    /// `projects/{project}/locations/{location}/dataStores/{data_store}`
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub data_stores: std::vec::Vec<std::string::String>,

    /// Optional. A list of boosting specifications.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub spec: std::vec::Vec<crate::model::BoostSpec>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BoostSpecs {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [data_stores][crate::model::BoostSpecs::data_stores].
    pub fn set_data_stores<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.data_stores = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [spec][crate::model::BoostSpecs::spec].
    pub fn set_spec<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::BoostSpec>,
    {
        use std::iter::Iterator;
        self.spec = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BoostSpecs {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.BoostSpecs"
    }
}

/// Filter specifications for data stores.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FilterSpecs {
    /// Optional. Data Stores where the boosting configuration is applied. The full
    /// names of the referenced data stores. Formats:
    /// `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`
    /// `projects/{project}/locations/{location}/dataStores/{data_store}`
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub data_stores: std::vec::Vec<std::string::String>,

    /// Optional. The filter expression to be applied.
    /// Expression syntax is documented at
    /// <https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata#filter-expression-syntax>
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl FilterSpecs {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [filter][crate::model::FilterSpecs::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [data_stores][crate::model::FilterSpecs::data_stores].
    pub fn set_data_stores<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.data_stores = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for FilterSpecs {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.FilterSpecs"
    }
}

/// Represents the query input. It can contain one of:
///
/// . A conversational query in the form of text.
///
/// . An intent query that specifies which intent to trigger.
///
/// . Natural language speech audio to be processed.
///
/// . An event to be triggered.
///
/// . DTMF digits to invoke an intent and fill in parameter value.
///
/// . The results of a tool executed by the client.
///
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct QueryInput {
    /// Required. The language of the input. See [Language
    /// Support](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// for a list of the currently supported language codes. Note that queries in
    /// the same session do not necessarily need to specify the same language.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// Required. The input specification.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub input: std::option::Option<crate::model::query_input::Input>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl QueryInput {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [language_code][crate::model::QueryInput::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [input][crate::model::QueryInput::input].
    ///
    /// Note that all the setters affecting `input` are mutually
    /// exclusive.
    pub fn set_input<
        T: std::convert::Into<std::option::Option<crate::model::query_input::Input>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.input = v.into();
        self
    }

    /// The value of [input][crate::model::QueryInput::input]
    /// if it holds a `Text`, `None` if the field is not set or
    /// holds a different branch.
    pub fn text(&self) -> std::option::Option<&std::boxed::Box<crate::model::TextInput>> {
        #[allow(unreachable_patterns)]
        self.input.as_ref().and_then(|v| match v {
            crate::model::query_input::Input::Text(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [input][crate::model::QueryInput::input]
    /// if it holds a `Intent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn intent(&self) -> std::option::Option<&std::boxed::Box<crate::model::IntentInput>> {
        #[allow(unreachable_patterns)]
        self.input.as_ref().and_then(|v| match v {
            crate::model::query_input::Input::Intent(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [input][crate::model::QueryInput::input]
    /// if it holds a `Audio`, `None` if the field is not set or
    /// holds a different branch.
    pub fn audio(&self) -> std::option::Option<&std::boxed::Box<crate::model::AudioInput>> {
        #[allow(unreachable_patterns)]
        self.input.as_ref().and_then(|v| match v {
            crate::model::query_input::Input::Audio(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [input][crate::model::QueryInput::input]
    /// if it holds a `Event`, `None` if the field is not set or
    /// holds a different branch.
    pub fn event(&self) -> std::option::Option<&std::boxed::Box<crate::model::EventInput>> {
        #[allow(unreachable_patterns)]
        self.input.as_ref().and_then(|v| match v {
            crate::model::query_input::Input::Event(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [input][crate::model::QueryInput::input]
    /// if it holds a `Dtmf`, `None` if the field is not set or
    /// holds a different branch.
    pub fn dtmf(&self) -> std::option::Option<&std::boxed::Box<crate::model::DtmfInput>> {
        #[allow(unreachable_patterns)]
        self.input.as_ref().and_then(|v| match v {
            crate::model::query_input::Input::Dtmf(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [input][crate::model::QueryInput::input]
    /// to hold a `Text`.
    ///
    /// Note that all the setters affecting `input` are
    /// mutually exclusive.
    pub fn set_text<T: std::convert::Into<std::boxed::Box<crate::model::TextInput>>>(
        mut self,
        v: T,
    ) -> Self {
        self.input = std::option::Option::Some(crate::model::query_input::Input::Text(v.into()));
        self
    }

    /// Sets the value of [input][crate::model::QueryInput::input]
    /// to hold a `Intent`.
    ///
    /// Note that all the setters affecting `input` are
    /// mutually exclusive.
    pub fn set_intent<T: std::convert::Into<std::boxed::Box<crate::model::IntentInput>>>(
        mut self,
        v: T,
    ) -> Self {
        self.input = std::option::Option::Some(crate::model::query_input::Input::Intent(v.into()));
        self
    }

    /// Sets the value of [input][crate::model::QueryInput::input]
    /// to hold a `Audio`.
    ///
    /// Note that all the setters affecting `input` are
    /// mutually exclusive.
    pub fn set_audio<T: std::convert::Into<std::boxed::Box<crate::model::AudioInput>>>(
        mut self,
        v: T,
    ) -> Self {
        self.input = std::option::Option::Some(crate::model::query_input::Input::Audio(v.into()));
        self
    }

    /// Sets the value of [input][crate::model::QueryInput::input]
    /// to hold a `Event`.
    ///
    /// Note that all the setters affecting `input` are
    /// mutually exclusive.
    pub fn set_event<T: std::convert::Into<std::boxed::Box<crate::model::EventInput>>>(
        mut self,
        v: T,
    ) -> Self {
        self.input = std::option::Option::Some(crate::model::query_input::Input::Event(v.into()));
        self
    }

    /// Sets the value of [input][crate::model::QueryInput::input]
    /// to hold a `Dtmf`.
    ///
    /// Note that all the setters affecting `input` are
    /// mutually exclusive.
    pub fn set_dtmf<T: std::convert::Into<std::boxed::Box<crate::model::DtmfInput>>>(
        mut self,
        v: T,
    ) -> Self {
        self.input = std::option::Option::Some(crate::model::query_input::Input::Dtmf(v.into()));
        self
    }
}

impl wkt::message::Message for QueryInput {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.QueryInput"
    }
}

/// Defines additional types related to [QueryInput].
pub mod query_input {
    #[allow(unused_imports)]
    use super::*;

    /// Required. The input specification.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Input {
        /// The natural language text to be processed.
        Text(std::boxed::Box<crate::model::TextInput>),
        /// The intent to be triggered.
        Intent(std::boxed::Box<crate::model::IntentInput>),
        /// The natural language speech audio to be processed.
        Audio(std::boxed::Box<crate::model::AudioInput>),
        /// The event to be triggered.
        Event(std::boxed::Box<crate::model::EventInput>),
        /// The DTMF event to be handled.
        Dtmf(std::boxed::Box<crate::model::DtmfInput>),
    }
}

/// Represents the result of a conversational query.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct QueryResult {
    /// The language that was triggered during intent detection.
    /// See [Language
    /// Support](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// for a list of the currently supported language codes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// The collected [session
    /// parameters][google.cloud.dialogflow.cx.v3.SessionInfo.parameters].
    ///
    /// Depending on your protocol or client library language, this is a
    /// map, associative array, symbol table, dictionary, or JSON object
    /// composed of a collection of (MapKey, MapValue) pairs:
    ///
    /// * MapKey type: string
    /// * MapKey value: parameter name
    /// * MapValue type: If parameter's entity type is a composite entity then use
    ///   map, otherwise, depending on the parameter value type, it could be one of
    ///   string, number, boolean, null, list or map.
    /// * MapValue value: If parameter's entity type is a composite entity then use
    ///   map from composite entity property names to property values, otherwise,
    ///   use parameter value.
    ///
    /// [google.cloud.dialogflow.cx.v3.SessionInfo.parameters]: crate::model::SessionInfo::parameters
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub parameters: std::option::Option<wkt::Struct>,

    /// The list of rich messages returned to the client. Responses vary from
    /// simple text messages to more sophisticated, structured payloads used
    /// to drive complex logic.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub response_messages: std::vec::Vec<crate::model::ResponseMessage>,

    /// The list of webhook ids in the order of call sequence.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub webhook_ids: std::vec::Vec<std::string::String>,

    /// The list of webhook display names in the order of call sequence.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub webhook_display_names: std::vec::Vec<std::string::String>,

    /// The list of webhook latencies in the order of call sequence.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub webhook_latencies: std::vec::Vec<wkt::Duration>,

    /// The list of webhook tags in the order of call sequence.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub webhook_tags: std::vec::Vec<std::string::String>,

    /// The list of webhook call status in the order of call sequence.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub webhook_statuses: std::vec::Vec<rpc::model::Status>,

    /// The list of webhook payload in
    /// [WebhookResponse.payload][google.cloud.dialogflow.cx.v3.WebhookResponse.payload],
    /// in the order of call sequence. If some webhook call fails or doesn't return
    /// any payload, an empty `Struct` would be used instead.
    ///
    /// [google.cloud.dialogflow.cx.v3.WebhookResponse.payload]: crate::model::WebhookResponse::payload
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub webhook_payloads: std::vec::Vec<wkt::Struct>,

    /// The current [Page][google.cloud.dialogflow.cx.v3.Page]. Some, not all
    /// fields are filled in this message, including but not limited to `name` and
    /// `display_name`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Page]: crate::model::Page
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub current_page: std::option::Option<crate::model::Page>,

    /// The current [Flow][google.cloud.dialogflow.cx.v3.Flow]. Some, not all
    /// fields are filled in this message, including but not limited to `name` and
    /// `display_name`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Flow]: crate::model::Flow
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub current_flow: std::option::Option<crate::model::Flow>,

    /// The [Intent][google.cloud.dialogflow.cx.v3.Intent] that matched the
    /// conversational query. Some, not all fields are filled in this message,
    /// including but not limited to: `name` and `display_name`. This field is
    /// deprecated, please use
    /// [QueryResult.match][google.cloud.dialogflow.cx.v3.QueryResult.match]
    /// instead.
    ///
    /// [google.cloud.dialogflow.cx.v3.Intent]: crate::model::Intent
    /// [google.cloud.dialogflow.cx.v3.QueryResult.match]: crate::model::QueryResult::match
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    #[deprecated]
    pub intent: std::option::Option<crate::model::Intent>,

    /// The intent detection confidence. Values range from 0.0 (completely
    /// uncertain) to 1.0 (completely certain).
    /// This value is for informational purpose only and is only used to
    /// help match the best intent within the classification threshold.
    /// This value may change for the same end-user expression at any time due to a
    /// model retraining or change in implementation.
    /// This field is deprecated, please use
    /// [QueryResult.match][google.cloud.dialogflow.cx.v3.QueryResult.match]
    /// instead.
    ///
    /// [google.cloud.dialogflow.cx.v3.QueryResult.match]: crate::model::QueryResult::match
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[deprecated]
    pub intent_detection_confidence: f32,

    /// Intent match result, could be an intent or an event.
    #[serde(rename = "match")]
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub r#match: std::option::Option<crate::model::Match>,

    /// The free-form diagnostic info. For example, this field could contain
    /// webhook call latency. The fields of this data can change without notice,
    /// so you should not write code that depends on its structure.
    ///
    /// One of the fields is called "Alternative Matched Intents", which may
    /// aid with debugging. The following describes these intent results:
    ///
    /// - The list is empty if no intent was matched to end-user input.
    /// - Only intents that are referenced in the currently active flow are
    ///   included.
    /// - The matched intent is included.
    /// - Other intents that could have matched end-user input, but did not match
    ///   because they are referenced by intent routes that are out of
    ///   [scope](https://cloud.google.com/dialogflow/cx/docs/concept/handler#scope),
    ///   are included.
    /// - Other intents referenced by intent routes in scope that matched end-user
    ///   input, but had a lower confidence score.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub diagnostic_info: std::option::Option<wkt::Struct>,

    /// The sentiment analyss result, which depends on
    /// [`analyze_query_text_sentiment`]
    /// [google.cloud.dialogflow.cx.v3.QueryParameters.analyze_query_text_sentiment],
    /// specified in the request.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub sentiment_analysis_result: std::option::Option<crate::model::SentimentAnalysisResult>,

    /// Returns the current advanced settings including IVR settings. Even though
    /// the operations configured by these settings are performed by Dialogflow,
    /// the client may need to perform special logic at the moment. For example, if
    /// Dialogflow exports audio to Google Cloud Storage, then the client may need
    /// to wait for the resulting object to appear in the bucket before proceeding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub advanced_settings: std::option::Option<crate::model::AdvancedSettings>,

    /// Indicates whether the Thumbs up/Thumbs down rating controls are need to be
    /// shown for the response in the Dialogflow Messenger widget.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub allow_answer_feedback: bool,

    /// Optional. Data store connection feature output signals.
    /// Filled only when data stores are involved in serving the query.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub data_store_connection_signals:
        std::option::Option<crate::model::DataStoreConnectionSignals>,

    /// The original conversational query.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub query: std::option::Option<crate::model::query_result::Query>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl QueryResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [language_code][crate::model::QueryResult::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [parameters][crate::model::QueryResult::parameters].
    pub fn set_parameters<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.parameters = v.into();
        self
    }

    /// Sets the value of [current_page][crate::model::QueryResult::current_page].
    pub fn set_current_page<T: std::convert::Into<std::option::Option<crate::model::Page>>>(
        mut self,
        v: T,
    ) -> Self {
        self.current_page = v.into();
        self
    }

    /// Sets the value of [current_flow][crate::model::QueryResult::current_flow].
    pub fn set_current_flow<T: std::convert::Into<std::option::Option<crate::model::Flow>>>(
        mut self,
        v: T,
    ) -> Self {
        self.current_flow = v.into();
        self
    }

    /// Sets the value of [intent][crate::model::QueryResult::intent].
    #[deprecated]
    pub fn set_intent<T: std::convert::Into<std::option::Option<crate::model::Intent>>>(
        mut self,
        v: T,
    ) -> Self {
        self.intent = v.into();
        self
    }

    /// Sets the value of [intent_detection_confidence][crate::model::QueryResult::intent_detection_confidence].
    #[deprecated]
    pub fn set_intent_detection_confidence<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.intent_detection_confidence = v.into();
        self
    }

    /// Sets the value of [r#match][crate::model::QueryResult::match].
    pub fn set_match<T: std::convert::Into<std::option::Option<crate::model::Match>>>(
        mut self,
        v: T,
    ) -> Self {
        self.r#match = v.into();
        self
    }

    /// Sets the value of [diagnostic_info][crate::model::QueryResult::diagnostic_info].
    pub fn set_diagnostic_info<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.diagnostic_info = v.into();
        self
    }

    /// Sets the value of [sentiment_analysis_result][crate::model::QueryResult::sentiment_analysis_result].
    pub fn set_sentiment_analysis_result<
        T: std::convert::Into<std::option::Option<crate::model::SentimentAnalysisResult>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.sentiment_analysis_result = v.into();
        self
    }

    /// Sets the value of [advanced_settings][crate::model::QueryResult::advanced_settings].
    pub fn set_advanced_settings<
        T: std::convert::Into<std::option::Option<crate::model::AdvancedSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.advanced_settings = v.into();
        self
    }

    /// Sets the value of [allow_answer_feedback][crate::model::QueryResult::allow_answer_feedback].
    pub fn set_allow_answer_feedback<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_answer_feedback = v.into();
        self
    }

    /// Sets the value of [data_store_connection_signals][crate::model::QueryResult::data_store_connection_signals].
    pub fn set_data_store_connection_signals<
        T: std::convert::Into<std::option::Option<crate::model::DataStoreConnectionSignals>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.data_store_connection_signals = v.into();
        self
    }

    /// Sets the value of [response_messages][crate::model::QueryResult::response_messages].
    pub fn set_response_messages<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ResponseMessage>,
    {
        use std::iter::Iterator;
        self.response_messages = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [webhook_ids][crate::model::QueryResult::webhook_ids].
    pub fn set_webhook_ids<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.webhook_ids = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [webhook_display_names][crate::model::QueryResult::webhook_display_names].
    pub fn set_webhook_display_names<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.webhook_display_names = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [webhook_latencies][crate::model::QueryResult::webhook_latencies].
    pub fn set_webhook_latencies<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::Duration>,
    {
        use std::iter::Iterator;
        self.webhook_latencies = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [webhook_tags][crate::model::QueryResult::webhook_tags].
    pub fn set_webhook_tags<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.webhook_tags = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [webhook_statuses][crate::model::QueryResult::webhook_statuses].
    pub fn set_webhook_statuses<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<rpc::model::Status>,
    {
        use std::iter::Iterator;
        self.webhook_statuses = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [webhook_payloads][crate::model::QueryResult::webhook_payloads].
    pub fn set_webhook_payloads<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::Struct>,
    {
        use std::iter::Iterator;
        self.webhook_payloads = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [query][crate::model::QueryResult::query].
    ///
    /// Note that all the setters affecting `query` are mutually
    /// exclusive.
    pub fn set_query<
        T: std::convert::Into<std::option::Option<crate::model::query_result::Query>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query = v.into();
        self
    }

    /// The value of [query][crate::model::QueryResult::query]
    /// if it holds a `Text`, `None` if the field is not set or
    /// holds a different branch.
    pub fn text(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.query.as_ref().and_then(|v| match v {
            crate::model::query_result::Query::Text(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [query][crate::model::QueryResult::query]
    /// if it holds a `TriggerIntent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn trigger_intent(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.query.as_ref().and_then(|v| match v {
            crate::model::query_result::Query::TriggerIntent(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [query][crate::model::QueryResult::query]
    /// if it holds a `Transcript`, `None` if the field is not set or
    /// holds a different branch.
    pub fn transcript(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.query.as_ref().and_then(|v| match v {
            crate::model::query_result::Query::Transcript(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [query][crate::model::QueryResult::query]
    /// if it holds a `TriggerEvent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn trigger_event(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.query.as_ref().and_then(|v| match v {
            crate::model::query_result::Query::TriggerEvent(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [query][crate::model::QueryResult::query]
    /// if it holds a `Dtmf`, `None` if the field is not set or
    /// holds a different branch.
    pub fn dtmf(&self) -> std::option::Option<&std::boxed::Box<crate::model::DtmfInput>> {
        #[allow(unreachable_patterns)]
        self.query.as_ref().and_then(|v| match v {
            crate::model::query_result::Query::Dtmf(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [query][crate::model::QueryResult::query]
    /// to hold a `Text`.
    ///
    /// Note that all the setters affecting `query` are
    /// mutually exclusive.
    pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query = std::option::Option::Some(crate::model::query_result::Query::Text(v.into()));
        self
    }

    /// Sets the value of [query][crate::model::QueryResult::query]
    /// to hold a `TriggerIntent`.
    ///
    /// Note that all the setters affecting `query` are
    /// mutually exclusive.
    pub fn set_trigger_intent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query =
            std::option::Option::Some(crate::model::query_result::Query::TriggerIntent(v.into()));
        self
    }

    /// Sets the value of [query][crate::model::QueryResult::query]
    /// to hold a `Transcript`.
    ///
    /// Note that all the setters affecting `query` are
    /// mutually exclusive.
    pub fn set_transcript<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query =
            std::option::Option::Some(crate::model::query_result::Query::Transcript(v.into()));
        self
    }

    /// Sets the value of [query][crate::model::QueryResult::query]
    /// to hold a `TriggerEvent`.
    ///
    /// Note that all the setters affecting `query` are
    /// mutually exclusive.
    pub fn set_trigger_event<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query =
            std::option::Option::Some(crate::model::query_result::Query::TriggerEvent(v.into()));
        self
    }

    /// Sets the value of [query][crate::model::QueryResult::query]
    /// to hold a `Dtmf`.
    ///
    /// Note that all the setters affecting `query` are
    /// mutually exclusive.
    pub fn set_dtmf<T: std::convert::Into<std::boxed::Box<crate::model::DtmfInput>>>(
        mut self,
        v: T,
    ) -> Self {
        self.query = std::option::Option::Some(crate::model::query_result::Query::Dtmf(v.into()));
        self
    }
}

impl wkt::message::Message for QueryResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.QueryResult"
    }
}

/// Defines additional types related to [QueryResult].
pub mod query_result {
    #[allow(unused_imports)]
    use super::*;

    /// The original conversational query.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Query {
        /// If [natural language text][google.cloud.dialogflow.cx.v3.TextInput] was
        /// provided as input, this field will contain a copy of the text.
        ///
        /// [google.cloud.dialogflow.cx.v3.TextInput]: crate::model::TextInput
        Text(std::string::String),
        /// If an [intent][google.cloud.dialogflow.cx.v3.IntentInput] was provided as
        /// input, this field will contain a copy of the intent identifier. Format:
        /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/intents/<IntentID>`.
        ///
        /// [google.cloud.dialogflow.cx.v3.IntentInput]: crate::model::IntentInput
        TriggerIntent(std::string::String),
        /// If [natural language speech
        /// audio][google.cloud.dialogflow.cx.v3.AudioInput] was provided as input,
        /// this field will contain the transcript for the audio.
        ///
        /// [google.cloud.dialogflow.cx.v3.AudioInput]: crate::model::AudioInput
        Transcript(std::string::String),
        /// If an [event][google.cloud.dialogflow.cx.v3.EventInput] was provided as
        /// input, this field will contain the name of the event.
        ///
        /// [google.cloud.dialogflow.cx.v3.EventInput]: crate::model::EventInput
        TriggerEvent(std::string::String),
        /// If a [DTMF][google.cloud.dialogflow.cx.v3.DtmfInput] was provided as
        /// input, this field will contain a copy of the
        /// [DtmfInput][google.cloud.dialogflow.cx.v3.DtmfInput].
        ///
        /// [google.cloud.dialogflow.cx.v3.DtmfInput]: crate::model::DtmfInput
        Dtmf(std::boxed::Box<crate::model::DtmfInput>),
    }
}

/// Represents the natural language text to be processed.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TextInput {
    /// Required. The UTF-8 encoded natural language text to be processed.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub text: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TextInput {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [text][crate::model::TextInput::text].
    pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.text = v.into();
        self
    }
}

impl wkt::message::Message for TextInput {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.TextInput"
    }
}

/// Represents the intent to trigger programmatically rather than as a result of
/// natural language processing.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct IntentInput {
    /// Required. The unique identifier of the intent.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/intents/<IntentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub intent: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl IntentInput {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [intent][crate::model::IntentInput::intent].
    pub fn set_intent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.intent = v.into();
        self
    }
}

impl wkt::message::Message for IntentInput {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.IntentInput"
    }
}

/// Represents the natural speech audio to be processed.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AudioInput {
    /// Required. Instructs the speech recognizer how to process the speech audio.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub config: std::option::Option<crate::model::InputAudioConfig>,

    /// The natural language speech audio to be processed.
    /// A single request can contain up to 2 minutes of speech audio data.
    /// The [transcribed
    /// text][google.cloud.dialogflow.cx.v3.QueryResult.transcript] cannot contain
    /// more than 256 bytes.
    ///
    /// For non-streaming audio detect intent, both `config` and `audio` must be
    /// provided.
    /// For streaming audio detect intent, `config` must be provided in
    /// the first request and `audio` must be provided in all following requests.
    ///
    /// [google.cloud.dialogflow.cx.v3.QueryResult.transcript]: crate::model::QueryResult::query
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub audio: ::bytes::Bytes,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AudioInput {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [config][crate::model::AudioInput::config].
    pub fn set_config<
        T: std::convert::Into<std::option::Option<crate::model::InputAudioConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.config = v.into();
        self
    }

    /// Sets the value of [audio][crate::model::AudioInput::audio].
    pub fn set_audio<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.audio = v.into();
        self
    }
}

impl wkt::message::Message for AudioInput {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.AudioInput"
    }
}

/// Represents the event to trigger.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EventInput {
    /// Name of the event.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub event: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl EventInput {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [event][crate::model::EventInput::event].
    pub fn set_event<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.event = v.into();
        self
    }
}

impl wkt::message::Message for EventInput {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.EventInput"
    }
}

/// Represents the input for dtmf event.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DtmfInput {
    /// The dtmf digits.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub digits: std::string::String,

    /// The finish digit (if any).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub finish_digit: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DtmfInput {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [digits][crate::model::DtmfInput::digits].
    pub fn set_digits<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.digits = v.into();
        self
    }

    /// Sets the value of [finish_digit][crate::model::DtmfInput::finish_digit].
    pub fn set_finish_digit<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.finish_digit = v.into();
        self
    }
}

impl wkt::message::Message for DtmfInput {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DtmfInput"
    }
}

/// Represents one match result of [MatchIntent][].
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Match {
    /// The [Intent][google.cloud.dialogflow.cx.v3.Intent] that matched the query.
    /// Some, not all fields are filled in this message, including but not limited
    /// to: `name` and `display_name`. Only filled for
    /// [`INTENT`][google.cloud.dialogflow.cx.v3.Match.MatchType] match type.
    ///
    /// [google.cloud.dialogflow.cx.v3.Intent]: crate::model::Intent
    /// [google.cloud.dialogflow.cx.v3.Match.MatchType]: crate::model::r#match::MatchType
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub intent: std::option::Option<crate::model::Intent>,

    /// The event that matched the query. Filled for
    /// [`EVENT`][google.cloud.dialogflow.cx.v3.Match.MatchType],
    /// [`NO_MATCH`][google.cloud.dialogflow.cx.v3.Match.MatchType] and
    /// [`NO_INPUT`][google.cloud.dialogflow.cx.v3.Match.MatchType] match types.
    ///
    /// [google.cloud.dialogflow.cx.v3.Match.MatchType]: crate::model::r#match::MatchType
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub event: std::string::String,

    /// The collection of parameters extracted from the query.
    ///
    /// Depending on your protocol or client library language, this is a
    /// map, associative array, symbol table, dictionary, or JSON object
    /// composed of a collection of (MapKey, MapValue) pairs:
    ///
    /// * MapKey type: string
    /// * MapKey value: parameter name
    /// * MapValue type: If parameter's entity type is a composite entity then use
    ///   map, otherwise, depending on the parameter value type, it could be one of
    ///   string, number, boolean, null, list or map.
    /// * MapValue value: If parameter's entity type is a composite entity then use
    ///   map from composite entity property names to property values, otherwise,
    ///   use parameter value.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub parameters: std::option::Option<wkt::Struct>,

    /// Final text input which was matched during MatchIntent. This value can be
    /// different from original input sent in request because of spelling
    /// correction or other processing.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub resolved_input: std::string::String,

    /// Type of this [Match][google.cloud.dialogflow.cx.v3.Match].
    ///
    /// [google.cloud.dialogflow.cx.v3.Match]: crate::model::Match
    pub match_type: crate::model::r#match::MatchType,

    /// The confidence of this match. Values range from 0.0 (completely uncertain)
    /// to 1.0 (completely certain).
    /// This value is for informational purpose only and is only used to help match
    /// the best intent within the classification threshold. This value may change
    /// for the same end-user expression at any time due to a model retraining or
    /// change in implementation.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub confidence: f32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Match {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [intent][crate::model::Match::intent].
    pub fn set_intent<T: std::convert::Into<std::option::Option<crate::model::Intent>>>(
        mut self,
        v: T,
    ) -> Self {
        self.intent = v.into();
        self
    }

    /// Sets the value of [event][crate::model::Match::event].
    pub fn set_event<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.event = v.into();
        self
    }

    /// Sets the value of [parameters][crate::model::Match::parameters].
    pub fn set_parameters<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.parameters = v.into();
        self
    }

    /// Sets the value of [resolved_input][crate::model::Match::resolved_input].
    pub fn set_resolved_input<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.resolved_input = v.into();
        self
    }

    /// Sets the value of [match_type][crate::model::Match::match_type].
    pub fn set_match_type<T: std::convert::Into<crate::model::r#match::MatchType>>(
        mut self,
        v: T,
    ) -> Self {
        self.match_type = v.into();
        self
    }

    /// Sets the value of [confidence][crate::model::Match::confidence].
    pub fn set_confidence<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.confidence = v.into();
        self
    }
}

impl wkt::message::Message for Match {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.Match"
    }
}

/// Defines additional types related to [Match].
pub mod r#match {
    #[allow(unused_imports)]
    use super::*;

    /// Type of a Match.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum MatchType {
        /// Not specified. Should never be used.
        Unspecified,
        /// The query was matched to an intent.
        Intent,
        /// The query directly triggered an intent.
        DirectIntent,
        /// The query was used for parameter filling.
        ParameterFilling,
        /// No match was found for the query.
        NoMatch,
        /// Indicates an empty query.
        NoInput,
        /// The query directly triggered an event.
        Event,
        /// The query was matched to a Knowledge Connector answer.
        KnowledgeConnector,
        /// The query was handled by a [`Playbook`][Playbook].
        Playbook,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [MatchType::value] or
        /// [MatchType::name].
        UnknownValue(match_type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod match_type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl MatchType {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Intent => std::option::Option::Some(1),
                Self::DirectIntent => std::option::Option::Some(2),
                Self::ParameterFilling => std::option::Option::Some(3),
                Self::NoMatch => std::option::Option::Some(4),
                Self::NoInput => std::option::Option::Some(5),
                Self::Event => std::option::Option::Some(6),
                Self::KnowledgeConnector => std::option::Option::Some(8),
                Self::Playbook => std::option::Option::Some(9),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("MATCH_TYPE_UNSPECIFIED"),
                Self::Intent => std::option::Option::Some("INTENT"),
                Self::DirectIntent => std::option::Option::Some("DIRECT_INTENT"),
                Self::ParameterFilling => std::option::Option::Some("PARAMETER_FILLING"),
                Self::NoMatch => std::option::Option::Some("NO_MATCH"),
                Self::NoInput => std::option::Option::Some("NO_INPUT"),
                Self::Event => std::option::Option::Some("EVENT"),
                Self::KnowledgeConnector => std::option::Option::Some("KNOWLEDGE_CONNECTOR"),
                Self::Playbook => std::option::Option::Some("PLAYBOOK"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for MatchType {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for MatchType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for MatchType {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Intent,
                2 => Self::DirectIntent,
                3 => Self::ParameterFilling,
                4 => Self::NoMatch,
                5 => Self::NoInput,
                6 => Self::Event,
                8 => Self::KnowledgeConnector,
                9 => Self::Playbook,
                _ => Self::UnknownValue(match_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for MatchType {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "MATCH_TYPE_UNSPECIFIED" => Self::Unspecified,
                "INTENT" => Self::Intent,
                "DIRECT_INTENT" => Self::DirectIntent,
                "PARAMETER_FILLING" => Self::ParameterFilling,
                "NO_MATCH" => Self::NoMatch,
                "NO_INPUT" => Self::NoInput,
                "EVENT" => Self::Event,
                "KNOWLEDGE_CONNECTOR" => Self::KnowledgeConnector,
                "PLAYBOOK" => Self::Playbook,
                _ => Self::UnknownValue(match_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for MatchType {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Intent => serializer.serialize_i32(1),
                Self::DirectIntent => serializer.serialize_i32(2),
                Self::ParameterFilling => serializer.serialize_i32(3),
                Self::NoMatch => serializer.serialize_i32(4),
                Self::NoInput => serializer.serialize_i32(5),
                Self::Event => serializer.serialize_i32(6),
                Self::KnowledgeConnector => serializer.serialize_i32(8),
                Self::Playbook => serializer.serialize_i32(9),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for MatchType {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<MatchType>::new(
                ".google.cloud.dialogflow.cx.v3.Match.MatchType",
            ))
        }
    }
}

/// Request of [MatchIntent][].
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MatchIntentRequest {
    /// Required. The name of the session this query is sent to.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<SessionID>`
    /// or
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>/sessions/<SessionID>`.
    /// If `Environment ID` is not specified, we assume default 'draft'
    /// environment.
    /// It's up to the API caller to choose an appropriate `Session ID`. It can be
    /// a random number or some type of session identifiers (preferably hashed).
    /// The length of the `Session ID` must not exceed 36 characters.
    ///
    /// For more information, see the [sessions
    /// guide](https://cloud.google.com/dialogflow/cx/docs/concept/session).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub session: std::string::String,

    /// The parameters of this query.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_params: std::option::Option<crate::model::QueryParameters>,

    /// Required. The input specification.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_input: std::option::Option<crate::model::QueryInput>,

    /// Persist session parameter changes from `query_params`.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub persist_parameter_changes: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MatchIntentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [session][crate::model::MatchIntentRequest::session].
    pub fn set_session<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.session = v.into();
        self
    }

    /// Sets the value of [query_params][crate::model::MatchIntentRequest::query_params].
    pub fn set_query_params<
        T: std::convert::Into<std::option::Option<crate::model::QueryParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query_params = v.into();
        self
    }

    /// Sets the value of [query_input][crate::model::MatchIntentRequest::query_input].
    pub fn set_query_input<T: std::convert::Into<std::option::Option<crate::model::QueryInput>>>(
        mut self,
        v: T,
    ) -> Self {
        self.query_input = v.into();
        self
    }

    /// Sets the value of [persist_parameter_changes][crate::model::MatchIntentRequest::persist_parameter_changes].
    pub fn set_persist_parameter_changes<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.persist_parameter_changes = v.into();
        self
    }
}

impl wkt::message::Message for MatchIntentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.MatchIntentRequest"
    }
}

/// Response of [MatchIntent][].
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MatchIntentResponse {
    /// Match results, if more than one, ordered descendingly by the confidence
    /// we have that the particular intent matches the query.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub matches: std::vec::Vec<crate::model::Match>,

    /// The current [Page][google.cloud.dialogflow.cx.v3.Page]. Some, not all
    /// fields are filled in this message, including but not limited to `name` and
    /// `display_name`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Page]: crate::model::Page
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub current_page: std::option::Option<crate::model::Page>,

    /// The original conversational query.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub query: std::option::Option<crate::model::match_intent_response::Query>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MatchIntentResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [current_page][crate::model::MatchIntentResponse::current_page].
    pub fn set_current_page<T: std::convert::Into<std::option::Option<crate::model::Page>>>(
        mut self,
        v: T,
    ) -> Self {
        self.current_page = v.into();
        self
    }

    /// Sets the value of [matches][crate::model::MatchIntentResponse::matches].
    pub fn set_matches<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Match>,
    {
        use std::iter::Iterator;
        self.matches = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [query][crate::model::MatchIntentResponse::query].
    ///
    /// Note that all the setters affecting `query` are mutually
    /// exclusive.
    pub fn set_query<
        T: std::convert::Into<std::option::Option<crate::model::match_intent_response::Query>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query = v.into();
        self
    }

    /// The value of [query][crate::model::MatchIntentResponse::query]
    /// if it holds a `Text`, `None` if the field is not set or
    /// holds a different branch.
    pub fn text(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.query.as_ref().and_then(|v| match v {
            crate::model::match_intent_response::Query::Text(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [query][crate::model::MatchIntentResponse::query]
    /// if it holds a `TriggerIntent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn trigger_intent(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.query.as_ref().and_then(|v| match v {
            crate::model::match_intent_response::Query::TriggerIntent(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [query][crate::model::MatchIntentResponse::query]
    /// if it holds a `Transcript`, `None` if the field is not set or
    /// holds a different branch.
    pub fn transcript(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.query.as_ref().and_then(|v| match v {
            crate::model::match_intent_response::Query::Transcript(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [query][crate::model::MatchIntentResponse::query]
    /// if it holds a `TriggerEvent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn trigger_event(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.query.as_ref().and_then(|v| match v {
            crate::model::match_intent_response::Query::TriggerEvent(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [query][crate::model::MatchIntentResponse::query]
    /// to hold a `Text`.
    ///
    /// Note that all the setters affecting `query` are
    /// mutually exclusive.
    pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query =
            std::option::Option::Some(crate::model::match_intent_response::Query::Text(v.into()));
        self
    }

    /// Sets the value of [query][crate::model::MatchIntentResponse::query]
    /// to hold a `TriggerIntent`.
    ///
    /// Note that all the setters affecting `query` are
    /// mutually exclusive.
    pub fn set_trigger_intent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query = std::option::Option::Some(
            crate::model::match_intent_response::Query::TriggerIntent(v.into()),
        );
        self
    }

    /// Sets the value of [query][crate::model::MatchIntentResponse::query]
    /// to hold a `Transcript`.
    ///
    /// Note that all the setters affecting `query` are
    /// mutually exclusive.
    pub fn set_transcript<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query = std::option::Option::Some(
            crate::model::match_intent_response::Query::Transcript(v.into()),
        );
        self
    }

    /// Sets the value of [query][crate::model::MatchIntentResponse::query]
    /// to hold a `TriggerEvent`.
    ///
    /// Note that all the setters affecting `query` are
    /// mutually exclusive.
    pub fn set_trigger_event<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query = std::option::Option::Some(
            crate::model::match_intent_response::Query::TriggerEvent(v.into()),
        );
        self
    }
}

impl wkt::message::Message for MatchIntentResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.MatchIntentResponse"
    }
}

/// Defines additional types related to [MatchIntentResponse].
pub mod match_intent_response {
    #[allow(unused_imports)]
    use super::*;

    /// The original conversational query.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Query {
        /// If [natural language text][google.cloud.dialogflow.cx.v3.TextInput] was
        /// provided as input, this field will contain a copy of the text.
        ///
        /// [google.cloud.dialogflow.cx.v3.TextInput]: crate::model::TextInput
        Text(std::string::String),
        /// If an [intent][google.cloud.dialogflow.cx.v3.IntentInput] was provided as
        /// input, this field will contain a copy of the intent identifier. Format:
        /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/intents/<IntentID>`.
        ///
        /// [google.cloud.dialogflow.cx.v3.IntentInput]: crate::model::IntentInput
        TriggerIntent(std::string::String),
        /// If [natural language speech
        /// audio][google.cloud.dialogflow.cx.v3.AudioInput] was provided as input,
        /// this field will contain the transcript for the audio.
        ///
        /// [google.cloud.dialogflow.cx.v3.AudioInput]: crate::model::AudioInput
        Transcript(std::string::String),
        /// If an [event][google.cloud.dialogflow.cx.v3.EventInput] was provided as
        /// input, this field will contain a copy of the event name.
        ///
        /// [google.cloud.dialogflow.cx.v3.EventInput]: crate::model::EventInput
        TriggerEvent(std::string::String),
    }
}

/// Request of [FulfillIntent][]
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FulfillIntentRequest {
    /// Must be same as the corresponding MatchIntent request, otherwise the
    /// behavior is undefined.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub match_intent_request: std::option::Option<crate::model::MatchIntentRequest>,

    /// The matched intent/event to fulfill.
    #[serde(rename = "match")]
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub r#match: std::option::Option<crate::model::Match>,

    /// Instructs the speech synthesizer how to generate output audio.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub output_audio_config: std::option::Option<crate::model::OutputAudioConfig>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl FulfillIntentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [match_intent_request][crate::model::FulfillIntentRequest::match_intent_request].
    pub fn set_match_intent_request<
        T: std::convert::Into<std::option::Option<crate::model::MatchIntentRequest>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.match_intent_request = v.into();
        self
    }

    /// Sets the value of [r#match][crate::model::FulfillIntentRequest::match].
    pub fn set_match<T: std::convert::Into<std::option::Option<crate::model::Match>>>(
        mut self,
        v: T,
    ) -> Self {
        self.r#match = v.into();
        self
    }

    /// Sets the value of [output_audio_config][crate::model::FulfillIntentRequest::output_audio_config].
    pub fn set_output_audio_config<
        T: std::convert::Into<std::option::Option<crate::model::OutputAudioConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.output_audio_config = v.into();
        self
    }
}

impl wkt::message::Message for FulfillIntentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.FulfillIntentRequest"
    }
}

/// Response of [FulfillIntent][]
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FulfillIntentResponse {
    /// Output only. The unique identifier of the response. It can be used to
    /// locate a response in the training example set or for reporting issues.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub response_id: std::string::String,

    /// The result of the conversational query.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_result: std::option::Option<crate::model::QueryResult>,

    /// The audio data bytes encoded as specified in the request.
    /// Note: The output audio is generated based on the values of default platform
    /// text responses found in the
    /// [`query_result.response_messages`][google.cloud.dialogflow.cx.v3.QueryResult.response_messages]
    /// field. If multiple default text responses exist, they will be concatenated
    /// when generating audio. If no default platform text responses exist, the
    /// generated audio content will be empty.
    ///
    /// In some scenarios, multiple output audio fields may be present in the
    /// response structure. In these cases, only the top-most-level audio output
    /// has content.
    ///
    /// [google.cloud.dialogflow.cx.v3.QueryResult.response_messages]: crate::model::QueryResult::response_messages
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub output_audio: ::bytes::Bytes,

    /// The config used by the speech synthesizer to generate the output audio.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub output_audio_config: std::option::Option<crate::model::OutputAudioConfig>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl FulfillIntentResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [response_id][crate::model::FulfillIntentResponse::response_id].
    pub fn set_response_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.response_id = v.into();
        self
    }

    /// Sets the value of [query_result][crate::model::FulfillIntentResponse::query_result].
    pub fn set_query_result<
        T: std::convert::Into<std::option::Option<crate::model::QueryResult>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query_result = v.into();
        self
    }

    /// Sets the value of [output_audio][crate::model::FulfillIntentResponse::output_audio].
    pub fn set_output_audio<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.output_audio = v.into();
        self
    }

    /// Sets the value of [output_audio_config][crate::model::FulfillIntentResponse::output_audio_config].
    pub fn set_output_audio_config<
        T: std::convert::Into<std::option::Option<crate::model::OutputAudioConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.output_audio_config = v.into();
        self
    }
}

impl wkt::message::Message for FulfillIntentResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.FulfillIntentResponse"
    }
}

/// The result of sentiment analysis. Sentiment analysis inspects user input
/// and identifies the prevailing subjective opinion, especially to determine a
/// user's attitude as positive, negative, or neutral.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SentimentAnalysisResult {
    /// Sentiment score between -1.0 (negative sentiment) and 1.0 (positive
    /// sentiment).
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub score: f32,

    /// A non-negative number in the [0, +inf) range, which represents the absolute
    /// magnitude of sentiment, regardless of score (positive or negative).
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub magnitude: f32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SentimentAnalysisResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [score][crate::model::SentimentAnalysisResult::score].
    pub fn set_score<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.score = v.into();
        self
    }

    /// Sets the value of [magnitude][crate::model::SentimentAnalysisResult::magnitude].
    pub fn set_magnitude<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.magnitude = v.into();
        self
    }
}

impl wkt::message::Message for SentimentAnalysisResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.SentimentAnalysisResult"
    }
}

/// Session entity types are referred to as **User** entity types and are
/// entities that are built for an individual user such as favorites,
/// preferences, playlists, and so on.
///
/// You can redefine a session entity type at the session level to extend or
/// replace a [custom entity type][google.cloud.dialogflow.cx.v3.EntityType] at
/// the user session level (we refer to the entity types defined at the agent
/// level as "custom entity types").
///
/// Note: session entity types apply to all queries, regardless of the language.
///
/// For more information about entity types, see the [Dialogflow
/// documentation](https://cloud.google.com/dialogflow/docs/entities-overview).
///
/// [google.cloud.dialogflow.cx.v3.EntityType]: crate::model::EntityType
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SessionEntityType {
    /// Required. The unique identifier of the session entity type.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<SessionID>/entityTypes/<EntityTypeID>`
    /// or
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>/sessions/<SessionID>/entityTypes/<EntityTypeID>`.
    /// If `Environment ID` is not specified, we assume default 'draft'
    /// environment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Indicates whether the additional data should override or
    /// supplement the custom entity type definition.
    pub entity_override_mode: crate::model::session_entity_type::EntityOverrideMode,

    /// Required. The collection of entities to override or supplement the custom
    /// entity type.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub entities: std::vec::Vec<crate::model::entity_type::Entity>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SessionEntityType {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::SessionEntityType::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [entity_override_mode][crate::model::SessionEntityType::entity_override_mode].
    pub fn set_entity_override_mode<
        T: std::convert::Into<crate::model::session_entity_type::EntityOverrideMode>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.entity_override_mode = v.into();
        self
    }

    /// Sets the value of [entities][crate::model::SessionEntityType::entities].
    pub fn set_entities<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::entity_type::Entity>,
    {
        use std::iter::Iterator;
        self.entities = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SessionEntityType {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.SessionEntityType"
    }
}

/// Defines additional types related to [SessionEntityType].
pub mod session_entity_type {
    #[allow(unused_imports)]
    use super::*;

    /// The types of modifications for the session entity type.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum EntityOverrideMode {
        /// Not specified. This value should be never used.
        Unspecified,
        /// The collection of session entities overrides the collection of entities
        /// in the corresponding custom entity type.
        Override,
        /// The collection of session entities extends the collection of entities in
        /// the corresponding custom entity type.
        ///
        /// Note: Even in this override mode calls to `ListSessionEntityTypes`,
        /// `GetSessionEntityType`, `CreateSessionEntityType` and
        /// `UpdateSessionEntityType` only return the additional entities added in
        /// this session entity type. If you want to get the supplemented list,
        /// please call
        /// [EntityTypes.GetEntityType][google.cloud.dialogflow.cx.v3.EntityTypes.GetEntityType]
        /// on the custom entity type and merge.
        ///
        /// [google.cloud.dialogflow.cx.v3.EntityTypes.GetEntityType]: crate::client::EntityTypes::get_entity_type
        Supplement,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [EntityOverrideMode::value] or
        /// [EntityOverrideMode::name].
        UnknownValue(entity_override_mode::UnknownValue),
    }

    #[doc(hidden)]
    pub mod entity_override_mode {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl EntityOverrideMode {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Override => std::option::Option::Some(1),
                Self::Supplement => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("ENTITY_OVERRIDE_MODE_UNSPECIFIED"),
                Self::Override => std::option::Option::Some("ENTITY_OVERRIDE_MODE_OVERRIDE"),
                Self::Supplement => std::option::Option::Some("ENTITY_OVERRIDE_MODE_SUPPLEMENT"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for EntityOverrideMode {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for EntityOverrideMode {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for EntityOverrideMode {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Override,
                2 => Self::Supplement,
                _ => Self::UnknownValue(entity_override_mode::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for EntityOverrideMode {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "ENTITY_OVERRIDE_MODE_UNSPECIFIED" => Self::Unspecified,
                "ENTITY_OVERRIDE_MODE_OVERRIDE" => Self::Override,
                "ENTITY_OVERRIDE_MODE_SUPPLEMENT" => Self::Supplement,
                _ => Self::UnknownValue(entity_override_mode::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for EntityOverrideMode {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Override => serializer.serialize_i32(1),
                Self::Supplement => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for EntityOverrideMode {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<EntityOverrideMode>::new(
                ".google.cloud.dialogflow.cx.v3.SessionEntityType.EntityOverrideMode",
            ))
        }
    }
}

/// The request message for
/// [SessionEntityTypes.ListSessionEntityTypes][google.cloud.dialogflow.cx.v3.SessionEntityTypes.ListSessionEntityTypes].
///
/// [google.cloud.dialogflow.cx.v3.SessionEntityTypes.ListSessionEntityTypes]: crate::client::SessionEntityTypes::list_session_entity_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSessionEntityTypesRequest {
    /// Required. The session to list all session entity types from.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<SessionID>`
    /// or
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>/sessions/<SessionID>`.
    /// If `Environment ID` is not specified, we assume default 'draft'
    /// environment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return in a single page. By default 100 and
    /// at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListSessionEntityTypesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListSessionEntityTypesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListSessionEntityTypesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListSessionEntityTypesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListSessionEntityTypesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListSessionEntityTypesRequest"
    }
}

/// The response message for
/// [SessionEntityTypes.ListSessionEntityTypes][google.cloud.dialogflow.cx.v3.SessionEntityTypes.ListSessionEntityTypes].
///
/// [google.cloud.dialogflow.cx.v3.SessionEntityTypes.ListSessionEntityTypes]: crate::client::SessionEntityTypes::list_session_entity_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSessionEntityTypesResponse {
    /// The list of session entity types. There will be a maximum number of items
    /// returned based on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub session_entity_types: std::vec::Vec<crate::model::SessionEntityType>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListSessionEntityTypesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListSessionEntityTypesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [session_entity_types][crate::model::ListSessionEntityTypesResponse::session_entity_types].
    pub fn set_session_entity_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SessionEntityType>,
    {
        use std::iter::Iterator;
        self.session_entity_types = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListSessionEntityTypesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListSessionEntityTypesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListSessionEntityTypesResponse {
    type PageItem = crate::model::SessionEntityType;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.session_entity_types
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [SessionEntityTypes.GetSessionEntityType][google.cloud.dialogflow.cx.v3.SessionEntityTypes.GetSessionEntityType].
///
/// [google.cloud.dialogflow.cx.v3.SessionEntityTypes.GetSessionEntityType]: crate::client::SessionEntityTypes::get_session_entity_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetSessionEntityTypeRequest {
    /// Required. The name of the session entity type.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<SessionID>/entityTypes/<EntityTypeID>`
    /// or
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>/sessions/<SessionID>/entityTypes/<EntityTypeID>`.
    /// If `Environment ID` is not specified, we assume default 'draft'
    /// environment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetSessionEntityTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetSessionEntityTypeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetSessionEntityTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetSessionEntityTypeRequest"
    }
}

/// The request message for
/// [SessionEntityTypes.CreateSessionEntityType][google.cloud.dialogflow.cx.v3.SessionEntityTypes.CreateSessionEntityType].
///
/// [google.cloud.dialogflow.cx.v3.SessionEntityTypes.CreateSessionEntityType]: crate::client::SessionEntityTypes::create_session_entity_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateSessionEntityTypeRequest {
    /// Required. The session to create a session entity type for.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<SessionID>`
    /// or
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>/sessions/<SessionID>`.
    /// If `Environment ID` is not specified, we assume default 'draft'
    /// environment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The session entity type to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub session_entity_type: std::option::Option<crate::model::SessionEntityType>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateSessionEntityTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateSessionEntityTypeRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [session_entity_type][crate::model::CreateSessionEntityTypeRequest::session_entity_type].
    pub fn set_session_entity_type<
        T: std::convert::Into<std::option::Option<crate::model::SessionEntityType>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.session_entity_type = v.into();
        self
    }
}

impl wkt::message::Message for CreateSessionEntityTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CreateSessionEntityTypeRequest"
    }
}

/// The request message for
/// [SessionEntityTypes.UpdateSessionEntityType][google.cloud.dialogflow.cx.v3.SessionEntityTypes.UpdateSessionEntityType].
///
/// [google.cloud.dialogflow.cx.v3.SessionEntityTypes.UpdateSessionEntityType]: crate::client::SessionEntityTypes::update_session_entity_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateSessionEntityTypeRequest {
    /// Required. The session entity type to update.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<SessionID>/entityTypes/<EntityTypeID>`
    /// or
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>/sessions/<SessionID>/entityTypes/<EntityTypeID>`.
    /// If `Environment ID` is not specified,
    /// we assume default 'draft' environment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub session_entity_type: std::option::Option<crate::model::SessionEntityType>,

    /// The mask to control which fields get updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateSessionEntityTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [session_entity_type][crate::model::UpdateSessionEntityTypeRequest::session_entity_type].
    pub fn set_session_entity_type<
        T: std::convert::Into<std::option::Option<crate::model::SessionEntityType>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.session_entity_type = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateSessionEntityTypeRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateSessionEntityTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.UpdateSessionEntityTypeRequest"
    }
}

/// The request message for
/// [SessionEntityTypes.DeleteSessionEntityType][google.cloud.dialogflow.cx.v3.SessionEntityTypes.DeleteSessionEntityType].
///
/// [google.cloud.dialogflow.cx.v3.SessionEntityTypes.DeleteSessionEntityType]: crate::client::SessionEntityTypes::delete_session_entity_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteSessionEntityTypeRequest {
    /// Required. The name of the session entity type to delete.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<SessionID>/entityTypes/<EntityTypeID>`
    /// or
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>/sessions/<SessionID>/entityTypes/<EntityTypeID>`.
    /// If `Environment ID` is not specified,
    /// we assume default 'draft' environment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteSessionEntityTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteSessionEntityTypeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteSessionEntityTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DeleteSessionEntityTypeRequest"
    }
}

/// Represents a test case.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TestCase {
    /// The unique identifier of the test case.
    /// [TestCases.CreateTestCase][google.cloud.dialogflow.cx.v3.TestCases.CreateTestCase]
    /// will populate the name automatically. Otherwise use format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/testCases/<TestCaseID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.TestCases.CreateTestCase]: crate::client::TestCases::create_test_case
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Tags are short descriptions that users may apply to test cases for
    /// organizational and filtering purposes. Each tag should start with "#" and
    /// has a limit of 30 characters.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub tags: std::vec::Vec<std::string::String>,

    /// Required. The human-readable name of the test case, unique within the
    /// agent. Limit of 200 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Additional freeform notes about the test case. Limit of 400 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub notes: std::string::String,

    /// Config for the test case.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub test_config: std::option::Option<crate::model::TestConfig>,

    /// The conversation turns uttered when the test case was created, in
    /// chronological order. These include the canonical set of agent utterances
    /// that should occur when the agent is working properly.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub test_case_conversation_turns: std::vec::Vec<crate::model::ConversationTurn>,

    /// Output only. When the test was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub creation_time: std::option::Option<wkt::Timestamp>,

    /// The latest test result.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub last_test_result: std::option::Option<crate::model::TestCaseResult>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TestCase {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::TestCase::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::TestCase::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [notes][crate::model::TestCase::notes].
    pub fn set_notes<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.notes = v.into();
        self
    }

    /// Sets the value of [test_config][crate::model::TestCase::test_config].
    pub fn set_test_config<T: std::convert::Into<std::option::Option<crate::model::TestConfig>>>(
        mut self,
        v: T,
    ) -> Self {
        self.test_config = v.into();
        self
    }

    /// Sets the value of [creation_time][crate::model::TestCase::creation_time].
    pub fn set_creation_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.creation_time = v.into();
        self
    }

    /// Sets the value of [last_test_result][crate::model::TestCase::last_test_result].
    pub fn set_last_test_result<
        T: std::convert::Into<std::option::Option<crate::model::TestCaseResult>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.last_test_result = v.into();
        self
    }

    /// Sets the value of [tags][crate::model::TestCase::tags].
    pub fn set_tags<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.tags = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [test_case_conversation_turns][crate::model::TestCase::test_case_conversation_turns].
    pub fn set_test_case_conversation_turns<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ConversationTurn>,
    {
        use std::iter::Iterator;
        self.test_case_conversation_turns = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TestCase {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.TestCase"
    }
}

/// Represents a result from running a test case in an agent environment.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TestCaseResult {
    /// The resource name for the test case result. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/testCases/<TestCaseID>/results/<TestCaseResultID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Environment where the test was run. If not set, it indicates the draft
    /// environment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub environment: std::string::String,

    /// The conversation turns uttered during the test case replay in chronological
    /// order.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub conversation_turns: std::vec::Vec<crate::model::ConversationTurn>,

    /// Whether the test case passed in the agent environment.
    pub test_result: crate::model::TestResult,

    /// The time that the test was run.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub test_time: std::option::Option<wkt::Timestamp>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TestCaseResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::TestCaseResult::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [environment][crate::model::TestCaseResult::environment].
    pub fn set_environment<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.environment = v.into();
        self
    }

    /// Sets the value of [test_result][crate::model::TestCaseResult::test_result].
    pub fn set_test_result<T: std::convert::Into<crate::model::TestResult>>(
        mut self,
        v: T,
    ) -> Self {
        self.test_result = v.into();
        self
    }

    /// Sets the value of [test_time][crate::model::TestCaseResult::test_time].
    pub fn set_test_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.test_time = v.into();
        self
    }

    /// Sets the value of [conversation_turns][crate::model::TestCaseResult::conversation_turns].
    pub fn set_conversation_turns<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ConversationTurn>,
    {
        use std::iter::Iterator;
        self.conversation_turns = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TestCaseResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.TestCaseResult"
    }
}

/// Represents configurations for a test case.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TestConfig {
    /// Session parameters to be compared when calculating differences.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub tracking_parameters: std::vec::Vec<std::string::String>,

    /// Flow name to start the test case with.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`.
    ///
    /// Only one of `flow` and `page` should be set to indicate the starting point
    /// of the test case. If neither is set, the test case will start with start
    /// page on the default start flow.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub flow: std::string::String,

    /// The [page][google.cloud.dialogflow.cx.v3.Page] to start the test case with.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/pages/<PageID>`.
    ///
    /// Only one of `flow` and `page` should be set to indicate the starting point
    /// of the test case. If neither is set, the test case will start with start
    /// page on the default start flow.
    ///
    /// [google.cloud.dialogflow.cx.v3.Page]: crate::model::Page
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TestConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [flow][crate::model::TestConfig::flow].
    pub fn set_flow<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.flow = v.into();
        self
    }

    /// Sets the value of [page][crate::model::TestConfig::page].
    pub fn set_page<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page = v.into();
        self
    }

    /// Sets the value of [tracking_parameters][crate::model::TestConfig::tracking_parameters].
    pub fn set_tracking_parameters<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.tracking_parameters = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TestConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.TestConfig"
    }
}

/// One interaction between a human and virtual agent. The human provides some
/// input and the virtual agent provides a response.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ConversationTurn {
    /// The user input.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub user_input: std::option::Option<crate::model::conversation_turn::UserInput>,

    /// The virtual agent output.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub virtual_agent_output:
        std::option::Option<crate::model::conversation_turn::VirtualAgentOutput>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ConversationTurn {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [user_input][crate::model::ConversationTurn::user_input].
    pub fn set_user_input<
        T: std::convert::Into<std::option::Option<crate::model::conversation_turn::UserInput>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.user_input = v.into();
        self
    }

    /// Sets the value of [virtual_agent_output][crate::model::ConversationTurn::virtual_agent_output].
    pub fn set_virtual_agent_output<
        T: std::convert::Into<
                std::option::Option<crate::model::conversation_turn::VirtualAgentOutput>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.virtual_agent_output = v.into();
        self
    }
}

impl wkt::message::Message for ConversationTurn {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ConversationTurn"
    }
}

/// Defines additional types related to [ConversationTurn].
pub mod conversation_turn {
    #[allow(unused_imports)]
    use super::*;

    /// The input from the human user.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct UserInput {
        /// Supports [text input][google.cloud.dialogflow.cx.v3.QueryInput.text],
        /// [event input][google.cloud.dialogflow.cx.v3.QueryInput.event], [dtmf
        /// input][google.cloud.dialogflow.cx.v3.QueryInput.dtmf] in the test case.
        ///
        /// [google.cloud.dialogflow.cx.v3.QueryInput.dtmf]: crate::model::QueryInput::input
        /// [google.cloud.dialogflow.cx.v3.QueryInput.event]: crate::model::QueryInput::input
        /// [google.cloud.dialogflow.cx.v3.QueryInput.text]: crate::model::QueryInput::input
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub input: std::option::Option<crate::model::QueryInput>,

        /// Parameters that need to be injected into the conversation during intent
        /// detection.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub injected_parameters: std::option::Option<wkt::Struct>,

        /// If webhooks should be allowed to trigger in response to the user
        /// utterance. Often if parameters are injected, webhooks should not be
        /// enabled.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub is_webhook_enabled: bool,

        /// Whether sentiment analysis is enabled.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enable_sentiment_analysis: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl UserInput {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [input][crate::model::conversation_turn::UserInput::input].
        pub fn set_input<T: std::convert::Into<std::option::Option<crate::model::QueryInput>>>(
            mut self,
            v: T,
        ) -> Self {
            self.input = v.into();
            self
        }

        /// Sets the value of [injected_parameters][crate::model::conversation_turn::UserInput::injected_parameters].
        pub fn set_injected_parameters<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
            mut self,
            v: T,
        ) -> Self {
            self.injected_parameters = v.into();
            self
        }

        /// Sets the value of [is_webhook_enabled][crate::model::conversation_turn::UserInput::is_webhook_enabled].
        pub fn set_is_webhook_enabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.is_webhook_enabled = v.into();
            self
        }

        /// Sets the value of [enable_sentiment_analysis][crate::model::conversation_turn::UserInput::enable_sentiment_analysis].
        pub fn set_enable_sentiment_analysis<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enable_sentiment_analysis = v.into();
            self
        }
    }

    impl wkt::message::Message for UserInput {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.ConversationTurn.UserInput"
        }
    }

    /// The output from the virtual agent.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct VirtualAgentOutput {
        /// The session parameters available to the bot at this point.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub session_parameters: std::option::Option<wkt::Struct>,

        /// Output only. If this is part of a [result conversation
        /// turn][TestCaseResult.conversation_turns], the list of differences
        /// between the original run and the replay for this output, if any.
        ///
        /// [TestCaseResult.conversation_turns]: crate::model::TestCaseResult::conversation_turns
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub differences: std::vec::Vec<crate::model::TestRunDifference>,

        /// Required. Input only. The diagnostic
        /// [info][Session.DetectIntentResponse.QueryResult.diagnostic_info]
        /// output for the turn. Required to calculate the testing coverage.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub diagnostic_info: std::option::Option<wkt::Struct>,

        /// The [Intent][google.cloud.dialogflow.cx.v3.Intent] that triggered the
        /// response. Only name and displayName will be set.
        ///
        /// [google.cloud.dialogflow.cx.v3.Intent]: crate::model::Intent
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub triggered_intent: std::option::Option<crate::model::Intent>,

        /// The [Page][google.cloud.dialogflow.cx.v3.Page] on which the utterance was
        /// spoken. Only name and displayName will be set.
        ///
        /// [google.cloud.dialogflow.cx.v3.Page]: crate::model::Page
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub current_page: std::option::Option<crate::model::Page>,

        /// The [text][google.cloud.dialogflow.cx.v3.ResponseMessage.Text] responses
        /// from the agent for the turn.
        ///
        /// [google.cloud.dialogflow.cx.v3.ResponseMessage.Text]: crate::model::response_message::Text
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub text_responses: std::vec::Vec<crate::model::response_message::Text>,

        /// Response error from the agent in the test result. If set, other output
        /// is empty.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub status: std::option::Option<rpc::model::Status>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl VirtualAgentOutput {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [session_parameters][crate::model::conversation_turn::VirtualAgentOutput::session_parameters].
        pub fn set_session_parameters<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
            mut self,
            v: T,
        ) -> Self {
            self.session_parameters = v.into();
            self
        }

        /// Sets the value of [diagnostic_info][crate::model::conversation_turn::VirtualAgentOutput::diagnostic_info].
        pub fn set_diagnostic_info<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
            mut self,
            v: T,
        ) -> Self {
            self.diagnostic_info = v.into();
            self
        }

        /// Sets the value of [triggered_intent][crate::model::conversation_turn::VirtualAgentOutput::triggered_intent].
        pub fn set_triggered_intent<
            T: std::convert::Into<std::option::Option<crate::model::Intent>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.triggered_intent = v.into();
            self
        }

        /// Sets the value of [current_page][crate::model::conversation_turn::VirtualAgentOutput::current_page].
        pub fn set_current_page<T: std::convert::Into<std::option::Option<crate::model::Page>>>(
            mut self,
            v: T,
        ) -> Self {
            self.current_page = v.into();
            self
        }

        /// Sets the value of [status][crate::model::conversation_turn::VirtualAgentOutput::status].
        pub fn set_status<T: std::convert::Into<std::option::Option<rpc::model::Status>>>(
            mut self,
            v: T,
        ) -> Self {
            self.status = v.into();
            self
        }

        /// Sets the value of [differences][crate::model::conversation_turn::VirtualAgentOutput::differences].
        pub fn set_differences<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::TestRunDifference>,
        {
            use std::iter::Iterator;
            self.differences = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [text_responses][crate::model::conversation_turn::VirtualAgentOutput::text_responses].
        pub fn set_text_responses<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::response_message::Text>,
        {
            use std::iter::Iterator;
            self.text_responses = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for VirtualAgentOutput {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.ConversationTurn.VirtualAgentOutput"
        }
    }
}

/// The description of differences between original and replayed agent output.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TestRunDifference {
    /// The type of diff.
    #[serde(rename = "type")]
    pub r#type: crate::model::test_run_difference::DiffType,

    /// A human readable description of the diff, showing the actual output vs
    /// expected output.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TestRunDifference {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [r#type][crate::model::TestRunDifference::type].
    pub fn set_type<T: std::convert::Into<crate::model::test_run_difference::DiffType>>(
        mut self,
        v: T,
    ) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [description][crate::model::TestRunDifference::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }
}

impl wkt::message::Message for TestRunDifference {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.TestRunDifference"
    }
}

/// Defines additional types related to [TestRunDifference].
pub mod test_run_difference {
    #[allow(unused_imports)]
    use super::*;

    /// What part of the message replay differs from the test case.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum DiffType {
        /// Should never be used.
        Unspecified,
        /// The intent.
        Intent,
        /// The page.
        Page,
        /// The parameters.
        Parameters,
        /// The message utterance.
        Utterance,
        /// The flow.
        Flow,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [DiffType::value] or
        /// [DiffType::name].
        UnknownValue(diff_type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod diff_type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl DiffType {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Intent => std::option::Option::Some(1),
                Self::Page => std::option::Option::Some(2),
                Self::Parameters => std::option::Option::Some(3),
                Self::Utterance => std::option::Option::Some(4),
                Self::Flow => std::option::Option::Some(5),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("DIFF_TYPE_UNSPECIFIED"),
                Self::Intent => std::option::Option::Some("INTENT"),
                Self::Page => std::option::Option::Some("PAGE"),
                Self::Parameters => std::option::Option::Some("PARAMETERS"),
                Self::Utterance => std::option::Option::Some("UTTERANCE"),
                Self::Flow => std::option::Option::Some("FLOW"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for DiffType {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for DiffType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for DiffType {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Intent,
                2 => Self::Page,
                3 => Self::Parameters,
                4 => Self::Utterance,
                5 => Self::Flow,
                _ => Self::UnknownValue(diff_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for DiffType {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "DIFF_TYPE_UNSPECIFIED" => Self::Unspecified,
                "INTENT" => Self::Intent,
                "PAGE" => Self::Page,
                "PARAMETERS" => Self::Parameters,
                "UTTERANCE" => Self::Utterance,
                "FLOW" => Self::Flow,
                _ => Self::UnknownValue(diff_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for DiffType {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Intent => serializer.serialize_i32(1),
                Self::Page => serializer.serialize_i32(2),
                Self::Parameters => serializer.serialize_i32(3),
                Self::Utterance => serializer.serialize_i32(4),
                Self::Flow => serializer.serialize_i32(5),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for DiffType {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<DiffType>::new(
                ".google.cloud.dialogflow.cx.v3.TestRunDifference.DiffType",
            ))
        }
    }
}

/// Transition coverage represents the percentage of all possible page
/// transitions (page-level transition routes and event handlers, excluding
/// transition route groups) present within any of a parent's test cases.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TransitionCoverage {
    /// The list of Transitions present in the agent.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub transitions: std::vec::Vec<crate::model::transition_coverage::Transition>,

    /// The percent of transitions in the agent that are covered.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub coverage_score: f32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TransitionCoverage {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [coverage_score][crate::model::TransitionCoverage::coverage_score].
    pub fn set_coverage_score<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.coverage_score = v.into();
        self
    }

    /// Sets the value of [transitions][crate::model::TransitionCoverage::transitions].
    pub fn set_transitions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::transition_coverage::Transition>,
    {
        use std::iter::Iterator;
        self.transitions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TransitionCoverage {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.TransitionCoverage"
    }
}

/// Defines additional types related to [TransitionCoverage].
pub mod transition_coverage {
    #[allow(unused_imports)]
    use super::*;

    /// The source or target of a transition.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct TransitionNode {
        /// A TransitionNode can be either a page or a flow.
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub kind: std::option::Option<crate::model::transition_coverage::transition_node::Kind>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl TransitionNode {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [kind][crate::model::transition_coverage::TransitionNode::kind].
        ///
        /// Note that all the setters affecting `kind` are mutually
        /// exclusive.
        pub fn set_kind<
            T: std::convert::Into<
                    std::option::Option<crate::model::transition_coverage::transition_node::Kind>,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.kind = v.into();
            self
        }

        /// The value of [kind][crate::model::transition_coverage::TransitionNode::kind]
        /// if it holds a `Page`, `None` if the field is not set or
        /// holds a different branch.
        pub fn page(&self) -> std::option::Option<&std::boxed::Box<crate::model::Page>> {
            #[allow(unreachable_patterns)]
            self.kind.as_ref().and_then(|v| match v {
                crate::model::transition_coverage::transition_node::Kind::Page(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [kind][crate::model::transition_coverage::TransitionNode::kind]
        /// if it holds a `Flow`, `None` if the field is not set or
        /// holds a different branch.
        pub fn flow(&self) -> std::option::Option<&std::boxed::Box<crate::model::Flow>> {
            #[allow(unreachable_patterns)]
            self.kind.as_ref().and_then(|v| match v {
                crate::model::transition_coverage::transition_node::Kind::Flow(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [kind][crate::model::transition_coverage::TransitionNode::kind]
        /// to hold a `Page`.
        ///
        /// Note that all the setters affecting `kind` are
        /// mutually exclusive.
        pub fn set_page<T: std::convert::Into<std::boxed::Box<crate::model::Page>>>(
            mut self,
            v: T,
        ) -> Self {
            self.kind = std::option::Option::Some(
                crate::model::transition_coverage::transition_node::Kind::Page(v.into()),
            );
            self
        }

        /// Sets the value of [kind][crate::model::transition_coverage::TransitionNode::kind]
        /// to hold a `Flow`.
        ///
        /// Note that all the setters affecting `kind` are
        /// mutually exclusive.
        pub fn set_flow<T: std::convert::Into<std::boxed::Box<crate::model::Flow>>>(
            mut self,
            v: T,
        ) -> Self {
            self.kind = std::option::Option::Some(
                crate::model::transition_coverage::transition_node::Kind::Flow(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for TransitionNode {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.TransitionCoverage.TransitionNode"
        }
    }

    /// Defines additional types related to [TransitionNode].
    pub mod transition_node {
        #[allow(unused_imports)]
        use super::*;

        /// A TransitionNode can be either a page or a flow.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum Kind {
            /// Indicates a transition to a [Page][google.cloud.dialogflow.cx.v3.Page].
            /// Only some fields such as name and displayname will be set.
            ///
            /// [google.cloud.dialogflow.cx.v3.Page]: crate::model::Page
            Page(std::boxed::Box<crate::model::Page>),
            /// Indicates a transition to a [Flow][google.cloud.dialogflow.cx.v3.Flow].
            /// Only some fields such as name and displayname will be set.
            ///
            /// [google.cloud.dialogflow.cx.v3.Flow]: crate::model::Flow
            Flow(std::boxed::Box<crate::model::Flow>),
        }
    }

    /// A transition in a page.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Transition {
        /// The start node of a transition.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub source: std::option::Option<crate::model::transition_coverage::TransitionNode>,

        /// The index of a transition in the transition list. Starting from 0.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub index: i32,

        /// The end node of a transition.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub target: std::option::Option<crate::model::transition_coverage::TransitionNode>,

        /// Whether the transition is covered by at least one of the
        /// agent's test cases.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub covered: bool,

        /// The detailed transition.
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub detail: std::option::Option<crate::model::transition_coverage::transition::Detail>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Transition {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [source][crate::model::transition_coverage::Transition::source].
        pub fn set_source<
            T: std::convert::Into<
                    std::option::Option<crate::model::transition_coverage::TransitionNode>,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.source = v.into();
            self
        }

        /// Sets the value of [index][crate::model::transition_coverage::Transition::index].
        pub fn set_index<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.index = v.into();
            self
        }

        /// Sets the value of [target][crate::model::transition_coverage::Transition::target].
        pub fn set_target<
            T: std::convert::Into<
                    std::option::Option<crate::model::transition_coverage::TransitionNode>,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.target = v.into();
            self
        }

        /// Sets the value of [covered][crate::model::transition_coverage::Transition::covered].
        pub fn set_covered<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.covered = v.into();
            self
        }

        /// Sets the value of [detail][crate::model::transition_coverage::Transition::detail].
        ///
        /// Note that all the setters affecting `detail` are mutually
        /// exclusive.
        pub fn set_detail<
            T: std::convert::Into<
                    std::option::Option<crate::model::transition_coverage::transition::Detail>,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.detail = v.into();
            self
        }

        /// The value of [detail][crate::model::transition_coverage::Transition::detail]
        /// if it holds a `TransitionRoute`, `None` if the field is not set or
        /// holds a different branch.
        pub fn transition_route(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::TransitionRoute>> {
            #[allow(unreachable_patterns)]
            self.detail.as_ref().and_then(|v| match v {
                crate::model::transition_coverage::transition::Detail::TransitionRoute(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [detail][crate::model::transition_coverage::Transition::detail]
        /// if it holds a `EventHandler`, `None` if the field is not set or
        /// holds a different branch.
        pub fn event_handler(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::EventHandler>> {
            #[allow(unreachable_patterns)]
            self.detail.as_ref().and_then(|v| match v {
                crate::model::transition_coverage::transition::Detail::EventHandler(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [detail][crate::model::transition_coverage::Transition::detail]
        /// to hold a `TransitionRoute`.
        ///
        /// Note that all the setters affecting `detail` are
        /// mutually exclusive.
        pub fn set_transition_route<
            T: std::convert::Into<std::boxed::Box<crate::model::TransitionRoute>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.detail = std::option::Option::Some(
                crate::model::transition_coverage::transition::Detail::TransitionRoute(v.into()),
            );
            self
        }

        /// Sets the value of [detail][crate::model::transition_coverage::Transition::detail]
        /// to hold a `EventHandler`.
        ///
        /// Note that all the setters affecting `detail` are
        /// mutually exclusive.
        pub fn set_event_handler<
            T: std::convert::Into<std::boxed::Box<crate::model::EventHandler>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.detail = std::option::Option::Some(
                crate::model::transition_coverage::transition::Detail::EventHandler(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for Transition {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.TransitionCoverage.Transition"
        }
    }

    /// Defines additional types related to [Transition].
    pub mod transition {
        #[allow(unused_imports)]
        use super::*;

        /// The detailed transition.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum Detail {
            /// Intent route or condition route.
            TransitionRoute(std::boxed::Box<crate::model::TransitionRoute>),
            /// Event handler.
            EventHandler(std::boxed::Box<crate::model::EventHandler>),
        }
    }
}

/// Transition route group coverage represents the percentage of all possible
/// transition routes present within any of a parent's test cases. The results
/// are grouped by the transition route group.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TransitionRouteGroupCoverage {
    /// Transition route group coverages.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub coverages: std::vec::Vec<crate::model::transition_route_group_coverage::Coverage>,

    /// The percent of transition routes in all the transition route groups that
    /// are covered.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub coverage_score: f32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TransitionRouteGroupCoverage {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [coverage_score][crate::model::TransitionRouteGroupCoverage::coverage_score].
    pub fn set_coverage_score<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.coverage_score = v.into();
        self
    }

    /// Sets the value of [coverages][crate::model::TransitionRouteGroupCoverage::coverages].
    pub fn set_coverages<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::transition_route_group_coverage::Coverage>,
    {
        use std::iter::Iterator;
        self.coverages = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TransitionRouteGroupCoverage {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.TransitionRouteGroupCoverage"
    }
}

/// Defines additional types related to [TransitionRouteGroupCoverage].
pub mod transition_route_group_coverage {
    #[allow(unused_imports)]
    use super::*;

    /// Coverage result message for one transition route group.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Coverage {
        /// Transition route group metadata. Only name and displayName will be set.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub route_group: std::option::Option<crate::model::TransitionRouteGroup>,

        /// The list of transition routes and coverage in the transition route group.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub transitions:
            std::vec::Vec<crate::model::transition_route_group_coverage::coverage::Transition>,

        /// The percent of transition routes in the transition route group that are
        /// covered.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub coverage_score: f32,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Coverage {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [route_group][crate::model::transition_route_group_coverage::Coverage::route_group].
        pub fn set_route_group<
            T: std::convert::Into<std::option::Option<crate::model::TransitionRouteGroup>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.route_group = v.into();
            self
        }

        /// Sets the value of [coverage_score][crate::model::transition_route_group_coverage::Coverage::coverage_score].
        pub fn set_coverage_score<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
            self.coverage_score = v.into();
            self
        }

        /// Sets the value of [transitions][crate::model::transition_route_group_coverage::Coverage::transitions].
        pub fn set_transitions<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<
                    crate::model::transition_route_group_coverage::coverage::Transition,
                >,
        {
            use std::iter::Iterator;
            self.transitions = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for Coverage {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.TransitionRouteGroupCoverage.Coverage"
        }
    }

    /// Defines additional types related to [Coverage].
    pub mod coverage {
        #[allow(unused_imports)]
        use super::*;

        /// A transition coverage in a transition route group.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Transition {
            /// Intent route or condition route.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub transition_route: std::option::Option<crate::model::TransitionRoute>,

            /// Whether the transition route is covered by at least one of the
            /// agent's test cases.
            #[serde(skip_serializing_if = "wkt::internal::is_default")]
            pub covered: bool,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl Transition {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [transition_route][crate::model::transition_route_group_coverage::coverage::Transition::transition_route].
            pub fn set_transition_route<
                T: std::convert::Into<std::option::Option<crate::model::TransitionRoute>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.transition_route = v.into();
                self
            }

            /// Sets the value of [covered][crate::model::transition_route_group_coverage::coverage::Transition::covered].
            pub fn set_covered<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
                self.covered = v.into();
                self
            }
        }

        impl wkt::message::Message for Transition {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.cx.v3.TransitionRouteGroupCoverage.Coverage.Transition"
            }
        }
    }
}

/// Intent coverage represents the percentage of all possible intents in the
/// agent that are triggered in any of a parent's test cases.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct IntentCoverage {
    /// The list of Intents present in the agent
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub intents: std::vec::Vec<crate::model::intent_coverage::Intent>,

    /// The percent of intents in the agent that are covered.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub coverage_score: f32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl IntentCoverage {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [coverage_score][crate::model::IntentCoverage::coverage_score].
    pub fn set_coverage_score<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.coverage_score = v.into();
        self
    }

    /// Sets the value of [intents][crate::model::IntentCoverage::intents].
    pub fn set_intents<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::intent_coverage::Intent>,
    {
        use std::iter::Iterator;
        self.intents = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for IntentCoverage {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.IntentCoverage"
    }
}

/// Defines additional types related to [IntentCoverage].
pub mod intent_coverage {
    #[allow(unused_imports)]
    use super::*;

    /// The agent's intent.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Intent {
        /// The intent full resource name
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub intent: std::string::String,

        /// Whether the intent is covered by at least one of the agent's
        /// test cases.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub covered: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Intent {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [intent][crate::model::intent_coverage::Intent::intent].
        pub fn set_intent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.intent = v.into();
            self
        }

        /// Sets the value of [covered][crate::model::intent_coverage::Intent::covered].
        pub fn set_covered<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.covered = v.into();
            self
        }
    }

    impl wkt::message::Message for Intent {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.IntentCoverage.Intent"
        }
    }
}

/// The request message for
/// [TestCases.CalculateCoverage][google.cloud.dialogflow.cx.v3.TestCases.CalculateCoverage].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.CalculateCoverage]: crate::client::TestCases::calculate_coverage
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CalculateCoverageRequest {
    /// Required. The agent to calculate coverage for.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub agent: std::string::String,

    /// Required. The type of coverage requested.
    #[serde(rename = "type")]
    pub r#type: crate::model::calculate_coverage_request::CoverageType,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CalculateCoverageRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [agent][crate::model::CalculateCoverageRequest::agent].
    pub fn set_agent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.agent = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::CalculateCoverageRequest::type].
    pub fn set_type<
        T: std::convert::Into<crate::model::calculate_coverage_request::CoverageType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.r#type = v.into();
        self
    }
}

impl wkt::message::Message for CalculateCoverageRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CalculateCoverageRequest"
    }
}

/// Defines additional types related to [CalculateCoverageRequest].
pub mod calculate_coverage_request {
    #[allow(unused_imports)]
    use super::*;

    /// The type of coverage score requested.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum CoverageType {
        /// Should never be used.
        Unspecified,
        /// Intent coverage.
        Intent,
        /// Page transition coverage.
        PageTransition,
        /// Transition route group coverage.
        TransitionRouteGroup,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [CoverageType::value] or
        /// [CoverageType::name].
        UnknownValue(coverage_type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod coverage_type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl CoverageType {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Intent => std::option::Option::Some(1),
                Self::PageTransition => std::option::Option::Some(2),
                Self::TransitionRouteGroup => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("COVERAGE_TYPE_UNSPECIFIED"),
                Self::Intent => std::option::Option::Some("INTENT"),
                Self::PageTransition => std::option::Option::Some("PAGE_TRANSITION"),
                Self::TransitionRouteGroup => std::option::Option::Some("TRANSITION_ROUTE_GROUP"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for CoverageType {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for CoverageType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for CoverageType {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Intent,
                2 => Self::PageTransition,
                3 => Self::TransitionRouteGroup,
                _ => Self::UnknownValue(coverage_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for CoverageType {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "COVERAGE_TYPE_UNSPECIFIED" => Self::Unspecified,
                "INTENT" => Self::Intent,
                "PAGE_TRANSITION" => Self::PageTransition,
                "TRANSITION_ROUTE_GROUP" => Self::TransitionRouteGroup,
                _ => Self::UnknownValue(coverage_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for CoverageType {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Intent => serializer.serialize_i32(1),
                Self::PageTransition => serializer.serialize_i32(2),
                Self::TransitionRouteGroup => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for CoverageType {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<CoverageType>::new(
                ".google.cloud.dialogflow.cx.v3.CalculateCoverageRequest.CoverageType",
            ))
        }
    }
}

/// The response message for
/// [TestCases.CalculateCoverage][google.cloud.dialogflow.cx.v3.TestCases.CalculateCoverage].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.CalculateCoverage]: crate::client::TestCases::calculate_coverage
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CalculateCoverageResponse {
    /// The agent to calculate coverage for.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub agent: std::string::String,

    /// The type of coverage requested.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub coverage_type: std::option::Option<crate::model::calculate_coverage_response::CoverageType>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CalculateCoverageResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [agent][crate::model::CalculateCoverageResponse::agent].
    pub fn set_agent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.agent = v.into();
        self
    }

    /// Sets the value of [coverage_type][crate::model::CalculateCoverageResponse::coverage_type].
    ///
    /// Note that all the setters affecting `coverage_type` are mutually
    /// exclusive.
    pub fn set_coverage_type<
        T: std::convert::Into<
                std::option::Option<crate::model::calculate_coverage_response::CoverageType>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.coverage_type = v.into();
        self
    }

    /// The value of [coverage_type][crate::model::CalculateCoverageResponse::coverage_type]
    /// if it holds a `IntentCoverage`, `None` if the field is not set or
    /// holds a different branch.
    pub fn intent_coverage(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::IntentCoverage>> {
        #[allow(unreachable_patterns)]
        self.coverage_type.as_ref().and_then(|v| match v {
            crate::model::calculate_coverage_response::CoverageType::IntentCoverage(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [coverage_type][crate::model::CalculateCoverageResponse::coverage_type]
    /// if it holds a `TransitionCoverage`, `None` if the field is not set or
    /// holds a different branch.
    pub fn transition_coverage(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::TransitionCoverage>> {
        #[allow(unreachable_patterns)]
        self.coverage_type.as_ref().and_then(|v| match v {
            crate::model::calculate_coverage_response::CoverageType::TransitionCoverage(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [coverage_type][crate::model::CalculateCoverageResponse::coverage_type]
    /// if it holds a `RouteGroupCoverage`, `None` if the field is not set or
    /// holds a different branch.
    pub fn route_group_coverage(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::TransitionRouteGroupCoverage>> {
        #[allow(unreachable_patterns)]
        self.coverage_type.as_ref().and_then(|v| match v {
            crate::model::calculate_coverage_response::CoverageType::RouteGroupCoverage(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [coverage_type][crate::model::CalculateCoverageResponse::coverage_type]
    /// to hold a `IntentCoverage`.
    ///
    /// Note that all the setters affecting `coverage_type` are
    /// mutually exclusive.
    pub fn set_intent_coverage<
        T: std::convert::Into<std::boxed::Box<crate::model::IntentCoverage>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.coverage_type = std::option::Option::Some(
            crate::model::calculate_coverage_response::CoverageType::IntentCoverage(v.into()),
        );
        self
    }

    /// Sets the value of [coverage_type][crate::model::CalculateCoverageResponse::coverage_type]
    /// to hold a `TransitionCoverage`.
    ///
    /// Note that all the setters affecting `coverage_type` are
    /// mutually exclusive.
    pub fn set_transition_coverage<
        T: std::convert::Into<std::boxed::Box<crate::model::TransitionCoverage>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.coverage_type = std::option::Option::Some(
            crate::model::calculate_coverage_response::CoverageType::TransitionCoverage(v.into()),
        );
        self
    }

    /// Sets the value of [coverage_type][crate::model::CalculateCoverageResponse::coverage_type]
    /// to hold a `RouteGroupCoverage`.
    ///
    /// Note that all the setters affecting `coverage_type` are
    /// mutually exclusive.
    pub fn set_route_group_coverage<
        T: std::convert::Into<std::boxed::Box<crate::model::TransitionRouteGroupCoverage>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.coverage_type = std::option::Option::Some(
            crate::model::calculate_coverage_response::CoverageType::RouteGroupCoverage(v.into()),
        );
        self
    }
}

impl wkt::message::Message for CalculateCoverageResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CalculateCoverageResponse"
    }
}

/// Defines additional types related to [CalculateCoverageResponse].
pub mod calculate_coverage_response {
    #[allow(unused_imports)]
    use super::*;

    /// The type of coverage requested.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum CoverageType {
        /// Intent coverage.
        IntentCoverage(std::boxed::Box<crate::model::IntentCoverage>),
        /// Transition (excluding transition route groups) coverage.
        TransitionCoverage(std::boxed::Box<crate::model::TransitionCoverage>),
        /// Transition route group coverage.
        RouteGroupCoverage(std::boxed::Box<crate::model::TransitionRouteGroupCoverage>),
    }
}

/// The request message for
/// [TestCases.ListTestCases][google.cloud.dialogflow.cx.v3.TestCases.ListTestCases].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.ListTestCases]: crate::client::TestCases::list_test_cases
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTestCasesRequest {
    /// Required. The agent to list all pages for.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return in a single page. By default 20.
    /// Note that when TestCaseView = FULL, the maximum page size allowed is 20.
    /// When TestCaseView = BASIC, the maximum page size allowed is 500.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Specifies whether response should include all fields or just the metadata.
    pub view: crate::model::list_test_cases_request::TestCaseView,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListTestCasesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListTestCasesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListTestCasesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListTestCasesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [view][crate::model::ListTestCasesRequest::view].
    pub fn set_view<T: std::convert::Into<crate::model::list_test_cases_request::TestCaseView>>(
        mut self,
        v: T,
    ) -> Self {
        self.view = v.into();
        self
    }
}

impl wkt::message::Message for ListTestCasesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListTestCasesRequest"
    }
}

/// Defines additional types related to [ListTestCasesRequest].
pub mod list_test_cases_request {
    #[allow(unused_imports)]
    use super::*;

    /// Specifies how much test case information to include in the response.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum TestCaseView {
        /// The default / unset value.
        /// The API will default to the BASIC view.
        Unspecified,
        /// Include basic metadata about the test case, but not the conversation
        /// turns. This is the default value.
        Basic,
        /// Include everything.
        Full,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [TestCaseView::value] or
        /// [TestCaseView::name].
        UnknownValue(test_case_view::UnknownValue),
    }

    #[doc(hidden)]
    pub mod test_case_view {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl TestCaseView {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Basic => std::option::Option::Some(1),
                Self::Full => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("TEST_CASE_VIEW_UNSPECIFIED"),
                Self::Basic => std::option::Option::Some("BASIC"),
                Self::Full => std::option::Option::Some("FULL"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for TestCaseView {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for TestCaseView {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for TestCaseView {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Basic,
                2 => Self::Full,
                _ => Self::UnknownValue(test_case_view::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for TestCaseView {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "TEST_CASE_VIEW_UNSPECIFIED" => Self::Unspecified,
                "BASIC" => Self::Basic,
                "FULL" => Self::Full,
                _ => Self::UnknownValue(test_case_view::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for TestCaseView {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Basic => serializer.serialize_i32(1),
                Self::Full => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for TestCaseView {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<TestCaseView>::new(
                ".google.cloud.dialogflow.cx.v3.ListTestCasesRequest.TestCaseView",
            ))
        }
    }
}

/// The response message for
/// [TestCases.ListTestCases][google.cloud.dialogflow.cx.v3.TestCases.ListTestCases].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.ListTestCases]: crate::client::TestCases::list_test_cases
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTestCasesResponse {
    /// The list of test cases. There will be a maximum number of items returned
    /// based on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub test_cases: std::vec::Vec<crate::model::TestCase>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListTestCasesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListTestCasesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [test_cases][crate::model::ListTestCasesResponse::test_cases].
    pub fn set_test_cases<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TestCase>,
    {
        use std::iter::Iterator;
        self.test_cases = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListTestCasesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListTestCasesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListTestCasesResponse {
    type PageItem = crate::model::TestCase;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.test_cases
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [TestCases.BatchDeleteTestCases][google.cloud.dialogflow.cx.v3.TestCases.BatchDeleteTestCases].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.BatchDeleteTestCases]: crate::client::TestCases::batch_delete_test_cases
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchDeleteTestCasesRequest {
    /// Required. The agent to delete test cases from.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Format of test case names:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/testCases/<TestCaseID>`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub names: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BatchDeleteTestCasesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::BatchDeleteTestCasesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [names][crate::model::BatchDeleteTestCasesRequest::names].
    pub fn set_names<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.names = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchDeleteTestCasesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.BatchDeleteTestCasesRequest"
    }
}

/// The request message for
/// [TestCases.CreateTestCase][google.cloud.dialogflow.cx.v3.TestCases.CreateTestCase].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.CreateTestCase]: crate::client::TestCases::create_test_case
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateTestCaseRequest {
    /// Required. The agent to create the test case for.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The test case to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub test_case: std::option::Option<crate::model::TestCase>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateTestCaseRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateTestCaseRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [test_case][crate::model::CreateTestCaseRequest::test_case].
    pub fn set_test_case<T: std::convert::Into<std::option::Option<crate::model::TestCase>>>(
        mut self,
        v: T,
    ) -> Self {
        self.test_case = v.into();
        self
    }
}

impl wkt::message::Message for CreateTestCaseRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CreateTestCaseRequest"
    }
}

/// The request message for
/// [TestCases.UpdateTestCase][google.cloud.dialogflow.cx.v3.TestCases.UpdateTestCase].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.UpdateTestCase]: crate::client::TestCases::update_test_case
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateTestCaseRequest {
    /// Required. The test case to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub test_case: std::option::Option<crate::model::TestCase>,

    /// Required. The mask to specify which fields should be updated. The
    /// [`creationTime`][google.cloud.dialogflow.cx.v3.TestCase.creation_time] and
    /// [`lastTestResult`][google.cloud.dialogflow.cx.v3.TestCase.last_test_result]
    /// cannot be updated.
    ///
    /// [google.cloud.dialogflow.cx.v3.TestCase.creation_time]: crate::model::TestCase::creation_time
    /// [google.cloud.dialogflow.cx.v3.TestCase.last_test_result]: crate::model::TestCase::last_test_result
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateTestCaseRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [test_case][crate::model::UpdateTestCaseRequest::test_case].
    pub fn set_test_case<T: std::convert::Into<std::option::Option<crate::model::TestCase>>>(
        mut self,
        v: T,
    ) -> Self {
        self.test_case = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateTestCaseRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateTestCaseRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.UpdateTestCaseRequest"
    }
}

/// The request message for
/// [TestCases.GetTestCase][google.cloud.dialogflow.cx.v3.TestCases.GetTestCase].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.GetTestCase]: crate::client::TestCases::get_test_case
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetTestCaseRequest {
    /// Required. The name of the testcase.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/testCases/<TestCaseID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetTestCaseRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetTestCaseRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetTestCaseRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetTestCaseRequest"
    }
}

/// The request message for
/// [TestCases.RunTestCase][google.cloud.dialogflow.cx.v3.TestCases.RunTestCase].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.RunTestCase]: crate::client::TestCases::run_test_case
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RunTestCaseRequest {
    /// Required. Format of test case name to run:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/testCases/<TestCaseID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. Environment name. If not set, draft environment is assumed.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub environment: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RunTestCaseRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::RunTestCaseRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [environment][crate::model::RunTestCaseRequest::environment].
    pub fn set_environment<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.environment = v.into();
        self
    }
}

impl wkt::message::Message for RunTestCaseRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.RunTestCaseRequest"
    }
}

/// The response message for
/// [TestCases.RunTestCase][google.cloud.dialogflow.cx.v3.TestCases.RunTestCase].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.RunTestCase]: crate::client::TestCases::run_test_case
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RunTestCaseResponse {
    /// The result.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub result: std::option::Option<crate::model::TestCaseResult>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RunTestCaseResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [result][crate::model::RunTestCaseResponse::result].
    pub fn set_result<T: std::convert::Into<std::option::Option<crate::model::TestCaseResult>>>(
        mut self,
        v: T,
    ) -> Self {
        self.result = v.into();
        self
    }
}

impl wkt::message::Message for RunTestCaseResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.RunTestCaseResponse"
    }
}

/// Metadata returned for the
/// [TestCases.RunTestCase][google.cloud.dialogflow.cx.v3.TestCases.RunTestCase]
/// long running operation. This message currently has no fields.
///
/// [google.cloud.dialogflow.cx.v3.TestCases.RunTestCase]: crate::client::TestCases::run_test_case
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RunTestCaseMetadata {
    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RunTestCaseMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for RunTestCaseMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.RunTestCaseMetadata"
    }
}

/// The request message for
/// [TestCases.BatchRunTestCases][google.cloud.dialogflow.cx.v3.TestCases.BatchRunTestCases].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.BatchRunTestCases]: crate::client::TestCases::batch_run_test_cases
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchRunTestCasesRequest {
    /// Required. Agent name. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. If not set, draft environment is assumed. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub environment: std::string::String,

    /// Required. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/testCases/<TestCaseID>`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub test_cases: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BatchRunTestCasesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::BatchRunTestCasesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [environment][crate::model::BatchRunTestCasesRequest::environment].
    pub fn set_environment<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.environment = v.into();
        self
    }

    /// Sets the value of [test_cases][crate::model::BatchRunTestCasesRequest::test_cases].
    pub fn set_test_cases<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.test_cases = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchRunTestCasesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.BatchRunTestCasesRequest"
    }
}

/// The response message for
/// [TestCases.BatchRunTestCases][google.cloud.dialogflow.cx.v3.TestCases.BatchRunTestCases].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.BatchRunTestCases]: crate::client::TestCases::batch_run_test_cases
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchRunTestCasesResponse {
    /// The test case results. The detailed
    /// [conversation
    /// turns][google.cloud.dialogflow.cx.v3.TestCaseResult.conversation_turns] are
    /// empty in this response.
    ///
    /// [google.cloud.dialogflow.cx.v3.TestCaseResult.conversation_turns]: crate::model::TestCaseResult::conversation_turns
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub results: std::vec::Vec<crate::model::TestCaseResult>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BatchRunTestCasesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [results][crate::model::BatchRunTestCasesResponse::results].
    pub fn set_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TestCaseResult>,
    {
        use std::iter::Iterator;
        self.results = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchRunTestCasesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.BatchRunTestCasesResponse"
    }
}

/// Metadata returned for the
/// [TestCases.BatchRunTestCases][google.cloud.dialogflow.cx.v3.TestCases.BatchRunTestCases]
/// long running operation.
///
/// [google.cloud.dialogflow.cx.v3.TestCases.BatchRunTestCases]: crate::client::TestCases::batch_run_test_cases
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchRunTestCasesMetadata {
    /// The test errors.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub errors: std::vec::Vec<crate::model::TestError>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BatchRunTestCasesMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [errors][crate::model::BatchRunTestCasesMetadata::errors].
    pub fn set_errors<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TestError>,
    {
        use std::iter::Iterator;
        self.errors = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchRunTestCasesMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.BatchRunTestCasesMetadata"
    }
}

/// Error info for running a test.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TestError {
    /// The test case resource name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub test_case: std::string::String,

    /// The status associated with the test.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub status: std::option::Option<rpc::model::Status>,

    /// The timestamp when the test was completed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub test_time: std::option::Option<wkt::Timestamp>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TestError {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [test_case][crate::model::TestError::test_case].
    pub fn set_test_case<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.test_case = v.into();
        self
    }

    /// Sets the value of [status][crate::model::TestError::status].
    pub fn set_status<T: std::convert::Into<std::option::Option<rpc::model::Status>>>(
        mut self,
        v: T,
    ) -> Self {
        self.status = v.into();
        self
    }

    /// Sets the value of [test_time][crate::model::TestError::test_time].
    pub fn set_test_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.test_time = v.into();
        self
    }
}

impl wkt::message::Message for TestError {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.TestError"
    }
}

/// The request message for
/// [TestCases.ImportTestCases][google.cloud.dialogflow.cx.v3.TestCases.ImportTestCases].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.ImportTestCases]: crate::client::TestCases::import_test_cases
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportTestCasesRequest {
    /// Required. The agent to import test cases to.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The source to import.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub source: std::option::Option<crate::model::import_test_cases_request::Source>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportTestCasesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ImportTestCasesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [source][crate::model::ImportTestCasesRequest::source].
    ///
    /// Note that all the setters affecting `source` are mutually
    /// exclusive.
    pub fn set_source<
        T: std::convert::Into<std::option::Option<crate::model::import_test_cases_request::Source>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = v.into();
        self
    }

    /// The value of [source][crate::model::ImportTestCasesRequest::source]
    /// if it holds a `GcsUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn gcs_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::import_test_cases_request::Source::GcsUri(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [source][crate::model::ImportTestCasesRequest::source]
    /// if it holds a `Content`, `None` if the field is not set or
    /// holds a different branch.
    pub fn content(&self) -> std::option::Option<&::bytes::Bytes> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::import_test_cases_request::Source::Content(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [source][crate::model::ImportTestCasesRequest::source]
    /// to hold a `GcsUri`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_gcs_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source = std::option::Option::Some(
            crate::model::import_test_cases_request::Source::GcsUri(v.into()),
        );
        self
    }

    /// Sets the value of [source][crate::model::ImportTestCasesRequest::source]
    /// to hold a `Content`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_content<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.source = std::option::Option::Some(
            crate::model::import_test_cases_request::Source::Content(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ImportTestCasesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ImportTestCasesRequest"
    }
}

/// Defines additional types related to [ImportTestCasesRequest].
pub mod import_test_cases_request {
    #[allow(unused_imports)]
    use super::*;

    /// Required. The source to import.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Source {
        /// The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI
        /// to import test cases from. The format of this URI must be
        /// `gs://<bucket-name>/<object-name>`.
        ///
        /// Dialogflow performs a read operation for the Cloud Storage object
        /// on the caller's behalf, so your request authentication must
        /// have read permissions for the object. For more information, see
        /// [Dialogflow access
        /// control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
        GcsUri(std::string::String),
        /// Uncompressed raw byte content for test cases.
        Content(::bytes::Bytes),
    }
}

/// The response message for
/// [TestCases.ImportTestCases][google.cloud.dialogflow.cx.v3.TestCases.ImportTestCases].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.ImportTestCases]: crate::client::TestCases::import_test_cases
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportTestCasesResponse {
    /// The unique identifiers of the new test cases.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/testCases/<TestCaseID>`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub names: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportTestCasesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [names][crate::model::ImportTestCasesResponse::names].
    pub fn set_names<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.names = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ImportTestCasesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ImportTestCasesResponse"
    }
}

/// Metadata returned for the
/// [TestCases.ImportTestCases][google.cloud.dialogflow.cx.v3.TestCases.ImportTestCases]
/// long running operation.
///
/// [google.cloud.dialogflow.cx.v3.TestCases.ImportTestCases]: crate::client::TestCases::import_test_cases
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportTestCasesMetadata {
    /// Errors for failed test cases.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub errors: std::vec::Vec<crate::model::TestCaseError>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportTestCasesMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [errors][crate::model::ImportTestCasesMetadata::errors].
    pub fn set_errors<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TestCaseError>,
    {
        use std::iter::Iterator;
        self.errors = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ImportTestCasesMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ImportTestCasesMetadata"
    }
}

/// Error info for importing a test.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TestCaseError {
    /// The test case.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub test_case: std::option::Option<crate::model::TestCase>,

    /// The status associated with the test case.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub status: std::option::Option<rpc::model::Status>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TestCaseError {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [test_case][crate::model::TestCaseError::test_case].
    pub fn set_test_case<T: std::convert::Into<std::option::Option<crate::model::TestCase>>>(
        mut self,
        v: T,
    ) -> Self {
        self.test_case = v.into();
        self
    }

    /// Sets the value of [status][crate::model::TestCaseError::status].
    pub fn set_status<T: std::convert::Into<std::option::Option<rpc::model::Status>>>(
        mut self,
        v: T,
    ) -> Self {
        self.status = v.into();
        self
    }
}

impl wkt::message::Message for TestCaseError {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.TestCaseError"
    }
}

/// The request message for
/// [TestCases.ExportTestCases][google.cloud.dialogflow.cx.v3.TestCases.ExportTestCases].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.ExportTestCases]: crate::client::TestCases::export_test_cases
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportTestCasesRequest {
    /// Required. The agent where to export test cases from.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The data format of the exported test cases. If not specified, `BLOB` is
    /// assumed.
    pub data_format: crate::model::export_test_cases_request::DataFormat,

    /// The filter expression used to filter exported test cases, see
    /// [API Filtering](https://aip.dev/160). The expression is case insensitive
    /// and supports the following syntax:
    ///
    /// name = \<value\> [OR name = \<value\>] ...
    ///
    /// For example:
    ///
    /// * "name = t1 OR name = t2" matches the test case with the exact resource
    ///   name "t1" or "t2".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// The destination to export.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub destination: std::option::Option<crate::model::export_test_cases_request::Destination>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExportTestCasesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ExportTestCasesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [data_format][crate::model::ExportTestCasesRequest::data_format].
    pub fn set_data_format<
        T: std::convert::Into<crate::model::export_test_cases_request::DataFormat>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.data_format = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ExportTestCasesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [destination][crate::model::ExportTestCasesRequest::destination].
    ///
    /// Note that all the setters affecting `destination` are mutually
    /// exclusive.
    pub fn set_destination<
        T: std::convert::Into<
                std::option::Option<crate::model::export_test_cases_request::Destination>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = v.into();
        self
    }

    /// The value of [destination][crate::model::ExportTestCasesRequest::destination]
    /// if it holds a `GcsUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn gcs_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::export_test_cases_request::Destination::GcsUri(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [destination][crate::model::ExportTestCasesRequest::destination]
    /// to hold a `GcsUri`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_gcs_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::export_test_cases_request::Destination::GcsUri(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ExportTestCasesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ExportTestCasesRequest"
    }
}

/// Defines additional types related to [ExportTestCasesRequest].
pub mod export_test_cases_request {
    #[allow(unused_imports)]
    use super::*;

    /// Data format of the exported test cases.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum DataFormat {
        /// Unspecified format.
        Unspecified,
        /// Raw bytes.
        Blob,
        /// JSON format.
        Json,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [DataFormat::value] or
        /// [DataFormat::name].
        UnknownValue(data_format::UnknownValue),
    }

    #[doc(hidden)]
    pub mod data_format {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl DataFormat {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Blob => std::option::Option::Some(1),
                Self::Json => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("DATA_FORMAT_UNSPECIFIED"),
                Self::Blob => std::option::Option::Some("BLOB"),
                Self::Json => std::option::Option::Some("JSON"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for DataFormat {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for DataFormat {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for DataFormat {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Blob,
                2 => Self::Json,
                _ => Self::UnknownValue(data_format::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for DataFormat {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "DATA_FORMAT_UNSPECIFIED" => Self::Unspecified,
                "BLOB" => Self::Blob,
                "JSON" => Self::Json,
                _ => Self::UnknownValue(data_format::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for DataFormat {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Blob => serializer.serialize_i32(1),
                Self::Json => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for DataFormat {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<DataFormat>::new(
                ".google.cloud.dialogflow.cx.v3.ExportTestCasesRequest.DataFormat",
            ))
        }
    }

    /// The destination to export.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Destination {
        /// The [Google Cloud Storage](https://cloud.google.com/storage/docs/) URI to
        /// export the test cases to. The format of this URI must be
        /// `gs://<bucket-name>/<object-name>`. If unspecified, the serialized test
        /// cases is returned inline.
        ///
        /// Dialogflow performs a write operation for the Cloud Storage object
        /// on the caller's behalf, so your request authentication must
        /// have write permissions for the object. For more information, see
        /// [Dialogflow access
        /// control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
        GcsUri(std::string::String),
    }
}

/// The response message for
/// [TestCases.ExportTestCases][google.cloud.dialogflow.cx.v3.TestCases.ExportTestCases].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.ExportTestCases]: crate::client::TestCases::export_test_cases
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportTestCasesResponse {
    /// The exported test cases.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub destination: std::option::Option<crate::model::export_test_cases_response::Destination>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExportTestCasesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [destination][crate::model::ExportTestCasesResponse::destination].
    ///
    /// Note that all the setters affecting `destination` are mutually
    /// exclusive.
    pub fn set_destination<
        T: std::convert::Into<
                std::option::Option<crate::model::export_test_cases_response::Destination>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = v.into();
        self
    }

    /// The value of [destination][crate::model::ExportTestCasesResponse::destination]
    /// if it holds a `GcsUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn gcs_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::export_test_cases_response::Destination::GcsUri(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [destination][crate::model::ExportTestCasesResponse::destination]
    /// if it holds a `Content`, `None` if the field is not set or
    /// holds a different branch.
    pub fn content(&self) -> std::option::Option<&::bytes::Bytes> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::export_test_cases_response::Destination::Content(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [destination][crate::model::ExportTestCasesResponse::destination]
    /// to hold a `GcsUri`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_gcs_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::export_test_cases_response::Destination::GcsUri(v.into()),
        );
        self
    }

    /// Sets the value of [destination][crate::model::ExportTestCasesResponse::destination]
    /// to hold a `Content`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_content<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::export_test_cases_response::Destination::Content(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ExportTestCasesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ExportTestCasesResponse"
    }
}

/// Defines additional types related to [ExportTestCasesResponse].
pub mod export_test_cases_response {
    #[allow(unused_imports)]
    use super::*;

    /// The exported test cases.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Destination {
        /// The URI to a file containing the exported test cases. This field is
        /// populated only if `gcs_uri` is specified in
        /// [ExportTestCasesRequest][google.cloud.dialogflow.cx.v3.ExportTestCasesRequest].
        ///
        /// [google.cloud.dialogflow.cx.v3.ExportTestCasesRequest]: crate::model::ExportTestCasesRequest
        GcsUri(std::string::String),
        /// Uncompressed raw byte content for test cases.
        Content(::bytes::Bytes),
    }
}

/// Metadata returned for the
/// [TestCases.ExportTestCases][google.cloud.dialogflow.cx.v3.TestCases.ExportTestCases]
/// long running operation. This message currently has no fields.
///
/// [google.cloud.dialogflow.cx.v3.TestCases.ExportTestCases]: crate::client::TestCases::export_test_cases
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportTestCasesMetadata {
    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExportTestCasesMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for ExportTestCasesMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ExportTestCasesMetadata"
    }
}

/// The request message for
/// [TestCases.ListTestCaseResults][google.cloud.dialogflow.cx.v3.TestCases.ListTestCaseResults].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.ListTestCaseResults]: crate::client::TestCases::list_test_case_results
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTestCaseResultsRequest {
    /// Required. The test case to list results for.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/testCases/<TestCaseID>`.
    /// Specify a `-` as a wildcard for TestCase ID to
    /// list results across multiple test cases.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return in a single page. By default 100 and
    /// at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// The filter expression used to filter test case results. See
    /// [API Filtering](https://aip.dev/160).
    ///
    /// The expression is case insensitive. Only 'AND' is supported for logical
    /// operators. The supported syntax is listed below in detail:
    ///
    /// \<field\> \<operator\> \<value\> [AND \<field\> \<operator\> \<value\>] ...
    /// [AND latest]
    ///
    /// The supported fields and operators are:
    /// field                 operator
    /// `environment`         `=`, `IN`  (Use value `draft` for draft environment)
    /// `test_time`           `>`, `<`
    ///
    /// `latest` only returns the latest test result in all results for each test
    /// case.
    ///
    /// Examples:
    ///
    /// * "environment=draft AND latest" matches the latest test result for each
    ///   test case in the draft environment.
    /// * "environment IN (e1,e2)" matches any test case results with an
    ///   environment resource name of either "e1" or "e2".
    /// * "test_time > 1602540713" matches any test case results with test time
    ///   later than a unix timestamp in seconds 1602540713.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListTestCaseResultsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListTestCaseResultsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListTestCaseResultsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListTestCaseResultsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListTestCaseResultsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }
}

impl wkt::message::Message for ListTestCaseResultsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListTestCaseResultsRequest"
    }
}

/// The response message for
/// [TestCases.ListTestCaseResults][google.cloud.dialogflow.cx.v3.TestCases.ListTestCaseResults].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.ListTestCaseResults]: crate::client::TestCases::list_test_case_results
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTestCaseResultsResponse {
    /// The list of test case results.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub test_case_results: std::vec::Vec<crate::model::TestCaseResult>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListTestCaseResultsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListTestCaseResultsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [test_case_results][crate::model::ListTestCaseResultsResponse::test_case_results].
    pub fn set_test_case_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TestCaseResult>,
    {
        use std::iter::Iterator;
        self.test_case_results = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListTestCaseResultsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListTestCaseResultsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListTestCaseResultsResponse {
    type PageItem = crate::model::TestCaseResult;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.test_case_results
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [TestCases.GetTestCaseResult][google.cloud.dialogflow.cx.v3.TestCases.GetTestCaseResult].
///
/// [google.cloud.dialogflow.cx.v3.TestCases.GetTestCaseResult]: crate::client::TestCases::get_test_case_result
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetTestCaseResultRequest {
    /// Required. The name of the testcase.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/testCases/<TestCaseID>/results/<TestCaseResultID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetTestCaseResultRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetTestCaseResultRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetTestCaseResultRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetTestCaseResultRequest"
    }
}

/// A TransitionRouteGroup represents a group of
/// [`TransitionRoutes`][google.cloud.dialogflow.cx.v3.TransitionRoute] to be
/// used by a [Page][google.cloud.dialogflow.cx.v3.Page].
///
/// [google.cloud.dialogflow.cx.v3.Page]: crate::model::Page
/// [google.cloud.dialogflow.cx.v3.TransitionRoute]: crate::model::TransitionRoute
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TransitionRouteGroup {
    /// The unique identifier of the transition route group.
    /// [TransitionRouteGroups.CreateTransitionRouteGroup][google.cloud.dialogflow.cx.v3.TransitionRouteGroups.CreateTransitionRouteGroup]
    /// populates the name automatically. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/transitionRouteGroups/<TransitionRouteGroupID>`
    /// .
    ///
    /// [google.cloud.dialogflow.cx.v3.TransitionRouteGroups.CreateTransitionRouteGroup]: crate::client::TransitionRouteGroups::create_transition_route_group
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The human-readable name of the transition route group, unique
    /// within the flow. The display name can be no longer than 30 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Transition routes associated with the
    /// [TransitionRouteGroup][google.cloud.dialogflow.cx.v3.TransitionRouteGroup].
    ///
    /// [google.cloud.dialogflow.cx.v3.TransitionRouteGroup]: crate::model::TransitionRouteGroup
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub transition_routes: std::vec::Vec<crate::model::TransitionRoute>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TransitionRouteGroup {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::TransitionRouteGroup::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::TransitionRouteGroup::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [transition_routes][crate::model::TransitionRouteGroup::transition_routes].
    pub fn set_transition_routes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TransitionRoute>,
    {
        use std::iter::Iterator;
        self.transition_routes = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TransitionRouteGroup {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.TransitionRouteGroup"
    }
}

/// The request message for
/// [TransitionRouteGroups.ListTransitionRouteGroups][google.cloud.dialogflow.cx.v3.TransitionRouteGroups.ListTransitionRouteGroups].
///
/// [google.cloud.dialogflow.cx.v3.TransitionRouteGroups.ListTransitionRouteGroups]: crate::client::TransitionRouteGroups::list_transition_route_groups
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTransitionRouteGroupsRequest {
    /// Required. The flow to list all transition route groups for.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`
    /// or `projects/\<ProjectID\>/locations/\<LocationID\>/agents/\<AgentID\>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return in a single page. By default 100 and
    /// at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// The language to list transition route groups for. The following fields are
    /// language dependent:
    ///
    /// * `TransitionRouteGroup.transition_routes.trigger_fulfillment.messages`
    ///
    /// `TransitionRouteGroup.transition_routes.trigger_fulfillment.conditional_cases`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListTransitionRouteGroupsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListTransitionRouteGroupsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListTransitionRouteGroupsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListTransitionRouteGroupsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::ListTransitionRouteGroupsRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for ListTransitionRouteGroupsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListTransitionRouteGroupsRequest"
    }
}

/// The response message for
/// [TransitionRouteGroups.ListTransitionRouteGroups][google.cloud.dialogflow.cx.v3.TransitionRouteGroups.ListTransitionRouteGroups].
///
/// [google.cloud.dialogflow.cx.v3.TransitionRouteGroups.ListTransitionRouteGroups]: crate::client::TransitionRouteGroups::list_transition_route_groups
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTransitionRouteGroupsResponse {
    /// The list of transition route groups. There will be a maximum number of
    /// items returned based on the page_size field in the request. The list may in
    /// some cases be empty or contain fewer entries than page_size even if this
    /// isn't the last page.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub transition_route_groups: std::vec::Vec<crate::model::TransitionRouteGroup>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListTransitionRouteGroupsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListTransitionRouteGroupsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [transition_route_groups][crate::model::ListTransitionRouteGroupsResponse::transition_route_groups].
    pub fn set_transition_route_groups<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TransitionRouteGroup>,
    {
        use std::iter::Iterator;
        self.transition_route_groups = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListTransitionRouteGroupsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListTransitionRouteGroupsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListTransitionRouteGroupsResponse {
    type PageItem = crate::model::TransitionRouteGroup;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.transition_route_groups
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [TransitionRouteGroups.GetTransitionRouteGroup][google.cloud.dialogflow.cx.v3.TransitionRouteGroups.GetTransitionRouteGroup].
///
/// [google.cloud.dialogflow.cx.v3.TransitionRouteGroups.GetTransitionRouteGroup]: crate::client::TransitionRouteGroups::get_transition_route_group
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetTransitionRouteGroupRequest {
    /// Required. The name of the
    /// [TransitionRouteGroup][google.cloud.dialogflow.cx.v3.TransitionRouteGroup].
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/transitionRouteGroups/<TransitionRouteGroupID>`
    /// or
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/transitionRouteGroups/<TransitionRouteGroupID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.TransitionRouteGroup]: crate::model::TransitionRouteGroup
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The language to retrieve the transition route group for. The following
    /// fields are language dependent:
    ///
    /// * `TransitionRouteGroup.transition_routes.trigger_fulfillment.messages`
    ///
    /// `TransitionRouteGroup.transition_routes.trigger_fulfillment.conditional_cases`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetTransitionRouteGroupRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetTransitionRouteGroupRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::GetTransitionRouteGroupRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for GetTransitionRouteGroupRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetTransitionRouteGroupRequest"
    }
}

/// The request message for
/// [TransitionRouteGroups.CreateTransitionRouteGroup][google.cloud.dialogflow.cx.v3.TransitionRouteGroups.CreateTransitionRouteGroup].
///
/// [google.cloud.dialogflow.cx.v3.TransitionRouteGroups.CreateTransitionRouteGroup]: crate::client::TransitionRouteGroups::create_transition_route_group
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateTransitionRouteGroupRequest {
    /// Required. The flow to create an
    /// [TransitionRouteGroup][google.cloud.dialogflow.cx.v3.TransitionRouteGroup]
    /// for. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`
    /// or `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`
    /// for agent-level groups.
    ///
    /// [google.cloud.dialogflow.cx.v3.TransitionRouteGroup]: crate::model::TransitionRouteGroup
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The transition route group to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub transition_route_group: std::option::Option<crate::model::TransitionRouteGroup>,

    /// The language of the following fields in `TransitionRouteGroup`:
    ///
    /// * `TransitionRouteGroup.transition_routes.trigger_fulfillment.messages`
    ///
    /// `TransitionRouteGroup.transition_routes.trigger_fulfillment.conditional_cases`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateTransitionRouteGroupRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateTransitionRouteGroupRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [transition_route_group][crate::model::CreateTransitionRouteGroupRequest::transition_route_group].
    pub fn set_transition_route_group<
        T: std::convert::Into<std::option::Option<crate::model::TransitionRouteGroup>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.transition_route_group = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::CreateTransitionRouteGroupRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for CreateTransitionRouteGroupRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CreateTransitionRouteGroupRequest"
    }
}

/// The request message for
/// [TransitionRouteGroups.UpdateTransitionRouteGroup][google.cloud.dialogflow.cx.v3.TransitionRouteGroups.UpdateTransitionRouteGroup].
///
/// [google.cloud.dialogflow.cx.v3.TransitionRouteGroups.UpdateTransitionRouteGroup]: crate::client::TransitionRouteGroups::update_transition_route_group
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateTransitionRouteGroupRequest {
    /// Required. The transition route group to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub transition_route_group: std::option::Option<crate::model::TransitionRouteGroup>,

    /// The mask to control which fields get updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// The language of the following fields in `TransitionRouteGroup`:
    ///
    /// * `TransitionRouteGroup.transition_routes.trigger_fulfillment.messages`
    ///
    /// `TransitionRouteGroup.transition_routes.trigger_fulfillment.conditional_cases`
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/cx/docs/reference/language)
    /// are supported.
    /// Note: languages must be enabled in the agent before they can be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateTransitionRouteGroupRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [transition_route_group][crate::model::UpdateTransitionRouteGroupRequest::transition_route_group].
    pub fn set_transition_route_group<
        T: std::convert::Into<std::option::Option<crate::model::TransitionRouteGroup>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.transition_route_group = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateTransitionRouteGroupRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::UpdateTransitionRouteGroupRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for UpdateTransitionRouteGroupRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.UpdateTransitionRouteGroupRequest"
    }
}

/// The request message for
/// [TransitionRouteGroups.DeleteTransitionRouteGroup][google.cloud.dialogflow.cx.v3.TransitionRouteGroups.DeleteTransitionRouteGroup].
///
/// [google.cloud.dialogflow.cx.v3.TransitionRouteGroups.DeleteTransitionRouteGroup]: crate::client::TransitionRouteGroups::delete_transition_route_group
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteTransitionRouteGroupRequest {
    /// Required. The name of the
    /// [TransitionRouteGroup][google.cloud.dialogflow.cx.v3.TransitionRouteGroup]
    /// to delete. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/transitionRouteGroups/<TransitionRouteGroupID>`
    /// or
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/transitionRouteGroups/<TransitionRouteGroupID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.TransitionRouteGroup]: crate::model::TransitionRouteGroup
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// This field has no effect for transition route group that no page is using.
    /// If the transition route group is referenced by any page:
    ///
    /// * If `force` is set to false, an error will be returned with message
    ///   indicating pages that reference the transition route group.
    /// * If `force` is set to true, Dialogflow will remove the transition route
    ///   group, as well as any reference to it.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub force: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteTransitionRouteGroupRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteTransitionRouteGroupRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [force][crate::model::DeleteTransitionRouteGroupRequest::force].
    pub fn set_force<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.force = v.into();
        self
    }
}

impl wkt::message::Message for DeleteTransitionRouteGroupRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DeleteTransitionRouteGroupRequest"
    }
}

/// Agent/flow validation message.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ValidationMessage {
    /// The type of the resources where the message is found.
    pub resource_type: crate::model::validation_message::ResourceType,

    /// The names of the resources where the message is found.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[deprecated]
    pub resources: std::vec::Vec<std::string::String>,

    /// The resource names of the resources where the message is found.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub resource_names: std::vec::Vec<crate::model::ResourceName>,

    /// Indicates the severity of the message.
    pub severity: crate::model::validation_message::Severity,

    /// The message detail.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub detail: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ValidationMessage {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [resource_type][crate::model::ValidationMessage::resource_type].
    pub fn set_resource_type<
        T: std::convert::Into<crate::model::validation_message::ResourceType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_type = v.into();
        self
    }

    /// Sets the value of [severity][crate::model::ValidationMessage::severity].
    pub fn set_severity<T: std::convert::Into<crate::model::validation_message::Severity>>(
        mut self,
        v: T,
    ) -> Self {
        self.severity = v.into();
        self
    }

    /// Sets the value of [detail][crate::model::ValidationMessage::detail].
    pub fn set_detail<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.detail = v.into();
        self
    }

    /// Sets the value of [resources][crate::model::ValidationMessage::resources].
    #[deprecated]
    pub fn set_resources<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.resources = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [resource_names][crate::model::ValidationMessage::resource_names].
    pub fn set_resource_names<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ResourceName>,
    {
        use std::iter::Iterator;
        self.resource_names = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ValidationMessage {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ValidationMessage"
    }
}

/// Defines additional types related to [ValidationMessage].
pub mod validation_message {
    #[allow(unused_imports)]
    use super::*;

    /// Resource types.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum ResourceType {
        /// Unspecified.
        Unspecified,
        /// Agent.
        Agent,
        /// Intent.
        Intent,
        /// Intent training phrase.
        IntentTrainingPhrase,
        /// Intent parameter.
        IntentParameter,
        /// Multiple intents.
        Intents,
        /// Multiple training phrases.
        IntentTrainingPhrases,
        /// Entity type.
        EntityType,
        /// Multiple entity types.
        EntityTypes,
        /// Webhook.
        Webhook,
        /// Flow.
        Flow,
        /// Page.
        Page,
        /// Multiple pages.
        Pages,
        /// Transition route group.
        TransitionRouteGroup,
        /// Agent transition route group.
        AgentTransitionRouteGroup,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [ResourceType::value] or
        /// [ResourceType::name].
        UnknownValue(resource_type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod resource_type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl ResourceType {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Agent => std::option::Option::Some(1),
                Self::Intent => std::option::Option::Some(2),
                Self::IntentTrainingPhrase => std::option::Option::Some(8),
                Self::IntentParameter => std::option::Option::Some(9),
                Self::Intents => std::option::Option::Some(10),
                Self::IntentTrainingPhrases => std::option::Option::Some(11),
                Self::EntityType => std::option::Option::Some(3),
                Self::EntityTypes => std::option::Option::Some(12),
                Self::Webhook => std::option::Option::Some(4),
                Self::Flow => std::option::Option::Some(5),
                Self::Page => std::option::Option::Some(6),
                Self::Pages => std::option::Option::Some(13),
                Self::TransitionRouteGroup => std::option::Option::Some(7),
                Self::AgentTransitionRouteGroup => std::option::Option::Some(14),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("RESOURCE_TYPE_UNSPECIFIED"),
                Self::Agent => std::option::Option::Some("AGENT"),
                Self::Intent => std::option::Option::Some("INTENT"),
                Self::IntentTrainingPhrase => std::option::Option::Some("INTENT_TRAINING_PHRASE"),
                Self::IntentParameter => std::option::Option::Some("INTENT_PARAMETER"),
                Self::Intents => std::option::Option::Some("INTENTS"),
                Self::IntentTrainingPhrases => std::option::Option::Some("INTENT_TRAINING_PHRASES"),
                Self::EntityType => std::option::Option::Some("ENTITY_TYPE"),
                Self::EntityTypes => std::option::Option::Some("ENTITY_TYPES"),
                Self::Webhook => std::option::Option::Some("WEBHOOK"),
                Self::Flow => std::option::Option::Some("FLOW"),
                Self::Page => std::option::Option::Some("PAGE"),
                Self::Pages => std::option::Option::Some("PAGES"),
                Self::TransitionRouteGroup => std::option::Option::Some("TRANSITION_ROUTE_GROUP"),
                Self::AgentTransitionRouteGroup => {
                    std::option::Option::Some("AGENT_TRANSITION_ROUTE_GROUP")
                }
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for ResourceType {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for ResourceType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for ResourceType {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Agent,
                2 => Self::Intent,
                3 => Self::EntityType,
                4 => Self::Webhook,
                5 => Self::Flow,
                6 => Self::Page,
                7 => Self::TransitionRouteGroup,
                8 => Self::IntentTrainingPhrase,
                9 => Self::IntentParameter,
                10 => Self::Intents,
                11 => Self::IntentTrainingPhrases,
                12 => Self::EntityTypes,
                13 => Self::Pages,
                14 => Self::AgentTransitionRouteGroup,
                _ => Self::UnknownValue(resource_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for ResourceType {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "RESOURCE_TYPE_UNSPECIFIED" => Self::Unspecified,
                "AGENT" => Self::Agent,
                "INTENT" => Self::Intent,
                "INTENT_TRAINING_PHRASE" => Self::IntentTrainingPhrase,
                "INTENT_PARAMETER" => Self::IntentParameter,
                "INTENTS" => Self::Intents,
                "INTENT_TRAINING_PHRASES" => Self::IntentTrainingPhrases,
                "ENTITY_TYPE" => Self::EntityType,
                "ENTITY_TYPES" => Self::EntityTypes,
                "WEBHOOK" => Self::Webhook,
                "FLOW" => Self::Flow,
                "PAGE" => Self::Page,
                "PAGES" => Self::Pages,
                "TRANSITION_ROUTE_GROUP" => Self::TransitionRouteGroup,
                "AGENT_TRANSITION_ROUTE_GROUP" => Self::AgentTransitionRouteGroup,
                _ => Self::UnknownValue(resource_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for ResourceType {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Agent => serializer.serialize_i32(1),
                Self::Intent => serializer.serialize_i32(2),
                Self::IntentTrainingPhrase => serializer.serialize_i32(8),
                Self::IntentParameter => serializer.serialize_i32(9),
                Self::Intents => serializer.serialize_i32(10),
                Self::IntentTrainingPhrases => serializer.serialize_i32(11),
                Self::EntityType => serializer.serialize_i32(3),
                Self::EntityTypes => serializer.serialize_i32(12),
                Self::Webhook => serializer.serialize_i32(4),
                Self::Flow => serializer.serialize_i32(5),
                Self::Page => serializer.serialize_i32(6),
                Self::Pages => serializer.serialize_i32(13),
                Self::TransitionRouteGroup => serializer.serialize_i32(7),
                Self::AgentTransitionRouteGroup => serializer.serialize_i32(14),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for ResourceType {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<ResourceType>::new(
                ".google.cloud.dialogflow.cx.v3.ValidationMessage.ResourceType",
            ))
        }
    }

    /// Severity level.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Severity {
        /// Unspecified.
        Unspecified,
        /// The agent doesn't follow Dialogflow best practices.
        Info,
        /// The agent may not behave as expected.
        Warning,
        /// The agent may experience failures.
        Error,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [Severity::value] or
        /// [Severity::name].
        UnknownValue(severity::UnknownValue),
    }

    #[doc(hidden)]
    pub mod severity {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl Severity {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Info => std::option::Option::Some(1),
                Self::Warning => std::option::Option::Some(2),
                Self::Error => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("SEVERITY_UNSPECIFIED"),
                Self::Info => std::option::Option::Some("INFO"),
                Self::Warning => std::option::Option::Some("WARNING"),
                Self::Error => std::option::Option::Some("ERROR"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for Severity {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for Severity {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for Severity {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Info,
                2 => Self::Warning,
                3 => Self::Error,
                _ => Self::UnknownValue(severity::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for Severity {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "SEVERITY_UNSPECIFIED" => Self::Unspecified,
                "INFO" => Self::Info,
                "WARNING" => Self::Warning,
                "ERROR" => Self::Error,
                _ => Self::UnknownValue(severity::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for Severity {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Info => serializer.serialize_i32(1),
                Self::Warning => serializer.serialize_i32(2),
                Self::Error => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for Severity {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<Severity>::new(
                ".google.cloud.dialogflow.cx.v3.ValidationMessage.Severity",
            ))
        }
    }
}

/// Resource name and display name.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ResourceName {
    /// Name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Display name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ResourceName {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ResourceName::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::ResourceName::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }
}

impl wkt::message::Message for ResourceName {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ResourceName"
    }
}

/// Metadata associated with the long running operation for
/// [Versions.CreateVersion][google.cloud.dialogflow.cx.v3.Versions.CreateVersion].
///
/// [google.cloud.dialogflow.cx.v3.Versions.CreateVersion]: crate::client::Versions::create_version
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateVersionOperationMetadata {
    /// Name of the created version.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/versions/<VersionID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub version: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateVersionOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [version][crate::model::CreateVersionOperationMetadata::version].
    pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.version = v.into();
        self
    }
}

impl wkt::message::Message for CreateVersionOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CreateVersionOperationMetadata"
    }
}

/// Represents a version of a flow.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Version {
    /// Format:
    /// projects/\<ProjectID\>/locations/\<LocationID\>/agents/\<AgentID\>/flows/\<FlowID\>/versions/\<VersionID\>.
    /// Version ID is a self-increasing number generated by Dialogflow upon version
    /// creation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The human-readable name of the version. Limit of 64 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// The description of the version. The maximum length is 500 characters. If
    /// exceeded, the request is rejected.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. The NLU settings of the flow at version creation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub nlu_settings: std::option::Option<crate::model::NluSettings>,

    /// Output only. Create time of the version.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The state of this version. This field is read-only and cannot
    /// be set by create and update methods.
    pub state: crate::model::version::State,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Version {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Version::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Version::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Version::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [nlu_settings][crate::model::Version::nlu_settings].
    pub fn set_nlu_settings<
        T: std::convert::Into<std::option::Option<crate::model::NluSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.nlu_settings = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Version::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Version::state].
    pub fn set_state<T: std::convert::Into<crate::model::version::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }
}

impl wkt::message::Message for Version {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.Version"
    }
}

/// Defines additional types related to [Version].
pub mod version {
    #[allow(unused_imports)]
    use super::*;

    /// The state of the version.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum State {
        /// Not specified. This value is not used.
        Unspecified,
        /// Version is not ready to serve (e.g. training is running).
        Running,
        /// Training has succeeded and this version is ready to serve.
        Succeeded,
        /// Version training failed.
        Failed,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [State::value] or
        /// [State::name].
        UnknownValue(state::UnknownValue),
    }

    #[doc(hidden)]
    pub mod state {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl State {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Running => std::option::Option::Some(1),
                Self::Succeeded => std::option::Option::Some(2),
                Self::Failed => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("STATE_UNSPECIFIED"),
                Self::Running => std::option::Option::Some("RUNNING"),
                Self::Succeeded => std::option::Option::Some("SUCCEEDED"),
                Self::Failed => std::option::Option::Some("FAILED"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for State {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Running,
                2 => Self::Succeeded,
                3 => Self::Failed,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for State {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "STATE_UNSPECIFIED" => Self::Unspecified,
                "RUNNING" => Self::Running,
                "SUCCEEDED" => Self::Succeeded,
                "FAILED" => Self::Failed,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for State {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Running => serializer.serialize_i32(1),
                Self::Succeeded => serializer.serialize_i32(2),
                Self::Failed => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for State {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<State>::new(
                ".google.cloud.dialogflow.cx.v3.Version.State",
            ))
        }
    }
}

/// The request message for
/// [Versions.ListVersions][google.cloud.dialogflow.cx.v3.Versions.ListVersions].
///
/// [google.cloud.dialogflow.cx.v3.Versions.ListVersions]: crate::client::Versions::list_versions
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListVersionsRequest {
    /// Required. The [Flow][google.cloud.dialogflow.cx.v3.Flow] to list all
    /// versions for. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Flow]: crate::model::Flow
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return in a single page. By default 20 and
    /// at most 100.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListVersionsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListVersionsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListVersionsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListVersionsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListVersionsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListVersionsRequest"
    }
}

/// The response message for
/// [Versions.ListVersions][google.cloud.dialogflow.cx.v3.Versions.ListVersions].
///
/// [google.cloud.dialogflow.cx.v3.Versions.ListVersions]: crate::client::Versions::list_versions
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListVersionsResponse {
    /// A list of versions. There will be a maximum number of items returned based
    /// on the page_size field in the request. The list may in some cases be empty
    /// or contain fewer entries than page_size even if this isn't the last page.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub versions: std::vec::Vec<crate::model::Version>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListVersionsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListVersionsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [versions][crate::model::ListVersionsResponse::versions].
    pub fn set_versions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Version>,
    {
        use std::iter::Iterator;
        self.versions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListVersionsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListVersionsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListVersionsResponse {
    type PageItem = crate::model::Version;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.versions
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Versions.GetVersion][google.cloud.dialogflow.cx.v3.Versions.GetVersion].
///
/// [google.cloud.dialogflow.cx.v3.Versions.GetVersion]: crate::client::Versions::get_version
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetVersionRequest {
    /// Required. The name of the [Version][google.cloud.dialogflow.cx.v3.Version].
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/versions/<VersionID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Version]: crate::model::Version
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetVersionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetVersionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetVersionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetVersionRequest"
    }
}

/// The request message for
/// [Versions.CreateVersion][google.cloud.dialogflow.cx.v3.Versions.CreateVersion].
///
/// [google.cloud.dialogflow.cx.v3.Versions.CreateVersion]: crate::client::Versions::create_version
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateVersionRequest {
    /// Required. The [Flow][google.cloud.dialogflow.cx.v3.Flow] to create an
    /// [Version][google.cloud.dialogflow.cx.v3.Version] for. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Flow]: crate::model::Flow
    /// [google.cloud.dialogflow.cx.v3.Version]: crate::model::Version
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The version to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub version: std::option::Option<crate::model::Version>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateVersionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateVersionRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [version][crate::model::CreateVersionRequest::version].
    pub fn set_version<T: std::convert::Into<std::option::Option<crate::model::Version>>>(
        mut self,
        v: T,
    ) -> Self {
        self.version = v.into();
        self
    }
}

impl wkt::message::Message for CreateVersionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CreateVersionRequest"
    }
}

/// The request message for
/// [Versions.UpdateVersion][google.cloud.dialogflow.cx.v3.Versions.UpdateVersion].
///
/// [google.cloud.dialogflow.cx.v3.Versions.UpdateVersion]: crate::client::Versions::update_version
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateVersionRequest {
    /// Required. The version to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub version: std::option::Option<crate::model::Version>,

    /// Required. The mask to control which fields get updated. Currently only
    /// `description` and `display_name` can be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateVersionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [version][crate::model::UpdateVersionRequest::version].
    pub fn set_version<T: std::convert::Into<std::option::Option<crate::model::Version>>>(
        mut self,
        v: T,
    ) -> Self {
        self.version = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateVersionRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateVersionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.UpdateVersionRequest"
    }
}

/// The request message for
/// [Versions.DeleteVersion][google.cloud.dialogflow.cx.v3.Versions.DeleteVersion].
///
/// [google.cloud.dialogflow.cx.v3.Versions.DeleteVersion]: crate::client::Versions::delete_version
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteVersionRequest {
    /// Required. The name of the [Version][google.cloud.dialogflow.cx.v3.Version]
    /// to delete. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/versions/<VersionID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Version]: crate::model::Version
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteVersionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteVersionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteVersionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DeleteVersionRequest"
    }
}

/// The request message for
/// [Versions.LoadVersion][google.cloud.dialogflow.cx.v3.Versions.LoadVersion].
///
/// [google.cloud.dialogflow.cx.v3.Versions.LoadVersion]: crate::client::Versions::load_version
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LoadVersionRequest {
    /// Required. The [Version][google.cloud.dialogflow.cx.v3.Version] to be loaded
    /// to draft flow. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/versions/<VersionID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Version]: crate::model::Version
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// This field is used to prevent accidental overwrite of other agent
    /// resources, which can potentially impact other flow's behavior. If
    /// `allow_override_agent_resources` is false, conflicted agent-level resources
    /// will not be overridden (i.e. intents, entities, webhooks).
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub allow_override_agent_resources: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl LoadVersionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::LoadVersionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [allow_override_agent_resources][crate::model::LoadVersionRequest::allow_override_agent_resources].
    pub fn set_allow_override_agent_resources<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_override_agent_resources = v.into();
        self
    }
}

impl wkt::message::Message for LoadVersionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.LoadVersionRequest"
    }
}

/// The request message for
/// [Versions.CompareVersions][google.cloud.dialogflow.cx.v3.Versions.CompareVersions].
///
/// [google.cloud.dialogflow.cx.v3.Versions.CompareVersions]: crate::client::Versions::compare_versions
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CompareVersionsRequest {
    /// Required. Name of the base flow version to compare with the target version.
    /// Use version ID `0` to indicate the draft version of the specified flow.
    ///
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/versions/<VersionID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub base_version: std::string::String,

    /// Required. Name of the target flow version to compare with the
    /// base version. Use version ID `0` to indicate the draft version of the
    /// specified flow. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/versions/<VersionID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_version: std::string::String,

    /// The language to compare the flow versions for.
    ///
    /// If not specified, the agent's default language is used.
    /// [Many
    /// languages](https://cloud.google.com/dialogflow/docs/reference/language) are
    /// supported. Note: languages must be enabled in the agent before they can be
    /// used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CompareVersionsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [base_version][crate::model::CompareVersionsRequest::base_version].
    pub fn set_base_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.base_version = v.into();
        self
    }

    /// Sets the value of [target_version][crate::model::CompareVersionsRequest::target_version].
    pub fn set_target_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_version = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::CompareVersionsRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for CompareVersionsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CompareVersionsRequest"
    }
}

/// The response message for
/// [Versions.CompareVersions][google.cloud.dialogflow.cx.v3.Versions.CompareVersions].
///
/// [google.cloud.dialogflow.cx.v3.Versions.CompareVersions]: crate::client::Versions::compare_versions
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CompareVersionsResponse {
    /// JSON representation of the base version content.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub base_version_content_json: std::string::String,

    /// JSON representation of the target version content.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_version_content_json: std::string::String,

    /// The timestamp when the two version compares.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub compare_time: std::option::Option<wkt::Timestamp>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CompareVersionsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [base_version_content_json][crate::model::CompareVersionsResponse::base_version_content_json].
    pub fn set_base_version_content_json<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.base_version_content_json = v.into();
        self
    }

    /// Sets the value of [target_version_content_json][crate::model::CompareVersionsResponse::target_version_content_json].
    pub fn set_target_version_content_json<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.target_version_content_json = v.into();
        self
    }

    /// Sets the value of [compare_time][crate::model::CompareVersionsResponse::compare_time].
    pub fn set_compare_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.compare_time = v.into();
        self
    }
}

impl wkt::message::Message for CompareVersionsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CompareVersionsResponse"
    }
}

/// Webhooks host the developer's business logic. During a session, webhooks
/// allow the developer to use the data extracted by Dialogflow's natural
/// language processing to generate dynamic responses, validate collected data,
/// or trigger actions on the backend.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Webhook {
    /// The unique identifier of the webhook.
    /// Required for the
    /// [Webhooks.UpdateWebhook][google.cloud.dialogflow.cx.v3.Webhooks.UpdateWebhook]
    /// method.
    /// [Webhooks.CreateWebhook][google.cloud.dialogflow.cx.v3.Webhooks.CreateWebhook]
    /// populates the name automatically. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/webhooks/<WebhookID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.Webhooks.CreateWebhook]: crate::client::Webhooks::create_webhook
    /// [google.cloud.dialogflow.cx.v3.Webhooks.UpdateWebhook]: crate::client::Webhooks::update_webhook
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The human-readable name of the webhook, unique within the agent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Webhook execution timeout. Execution is considered failed if Dialogflow
    /// doesn't receive a response from webhook at the end of the timeout period.
    /// Defaults to 5 seconds, maximum allowed timeout is 30 seconds.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub timeout: std::option::Option<wkt::Duration>,

    /// Indicates whether the webhook is disabled.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub disabled: bool,

    /// Required. The webhook configuration.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub webhook: std::option::Option<crate::model::webhook::Webhook>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Webhook {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Webhook::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Webhook::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [timeout][crate::model::Webhook::timeout].
    pub fn set_timeout<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.timeout = v.into();
        self
    }

    /// Sets the value of [disabled][crate::model::Webhook::disabled].
    pub fn set_disabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.disabled = v.into();
        self
    }

    /// Sets the value of [webhook][crate::model::Webhook::webhook].
    ///
    /// Note that all the setters affecting `webhook` are mutually
    /// exclusive.
    pub fn set_webhook<
        T: std::convert::Into<std::option::Option<crate::model::webhook::Webhook>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.webhook = v.into();
        self
    }

    /// The value of [webhook][crate::model::Webhook::webhook]
    /// if it holds a `GenericWebService`, `None` if the field is not set or
    /// holds a different branch.
    pub fn generic_web_service(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::webhook::GenericWebService>> {
        #[allow(unreachable_patterns)]
        self.webhook.as_ref().and_then(|v| match v {
            crate::model::webhook::Webhook::GenericWebService(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [webhook][crate::model::Webhook::webhook]
    /// if it holds a `ServiceDirectory`, `None` if the field is not set or
    /// holds a different branch.
    pub fn service_directory(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::webhook::ServiceDirectoryConfig>> {
        #[allow(unreachable_patterns)]
        self.webhook.as_ref().and_then(|v| match v {
            crate::model::webhook::Webhook::ServiceDirectory(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [webhook][crate::model::Webhook::webhook]
    /// to hold a `GenericWebService`.
    ///
    /// Note that all the setters affecting `webhook` are
    /// mutually exclusive.
    pub fn set_generic_web_service<
        T: std::convert::Into<std::boxed::Box<crate::model::webhook::GenericWebService>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.webhook =
            std::option::Option::Some(crate::model::webhook::Webhook::GenericWebService(v.into()));
        self
    }

    /// Sets the value of [webhook][crate::model::Webhook::webhook]
    /// to hold a `ServiceDirectory`.
    ///
    /// Note that all the setters affecting `webhook` are
    /// mutually exclusive.
    pub fn set_service_directory<
        T: std::convert::Into<std::boxed::Box<crate::model::webhook::ServiceDirectoryConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.webhook =
            std::option::Option::Some(crate::model::webhook::Webhook::ServiceDirectory(v.into()));
        self
    }
}

impl wkt::message::Message for Webhook {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.Webhook"
    }
}

/// Defines additional types related to [Webhook].
pub mod webhook {
    #[allow(unused_imports)]
    use super::*;

    /// Represents configuration for a generic web service.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct GenericWebService {
        /// Required. The webhook URI for receiving POST requests. It must use https
        /// protocol.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub uri: std::string::String,

        /// The user name for HTTP Basic authentication.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        #[deprecated]
        pub username: std::string::String,

        /// The password for HTTP Basic authentication.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        #[deprecated]
        pub password: std::string::String,

        /// The HTTP request headers to send together with webhook requests.
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub request_headers: std::collections::HashMap<std::string::String, std::string::String>,

        /// Optional. Specifies a list of allowed custom CA certificates (in DER
        /// format) for HTTPS verification. This overrides the default SSL trust
        /// store. If this is empty or unspecified, Dialogflow will use Google's
        /// default trust store to verify certificates. N.B. Make sure the HTTPS
        /// server certificates are signed with "subject alt name". For instance a
        /// certificate can be self-signed using the following command,
        ///
        /// ```norust
        ///    openssl x509 -req -days 200 -in example.com.csr \
        ///      -signkey example.com.key \
        ///      -out example.com.crt \
        ///      -extfile <(printf "\nsubjectAltName='DNS:www.example.com'")
        /// ```
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        #[serde_as(as = "std::vec::Vec<serde_with::base64::Base64>")]
        pub allowed_ca_certs: std::vec::Vec<::bytes::Bytes>,

        /// Optional. The OAuth configuration of the webhook. If specified,
        /// Dialogflow will initiate the OAuth client credential flow to exchange an
        /// access token from the 3rd party platform and put it in the auth header.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub oauth_config:
            std::option::Option<crate::model::webhook::generic_web_service::OAuthConfig>,

        /// Optional. Indicate the auth token type generated from the [Diglogflow
        /// service
        /// agent](https://cloud.google.com/iam/docs/service-agents#dialogflow-service-agent).
        /// The generated token is sent in the Authorization header.
        pub service_agent_auth: crate::model::webhook::generic_web_service::ServiceAgentAuth,

        /// Optional. Type of the webhook.
        pub webhook_type: crate::model::webhook::generic_web_service::WebhookType,

        /// Optional. HTTP method for the flexible webhook calls. Standard webhook
        /// always uses POST.
        pub http_method: crate::model::webhook::generic_web_service::HttpMethod,

        /// Optional. Defines a custom JSON object as request body to send to
        /// flexible webhook.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub request_body: std::string::String,

        /// Optional. Maps the values extracted from specific fields of the flexible
        /// webhook response into session parameters.
        ///
        /// - Key: session parameter name
        /// - Value: field path in the webhook response
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub parameter_mapping: std::collections::HashMap<std::string::String, std::string::String>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl GenericWebService {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [uri][crate::model::webhook::GenericWebService::uri].
        pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.uri = v.into();
            self
        }

        /// Sets the value of [username][crate::model::webhook::GenericWebService::username].
        #[deprecated]
        pub fn set_username<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.username = v.into();
            self
        }

        /// Sets the value of [password][crate::model::webhook::GenericWebService::password].
        #[deprecated]
        pub fn set_password<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.password = v.into();
            self
        }

        /// Sets the value of [oauth_config][crate::model::webhook::GenericWebService::oauth_config].
        pub fn set_oauth_config<
            T: std::convert::Into<
                    std::option::Option<crate::model::webhook::generic_web_service::OAuthConfig>,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.oauth_config = v.into();
            self
        }

        /// Sets the value of [service_agent_auth][crate::model::webhook::GenericWebService::service_agent_auth].
        pub fn set_service_agent_auth<
            T: std::convert::Into<crate::model::webhook::generic_web_service::ServiceAgentAuth>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.service_agent_auth = v.into();
            self
        }

        /// Sets the value of [webhook_type][crate::model::webhook::GenericWebService::webhook_type].
        pub fn set_webhook_type<
            T: std::convert::Into<crate::model::webhook::generic_web_service::WebhookType>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.webhook_type = v.into();
            self
        }

        /// Sets the value of [http_method][crate::model::webhook::GenericWebService::http_method].
        pub fn set_http_method<
            T: std::convert::Into<crate::model::webhook::generic_web_service::HttpMethod>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.http_method = v.into();
            self
        }

        /// Sets the value of [request_body][crate::model::webhook::GenericWebService::request_body].
        pub fn set_request_body<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.request_body = v.into();
            self
        }

        /// Sets the value of [allowed_ca_certs][crate::model::webhook::GenericWebService::allowed_ca_certs].
        pub fn set_allowed_ca_certs<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<::bytes::Bytes>,
        {
            use std::iter::Iterator;
            self.allowed_ca_certs = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [request_headers][crate::model::webhook::GenericWebService::request_headers].
        pub fn set_request_headers<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.request_headers = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }

        /// Sets the value of [parameter_mapping][crate::model::webhook::GenericWebService::parameter_mapping].
        pub fn set_parameter_mapping<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.parameter_mapping = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl wkt::message::Message for GenericWebService {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Webhook.GenericWebService"
        }
    }

    /// Defines additional types related to [GenericWebService].
    pub mod generic_web_service {
        #[allow(unused_imports)]
        use super::*;

        /// Represents configuration of OAuth client credential flow for 3rd party
        /// API authentication.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct OAuthConfig {
            /// Required. The client ID provided by the 3rd party platform.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub client_id: std::string::String,

            /// Optional. The client secret provided by the 3rd party platform.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub client_secret: std::string::String,

            /// Required. The token endpoint provided by the 3rd party platform to
            /// exchange an access token.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub token_endpoint: std::string::String,

            /// Optional. The OAuth scopes to grant.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub scopes: std::vec::Vec<std::string::String>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl OAuthConfig {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [client_id][crate::model::webhook::generic_web_service::OAuthConfig::client_id].
            pub fn set_client_id<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.client_id = v.into();
                self
            }

            /// Sets the value of [client_secret][crate::model::webhook::generic_web_service::OAuthConfig::client_secret].
            pub fn set_client_secret<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.client_secret = v.into();
                self
            }

            /// Sets the value of [token_endpoint][crate::model::webhook::generic_web_service::OAuthConfig::token_endpoint].
            pub fn set_token_endpoint<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.token_endpoint = v.into();
                self
            }

            /// Sets the value of [scopes][crate::model::webhook::generic_web_service::OAuthConfig::scopes].
            pub fn set_scopes<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<std::string::String>,
            {
                use std::iter::Iterator;
                self.scopes = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for OAuthConfig {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.cx.v3.Webhook.GenericWebService.OAuthConfig"
            }
        }

        /// Indicate the auth token type generated from the [Diglogflow service
        /// agent](https://cloud.google.com/iam/docs/service-agents#dialogflow-service-agent).
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum ServiceAgentAuth {
            /// Service agent auth type unspecified. Default to ID_TOKEN.
            Unspecified,
            /// No token used.
            None,
            /// Use [ID
            /// token](https://cloud.google.com/docs/authentication/token-types#id)
            /// generated from service agent. This can be used to access Cloud Function
            /// and Cloud Run after you grant Invoker role to
            /// `service-<PROJECT-NUMBER>@gcp-sa-dialogflow.iam.gserviceaccount.com`.
            IdToken,
            /// Use [access
            /// token](https://cloud.google.com/docs/authentication/token-types#access)
            /// generated from service agent. This can be used to access other Google
            /// Cloud APIs after you grant required roles to
            /// `service-<PROJECT-NUMBER>@gcp-sa-dialogflow.iam.gserviceaccount.com`.
            AccessToken,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [ServiceAgentAuth::value] or
            /// [ServiceAgentAuth::name].
            UnknownValue(service_agent_auth::UnknownValue),
        }

        #[doc(hidden)]
        pub mod service_agent_auth {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl ServiceAgentAuth {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::Unspecified => std::option::Option::Some(0),
                    Self::None => std::option::Option::Some(1),
                    Self::IdToken => std::option::Option::Some(2),
                    Self::AccessToken => std::option::Option::Some(3),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::Unspecified => {
                        std::option::Option::Some("SERVICE_AGENT_AUTH_UNSPECIFIED")
                    }
                    Self::None => std::option::Option::Some("NONE"),
                    Self::IdToken => std::option::Option::Some("ID_TOKEN"),
                    Self::AccessToken => std::option::Option::Some("ACCESS_TOKEN"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for ServiceAgentAuth {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for ServiceAgentAuth {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for ServiceAgentAuth {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::Unspecified,
                    1 => Self::None,
                    2 => Self::IdToken,
                    3 => Self::AccessToken,
                    _ => Self::UnknownValue(service_agent_auth::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for ServiceAgentAuth {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "SERVICE_AGENT_AUTH_UNSPECIFIED" => Self::Unspecified,
                    "NONE" => Self::None,
                    "ID_TOKEN" => Self::IdToken,
                    "ACCESS_TOKEN" => Self::AccessToken,
                    _ => Self::UnknownValue(service_agent_auth::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for ServiceAgentAuth {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::Unspecified => serializer.serialize_i32(0),
                    Self::None => serializer.serialize_i32(1),
                    Self::IdToken => serializer.serialize_i32(2),
                    Self::AccessToken => serializer.serialize_i32(3),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for ServiceAgentAuth {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<ServiceAgentAuth>::new(
                    ".google.cloud.dialogflow.cx.v3.Webhook.GenericWebService.ServiceAgentAuth",
                ))
            }
        }

        /// Represents the type of webhook configuration.
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum WebhookType {
            /// Default value. This value is unused.
            Unspecified,
            /// Represents a standard webhook.
            Standard,
            /// Represents a flexible webhook.
            Flexible,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [WebhookType::value] or
            /// [WebhookType::name].
            UnknownValue(webhook_type::UnknownValue),
        }

        #[doc(hidden)]
        pub mod webhook_type {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl WebhookType {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::Unspecified => std::option::Option::Some(0),
                    Self::Standard => std::option::Option::Some(1),
                    Self::Flexible => std::option::Option::Some(2),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::Unspecified => std::option::Option::Some("WEBHOOK_TYPE_UNSPECIFIED"),
                    Self::Standard => std::option::Option::Some("STANDARD"),
                    Self::Flexible => std::option::Option::Some("FLEXIBLE"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for WebhookType {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for WebhookType {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for WebhookType {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::Unspecified,
                    1 => Self::Standard,
                    2 => Self::Flexible,
                    _ => Self::UnknownValue(webhook_type::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for WebhookType {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "WEBHOOK_TYPE_UNSPECIFIED" => Self::Unspecified,
                    "STANDARD" => Self::Standard,
                    "FLEXIBLE" => Self::Flexible,
                    _ => Self::UnknownValue(webhook_type::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for WebhookType {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::Unspecified => serializer.serialize_i32(0),
                    Self::Standard => serializer.serialize_i32(1),
                    Self::Flexible => serializer.serialize_i32(2),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for WebhookType {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<WebhookType>::new(
                    ".google.cloud.dialogflow.cx.v3.Webhook.GenericWebService.WebhookType",
                ))
            }
        }

        /// HTTP method to use when calling webhooks.
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum HttpMethod {
            /// HTTP method not specified.
            Unspecified,
            /// HTTP POST Method.
            Post,
            /// HTTP GET Method.
            Get,
            /// HTTP HEAD Method.
            Head,
            /// HTTP PUT Method.
            Put,
            /// HTTP DELETE Method.
            Delete,
            /// HTTP PATCH Method.
            Patch,
            /// HTTP OPTIONS Method.
            Options,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [HttpMethod::value] or
            /// [HttpMethod::name].
            UnknownValue(http_method::UnknownValue),
        }

        #[doc(hidden)]
        pub mod http_method {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl HttpMethod {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::Unspecified => std::option::Option::Some(0),
                    Self::Post => std::option::Option::Some(1),
                    Self::Get => std::option::Option::Some(2),
                    Self::Head => std::option::Option::Some(3),
                    Self::Put => std::option::Option::Some(4),
                    Self::Delete => std::option::Option::Some(5),
                    Self::Patch => std::option::Option::Some(6),
                    Self::Options => std::option::Option::Some(7),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::Unspecified => std::option::Option::Some("HTTP_METHOD_UNSPECIFIED"),
                    Self::Post => std::option::Option::Some("POST"),
                    Self::Get => std::option::Option::Some("GET"),
                    Self::Head => std::option::Option::Some("HEAD"),
                    Self::Put => std::option::Option::Some("PUT"),
                    Self::Delete => std::option::Option::Some("DELETE"),
                    Self::Patch => std::option::Option::Some("PATCH"),
                    Self::Options => std::option::Option::Some("OPTIONS"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for HttpMethod {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for HttpMethod {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for HttpMethod {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::Unspecified,
                    1 => Self::Post,
                    2 => Self::Get,
                    3 => Self::Head,
                    4 => Self::Put,
                    5 => Self::Delete,
                    6 => Self::Patch,
                    7 => Self::Options,
                    _ => Self::UnknownValue(http_method::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for HttpMethod {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "HTTP_METHOD_UNSPECIFIED" => Self::Unspecified,
                    "POST" => Self::Post,
                    "GET" => Self::Get,
                    "HEAD" => Self::Head,
                    "PUT" => Self::Put,
                    "DELETE" => Self::Delete,
                    "PATCH" => Self::Patch,
                    "OPTIONS" => Self::Options,
                    _ => Self::UnknownValue(http_method::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for HttpMethod {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::Unspecified => serializer.serialize_i32(0),
                    Self::Post => serializer.serialize_i32(1),
                    Self::Get => serializer.serialize_i32(2),
                    Self::Head => serializer.serialize_i32(3),
                    Self::Put => serializer.serialize_i32(4),
                    Self::Delete => serializer.serialize_i32(5),
                    Self::Patch => serializer.serialize_i32(6),
                    Self::Options => serializer.serialize_i32(7),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for HttpMethod {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<HttpMethod>::new(
                    ".google.cloud.dialogflow.cx.v3.Webhook.GenericWebService.HttpMethod",
                ))
            }
        }
    }

    /// Represents configuration for a [Service
    /// Directory](https://cloud.google.com/service-directory) service.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ServiceDirectoryConfig {
        /// Required. The name of [Service
        /// Directory](https://cloud.google.com/service-directory) service.
        /// Format:
        /// `projects/<ProjectID>/locations/<LocationID>/namespaces/<NamespaceID>/services/<ServiceID>`.
        /// `Location ID` of the service directory must be the same as the location
        /// of the agent.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub service: std::string::String,

        /// Generic Service configuration of this webhook.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub generic_web_service: std::option::Option<crate::model::webhook::GenericWebService>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ServiceDirectoryConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [service][crate::model::webhook::ServiceDirectoryConfig::service].
        pub fn set_service<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.service = v.into();
            self
        }

        /// Sets the value of [generic_web_service][crate::model::webhook::ServiceDirectoryConfig::generic_web_service].
        pub fn set_generic_web_service<
            T: std::convert::Into<std::option::Option<crate::model::webhook::GenericWebService>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.generic_web_service = v.into();
            self
        }
    }

    impl wkt::message::Message for ServiceDirectoryConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.Webhook.ServiceDirectoryConfig"
        }
    }

    /// Required. The webhook configuration.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Webhook {
        /// Configuration for a generic web service.
        GenericWebService(std::boxed::Box<crate::model::webhook::GenericWebService>),
        /// Configuration for a [Service
        /// Directory](https://cloud.google.com/service-directory) service.
        ServiceDirectory(std::boxed::Box<crate::model::webhook::ServiceDirectoryConfig>),
    }
}

/// The request message for
/// [Webhooks.ListWebhooks][google.cloud.dialogflow.cx.v3.Webhooks.ListWebhooks].
///
/// [google.cloud.dialogflow.cx.v3.Webhooks.ListWebhooks]: crate::client::Webhooks::list_webhooks
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListWebhooksRequest {
    /// Required. The agent to list all webhooks for.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return in a single page. By default 100 and
    /// at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListWebhooksRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListWebhooksRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListWebhooksRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListWebhooksRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListWebhooksRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListWebhooksRequest"
    }
}

/// The response message for
/// [Webhooks.ListWebhooks][google.cloud.dialogflow.cx.v3.Webhooks.ListWebhooks].
///
/// [google.cloud.dialogflow.cx.v3.Webhooks.ListWebhooks]: crate::client::Webhooks::list_webhooks
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListWebhooksResponse {
    /// The list of webhooks. There will be a maximum number of items returned
    /// based on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub webhooks: std::vec::Vec<crate::model::Webhook>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListWebhooksResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListWebhooksResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [webhooks][crate::model::ListWebhooksResponse::webhooks].
    pub fn set_webhooks<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Webhook>,
    {
        use std::iter::Iterator;
        self.webhooks = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListWebhooksResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.ListWebhooksResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListWebhooksResponse {
    type PageItem = crate::model::Webhook;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.webhooks
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Webhooks.GetWebhook][google.cloud.dialogflow.cx.v3.Webhooks.GetWebhook].
///
/// [google.cloud.dialogflow.cx.v3.Webhooks.GetWebhook]: crate::client::Webhooks::get_webhook
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetWebhookRequest {
    /// Required. The name of the webhook.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/webhooks/<WebhookID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetWebhookRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetWebhookRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetWebhookRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.GetWebhookRequest"
    }
}

/// The request message for
/// [Webhooks.CreateWebhook][google.cloud.dialogflow.cx.v3.Webhooks.CreateWebhook].
///
/// [google.cloud.dialogflow.cx.v3.Webhooks.CreateWebhook]: crate::client::Webhooks::create_webhook
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateWebhookRequest {
    /// Required. The agent to create a webhook for.
    /// Format: `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The webhook to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub webhook: std::option::Option<crate::model::Webhook>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateWebhookRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateWebhookRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [webhook][crate::model::CreateWebhookRequest::webhook].
    pub fn set_webhook<T: std::convert::Into<std::option::Option<crate::model::Webhook>>>(
        mut self,
        v: T,
    ) -> Self {
        self.webhook = v.into();
        self
    }
}

impl wkt::message::Message for CreateWebhookRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.CreateWebhookRequest"
    }
}

/// The request message for
/// [Webhooks.UpdateWebhook][google.cloud.dialogflow.cx.v3.Webhooks.UpdateWebhook].
///
/// [google.cloud.dialogflow.cx.v3.Webhooks.UpdateWebhook]: crate::client::Webhooks::update_webhook
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateWebhookRequest {
    /// Required. The webhook to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub webhook: std::option::Option<crate::model::Webhook>,

    /// The mask to control which fields get updated. If the mask is not present,
    /// all fields will be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateWebhookRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [webhook][crate::model::UpdateWebhookRequest::webhook].
    pub fn set_webhook<T: std::convert::Into<std::option::Option<crate::model::Webhook>>>(
        mut self,
        v: T,
    ) -> Self {
        self.webhook = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateWebhookRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateWebhookRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.UpdateWebhookRequest"
    }
}

/// The request message for
/// [Webhooks.DeleteWebhook][google.cloud.dialogflow.cx.v3.Webhooks.DeleteWebhook].
///
/// [google.cloud.dialogflow.cx.v3.Webhooks.DeleteWebhook]: crate::client::Webhooks::delete_webhook
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteWebhookRequest {
    /// Required. The name of the webhook to delete.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/webhooks/<WebhookID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// This field has no effect for webhook not being used.
    /// For webhooks that are used by pages/flows/transition route groups:
    ///
    /// * If `force` is set to false, an error will be returned with message
    ///   indicating the referenced resources.
    /// * If `force` is set to true, Dialogflow will remove the webhook, as well
    ///   as any references to the webhook (i.e.
    ///   [Webhook][google.cloud.dialogflow.cx.v3.Fulfillment.webhook] and
    ///   [tag][google.cloud.dialogflow.cx.v3.Fulfillment.tag]in fulfillments that
    ///   point to this webhook will be removed).
    ///
    /// [google.cloud.dialogflow.cx.v3.Fulfillment.tag]: crate::model::Fulfillment::tag
    /// [google.cloud.dialogflow.cx.v3.Fulfillment.webhook]: crate::model::Fulfillment::webhook
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub force: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteWebhookRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteWebhookRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [force][crate::model::DeleteWebhookRequest::force].
    pub fn set_force<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.force = v.into();
        self
    }
}

impl wkt::message::Message for DeleteWebhookRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.DeleteWebhookRequest"
    }
}

/// The request message for a webhook call. The request is sent as a JSON object
/// and the field names will be presented in camel cases.
///
/// You may see undocumented fields in an actual request. These fields are used
/// internally by Dialogflow and should be ignored.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct WebhookRequest {
    /// Always present. The unique identifier of the
    /// [DetectIntentResponse][google.cloud.dialogflow.cx.v3.DetectIntentResponse]
    /// that will be returned to the API caller.
    ///
    /// [google.cloud.dialogflow.cx.v3.DetectIntentResponse]: crate::model::DetectIntentResponse
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub detect_intent_response_id: std::string::String,

    /// The language code specified in the [original
    /// request][QueryInput.language_code].
    ///
    /// [QueryInput.language_code]: crate::model::QueryInput::language_code
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// Always present. Information about the fulfillment that triggered this
    /// webhook call.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub fulfillment_info: std::option::Option<crate::model::webhook_request::FulfillmentInfo>,

    /// Information about the last matched intent.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub intent_info: std::option::Option<crate::model::webhook_request::IntentInfo>,

    /// Information about page status.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub page_info: std::option::Option<crate::model::PageInfo>,

    /// Information about session status.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub session_info: std::option::Option<crate::model::SessionInfo>,

    /// The list of rich message responses to present to the user. Webhook can
    /// choose to append or replace this list in
    /// [WebhookResponse.fulfillment_response][google.cloud.dialogflow.cx.v3.WebhookResponse.fulfillment_response];
    ///
    /// [google.cloud.dialogflow.cx.v3.WebhookResponse.fulfillment_response]: crate::model::WebhookResponse::fulfillment_response
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub messages: std::vec::Vec<crate::model::ResponseMessage>,

    /// Custom data set in
    /// [QueryParameters.payload][google.cloud.dialogflow.cx.v3.QueryParameters.payload].
    ///
    /// [google.cloud.dialogflow.cx.v3.QueryParameters.payload]: crate::model::QueryParameters::payload
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub payload: std::option::Option<wkt::Struct>,

    /// The sentiment analysis result of the current user request. The field is
    /// filled when sentiment analysis is configured to be enabled for the request.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub sentiment_analysis_result:
        std::option::Option<crate::model::webhook_request::SentimentAnalysisResult>,

    /// Information about the language of the request.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub language_info: std::option::Option<crate::model::LanguageInfo>,

    /// The original conversational query.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub query: std::option::Option<crate::model::webhook_request::Query>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl WebhookRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [detect_intent_response_id][crate::model::WebhookRequest::detect_intent_response_id].
    pub fn set_detect_intent_response_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.detect_intent_response_id = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::WebhookRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [fulfillment_info][crate::model::WebhookRequest::fulfillment_info].
    pub fn set_fulfillment_info<
        T: std::convert::Into<std::option::Option<crate::model::webhook_request::FulfillmentInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.fulfillment_info = v.into();
        self
    }

    /// Sets the value of [intent_info][crate::model::WebhookRequest::intent_info].
    pub fn set_intent_info<
        T: std::convert::Into<std::option::Option<crate::model::webhook_request::IntentInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.intent_info = v.into();
        self
    }

    /// Sets the value of [page_info][crate::model::WebhookRequest::page_info].
    pub fn set_page_info<T: std::convert::Into<std::option::Option<crate::model::PageInfo>>>(
        mut self,
        v: T,
    ) -> Self {
        self.page_info = v.into();
        self
    }

    /// Sets the value of [session_info][crate::model::WebhookRequest::session_info].
    pub fn set_session_info<
        T: std::convert::Into<std::option::Option<crate::model::SessionInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.session_info = v.into();
        self
    }

    /// Sets the value of [payload][crate::model::WebhookRequest::payload].
    pub fn set_payload<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.payload = v.into();
        self
    }

    /// Sets the value of [sentiment_analysis_result][crate::model::WebhookRequest::sentiment_analysis_result].
    pub fn set_sentiment_analysis_result<
        T: std::convert::Into<
                std::option::Option<crate::model::webhook_request::SentimentAnalysisResult>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.sentiment_analysis_result = v.into();
        self
    }

    /// Sets the value of [language_info][crate::model::WebhookRequest::language_info].
    pub fn set_language_info<
        T: std::convert::Into<std::option::Option<crate::model::LanguageInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.language_info = v.into();
        self
    }

    /// Sets the value of [messages][crate::model::WebhookRequest::messages].
    pub fn set_messages<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ResponseMessage>,
    {
        use std::iter::Iterator;
        self.messages = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [query][crate::model::WebhookRequest::query].
    ///
    /// Note that all the setters affecting `query` are mutually
    /// exclusive.
    pub fn set_query<
        T: std::convert::Into<std::option::Option<crate::model::webhook_request::Query>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query = v.into();
        self
    }

    /// The value of [query][crate::model::WebhookRequest::query]
    /// if it holds a `Text`, `None` if the field is not set or
    /// holds a different branch.
    pub fn text(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.query.as_ref().and_then(|v| match v {
            crate::model::webhook_request::Query::Text(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [query][crate::model::WebhookRequest::query]
    /// if it holds a `TriggerIntent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn trigger_intent(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.query.as_ref().and_then(|v| match v {
            crate::model::webhook_request::Query::TriggerIntent(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [query][crate::model::WebhookRequest::query]
    /// if it holds a `Transcript`, `None` if the field is not set or
    /// holds a different branch.
    pub fn transcript(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.query.as_ref().and_then(|v| match v {
            crate::model::webhook_request::Query::Transcript(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [query][crate::model::WebhookRequest::query]
    /// if it holds a `TriggerEvent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn trigger_event(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.query.as_ref().and_then(|v| match v {
            crate::model::webhook_request::Query::TriggerEvent(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [query][crate::model::WebhookRequest::query]
    /// if it holds a `DtmfDigits`, `None` if the field is not set or
    /// holds a different branch.
    pub fn dtmf_digits(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.query.as_ref().and_then(|v| match v {
            crate::model::webhook_request::Query::DtmfDigits(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [query][crate::model::WebhookRequest::query]
    /// to hold a `Text`.
    ///
    /// Note that all the setters affecting `query` are
    /// mutually exclusive.
    pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query =
            std::option::Option::Some(crate::model::webhook_request::Query::Text(v.into()));
        self
    }

    /// Sets the value of [query][crate::model::WebhookRequest::query]
    /// to hold a `TriggerIntent`.
    ///
    /// Note that all the setters affecting `query` are
    /// mutually exclusive.
    pub fn set_trigger_intent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query = std::option::Option::Some(
            crate::model::webhook_request::Query::TriggerIntent(v.into()),
        );
        self
    }

    /// Sets the value of [query][crate::model::WebhookRequest::query]
    /// to hold a `Transcript`.
    ///
    /// Note that all the setters affecting `query` are
    /// mutually exclusive.
    pub fn set_transcript<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query =
            std::option::Option::Some(crate::model::webhook_request::Query::Transcript(v.into()));
        self
    }

    /// Sets the value of [query][crate::model::WebhookRequest::query]
    /// to hold a `TriggerEvent`.
    ///
    /// Note that all the setters affecting `query` are
    /// mutually exclusive.
    pub fn set_trigger_event<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query =
            std::option::Option::Some(crate::model::webhook_request::Query::TriggerEvent(v.into()));
        self
    }

    /// Sets the value of [query][crate::model::WebhookRequest::query]
    /// to hold a `DtmfDigits`.
    ///
    /// Note that all the setters affecting `query` are
    /// mutually exclusive.
    pub fn set_dtmf_digits<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query =
            std::option::Option::Some(crate::model::webhook_request::Query::DtmfDigits(v.into()));
        self
    }
}

impl wkt::message::Message for WebhookRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.WebhookRequest"
    }
}

/// Defines additional types related to [WebhookRequest].
pub mod webhook_request {
    #[allow(unused_imports)]
    use super::*;

    /// Represents fulfillment information communicated to the webhook.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct FulfillmentInfo {
        /// Always present.
        /// The value of the
        /// [Fulfillment.tag][google.cloud.dialogflow.cx.v3.Fulfillment.tag] field
        /// will be populated in this field by Dialogflow when the associated webhook
        /// is called. The tag is typically used by the webhook service to identify
        /// which fulfillment is being called, but it could be used for other
        /// purposes.
        ///
        /// [google.cloud.dialogflow.cx.v3.Fulfillment.tag]: crate::model::Fulfillment::tag
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub tag: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl FulfillmentInfo {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [tag][crate::model::webhook_request::FulfillmentInfo::tag].
        pub fn set_tag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.tag = v.into();
            self
        }
    }

    impl wkt::message::Message for FulfillmentInfo {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.WebhookRequest.FulfillmentInfo"
        }
    }

    /// Represents intent information communicated to the webhook.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct IntentInfo {
        /// Always present. The unique identifier of the last matched
        /// [intent][google.cloud.dialogflow.cx.v3.Intent].
        /// Format:
        /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/intents/<IntentID>`.
        ///
        /// [google.cloud.dialogflow.cx.v3.Intent]: crate::model::Intent
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub last_matched_intent: std::string::String,

        /// Always present. The display name of the last matched
        /// [intent][google.cloud.dialogflow.cx.v3.Intent].
        ///
        /// [google.cloud.dialogflow.cx.v3.Intent]: crate::model::Intent
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub display_name: std::string::String,

        /// Parameters identified as a result of intent matching. This is a map of
        /// the name of the identified parameter to the value of the parameter
        /// identified from the user's utterance. All parameters defined in the
        /// matched intent that are identified will be surfaced here.
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub parameters: std::collections::HashMap<
            std::string::String,
            crate::model::webhook_request::intent_info::IntentParameterValue,
        >,

        /// The confidence of the matched intent. Values range from 0.0 (completely
        /// uncertain) to 1.0 (completely certain).
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub confidence: f32,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl IntentInfo {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [last_matched_intent][crate::model::webhook_request::IntentInfo::last_matched_intent].
        pub fn set_last_matched_intent<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.last_matched_intent = v.into();
            self
        }

        /// Sets the value of [display_name][crate::model::webhook_request::IntentInfo::display_name].
        pub fn set_display_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.display_name = v.into();
            self
        }

        /// Sets the value of [confidence][crate::model::webhook_request::IntentInfo::confidence].
        pub fn set_confidence<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
            self.confidence = v.into();
            self
        }

        /// Sets the value of [parameters][crate::model::webhook_request::IntentInfo::parameters].
        pub fn set_parameters<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<crate::model::webhook_request::intent_info::IntentParameterValue>,
        {
            use std::iter::Iterator;
            self.parameters = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl wkt::message::Message for IntentInfo {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.WebhookRequest.IntentInfo"
        }
    }

    /// Defines additional types related to [IntentInfo].
    pub mod intent_info {
        #[allow(unused_imports)]
        use super::*;

        /// Represents a value for an intent parameter.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct IntentParameterValue {
            /// Always present. Original text value extracted from user utterance.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub original_value: std::string::String,

            /// Always present. Structured value for the parameter extracted from user
            /// utterance.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub resolved_value: std::option::Option<wkt::Value>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl IntentParameterValue {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [original_value][crate::model::webhook_request::intent_info::IntentParameterValue::original_value].
            pub fn set_original_value<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.original_value = v.into();
                self
            }

            /// Sets the value of [resolved_value][crate::model::webhook_request::intent_info::IntentParameterValue::resolved_value].
            pub fn set_resolved_value<T: std::convert::Into<std::option::Option<wkt::Value>>>(
                mut self,
                v: T,
            ) -> Self {
                self.resolved_value = v.into();
                self
            }
        }

        impl wkt::message::Message for IntentParameterValue {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.cx.v3.WebhookRequest.IntentInfo.IntentParameterValue"
            }
        }
    }

    /// Represents the result of sentiment analysis.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SentimentAnalysisResult {
        /// Sentiment score between -1.0 (negative sentiment) and 1.0 (positive
        /// sentiment).
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub score: f32,

        /// A non-negative number in the [0, +inf) range, which represents the
        /// absolute magnitude of sentiment, regardless of score (positive or
        /// negative).
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub magnitude: f32,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SentimentAnalysisResult {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [score][crate::model::webhook_request::SentimentAnalysisResult::score].
        pub fn set_score<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
            self.score = v.into();
            self
        }

        /// Sets the value of [magnitude][crate::model::webhook_request::SentimentAnalysisResult::magnitude].
        pub fn set_magnitude<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
            self.magnitude = v.into();
            self
        }
    }

    impl wkt::message::Message for SentimentAnalysisResult {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.WebhookRequest.SentimentAnalysisResult"
        }
    }

    /// The original conversational query.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Query {
        /// If [natural language text][google.cloud.dialogflow.cx.v3.TextInput] was
        /// provided as input, this field will contain a copy of the text.
        ///
        /// [google.cloud.dialogflow.cx.v3.TextInput]: crate::model::TextInput
        Text(std::string::String),
        /// If an [intent][google.cloud.dialogflow.cx.v3.IntentInput] was provided as
        /// input, this field will contain a copy of the intent identifier. Format:
        /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/intents/<IntentID>`.
        ///
        /// [google.cloud.dialogflow.cx.v3.IntentInput]: crate::model::IntentInput
        TriggerIntent(std::string::String),
        /// If [natural language speech
        /// audio][google.cloud.dialogflow.cx.v3.AudioInput] was provided as input,
        /// this field will contain the transcript for the audio.
        ///
        /// [google.cloud.dialogflow.cx.v3.AudioInput]: crate::model::AudioInput
        Transcript(std::string::String),
        /// If an [event][google.cloud.dialogflow.cx.v3.EventInput] was provided as
        /// input, this field will contain the name of the event.
        ///
        /// [google.cloud.dialogflow.cx.v3.EventInput]: crate::model::EventInput
        TriggerEvent(std::string::String),
        /// If [DTMF][google.cloud.dialogflow.cx.v3.DtmfInput] was provided as input,
        /// this field will contain the DTMF digits.
        ///
        /// [google.cloud.dialogflow.cx.v3.DtmfInput]: crate::model::DtmfInput
        DtmfDigits(std::string::String),
    }
}

/// The response message for a webhook call.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct WebhookResponse {
    /// The fulfillment response to send to the user. This field can be omitted by
    /// the webhook if it does not intend to send any response to the user.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub fulfillment_response:
        std::option::Option<crate::model::webhook_response::FulfillmentResponse>,

    /// Information about page status. This field can be omitted by the webhook if
    /// it does not intend to modify page status.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub page_info: std::option::Option<crate::model::PageInfo>,

    /// Information about session status. This field can be omitted by the webhook
    /// if it does not intend to modify session status.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub session_info: std::option::Option<crate::model::SessionInfo>,

    /// Value to append directly to
    /// [QueryResult.webhook_payloads][google.cloud.dialogflow.cx.v3.QueryResult.webhook_payloads].
    ///
    /// [google.cloud.dialogflow.cx.v3.QueryResult.webhook_payloads]: crate::model::QueryResult::webhook_payloads
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub payload: std::option::Option<wkt::Struct>,

    /// The target to transition to. This can be set optionally to indicate an
    /// immediate transition to a different page in the same host flow, or a
    /// different flow in the same agent.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub transition: std::option::Option<crate::model::webhook_response::Transition>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl WebhookResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [fulfillment_response][crate::model::WebhookResponse::fulfillment_response].
    pub fn set_fulfillment_response<
        T: std::convert::Into<
                std::option::Option<crate::model::webhook_response::FulfillmentResponse>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.fulfillment_response = v.into();
        self
    }

    /// Sets the value of [page_info][crate::model::WebhookResponse::page_info].
    pub fn set_page_info<T: std::convert::Into<std::option::Option<crate::model::PageInfo>>>(
        mut self,
        v: T,
    ) -> Self {
        self.page_info = v.into();
        self
    }

    /// Sets the value of [session_info][crate::model::WebhookResponse::session_info].
    pub fn set_session_info<
        T: std::convert::Into<std::option::Option<crate::model::SessionInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.session_info = v.into();
        self
    }

    /// Sets the value of [payload][crate::model::WebhookResponse::payload].
    pub fn set_payload<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.payload = v.into();
        self
    }

    /// Sets the value of [transition][crate::model::WebhookResponse::transition].
    ///
    /// Note that all the setters affecting `transition` are mutually
    /// exclusive.
    pub fn set_transition<
        T: std::convert::Into<std::option::Option<crate::model::webhook_response::Transition>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.transition = v.into();
        self
    }

    /// The value of [transition][crate::model::WebhookResponse::transition]
    /// if it holds a `TargetPage`, `None` if the field is not set or
    /// holds a different branch.
    pub fn target_page(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.transition.as_ref().and_then(|v| match v {
            crate::model::webhook_response::Transition::TargetPage(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [transition][crate::model::WebhookResponse::transition]
    /// if it holds a `TargetFlow`, `None` if the field is not set or
    /// holds a different branch.
    pub fn target_flow(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.transition.as_ref().and_then(|v| match v {
            crate::model::webhook_response::Transition::TargetFlow(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [transition][crate::model::WebhookResponse::transition]
    /// to hold a `TargetPage`.
    ///
    /// Note that all the setters affecting `transition` are
    /// mutually exclusive.
    pub fn set_target_page<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.transition = std::option::Option::Some(
            crate::model::webhook_response::Transition::TargetPage(v.into()),
        );
        self
    }

    /// Sets the value of [transition][crate::model::WebhookResponse::transition]
    /// to hold a `TargetFlow`.
    ///
    /// Note that all the setters affecting `transition` are
    /// mutually exclusive.
    pub fn set_target_flow<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.transition = std::option::Option::Some(
            crate::model::webhook_response::Transition::TargetFlow(v.into()),
        );
        self
    }
}

impl wkt::message::Message for WebhookResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.WebhookResponse"
    }
}

/// Defines additional types related to [WebhookResponse].
pub mod webhook_response {
    #[allow(unused_imports)]
    use super::*;

    /// Represents a fulfillment response to the user.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct FulfillmentResponse {
        /// The list of rich message responses to present to the user.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub messages: std::vec::Vec<crate::model::ResponseMessage>,

        /// Merge behavior for `messages`.
        pub merge_behavior: crate::model::webhook_response::fulfillment_response::MergeBehavior,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl FulfillmentResponse {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [merge_behavior][crate::model::webhook_response::FulfillmentResponse::merge_behavior].
        pub fn set_merge_behavior<
            T: std::convert::Into<crate::model::webhook_response::fulfillment_response::MergeBehavior>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.merge_behavior = v.into();
            self
        }

        /// Sets the value of [messages][crate::model::webhook_response::FulfillmentResponse::messages].
        pub fn set_messages<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::ResponseMessage>,
        {
            use std::iter::Iterator;
            self.messages = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for FulfillmentResponse {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.WebhookResponse.FulfillmentResponse"
        }
    }

    /// Defines additional types related to [FulfillmentResponse].
    pub mod fulfillment_response {
        #[allow(unused_imports)]
        use super::*;

        /// Defines merge behavior for `messages`.
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum MergeBehavior {
            /// Not specified. `APPEND` will be used.
            Unspecified,
            /// `messages` will be appended to the list of messages waiting to be sent
            /// to the user.
            Append,
            /// `messages` will replace the list of messages waiting to be sent to the
            /// user.
            Replace,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [MergeBehavior::value] or
            /// [MergeBehavior::name].
            UnknownValue(merge_behavior::UnknownValue),
        }

        #[doc(hidden)]
        pub mod merge_behavior {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl MergeBehavior {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::Unspecified => std::option::Option::Some(0),
                    Self::Append => std::option::Option::Some(1),
                    Self::Replace => std::option::Option::Some(2),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::Unspecified => std::option::Option::Some("MERGE_BEHAVIOR_UNSPECIFIED"),
                    Self::Append => std::option::Option::Some("APPEND"),
                    Self::Replace => std::option::Option::Some("REPLACE"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for MergeBehavior {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for MergeBehavior {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for MergeBehavior {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::Unspecified,
                    1 => Self::Append,
                    2 => Self::Replace,
                    _ => Self::UnknownValue(merge_behavior::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for MergeBehavior {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "MERGE_BEHAVIOR_UNSPECIFIED" => Self::Unspecified,
                    "APPEND" => Self::Append,
                    "REPLACE" => Self::Replace,
                    _ => Self::UnknownValue(merge_behavior::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for MergeBehavior {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::Unspecified => serializer.serialize_i32(0),
                    Self::Append => serializer.serialize_i32(1),
                    Self::Replace => serializer.serialize_i32(2),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for MergeBehavior {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<MergeBehavior>::new(
                    ".google.cloud.dialogflow.cx.v3.WebhookResponse.FulfillmentResponse.MergeBehavior"))
            }
        }
    }

    /// The target to transition to. This can be set optionally to indicate an
    /// immediate transition to a different page in the same host flow, or a
    /// different flow in the same agent.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Transition {
        /// The target page to transition to.
        /// Format:
        /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/pages/<PageID>`.
        TargetPage(std::string::String),
        /// The target flow to transition to.
        /// Format:
        /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>`.
        TargetFlow(std::string::String),
    }
}

/// Represents page information communicated to and from the webhook.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PageInfo {
    /// Always present for
    /// [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest]. Ignored for
    /// [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse]. The
    /// unique identifier of the current page. Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/flows/<FlowID>/pages/<PageID>`.
    ///
    /// [google.cloud.dialogflow.cx.v3.WebhookRequest]: crate::model::WebhookRequest
    /// [google.cloud.dialogflow.cx.v3.WebhookResponse]: crate::model::WebhookResponse
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub current_page: std::string::String,

    /// Always present for
    /// [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest]. Ignored for
    /// [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse]. The
    /// display name of the current page.
    ///
    /// [google.cloud.dialogflow.cx.v3.WebhookRequest]: crate::model::WebhookRequest
    /// [google.cloud.dialogflow.cx.v3.WebhookResponse]: crate::model::WebhookResponse
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Optional for both
    /// [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest] and
    /// [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse].
    /// Information about the form.
    ///
    /// [google.cloud.dialogflow.cx.v3.WebhookRequest]: crate::model::WebhookRequest
    /// [google.cloud.dialogflow.cx.v3.WebhookResponse]: crate::model::WebhookResponse
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub form_info: std::option::Option<crate::model::page_info::FormInfo>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl PageInfo {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [current_page][crate::model::PageInfo::current_page].
    pub fn set_current_page<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.current_page = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::PageInfo::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [form_info][crate::model::PageInfo::form_info].
    pub fn set_form_info<
        T: std::convert::Into<std::option::Option<crate::model::page_info::FormInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.form_info = v.into();
        self
    }
}

impl wkt::message::Message for PageInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.PageInfo"
    }
}

/// Defines additional types related to [PageInfo].
pub mod page_info {
    #[allow(unused_imports)]
    use super::*;

    /// Represents form information.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct FormInfo {
        /// Optional for both
        /// [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest] and
        /// [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse]. The
        /// parameters contained in the form. Note that the webhook cannot add or
        /// remove any form parameter.
        ///
        /// [google.cloud.dialogflow.cx.v3.WebhookRequest]: crate::model::WebhookRequest
        /// [google.cloud.dialogflow.cx.v3.WebhookResponse]: crate::model::WebhookResponse
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub parameter_info: std::vec::Vec<crate::model::page_info::form_info::ParameterInfo>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl FormInfo {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [parameter_info][crate::model::page_info::FormInfo::parameter_info].
        pub fn set_parameter_info<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::page_info::form_info::ParameterInfo>,
        {
            use std::iter::Iterator;
            self.parameter_info = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for FormInfo {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.cx.v3.PageInfo.FormInfo"
        }
    }

    /// Defines additional types related to [FormInfo].
    pub mod form_info {
        #[allow(unused_imports)]
        use super::*;

        /// Represents parameter information.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct ParameterInfo {
            /// Always present for
            /// [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest].
            /// Required for
            /// [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse].
            /// The human-readable name of the parameter, unique within the form. This
            /// field cannot be modified by the webhook.
            ///
            /// [google.cloud.dialogflow.cx.v3.WebhookRequest]: crate::model::WebhookRequest
            /// [google.cloud.dialogflow.cx.v3.WebhookResponse]: crate::model::WebhookResponse
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub display_name: std::string::String,

            /// Optional for both
            /// [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest] and
            /// [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse].
            /// Indicates whether the parameter is required. Optional parameters will
            /// not trigger prompts; however, they are filled if the user specifies
            /// them. Required parameters must be filled before form filling concludes.
            ///
            /// [google.cloud.dialogflow.cx.v3.WebhookRequest]: crate::model::WebhookRequest
            /// [google.cloud.dialogflow.cx.v3.WebhookResponse]: crate::model::WebhookResponse
            #[serde(skip_serializing_if = "wkt::internal::is_default")]
            pub required: bool,

            /// Always present for
            /// [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest].
            /// Required for
            /// [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse]. The
            /// state of the parameter. This field can be set to
            /// [INVALID][google.cloud.dialogflow.cx.v3.PageInfo.FormInfo.ParameterInfo.ParameterState.INVALID]
            /// by the webhook to invalidate the parameter; other values set by the
            /// webhook will be ignored.
            ///
            /// [google.cloud.dialogflow.cx.v3.PageInfo.FormInfo.ParameterInfo.ParameterState.INVALID]: crate::model::page_info::form_info::parameter_info::ParameterState::Invalid
            /// [google.cloud.dialogflow.cx.v3.WebhookRequest]: crate::model::WebhookRequest
            /// [google.cloud.dialogflow.cx.v3.WebhookResponse]: crate::model::WebhookResponse
            pub state: crate::model::page_info::form_info::parameter_info::ParameterState,

            /// Optional for both
            /// [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest] and
            /// [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse]. The
            /// value of the parameter. This field can be set by the webhook to change
            /// the parameter value.
            ///
            /// [google.cloud.dialogflow.cx.v3.WebhookRequest]: crate::model::WebhookRequest
            /// [google.cloud.dialogflow.cx.v3.WebhookResponse]: crate::model::WebhookResponse
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub value: std::option::Option<wkt::Value>,

            /// Optional for
            /// [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest]. Ignored
            /// for [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse].
            /// Indicates if the parameter value was just collected on the last
            /// conversation turn.
            ///
            /// [google.cloud.dialogflow.cx.v3.WebhookRequest]: crate::model::WebhookRequest
            /// [google.cloud.dialogflow.cx.v3.WebhookResponse]: crate::model::WebhookResponse
            #[serde(skip_serializing_if = "wkt::internal::is_default")]
            pub just_collected: bool,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl ParameterInfo {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [display_name][crate::model::page_info::form_info::ParameterInfo::display_name].
            pub fn set_display_name<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.display_name = v.into();
                self
            }

            /// Sets the value of [required][crate::model::page_info::form_info::ParameterInfo::required].
            pub fn set_required<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
                self.required = v.into();
                self
            }

            /// Sets the value of [state][crate::model::page_info::form_info::ParameterInfo::state].
            pub fn set_state<
                T: std::convert::Into<
                        crate::model::page_info::form_info::parameter_info::ParameterState,
                    >,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.state = v.into();
                self
            }

            /// Sets the value of [value][crate::model::page_info::form_info::ParameterInfo::value].
            pub fn set_value<T: std::convert::Into<std::option::Option<wkt::Value>>>(
                mut self,
                v: T,
            ) -> Self {
                self.value = v.into();
                self
            }

            /// Sets the value of [just_collected][crate::model::page_info::form_info::ParameterInfo::just_collected].
            pub fn set_just_collected<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
                self.just_collected = v.into();
                self
            }
        }

        impl wkt::message::Message for ParameterInfo {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.cx.v3.PageInfo.FormInfo.ParameterInfo"
            }
        }

        /// Defines additional types related to [ParameterInfo].
        pub mod parameter_info {
            #[allow(unused_imports)]
            use super::*;

            /// Represents the state of a parameter.
            ///
            /// # Working with unknown values
            ///
            /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
            /// additional enum variants at any time. Adding new variants is not considered
            /// a breaking change. Applications should write their code in anticipation of:
            ///
            /// - New values appearing in future releases of the client library, **and**
            /// - New values received dynamically, without application changes.
            ///
            /// Please consult the [Working with enums] section in the user guide for some
            /// guidelines.
            ///
            /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
            #[derive(Clone, Debug, PartialEq)]
            #[non_exhaustive]
            pub enum ParameterState {
                /// Not specified. This value should be never used.
                Unspecified,
                /// Indicates that the parameter does not have a value.
                Empty,
                /// Indicates that the parameter value is invalid. This field can be used
                /// by the webhook to invalidate the parameter and ask the server to
                /// collect it from the user again.
                Invalid,
                /// Indicates that the parameter has a value.
                Filled,
                /// If set, the enum was initialized with an unknown value.
                ///
                /// Applications can examine the value using [ParameterState::value] or
                /// [ParameterState::name].
                UnknownValue(parameter_state::UnknownValue),
            }

            #[doc(hidden)]
            pub mod parameter_state {
                #[allow(unused_imports)]
                use super::*;
                #[derive(Clone, Debug, PartialEq)]
                pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
            }

            impl ParameterState {
                /// Gets the enum value.
                ///
                /// Returns `None` if the enum contains an unknown value deserialized from
                /// the string representation of enums.
                pub fn value(&self) -> std::option::Option<i32> {
                    match self {
                        Self::Unspecified => std::option::Option::Some(0),
                        Self::Empty => std::option::Option::Some(1),
                        Self::Invalid => std::option::Option::Some(2),
                        Self::Filled => std::option::Option::Some(3),
                        Self::UnknownValue(u) => u.0.value(),
                    }
                }

                /// Gets the enum value as a string.
                ///
                /// Returns `None` if the enum contains an unknown value deserialized from
                /// the integer representation of enums.
                pub fn name(&self) -> std::option::Option<&str> {
                    match self {
                        Self::Unspecified => {
                            std::option::Option::Some("PARAMETER_STATE_UNSPECIFIED")
                        }
                        Self::Empty => std::option::Option::Some("EMPTY"),
                        Self::Invalid => std::option::Option::Some("INVALID"),
                        Self::Filled => std::option::Option::Some("FILLED"),
                        Self::UnknownValue(u) => u.0.name(),
                    }
                }
            }

            impl std::default::Default for ParameterState {
                fn default() -> Self {
                    use std::convert::From;
                    Self::from(0)
                }
            }

            impl std::fmt::Display for ParameterState {
                fn fmt(
                    &self,
                    f: &mut std::fmt::Formatter<'_>,
                ) -> std::result::Result<(), std::fmt::Error> {
                    wkt::internal::display_enum(f, self.name(), self.value())
                }
            }

            impl std::convert::From<i32> for ParameterState {
                fn from(value: i32) -> Self {
                    match value {
                        0 => Self::Unspecified,
                        1 => Self::Empty,
                        2 => Self::Invalid,
                        3 => Self::Filled,
                        _ => Self::UnknownValue(parameter_state::UnknownValue(
                            wkt::internal::UnknownEnumValue::Integer(value),
                        )),
                    }
                }
            }

            impl std::convert::From<&str> for ParameterState {
                fn from(value: &str) -> Self {
                    use std::string::ToString;
                    match value {
                        "PARAMETER_STATE_UNSPECIFIED" => Self::Unspecified,
                        "EMPTY" => Self::Empty,
                        "INVALID" => Self::Invalid,
                        "FILLED" => Self::Filled,
                        _ => Self::UnknownValue(parameter_state::UnknownValue(
                            wkt::internal::UnknownEnumValue::String(value.to_string()),
                        )),
                    }
                }
            }

            impl serde::ser::Serialize for ParameterState {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::Serializer,
                {
                    match self {
                        Self::Unspecified => serializer.serialize_i32(0),
                        Self::Empty => serializer.serialize_i32(1),
                        Self::Invalid => serializer.serialize_i32(2),
                        Self::Filled => serializer.serialize_i32(3),
                        Self::UnknownValue(u) => u.0.serialize(serializer),
                    }
                }
            }

            impl<'de> serde::de::Deserialize<'de> for ParameterState {
                fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
                where
                    D: serde::Deserializer<'de>,
                {
                    deserializer.deserialize_any(wkt::internal::EnumVisitor::<ParameterState>::new(
                        ".google.cloud.dialogflow.cx.v3.PageInfo.FormInfo.ParameterInfo.ParameterState"))
                }
            }
        }
    }
}

/// Represents session information communicated to and from the webhook.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SessionInfo {
    /// Always present for
    /// [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest]. Ignored for
    /// [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse]. The
    /// unique identifier of the
    /// [session][google.cloud.dialogflow.cx.v3.DetectIntentRequest.session]. This
    /// field can be used by the webhook to identify a session.
    /// Format:
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/sessions/<SessionID>`
    /// or
    /// `projects/<ProjectID>/locations/<LocationID>/agents/<AgentID>/environments/<EnvironmentID>/sessions/<SessionID>`
    /// if environment is specified.
    ///
    /// [google.cloud.dialogflow.cx.v3.DetectIntentRequest.session]: crate::model::DetectIntentRequest::session
    /// [google.cloud.dialogflow.cx.v3.WebhookRequest]: crate::model::WebhookRequest
    /// [google.cloud.dialogflow.cx.v3.WebhookResponse]: crate::model::WebhookResponse
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub session: std::string::String,

    /// Optional for
    /// [WebhookRequest][google.cloud.dialogflow.cx.v3.WebhookRequest]. Optional
    /// for [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse]. All
    /// parameters collected from forms and intents during the session. Parameters
    /// can be created, updated, or removed by the webhook. To remove a parameter
    /// from the session, the webhook should explicitly set the parameter value to
    /// null in [WebhookResponse][google.cloud.dialogflow.cx.v3.WebhookResponse].
    /// The map is keyed by parameters' display names.
    ///
    /// [google.cloud.dialogflow.cx.v3.WebhookRequest]: crate::model::WebhookRequest
    /// [google.cloud.dialogflow.cx.v3.WebhookResponse]: crate::model::WebhookResponse
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub parameters: std::collections::HashMap<std::string::String, wkt::Value>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SessionInfo {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [session][crate::model::SessionInfo::session].
    pub fn set_session<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.session = v.into();
        self
    }

    /// Sets the value of [parameters][crate::model::SessionInfo::parameters].
    pub fn set_parameters<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::Value>,
    {
        use std::iter::Iterator;
        self.parameters = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for SessionInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.SessionInfo"
    }
}

/// Represents the language information of the request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LanguageInfo {
    /// The language code specified in the original
    /// [request][google.cloud.dialogflow.cx.v3.QueryInput.language_code].
    ///
    /// [google.cloud.dialogflow.cx.v3.QueryInput.language_code]: crate::model::QueryInput::language_code
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub input_language_code: std::string::String,

    /// The language code detected for this request based on the user
    /// conversation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub resolved_language_code: std::string::String,

    /// The confidence score of the detected language between 0 and 1.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub confidence_score: f32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl LanguageInfo {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [input_language_code][crate::model::LanguageInfo::input_language_code].
    pub fn set_input_language_code<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.input_language_code = v.into();
        self
    }

    /// Sets the value of [resolved_language_code][crate::model::LanguageInfo::resolved_language_code].
    pub fn set_resolved_language_code<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.resolved_language_code = v.into();
        self
    }

    /// Sets the value of [confidence_score][crate::model::LanguageInfo::confidence_score].
    pub fn set_confidence_score<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.confidence_score = v.into();
        self
    }
}

impl wkt::message::Message for LanguageInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.cx.v3.LanguageInfo"
    }
}

/// Audio encoding of the audio content sent in the conversational query request.
/// Refer to the
/// [Cloud Speech API
/// documentation](https://cloud.google.com/speech-to-text/docs/basics) for more
/// details.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum AudioEncoding {
    /// Not specified.
    Unspecified,
    /// Uncompressed 16-bit signed little-endian samples (Linear PCM).
    Linear16,
    /// [`FLAC`](https://xiph.org/flac/documentation.html) (Free Lossless Audio
    /// Codec) is the recommended encoding because it is lossless (therefore
    /// recognition is not compromised) and requires only about half the
    /// bandwidth of `LINEAR16`. `FLAC` stream encoding supports 16-bit and
    /// 24-bit samples, however, not all fields in `STREAMINFO` are supported.
    Flac,
    /// 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law.
    Mulaw,
    /// Adaptive Multi-Rate Narrowband codec. `sample_rate_hertz` must be 8000.
    Amr,
    /// Adaptive Multi-Rate Wideband codec. `sample_rate_hertz` must be 16000.
    AmrWb,
    /// Opus encoded audio frames in Ogg container
    /// ([OggOpus](https://wiki.xiph.org/OggOpus)).
    /// `sample_rate_hertz` must be 16000.
    OggOpus,
    /// Although the use of lossy encodings is not recommended, if a very low
    /// bitrate encoding is required, `OGG_OPUS` is highly preferred over
    /// Speex encoding. The [Speex](https://speex.org/) encoding supported by
    /// Dialogflow API has a header byte in each block, as in MIME type
    /// `audio/x-speex-with-header-byte`.
    /// It is a variant of the RTP Speex encoding defined in
    /// [RFC 5574](https://tools.ietf.org/html/rfc5574).
    /// The stream is a sequence of blocks, one block per RTP packet. Each block
    /// starts with a byte containing the length of the block, in bytes, followed
    /// by one or more frames of Speex data, padded to an integral number of
    /// bytes (octets) as specified in RFC 5574. In other words, each RTP header
    /// is replaced with a single byte containing the block length. Only Speex
    /// wideband is supported. `sample_rate_hertz` must be 16000.
    SpeexWithHeaderByte,
    /// 8-bit samples that compand 13-bit audio samples using G.711 PCMU/a-law.
    Alaw,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [AudioEncoding::value] or
    /// [AudioEncoding::name].
    UnknownValue(audio_encoding::UnknownValue),
}

#[doc(hidden)]
pub mod audio_encoding {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl AudioEncoding {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::Linear16 => std::option::Option::Some(1),
            Self::Flac => std::option::Option::Some(2),
            Self::Mulaw => std::option::Option::Some(3),
            Self::Amr => std::option::Option::Some(4),
            Self::AmrWb => std::option::Option::Some(5),
            Self::OggOpus => std::option::Option::Some(6),
            Self::SpeexWithHeaderByte => std::option::Option::Some(7),
            Self::Alaw => std::option::Option::Some(8),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("AUDIO_ENCODING_UNSPECIFIED"),
            Self::Linear16 => std::option::Option::Some("AUDIO_ENCODING_LINEAR_16"),
            Self::Flac => std::option::Option::Some("AUDIO_ENCODING_FLAC"),
            Self::Mulaw => std::option::Option::Some("AUDIO_ENCODING_MULAW"),
            Self::Amr => std::option::Option::Some("AUDIO_ENCODING_AMR"),
            Self::AmrWb => std::option::Option::Some("AUDIO_ENCODING_AMR_WB"),
            Self::OggOpus => std::option::Option::Some("AUDIO_ENCODING_OGG_OPUS"),
            Self::SpeexWithHeaderByte => {
                std::option::Option::Some("AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE")
            }
            Self::Alaw => std::option::Option::Some("AUDIO_ENCODING_ALAW"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for AudioEncoding {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for AudioEncoding {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for AudioEncoding {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::Linear16,
            2 => Self::Flac,
            3 => Self::Mulaw,
            4 => Self::Amr,
            5 => Self::AmrWb,
            6 => Self::OggOpus,
            7 => Self::SpeexWithHeaderByte,
            8 => Self::Alaw,
            _ => Self::UnknownValue(audio_encoding::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for AudioEncoding {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "AUDIO_ENCODING_UNSPECIFIED" => Self::Unspecified,
            "AUDIO_ENCODING_LINEAR_16" => Self::Linear16,
            "AUDIO_ENCODING_FLAC" => Self::Flac,
            "AUDIO_ENCODING_MULAW" => Self::Mulaw,
            "AUDIO_ENCODING_AMR" => Self::Amr,
            "AUDIO_ENCODING_AMR_WB" => Self::AmrWb,
            "AUDIO_ENCODING_OGG_OPUS" => Self::OggOpus,
            "AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE" => Self::SpeexWithHeaderByte,
            "AUDIO_ENCODING_ALAW" => Self::Alaw,
            _ => Self::UnknownValue(audio_encoding::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for AudioEncoding {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::Linear16 => serializer.serialize_i32(1),
            Self::Flac => serializer.serialize_i32(2),
            Self::Mulaw => serializer.serialize_i32(3),
            Self::Amr => serializer.serialize_i32(4),
            Self::AmrWb => serializer.serialize_i32(5),
            Self::OggOpus => serializer.serialize_i32(6),
            Self::SpeexWithHeaderByte => serializer.serialize_i32(7),
            Self::Alaw => serializer.serialize_i32(8),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for AudioEncoding {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<AudioEncoding>::new(
            ".google.cloud.dialogflow.cx.v3.AudioEncoding",
        ))
    }
}

/// Variant of the specified [Speech
/// model][google.cloud.dialogflow.cx.v3.InputAudioConfig.model] to use.
///
/// See the [Cloud Speech
/// documentation](https://cloud.google.com/speech-to-text/docs/enhanced-models)
/// for which models have different variants. For example, the "phone_call" model
/// has both a standard and an enhanced variant. When you use an enhanced model,
/// you will generally receive higher quality results than for a standard model.
///
/// [google.cloud.dialogflow.cx.v3.InputAudioConfig.model]: crate::model::InputAudioConfig::model
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum SpeechModelVariant {
    /// No model variant specified. In this case Dialogflow defaults to
    /// USE_BEST_AVAILABLE.
    Unspecified,
    /// Use the best available variant of the [Speech
    /// model][InputAudioConfig.model] that the caller is eligible for.
    ///
    /// [InputAudioConfig.model]: crate::model::InputAudioConfig::model
    UseBestAvailable,
    /// Use standard model variant even if an enhanced model is available.  See the
    /// [Cloud Speech
    /// documentation](https://cloud.google.com/speech-to-text/docs/enhanced-models)
    /// for details about enhanced models.
    UseStandard,
    /// Use an enhanced model variant:
    ///
    /// * If an enhanced variant does not exist for the given
    ///   [model][google.cloud.dialogflow.cx.v3.InputAudioConfig.model] and request
    ///   language, Dialogflow falls back to the standard variant.
    ///
    /// * The [Cloud Speech
    ///   documentation](https://cloud.google.com/speech-to-text/docs/enhanced-models)
    ///   describes which models have enhanced variants.
    ///
    ///
    /// [google.cloud.dialogflow.cx.v3.InputAudioConfig.model]: crate::model::InputAudioConfig::model
    UseEnhanced,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [SpeechModelVariant::value] or
    /// [SpeechModelVariant::name].
    UnknownValue(speech_model_variant::UnknownValue),
}

#[doc(hidden)]
pub mod speech_model_variant {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl SpeechModelVariant {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::UseBestAvailable => std::option::Option::Some(1),
            Self::UseStandard => std::option::Option::Some(2),
            Self::UseEnhanced => std::option::Option::Some(3),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("SPEECH_MODEL_VARIANT_UNSPECIFIED"),
            Self::UseBestAvailable => std::option::Option::Some("USE_BEST_AVAILABLE"),
            Self::UseStandard => std::option::Option::Some("USE_STANDARD"),
            Self::UseEnhanced => std::option::Option::Some("USE_ENHANCED"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for SpeechModelVariant {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for SpeechModelVariant {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for SpeechModelVariant {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::UseBestAvailable,
            2 => Self::UseStandard,
            3 => Self::UseEnhanced,
            _ => Self::UnknownValue(speech_model_variant::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for SpeechModelVariant {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "SPEECH_MODEL_VARIANT_UNSPECIFIED" => Self::Unspecified,
            "USE_BEST_AVAILABLE" => Self::UseBestAvailable,
            "USE_STANDARD" => Self::UseStandard,
            "USE_ENHANCED" => Self::UseEnhanced,
            _ => Self::UnknownValue(speech_model_variant::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for SpeechModelVariant {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::UseBestAvailable => serializer.serialize_i32(1),
            Self::UseStandard => serializer.serialize_i32(2),
            Self::UseEnhanced => serializer.serialize_i32(3),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for SpeechModelVariant {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<SpeechModelVariant>::new(
            ".google.cloud.dialogflow.cx.v3.SpeechModelVariant",
        ))
    }
}

/// Gender of the voice as described in
/// [SSML voice element](https://www.w3.org/TR/speech-synthesis11/#edef_voice).
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum SsmlVoiceGender {
    /// An unspecified gender, which means that the client doesn't care which
    /// gender the selected voice will have.
    Unspecified,
    /// A male voice.
    Male,
    /// A female voice.
    Female,
    /// A gender-neutral voice.
    Neutral,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [SsmlVoiceGender::value] or
    /// [SsmlVoiceGender::name].
    UnknownValue(ssml_voice_gender::UnknownValue),
}

#[doc(hidden)]
pub mod ssml_voice_gender {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl SsmlVoiceGender {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::Male => std::option::Option::Some(1),
            Self::Female => std::option::Option::Some(2),
            Self::Neutral => std::option::Option::Some(3),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("SSML_VOICE_GENDER_UNSPECIFIED"),
            Self::Male => std::option::Option::Some("SSML_VOICE_GENDER_MALE"),
            Self::Female => std::option::Option::Some("SSML_VOICE_GENDER_FEMALE"),
            Self::Neutral => std::option::Option::Some("SSML_VOICE_GENDER_NEUTRAL"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for SsmlVoiceGender {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for SsmlVoiceGender {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for SsmlVoiceGender {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::Male,
            2 => Self::Female,
            3 => Self::Neutral,
            _ => Self::UnknownValue(ssml_voice_gender::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for SsmlVoiceGender {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "SSML_VOICE_GENDER_UNSPECIFIED" => Self::Unspecified,
            "SSML_VOICE_GENDER_MALE" => Self::Male,
            "SSML_VOICE_GENDER_FEMALE" => Self::Female,
            "SSML_VOICE_GENDER_NEUTRAL" => Self::Neutral,
            _ => Self::UnknownValue(ssml_voice_gender::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for SsmlVoiceGender {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::Male => serializer.serialize_i32(1),
            Self::Female => serializer.serialize_i32(2),
            Self::Neutral => serializer.serialize_i32(3),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for SsmlVoiceGender {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<SsmlVoiceGender>::new(
            ".google.cloud.dialogflow.cx.v3.SsmlVoiceGender",
        ))
    }
}

/// Audio encoding of the output audio format in Text-To-Speech.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum OutputAudioEncoding {
    /// Not specified.
    Unspecified,
    /// Uncompressed 16-bit signed little-endian samples (Linear PCM).
    /// Audio content returned as LINEAR16 also contains a WAV header.
    Linear16,
    /// MP3 audio at 32kbps.
    Mp3,
    /// MP3 audio at 64kbps.
    Mp364Kbps,
    /// Opus encoded audio wrapped in an ogg container. The result will be a
    /// file which can be played natively on Android, and in browsers (at least
    /// Chrome and Firefox). The quality of the encoding is considerably higher
    /// than MP3 while using approximately the same bitrate.
    OggOpus,
    /// 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law.
    Mulaw,
    /// 8-bit samples that compand 13-bit audio samples using G.711 PCMU/a-law.
    Alaw,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [OutputAudioEncoding::value] or
    /// [OutputAudioEncoding::name].
    UnknownValue(output_audio_encoding::UnknownValue),
}

#[doc(hidden)]
pub mod output_audio_encoding {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl OutputAudioEncoding {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::Linear16 => std::option::Option::Some(1),
            Self::Mp3 => std::option::Option::Some(2),
            Self::Mp364Kbps => std::option::Option::Some(4),
            Self::OggOpus => std::option::Option::Some(3),
            Self::Mulaw => std::option::Option::Some(5),
            Self::Alaw => std::option::Option::Some(6),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("OUTPUT_AUDIO_ENCODING_UNSPECIFIED"),
            Self::Linear16 => std::option::Option::Some("OUTPUT_AUDIO_ENCODING_LINEAR_16"),
            Self::Mp3 => std::option::Option::Some("OUTPUT_AUDIO_ENCODING_MP3"),
            Self::Mp364Kbps => std::option::Option::Some("OUTPUT_AUDIO_ENCODING_MP3_64_KBPS"),
            Self::OggOpus => std::option::Option::Some("OUTPUT_AUDIO_ENCODING_OGG_OPUS"),
            Self::Mulaw => std::option::Option::Some("OUTPUT_AUDIO_ENCODING_MULAW"),
            Self::Alaw => std::option::Option::Some("OUTPUT_AUDIO_ENCODING_ALAW"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for OutputAudioEncoding {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for OutputAudioEncoding {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for OutputAudioEncoding {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::Linear16,
            2 => Self::Mp3,
            3 => Self::OggOpus,
            4 => Self::Mp364Kbps,
            5 => Self::Mulaw,
            6 => Self::Alaw,
            _ => Self::UnknownValue(output_audio_encoding::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for OutputAudioEncoding {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "OUTPUT_AUDIO_ENCODING_UNSPECIFIED" => Self::Unspecified,
            "OUTPUT_AUDIO_ENCODING_LINEAR_16" => Self::Linear16,
            "OUTPUT_AUDIO_ENCODING_MP3" => Self::Mp3,
            "OUTPUT_AUDIO_ENCODING_MP3_64_KBPS" => Self::Mp364Kbps,
            "OUTPUT_AUDIO_ENCODING_OGG_OPUS" => Self::OggOpus,
            "OUTPUT_AUDIO_ENCODING_MULAW" => Self::Mulaw,
            "OUTPUT_AUDIO_ENCODING_ALAW" => Self::Alaw,
            _ => Self::UnknownValue(output_audio_encoding::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for OutputAudioEncoding {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::Linear16 => serializer.serialize_i32(1),
            Self::Mp3 => serializer.serialize_i32(2),
            Self::Mp364Kbps => serializer.serialize_i32(4),
            Self::OggOpus => serializer.serialize_i32(3),
            Self::Mulaw => serializer.serialize_i32(5),
            Self::Alaw => serializer.serialize_i32(6),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for OutputAudioEncoding {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<OutputAudioEncoding>::new(
            ".google.cloud.dialogflow.cx.v3.OutputAudioEncoding",
        ))
    }
}

/// Type of a data store.
/// Determines how search is performed in the data store.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum DataStoreType {
    /// Not specified. This value indicates that the data store type is not
    /// specified, so it will not be used during search.
    Unspecified,
    /// A data store that contains public web content.
    PublicWeb,
    /// A data store that contains unstructured private data.
    Unstructured,
    /// A data store that contains structured data (for example FAQ).
    Structured,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [DataStoreType::value] or
    /// [DataStoreType::name].
    UnknownValue(data_store_type::UnknownValue),
}

#[doc(hidden)]
pub mod data_store_type {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl DataStoreType {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::PublicWeb => std::option::Option::Some(1),
            Self::Unstructured => std::option::Option::Some(2),
            Self::Structured => std::option::Option::Some(3),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("DATA_STORE_TYPE_UNSPECIFIED"),
            Self::PublicWeb => std::option::Option::Some("PUBLIC_WEB"),
            Self::Unstructured => std::option::Option::Some("UNSTRUCTURED"),
            Self::Structured => std::option::Option::Some("STRUCTURED"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for DataStoreType {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for DataStoreType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for DataStoreType {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::PublicWeb,
            2 => Self::Unstructured,
            3 => Self::Structured,
            _ => Self::UnknownValue(data_store_type::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for DataStoreType {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "DATA_STORE_TYPE_UNSPECIFIED" => Self::Unspecified,
            "PUBLIC_WEB" => Self::PublicWeb,
            "UNSTRUCTURED" => Self::Unstructured,
            "STRUCTURED" => Self::Structured,
            _ => Self::UnknownValue(data_store_type::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for DataStoreType {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::PublicWeb => serializer.serialize_i32(1),
            Self::Unstructured => serializer.serialize_i32(2),
            Self::Structured => serializer.serialize_i32(3),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for DataStoreType {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<DataStoreType>::new(
            ".google.cloud.dialogflow.cx.v3.DataStoreType",
        ))
    }
}

/// The document processing mode of the data store.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum DocumentProcessingMode {
    /// Not specified. This should be set for STRUCTURED type data stores. Due to
    /// legacy reasons this is considered as DOCUMENTS for STRUCTURED and
    /// PUBLIC_WEB data stores.
    Unspecified,
    /// Documents are processed as documents.
    Documents,
    /// Documents are converted to chunks.
    Chunks,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [DocumentProcessingMode::value] or
    /// [DocumentProcessingMode::name].
    UnknownValue(document_processing_mode::UnknownValue),
}

#[doc(hidden)]
pub mod document_processing_mode {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl DocumentProcessingMode {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::Documents => std::option::Option::Some(1),
            Self::Chunks => std::option::Option::Some(2),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("DOCUMENT_PROCESSING_MODE_UNSPECIFIED"),
            Self::Documents => std::option::Option::Some("DOCUMENTS"),
            Self::Chunks => std::option::Option::Some("CHUNKS"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for DocumentProcessingMode {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for DocumentProcessingMode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for DocumentProcessingMode {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::Documents,
            2 => Self::Chunks,
            _ => Self::UnknownValue(document_processing_mode::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for DocumentProcessingMode {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "DOCUMENT_PROCESSING_MODE_UNSPECIFIED" => Self::Unspecified,
            "DOCUMENTS" => Self::Documents,
            "CHUNKS" => Self::Chunks,
            _ => Self::UnknownValue(document_processing_mode::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for DocumentProcessingMode {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::Documents => serializer.serialize_i32(1),
            Self::Chunks => serializer.serialize_i32(2),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for DocumentProcessingMode {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<DocumentProcessingMode>::new(
            ".google.cloud.dialogflow.cx.v3.DocumentProcessingMode",
        ))
    }
}

/// Import strategies for the conflict resolution of resources (i.e. intents,
/// entities, and webhooks) with identical display names during import
/// operations.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum ImportStrategy {
    /// Unspecified. Treated as 'CREATE_NEW'.
    Unspecified,
    /// Create a new resource with a numeric suffix appended to the end of the
    /// existing display name.
    CreateNew,
    /// Replace existing resource with incoming resource in the content to be
    /// imported.
    Replace,
    /// Keep existing resource and discard incoming resource in the content to be
    /// imported.
    Keep,
    /// Combine existing and incoming resources when a conflict is encountered.
    Merge,
    /// Throw error if a conflict is encountered.
    ThrowError,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [ImportStrategy::value] or
    /// [ImportStrategy::name].
    UnknownValue(import_strategy::UnknownValue),
}

#[doc(hidden)]
pub mod import_strategy {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl ImportStrategy {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::CreateNew => std::option::Option::Some(1),
            Self::Replace => std::option::Option::Some(2),
            Self::Keep => std::option::Option::Some(3),
            Self::Merge => std::option::Option::Some(4),
            Self::ThrowError => std::option::Option::Some(5),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("IMPORT_STRATEGY_UNSPECIFIED"),
            Self::CreateNew => std::option::Option::Some("IMPORT_STRATEGY_CREATE_NEW"),
            Self::Replace => std::option::Option::Some("IMPORT_STRATEGY_REPLACE"),
            Self::Keep => std::option::Option::Some("IMPORT_STRATEGY_KEEP"),
            Self::Merge => std::option::Option::Some("IMPORT_STRATEGY_MERGE"),
            Self::ThrowError => std::option::Option::Some("IMPORT_STRATEGY_THROW_ERROR"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for ImportStrategy {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for ImportStrategy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for ImportStrategy {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::CreateNew,
            2 => Self::Replace,
            3 => Self::Keep,
            4 => Self::Merge,
            5 => Self::ThrowError,
            _ => Self::UnknownValue(import_strategy::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for ImportStrategy {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "IMPORT_STRATEGY_UNSPECIFIED" => Self::Unspecified,
            "IMPORT_STRATEGY_CREATE_NEW" => Self::CreateNew,
            "IMPORT_STRATEGY_REPLACE" => Self::Replace,
            "IMPORT_STRATEGY_KEEP" => Self::Keep,
            "IMPORT_STRATEGY_MERGE" => Self::Merge,
            "IMPORT_STRATEGY_THROW_ERROR" => Self::ThrowError,
            _ => Self::UnknownValue(import_strategy::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for ImportStrategy {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::CreateNew => serializer.serialize_i32(1),
            Self::Replace => serializer.serialize_i32(2),
            Self::Keep => serializer.serialize_i32(3),
            Self::Merge => serializer.serialize_i32(4),
            Self::ThrowError => serializer.serialize_i32(5),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for ImportStrategy {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<ImportStrategy>::new(
            ".google.cloud.dialogflow.cx.v3.ImportStrategy",
        ))
    }
}

/// Represents the options for views of an intent.
/// An intent can be a sizable object. Therefore, we provide a resource view that
/// does not return training phrases in the response.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum IntentView {
    /// Not specified. Treated as INTENT_VIEW_FULL.
    Unspecified,
    /// Training phrases field is not populated in the response.
    Partial,
    /// All fields are populated.
    Full,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [IntentView::value] or
    /// [IntentView::name].
    UnknownValue(intent_view::UnknownValue),
}

#[doc(hidden)]
pub mod intent_view {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl IntentView {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::Partial => std::option::Option::Some(1),
            Self::Full => std::option::Option::Some(2),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("INTENT_VIEW_UNSPECIFIED"),
            Self::Partial => std::option::Option::Some("INTENT_VIEW_PARTIAL"),
            Self::Full => std::option::Option::Some("INTENT_VIEW_FULL"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for IntentView {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for IntentView {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for IntentView {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::Partial,
            2 => Self::Full,
            _ => Self::UnknownValue(intent_view::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for IntentView {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "INTENT_VIEW_UNSPECIFIED" => Self::Unspecified,
            "INTENT_VIEW_PARTIAL" => Self::Partial,
            "INTENT_VIEW_FULL" => Self::Full,
            _ => Self::UnknownValue(intent_view::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for IntentView {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::Partial => serializer.serialize_i32(1),
            Self::Full => serializer.serialize_i32(2),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for IntentView {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<IntentView>::new(
            ".google.cloud.dialogflow.cx.v3.IntentView",
        ))
    }
}

/// The test result for a test case and an agent environment.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum TestResult {
    /// Not specified. Should never be used.
    Unspecified,
    /// The test passed.
    Passed,
    /// The test did not pass.
    Failed,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [TestResult::value] or
    /// [TestResult::name].
    UnknownValue(test_result::UnknownValue),
}

#[doc(hidden)]
pub mod test_result {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl TestResult {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::Passed => std::option::Option::Some(1),
            Self::Failed => std::option::Option::Some(2),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("TEST_RESULT_UNSPECIFIED"),
            Self::Passed => std::option::Option::Some("PASSED"),
            Self::Failed => std::option::Option::Some("FAILED"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for TestResult {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for TestResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for TestResult {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::Passed,
            2 => Self::Failed,
            _ => Self::UnknownValue(test_result::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for TestResult {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "TEST_RESULT_UNSPECIFIED" => Self::Unspecified,
            "PASSED" => Self::Passed,
            "FAILED" => Self::Failed,
            _ => Self::UnknownValue(test_result::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for TestResult {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::Passed => serializer.serialize_i32(1),
            Self::Failed => serializer.serialize_i32(2),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for TestResult {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<TestResult>::new(
            ".google.cloud.dialogflow.cx.v3.TestResult",
        ))
    }
}
