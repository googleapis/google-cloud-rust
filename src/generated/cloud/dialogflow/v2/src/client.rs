// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Agents][google.cloud.dialogflow.v2.Agent].
///
/// [google.cloud.dialogflow.v2.Agent]: crate::model::Agent
///
/// # Configuration
///
/// `Agents` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Agents` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Agents` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Agents {
    inner: Arc<dyn crate::stubs::dynamic::Agents>,
}

impl Agents {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Agents + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Agents>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Agents> {
        crate::transport::Agents::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Agents> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Agents::new)
    }

    /// Retrieves the specified agent.
    pub fn get_agent(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::agents::GetAgent {
        crate::builders::agents::GetAgent::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Creates/updates the specified agent.
    ///
    /// Note: You should always train an agent prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/es/docs/training).
    pub fn set_agent(
        &self,
        agent: impl Into<crate::model::Agent>,
    ) -> crate::builders::agents::SetAgent {
        crate::builders::agents::SetAgent::new(self.inner.clone()).set_agent(agent.into())
    }

    /// Deletes the specified agent.
    pub fn delete_agent(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::agents::DeleteAgent {
        crate::builders::agents::DeleteAgent::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Returns the list of agents.
    ///
    /// Since there is at most one conversational agent per project, this method is
    /// useful primarily for listing all agents across projects the caller has
    /// access to. One can achieve that with a wildcard project collection id "-".
    /// Refer to [List
    /// Sub-Collections](https://cloud.google.com/apis/design/design_patterns#list_sub-collections).
    pub fn search_agents(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::agents::SearchAgents {
        crate::builders::agents::SearchAgents::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Trains the specified agent.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`: An [Empty
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
    ///
    /// Note: You should always train an agent prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/es/docs/training).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn train_agent(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::agents::TrainAgent {
        crate::builders::agents::TrainAgent::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Exports the specified agent to a ZIP file.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`:
    ///   [ExportAgentResponse][google.cloud.dialogflow.v2.ExportAgentResponse]
    ///
    /// [google.cloud.dialogflow.v2.ExportAgentResponse]: crate::model::ExportAgentResponse
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_agent(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::agents::ExportAgent {
        crate::builders::agents::ExportAgent::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Imports the specified agent from a ZIP file.
    ///
    /// Uploads new intents and entity types without deleting the existing ones.
    /// Intents and entity types with the same name are replaced with the new
    /// versions from
    /// [ImportAgentRequest][google.cloud.dialogflow.v2.ImportAgentRequest]. After
    /// the import, the imported draft agent will be trained automatically (unless
    /// disabled in agent settings). However, once the import is done, training may
    /// not be completed yet. Please call
    /// [TrainAgent][google.cloud.dialogflow.v2.Agents.TrainAgent] and wait for the
    /// operation it returns in order to train explicitly.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`: An [Empty
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
    ///
    /// The operation only tracks when importing is complete, not when it is done
    /// training.
    ///
    /// Note: You should always train an agent prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/es/docs/training).
    ///
    /// [google.cloud.dialogflow.v2.Agents.TrainAgent]: crate::client::Agents::train_agent
    /// [google.cloud.dialogflow.v2.ImportAgentRequest]: crate::model::ImportAgentRequest
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_agent(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::agents::ImportAgent {
        crate::builders::agents::ImportAgent::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Restores the specified agent from a ZIP file.
    ///
    /// Replaces the current agent version with a new one. All the intents and
    /// entity types in the older version are deleted. After the restore, the
    /// restored draft agent will be trained automatically (unless disabled in
    /// agent settings). However, once the restore is done, training may not be
    /// completed yet. Please call
    /// [TrainAgent][google.cloud.dialogflow.v2.Agents.TrainAgent] and wait for the
    /// operation it returns in order to train explicitly.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`: An [Empty
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
    ///
    /// The operation only tracks when restoring is complete, not when it is done
    /// training.
    ///
    /// Note: You should always train an agent prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/es/docs/training).
    ///
    /// [google.cloud.dialogflow.v2.Agents.TrainAgent]: crate::client::Agents::train_agent
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn restore_agent(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::agents::RestoreAgent {
        crate::builders::agents::RestoreAgent::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Gets agent validation result. Agent validation is performed during
    /// training time and is updated automatically when training is completed.
    pub fn get_validation_result(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::agents::GetValidationResult {
        crate::builders::agents::GetValidationResult::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::agents::ListLocations {
        crate::builders::agents::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::agents::GetLocation {
        crate::builders::agents::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::agents::ListOperations {
        crate::builders::agents::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::agents::GetOperation {
        crate::builders::agents::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::agents::CancelOperation {
        crate::builders::agents::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing
/// [AnswerRecords][google.cloud.dialogflow.v2.AnswerRecord].
///
/// [google.cloud.dialogflow.v2.AnswerRecord]: crate::model::AnswerRecord
///
/// # Configuration
///
/// `AnswerRecords` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `AnswerRecords` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `AnswerRecords` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct AnswerRecords {
    inner: Arc<dyn crate::stubs::dynamic::AnswerRecords>,
}

impl AnswerRecords {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::AnswerRecords + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::AnswerRecords>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::AnswerRecords> {
        crate::transport::AnswerRecords::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::AnswerRecords> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::AnswerRecords::new)
    }

    /// Returns the list of all answer records in the specified project in reverse
    /// chronological order.
    pub fn list_answer_records(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::answer_records::ListAnswerRecords {
        crate::builders::answer_records::ListAnswerRecords::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the specified answer record.
    pub fn update_answer_record(
        &self,
        answer_record: impl Into<crate::model::AnswerRecord>,
    ) -> crate::builders::answer_records::UpdateAnswerRecord {
        crate::builders::answer_records::UpdateAnswerRecord::new(self.inner.clone())
            .set_answer_record(answer_record.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::answer_records::ListLocations {
        crate::builders::answer_records::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::answer_records::GetLocation {
        crate::builders::answer_records::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::answer_records::ListOperations {
        crate::builders::answer_records::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::answer_records::GetOperation {
        crate::builders::answer_records::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::answer_records::CancelOperation {
        crate::builders::answer_records::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Contexts][google.cloud.dialogflow.v2.Context].
///
/// [google.cloud.dialogflow.v2.Context]: crate::model::Context
///
/// # Configuration
///
/// `Contexts` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Contexts` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Contexts` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Contexts {
    inner: Arc<dyn crate::stubs::dynamic::Contexts>,
}

impl Contexts {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Contexts + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Contexts>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Contexts> {
        crate::transport::Contexts::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Contexts> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Contexts::new)
    }

    /// Returns the list of all contexts in the specified session.
    pub fn list_contexts(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contexts::ListContexts {
        crate::builders::contexts::ListContexts::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Retrieves the specified context.
    pub fn get_context(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contexts::GetContext {
        crate::builders::contexts::GetContext::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a context.
    ///
    /// If the specified context already exists, overrides the context.
    pub fn create_context(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contexts::CreateContext {
        crate::builders::contexts::CreateContext::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates the specified context.
    pub fn update_context(
        &self,
        context: impl Into<crate::model::Context>,
    ) -> crate::builders::contexts::UpdateContext {
        crate::builders::contexts::UpdateContext::new(self.inner.clone())
            .set_context(context.into())
    }

    /// Deletes the specified context.
    pub fn delete_context(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contexts::DeleteContext {
        crate::builders::contexts::DeleteContext::new(self.inner.clone()).set_name(name.into())
    }

    /// Deletes all active contexts in the specified session.
    pub fn delete_all_contexts(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::contexts::DeleteAllContexts {
        crate::builders::contexts::DeleteAllContexts::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contexts::ListLocations {
        crate::builders::contexts::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contexts::GetLocation {
        crate::builders::contexts::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contexts::ListOperations {
        crate::builders::contexts::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contexts::GetOperation {
        crate::builders::contexts::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::contexts::CancelOperation {
        crate::builders::contexts::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing
/// [Conversations][google.cloud.dialogflow.v2.Conversation].
///
/// [google.cloud.dialogflow.v2.Conversation]: crate::model::Conversation
///
/// # Configuration
///
/// `Conversations` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Conversations` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Conversations` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Conversations {
    inner: Arc<dyn crate::stubs::dynamic::Conversations>,
}

impl Conversations {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Conversations + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Conversations>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Conversations> {
        crate::transport::Conversations::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Conversations> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Conversations::new)
    }

    /// Creates a new conversation. Conversations are auto-completed after 24
    /// hours.
    ///
    /// Conversation Lifecycle:
    /// There are two stages during a conversation: Automated Agent Stage and
    /// Assist Stage.
    ///
    /// For Automated Agent Stage, there will be a dialogflow agent responding to
    /// user queries.
    ///
    /// For Assist Stage, there's no dialogflow agent responding to user queries.
    /// But we will provide suggestions which are generated from conversation.
    ///
    /// If
    /// [Conversation.conversation_profile][google.cloud.dialogflow.v2.Conversation.conversation_profile]
    /// is configured for a dialogflow agent, conversation will start from
    /// `Automated Agent Stage`, otherwise, it will start from `Assist Stage`. And
    /// during `Automated Agent Stage`, once an
    /// [Intent][google.cloud.dialogflow.v2.Intent] with
    /// [Intent.live_agent_handoff][google.cloud.dialogflow.v2.Intent.live_agent_handoff]
    /// is triggered, conversation will transfer to Assist Stage.
    ///
    /// [google.cloud.dialogflow.v2.Conversation.conversation_profile]: crate::model::Conversation::conversation_profile
    /// [google.cloud.dialogflow.v2.Intent]: crate::model::Intent
    /// [google.cloud.dialogflow.v2.Intent.live_agent_handoff]: crate::model::Intent::live_agent_handoff
    pub fn create_conversation(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::conversations::CreateConversation {
        crate::builders::conversations::CreateConversation::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the list of all conversations in the specified project.
    pub fn list_conversations(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::conversations::ListConversations {
        crate::builders::conversations::ListConversations::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves the specific conversation.
    pub fn get_conversation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversations::GetConversation {
        crate::builders::conversations::GetConversation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Completes the specified conversation. Finished conversations are purged
    /// from the database after 30 days.
    pub fn complete_conversation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversations::CompleteConversation {
        crate::builders::conversations::CompleteConversation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists messages that belong to a given conversation.
    /// `messages` are ordered by `create_time` in descending order. To fetch
    /// updates without duplication, send request with filter
    /// `create_time_epoch_microseconds >
    /// [first item's create_time of previous request]` and empty page_token.
    pub fn list_messages(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::conversations::ListMessages {
        crate::builders::conversations::ListMessages::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Suggests summary for a conversation based on specific historical messages.
    /// The range of the messages to be used for summary can be specified in the
    /// request.
    pub fn suggest_conversation_summary(
        &self,
        conversation: impl Into<std::string::String>,
    ) -> crate::builders::conversations::SuggestConversationSummary {
        crate::builders::conversations::SuggestConversationSummary::new(self.inner.clone())
            .set_conversation(conversation.into())
    }

    /// Generates and returns a summary for a conversation that does not have a
    /// resource created for it.
    pub fn generate_stateless_summary(
        &self,
        stateless_conversation: impl Into<
            crate::model::generate_stateless_summary_request::MinimalConversation,
        >,
    ) -> crate::builders::conversations::GenerateStatelessSummary {
        crate::builders::conversations::GenerateStatelessSummary::new(self.inner.clone())
            .set_stateless_conversation(stateless_conversation.into())
    }

    /// Generates and returns a suggestion for a conversation that does not have a
    /// resource created for it.
    pub fn generate_stateless_suggestion(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::conversations::GenerateStatelessSuggestion {
        crate::builders::conversations::GenerateStatelessSuggestion::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Get answers for the given query based on knowledge documents.
    pub fn search_knowledge(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::conversations::SearchKnowledge {
        crate::builders::conversations::SearchKnowledge::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversations::ListLocations {
        crate::builders::conversations::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversations::GetLocation {
        crate::builders::conversations::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversations::ListOperations {
        crate::builders::conversations::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversations::GetOperation {
        crate::builders::conversations::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversations::CancelOperation {
        crate::builders::conversations::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Conversation datasets.
///
/// Conversation datasets contain raw conversation files and their
/// customizable metadata that can be used for model training.
///
/// # Configuration
///
/// `ConversationDatasets` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ConversationDatasets` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ConversationDatasets` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ConversationDatasets {
    inner: Arc<dyn crate::stubs::dynamic::ConversationDatasets>,
}

impl ConversationDatasets {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::ConversationDatasets + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::ConversationDatasets>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ConversationDatasets> {
        crate::transport::ConversationDatasets::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ConversationDatasets> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::ConversationDatasets::new)
    }

    /// Creates a new conversation dataset.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [CreateConversationDatasetOperationMetadata][google.cloud.dialogflow.v2.CreateConversationDatasetOperationMetadata]
    /// - `response`:
    ///   [ConversationDataset][google.cloud.dialogflow.v2.ConversationDataset]
    ///
    /// [google.cloud.dialogflow.v2.ConversationDataset]: crate::model::ConversationDataset
    /// [google.cloud.dialogflow.v2.CreateConversationDatasetOperationMetadata]: crate::model::CreateConversationDatasetOperationMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_conversation_dataset(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::conversation_datasets::CreateConversationDataset {
        crate::builders::conversation_datasets::CreateConversationDataset::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves the specified conversation dataset.
    pub fn get_conversation_dataset(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_datasets::GetConversationDataset {
        crate::builders::conversation_datasets::GetConversationDataset::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Returns the list of all conversation datasets in the specified
    /// project and location.
    pub fn list_conversation_datasets(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::conversation_datasets::ListConversationDatasets {
        crate::builders::conversation_datasets::ListConversationDatasets::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes the specified conversation dataset.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [DeleteConversationDatasetOperationMetadata][google.cloud.dialogflow.v2.DeleteConversationDatasetOperationMetadata]
    /// - `response`: An [Empty
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
    ///
    /// [google.cloud.dialogflow.v2.DeleteConversationDatasetOperationMetadata]: crate::model::DeleteConversationDatasetOperationMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_conversation_dataset(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_datasets::DeleteConversationDataset {
        crate::builders::conversation_datasets::DeleteConversationDataset::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Import data into the specified conversation dataset. Note that it
    /// is not allowed to import data to a conversation dataset that
    /// already has data in it.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [ImportConversationDataOperationMetadata][google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata]
    /// - `response`:
    ///   [ImportConversationDataOperationResponse][google.cloud.dialogflow.v2.ImportConversationDataOperationResponse]
    ///
    /// [google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata]: crate::model::ImportConversationDataOperationMetadata
    /// [google.cloud.dialogflow.v2.ImportConversationDataOperationResponse]: crate::model::ImportConversationDataOperationResponse
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_conversation_data(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_datasets::ImportConversationData {
        crate::builders::conversation_datasets::ImportConversationData::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_datasets::ListLocations {
        crate::builders::conversation_datasets::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_datasets::GetLocation {
        crate::builders::conversation_datasets::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_datasets::ListOperations {
        crate::builders::conversation_datasets::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_datasets::GetOperation {
        crate::builders::conversation_datasets::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_datasets::CancelOperation {
        crate::builders::conversation_datasets::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Manages a collection of models for human agent assistant.
///
/// # Configuration
///
/// `ConversationModels` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ConversationModels` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ConversationModels` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ConversationModels {
    inner: Arc<dyn crate::stubs::dynamic::ConversationModels>,
}

impl ConversationModels {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::ConversationModels + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::ConversationModels>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ConversationModels> {
        crate::transport::ConversationModels::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ConversationModels> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::ConversationModels::new)
    }

    /// Creates a model.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [CreateConversationModelOperationMetadata][google.cloud.dialogflow.v2.CreateConversationModelOperationMetadata]
    /// - `response`:
    ///   [ConversationModel][google.cloud.dialogflow.v2.ConversationModel]
    ///
    /// [google.cloud.dialogflow.v2.ConversationModel]: crate::model::ConversationModel
    /// [google.cloud.dialogflow.v2.CreateConversationModelOperationMetadata]: crate::model::CreateConversationModelOperationMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_conversation_model(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::conversation_models::CreateConversationModel {
        crate::builders::conversation_models::CreateConversationModel::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets conversation model.
    pub fn get_conversation_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_models::GetConversationModel {
        crate::builders::conversation_models::GetConversationModel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists conversation models.
    pub fn list_conversation_models(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::conversation_models::ListConversationModels {
        crate::builders::conversation_models::ListConversationModels::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a model.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [DeleteConversationModelOperationMetadata][google.cloud.dialogflow.v2.DeleteConversationModelOperationMetadata]
    /// - `response`: An [Empty
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
    ///
    /// [google.cloud.dialogflow.v2.DeleteConversationModelOperationMetadata]: crate::model::DeleteConversationModelOperationMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_conversation_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_models::DeleteConversationModel {
        crate::builders::conversation_models::DeleteConversationModel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deploys a model. If a model is already deployed, deploying it
    /// has no effect. A model can only serve prediction requests after it gets
    /// deployed. For article suggestion, custom model will not be used unless
    /// it is deployed.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [DeployConversationModelOperationMetadata][google.cloud.dialogflow.v2.DeployConversationModelOperationMetadata]
    /// - `response`: An [Empty
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
    ///
    /// [google.cloud.dialogflow.v2.DeployConversationModelOperationMetadata]: crate::model::DeployConversationModelOperationMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn deploy_conversation_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_models::DeployConversationModel {
        crate::builders::conversation_models::DeployConversationModel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Undeploys a model. If the model is not deployed this method has no effect.
    /// If the model is currently being used:
    ///
    /// - For article suggestion, article suggestion will fallback to the default
    ///   model if model is undeployed.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [UndeployConversationModelOperationMetadata][google.cloud.dialogflow.v2.UndeployConversationModelOperationMetadata]
    /// - `response`: An [Empty
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
    ///
    /// [google.cloud.dialogflow.v2.UndeployConversationModelOperationMetadata]: crate::model::UndeployConversationModelOperationMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn undeploy_conversation_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_models::UndeployConversationModel {
        crate::builders::conversation_models::UndeployConversationModel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets an evaluation of conversation model.
    pub fn get_conversation_model_evaluation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_models::GetConversationModelEvaluation {
        crate::builders::conversation_models::GetConversationModelEvaluation::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Lists evaluations of a conversation model.
    pub fn list_conversation_model_evaluations(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::conversation_models::ListConversationModelEvaluations {
        crate::builders::conversation_models::ListConversationModelEvaluations::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Creates evaluation of a conversation model.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_conversation_model_evaluation(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::conversation_models::CreateConversationModelEvaluation {
        crate::builders::conversation_models::CreateConversationModelEvaluation::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_models::ListLocations {
        crate::builders::conversation_models::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_models::GetLocation {
        crate::builders::conversation_models::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_models::ListOperations {
        crate::builders::conversation_models::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_models::GetOperation {
        crate::builders::conversation_models::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_models::CancelOperation {
        crate::builders::conversation_models::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing
/// [ConversationProfiles][google.cloud.dialogflow.v2.ConversationProfile].
///
/// [google.cloud.dialogflow.v2.ConversationProfile]: crate::model::ConversationProfile
///
/// # Configuration
///
/// `ConversationProfiles` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `ConversationProfiles` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `ConversationProfiles` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct ConversationProfiles {
    inner: Arc<dyn crate::stubs::dynamic::ConversationProfiles>,
}

impl ConversationProfiles {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::ConversationProfiles + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::ConversationProfiles>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ConversationProfiles> {
        crate::transport::ConversationProfiles::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::ConversationProfiles> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::ConversationProfiles::new)
    }

    /// Returns the list of all conversation profiles in the specified project.
    pub fn list_conversation_profiles(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::conversation_profiles::ListConversationProfiles {
        crate::builders::conversation_profiles::ListConversationProfiles::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves the specified conversation profile.
    pub fn get_conversation_profile(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_profiles::GetConversationProfile {
        crate::builders::conversation_profiles::GetConversationProfile::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a conversation profile in the specified project.
    ///
    /// [ConversationProfile.create_time][google.cloud.dialogflow.v2.ConversationProfile.create_time]
    /// and
    /// [ConversationProfile.update_time][google.cloud.dialogflow.v2.ConversationProfile.update_time]
    /// aren't populated in the response. You can retrieve them via
    /// [GetConversationProfile][google.cloud.dialogflow.v2.ConversationProfiles.GetConversationProfile]
    /// API.
    ///
    /// [google.cloud.dialogflow.v2.ConversationProfile.create_time]: crate::model::ConversationProfile::create_time
    /// [google.cloud.dialogflow.v2.ConversationProfile.update_time]: crate::model::ConversationProfile::update_time
    /// [google.cloud.dialogflow.v2.ConversationProfiles.GetConversationProfile]: crate::client::ConversationProfiles::get_conversation_profile
    pub fn create_conversation_profile(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::conversation_profiles::CreateConversationProfile {
        crate::builders::conversation_profiles::CreateConversationProfile::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the specified conversation profile.
    ///
    /// [ConversationProfile.create_time][google.cloud.dialogflow.v2.ConversationProfile.create_time]
    /// and
    /// [ConversationProfile.update_time][google.cloud.dialogflow.v2.ConversationProfile.update_time]
    /// aren't populated in the response. You can retrieve them via
    /// [GetConversationProfile][google.cloud.dialogflow.v2.ConversationProfiles.GetConversationProfile]
    /// API.
    ///
    /// [google.cloud.dialogflow.v2.ConversationProfile.create_time]: crate::model::ConversationProfile::create_time
    /// [google.cloud.dialogflow.v2.ConversationProfile.update_time]: crate::model::ConversationProfile::update_time
    /// [google.cloud.dialogflow.v2.ConversationProfiles.GetConversationProfile]: crate::client::ConversationProfiles::get_conversation_profile
    pub fn update_conversation_profile(
        &self,
        conversation_profile: impl Into<crate::model::ConversationProfile>,
    ) -> crate::builders::conversation_profiles::UpdateConversationProfile {
        crate::builders::conversation_profiles::UpdateConversationProfile::new(self.inner.clone())
            .set_conversation_profile(conversation_profile.into())
    }

    /// Deletes the specified conversation profile.
    pub fn delete_conversation_profile(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_profiles::DeleteConversationProfile {
        crate::builders::conversation_profiles::DeleteConversationProfile::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Adds or updates a suggestion feature in a conversation profile.
    /// If the conversation profile contains the type of suggestion feature for
    /// the participant role, it will update it. Otherwise it will insert the
    /// suggestion feature.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [SetSuggestionFeatureConfigOperationMetadata][google.cloud.dialogflow.v2.SetSuggestionFeatureConfigOperationMetadata]
    /// - `response`:
    ///   [ConversationProfile][google.cloud.dialogflow.v2.ConversationProfile]
    ///
    /// If a long running operation to add or update suggestion feature
    /// config for the same conversation profile, participant role and suggestion
    /// feature type exists, please cancel the existing long running operation
    /// before sending such request, otherwise the request will be rejected.
    ///
    /// [google.cloud.dialogflow.v2.ConversationProfile]: crate::model::ConversationProfile
    /// [google.cloud.dialogflow.v2.SetSuggestionFeatureConfigOperationMetadata]: crate::model::SetSuggestionFeatureConfigOperationMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn set_suggestion_feature_config(
        &self,
        conversation_profile: impl Into<std::string::String>,
    ) -> crate::builders::conversation_profiles::SetSuggestionFeatureConfig {
        crate::builders::conversation_profiles::SetSuggestionFeatureConfig::new(self.inner.clone())
            .set_conversation_profile(conversation_profile.into())
    }

    /// Clears a suggestion feature from a conversation profile for the given
    /// participant role.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [ClearSuggestionFeatureConfigOperationMetadata][google.cloud.dialogflow.v2.ClearSuggestionFeatureConfigOperationMetadata]
    /// - `response`:
    ///   [ConversationProfile][google.cloud.dialogflow.v2.ConversationProfile]
    ///
    /// [google.cloud.dialogflow.v2.ClearSuggestionFeatureConfigOperationMetadata]: crate::model::ClearSuggestionFeatureConfigOperationMetadata
    /// [google.cloud.dialogflow.v2.ConversationProfile]: crate::model::ConversationProfile
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn clear_suggestion_feature_config(
        &self,
        conversation_profile: impl Into<std::string::String>,
    ) -> crate::builders::conversation_profiles::ClearSuggestionFeatureConfig {
        crate::builders::conversation_profiles::ClearSuggestionFeatureConfig::new(
            self.inner.clone(),
        )
        .set_conversation_profile(conversation_profile.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_profiles::ListLocations {
        crate::builders::conversation_profiles::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_profiles::GetLocation {
        crate::builders::conversation_profiles::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_profiles::ListOperations {
        crate::builders::conversation_profiles::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_profiles::GetOperation {
        crate::builders::conversation_profiles::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::conversation_profiles::CancelOperation {
        crate::builders::conversation_profiles::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing knowledge
/// [Documents][google.cloud.dialogflow.v2.Document].
///
/// [google.cloud.dialogflow.v2.Document]: crate::model::Document
///
/// # Configuration
///
/// `Documents` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Documents` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Documents` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Documents {
    inner: Arc<dyn crate::stubs::dynamic::Documents>,
}

impl Documents {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Documents + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Documents>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Documents> {
        crate::transport::Documents::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Documents> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Documents::new)
    }

    /// Returns the list of all documents of the knowledge base.
    pub fn list_documents(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::documents::ListDocuments {
        crate::builders::documents::ListDocuments::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Retrieves the specified document.
    pub fn get_document(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::documents::GetDocument {
        crate::builders::documents::GetDocument::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a new document.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
    /// - `response`: [Document][google.cloud.dialogflow.v2.Document]
    ///
    /// [google.cloud.dialogflow.v2.Document]: crate::model::Document
    /// [google.cloud.dialogflow.v2.KnowledgeOperationMetadata]: crate::model::KnowledgeOperationMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_document(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::documents::CreateDocument {
        crate::builders::documents::CreateDocument::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates documents by importing data from external sources.
    /// Dialogflow supports up to 350 documents in each request. If you try to
    /// import more, Dialogflow will return an error.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
    /// - `response`:
    ///   [ImportDocumentsResponse][google.cloud.dialogflow.v2.ImportDocumentsResponse]
    ///
    /// [google.cloud.dialogflow.v2.ImportDocumentsResponse]: crate::model::ImportDocumentsResponse
    /// [google.cloud.dialogflow.v2.KnowledgeOperationMetadata]: crate::model::KnowledgeOperationMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_documents(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::documents::ImportDocuments {
        crate::builders::documents::ImportDocuments::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes the specified document.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
    /// - `response`: An [Empty
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
    ///
    /// [google.cloud.dialogflow.v2.KnowledgeOperationMetadata]: crate::model::KnowledgeOperationMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_document(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::documents::DeleteDocument {
        crate::builders::documents::DeleteDocument::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates the specified document.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
    /// - `response`: [Document][google.cloud.dialogflow.v2.Document]
    ///
    /// [google.cloud.dialogflow.v2.Document]: crate::model::Document
    /// [google.cloud.dialogflow.v2.KnowledgeOperationMetadata]: crate::model::KnowledgeOperationMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_document(
        &self,
        document: impl Into<crate::model::Document>,
    ) -> crate::builders::documents::UpdateDocument {
        crate::builders::documents::UpdateDocument::new(self.inner.clone())
            .set_document(document.into())
    }

    /// Reloads the specified document from its specified source, content_uri or
    /// content. The previously loaded content of the document will be deleted.
    /// Note: Even when the content of the document has not changed, there still
    /// may be side effects because of internal implementation changes.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
    /// - `response`: [Document][google.cloud.dialogflow.v2.Document]
    ///
    /// Note: The `projects.agent.knowledgeBases.documents` resource is deprecated;
    /// only use `projects.knowledgeBases.documents`.
    ///
    /// [google.cloud.dialogflow.v2.Document]: crate::model::Document
    /// [google.cloud.dialogflow.v2.KnowledgeOperationMetadata]: crate::model::KnowledgeOperationMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn reload_document(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::documents::ReloadDocument {
        crate::builders::documents::ReloadDocument::new(self.inner.clone()).set_name(name.into())
    }

    /// Exports a smart messaging candidate document into the specified
    /// destination.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/cx/docs/how/long-running-operation).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`:
    ///   [KnowledgeOperationMetadata][google.cloud.dialogflow.v2.KnowledgeOperationMetadata]
    /// - `response`: [Document][google.cloud.dialogflow.v2.Document]
    ///
    /// [google.cloud.dialogflow.v2.Document]: crate::model::Document
    /// [google.cloud.dialogflow.v2.KnowledgeOperationMetadata]: crate::model::KnowledgeOperationMetadata
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_document(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::documents::ExportDocument {
        crate::builders::documents::ExportDocument::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::documents::ListLocations {
        crate::builders::documents::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::documents::GetLocation {
        crate::builders::documents::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::documents::ListOperations {
        crate::builders::documents::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::documents::GetOperation {
        crate::builders::documents::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::documents::CancelOperation {
        crate::builders::documents::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Manages encryption spec settings for Dialogflow and Agent Assist.
///
/// # Configuration
///
/// `EncryptionSpecService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `EncryptionSpecService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `EncryptionSpecService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct EncryptionSpecService {
    inner: Arc<dyn crate::stubs::dynamic::EncryptionSpecService>,
}

impl EncryptionSpecService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::EncryptionSpecService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::EncryptionSpecService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::EncryptionSpecService> {
        crate::transport::EncryptionSpecService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::EncryptionSpecService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::EncryptionSpecService::new)
    }

    /// Gets location-level encryption key specification.
    pub fn get_encryption_spec(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::encryption_spec_service::GetEncryptionSpec {
        crate::builders::encryption_spec_service::GetEncryptionSpec::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Initializes a location-level encryption key specification.  An error will
    /// be thrown if the location has resources already created before the
    /// initialization. Once the encryption specification is initialized at a
    /// location, it is immutable and all newly created resources under the
    /// location will be encrypted with the existing specification.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn initialize_encryption_spec(
        &self,
        encryption_spec: impl Into<crate::model::EncryptionSpec>,
    ) -> crate::builders::encryption_spec_service::InitializeEncryptionSpec {
        crate::builders::encryption_spec_service::InitializeEncryptionSpec::new(self.inner.clone())
            .set_encryption_spec(encryption_spec.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::encryption_spec_service::ListLocations {
        crate::builders::encryption_spec_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::encryption_spec_service::GetLocation {
        crate::builders::encryption_spec_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::encryption_spec_service::ListOperations {
        crate::builders::encryption_spec_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::encryption_spec_service::GetOperation {
        crate::builders::encryption_spec_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::encryption_spec_service::CancelOperation {
        crate::builders::encryption_spec_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [EntityTypes][google.cloud.dialogflow.v2.EntityType].
///
/// [google.cloud.dialogflow.v2.EntityType]: crate::model::EntityType
///
/// # Configuration
///
/// `EntityTypes` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `EntityTypes` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `EntityTypes` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct EntityTypes {
    inner: Arc<dyn crate::stubs::dynamic::EntityTypes>,
}

impl EntityTypes {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::EntityTypes + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::EntityTypes>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::EntityTypes> {
        crate::transport::EntityTypes::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::EntityTypes> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::EntityTypes::new)
    }

    /// Returns the list of all entity types in the specified agent.
    pub fn list_entity_types(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::entity_types::ListEntityTypes {
        crate::builders::entity_types::ListEntityTypes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves the specified entity type.
    pub fn get_entity_type(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::entity_types::GetEntityType {
        crate::builders::entity_types::GetEntityType::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates an entity type in the specified agent.
    ///
    /// Note: You should always train an agent prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/es/docs/training).
    pub fn create_entity_type(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::entity_types::CreateEntityType {
        crate::builders::entity_types::CreateEntityType::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the specified entity type.
    ///
    /// Note: You should always train an agent prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/es/docs/training).
    pub fn update_entity_type(
        &self,
        entity_type: impl Into<crate::model::EntityType>,
    ) -> crate::builders::entity_types::UpdateEntityType {
        crate::builders::entity_types::UpdateEntityType::new(self.inner.clone())
            .set_entity_type(entity_type.into())
    }

    /// Deletes the specified entity type.
    ///
    /// Note: You should always train an agent prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/es/docs/training).
    pub fn delete_entity_type(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::entity_types::DeleteEntityType {
        crate::builders::entity_types::DeleteEntityType::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates/Creates multiple entity types in the specified agent.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`:
    ///   [BatchUpdateEntityTypesResponse][google.cloud.dialogflow.v2.BatchUpdateEntityTypesResponse]
    ///
    /// Note: You should always train an agent prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/es/docs/training).
    ///
    /// [google.cloud.dialogflow.v2.BatchUpdateEntityTypesResponse]: crate::model::BatchUpdateEntityTypesResponse
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_update_entity_types(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::entity_types::BatchUpdateEntityTypes {
        crate::builders::entity_types::BatchUpdateEntityTypes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes entity types in the specified agent.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`: An [Empty
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
    ///
    /// Note: You should always train an agent prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/es/docs/training).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_delete_entity_types(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::entity_types::BatchDeleteEntityTypes {
        crate::builders::entity_types::BatchDeleteEntityTypes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates multiple new entities in the specified entity type.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`: An [Empty
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
    ///
    /// Note: You should always train an agent prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/es/docs/training).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_create_entities(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::entity_types::BatchCreateEntities {
        crate::builders::entity_types::BatchCreateEntities::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates or creates multiple entities in the specified entity type. This
    /// method does not affect entities in the entity type that aren't explicitly
    /// specified in the request.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`: An [Empty
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
    ///
    /// Note: You should always train an agent prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/es/docs/training).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_update_entities(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::entity_types::BatchUpdateEntities {
        crate::builders::entity_types::BatchUpdateEntities::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes entities in the specified entity type.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`: An [Empty
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
    ///
    /// Note: You should always train an agent prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/es/docs/training).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_delete_entities(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::entity_types::BatchDeleteEntities {
        crate::builders::entity_types::BatchDeleteEntities::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::entity_types::ListLocations {
        crate::builders::entity_types::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::entity_types::GetLocation {
        crate::builders::entity_types::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::entity_types::ListOperations {
        crate::builders::entity_types::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::entity_types::GetOperation {
        crate::builders::entity_types::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::entity_types::CancelOperation {
        crate::builders::entity_types::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Environments][google.cloud.dialogflow.v2.Environment].
///
/// [google.cloud.dialogflow.v2.Environment]: crate::model::Environment
///
/// # Configuration
///
/// `Environments` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Environments` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Environments` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Environments {
    inner: Arc<dyn crate::stubs::dynamic::Environments>,
}

impl Environments {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Environments + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Environments>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Environments> {
        crate::transport::Environments::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Environments> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Environments::new)
    }

    /// Returns the list of all non-default environments of the specified agent.
    pub fn list_environments(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::environments::ListEnvironments {
        crate::builders::environments::ListEnvironments::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves the specified agent environment.
    pub fn get_environment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::environments::GetEnvironment {
        crate::builders::environments::GetEnvironment::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates an agent environment.
    pub fn create_environment(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::environments::CreateEnvironment {
        crate::builders::environments::CreateEnvironment::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the specified agent environment.
    ///
    /// This method allows you to deploy new agent versions into the environment.
    /// When an environment is pointed to a new agent version by setting
    /// `environment.agent_version`, the environment is temporarily set to the
    /// `LOADING` state. During that time, the environment continues serving the
    /// previous version of the agent. After the new agent version is done loading,
    /// the environment is set back to the `RUNNING` state.
    /// You can use "-" as Environment ID in environment name to update an agent
    /// version in the default environment. WARNING: this will negate all recent
    /// changes to the draft agent and can't be undone. You may want to save the
    /// draft agent to a version before calling this method.
    pub fn update_environment(
        &self,
        environment: impl Into<crate::model::Environment>,
    ) -> crate::builders::environments::UpdateEnvironment {
        crate::builders::environments::UpdateEnvironment::new(self.inner.clone())
            .set_environment(environment.into())
    }

    /// Deletes the specified agent environment.
    pub fn delete_environment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::environments::DeleteEnvironment {
        crate::builders::environments::DeleteEnvironment::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets the history of the specified environment.
    pub fn get_environment_history(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::environments::GetEnvironmentHistory {
        crate::builders::environments::GetEnvironmentHistory::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::environments::ListLocations {
        crate::builders::environments::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::environments::GetLocation {
        crate::builders::environments::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::environments::ListOperations {
        crate::builders::environments::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::environments::GetOperation {
        crate::builders::environments::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::environments::CancelOperation {
        crate::builders::environments::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Fulfillments][google.cloud.dialogflow.v2.Fulfillment].
///
/// [google.cloud.dialogflow.v2.Fulfillment]: crate::model::Fulfillment
///
/// # Configuration
///
/// `Fulfillments` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Fulfillments` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Fulfillments` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Fulfillments {
    inner: Arc<dyn crate::stubs::dynamic::Fulfillments>,
}

impl Fulfillments {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Fulfillments + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Fulfillments>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Fulfillments> {
        crate::transport::Fulfillments::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Fulfillments> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Fulfillments::new)
    }

    /// Retrieves the fulfillment.
    pub fn get_fulfillment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::fulfillments::GetFulfillment {
        crate::builders::fulfillments::GetFulfillment::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates the fulfillment.
    pub fn update_fulfillment(
        &self,
        fulfillment: impl Into<crate::model::Fulfillment>,
    ) -> crate::builders::fulfillments::UpdateFulfillment {
        crate::builders::fulfillments::UpdateFulfillment::new(self.inner.clone())
            .set_fulfillment(fulfillment.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::fulfillments::ListLocations {
        crate::builders::fulfillments::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::fulfillments::GetLocation {
        crate::builders::fulfillments::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::fulfillments::ListOperations {
        crate::builders::fulfillments::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::fulfillments::GetOperation {
        crate::builders::fulfillments::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::fulfillments::CancelOperation {
        crate::builders::fulfillments::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Generator Service for LLM powered Agent Assist. This service manages the
/// configurations of user owned Generators, such as description, context and
/// instruction, input/output format, etc. The generator resources will be used
/// inside a conversation and will be triggered by TriggerEvent to query LLM for
/// answers.
///
/// # Configuration
///
/// `Generators` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Generators` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Generators` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Generators {
    inner: Arc<dyn crate::stubs::dynamic::Generators>,
}

impl Generators {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Generators + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Generators>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Generators> {
        crate::transport::Generators::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Generators> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Generators::new)
    }

    /// Creates a generator.
    pub fn create_generator(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::generators::CreateGenerator {
        crate::builders::generators::CreateGenerator::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves a generator.
    pub fn get_generator(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::generators::GetGenerator {
        crate::builders::generators::GetGenerator::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists generators.
    pub fn list_generators(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::generators::ListGenerators {
        crate::builders::generators::ListGenerators::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a generator.
    pub fn delete_generator(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::generators::DeleteGenerator {
        crate::builders::generators::DeleteGenerator::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates a generator.
    pub fn update_generator(
        &self,
        generator: impl Into<crate::model::Generator>,
    ) -> crate::builders::generators::UpdateGenerator {
        crate::builders::generators::UpdateGenerator::new(self.inner.clone())
            .set_generator(generator.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::generators::ListLocations {
        crate::builders::generators::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::generators::GetLocation {
        crate::builders::generators::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::generators::ListOperations {
        crate::builders::generators::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::generators::GetOperation {
        crate::builders::generators::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::generators::CancelOperation {
        crate::builders::generators::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Intents][google.cloud.dialogflow.v2.Intent].
///
/// [google.cloud.dialogflow.v2.Intent]: crate::model::Intent
///
/// # Configuration
///
/// `Intents` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Intents` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Intents` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Intents {
    inner: Arc<dyn crate::stubs::dynamic::Intents>,
}

impl Intents {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Intents + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Intents>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Intents> {
        crate::transport::Intents::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Intents> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Intents::new)
    }

    /// Returns the list of all intents in the specified agent.
    pub fn list_intents(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::intents::ListIntents {
        crate::builders::intents::ListIntents::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Retrieves the specified intent.
    pub fn get_intent(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::intents::GetIntent {
        crate::builders::intents::GetIntent::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates an intent in the specified agent.
    ///
    /// Note: You should always train an agent prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/es/docs/training).
    pub fn create_intent(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::intents::CreateIntent {
        crate::builders::intents::CreateIntent::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates the specified intent.
    ///
    /// Note: You should always train an agent prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/es/docs/training).
    pub fn update_intent(
        &self,
        intent: impl Into<crate::model::Intent>,
    ) -> crate::builders::intents::UpdateIntent {
        crate::builders::intents::UpdateIntent::new(self.inner.clone()).set_intent(intent.into())
    }

    /// Deletes the specified intent and its direct or indirect followup intents.
    ///
    /// Note: You should always train an agent prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/es/docs/training).
    pub fn delete_intent(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::intents::DeleteIntent {
        crate::builders::intents::DeleteIntent::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates/Creates multiple intents in the specified agent.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`:
    ///   [BatchUpdateIntentsResponse][google.cloud.dialogflow.v2.BatchUpdateIntentsResponse]
    ///
    /// Note: You should always train an agent prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/es/docs/training).
    ///
    /// [google.cloud.dialogflow.v2.BatchUpdateIntentsResponse]: crate::model::BatchUpdateIntentsResponse
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_update_intents(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::intents::BatchUpdateIntents {
        crate::builders::intents::BatchUpdateIntents::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes intents in the specified agent.
    ///
    /// This method is a [long-running
    /// operation](https://cloud.google.com/dialogflow/es/docs/how/long-running-operations).
    /// The returned `Operation` type has the following method-specific fields:
    ///
    /// - `metadata`: An empty [Struct
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#struct)
    /// - `response`: An [Empty
    ///   message](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#empty)
    ///
    /// Note: You should always train an agent prior to sending it queries. See the
    /// [training
    /// documentation](https://cloud.google.com/dialogflow/es/docs/training).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_delete_intents(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::intents::BatchDeleteIntents {
        crate::builders::intents::BatchDeleteIntents::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::intents::ListLocations {
        crate::builders::intents::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::intents::GetLocation {
        crate::builders::intents::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::intents::ListOperations {
        crate::builders::intents::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::intents::GetOperation {
        crate::builders::intents::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::intents::CancelOperation {
        crate::builders::intents::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing
/// [KnowledgeBases][google.cloud.dialogflow.v2.KnowledgeBase].
///
/// [google.cloud.dialogflow.v2.KnowledgeBase]: crate::model::KnowledgeBase
///
/// # Configuration
///
/// `KnowledgeBases` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `KnowledgeBases` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `KnowledgeBases` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct KnowledgeBases {
    inner: Arc<dyn crate::stubs::dynamic::KnowledgeBases>,
}

impl KnowledgeBases {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::KnowledgeBases + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::KnowledgeBases>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::KnowledgeBases> {
        crate::transport::KnowledgeBases::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::KnowledgeBases> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::KnowledgeBases::new)
    }

    /// Returns the list of all knowledge bases of the specified agent.
    pub fn list_knowledge_bases(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::knowledge_bases::ListKnowledgeBases {
        crate::builders::knowledge_bases::ListKnowledgeBases::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves the specified knowledge base.
    pub fn get_knowledge_base(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::knowledge_bases::GetKnowledgeBase {
        crate::builders::knowledge_bases::GetKnowledgeBase::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a knowledge base.
    pub fn create_knowledge_base(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::knowledge_bases::CreateKnowledgeBase {
        crate::builders::knowledge_bases::CreateKnowledgeBase::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes the specified knowledge base.
    pub fn delete_knowledge_base(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::knowledge_bases::DeleteKnowledgeBase {
        crate::builders::knowledge_bases::DeleteKnowledgeBase::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates the specified knowledge base.
    pub fn update_knowledge_base(
        &self,
        knowledge_base: impl Into<crate::model::KnowledgeBase>,
    ) -> crate::builders::knowledge_bases::UpdateKnowledgeBase {
        crate::builders::knowledge_bases::UpdateKnowledgeBase::new(self.inner.clone())
            .set_knowledge_base(knowledge_base.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::knowledge_bases::ListLocations {
        crate::builders::knowledge_bases::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::knowledge_bases::GetLocation {
        crate::builders::knowledge_bases::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::knowledge_bases::ListOperations {
        crate::builders::knowledge_bases::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::knowledge_bases::GetOperation {
        crate::builders::knowledge_bases::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::knowledge_bases::CancelOperation {
        crate::builders::knowledge_bases::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Participants][google.cloud.dialogflow.v2.Participant].
///
/// [google.cloud.dialogflow.v2.Participant]: crate::model::Participant
///
/// # Configuration
///
/// `Participants` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Participants` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Participants` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Participants {
    inner: Arc<dyn crate::stubs::dynamic::Participants>,
}

impl Participants {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Participants + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Participants>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Participants> {
        crate::transport::Participants::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Participants> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Participants::new)
    }

    /// Creates a new participant in a conversation.
    pub fn create_participant(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::participants::CreateParticipant {
        crate::builders::participants::CreateParticipant::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves a conversation participant.
    pub fn get_participant(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::participants::GetParticipant {
        crate::builders::participants::GetParticipant::new(self.inner.clone()).set_name(name.into())
    }

    /// Returns the list of all participants in the specified conversation.
    pub fn list_participants(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::participants::ListParticipants {
        crate::builders::participants::ListParticipants::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the specified participant.
    pub fn update_participant(
        &self,
        participant: impl Into<crate::model::Participant>,
    ) -> crate::builders::participants::UpdateParticipant {
        crate::builders::participants::UpdateParticipant::new(self.inner.clone())
            .set_participant(participant.into())
    }

    /// Adds a text (chat, for example), or audio (phone recording, for example)
    /// message from a participant into the conversation.
    ///
    /// Note: Always use agent versions for production traffic
    /// sent to virtual agents. See [Versions and
    /// environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
    pub fn analyze_content(
        &self,
        participant: impl Into<std::string::String>,
    ) -> crate::builders::participants::AnalyzeContent {
        crate::builders::participants::AnalyzeContent::new(self.inner.clone())
            .set_participant(participant.into())
    }

    /// Gets suggested articles for a participant based on specific historical
    /// messages.
    pub fn suggest_articles(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::participants::SuggestArticles {
        crate::builders::participants::SuggestArticles::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets suggested faq answers for a participant based on specific historical
    /// messages.
    pub fn suggest_faq_answers(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::participants::SuggestFaqAnswers {
        crate::builders::participants::SuggestFaqAnswers::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets smart replies for a participant based on specific historical
    /// messages.
    pub fn suggest_smart_replies(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::participants::SuggestSmartReplies {
        crate::builders::participants::SuggestSmartReplies::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets knowledge assist suggestions based on historical messages.
    pub fn suggest_knowledge_assist(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::participants::SuggestKnowledgeAssist {
        crate::builders::participants::SuggestKnowledgeAssist::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::participants::ListLocations {
        crate::builders::participants::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::participants::GetLocation {
        crate::builders::participants::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::participants::ListOperations {
        crate::builders::participants::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::participants::GetOperation {
        crate::builders::participants::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::participants::CancelOperation {
        crate::builders::participants::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// A service used for session interactions.
///
/// For more information, see the [API interactions
/// guide](https://cloud.google.com/dialogflow/docs/api-overview).
///
/// # Configuration
///
/// `Sessions` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Sessions` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Sessions` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Sessions {
    inner: Arc<dyn crate::stubs::dynamic::Sessions>,
}

impl Sessions {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Sessions + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Sessions>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Sessions> {
        crate::transport::Sessions::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Sessions> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Sessions::new)
    }

    /// Processes a natural language query and returns structured, actionable data
    /// as a result. This method is not idempotent, because it may cause contexts
    /// and session entity types to be updated, which in turn might affect
    /// results of future queries.
    ///
    /// If you might use
    /// [Agent Assist](https://cloud.google.com/dialogflow/docs/#aa)
    /// or other CCAI products now or in the future, consider using
    /// [AnalyzeContent][google.cloud.dialogflow.v2.Participants.AnalyzeContent]
    /// instead of `DetectIntent`. `AnalyzeContent` has additional
    /// functionality for Agent Assist and other CCAI products.
    ///
    /// Note: Always use agent versions for production traffic.
    /// See [Versions and
    /// environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
    ///
    /// [google.cloud.dialogflow.v2.Participants.AnalyzeContent]: crate::client::Participants::analyze_content
    pub fn detect_intent(
        &self,
        session: impl Into<std::string::String>,
    ) -> crate::builders::sessions::DetectIntent {
        crate::builders::sessions::DetectIntent::new(self.inner.clone()).set_session(session.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::sessions::ListLocations {
        crate::builders::sessions::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::sessions::GetLocation {
        crate::builders::sessions::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::sessions::ListOperations {
        crate::builders::sessions::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::sessions::GetOperation {
        crate::builders::sessions::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::sessions::CancelOperation {
        crate::builders::sessions::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing
/// [SessionEntityTypes][google.cloud.dialogflow.v2.SessionEntityType].
///
/// [google.cloud.dialogflow.v2.SessionEntityType]: crate::model::SessionEntityType
///
/// # Configuration
///
/// `SessionEntityTypes` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SessionEntityTypes` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SessionEntityTypes` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SessionEntityTypes {
    inner: Arc<dyn crate::stubs::dynamic::SessionEntityTypes>,
}

impl SessionEntityTypes {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::SessionEntityTypes + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::SessionEntityTypes>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::SessionEntityTypes> {
        crate::transport::SessionEntityTypes::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::SessionEntityTypes> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::SessionEntityTypes::new)
    }

    /// Returns the list of all session entity types in the specified session.
    ///
    /// This method doesn't work with Google Assistant integration.
    /// Contact Dialogflow support if you need to use session entities
    /// with Google Assistant integration.
    pub fn list_session_entity_types(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::session_entity_types::ListSessionEntityTypes {
        crate::builders::session_entity_types::ListSessionEntityTypes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves the specified session entity type.
    ///
    /// This method doesn't work with Google Assistant integration.
    /// Contact Dialogflow support if you need to use session entities
    /// with Google Assistant integration.
    pub fn get_session_entity_type(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::session_entity_types::GetSessionEntityType {
        crate::builders::session_entity_types::GetSessionEntityType::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a session entity type.
    ///
    /// If the specified session entity type already exists, overrides the session
    /// entity type.
    ///
    /// This method doesn't work with Google Assistant integration.
    /// Contact Dialogflow support if you need to use session entities
    /// with Google Assistant integration.
    pub fn create_session_entity_type(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::session_entity_types::CreateSessionEntityType {
        crate::builders::session_entity_types::CreateSessionEntityType::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the specified session entity type.
    ///
    /// This method doesn't work with Google Assistant integration.
    /// Contact Dialogflow support if you need to use session entities
    /// with Google Assistant integration.
    pub fn update_session_entity_type(
        &self,
        session_entity_type: impl Into<crate::model::SessionEntityType>,
    ) -> crate::builders::session_entity_types::UpdateSessionEntityType {
        crate::builders::session_entity_types::UpdateSessionEntityType::new(self.inner.clone())
            .set_session_entity_type(session_entity_type.into())
    }

    /// Deletes the specified session entity type.
    ///
    /// This method doesn't work with Google Assistant integration.
    /// Contact Dialogflow support if you need to use session entities
    /// with Google Assistant integration.
    pub fn delete_session_entity_type(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::session_entity_types::DeleteSessionEntityType {
        crate::builders::session_entity_types::DeleteSessionEntityType::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::session_entity_types::ListLocations {
        crate::builders::session_entity_types::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::session_entity_types::GetLocation {
        crate::builders::session_entity_types::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::session_entity_types::ListOperations {
        crate::builders::session_entity_types::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::session_entity_types::GetOperation {
        crate::builders::session_entity_types::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::session_entity_types::CancelOperation {
        crate::builders::session_entity_types::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Dialogflow API.
///
/// # Service Description
///
/// Service for managing [Versions][google.cloud.dialogflow.v2.Version].
///
/// [google.cloud.dialogflow.v2.Version]: crate::model::Version
///
/// # Configuration
///
/// `Versions` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Versions` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Versions` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Versions {
    inner: Arc<dyn crate::stubs::dynamic::Versions>,
}

impl Versions {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Versions + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Versions>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Versions> {
        crate::transport::Versions::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Versions> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Versions::new)
    }

    /// Returns the list of all versions of the specified agent.
    pub fn list_versions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::versions::ListVersions {
        crate::builders::versions::ListVersions::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Retrieves the specified agent version.
    pub fn get_version(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::versions::GetVersion {
        crate::builders::versions::GetVersion::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates an agent version.
    ///
    /// The new version points to the agent instance in the "default" environment.
    pub fn create_version(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::versions::CreateVersion {
        crate::builders::versions::CreateVersion::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates the specified agent version.
    ///
    /// Note that this method does not allow you to update the state of the agent
    /// the given version points to. It allows you to update only mutable
    /// properties of the version resource.
    pub fn update_version(
        &self,
        version: impl Into<crate::model::Version>,
    ) -> crate::builders::versions::UpdateVersion {
        crate::builders::versions::UpdateVersion::new(self.inner.clone())
            .set_version(version.into())
    }

    /// Delete the specified agent version.
    pub fn delete_version(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::versions::DeleteVersion {
        crate::builders::versions::DeleteVersion::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::versions::ListLocations {
        crate::builders::versions::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::versions::GetLocation {
        crate::builders::versions::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::versions::ListOperations {
        crate::builders::versions::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::versions::GetOperation {
        crate::builders::versions::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::versions::CancelOperation {
        crate::builders::versions::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}
