// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Google Cloud Client Libraries for Rust - Dialogflow API
//!
//! **FEEDBACK WANTED:** We believe the APIs in this crate are stable, and
//! do not anticipate any breaking changes are needed. We are looking for
//! feedback before labeling the APIs "1.0". Changes (even breaking changes)
//! are still possible, but not expected.
//!
//! We also believe the implementation is ready for production, bugs are
//! still possible, but not expected.
//!
//!
//! **WARNING:** some RPCs have no corresponding Rust function to call them.
//! Typically these are streaming RPCs. We expect adding these RPCs in a
//! way that does not break the existing APIs or changes their behavior in a
//! significant way. We do anticipate a number of new crate dependencies
//! will be required. If you need these RPCs please open an issue in our
//! GitHub repository.
//!
//!
//! This crate contains traits, types, and functions to interact with Dialogflow API
//! Most applications will use the structs defined in the [client] module.
//! More specifically:
//!
//! * [Agents](client/struct.Agents.html)
//! * [AnswerRecords](client/struct.AnswerRecords.html)
//! * [Contexts](client/struct.Contexts.html)
//! * [Conversations](client/struct.Conversations.html)
//! * [ConversationDatasets](client/struct.ConversationDatasets.html)
//! * [ConversationModels](client/struct.ConversationModels.html)
//! * [ConversationProfiles](client/struct.ConversationProfiles.html)
//! * [Documents](client/struct.Documents.html)
//! * [EncryptionSpecService](client/struct.EncryptionSpecService.html)
//! * [EntityTypes](client/struct.EntityTypes.html)
//! * [Environments](client/struct.Environments.html)
//! * [Fulfillments](client/struct.Fulfillments.html)
//! * [Generators](client/struct.Generators.html)
//! * [Intents](client/struct.Intents.html)
//! * [KnowledgeBases](client/struct.KnowledgeBases.html)
//! * [Participants](client/struct.Participants.html)
//! * [Sessions](client/struct.Sessions.html)
//! * [SessionEntityTypes](client/struct.SessionEntityTypes.html)
//! * [Versions](client/struct.Versions.html)

#![cfg_attr(docsrs, feature(doc_cfg))]
#![allow(deprecated)]

/// The messages and enums that are part of this client library.
#[allow(clippy::module_inception)]
pub mod model;

pub use gax::Result;
pub use gax::error::Error;

#[allow(rustdoc::invalid_html_tags)]
#[allow(rustdoc::redundant_explicit_links)]
pub mod stub;

/// Concrete implementations of this client library traits.
pub mod client;

/// Request builders.
pub mod builder;

#[doc(hidden)]
pub(crate) mod tracing;

#[doc(hidden)]
pub(crate) mod transport;

/// The default host used by the service.
#[cfg(any(
    feature = "agents",
    feature = "answer-records",
    feature = "contexts",
    feature = "conversations",
    feature = "conversation-datasets",
    feature = "conversation-models",
    feature = "conversation-profiles",
    feature = "documents",
    feature = "encryption-spec-service",
    feature = "entity-types",
    feature = "environments",
    feature = "fulfillments",
    feature = "generators",
    feature = "intents",
    feature = "knowledge-bases",
    feature = "participants",
    feature = "sessions",
    feature = "session-entity-types",
    feature = "versions",
))]
const DEFAULT_HOST: &str = "https://dialogflow.googleapis.com/";

#[cfg(any(
    feature = "agents",
    feature = "answer-records",
    feature = "contexts",
    feature = "conversations",
    feature = "conversation-datasets",
    feature = "conversation-models",
    feature = "conversation-profiles",
    feature = "documents",
    feature = "encryption-spec-service",
    feature = "entity-types",
    feature = "environments",
    feature = "fulfillments",
    feature = "generators",
    feature = "intents",
    feature = "knowledge-bases",
    feature = "participants",
    feature = "sessions",
    feature = "session-entity-types",
    feature = "versions",
))]
pub(crate) mod info {
    const NAME: &str = env!("CARGO_PKG_NAME");
    const VERSION: &str = env!("CARGO_PKG_VERSION");
    lazy_static::lazy_static! {
        pub(crate) static ref X_GOOG_API_CLIENT_HEADER: String = {
            let ac = gaxi::api_header::XGoogApiClient{
                name:          NAME,
                version:       VERSION,
                library_type:  gaxi::api_header::GAPIC,
            };
            ac.rest_header_value()
        };
    }
}
