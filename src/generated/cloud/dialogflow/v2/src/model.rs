// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gaxi;
extern crate gtype;
extern crate lazy_static;
extern crate location;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate rpc;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// A Dialogflow agent is a virtual agent that handles conversations with your
/// end-users. It is a natural language understanding module that understands the
/// nuances of human language. Dialogflow translates end-user text or audio
/// during a conversation to structured data that your apps and services can
/// understand. You design and build a Dialogflow agent to handle the types of
/// conversations required for your system.
///
/// For more information about agents, see the
/// [Agent guide](https://cloud.google.com/dialogflow/docs/agents-overview).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Agent {
    /// Required. The project of this agent.
    /// Format: `projects/<Project ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The name of this agent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Required. The default language of the agent as a language tag. See
    /// [Language
    /// Support](https://cloud.google.com/dialogflow/docs/reference/language)
    /// for a list of the currently supported language codes. This field cannot be
    /// set by the `Update` method.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub default_language_code: std::string::String,

    /// Optional. The list of all languages supported by this agent (except for the
    /// `default_language_code`).
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub supported_language_codes: std::vec::Vec<std::string::String>,

    /// Required. The time zone of this agent from the
    /// [time zone database](https://www.iana.org/time-zones), e.g.,
    /// America/New_York, Europe/Paris.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub time_zone: std::string::String,

    /// Optional. The description of this agent.
    /// The maximum length is 500 characters. If exceeded, the request is rejected.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. The URI of the agent's avatar.
    /// Avatars are used throughout the Dialogflow console and in the self-hosted
    /// [Web
    /// Demo](https://cloud.google.com/dialogflow/docs/integrations/web-demo)
    /// integration.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub avatar_uri: std::string::String,

    /// Optional. Determines whether this agent should log conversation queries.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_logging: bool,

    /// Optional. Determines how intents are detected from user queries.
    #[deprecated]
    pub match_mode: crate::model::agent::MatchMode,

    /// Optional. To filter out false positive results and still get variety in
    /// matched natural language inputs for your agent, you can tune the machine
    /// learning classification threshold. If the returned score value is less than
    /// the threshold value, then a fallback intent will be triggered or, if there
    /// are no fallback intents defined, no intent will be triggered. The score
    /// values range from 0.0 (completely uncertain) to 1.0 (completely certain).
    /// If set to 0.0, the default of 0.3 is used.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub classification_threshold: f32,

    /// Optional. API version displayed in Dialogflow console. If not specified,
    /// V2 API is assumed. Clients are free to query different service endpoints
    /// for different API versions. However, bots connectors and webhook calls will
    /// follow the specified API version.
    pub api_version: crate::model::agent::ApiVersion,

    /// Optional. The agent tier. If not specified, TIER_STANDARD is assumed.
    pub tier: crate::model::agent::Tier,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Agent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::Agent::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Agent::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [default_language_code][crate::model::Agent::default_language_code].
    pub fn set_default_language_code<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.default_language_code = v.into();
        self
    }

    /// Sets the value of [time_zone][crate::model::Agent::time_zone].
    pub fn set_time_zone<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.time_zone = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Agent::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [avatar_uri][crate::model::Agent::avatar_uri].
    pub fn set_avatar_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.avatar_uri = v.into();
        self
    }

    /// Sets the value of [enable_logging][crate::model::Agent::enable_logging].
    pub fn set_enable_logging<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_logging = v.into();
        self
    }

    /// Sets the value of [match_mode][crate::model::Agent::match_mode].
    #[deprecated]
    pub fn set_match_mode<T: std::convert::Into<crate::model::agent::MatchMode>>(
        mut self,
        v: T,
    ) -> Self {
        self.match_mode = v.into();
        self
    }

    /// Sets the value of [classification_threshold][crate::model::Agent::classification_threshold].
    pub fn set_classification_threshold<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.classification_threshold = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::Agent::api_version].
    pub fn set_api_version<T: std::convert::Into<crate::model::agent::ApiVersion>>(
        mut self,
        v: T,
    ) -> Self {
        self.api_version = v.into();
        self
    }

    /// Sets the value of [tier][crate::model::Agent::tier].
    pub fn set_tier<T: std::convert::Into<crate::model::agent::Tier>>(mut self, v: T) -> Self {
        self.tier = v.into();
        self
    }

    /// Sets the value of [supported_language_codes][crate::model::Agent::supported_language_codes].
    pub fn set_supported_language_codes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.supported_language_codes = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Agent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.Agent"
    }
}

/// Defines additional types related to [Agent].
pub mod agent {
    #[allow(unused_imports)]
    use super::*;

    /// Match mode determines how intents are detected from user queries.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum MatchMode {
        /// Not specified.
        Unspecified,
        /// Best for agents with a small number of examples in intents and/or wide
        /// use of templates syntax and composite entities.
        Hybrid,
        /// Can be used for agents with a large number of examples in intents,
        /// especially the ones using @sys.any or very large custom entities.
        MlOnly,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [MatchMode::value] or
        /// [MatchMode::name].
        UnknownValue(match_mode::UnknownValue),
    }

    #[doc(hidden)]
    pub mod match_mode {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl MatchMode {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Hybrid => std::option::Option::Some(1),
                Self::MlOnly => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("MATCH_MODE_UNSPECIFIED"),
                Self::Hybrid => std::option::Option::Some("MATCH_MODE_HYBRID"),
                Self::MlOnly => std::option::Option::Some("MATCH_MODE_ML_ONLY"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for MatchMode {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for MatchMode {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for MatchMode {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Hybrid,
                2 => Self::MlOnly,
                _ => Self::UnknownValue(match_mode::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for MatchMode {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "MATCH_MODE_UNSPECIFIED" => Self::Unspecified,
                "MATCH_MODE_HYBRID" => Self::Hybrid,
                "MATCH_MODE_ML_ONLY" => Self::MlOnly,
                _ => Self::UnknownValue(match_mode::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for MatchMode {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Hybrid => serializer.serialize_i32(1),
                Self::MlOnly => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for MatchMode {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<MatchMode>::new(
                ".google.cloud.dialogflow.v2.Agent.MatchMode",
            ))
        }
    }

    /// API version for the agent.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum ApiVersion {
        /// Not specified.
        Unspecified,
        /// Legacy V1 API.
        V1,
        /// V2 API.
        V2,
        /// V2beta1 API.
        V2Beta1,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [ApiVersion::value] or
        /// [ApiVersion::name].
        UnknownValue(api_version::UnknownValue),
    }

    #[doc(hidden)]
    pub mod api_version {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl ApiVersion {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::V1 => std::option::Option::Some(1),
                Self::V2 => std::option::Option::Some(2),
                Self::V2Beta1 => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("API_VERSION_UNSPECIFIED"),
                Self::V1 => std::option::Option::Some("API_VERSION_V1"),
                Self::V2 => std::option::Option::Some("API_VERSION_V2"),
                Self::V2Beta1 => std::option::Option::Some("API_VERSION_V2_BETA_1"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for ApiVersion {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for ApiVersion {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for ApiVersion {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::V1,
                2 => Self::V2,
                3 => Self::V2Beta1,
                _ => Self::UnknownValue(api_version::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for ApiVersion {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "API_VERSION_UNSPECIFIED" => Self::Unspecified,
                "API_VERSION_V1" => Self::V1,
                "API_VERSION_V2" => Self::V2,
                "API_VERSION_V2_BETA_1" => Self::V2Beta1,
                _ => Self::UnknownValue(api_version::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for ApiVersion {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::V1 => serializer.serialize_i32(1),
                Self::V2 => serializer.serialize_i32(2),
                Self::V2Beta1 => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for ApiVersion {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<ApiVersion>::new(
                ".google.cloud.dialogflow.v2.Agent.ApiVersion",
            ))
        }
    }

    /// Represents the agent tier.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Tier {
        /// Not specified. This value should never be used.
        Unspecified,
        /// Trial Edition, previously known as Standard Edition.
        Standard,
        /// Essentials Edition, previously known as Enterprise Essential Edition.
        Enterprise,
        /// Essentials Edition (same as TIER_ENTERPRISE), previously known as
        /// Enterprise Plus Edition.
        #[deprecated]
        EnterprisePlus,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [Tier::value] or
        /// [Tier::name].
        UnknownValue(tier::UnknownValue),
    }

    #[doc(hidden)]
    pub mod tier {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl Tier {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Standard => std::option::Option::Some(1),
                Self::Enterprise => std::option::Option::Some(2),
                Self::EnterprisePlus => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("TIER_UNSPECIFIED"),
                Self::Standard => std::option::Option::Some("TIER_STANDARD"),
                Self::Enterprise => std::option::Option::Some("TIER_ENTERPRISE"),
                Self::EnterprisePlus => std::option::Option::Some("TIER_ENTERPRISE_PLUS"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for Tier {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for Tier {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for Tier {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Standard,
                2 => Self::Enterprise,
                3 => Self::EnterprisePlus,
                _ => Self::UnknownValue(tier::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for Tier {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "TIER_UNSPECIFIED" => Self::Unspecified,
                "TIER_STANDARD" => Self::Standard,
                "TIER_ENTERPRISE" => Self::Enterprise,
                "TIER_ENTERPRISE_PLUS" => Self::EnterprisePlus,
                _ => Self::UnknownValue(tier::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for Tier {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Standard => serializer.serialize_i32(1),
                Self::Enterprise => serializer.serialize_i32(2),
                Self::EnterprisePlus => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for Tier {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<Tier>::new(
                ".google.cloud.dialogflow.v2.Agent.Tier",
            ))
        }
    }
}

/// The request message for
/// [Agents.GetAgent][google.cloud.dialogflow.v2.Agents.GetAgent].
///
/// [google.cloud.dialogflow.v2.Agents.GetAgent]: crate::client::Agents::get_agent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetAgentRequest {
    /// Required. The project that the agent to fetch is associated with.
    /// Format: `projects/<Project ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetAgentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::GetAgentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }
}

impl wkt::message::Message for GetAgentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetAgentRequest"
    }
}

/// The request message for
/// [Agents.SetAgent][google.cloud.dialogflow.v2.Agents.SetAgent].
///
/// [google.cloud.dialogflow.v2.Agents.SetAgent]: crate::client::Agents::set_agent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SetAgentRequest {
    /// Required. The agent to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub agent: std::option::Option<crate::model::Agent>,

    /// Optional. The mask to control which fields get updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SetAgentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [agent][crate::model::SetAgentRequest::agent].
    pub fn set_agent<T: std::convert::Into<std::option::Option<crate::model::Agent>>>(
        mut self,
        v: T,
    ) -> Self {
        self.agent = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::SetAgentRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for SetAgentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SetAgentRequest"
    }
}

/// The request message for
/// [Agents.DeleteAgent][google.cloud.dialogflow.v2.Agents.DeleteAgent].
///
/// [google.cloud.dialogflow.v2.Agents.DeleteAgent]: crate::client::Agents::delete_agent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteAgentRequest {
    /// Required. The project that the agent to delete is associated with.
    /// Format: `projects/<Project ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteAgentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::DeleteAgentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }
}

impl wkt::message::Message for DeleteAgentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeleteAgentRequest"
    }
}

/// The request message for
/// [Agents.SearchAgents][google.cloud.dialogflow.v2.Agents.SearchAgents].
///
/// [google.cloud.dialogflow.v2.Agents.SearchAgents]: crate::client::Agents::search_agents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SearchAgentsRequest {
    /// Required. The project to list agents from.
    /// Format: `projects/<Project ID or '-'>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of items to return in a single page. By
    /// default 100 and at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SearchAgentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::SearchAgentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::SearchAgentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::SearchAgentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for SearchAgentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SearchAgentsRequest"
    }
}

/// The response message for
/// [Agents.SearchAgents][google.cloud.dialogflow.v2.Agents.SearchAgents].
///
/// [google.cloud.dialogflow.v2.Agents.SearchAgents]: crate::client::Agents::search_agents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SearchAgentsResponse {
    /// The list of agents. There will be a maximum number of items returned based
    /// on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub agents: std::vec::Vec<crate::model::Agent>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SearchAgentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::SearchAgentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [agents][crate::model::SearchAgentsResponse::agents].
    pub fn set_agents<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Agent>,
    {
        use std::iter::Iterator;
        self.agents = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SearchAgentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SearchAgentsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for SearchAgentsResponse {
    type PageItem = crate::model::Agent;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.agents
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Agents.TrainAgent][google.cloud.dialogflow.v2.Agents.TrainAgent].
///
/// [google.cloud.dialogflow.v2.Agents.TrainAgent]: crate::client::Agents::train_agent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TrainAgentRequest {
    /// Required. The project that the agent to train is associated with.
    /// Format: `projects/<Project ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TrainAgentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::TrainAgentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }
}

impl wkt::message::Message for TrainAgentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.TrainAgentRequest"
    }
}

/// The request message for
/// [Agents.ExportAgent][google.cloud.dialogflow.v2.Agents.ExportAgent].
///
/// [google.cloud.dialogflow.v2.Agents.ExportAgent]: crate::client::Agents::export_agent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportAgentRequest {
    /// Required. The project that the agent to export is associated with.
    /// Format: `projects/<Project ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The [Google Cloud
    /// Storage](https://cloud.google.com/storage/docs/) URI to export the agent
    /// to. The format of this URI must be `gs://<bucket-name>/<object-name>`. If
    /// left unspecified, the serialized agent is returned inline.
    ///
    /// Dialogflow performs a write operation for the Cloud Storage object
    /// on the caller's behalf, so your request authentication must
    /// have write permissions for the object. For more information, see
    /// [Dialogflow access
    /// control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub agent_uri: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExportAgentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ExportAgentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [agent_uri][crate::model::ExportAgentRequest::agent_uri].
    pub fn set_agent_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.agent_uri = v.into();
        self
    }
}

impl wkt::message::Message for ExportAgentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ExportAgentRequest"
    }
}

/// The response message for
/// [Agents.ExportAgent][google.cloud.dialogflow.v2.Agents.ExportAgent].
///
/// [google.cloud.dialogflow.v2.Agents.ExportAgent]: crate::client::Agents::export_agent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportAgentResponse {
    /// The exported agent.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub agent: std::option::Option<crate::model::export_agent_response::Agent>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExportAgentResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [agent][crate::model::ExportAgentResponse::agent].
    ///
    /// Note that all the setters affecting `agent` are mutually
    /// exclusive.
    pub fn set_agent<
        T: std::convert::Into<std::option::Option<crate::model::export_agent_response::Agent>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.agent = v.into();
        self
    }

    /// The value of [agent][crate::model::ExportAgentResponse::agent]
    /// if it holds a `AgentUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn agent_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.agent.as_ref().and_then(|v| match v {
            crate::model::export_agent_response::Agent::AgentUri(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [agent][crate::model::ExportAgentResponse::agent]
    /// if it holds a `AgentContent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn agent_content(&self) -> std::option::Option<&::bytes::Bytes> {
        #[allow(unreachable_patterns)]
        self.agent.as_ref().and_then(|v| match v {
            crate::model::export_agent_response::Agent::AgentContent(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [agent][crate::model::ExportAgentResponse::agent]
    /// to hold a `AgentUri`.
    ///
    /// Note that all the setters affecting `agent` are
    /// mutually exclusive.
    pub fn set_agent_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.agent = std::option::Option::Some(
            crate::model::export_agent_response::Agent::AgentUri(v.into()),
        );
        self
    }

    /// Sets the value of [agent][crate::model::ExportAgentResponse::agent]
    /// to hold a `AgentContent`.
    ///
    /// Note that all the setters affecting `agent` are
    /// mutually exclusive.
    pub fn set_agent_content<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.agent = std::option::Option::Some(
            crate::model::export_agent_response::Agent::AgentContent(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ExportAgentResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ExportAgentResponse"
    }
}

/// Defines additional types related to [ExportAgentResponse].
pub mod export_agent_response {
    #[allow(unused_imports)]
    use super::*;

    /// The exported agent.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Agent {
        /// The URI to a file containing the exported agent. This field is populated
        /// only if `agent_uri` is specified in `ExportAgentRequest`.
        AgentUri(std::string::String),
        /// Zip compressed raw byte content for agent.
        AgentContent(::bytes::Bytes),
    }
}

/// The request message for
/// [Agents.ImportAgent][google.cloud.dialogflow.v2.Agents.ImportAgent].
///
/// [google.cloud.dialogflow.v2.Agents.ImportAgent]: crate::client::Agents::import_agent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportAgentRequest {
    /// Required. The project that the agent to import is associated with.
    /// Format: `projects/<Project ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The agent to import.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub agent: std::option::Option<crate::model::import_agent_request::Agent>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportAgentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ImportAgentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [agent][crate::model::ImportAgentRequest::agent].
    ///
    /// Note that all the setters affecting `agent` are mutually
    /// exclusive.
    pub fn set_agent<
        T: std::convert::Into<std::option::Option<crate::model::import_agent_request::Agent>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.agent = v.into();
        self
    }

    /// The value of [agent][crate::model::ImportAgentRequest::agent]
    /// if it holds a `AgentUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn agent_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.agent.as_ref().and_then(|v| match v {
            crate::model::import_agent_request::Agent::AgentUri(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [agent][crate::model::ImportAgentRequest::agent]
    /// if it holds a `AgentContent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn agent_content(&self) -> std::option::Option<&::bytes::Bytes> {
        #[allow(unreachable_patterns)]
        self.agent.as_ref().and_then(|v| match v {
            crate::model::import_agent_request::Agent::AgentContent(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [agent][crate::model::ImportAgentRequest::agent]
    /// to hold a `AgentUri`.
    ///
    /// Note that all the setters affecting `agent` are
    /// mutually exclusive.
    pub fn set_agent_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.agent = std::option::Option::Some(
            crate::model::import_agent_request::Agent::AgentUri(v.into()),
        );
        self
    }

    /// Sets the value of [agent][crate::model::ImportAgentRequest::agent]
    /// to hold a `AgentContent`.
    ///
    /// Note that all the setters affecting `agent` are
    /// mutually exclusive.
    pub fn set_agent_content<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.agent = std::option::Option::Some(
            crate::model::import_agent_request::Agent::AgentContent(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ImportAgentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ImportAgentRequest"
    }
}

/// Defines additional types related to [ImportAgentRequest].
pub mod import_agent_request {
    #[allow(unused_imports)]
    use super::*;

    /// Required. The agent to import.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Agent {
        /// The URI to a Google Cloud Storage file containing the agent to import.
        /// Note: The URI must start with "gs://".
        ///
        /// Dialogflow performs a read operation for the Cloud Storage object
        /// on the caller's behalf, so your request authentication must
        /// have read permissions for the object. For more information, see
        /// [Dialogflow access
        /// control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
        AgentUri(std::string::String),
        /// Zip compressed raw byte content for agent.
        AgentContent(::bytes::Bytes),
    }
}

/// The request message for
/// [Agents.RestoreAgent][google.cloud.dialogflow.v2.Agents.RestoreAgent].
///
/// [google.cloud.dialogflow.v2.Agents.RestoreAgent]: crate::client::Agents::restore_agent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RestoreAgentRequest {
    /// Required. The project that the agent to restore is associated with.
    /// Format: `projects/<Project ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The agent to restore.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub agent: std::option::Option<crate::model::restore_agent_request::Agent>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RestoreAgentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::RestoreAgentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [agent][crate::model::RestoreAgentRequest::agent].
    ///
    /// Note that all the setters affecting `agent` are mutually
    /// exclusive.
    pub fn set_agent<
        T: std::convert::Into<std::option::Option<crate::model::restore_agent_request::Agent>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.agent = v.into();
        self
    }

    /// The value of [agent][crate::model::RestoreAgentRequest::agent]
    /// if it holds a `AgentUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn agent_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.agent.as_ref().and_then(|v| match v {
            crate::model::restore_agent_request::Agent::AgentUri(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [agent][crate::model::RestoreAgentRequest::agent]
    /// if it holds a `AgentContent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn agent_content(&self) -> std::option::Option<&::bytes::Bytes> {
        #[allow(unreachable_patterns)]
        self.agent.as_ref().and_then(|v| match v {
            crate::model::restore_agent_request::Agent::AgentContent(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [agent][crate::model::RestoreAgentRequest::agent]
    /// to hold a `AgentUri`.
    ///
    /// Note that all the setters affecting `agent` are
    /// mutually exclusive.
    pub fn set_agent_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.agent = std::option::Option::Some(
            crate::model::restore_agent_request::Agent::AgentUri(v.into()),
        );
        self
    }

    /// Sets the value of [agent][crate::model::RestoreAgentRequest::agent]
    /// to hold a `AgentContent`.
    ///
    /// Note that all the setters affecting `agent` are
    /// mutually exclusive.
    pub fn set_agent_content<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.agent = std::option::Option::Some(
            crate::model::restore_agent_request::Agent::AgentContent(v.into()),
        );
        self
    }
}

impl wkt::message::Message for RestoreAgentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.RestoreAgentRequest"
    }
}

/// Defines additional types related to [RestoreAgentRequest].
pub mod restore_agent_request {
    #[allow(unused_imports)]
    use super::*;

    /// Required. The agent to restore.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Agent {
        /// The URI to a Google Cloud Storage file containing the agent to restore.
        /// Note: The URI must start with "gs://".
        ///
        /// Dialogflow performs a read operation for the Cloud Storage object
        /// on the caller's behalf, so your request authentication must
        /// have read permissions for the object. For more information, see
        /// [Dialogflow access
        /// control](https://cloud.google.com/dialogflow/cx/docs/concept/access-control#storage).
        AgentUri(std::string::String),
        /// Zip compressed raw byte content for agent.
        AgentContent(::bytes::Bytes),
    }
}

/// The request message for
/// [Agents.GetValidationResult][google.cloud.dialogflow.v2.Agents.GetValidationResult].
///
/// [google.cloud.dialogflow.v2.Agents.GetValidationResult]: crate::client::Agents::get_validation_result
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetValidationResultRequest {
    /// Required. The project that the agent is associated with.
    /// Format: `projects/<Project ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The language for which you want a validation result. If not
    /// specified, the agent's default language is used. [Many
    /// languages](https://cloud.google.com/dialogflow/docs/reference/language)
    /// are supported. Note: languages must be enabled in the agent before they can
    /// be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetValidationResultRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::GetValidationResultRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::GetValidationResultRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for GetValidationResultRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetValidationResultRequest"
    }
}

/// Answer records are records to manage answer history and feedbacks for
/// Dialogflow.
///
/// Currently, answer record includes:
///
/// - human agent assistant article suggestion
/// - human agent assistant faq article
///
/// It doesn't include:
///
/// - `DetectIntent` intent matching
/// - `DetectIntent` knowledge
///
/// Answer records are not related to the conversation history in the
/// Dialogflow Console. A Record is generated even when the end-user disables
/// conversation history in the console. Records are created when there's a human
/// agent assistant suggestion generated.
///
/// A typical workflow for customers provide feedback to an answer is:
///
/// . For human agent assistant, customers get suggestion via ListSuggestions
///   API. Together with the answers,
///   [AnswerRecord.name][google.cloud.dialogflow.v2.AnswerRecord.name] are
///   returned to the customers.
/// . The customer uses the
///   [AnswerRecord.name][google.cloud.dialogflow.v2.AnswerRecord.name] to call the
///   [AnswerRecords.UpdateAnswerRecord][google.cloud.dialogflow.v2.AnswerRecords.UpdateAnswerRecord]
///   method to send feedback about a specific answer that they believe is
///   wrong.
///
/// [google.cloud.dialogflow.v2.AnswerRecord.name]: crate::model::AnswerRecord::name
/// [google.cloud.dialogflow.v2.AnswerRecords.UpdateAnswerRecord]: crate::client::AnswerRecords::update_answer_record
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AnswerRecord {
    /// The unique identifier of this answer record.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/answerRecords/<Answer Record ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The AnswerFeedback for this record. You can set this with
    /// [AnswerRecords.UpdateAnswerRecord][google.cloud.dialogflow.v2.AnswerRecords.UpdateAnswerRecord]
    /// in order to give us feedback about this answer.
    ///
    /// [google.cloud.dialogflow.v2.AnswerRecords.UpdateAnswerRecord]: crate::client::AnswerRecords::update_answer_record
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub answer_feedback: std::option::Option<crate::model::AnswerFeedback>,

    /// The record for this answer.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub record: std::option::Option<crate::model::answer_record::Record>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AnswerRecord {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::AnswerRecord::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [answer_feedback][crate::model::AnswerRecord::answer_feedback].
    pub fn set_answer_feedback<
        T: std::convert::Into<std::option::Option<crate::model::AnswerFeedback>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.answer_feedback = v.into();
        self
    }

    /// Sets the value of [record][crate::model::AnswerRecord::record].
    ///
    /// Note that all the setters affecting `record` are mutually
    /// exclusive.
    pub fn set_record<
        T: std::convert::Into<std::option::Option<crate::model::answer_record::Record>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.record = v.into();
        self
    }

    /// The value of [record][crate::model::AnswerRecord::record]
    /// if it holds a `AgentAssistantRecord`, `None` if the field is not set or
    /// holds a different branch.
    pub fn agent_assistant_record(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::AgentAssistantRecord>> {
        #[allow(unreachable_patterns)]
        self.record.as_ref().and_then(|v| match v {
            crate::model::answer_record::Record::AgentAssistantRecord(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [record][crate::model::AnswerRecord::record]
    /// to hold a `AgentAssistantRecord`.
    ///
    /// Note that all the setters affecting `record` are
    /// mutually exclusive.
    pub fn set_agent_assistant_record<
        T: std::convert::Into<std::boxed::Box<crate::model::AgentAssistantRecord>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.record = std::option::Option::Some(
            crate::model::answer_record::Record::AgentAssistantRecord(v.into()),
        );
        self
    }
}

impl wkt::message::Message for AnswerRecord {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.AnswerRecord"
    }
}

/// Defines additional types related to [AnswerRecord].
pub mod answer_record {
    #[allow(unused_imports)]
    use super::*;

    /// The record for this answer.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Record {
        /// Output only. The record for human agent assistant.
        AgentAssistantRecord(std::boxed::Box<crate::model::AgentAssistantRecord>),
    }
}

/// Request message for
/// [AnswerRecords.ListAnswerRecords][google.cloud.dialogflow.v2.AnswerRecords.ListAnswerRecords].
///
/// [google.cloud.dialogflow.v2.AnswerRecords.ListAnswerRecords]: crate::client::AnswerRecords::list_answer_records
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListAnswerRecordsRequest {
    /// Required. The project to list all answer records for in reverse
    /// chronological order. Format: `projects/<Project ID>/locations/<Location
    /// ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Filters to restrict results to specific answer records. The
    /// expression has the following syntax:
    ///
    /// ```norust
    /// <field> <operator> <value> [AND <field> <operator> <value>] ...
    /// ```
    ///
    /// The following fields and operators are supported:
    ///
    /// * conversation_id with equals(=) operator
    ///
    /// Examples:
    ///
    /// * `conversation_id=bar` matches answer records in the
    ///   `projects/foo/locations/global/conversations/bar` conversation
    ///   (assuming the parent is `projects/foo/locations/global`).
    ///
    /// For more information about filtering, see
    /// [API Filtering](https://aip.dev/160).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. The maximum number of records to return in a single page.
    /// The server may return fewer records than this. If unspecified, we use 10.
    /// The maximum is 100.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// Optional. The
    /// [ListAnswerRecordsResponse.next_page_token][google.cloud.dialogflow.v2.ListAnswerRecordsResponse.next_page_token]
    /// value returned from a previous list request used to continue listing on
    /// the next page.
    ///
    /// [google.cloud.dialogflow.v2.ListAnswerRecordsResponse.next_page_token]: crate::model::ListAnswerRecordsResponse::next_page_token
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListAnswerRecordsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListAnswerRecordsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListAnswerRecordsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListAnswerRecordsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListAnswerRecordsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListAnswerRecordsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListAnswerRecordsRequest"
    }
}

/// Response message for
/// [AnswerRecords.ListAnswerRecords][google.cloud.dialogflow.v2.AnswerRecords.ListAnswerRecords].
///
/// [google.cloud.dialogflow.v2.AnswerRecords.ListAnswerRecords]: crate::client::AnswerRecords::list_answer_records
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListAnswerRecordsResponse {
    /// The list of answer records.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub answer_records: std::vec::Vec<crate::model::AnswerRecord>,

    /// A token to retrieve next page of results. Or empty if there are no more
    /// results.
    /// Pass this value in the
    /// [ListAnswerRecordsRequest.page_token][google.cloud.dialogflow.v2.ListAnswerRecordsRequest.page_token]
    /// field in the subsequent call to `ListAnswerRecords` method to retrieve the
    /// next page of results.
    ///
    /// [google.cloud.dialogflow.v2.ListAnswerRecordsRequest.page_token]: crate::model::ListAnswerRecordsRequest::page_token
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListAnswerRecordsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListAnswerRecordsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [answer_records][crate::model::ListAnswerRecordsResponse::answer_records].
    pub fn set_answer_records<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::AnswerRecord>,
    {
        use std::iter::Iterator;
        self.answer_records = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListAnswerRecordsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListAnswerRecordsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListAnswerRecordsResponse {
    type PageItem = crate::model::AnswerRecord;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.answer_records
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request message for
/// [AnswerRecords.UpdateAnswerRecord][google.cloud.dialogflow.v2.AnswerRecords.UpdateAnswerRecord].
///
/// [google.cloud.dialogflow.v2.AnswerRecords.UpdateAnswerRecord]: crate::client::AnswerRecords::update_answer_record
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateAnswerRecordRequest {
    /// Required. Answer record to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub answer_record: std::option::Option<crate::model::AnswerRecord>,

    /// Required. The mask to control which fields get updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateAnswerRecordRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [answer_record][crate::model::UpdateAnswerRecordRequest::answer_record].
    pub fn set_answer_record<
        T: std::convert::Into<std::option::Option<crate::model::AnswerRecord>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.answer_record = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateAnswerRecordRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateAnswerRecordRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.UpdateAnswerRecordRequest"
    }
}

/// Represents feedback the customer has about the quality & correctness of a
/// certain answer in a conversation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AnswerFeedback {
    /// The correctness level of the specific answer.
    pub correctness_level: crate::model::answer_feedback::CorrectnessLevel,

    /// Indicates whether the answer/item was clicked by the human agent
    /// or not. Default to false.
    /// For knowledge search and knowledge assist, the answer record is considered
    /// to be clicked if the answer was copied or any URI was clicked.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub clicked: bool,

    /// Time when the answer/item was clicked.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub click_time: std::option::Option<wkt::Timestamp>,

    /// Indicates whether the answer/item was displayed to the human
    /// agent in the agent desktop UI. Default to false.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub displayed: bool,

    /// Time when the answer/item was displayed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub display_time: std::option::Option<wkt::Timestamp>,

    /// Normally, detail feedback is provided when answer is not fully correct.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub detail_feedback: std::option::Option<crate::model::answer_feedback::DetailFeedback>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AnswerFeedback {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [correctness_level][crate::model::AnswerFeedback::correctness_level].
    pub fn set_correctness_level<
        T: std::convert::Into<crate::model::answer_feedback::CorrectnessLevel>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.correctness_level = v.into();
        self
    }

    /// Sets the value of [clicked][crate::model::AnswerFeedback::clicked].
    pub fn set_clicked<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.clicked = v.into();
        self
    }

    /// Sets the value of [click_time][crate::model::AnswerFeedback::click_time].
    pub fn set_click_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.click_time = v.into();
        self
    }

    /// Sets the value of [displayed][crate::model::AnswerFeedback::displayed].
    pub fn set_displayed<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.displayed = v.into();
        self
    }

    /// Sets the value of [display_time][crate::model::AnswerFeedback::display_time].
    pub fn set_display_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.display_time = v.into();
        self
    }

    /// Sets the value of [detail_feedback][crate::model::AnswerFeedback::detail_feedback].
    ///
    /// Note that all the setters affecting `detail_feedback` are mutually
    /// exclusive.
    pub fn set_detail_feedback<
        T: std::convert::Into<std::option::Option<crate::model::answer_feedback::DetailFeedback>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.detail_feedback = v.into();
        self
    }

    /// The value of [detail_feedback][crate::model::AnswerFeedback::detail_feedback]
    /// if it holds a `AgentAssistantDetailFeedback`, `None` if the field is not set or
    /// holds a different branch.
    pub fn agent_assistant_detail_feedback(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::AgentAssistantFeedback>> {
        #[allow(unreachable_patterns)]
        self.detail_feedback.as_ref().and_then(|v| match v {
            crate::model::answer_feedback::DetailFeedback::AgentAssistantDetailFeedback(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [detail_feedback][crate::model::AnswerFeedback::detail_feedback]
    /// to hold a `AgentAssistantDetailFeedback`.
    ///
    /// Note that all the setters affecting `detail_feedback` are
    /// mutually exclusive.
    pub fn set_agent_assistant_detail_feedback<
        T: std::convert::Into<std::boxed::Box<crate::model::AgentAssistantFeedback>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.detail_feedback = std::option::Option::Some(
            crate::model::answer_feedback::DetailFeedback::AgentAssistantDetailFeedback(v.into()),
        );
        self
    }
}

impl wkt::message::Message for AnswerFeedback {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.AnswerFeedback"
    }
}

/// Defines additional types related to [AnswerFeedback].
pub mod answer_feedback {
    #[allow(unused_imports)]
    use super::*;

    /// The correctness level of an answer.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum CorrectnessLevel {
        /// Correctness level unspecified.
        Unspecified,
        /// Answer is totally wrong.
        NotCorrect,
        /// Answer is partially correct.
        PartiallyCorrect,
        /// Answer is fully correct.
        FullyCorrect,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [CorrectnessLevel::value] or
        /// [CorrectnessLevel::name].
        UnknownValue(correctness_level::UnknownValue),
    }

    #[doc(hidden)]
    pub mod correctness_level {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl CorrectnessLevel {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::NotCorrect => std::option::Option::Some(1),
                Self::PartiallyCorrect => std::option::Option::Some(2),
                Self::FullyCorrect => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("CORRECTNESS_LEVEL_UNSPECIFIED"),
                Self::NotCorrect => std::option::Option::Some("NOT_CORRECT"),
                Self::PartiallyCorrect => std::option::Option::Some("PARTIALLY_CORRECT"),
                Self::FullyCorrect => std::option::Option::Some("FULLY_CORRECT"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for CorrectnessLevel {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for CorrectnessLevel {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for CorrectnessLevel {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::NotCorrect,
                2 => Self::PartiallyCorrect,
                3 => Self::FullyCorrect,
                _ => Self::UnknownValue(correctness_level::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for CorrectnessLevel {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "CORRECTNESS_LEVEL_UNSPECIFIED" => Self::Unspecified,
                "NOT_CORRECT" => Self::NotCorrect,
                "PARTIALLY_CORRECT" => Self::PartiallyCorrect,
                "FULLY_CORRECT" => Self::FullyCorrect,
                _ => Self::UnknownValue(correctness_level::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for CorrectnessLevel {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::NotCorrect => serializer.serialize_i32(1),
                Self::PartiallyCorrect => serializer.serialize_i32(2),
                Self::FullyCorrect => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for CorrectnessLevel {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<CorrectnessLevel>::new(
                ".google.cloud.dialogflow.v2.AnswerFeedback.CorrectnessLevel",
            ))
        }
    }

    /// Normally, detail feedback is provided when answer is not fully correct.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum DetailFeedback {
        /// Detail feedback of agent assist suggestions.
        AgentAssistantDetailFeedback(std::boxed::Box<crate::model::AgentAssistantFeedback>),
    }
}

/// Detail feedback of Agent Assist result.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AgentAssistantFeedback {
    /// Optional. Whether or not the suggested answer is relevant.
    ///
    /// For example:
    ///
    /// * Query: "Can I change my mailing address?"
    /// * Suggested document says: "Items must be returned/exchanged within 60
    ///   days of the purchase date."
    /// * [answer_relevance][google.cloud.dialogflow.v2.AgentAssistantFeedback.answer_relevance]: [AnswerRelevance.IRRELEVANT][google.cloud.dialogflow.v2.AgentAssistantFeedback.AnswerRelevance.IRRELEVANT]
    ///
    /// [google.cloud.dialogflow.v2.AgentAssistantFeedback.AnswerRelevance.IRRELEVANT]: crate::model::agent_assistant_feedback::AnswerRelevance::Irrelevant
    /// [google.cloud.dialogflow.v2.AgentAssistantFeedback.answer_relevance]: crate::model::AgentAssistantFeedback::answer_relevance
    pub answer_relevance: crate::model::agent_assistant_feedback::AnswerRelevance,

    /// Optional. Whether or not the information in the document is correct.
    ///
    /// For example:
    ///
    /// * Query: "Can I return the package in 2 days once received?"
    /// * Suggested document says: "Items must be returned/exchanged within 60
    ///   days of the purchase date."
    /// * Ground truth: "No return or exchange is allowed."
    /// * [document_correctness][google.cloud.dialogflow.v2.AgentAssistantFeedback.document_correctness]: [INCORRECT][google.cloud.dialogflow.v2.AgentAssistantFeedback.DocumentCorrectness.INCORRECT]
    ///
    /// [google.cloud.dialogflow.v2.AgentAssistantFeedback.DocumentCorrectness.INCORRECT]: crate::model::agent_assistant_feedback::DocumentCorrectness::Incorrect
    /// [google.cloud.dialogflow.v2.AgentAssistantFeedback.document_correctness]: crate::model::AgentAssistantFeedback::document_correctness
    pub document_correctness: crate::model::agent_assistant_feedback::DocumentCorrectness,

    /// Optional. Whether or not the suggested document is efficient. For example,
    /// if the document is poorly written, hard to understand, hard to use or
    /// too long to find useful information,
    /// [document_efficiency][google.cloud.dialogflow.v2.AgentAssistantFeedback.document_efficiency]
    /// is
    /// [DocumentEfficiency.INEFFICIENT][google.cloud.dialogflow.v2.AgentAssistantFeedback.DocumentEfficiency.INEFFICIENT].
    ///
    /// [google.cloud.dialogflow.v2.AgentAssistantFeedback.DocumentEfficiency.INEFFICIENT]: crate::model::agent_assistant_feedback::DocumentEfficiency::Inefficient
    /// [google.cloud.dialogflow.v2.AgentAssistantFeedback.document_efficiency]: crate::model::AgentAssistantFeedback::document_efficiency
    pub document_efficiency: crate::model::agent_assistant_feedback::DocumentEfficiency,

    /// Optional. Feedback for conversation summarization.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub summarization_feedback:
        std::option::Option<crate::model::agent_assistant_feedback::SummarizationFeedback>,

    /// Optional. Feedback for knowledge search.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub knowledge_search_feedback:
        std::option::Option<crate::model::agent_assistant_feedback::KnowledgeSearchFeedback>,

    /// Optional. Feedback for knowledge assist.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub knowledge_assist_feedback:
        std::option::Option<crate::model::agent_assistant_feedback::KnowledgeAssistFeedback>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AgentAssistantFeedback {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [answer_relevance][crate::model::AgentAssistantFeedback::answer_relevance].
    pub fn set_answer_relevance<
        T: std::convert::Into<crate::model::agent_assistant_feedback::AnswerRelevance>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.answer_relevance = v.into();
        self
    }

    /// Sets the value of [document_correctness][crate::model::AgentAssistantFeedback::document_correctness].
    pub fn set_document_correctness<
        T: std::convert::Into<crate::model::agent_assistant_feedback::DocumentCorrectness>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.document_correctness = v.into();
        self
    }

    /// Sets the value of [document_efficiency][crate::model::AgentAssistantFeedback::document_efficiency].
    pub fn set_document_efficiency<
        T: std::convert::Into<crate::model::agent_assistant_feedback::DocumentEfficiency>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.document_efficiency = v.into();
        self
    }

    /// Sets the value of [summarization_feedback][crate::model::AgentAssistantFeedback::summarization_feedback].
    pub fn set_summarization_feedback<
        T: std::convert::Into<
                std::option::Option<crate::model::agent_assistant_feedback::SummarizationFeedback>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.summarization_feedback = v.into();
        self
    }

    /// Sets the value of [knowledge_search_feedback][crate::model::AgentAssistantFeedback::knowledge_search_feedback].
    pub fn set_knowledge_search_feedback<
        T: std::convert::Into<
                std::option::Option<
                    crate::model::agent_assistant_feedback::KnowledgeSearchFeedback,
                >,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.knowledge_search_feedback = v.into();
        self
    }

    /// Sets the value of [knowledge_assist_feedback][crate::model::AgentAssistantFeedback::knowledge_assist_feedback].
    pub fn set_knowledge_assist_feedback<
        T: std::convert::Into<
                std::option::Option<
                    crate::model::agent_assistant_feedback::KnowledgeAssistFeedback,
                >,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.knowledge_assist_feedback = v.into();
        self
    }
}

impl wkt::message::Message for AgentAssistantFeedback {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.AgentAssistantFeedback"
    }
}

/// Defines additional types related to [AgentAssistantFeedback].
pub mod agent_assistant_feedback {
    #[allow(unused_imports)]
    use super::*;

    /// Feedback for conversation summarization.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SummarizationFeedback {
        /// Timestamp when composing of the summary starts.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub start_time: std::option::Option<wkt::Timestamp>,

        /// Timestamp when the summary was submitted.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub submit_time: std::option::Option<wkt::Timestamp>,

        /// Text of actual submitted summary.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub summary_text: std::string::String,

        /// Optional. Actual text sections of submitted summary.
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub text_sections: std::collections::HashMap<std::string::String, std::string::String>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SummarizationFeedback {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [start_time][crate::model::agent_assistant_feedback::SummarizationFeedback::start_time].
        pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
            mut self,
            v: T,
        ) -> Self {
            self.start_time = v.into();
            self
        }

        /// Sets the value of [submit_time][crate::model::agent_assistant_feedback::SummarizationFeedback::submit_time].
        pub fn set_submit_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
            mut self,
            v: T,
        ) -> Self {
            self.submit_time = v.into();
            self
        }

        /// Sets the value of [summary_text][crate::model::agent_assistant_feedback::SummarizationFeedback::summary_text].
        pub fn set_summary_text<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.summary_text = v.into();
            self
        }

        /// Sets the value of [text_sections][crate::model::agent_assistant_feedback::SummarizationFeedback::text_sections].
        pub fn set_text_sections<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.text_sections = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl wkt::message::Message for SummarizationFeedback {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.AgentAssistantFeedback.SummarizationFeedback"
        }
    }

    /// Feedback for knowledge search.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct KnowledgeSearchFeedback {
        /// Whether the answer was copied by the human agent or not.
        /// If the value is set to be true,
        /// [AnswerFeedback.clicked][google.cloud.dialogflow.v2.AnswerFeedback.clicked]
        /// will be updated to be true.
        ///
        /// [google.cloud.dialogflow.v2.AnswerFeedback.clicked]: crate::model::AnswerFeedback::clicked
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub answer_copied: bool,

        /// The URIs clicked by the human agent. The value is appended for each
        /// [UpdateAnswerRecordRequest][google.cloud.dialogflow.v2.UpdateAnswerRecordRequest].
        /// If the value is not empty,
        /// [AnswerFeedback.clicked][google.cloud.dialogflow.v2.AnswerFeedback.clicked]
        /// will be updated to be true.
        ///
        /// [google.cloud.dialogflow.v2.AnswerFeedback.clicked]: crate::model::AnswerFeedback::clicked
        /// [google.cloud.dialogflow.v2.UpdateAnswerRecordRequest]: crate::model::UpdateAnswerRecordRequest
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub clicked_uris: std::vec::Vec<std::string::String>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl KnowledgeSearchFeedback {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [answer_copied][crate::model::agent_assistant_feedback::KnowledgeSearchFeedback::answer_copied].
        pub fn set_answer_copied<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.answer_copied = v.into();
            self
        }

        /// Sets the value of [clicked_uris][crate::model::agent_assistant_feedback::KnowledgeSearchFeedback::clicked_uris].
        pub fn set_clicked_uris<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.clicked_uris = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for KnowledgeSearchFeedback {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.AgentAssistantFeedback.KnowledgeSearchFeedback"
        }
    }

    /// Feedback for knowledge assist.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct KnowledgeAssistFeedback {
        /// Whether the suggested answer was copied by the human agent.
        /// If the value is set to be true,
        /// [AnswerFeedback.clicked][google.cloud.dialogflow.v2.AnswerFeedback.clicked]
        /// will be updated to be true.
        ///
        /// [google.cloud.dialogflow.v2.AnswerFeedback.clicked]: crate::model::AnswerFeedback::clicked
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub answer_copied: bool,

        /// The URIs clicked by the human agent. The value is appended for each
        /// UpdateAnswerRecordRequest.
        /// If the value is not empty,
        /// [AnswerFeedback.clicked][google.cloud.dialogflow.v2.AnswerFeedback.clicked]
        /// will be updated to be true.
        ///
        /// [google.cloud.dialogflow.v2.AnswerFeedback.clicked]: crate::model::AnswerFeedback::clicked
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub clicked_uris: std::vec::Vec<std::string::String>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl KnowledgeAssistFeedback {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [answer_copied][crate::model::agent_assistant_feedback::KnowledgeAssistFeedback::answer_copied].
        pub fn set_answer_copied<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.answer_copied = v.into();
            self
        }

        /// Sets the value of [clicked_uris][crate::model::agent_assistant_feedback::KnowledgeAssistFeedback::clicked_uris].
        pub fn set_clicked_uris<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.clicked_uris = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for KnowledgeAssistFeedback {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.AgentAssistantFeedback.KnowledgeAssistFeedback"
        }
    }

    /// Relevance of an answer.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum AnswerRelevance {
        /// Answer relevance unspecified.
        Unspecified,
        /// Answer is irrelevant to query.
        Irrelevant,
        /// Answer is relevant to query.
        Relevant,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [AnswerRelevance::value] or
        /// [AnswerRelevance::name].
        UnknownValue(answer_relevance::UnknownValue),
    }

    #[doc(hidden)]
    pub mod answer_relevance {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl AnswerRelevance {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Irrelevant => std::option::Option::Some(1),
                Self::Relevant => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("ANSWER_RELEVANCE_UNSPECIFIED"),
                Self::Irrelevant => std::option::Option::Some("IRRELEVANT"),
                Self::Relevant => std::option::Option::Some("RELEVANT"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for AnswerRelevance {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for AnswerRelevance {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for AnswerRelevance {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Irrelevant,
                2 => Self::Relevant,
                _ => Self::UnknownValue(answer_relevance::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for AnswerRelevance {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "ANSWER_RELEVANCE_UNSPECIFIED" => Self::Unspecified,
                "IRRELEVANT" => Self::Irrelevant,
                "RELEVANT" => Self::Relevant,
                _ => Self::UnknownValue(answer_relevance::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for AnswerRelevance {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Irrelevant => serializer.serialize_i32(1),
                Self::Relevant => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for AnswerRelevance {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<AnswerRelevance>::new(
                ".google.cloud.dialogflow.v2.AgentAssistantFeedback.AnswerRelevance",
            ))
        }
    }

    /// Correctness of document.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum DocumentCorrectness {
        /// Document correctness unspecified.
        Unspecified,
        /// Information in document is incorrect.
        Incorrect,
        /// Information in document is correct.
        Correct,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [DocumentCorrectness::value] or
        /// [DocumentCorrectness::name].
        UnknownValue(document_correctness::UnknownValue),
    }

    #[doc(hidden)]
    pub mod document_correctness {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl DocumentCorrectness {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Incorrect => std::option::Option::Some(1),
                Self::Correct => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("DOCUMENT_CORRECTNESS_UNSPECIFIED"),
                Self::Incorrect => std::option::Option::Some("INCORRECT"),
                Self::Correct => std::option::Option::Some("CORRECT"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for DocumentCorrectness {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for DocumentCorrectness {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for DocumentCorrectness {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Incorrect,
                2 => Self::Correct,
                _ => Self::UnknownValue(document_correctness::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for DocumentCorrectness {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "DOCUMENT_CORRECTNESS_UNSPECIFIED" => Self::Unspecified,
                "INCORRECT" => Self::Incorrect,
                "CORRECT" => Self::Correct,
                _ => Self::UnknownValue(document_correctness::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for DocumentCorrectness {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Incorrect => serializer.serialize_i32(1),
                Self::Correct => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for DocumentCorrectness {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<DocumentCorrectness>::new(
                ".google.cloud.dialogflow.v2.AgentAssistantFeedback.DocumentCorrectness",
            ))
        }
    }

    /// Efficiency of document.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum DocumentEfficiency {
        /// Document efficiency unspecified.
        Unspecified,
        /// Document is inefficient.
        Inefficient,
        /// Document is efficient.
        Efficient,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [DocumentEfficiency::value] or
        /// [DocumentEfficiency::name].
        UnknownValue(document_efficiency::UnknownValue),
    }

    #[doc(hidden)]
    pub mod document_efficiency {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl DocumentEfficiency {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Inefficient => std::option::Option::Some(1),
                Self::Efficient => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("DOCUMENT_EFFICIENCY_UNSPECIFIED"),
                Self::Inefficient => std::option::Option::Some("INEFFICIENT"),
                Self::Efficient => std::option::Option::Some("EFFICIENT"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for DocumentEfficiency {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for DocumentEfficiency {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for DocumentEfficiency {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Inefficient,
                2 => Self::Efficient,
                _ => Self::UnknownValue(document_efficiency::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for DocumentEfficiency {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "DOCUMENT_EFFICIENCY_UNSPECIFIED" => Self::Unspecified,
                "INEFFICIENT" => Self::Inefficient,
                "EFFICIENT" => Self::Efficient,
                _ => Self::UnknownValue(document_efficiency::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for DocumentEfficiency {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Inefficient => serializer.serialize_i32(1),
                Self::Efficient => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for DocumentEfficiency {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<DocumentEfficiency>::new(
                ".google.cloud.dialogflow.v2.AgentAssistantFeedback.DocumentEfficiency",
            ))
        }
    }
}

/// Represents a record of a human agent assist answer.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AgentAssistantRecord {
    /// Output only. The agent assist answer.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub answer: std::option::Option<crate::model::agent_assistant_record::Answer>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AgentAssistantRecord {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [answer][crate::model::AgentAssistantRecord::answer].
    ///
    /// Note that all the setters affecting `answer` are mutually
    /// exclusive.
    pub fn set_answer<
        T: std::convert::Into<std::option::Option<crate::model::agent_assistant_record::Answer>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.answer = v.into();
        self
    }

    /// The value of [answer][crate::model::AgentAssistantRecord::answer]
    /// if it holds a `ArticleSuggestionAnswer`, `None` if the field is not set or
    /// holds a different branch.
    pub fn article_suggestion_answer(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::ArticleAnswer>> {
        #[allow(unreachable_patterns)]
        self.answer.as_ref().and_then(|v| match v {
            crate::model::agent_assistant_record::Answer::ArticleSuggestionAnswer(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [answer][crate::model::AgentAssistantRecord::answer]
    /// if it holds a `FaqAnswer`, `None` if the field is not set or
    /// holds a different branch.
    pub fn faq_answer(&self) -> std::option::Option<&std::boxed::Box<crate::model::FaqAnswer>> {
        #[allow(unreachable_patterns)]
        self.answer.as_ref().and_then(|v| match v {
            crate::model::agent_assistant_record::Answer::FaqAnswer(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [answer][crate::model::AgentAssistantRecord::answer]
    /// if it holds a `DialogflowAssistAnswer`, `None` if the field is not set or
    /// holds a different branch.
    pub fn dialogflow_assist_answer(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::DialogflowAssistAnswer>> {
        #[allow(unreachable_patterns)]
        self.answer.as_ref().and_then(|v| match v {
            crate::model::agent_assistant_record::Answer::DialogflowAssistAnswer(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [answer][crate::model::AgentAssistantRecord::answer]
    /// to hold a `ArticleSuggestionAnswer`.
    ///
    /// Note that all the setters affecting `answer` are
    /// mutually exclusive.
    pub fn set_article_suggestion_answer<
        T: std::convert::Into<std::boxed::Box<crate::model::ArticleAnswer>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.answer = std::option::Option::Some(
            crate::model::agent_assistant_record::Answer::ArticleSuggestionAnswer(v.into()),
        );
        self
    }

    /// Sets the value of [answer][crate::model::AgentAssistantRecord::answer]
    /// to hold a `FaqAnswer`.
    ///
    /// Note that all the setters affecting `answer` are
    /// mutually exclusive.
    pub fn set_faq_answer<T: std::convert::Into<std::boxed::Box<crate::model::FaqAnswer>>>(
        mut self,
        v: T,
    ) -> Self {
        self.answer = std::option::Option::Some(
            crate::model::agent_assistant_record::Answer::FaqAnswer(v.into()),
        );
        self
    }

    /// Sets the value of [answer][crate::model::AgentAssistantRecord::answer]
    /// to hold a `DialogflowAssistAnswer`.
    ///
    /// Note that all the setters affecting `answer` are
    /// mutually exclusive.
    pub fn set_dialogflow_assist_answer<
        T: std::convert::Into<std::boxed::Box<crate::model::DialogflowAssistAnswer>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.answer = std::option::Option::Some(
            crate::model::agent_assistant_record::Answer::DialogflowAssistAnswer(v.into()),
        );
        self
    }
}

impl wkt::message::Message for AgentAssistantRecord {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.AgentAssistantRecord"
    }
}

/// Defines additional types related to [AgentAssistantRecord].
pub mod agent_assistant_record {
    #[allow(unused_imports)]
    use super::*;

    /// Output only. The agent assist answer.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Answer {
        /// Output only. The article suggestion answer.
        ArticleSuggestionAnswer(std::boxed::Box<crate::model::ArticleAnswer>),
        /// Output only. The FAQ answer.
        FaqAnswer(std::boxed::Box<crate::model::FaqAnswer>),
        /// Output only. Dialogflow assist answer.
        DialogflowAssistAnswer(std::boxed::Box<crate::model::DialogflowAssistAnswer>),
    }
}

/// Hints for the speech recognizer to help with recognition in a specific
/// conversation state.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SpeechContext {
    /// Optional. A list of strings containing words and phrases that the speech
    /// recognizer should recognize with higher likelihood.
    ///
    /// This list can be used to:
    ///
    /// * improve accuracy for words and phrases you expect the user to say,
    ///   e.g. typical commands for your Dialogflow agent
    /// * add additional words to the speech recognizer vocabulary
    /// * ...
    ///
    /// See the [Cloud Speech
    /// documentation](https://cloud.google.com/speech-to-text/quotas) for usage
    /// limits.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub phrases: std::vec::Vec<std::string::String>,

    /// Optional. Boost for this context compared to other contexts:
    ///
    /// * If the boost is positive, Dialogflow will increase the probability that
    ///   the phrases in this context are recognized over similar sounding phrases.
    /// * If the boost is unspecified or non-positive, Dialogflow will not apply
    ///   any boost.
    ///
    /// Dialogflow recommends that you use boosts in the range (0, 20] and that you
    /// find a value that fits your use case with binary search.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub boost: f32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SpeechContext {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [boost][crate::model::SpeechContext::boost].
    pub fn set_boost<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.boost = v.into();
        self
    }

    /// Sets the value of [phrases][crate::model::SpeechContext::phrases].
    pub fn set_phrases<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.phrases = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SpeechContext {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SpeechContext"
    }
}

/// Information for a word recognized by the speech recognizer.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SpeechWordInfo {
    /// The word this info is for.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub word: std::string::String,

    /// Time offset relative to the beginning of the audio that corresponds to the
    /// start of the spoken word. This is an experimental feature and the accuracy
    /// of the time offset can vary.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_offset: std::option::Option<wkt::Duration>,

    /// Time offset relative to the beginning of the audio that corresponds to the
    /// end of the spoken word. This is an experimental feature and the accuracy of
    /// the time offset can vary.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_offset: std::option::Option<wkt::Duration>,

    /// The Speech confidence between 0.0 and 1.0 for this word. A higher number
    /// indicates an estimated greater likelihood that the recognized word is
    /// correct. The default of 0.0 is a sentinel value indicating that confidence
    /// was not set.
    ///
    /// This field is not guaranteed to be fully stable over time for the same
    /// audio input. Users should also not rely on it to always be provided.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub confidence: f32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SpeechWordInfo {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [word][crate::model::SpeechWordInfo::word].
    pub fn set_word<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.word = v.into();
        self
    }

    /// Sets the value of [start_offset][crate::model::SpeechWordInfo::start_offset].
    pub fn set_start_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_offset = v.into();
        self
    }

    /// Sets the value of [end_offset][crate::model::SpeechWordInfo::end_offset].
    pub fn set_end_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_offset = v.into();
        self
    }

    /// Sets the value of [confidence][crate::model::SpeechWordInfo::confidence].
    pub fn set_confidence<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.confidence = v.into();
        self
    }
}

impl wkt::message::Message for SpeechWordInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SpeechWordInfo"
    }
}

/// Instructs the speech recognizer how to process the audio content.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InputAudioConfig {
    /// Required. Audio encoding of the audio content to process.
    pub audio_encoding: crate::model::AudioEncoding,

    /// Required. Sample rate (in Hertz) of the audio content sent in the query.
    /// Refer to [Cloud Speech API
    /// documentation](https://cloud.google.com/speech-to-text/docs/basics) for
    /// more details.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub sample_rate_hertz: i32,

    /// Required. The language of the supplied audio. Dialogflow does not do
    /// translations. See [Language
    /// Support](https://cloud.google.com/dialogflow/docs/reference/language)
    /// for a list of the currently supported language codes. Note that queries in
    /// the same session do not necessarily need to specify the same language.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// If `true`, Dialogflow returns
    /// [SpeechWordInfo][google.cloud.dialogflow.v2.SpeechWordInfo] in
    /// [StreamingRecognitionResult][google.cloud.dialogflow.v2.StreamingRecognitionResult]
    /// with information about the recognized speech words, e.g. start and end time
    /// offsets. If false or unspecified, Speech doesn't return any word-level
    /// information.
    ///
    /// [google.cloud.dialogflow.v2.SpeechWordInfo]: crate::model::SpeechWordInfo
    /// [google.cloud.dialogflow.v2.StreamingRecognitionResult]: crate::model::StreamingRecognitionResult
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_word_info: bool,

    /// A list of strings containing words and phrases that the speech
    /// recognizer should recognize with higher likelihood.
    ///
    /// See [the Cloud Speech
    /// documentation](https://cloud.google.com/speech-to-text/docs/basics#phrase-hints)
    /// for more details.
    ///
    /// This field is deprecated. Please use [`speech_contexts`]() instead. If you
    /// specify both [`phrase_hints`]() and [`speech_contexts`](), Dialogflow will
    /// treat the [`phrase_hints`]() as a single additional [`SpeechContext`]().
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[deprecated]
    pub phrase_hints: std::vec::Vec<std::string::String>,

    /// Context information to assist speech recognition.
    ///
    /// See [the Cloud Speech
    /// documentation](https://cloud.google.com/speech-to-text/docs/basics#phrase-hints)
    /// for more details.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub speech_contexts: std::vec::Vec<crate::model::SpeechContext>,

    /// Optional. Which Speech model to select for the given request.
    /// For more information, see
    /// [Speech models](https://cloud.google.com/dialogflow/es/docs/speech-models).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub model: std::string::String,

    /// Which variant of the [Speech
    /// model][google.cloud.dialogflow.v2.InputAudioConfig.model] to use.
    ///
    /// [google.cloud.dialogflow.v2.InputAudioConfig.model]: crate::model::InputAudioConfig::model
    pub model_variant: crate::model::SpeechModelVariant,

    /// If `false` (default), recognition does not cease until the
    /// client closes the stream.
    /// If `true`, the recognizer will detect a single spoken utterance in input
    /// audio. Recognition ceases when it detects the audio's voice has
    /// stopped or paused. In this case, once a detected intent is received, the
    /// client should close the stream and start a new request with a new stream as
    /// needed.
    /// Note: This setting is relevant only for streaming methods.
    /// Note: When specified, InputAudioConfig.single_utterance takes precedence
    /// over StreamingDetectIntentRequest.single_utterance.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub single_utterance: bool,

    /// Only used in
    /// [Participants.AnalyzeContent][google.cloud.dialogflow.v2.Participants.AnalyzeContent]
    /// and
    /// [Participants.StreamingAnalyzeContent][google.cloud.dialogflow.v2.Participants.StreamingAnalyzeContent].
    /// If `false` and recognition doesn't return any result, trigger
    /// `NO_SPEECH_RECOGNIZED` event to Dialogflow agent.
    ///
    /// [google.cloud.dialogflow.v2.Participants.AnalyzeContent]: crate::client::Participants::analyze_content
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub disable_no_speech_recognized_event: bool,

    /// Enable automatic punctuation option at the speech backend.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_automatic_punctuation: bool,

    /// A collection of phrase set resources to use for speech adaptation.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub phrase_sets: std::vec::Vec<std::string::String>,

    /// If `true`, the request will opt out for STT conformer model migration.
    /// This field will be deprecated once force migration takes place in June
    /// 2024. Please refer to [Dialogflow ES Speech model
    /// migration](https://cloud.google.com/dialogflow/es/docs/speech-model-migration).
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub opt_out_conformer_model_migration: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl InputAudioConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [audio_encoding][crate::model::InputAudioConfig::audio_encoding].
    pub fn set_audio_encoding<T: std::convert::Into<crate::model::AudioEncoding>>(
        mut self,
        v: T,
    ) -> Self {
        self.audio_encoding = v.into();
        self
    }

    /// Sets the value of [sample_rate_hertz][crate::model::InputAudioConfig::sample_rate_hertz].
    pub fn set_sample_rate_hertz<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.sample_rate_hertz = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::InputAudioConfig::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [enable_word_info][crate::model::InputAudioConfig::enable_word_info].
    pub fn set_enable_word_info<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_word_info = v.into();
        self
    }

    /// Sets the value of [model][crate::model::InputAudioConfig::model].
    pub fn set_model<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.model = v.into();
        self
    }

    /// Sets the value of [model_variant][crate::model::InputAudioConfig::model_variant].
    pub fn set_model_variant<T: std::convert::Into<crate::model::SpeechModelVariant>>(
        mut self,
        v: T,
    ) -> Self {
        self.model_variant = v.into();
        self
    }

    /// Sets the value of [single_utterance][crate::model::InputAudioConfig::single_utterance].
    pub fn set_single_utterance<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.single_utterance = v.into();
        self
    }

    /// Sets the value of [disable_no_speech_recognized_event][crate::model::InputAudioConfig::disable_no_speech_recognized_event].
    pub fn set_disable_no_speech_recognized_event<T: std::convert::Into<bool>>(
        mut self,
        v: T,
    ) -> Self {
        self.disable_no_speech_recognized_event = v.into();
        self
    }

    /// Sets the value of [enable_automatic_punctuation][crate::model::InputAudioConfig::enable_automatic_punctuation].
    pub fn set_enable_automatic_punctuation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_automatic_punctuation = v.into();
        self
    }

    /// Sets the value of [opt_out_conformer_model_migration][crate::model::InputAudioConfig::opt_out_conformer_model_migration].
    pub fn set_opt_out_conformer_model_migration<T: std::convert::Into<bool>>(
        mut self,
        v: T,
    ) -> Self {
        self.opt_out_conformer_model_migration = v.into();
        self
    }

    /// Sets the value of [phrase_hints][crate::model::InputAudioConfig::phrase_hints].
    #[deprecated]
    pub fn set_phrase_hints<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.phrase_hints = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [speech_contexts][crate::model::InputAudioConfig::speech_contexts].
    pub fn set_speech_contexts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SpeechContext>,
    {
        use std::iter::Iterator;
        self.speech_contexts = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [phrase_sets][crate::model::InputAudioConfig::phrase_sets].
    pub fn set_phrase_sets<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.phrase_sets = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for InputAudioConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.InputAudioConfig"
    }
}

/// Description of which voice to use for speech synthesis.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct VoiceSelectionParams {
    /// Optional. The name of the voice. If not set, the service will choose a
    /// voice based on the other parameters such as language_code and
    /// [ssml_gender][google.cloud.dialogflow.v2.VoiceSelectionParams.ssml_gender].
    ///
    /// [google.cloud.dialogflow.v2.VoiceSelectionParams.ssml_gender]: crate::model::VoiceSelectionParams::ssml_gender
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. The preferred gender of the voice. If not set, the service will
    /// choose a voice based on the other parameters such as language_code and
    /// [name][google.cloud.dialogflow.v2.VoiceSelectionParams.name]. Note that
    /// this is only a preference, not requirement. If a voice of the appropriate
    /// gender is not available, the synthesizer should substitute a voice with a
    /// different gender rather than failing the request.
    ///
    /// [google.cloud.dialogflow.v2.VoiceSelectionParams.name]: crate::model::VoiceSelectionParams::name
    pub ssml_gender: crate::model::SsmlVoiceGender,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl VoiceSelectionParams {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::VoiceSelectionParams::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [ssml_gender][crate::model::VoiceSelectionParams::ssml_gender].
    pub fn set_ssml_gender<T: std::convert::Into<crate::model::SsmlVoiceGender>>(
        mut self,
        v: T,
    ) -> Self {
        self.ssml_gender = v.into();
        self
    }
}

impl wkt::message::Message for VoiceSelectionParams {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.VoiceSelectionParams"
    }
}

/// Configuration of how speech should be synthesized.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SynthesizeSpeechConfig {
    /// Optional. Speaking rate/speed, in the range [0.25, 4.0]. 1.0 is the normal
    /// native speed supported by the specific voice. 2.0 is twice as fast, and 0.5
    /// is half as fast. If unset(0.0), defaults to the native 1.0 speed. Any other
    /// values < 0.25 or > 4.0 will return an error.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub speaking_rate: f64,

    /// Optional. Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20
    /// semitones from the original pitch. -20 means decrease 20 semitones from the
    /// original pitch.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub pitch: f64,

    /// Optional. Volume gain (in dB) of the normal native volume supported by the
    /// specific voice, in the range [-96.0, 16.0]. If unset, or set to a value of
    /// 0.0 (dB), will play at normal native signal amplitude. A value of -6.0 (dB)
    /// will play at approximately half the amplitude of the normal native signal
    /// amplitude. A value of +6.0 (dB) will play at approximately twice the
    /// amplitude of the normal native signal amplitude. We strongly recommend not
    /// to exceed +10 (dB) as there's usually no effective increase in loudness for
    /// any value greater than that.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub volume_gain_db: f64,

    /// Optional. An identifier which selects 'audio effects' profiles that are
    /// applied on (post synthesized) text to speech. Effects are applied on top of
    /// each other in the order they are given.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub effects_profile_id: std::vec::Vec<std::string::String>,

    /// Optional. The desired voice of the synthesized audio.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub voice: std::option::Option<crate::model::VoiceSelectionParams>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SynthesizeSpeechConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [speaking_rate][crate::model::SynthesizeSpeechConfig::speaking_rate].
    pub fn set_speaking_rate<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.speaking_rate = v.into();
        self
    }

    /// Sets the value of [pitch][crate::model::SynthesizeSpeechConfig::pitch].
    pub fn set_pitch<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.pitch = v.into();
        self
    }

    /// Sets the value of [volume_gain_db][crate::model::SynthesizeSpeechConfig::volume_gain_db].
    pub fn set_volume_gain_db<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.volume_gain_db = v.into();
        self
    }

    /// Sets the value of [voice][crate::model::SynthesizeSpeechConfig::voice].
    pub fn set_voice<
        T: std::convert::Into<std::option::Option<crate::model::VoiceSelectionParams>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.voice = v.into();
        self
    }

    /// Sets the value of [effects_profile_id][crate::model::SynthesizeSpeechConfig::effects_profile_id].
    pub fn set_effects_profile_id<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.effects_profile_id = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SynthesizeSpeechConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SynthesizeSpeechConfig"
    }
}

/// Instructs the speech synthesizer on how to generate the output audio content.
/// If this audio config is supplied in a request, it overrides all existing
/// text-to-speech settings applied to the agent.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OutputAudioConfig {
    /// Required. Audio encoding of the synthesized audio content.
    pub audio_encoding: crate::model::OutputAudioEncoding,

    /// The synthesis sample rate (in hertz) for this audio. If not
    /// provided, then the synthesizer will use the default sample rate based on
    /// the audio encoding. If this is different from the voice's natural sample
    /// rate, then the synthesizer will honor this request by converting to the
    /// desired sample rate (which might result in worse audio quality).
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub sample_rate_hertz: i32,

    /// Configuration of how speech should be synthesized.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub synthesize_speech_config: std::option::Option<crate::model::SynthesizeSpeechConfig>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl OutputAudioConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [audio_encoding][crate::model::OutputAudioConfig::audio_encoding].
    pub fn set_audio_encoding<T: std::convert::Into<crate::model::OutputAudioEncoding>>(
        mut self,
        v: T,
    ) -> Self {
        self.audio_encoding = v.into();
        self
    }

    /// Sets the value of [sample_rate_hertz][crate::model::OutputAudioConfig::sample_rate_hertz].
    pub fn set_sample_rate_hertz<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.sample_rate_hertz = v.into();
        self
    }

    /// Sets the value of [synthesize_speech_config][crate::model::OutputAudioConfig::synthesize_speech_config].
    pub fn set_synthesize_speech_config<
        T: std::convert::Into<std::option::Option<crate::model::SynthesizeSpeechConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.synthesize_speech_config = v.into();
        self
    }
}

impl wkt::message::Message for OutputAudioConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.OutputAudioConfig"
    }
}

/// A wrapper of repeated TelephonyDtmf digits.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TelephonyDtmfEvents {
    /// A sequence of TelephonyDtmf digits.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub dtmf_events: std::vec::Vec<crate::model::TelephonyDtmf>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TelephonyDtmfEvents {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [dtmf_events][crate::model::TelephonyDtmfEvents::dtmf_events].
    pub fn set_dtmf_events<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TelephonyDtmf>,
    {
        use std::iter::Iterator;
        self.dtmf_events = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TelephonyDtmfEvents {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.TelephonyDtmfEvents"
    }
}

/// Configures speech transcription for
/// [ConversationProfile][google.cloud.dialogflow.v2.ConversationProfile].
///
/// [google.cloud.dialogflow.v2.ConversationProfile]: crate::model::ConversationProfile
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SpeechToTextConfig {
    /// The speech model used in speech to text.
    /// `SPEECH_MODEL_VARIANT_UNSPECIFIED`, `USE_BEST_AVAILABLE` will be treated as
    /// `USE_ENHANCED`. It can be overridden in
    /// [AnalyzeContentRequest][google.cloud.dialogflow.v2.AnalyzeContentRequest]
    /// and
    /// [StreamingAnalyzeContentRequest][google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest]
    /// request. If enhanced model variant is specified and an enhanced version of
    /// the specified model for the language does not exist, then it would emit an
    /// error.
    ///
    /// [google.cloud.dialogflow.v2.AnalyzeContentRequest]: crate::model::AnalyzeContentRequest
    /// [google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest]: crate::model::StreamingAnalyzeContentRequest
    pub speech_model_variant: crate::model::SpeechModelVariant,

    /// Which Speech model to select. Select the
    /// model best suited to your domain to get best results. If a model is not
    /// explicitly specified, then Dialogflow auto-selects a model based on other
    /// parameters in the SpeechToTextConfig and Agent settings.
    /// If enhanced speech model is enabled for the agent and an enhanced
    /// version of the specified model for the language does not exist, then the
    /// speech is recognized using the standard version of the specified model.
    /// Refer to
    /// [Cloud Speech API
    /// documentation](https://cloud.google.com/speech-to-text/docs/basics#select-model)
    /// for more details.
    /// If you specify a model, the following models typically have the best
    /// performance:
    ///
    /// - phone_call (best for Agent Assist and telephony)
    /// - latest_short (best for Dialogflow non-telephony)
    /// - command_and_search
    ///
    /// Leave this field unspecified to use
    /// [Agent Speech
    /// settings](https://cloud.google.com/dialogflow/cx/docs/concept/agent#settings-speech)
    /// for model selection.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub model: std::string::String,

    /// List of names of Cloud Speech phrase sets that are used for transcription.
    /// For phrase set limitations, please refer to [Cloud Speech API quotas and
    /// limits](https://cloud.google.com/speech-to-text/quotas#content).
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub phrase_sets: std::vec::Vec<std::string::String>,

    /// Audio encoding of the audio content to process.
    pub audio_encoding: crate::model::AudioEncoding,

    /// Sample rate (in Hertz) of the audio content sent in the query.
    /// Refer to [Cloud Speech API
    /// documentation](https://cloud.google.com/speech-to-text/docs/basics) for
    /// more details.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub sample_rate_hertz: i32,

    /// The language of the supplied audio. Dialogflow does not do
    /// translations. See [Language
    /// Support](https://cloud.google.com/dialogflow/docs/reference/language)
    /// for a list of the currently supported language codes. Note that queries in
    /// the same session do not necessarily need to specify the same language.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// If `true`, Dialogflow returns
    /// [SpeechWordInfo][google.cloud.dialogflow.v2.SpeechWordInfo] in
    /// [StreamingRecognitionResult][google.cloud.dialogflow.v2.StreamingRecognitionResult]
    /// with information about the recognized speech words, e.g. start and end time
    /// offsets. If false or unspecified, Speech doesn't return any word-level
    /// information.
    ///
    /// [google.cloud.dialogflow.v2.SpeechWordInfo]: crate::model::SpeechWordInfo
    /// [google.cloud.dialogflow.v2.StreamingRecognitionResult]: crate::model::StreamingRecognitionResult
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_word_info: bool,

    /// Use timeout based endpointing, interpreting endpointer sensitivity as
    /// seconds of timeout value.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub use_timeout_based_endpointing: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SpeechToTextConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [speech_model_variant][crate::model::SpeechToTextConfig::speech_model_variant].
    pub fn set_speech_model_variant<T: std::convert::Into<crate::model::SpeechModelVariant>>(
        mut self,
        v: T,
    ) -> Self {
        self.speech_model_variant = v.into();
        self
    }

    /// Sets the value of [model][crate::model::SpeechToTextConfig::model].
    pub fn set_model<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.model = v.into();
        self
    }

    /// Sets the value of [audio_encoding][crate::model::SpeechToTextConfig::audio_encoding].
    pub fn set_audio_encoding<T: std::convert::Into<crate::model::AudioEncoding>>(
        mut self,
        v: T,
    ) -> Self {
        self.audio_encoding = v.into();
        self
    }

    /// Sets the value of [sample_rate_hertz][crate::model::SpeechToTextConfig::sample_rate_hertz].
    pub fn set_sample_rate_hertz<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.sample_rate_hertz = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::SpeechToTextConfig::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [enable_word_info][crate::model::SpeechToTextConfig::enable_word_info].
    pub fn set_enable_word_info<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_word_info = v.into();
        self
    }

    /// Sets the value of [use_timeout_based_endpointing][crate::model::SpeechToTextConfig::use_timeout_based_endpointing].
    pub fn set_use_timeout_based_endpointing<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.use_timeout_based_endpointing = v.into();
        self
    }

    /// Sets the value of [phrase_sets][crate::model::SpeechToTextConfig::phrase_sets].
    pub fn set_phrase_sets<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.phrase_sets = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SpeechToTextConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SpeechToTextConfig"
    }
}

/// Dialogflow contexts are similar to natural language context. If a person says
/// to you "they are orange", you need context in order to understand what "they"
/// is referring to. Similarly, for Dialogflow to handle an end-user expression
/// like that, it needs to be provided with context in order to correctly match
/// an intent.
///
/// Using contexts, you can control the flow of a conversation. You can configure
/// contexts for an intent by setting input and output contexts, which are
/// identified by string names. When an intent is matched, any configured output
/// contexts for that intent become active. While any contexts are active,
/// Dialogflow is more likely to match intents that are configured with input
/// contexts that correspond to the currently active contexts.
///
/// For more information about context, see the
/// [Contexts guide](https://cloud.google.com/dialogflow/docs/contexts-overview).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Context {
    /// Required. The unique identifier of the context. Format:
    /// `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context ID>`,
    /// or `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
    /// ID>/sessions/<Session ID>/contexts/<Context ID>`.
    ///
    /// The `Context ID` is always converted to lowercase, may only contain
    /// characters in `a-zA-Z0-9_-%` and may be at most 250 bytes long.
    ///
    /// If `Environment ID` is not specified, we assume default 'draft'
    /// environment. If `User ID` is not specified, we assume default '-' user.
    ///
    /// The following context names are reserved for internal use by Dialogflow.
    /// You should not use these contexts or create contexts with these names:
    ///
    /// * `__system_counters__`
    /// * `*_id_dialog_context`
    /// * `*_dialog_params_size`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. The number of conversational query requests after which the
    /// context expires. The default is `0`. If set to `0`, the context expires
    /// immediately. Contexts expire automatically after 20 minutes if there
    /// are no matching queries.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub lifespan_count: i32,

    /// Optional. The collection of parameters associated with this context.
    ///
    /// Depending on your protocol or client library language, this is a
    /// map, associative array, symbol table, dictionary, or JSON object
    /// composed of a collection of (MapKey, MapValue) pairs:
    ///
    /// * MapKey type: string
    /// * MapKey value: parameter name
    /// * MapValue type: If parameter's entity type is a composite entity then use
    ///   map, otherwise, depending on the parameter value type, it could be one of
    ///   string, number, boolean, null, list or map.
    /// * MapValue value: If parameter's entity type is a composite entity then use
    ///   map from composite entity property names to property values, otherwise,
    ///   use parameter value.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub parameters: std::option::Option<wkt::Struct>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Context {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Context::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [lifespan_count][crate::model::Context::lifespan_count].
    pub fn set_lifespan_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.lifespan_count = v.into();
        self
    }

    /// Sets the value of [parameters][crate::model::Context::parameters].
    pub fn set_parameters<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.parameters = v.into();
        self
    }
}

impl wkt::message::Message for Context {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.Context"
    }
}

/// The request message for
/// [Contexts.ListContexts][google.cloud.dialogflow.v2.Contexts.ListContexts].
///
/// [google.cloud.dialogflow.v2.Contexts.ListContexts]: crate::client::Contexts::list_contexts
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListContextsRequest {
    /// Required. The session to list all contexts from.
    /// Format: `projects/<Project ID>/agent/sessions/<Session ID>` or
    /// `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
    /// ID>/sessions/<Session ID>`.
    /// If `Environment ID` is not specified, we assume default 'draft'
    /// environment. If `User ID` is not specified, we assume default '-' user.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of items to return in a single page. By
    /// default 100 and at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// Optional. The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListContextsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListContextsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListContextsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListContextsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListContextsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListContextsRequest"
    }
}

/// The response message for
/// [Contexts.ListContexts][google.cloud.dialogflow.v2.Contexts.ListContexts].
///
/// [google.cloud.dialogflow.v2.Contexts.ListContexts]: crate::client::Contexts::list_contexts
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListContextsResponse {
    /// The list of contexts. There will be a maximum number of items
    /// returned based on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub contexts: std::vec::Vec<crate::model::Context>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListContextsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListContextsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [contexts][crate::model::ListContextsResponse::contexts].
    pub fn set_contexts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Context>,
    {
        use std::iter::Iterator;
        self.contexts = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListContextsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListContextsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListContextsResponse {
    type PageItem = crate::model::Context;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.contexts
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Contexts.GetContext][google.cloud.dialogflow.v2.Contexts.GetContext].
///
/// [google.cloud.dialogflow.v2.Contexts.GetContext]: crate::client::Contexts::get_context
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetContextRequest {
    /// Required. The name of the context. Format:
    /// `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context ID>`
    /// or `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
    /// ID>/sessions/<Session ID>/contexts/<Context ID>`.
    /// If `Environment ID` is not specified, we assume default 'draft'
    /// environment. If `User ID` is not specified, we assume default '-' user.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetContextRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetContextRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetContextRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetContextRequest"
    }
}

/// The request message for
/// [Contexts.CreateContext][google.cloud.dialogflow.v2.Contexts.CreateContext].
///
/// [google.cloud.dialogflow.v2.Contexts.CreateContext]: crate::client::Contexts::create_context
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateContextRequest {
    /// Required. The session to create a context for.
    /// Format: `projects/<Project ID>/agent/sessions/<Session ID>` or
    /// `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
    /// ID>/sessions/<Session ID>`.
    /// If `Environment ID` is not specified, we assume default 'draft'
    /// environment. If `User ID` is not specified, we assume default '-' user.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The context to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub context: std::option::Option<crate::model::Context>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateContextRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateContextRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [context][crate::model::CreateContextRequest::context].
    pub fn set_context<T: std::convert::Into<std::option::Option<crate::model::Context>>>(
        mut self,
        v: T,
    ) -> Self {
        self.context = v.into();
        self
    }
}

impl wkt::message::Message for CreateContextRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateContextRequest"
    }
}

/// The request message for
/// [Contexts.UpdateContext][google.cloud.dialogflow.v2.Contexts.UpdateContext].
///
/// [google.cloud.dialogflow.v2.Contexts.UpdateContext]: crate::client::Contexts::update_context
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateContextRequest {
    /// Required. The context to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub context: std::option::Option<crate::model::Context>,

    /// Optional. The mask to control which fields get updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateContextRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [context][crate::model::UpdateContextRequest::context].
    pub fn set_context<T: std::convert::Into<std::option::Option<crate::model::Context>>>(
        mut self,
        v: T,
    ) -> Self {
        self.context = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateContextRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateContextRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.UpdateContextRequest"
    }
}

/// The request message for
/// [Contexts.DeleteContext][google.cloud.dialogflow.v2.Contexts.DeleteContext].
///
/// [google.cloud.dialogflow.v2.Contexts.DeleteContext]: crate::client::Contexts::delete_context
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteContextRequest {
    /// Required. The name of the context to delete. Format:
    /// `projects/<Project ID>/agent/sessions/<Session ID>/contexts/<Context ID>`
    /// or `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
    /// ID>/sessions/<Session ID>/contexts/<Context ID>`.
    /// If `Environment ID` is not specified, we assume default 'draft'
    /// environment. If `User ID` is not specified, we assume default '-' user.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteContextRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteContextRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteContextRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeleteContextRequest"
    }
}

/// The request message for
/// [Contexts.DeleteAllContexts][google.cloud.dialogflow.v2.Contexts.DeleteAllContexts].
///
/// [google.cloud.dialogflow.v2.Contexts.DeleteAllContexts]: crate::client::Contexts::delete_all_contexts
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteAllContextsRequest {
    /// Required. The name of the session to delete all contexts from. Format:
    /// `projects/<Project ID>/agent/sessions/<Session ID>` or `projects/<Project
    /// ID>/agent/environments/<Environment ID>/users/<User ID>/sessions/<Session
    /// ID>`.
    /// If `Environment ID` is not specified we assume default 'draft' environment.
    /// If `User ID` is not specified, we assume default '-' user.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteAllContextsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::DeleteAllContextsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }
}

impl wkt::message::Message for DeleteAllContextsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeleteAllContextsRequest"
    }
}

/// Represents a conversation.
/// A conversation is an interaction between an agent, including live agents
/// and Dialogflow agents, and a support customer. Conversations can
/// include phone calls and text-based chat sessions.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Conversation {
    /// Output only. Identifier. The unique identifier of this conversation.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The current state of the Conversation.
    pub lifecycle_state: crate::model::conversation::LifecycleState,

    /// Required. The Conversation Profile to be used to configure this
    /// Conversation. This field cannot be updated.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversationProfiles/<Conversation Profile ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation_profile: std::string::String,

    /// Output only. It will not be empty if the conversation is to be connected
    /// over telephony.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub phone_number: std::option::Option<crate::model::ConversationPhoneNumber>,

    /// Output only. The time the conversation was started.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the conversation was finished.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Optional. The stage of a conversation. It indicates whether the virtual
    /// agent or a human agent is handling the conversation.
    ///
    /// If the conversation is created with the conversation profile that has
    /// Dialogflow config set, defaults to
    /// [ConversationStage.VIRTUAL_AGENT_STAGE][google.cloud.dialogflow.v2.Conversation.ConversationStage.VIRTUAL_AGENT_STAGE];
    /// Otherwise, defaults to
    /// [ConversationStage.HUMAN_ASSIST_STAGE][google.cloud.dialogflow.v2.Conversation.ConversationStage.HUMAN_ASSIST_STAGE].
    ///
    /// If the conversation is created with the conversation profile that has
    /// Dialogflow config set but explicitly sets conversation_stage to
    /// [ConversationStage.HUMAN_ASSIST_STAGE][google.cloud.dialogflow.v2.Conversation.ConversationStage.HUMAN_ASSIST_STAGE],
    /// it skips
    /// [ConversationStage.VIRTUAL_AGENT_STAGE][google.cloud.dialogflow.v2.Conversation.ConversationStage.VIRTUAL_AGENT_STAGE]
    /// stage and directly goes to
    /// [ConversationStage.HUMAN_ASSIST_STAGE][google.cloud.dialogflow.v2.Conversation.ConversationStage.HUMAN_ASSIST_STAGE].
    ///
    /// [google.cloud.dialogflow.v2.Conversation.ConversationStage.HUMAN_ASSIST_STAGE]: crate::model::conversation::ConversationStage::HumanAssistStage
    /// [google.cloud.dialogflow.v2.Conversation.ConversationStage.VIRTUAL_AGENT_STAGE]: crate::model::conversation::ConversationStage::VirtualAgentStage
    pub conversation_stage: crate::model::conversation::ConversationStage,

    /// Output only. The telephony connection information.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub telephony_connection_info:
        std::option::Option<crate::model::conversation::TelephonyConnectionInfo>,

    /// Output only. The context reference updates provided by external systems.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub ingested_context_references: std::collections::HashMap<
        std::string::String,
        crate::model::conversation::ContextReference,
    >,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Conversation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Conversation::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [lifecycle_state][crate::model::Conversation::lifecycle_state].
    pub fn set_lifecycle_state<
        T: std::convert::Into<crate::model::conversation::LifecycleState>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.lifecycle_state = v.into();
        self
    }

    /// Sets the value of [conversation_profile][crate::model::Conversation::conversation_profile].
    pub fn set_conversation_profile<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_profile = v.into();
        self
    }

    /// Sets the value of [phone_number][crate::model::Conversation::phone_number].
    pub fn set_phone_number<
        T: std::convert::Into<std::option::Option<crate::model::ConversationPhoneNumber>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.phone_number = v.into();
        self
    }

    /// Sets the value of [start_time][crate::model::Conversation::start_time].
    pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::Conversation::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [conversation_stage][crate::model::Conversation::conversation_stage].
    pub fn set_conversation_stage<
        T: std::convert::Into<crate::model::conversation::ConversationStage>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_stage = v.into();
        self
    }

    /// Sets the value of [telephony_connection_info][crate::model::Conversation::telephony_connection_info].
    pub fn set_telephony_connection_info<
        T: std::convert::Into<
                std::option::Option<crate::model::conversation::TelephonyConnectionInfo>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.telephony_connection_info = v.into();
        self
    }

    /// Sets the value of [ingested_context_references][crate::model::Conversation::ingested_context_references].
    pub fn set_ingested_context_references<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::conversation::ContextReference>,
    {
        use std::iter::Iterator;
        self.ingested_context_references =
            v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Conversation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.Conversation"
    }
}

/// Defines additional types related to [Conversation].
pub mod conversation {
    #[allow(unused_imports)]
    use super::*;

    /// The information about phone calls connected via phone gateway to the
    /// conversation.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct TelephonyConnectionInfo {
        /// Output only. The number dialed to connect this call in E.164 format.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub dialed_number: std::string::String,

        /// Optional. SDP of the call. It's initially the SDP answer to the endpoint,
        /// but maybe later updated for the purpose of making the link active, etc.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub sdp: std::string::String,

        /// Output only. The SIP headers from the initial SIP INVITE.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub sip_headers:
            std::vec::Vec<crate::model::conversation::telephony_connection_info::SipHeader>,

        /// Output only. The mime content from the initial SIP INVITE.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub extra_mime_contents:
            std::vec::Vec<crate::model::conversation::telephony_connection_info::MimeContent>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl TelephonyConnectionInfo {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [dialed_number][crate::model::conversation::TelephonyConnectionInfo::dialed_number].
        pub fn set_dialed_number<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.dialed_number = v.into();
            self
        }

        /// Sets the value of [sdp][crate::model::conversation::TelephonyConnectionInfo::sdp].
        pub fn set_sdp<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.sdp = v.into();
            self
        }

        /// Sets the value of [sip_headers][crate::model::conversation::TelephonyConnectionInfo::sip_headers].
        pub fn set_sip_headers<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::conversation::telephony_connection_info::SipHeader>,
        {
            use std::iter::Iterator;
            self.sip_headers = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [extra_mime_contents][crate::model::conversation::TelephonyConnectionInfo::extra_mime_contents].
        pub fn set_extra_mime_contents<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<
                    crate::model::conversation::telephony_connection_info::MimeContent,
                >,
        {
            use std::iter::Iterator;
            self.extra_mime_contents = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for TelephonyConnectionInfo {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.Conversation.TelephonyConnectionInfo"
        }
    }

    /// Defines additional types related to [TelephonyConnectionInfo].
    pub mod telephony_connection_info {
        #[allow(unused_imports)]
        use super::*;

        /// The SIP headers from the initial SIP INVITE.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct SipHeader {
            /// Optional. The name of the header.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub name: std::string::String,

            /// Optional. The value of the header.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub value: std::string::String,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl SipHeader {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [name][crate::model::conversation::telephony_connection_info::SipHeader::name].
            pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.name = v.into();
                self
            }

            /// Sets the value of [value][crate::model::conversation::telephony_connection_info::SipHeader::value].
            pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.value = v.into();
                self
            }
        }

        impl wkt::message::Message for SipHeader {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Conversation.TelephonyConnectionInfo.SipHeader"
            }
        }

        /// The mime content from the initial SIP INVITE.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct MimeContent {
            /// Optional. The mime type of the content.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub mime_type: std::string::String,

            /// Optional. The content payload.
            #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
            #[serde_as(as = "serde_with::base64::Base64")]
            pub content: ::bytes::Bytes,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl MimeContent {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [mime_type][crate::model::conversation::telephony_connection_info::MimeContent::mime_type].
            pub fn set_mime_type<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.mime_type = v.into();
                self
            }

            /// Sets the value of [content][crate::model::conversation::telephony_connection_info::MimeContent::content].
            pub fn set_content<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
                self.content = v.into();
                self
            }
        }

        impl wkt::message::Message for MimeContent {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Conversation.TelephonyConnectionInfo.MimeContent"
            }
        }
    }

    /// Represents a section of ingested context information.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ContextReference {
        /// Required. The list of content updates for a context reference.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub context_contents:
            std::vec::Vec<crate::model::conversation::context_reference::ContextContent>,

        /// Required. The mode in which context reference contents are updated.
        pub update_mode: crate::model::conversation::context_reference::UpdateMode,

        /// Optional. The language of the information ingested, defaults to "en-US"
        /// if not set.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub language_code: std::string::String,

        /// Output only. The time the context reference was first created.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub create_time: std::option::Option<wkt::Timestamp>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ContextReference {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [update_mode][crate::model::conversation::ContextReference::update_mode].
        pub fn set_update_mode<
            T: std::convert::Into<crate::model::conversation::context_reference::UpdateMode>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.update_mode = v.into();
            self
        }

        /// Sets the value of [language_code][crate::model::conversation::ContextReference::language_code].
        pub fn set_language_code<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.language_code = v.into();
            self
        }

        /// Sets the value of [create_time][crate::model::conversation::ContextReference::create_time].
        pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
            mut self,
            v: T,
        ) -> Self {
            self.create_time = v.into();
            self
        }

        /// Sets the value of [context_contents][crate::model::conversation::ContextReference::context_contents].
        pub fn set_context_contents<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::conversation::context_reference::ContextContent>,
        {
            use std::iter::Iterator;
            self.context_contents = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for ContextReference {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.Conversation.ContextReference"
        }
    }

    /// Defines additional types related to [ContextReference].
    pub mod context_reference {
        #[allow(unused_imports)]
        use super::*;

        /// Contents ingested.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct ContextContent {
            /// Required. The information ingested in a single request.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub content: std::string::String,

            /// Required. The format of the ingested string.
            pub content_format:
                crate::model::conversation::context_reference::context_content::ContentFormat,

            /// Output only. The time when this information was incorporated into the
            /// relevant context reference.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub ingestion_time: std::option::Option<wkt::Timestamp>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl ContextContent {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [content][crate::model::conversation::context_reference::ContextContent::content].
            pub fn set_content<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.content = v.into();
                self
            }

            /// Sets the value of [content_format][crate::model::conversation::context_reference::ContextContent::content_format].
            pub fn set_content_format<T: std::convert::Into<crate::model::conversation::context_reference::context_content::ContentFormat>>(mut self, v: T) -> Self{
                self.content_format = v.into();
                self
            }

            /// Sets the value of [ingestion_time][crate::model::conversation::context_reference::ContextContent::ingestion_time].
            pub fn set_ingestion_time<
                T: std::convert::Into<std::option::Option<wkt::Timestamp>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.ingestion_time = v.into();
                self
            }
        }

        impl wkt::message::Message for ContextContent {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Conversation.ContextReference.ContextContent"
            }
        }

        /// Defines additional types related to [ContextContent].
        pub mod context_content {
            #[allow(unused_imports)]
            use super::*;

            /// Represents the format of the ingested string.
            ///
            /// # Working with unknown values
            ///
            /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
            /// additional enum variants at any time. Adding new variants is not considered
            /// a breaking change. Applications should write their code in anticipation of:
            ///
            /// - New values appearing in future releases of the client library, **and**
            /// - New values received dynamically, without application changes.
            ///
            /// Please consult the [Working with enums] section in the user guide for some
            /// guidelines.
            ///
            /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
            #[derive(Clone, Debug, PartialEq)]
            #[non_exhaustive]
            pub enum ContentFormat {
                /// Unspecified content format.
                Unspecified,
                /// Content was provided in JSON format.
                Json,
                /// Content was provided as plain text.
                PlainText,
                /// If set, the enum was initialized with an unknown value.
                ///
                /// Applications can examine the value using [ContentFormat::value] or
                /// [ContentFormat::name].
                UnknownValue(content_format::UnknownValue),
            }

            #[doc(hidden)]
            pub mod content_format {
                #[allow(unused_imports)]
                use super::*;
                #[derive(Clone, Debug, PartialEq)]
                pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
            }

            impl ContentFormat {
                /// Gets the enum value.
                ///
                /// Returns `None` if the enum contains an unknown value deserialized from
                /// the string representation of enums.
                pub fn value(&self) -> std::option::Option<i32> {
                    match self {
                        Self::Unspecified => std::option::Option::Some(0),
                        Self::Json => std::option::Option::Some(1),
                        Self::PlainText => std::option::Option::Some(2),
                        Self::UnknownValue(u) => u.0.value(),
                    }
                }

                /// Gets the enum value as a string.
                ///
                /// Returns `None` if the enum contains an unknown value deserialized from
                /// the integer representation of enums.
                pub fn name(&self) -> std::option::Option<&str> {
                    match self {
                        Self::Unspecified => {
                            std::option::Option::Some("CONTENT_FORMAT_UNSPECIFIED")
                        }
                        Self::Json => std::option::Option::Some("JSON"),
                        Self::PlainText => std::option::Option::Some("PLAIN_TEXT"),
                        Self::UnknownValue(u) => u.0.name(),
                    }
                }
            }

            impl std::default::Default for ContentFormat {
                fn default() -> Self {
                    use std::convert::From;
                    Self::from(0)
                }
            }

            impl std::fmt::Display for ContentFormat {
                fn fmt(
                    &self,
                    f: &mut std::fmt::Formatter<'_>,
                ) -> std::result::Result<(), std::fmt::Error> {
                    wkt::internal::display_enum(f, self.name(), self.value())
                }
            }

            impl std::convert::From<i32> for ContentFormat {
                fn from(value: i32) -> Self {
                    match value {
                        0 => Self::Unspecified,
                        1 => Self::Json,
                        2 => Self::PlainText,
                        _ => Self::UnknownValue(content_format::UnknownValue(
                            wkt::internal::UnknownEnumValue::Integer(value),
                        )),
                    }
                }
            }

            impl std::convert::From<&str> for ContentFormat {
                fn from(value: &str) -> Self {
                    use std::string::ToString;
                    match value {
                        "CONTENT_FORMAT_UNSPECIFIED" => Self::Unspecified,
                        "JSON" => Self::Json,
                        "PLAIN_TEXT" => Self::PlainText,
                        _ => Self::UnknownValue(content_format::UnknownValue(
                            wkt::internal::UnknownEnumValue::String(value.to_string()),
                        )),
                    }
                }
            }

            impl serde::ser::Serialize for ContentFormat {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::Serializer,
                {
                    match self {
                        Self::Unspecified => serializer.serialize_i32(0),
                        Self::Json => serializer.serialize_i32(1),
                        Self::PlainText => serializer.serialize_i32(2),
                        Self::UnknownValue(u) => u.0.serialize(serializer),
                    }
                }
            }

            impl<'de> serde::de::Deserialize<'de> for ContentFormat {
                fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
                where
                    D: serde::Deserializer<'de>,
                {
                    deserializer.deserialize_any(wkt::internal::EnumVisitor::<ContentFormat>::new(
                        ".google.cloud.dialogflow.v2.Conversation.ContextReference.ContextContent.ContentFormat"))
                }
            }
        }

        /// Represents the mode in which context reference contents are updated.
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum UpdateMode {
            /// Unspecified update mode.
            Unspecified,
            /// Context content updates are applied in append mode.
            Append,
            /// Context content updates are applied in overwrite mode.
            Overwrite,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [UpdateMode::value] or
            /// [UpdateMode::name].
            UnknownValue(update_mode::UnknownValue),
        }

        #[doc(hidden)]
        pub mod update_mode {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl UpdateMode {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::Unspecified => std::option::Option::Some(0),
                    Self::Append => std::option::Option::Some(1),
                    Self::Overwrite => std::option::Option::Some(2),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::Unspecified => std::option::Option::Some("UPDATE_MODE_UNSPECIFIED"),
                    Self::Append => std::option::Option::Some("APPEND"),
                    Self::Overwrite => std::option::Option::Some("OVERWRITE"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for UpdateMode {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for UpdateMode {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for UpdateMode {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::Unspecified,
                    1 => Self::Append,
                    2 => Self::Overwrite,
                    _ => Self::UnknownValue(update_mode::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for UpdateMode {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "UPDATE_MODE_UNSPECIFIED" => Self::Unspecified,
                    "APPEND" => Self::Append,
                    "OVERWRITE" => Self::Overwrite,
                    _ => Self::UnknownValue(update_mode::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for UpdateMode {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::Unspecified => serializer.serialize_i32(0),
                    Self::Append => serializer.serialize_i32(1),
                    Self::Overwrite => serializer.serialize_i32(2),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for UpdateMode {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<UpdateMode>::new(
                    ".google.cloud.dialogflow.v2.Conversation.ContextReference.UpdateMode",
                ))
            }
        }
    }

    /// Enumeration of the completion status of the conversation.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum LifecycleState {
        /// Unknown.
        Unspecified,
        /// Conversation is currently open for media analysis.
        InProgress,
        /// Conversation has been completed.
        Completed,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [LifecycleState::value] or
        /// [LifecycleState::name].
        UnknownValue(lifecycle_state::UnknownValue),
    }

    #[doc(hidden)]
    pub mod lifecycle_state {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl LifecycleState {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::InProgress => std::option::Option::Some(1),
                Self::Completed => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("LIFECYCLE_STATE_UNSPECIFIED"),
                Self::InProgress => std::option::Option::Some("IN_PROGRESS"),
                Self::Completed => std::option::Option::Some("COMPLETED"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for LifecycleState {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for LifecycleState {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for LifecycleState {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::InProgress,
                2 => Self::Completed,
                _ => Self::UnknownValue(lifecycle_state::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for LifecycleState {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "LIFECYCLE_STATE_UNSPECIFIED" => Self::Unspecified,
                "IN_PROGRESS" => Self::InProgress,
                "COMPLETED" => Self::Completed,
                _ => Self::UnknownValue(lifecycle_state::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for LifecycleState {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::InProgress => serializer.serialize_i32(1),
                Self::Completed => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for LifecycleState {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<LifecycleState>::new(
                ".google.cloud.dialogflow.v2.Conversation.LifecycleState",
            ))
        }
    }

    /// Enumeration of the different conversation stages a conversation can be in.
    /// Reference:
    /// <https://cloud.google.com/agent-assist/docs/basics#conversation_stages>
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum ConversationStage {
        /// Unknown. Should never be used after a conversation is successfully
        /// created.
        Unspecified,
        /// The conversation should return virtual agent responses into the
        /// conversation.
        VirtualAgentStage,
        /// The conversation should not provide responses, just listen and provide
        /// suggestions.
        HumanAssistStage,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [ConversationStage::value] or
        /// [ConversationStage::name].
        UnknownValue(conversation_stage::UnknownValue),
    }

    #[doc(hidden)]
    pub mod conversation_stage {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl ConversationStage {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::VirtualAgentStage => std::option::Option::Some(1),
                Self::HumanAssistStage => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("CONVERSATION_STAGE_UNSPECIFIED"),
                Self::VirtualAgentStage => std::option::Option::Some("VIRTUAL_AGENT_STAGE"),
                Self::HumanAssistStage => std::option::Option::Some("HUMAN_ASSIST_STAGE"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for ConversationStage {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for ConversationStage {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for ConversationStage {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::VirtualAgentStage,
                2 => Self::HumanAssistStage,
                _ => Self::UnknownValue(conversation_stage::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for ConversationStage {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "CONVERSATION_STAGE_UNSPECIFIED" => Self::Unspecified,
                "VIRTUAL_AGENT_STAGE" => Self::VirtualAgentStage,
                "HUMAN_ASSIST_STAGE" => Self::HumanAssistStage,
                _ => Self::UnknownValue(conversation_stage::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for ConversationStage {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::VirtualAgentStage => serializer.serialize_i32(1),
                Self::HumanAssistStage => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for ConversationStage {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<ConversationStage>::new(
                ".google.cloud.dialogflow.v2.Conversation.ConversationStage",
            ))
        }
    }
}

/// The request message for
/// [Conversations.CreateConversation][google.cloud.dialogflow.v2.Conversations.CreateConversation].
///
/// [google.cloud.dialogflow.v2.Conversations.CreateConversation]: crate::client::Conversations::create_conversation
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateConversationRequest {
    /// Required. Resource identifier of the project creating the conversation.
    /// Format: `projects/<Project ID>/locations/<Location ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The conversation to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub conversation: std::option::Option<crate::model::Conversation>,

    /// Optional. Identifier of the conversation. Generally it's auto generated by
    /// Google. Only set it if you cannot wait for the response to return a
    /// auto-generated one to you.
    ///
    /// The conversation ID must be compliant with the regression formula
    /// `[a-zA-Z][a-zA-Z0-9_-]*` with the characters length in range of [3,64].
    /// If the field is provided, the caller is responsible for
    ///
    /// . the uniqueness of the ID, otherwise the request will be rejected.
    /// . the consistency for whether to use custom ID or not under a project to
    ///   better ensure uniqueness.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateConversationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateConversationRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [conversation][crate::model::CreateConversationRequest::conversation].
    pub fn set_conversation<
        T: std::convert::Into<std::option::Option<crate::model::Conversation>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.conversation = v.into();
        self
    }

    /// Sets the value of [conversation_id][crate::model::CreateConversationRequest::conversation_id].
    pub fn set_conversation_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.conversation_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateConversationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateConversationRequest"
    }
}

/// The request message for
/// [Conversations.ListConversations][google.cloud.dialogflow.v2.Conversations.ListConversations].
///
/// [google.cloud.dialogflow.v2.Conversations.ListConversations]: crate::client::Conversations::list_conversations
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListConversationsRequest {
    /// Required. The project from which to list all conversation.
    /// Format: `projects/<Project ID>/locations/<Location ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of items to return in a single page. By
    /// default 100 and at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// Optional. The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. A filter expression that filters conversations listed in the
    /// response. Only `lifecycle_state` can be filtered on in this way. For
    /// example, the following expression only returns `COMPLETED` conversations:
    ///
    /// `lifecycle_state = "COMPLETED"`
    ///
    /// For more information about filtering, see
    /// [API Filtering](https://aip.dev/160).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListConversationsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListConversationsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListConversationsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListConversationsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListConversationsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }
}

impl wkt::message::Message for ListConversationsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListConversationsRequest"
    }
}

/// The response message for
/// [Conversations.ListConversations][google.cloud.dialogflow.v2.Conversations.ListConversations].
///
/// [google.cloud.dialogflow.v2.Conversations.ListConversations]: crate::client::Conversations::list_conversations
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListConversationsResponse {
    /// The list of conversations. There will be a maximum number of items
    /// returned based on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub conversations: std::vec::Vec<crate::model::Conversation>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListConversationsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListConversationsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [conversations][crate::model::ListConversationsResponse::conversations].
    pub fn set_conversations<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Conversation>,
    {
        use std::iter::Iterator;
        self.conversations = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListConversationsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListConversationsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListConversationsResponse {
    type PageItem = crate::model::Conversation;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.conversations
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Conversations.GetConversation][google.cloud.dialogflow.v2.Conversations.GetConversation].
///
/// [google.cloud.dialogflow.v2.Conversations.GetConversation]: crate::client::Conversations::get_conversation
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetConversationRequest {
    /// Required. The name of the conversation. Format:
    /// `projects/<Project ID>/locations/<Location ID>/conversations/<Conversation
    /// ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetConversationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetConversationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetConversationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetConversationRequest"
    }
}

/// The request message for
/// [Conversations.CompleteConversation][google.cloud.dialogflow.v2.Conversations.CompleteConversation].
///
/// [google.cloud.dialogflow.v2.Conversations.CompleteConversation]: crate::client::Conversations::complete_conversation
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CompleteConversationRequest {
    /// Required. Resource identifier of the conversation to close.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CompleteConversationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::CompleteConversationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for CompleteConversationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CompleteConversationRequest"
    }
}

/// The request message for
/// [Conversations.ListMessages][google.cloud.dialogflow.v2.Conversations.ListMessages].
///
/// [google.cloud.dialogflow.v2.Conversations.ListMessages]: crate::client::Conversations::list_messages
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListMessagesRequest {
    /// Required. The name of the conversation to list messages for.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Filter on message fields. Currently predicates on `create_time`
    /// and `create_time_epoch_microseconds` are supported. `create_time` only
    /// support milliseconds accuracy. E.g.,
    /// `create_time_epoch_microseconds > 1551790877964485` or
    /// `create_time > 2017-01-15T01:30:15.01Z`.
    ///
    /// For more information about filtering, see
    /// [API Filtering](https://aip.dev/160).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. The maximum number of items to return in a single page. By
    /// default 100 and at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// Optional. The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListMessagesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListMessagesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListMessagesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListMessagesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListMessagesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListMessagesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListMessagesRequest"
    }
}

/// The response message for
/// [Conversations.ListMessages][google.cloud.dialogflow.v2.Conversations.ListMessages].
///
/// [google.cloud.dialogflow.v2.Conversations.ListMessages]: crate::client::Conversations::list_messages
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListMessagesResponse {
    /// The list of messages. There will be a maximum number of items
    /// returned based on the page_size field in the request.
    /// `messages` is sorted by `create_time` in descending order.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub messages: std::vec::Vec<crate::model::Message>,

    /// Token to retrieve the next page of results, or empty if there are
    /// no more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListMessagesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListMessagesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [messages][crate::model::ListMessagesResponse::messages].
    pub fn set_messages<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Message>,
    {
        use std::iter::Iterator;
        self.messages = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListMessagesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListMessagesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListMessagesResponse {
    type PageItem = crate::model::Message;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.messages
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Represents a phone number for telephony integration. It allows for connecting
/// a particular conversation over telephony.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ConversationPhoneNumber {
    /// Output only. Desired country code for the phone number.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub country_code: i32,

    /// Output only. The phone number to connect to this conversation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub phone_number: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ConversationPhoneNumber {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [country_code][crate::model::ConversationPhoneNumber::country_code].
    pub fn set_country_code<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.country_code = v.into();
        self
    }

    /// Sets the value of [phone_number][crate::model::ConversationPhoneNumber::phone_number].
    pub fn set_phone_number<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.phone_number = v.into();
        self
    }
}

impl wkt::message::Message for ConversationPhoneNumber {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ConversationPhoneNumber"
    }
}

/// The request message for [ConversationsService.IngestContextReferences][].
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct IngestContextReferencesRequest {
    /// Required. Resource identifier of the conversation to ingest context
    /// information for. Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation: std::string::String,

    /// Required. The context references to ingest. The key is the name of the
    /// context reference and the value contains the contents of the context
    /// reference. The key is used to incorporate ingested context references to
    /// enhance the generator.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub context_references: std::collections::HashMap<
        std::string::String,
        crate::model::conversation::ContextReference,
    >,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl IngestContextReferencesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation][crate::model::IngestContextReferencesRequest::conversation].
    pub fn set_conversation<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.conversation = v.into();
        self
    }

    /// Sets the value of [context_references][crate::model::IngestContextReferencesRequest::context_references].
    pub fn set_context_references<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::conversation::ContextReference>,
    {
        use std::iter::Iterator;
        self.context_references = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for IngestContextReferencesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.IngestContextReferencesRequest"
    }
}

/// The response message for [ConversationsService.IngestContextReferences][].
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct IngestContextReferencesResponse {
    /// All context references ingested.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub ingested_context_references: std::collections::HashMap<
        std::string::String,
        crate::model::conversation::ContextReference,
    >,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl IngestContextReferencesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [ingested_context_references][crate::model::IngestContextReferencesResponse::ingested_context_references].
    pub fn set_ingested_context_references<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::conversation::ContextReference>,
    {
        use std::iter::Iterator;
        self.ingested_context_references =
            v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for IngestContextReferencesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.IngestContextReferencesResponse"
    }
}

/// The request message for
/// [Conversations.SuggestConversationSummary][google.cloud.dialogflow.v2.Conversations.SuggestConversationSummary].
///
/// [google.cloud.dialogflow.v2.Conversations.SuggestConversationSummary]: crate::client::Conversations::suggest_conversation_summary
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SuggestConversationSummaryRequest {
    /// Required. The conversation to fetch suggestion for.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation: std::string::String,

    /// Optional. The name of the latest conversation message used as context for
    /// compiling suggestion. If empty, the latest message of the conversation will
    /// be used.
    ///
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/messages/<Message ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub latest_message: std::string::String,

    /// Optional. Max number of messages prior to and including
    /// [latest_message] to use as context when compiling the
    /// suggestion. By default 500 and at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub context_size: i32,

    /// Optional. Parameters for a human assist query. Only used for POC/demo
    /// purpose.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub assist_query_params: std::option::Option<crate::model::AssistQueryParameters>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SuggestConversationSummaryRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation][crate::model::SuggestConversationSummaryRequest::conversation].
    pub fn set_conversation<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.conversation = v.into();
        self
    }

    /// Sets the value of [latest_message][crate::model::SuggestConversationSummaryRequest::latest_message].
    pub fn set_latest_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.latest_message = v.into();
        self
    }

    /// Sets the value of [context_size][crate::model::SuggestConversationSummaryRequest::context_size].
    pub fn set_context_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.context_size = v.into();
        self
    }

    /// Sets the value of [assist_query_params][crate::model::SuggestConversationSummaryRequest::assist_query_params].
    pub fn set_assist_query_params<
        T: std::convert::Into<std::option::Option<crate::model::AssistQueryParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.assist_query_params = v.into();
        self
    }
}

impl wkt::message::Message for SuggestConversationSummaryRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SuggestConversationSummaryRequest"
    }
}

/// The response message for
/// [Conversations.SuggestConversationSummary][google.cloud.dialogflow.v2.Conversations.SuggestConversationSummary].
///
/// [google.cloud.dialogflow.v2.Conversations.SuggestConversationSummary]: crate::client::Conversations::suggest_conversation_summary
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SuggestConversationSummaryResponse {
    /// Generated summary.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub summary: std::option::Option<crate::model::suggest_conversation_summary_response::Summary>,

    /// The name of the latest conversation message used as context for
    /// compiling suggestion.
    ///
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/messages/<Message ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub latest_message: std::string::String,

    /// Number of messages prior to and including
    /// [latest_message][google.cloud.dialogflow.v2.SuggestConversationSummaryResponse.latest_message]
    /// used to compile the suggestion. It may be smaller than the
    /// [SuggestConversationSummaryRequest.context_size][google.cloud.dialogflow.v2.SuggestConversationSummaryRequest.context_size]
    /// field in the request if there weren't that many messages in the
    /// conversation.
    ///
    /// [google.cloud.dialogflow.v2.SuggestConversationSummaryRequest.context_size]: crate::model::SuggestConversationSummaryRequest::context_size
    /// [google.cloud.dialogflow.v2.SuggestConversationSummaryResponse.latest_message]: crate::model::SuggestConversationSummaryResponse::latest_message
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub context_size: i32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SuggestConversationSummaryResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [summary][crate::model::SuggestConversationSummaryResponse::summary].
    pub fn set_summary<
        T: std::convert::Into<
                std::option::Option<crate::model::suggest_conversation_summary_response::Summary>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.summary = v.into();
        self
    }

    /// Sets the value of [latest_message][crate::model::SuggestConversationSummaryResponse::latest_message].
    pub fn set_latest_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.latest_message = v.into();
        self
    }

    /// Sets the value of [context_size][crate::model::SuggestConversationSummaryResponse::context_size].
    pub fn set_context_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.context_size = v.into();
        self
    }
}

impl wkt::message::Message for SuggestConversationSummaryResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SuggestConversationSummaryResponse"
    }
}

/// Defines additional types related to [SuggestConversationSummaryResponse].
pub mod suggest_conversation_summary_response {
    #[allow(unused_imports)]
    use super::*;

    /// Generated summary for a conversation.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Summary {
        /// The summary content that is concatenated into one string.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub text: std::string::String,

        /// The summary content that is divided into sections. The key is the
        /// section's name and the value is the section's content. There is no
        /// specific format for the key or value.
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub text_sections: std::collections::HashMap<std::string::String, std::string::String>,

        /// The name of the answer record. Format:
        /// "projects/\<Project ID\>/answerRecords/\<Answer Record ID\>"
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub answer_record: std::string::String,

        /// The baseline model version used to generate this summary. It is empty if
        /// a baseline model was not used to generate this summary.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub baseline_model_version: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Summary {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [text][crate::model::suggest_conversation_summary_response::Summary::text].
        pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.text = v.into();
            self
        }

        /// Sets the value of [answer_record][crate::model::suggest_conversation_summary_response::Summary::answer_record].
        pub fn set_answer_record<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.answer_record = v.into();
            self
        }

        /// Sets the value of [baseline_model_version][crate::model::suggest_conversation_summary_response::Summary::baseline_model_version].
        pub fn set_baseline_model_version<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.baseline_model_version = v.into();
            self
        }

        /// Sets the value of [text_sections][crate::model::suggest_conversation_summary_response::Summary::text_sections].
        pub fn set_text_sections<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.text_sections = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl wkt::message::Message for Summary {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.SuggestConversationSummaryResponse.Summary"
        }
    }
}

/// The request message for
/// [Conversations.GenerateStatelessSummary][google.cloud.dialogflow.v2.Conversations.GenerateStatelessSummary].
///
/// [google.cloud.dialogflow.v2.Conversations.GenerateStatelessSummary]: crate::client::Conversations::generate_stateless_summary
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GenerateStatelessSummaryRequest {
    /// Required. The conversation to suggest a summary for.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub stateless_conversation:
        std::option::Option<crate::model::generate_stateless_summary_request::MinimalConversation>,

    /// Required. A ConversationProfile containing information required for Summary
    /// generation.
    /// Required fields: {language_code, security_settings}
    /// Optional fields: {agent_assistant_config}
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub conversation_profile: std::option::Option<crate::model::ConversationProfile>,

    /// Optional. The name of the latest conversation message used as context for
    /// generating a Summary. If empty, the latest message of the conversation will
    /// be used. The format is specific to the user and the names of the messages
    /// provided.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub latest_message: std::string::String,

    /// Optional. Max number of messages prior to and including
    /// [latest_message] to use as context when compiling the
    /// suggestion. By default 500 and at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub max_context_size: i32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GenerateStatelessSummaryRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [stateless_conversation][crate::model::GenerateStatelessSummaryRequest::stateless_conversation].
    pub fn set_stateless_conversation<
        T: std::convert::Into<
                std::option::Option<
                    crate::model::generate_stateless_summary_request::MinimalConversation,
                >,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.stateless_conversation = v.into();
        self
    }

    /// Sets the value of [conversation_profile][crate::model::GenerateStatelessSummaryRequest::conversation_profile].
    pub fn set_conversation_profile<
        T: std::convert::Into<std::option::Option<crate::model::ConversationProfile>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_profile = v.into();
        self
    }

    /// Sets the value of [latest_message][crate::model::GenerateStatelessSummaryRequest::latest_message].
    pub fn set_latest_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.latest_message = v.into();
        self
    }

    /// Sets the value of [max_context_size][crate::model::GenerateStatelessSummaryRequest::max_context_size].
    pub fn set_max_context_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.max_context_size = v.into();
        self
    }
}

impl wkt::message::Message for GenerateStatelessSummaryRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GenerateStatelessSummaryRequest"
    }
}

/// Defines additional types related to [GenerateStatelessSummaryRequest].
pub mod generate_stateless_summary_request {
    #[allow(unused_imports)]
    use super::*;

    /// The minimum amount of information required to generate a Summary without
    /// having a Conversation resource created.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct MinimalConversation {
        /// Required. The messages that the Summary will be generated from. It is
        /// expected that this message content is already redacted and does not
        /// contain any PII. Required fields: {content, language_code, participant,
        /// participant_role} Optional fields: {send_time} If send_time is not
        /// provided, then the messages must be provided in chronological order.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub messages: std::vec::Vec<crate::model::Message>,

        /// Required. The parent resource to charge for the Summary's generation.
        /// Format: `projects/<Project ID>/locations/<Location ID>`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub parent: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl MinimalConversation {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [parent][crate::model::generate_stateless_summary_request::MinimalConversation::parent].
        pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.parent = v.into();
            self
        }

        /// Sets the value of [messages][crate::model::generate_stateless_summary_request::MinimalConversation::messages].
        pub fn set_messages<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::Message>,
        {
            use std::iter::Iterator;
            self.messages = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for MinimalConversation {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.GenerateStatelessSummaryRequest.MinimalConversation"
        }
    }
}

/// The response message for
/// [Conversations.GenerateStatelessSummary][google.cloud.dialogflow.v2.Conversations.GenerateStatelessSummary].
///
/// [google.cloud.dialogflow.v2.Conversations.GenerateStatelessSummary]: crate::client::Conversations::generate_stateless_summary
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GenerateStatelessSummaryResponse {
    /// Generated summary.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub summary: std::option::Option<crate::model::generate_stateless_summary_response::Summary>,

    /// The name of the latest conversation message used as context for
    /// compiling suggestion. The format is specific to the user and the names of
    /// the messages provided.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub latest_message: std::string::String,

    /// Number of messages prior to and including
    /// [latest_message][google.cloud.dialogflow.v2.GenerateStatelessSummaryResponse.latest_message]
    /// used to compile the suggestion. It may be smaller than the
    /// [GenerateStatelessSummaryRequest.max_context_size][google.cloud.dialogflow.v2.GenerateStatelessSummaryRequest.max_context_size]
    /// field in the request if there weren't that many messages in the
    /// conversation.
    ///
    /// [google.cloud.dialogflow.v2.GenerateStatelessSummaryRequest.max_context_size]: crate::model::GenerateStatelessSummaryRequest::max_context_size
    /// [google.cloud.dialogflow.v2.GenerateStatelessSummaryResponse.latest_message]: crate::model::GenerateStatelessSummaryResponse::latest_message
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub context_size: i32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GenerateStatelessSummaryResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [summary][crate::model::GenerateStatelessSummaryResponse::summary].
    pub fn set_summary<
        T: std::convert::Into<
                std::option::Option<crate::model::generate_stateless_summary_response::Summary>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.summary = v.into();
        self
    }

    /// Sets the value of [latest_message][crate::model::GenerateStatelessSummaryResponse::latest_message].
    pub fn set_latest_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.latest_message = v.into();
        self
    }

    /// Sets the value of [context_size][crate::model::GenerateStatelessSummaryResponse::context_size].
    pub fn set_context_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.context_size = v.into();
        self
    }
}

impl wkt::message::Message for GenerateStatelessSummaryResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GenerateStatelessSummaryResponse"
    }
}

/// Defines additional types related to [GenerateStatelessSummaryResponse].
pub mod generate_stateless_summary_response {
    #[allow(unused_imports)]
    use super::*;

    /// Generated summary for a conversation.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Summary {
        /// The summary content that is concatenated into one string.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub text: std::string::String,

        /// The summary content that is divided into sections. The key is the
        /// section's name and the value is the section's content. There is no
        /// specific format for the key or value.
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub text_sections: std::collections::HashMap<std::string::String, std::string::String>,

        /// The baseline model version used to generate this summary. It is empty if
        /// a baseline model was not used to generate this summary.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub baseline_model_version: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Summary {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [text][crate::model::generate_stateless_summary_response::Summary::text].
        pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.text = v.into();
            self
        }

        /// Sets the value of [baseline_model_version][crate::model::generate_stateless_summary_response::Summary::baseline_model_version].
        pub fn set_baseline_model_version<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.baseline_model_version = v.into();
            self
        }

        /// Sets the value of [text_sections][crate::model::generate_stateless_summary_response::Summary::text_sections].
        pub fn set_text_sections<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.text_sections = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl wkt::message::Message for Summary {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.GenerateStatelessSummaryResponse.Summary"
        }
    }
}

/// The request message for
/// [Conversations.GenerateStatelessSuggestion][google.cloud.dialogflow.v2.Conversations.GenerateStatelessSuggestion].
///
/// [google.cloud.dialogflow.v2.Conversations.GenerateStatelessSuggestion]: crate::client::Conversations::generate_stateless_suggestion
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GenerateStatelessSuggestionRequest {
    /// Required. The parent resource to charge for the Suggestion's generation.
    /// Format: `projects/<Project ID>/locations/<Location ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. A section of ingested context information. The key is the name of
    /// the context reference and the value contains the contents of the context
    /// reference. The key is used to incorporate ingested context references to
    /// enhance the generator.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub context_references: std::collections::HashMap<
        std::string::String,
        crate::model::conversation::ContextReference,
    >,

    /// Optional. Context of the conversation, including transcripts.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub conversation_context: std::option::Option<crate::model::ConversationContext>,

    /// Optional. A list of trigger events. Generator will be triggered only if
    /// it's trigger event is included here.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub trigger_events: std::vec::Vec<crate::model::TriggerEvent>,

    /// Generator.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub generator_resource:
        std::option::Option<crate::model::generate_stateless_suggestion_request::GeneratorResource>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GenerateStatelessSuggestionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::GenerateStatelessSuggestionRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [conversation_context][crate::model::GenerateStatelessSuggestionRequest::conversation_context].
    pub fn set_conversation_context<
        T: std::convert::Into<std::option::Option<crate::model::ConversationContext>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_context = v.into();
        self
    }

    /// Sets the value of [trigger_events][crate::model::GenerateStatelessSuggestionRequest::trigger_events].
    pub fn set_trigger_events<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TriggerEvent>,
    {
        use std::iter::Iterator;
        self.trigger_events = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [context_references][crate::model::GenerateStatelessSuggestionRequest::context_references].
    pub fn set_context_references<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::conversation::ContextReference>,
    {
        use std::iter::Iterator;
        self.context_references = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [generator_resource][crate::model::GenerateStatelessSuggestionRequest::generator_resource].
    ///
    /// Note that all the setters affecting `generator_resource` are mutually
    /// exclusive.
    pub fn set_generator_resource<
        T: std::convert::Into<
                std::option::Option<
                    crate::model::generate_stateless_suggestion_request::GeneratorResource,
                >,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.generator_resource = v.into();
        self
    }

    /// The value of [generator_resource][crate::model::GenerateStatelessSuggestionRequest::generator_resource]
    /// if it holds a `Generator`, `None` if the field is not set or
    /// holds a different branch.
    pub fn generator(&self) -> std::option::Option<&std::boxed::Box<crate::model::Generator>> {
        #[allow(unreachable_patterns)]
        self.generator_resource.as_ref().and_then(|v| match v {
            crate::model::generate_stateless_suggestion_request::GeneratorResource::Generator(
                v,
            ) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [generator_resource][crate::model::GenerateStatelessSuggestionRequest::generator_resource]
    /// if it holds a `GeneratorName`, `None` if the field is not set or
    /// holds a different branch.
    pub fn generator_name(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.generator_resource.as_ref().and_then(|v| match v {
            crate::model::generate_stateless_suggestion_request::GeneratorResource::GeneratorName(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [generator_resource][crate::model::GenerateStatelessSuggestionRequest::generator_resource]
    /// to hold a `Generator`.
    ///
    /// Note that all the setters affecting `generator_resource` are
    /// mutually exclusive.
    pub fn set_generator<T: std::convert::Into<std::boxed::Box<crate::model::Generator>>>(
        mut self,
        v: T,
    ) -> Self {
        self.generator_resource = std::option::Option::Some(
            crate::model::generate_stateless_suggestion_request::GeneratorResource::Generator(
                v.into(),
            ),
        );
        self
    }

    /// Sets the value of [generator_resource][crate::model::GenerateStatelessSuggestionRequest::generator_resource]
    /// to hold a `GeneratorName`.
    ///
    /// Note that all the setters affecting `generator_resource` are
    /// mutually exclusive.
    pub fn set_generator_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.generator_resource = std::option::Option::Some(
            crate::model::generate_stateless_suggestion_request::GeneratorResource::GeneratorName(
                v.into(),
            ),
        );
        self
    }
}

impl wkt::message::Message for GenerateStatelessSuggestionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GenerateStatelessSuggestionRequest"
    }
}

/// Defines additional types related to [GenerateStatelessSuggestionRequest].
pub mod generate_stateless_suggestion_request {
    #[allow(unused_imports)]
    use super::*;

    /// Generator.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum GeneratorResource {
        /// Uncreated generator. It should be a complete generator that includes all
        /// information about the generator.
        Generator(std::boxed::Box<crate::model::Generator>),
        /// The resource name of the existing created generator. Format:
        /// `projects/<Project ID>/locations/<Location ID>/generators/<Generator ID>`
        GeneratorName(std::string::String),
    }
}

/// The response message for
/// [Conversations.GenerateStatelessSuggestion][google.cloud.dialogflow.v2.Conversations.GenerateStatelessSuggestion].
///
/// [google.cloud.dialogflow.v2.Conversations.GenerateStatelessSuggestion]: crate::client::Conversations::generate_stateless_suggestion
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GenerateStatelessSuggestionResponse {
    /// Required. Generated suggestion for a conversation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub generator_suggestion: std::option::Option<crate::model::GeneratorSuggestion>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GenerateStatelessSuggestionResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [generator_suggestion][crate::model::GenerateStatelessSuggestionResponse::generator_suggestion].
    pub fn set_generator_suggestion<
        T: std::convert::Into<std::option::Option<crate::model::GeneratorSuggestion>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.generator_suggestion = v.into();
        self
    }
}

impl wkt::message::Message for GenerateStatelessSuggestionResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GenerateStatelessSuggestionResponse"
    }
}

/// The request message for
/// [Conversations.SearchKnowledge][google.cloud.dialogflow.v2.Conversations.SearchKnowledge].
///
/// [google.cloud.dialogflow.v2.Conversations.SearchKnowledge]: crate::client::Conversations::search_knowledge
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SearchKnowledgeRequest {
    /// Required. The parent resource contains the conversation profile
    /// Format: 'projects/\<Project ID\>' or `projects/<Project
    /// ID>/locations/<Location ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The natural language text query for knowledge search.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query: std::option::Option<crate::model::TextInput>,

    /// Required. The conversation profile used to configure the search.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversationProfiles/<Conversation Profile ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation_profile: std::string::String,

    /// Required. The ID of the search session.
    /// The session_id can be combined with Dialogflow V3 Agent ID retrieved from
    /// conversation profile or on its own to identify a search session. The search
    /// history of the same session will impact the search result. It's up to the
    /// API caller to choose an appropriate `Session ID`. It can be a random number
    /// or some type of session identifiers (preferably hashed). The length must
    /// not exceed 36 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub session_id: std::string::String,

    /// Optional. The conversation (between human agent and end user) where the
    /// search request is triggered. Format: `projects/<Project
    /// ID>/locations/<Location ID>/conversations/<Conversation ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation: std::string::String,

    /// Optional. The name of the latest conversation message when the request is
    /// triggered.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/messages/<Message ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub latest_message: std::string::String,

    /// Optional. The source of the query in the request.
    pub query_source: crate::model::search_knowledge_request::QuerySource,

    /// Optional. Information about the end-user to improve the relevance and
    /// accuracy of generative answers.
    ///
    /// This will be interpreted and used by a language model, so, for good
    /// results, the data should be self-descriptive, and in a simple structure.
    ///
    /// Example:
    ///
    /// ```norust
    /// {
    ///   "subscription plan": "Business Premium Plus",
    ///   "devices owned": [
    ///     {"model": "Google Pixel 7"},
    ///     {"model": "Google Pixel Tablet"}
    ///   ]
    /// }
    /// ```
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_user_metadata: std::option::Option<wkt::Struct>,

    /// Optional. Configuration specific to search queries with data stores.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub search_config: std::option::Option<crate::model::search_knowledge_request::SearchConfig>,

    /// Optional. Whether to search the query exactly without query rewrite.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub exact_search: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SearchKnowledgeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::SearchKnowledgeRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [query][crate::model::SearchKnowledgeRequest::query].
    pub fn set_query<T: std::convert::Into<std::option::Option<crate::model::TextInput>>>(
        mut self,
        v: T,
    ) -> Self {
        self.query = v.into();
        self
    }

    /// Sets the value of [conversation_profile][crate::model::SearchKnowledgeRequest::conversation_profile].
    pub fn set_conversation_profile<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_profile = v.into();
        self
    }

    /// Sets the value of [session_id][crate::model::SearchKnowledgeRequest::session_id].
    pub fn set_session_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.session_id = v.into();
        self
    }

    /// Sets the value of [conversation][crate::model::SearchKnowledgeRequest::conversation].
    pub fn set_conversation<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.conversation = v.into();
        self
    }

    /// Sets the value of [latest_message][crate::model::SearchKnowledgeRequest::latest_message].
    pub fn set_latest_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.latest_message = v.into();
        self
    }

    /// Sets the value of [query_source][crate::model::SearchKnowledgeRequest::query_source].
    pub fn set_query_source<
        T: std::convert::Into<crate::model::search_knowledge_request::QuerySource>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query_source = v.into();
        self
    }

    /// Sets the value of [end_user_metadata][crate::model::SearchKnowledgeRequest::end_user_metadata].
    pub fn set_end_user_metadata<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_user_metadata = v.into();
        self
    }

    /// Sets the value of [search_config][crate::model::SearchKnowledgeRequest::search_config].
    pub fn set_search_config<
        T: std::convert::Into<
                std::option::Option<crate::model::search_knowledge_request::SearchConfig>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.search_config = v.into();
        self
    }

    /// Sets the value of [exact_search][crate::model::SearchKnowledgeRequest::exact_search].
    pub fn set_exact_search<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.exact_search = v.into();
        self
    }
}

impl wkt::message::Message for SearchKnowledgeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SearchKnowledgeRequest"
    }
}

/// Defines additional types related to [SearchKnowledgeRequest].
pub mod search_knowledge_request {
    #[allow(unused_imports)]
    use super::*;

    /// Configuration specific to search queries with data stores.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SearchConfig {
        /// Optional. Boost specifications for data stores.
        ///
        /// Maps from datastore name to their boost configuration. Do not specify
        /// more than one BoostSpecs for each datastore name. If multiple BoostSpecs
        /// are provided for the same datastore name, the behavior is undefined.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub boost_specs:
            std::vec::Vec<crate::model::search_knowledge_request::search_config::BoostSpecs>,

        /// Optional. Filter specification for data store queries.
        ///
        /// TMaps from datastore name to the filter expression for that datastore. Do
        /// not specify more than one FilterSpecs for each datastore name. If
        /// multiple FilterSpecs are provided for the same datastore name, the
        /// behavior is undefined.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub filter_specs:
            std::vec::Vec<crate::model::search_knowledge_request::search_config::FilterSpecs>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SearchConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [boost_specs][crate::model::search_knowledge_request::SearchConfig::boost_specs].
        pub fn set_boost_specs<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<
                    crate::model::search_knowledge_request::search_config::BoostSpecs,
                >,
        {
            use std::iter::Iterator;
            self.boost_specs = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [filter_specs][crate::model::search_knowledge_request::SearchConfig::filter_specs].
        pub fn set_filter_specs<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<
                    crate::model::search_knowledge_request::search_config::FilterSpecs,
                >,
        {
            use std::iter::Iterator;
            self.filter_specs = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for SearchConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.SearchKnowledgeRequest.SearchConfig"
        }
    }

    /// Defines additional types related to [SearchConfig].
    pub mod search_config {
        #[allow(unused_imports)]
        use super::*;

        /// Boost specifications for data stores.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct BoostSpecs {
            /// Optional. Data Stores where the boosting configuration is applied. The
            /// full names of the referenced data stores. Formats:
            /// `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`
            /// `projects/{project}/locations/{location}/dataStores/{data_store}`
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub data_stores: std::vec::Vec<std::string::String>,

            /// Optional. A list of boosting specifications.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub spec: std::vec::Vec<
                crate::model::search_knowledge_request::search_config::boost_specs::BoostSpec,
            >,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl BoostSpecs {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [data_stores][crate::model::search_knowledge_request::search_config::BoostSpecs::data_stores].
            pub fn set_data_stores<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<std::string::String>,
            {
                use std::iter::Iterator;
                self.data_stores = v.into_iter().map(|i| i.into()).collect();
                self
            }

            /// Sets the value of [spec][crate::model::search_knowledge_request::search_config::BoostSpecs::spec].
            pub fn set_spec<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<crate::model::search_knowledge_request::search_config::boost_specs::BoostSpec>
            {
                use std::iter::Iterator;
                self.spec = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for BoostSpecs {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.SearchKnowledgeRequest.SearchConfig.BoostSpecs"
            }
        }

        /// Defines additional types related to [BoostSpecs].
        pub mod boost_specs {
            #[allow(unused_imports)]
            use super::*;

            /// Boost specification to boost certain documents.
            /// A copy of google.cloud.discoveryengine.v1main.BoostSpec, field
            /// documentation is available at
            /// <https://cloud.google.com/generative-ai-app-builder/docs/reference/rest/v1alpha/BoostSpec>
            #[serde_with::serde_as]
            #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(default, rename_all = "camelCase")]
            #[non_exhaustive]
            pub struct BoostSpec {

                /// Optional. Condition boost specifications. If a document matches
                /// multiple conditions in the specifications, boost scores from these
                /// specifications are all applied and combined in a non-linear way.
                /// Maximum number of specifications is 20.
                #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
                pub condition_boost_specs: std::vec::Vec<crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::ConditionBoostSpec>,

                #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
                _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
            }

            impl BoostSpec {
                pub fn new() -> Self {
                    std::default::Default::default()
                }

                /// Sets the value of [condition_boost_specs][crate::model::search_knowledge_request::search_config::boost_specs::BoostSpec::condition_boost_specs].
                pub fn set_condition_boost_specs<T, V>(mut self, v: T) -> Self
                where
                    T: std::iter::IntoIterator<Item = V>,
                    V: std::convert::Into<crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::ConditionBoostSpec>
                {
                    use std::iter::Iterator;
                    self.condition_boost_specs = v.into_iter().map(|i| i.into()).collect();
                    self
                }
            }

            impl wkt::message::Message for BoostSpec {
                fn typename() -> &'static str {
                    "type.googleapis.com/google.cloud.dialogflow.v2.SearchKnowledgeRequest.SearchConfig.BoostSpecs.BoostSpec"
                }
            }

            /// Defines additional types related to [BoostSpec].
            pub mod boost_spec {
                #[allow(unused_imports)]
                use super::*;

                /// Boost applies to documents which match a condition.
                #[serde_with::serde_as]
                #[derive(
                    Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize,
                )]
                #[serde(default, rename_all = "camelCase")]
                #[non_exhaustive]
                pub struct ConditionBoostSpec {

                    /// Optional. An expression which specifies a boost condition. The
                    /// syntax and supported fields are the same as a filter expression.
                    /// Examples:
                    ///
                    /// * To boost documents with document ID "doc_1" or "doc_2", and
                    ///   color
                    ///   "Red" or "Blue":
                    ///   * (id: ANY("doc_1", "doc_2")) AND (color: ANY("Red","Blue"))
                    #[serde(skip_serializing_if = "std::string::String::is_empty")]
                    pub condition: std::string::String,

                    /// Optional. Strength of the condition boost, which should be in [-1,
                    /// 1]. Negative boost means demotion. Default is 0.0.
                    ///
                    /// Setting to 1.0 gives the document a big promotion. However, it does
                    /// not necessarily mean that the boosted document will be the top
                    /// result at all times, nor that other documents will be excluded.
                    /// Results could still be shown even when none of them matches the
                    /// condition. And results that are significantly more relevant to the
                    /// search query can still trump your heavily favored but irrelevant
                    /// documents.
                    ///
                    /// Setting to -1.0 gives the document a big demotion. However, results
                    /// that are deeply relevant might still be shown. The document will
                    /// have an upstream battle to get a fairly high ranking, but it is not
                    /// blocked out completely.
                    ///
                    /// Setting to 0.0 means no boost applied. The boosting condition is
                    /// ignored.
                    #[serde(skip_serializing_if = "wkt::internal::is_default")]
                    pub boost: f32,

                    /// Optional. Complex specification for custom ranking based on
                    /// customer defined attribute value.
                    #[serde(skip_serializing_if = "std::option::Option::is_none")]
                    pub boost_control_spec: std::option::Option<crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::condition_boost_spec::BoostControlSpec>,

                    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
                    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
                }

                impl ConditionBoostSpec {
                    pub fn new() -> Self {
                        std::default::Default::default()
                    }

                    /// Sets the value of [condition][crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::ConditionBoostSpec::condition].
                    pub fn set_condition<T: std::convert::Into<std::string::String>>(
                        mut self,
                        v: T,
                    ) -> Self {
                        self.condition = v.into();
                        self
                    }

                    /// Sets the value of [boost][crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::ConditionBoostSpec::boost].
                    pub fn set_boost<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
                        self.boost = v.into();
                        self
                    }

                    /// Sets the value of [boost_control_spec][crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::ConditionBoostSpec::boost_control_spec].
                    pub fn set_boost_control_spec<T: std::convert::Into<std::option::Option<crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::condition_boost_spec::BoostControlSpec>>>(mut self, v: T) -> Self{
                        self.boost_control_spec = v.into();
                        self
                    }
                }

                impl wkt::message::Message for ConditionBoostSpec {
                    fn typename() -> &'static str {
                        "type.googleapis.com/google.cloud.dialogflow.v2.SearchKnowledgeRequest.SearchConfig.BoostSpecs.BoostSpec.ConditionBoostSpec"
                    }
                }

                /// Defines additional types related to [ConditionBoostSpec].
                pub mod condition_boost_spec {
                    #[allow(unused_imports)]
                    use super::*;

                    /// Specification for custom ranking based on customer specified
                    /// attribute
                    /// value. It provides more controls for customized ranking than the
                    /// simple (condition, boost) combination above.
                    #[serde_with::serde_as]
                    #[derive(
                        Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize,
                    )]
                    #[serde(default, rename_all = "camelCase")]
                    #[non_exhaustive]
                    pub struct BoostControlSpec {

                        /// Optional. The name of the field whose value will be used to
                        /// determine the boost amount.
                        #[serde(skip_serializing_if = "std::string::String::is_empty")]
                        pub field_name: std::string::String,

                        /// Optional. The attribute type to be used to determine the boost
                        /// amount. The attribute value can be derived from the field value
                        /// of the specified field_name. In the case of numerical it is
                        /// straightforward i.e. attribute_value = numerical_field_value. In
                        /// the case of freshness however, attribute_value = (time.now() -
                        /// datetime_field_value).
                        pub attribute_type: crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::condition_boost_spec::boost_control_spec::AttributeType,

                        /// Optional. The interpolation type to be applied to connect the
                        /// control points listed below.
                        pub interpolation_type: crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::condition_boost_spec::boost_control_spec::InterpolationType,

                        /// Optional. The control points used to define the curve. The
                        /// monotonic function (defined through the interpolation_type above)
                        /// passes through the control points listed here.
                        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
                        pub control_points: std::vec::Vec<crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::condition_boost_spec::boost_control_spec::ControlPoint>,

                        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
                        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
                    }

                    impl BoostControlSpec {
                        pub fn new() -> Self {
                            std::default::Default::default()
                        }

                        /// Sets the value of [field_name][crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::condition_boost_spec::BoostControlSpec::field_name].
                        pub fn set_field_name<T: std::convert::Into<std::string::String>>(
                            mut self,
                            v: T,
                        ) -> Self {
                            self.field_name = v.into();
                            self
                        }

                        /// Sets the value of [attribute_type][crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::condition_boost_spec::BoostControlSpec::attribute_type].
                        pub fn set_attribute_type<T: std::convert::Into<crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::condition_boost_spec::boost_control_spec::AttributeType>>(mut self, v: T) -> Self{
                            self.attribute_type = v.into();
                            self
                        }

                        /// Sets the value of [interpolation_type][crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::condition_boost_spec::BoostControlSpec::interpolation_type].
                        pub fn set_interpolation_type<T: std::convert::Into<crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::condition_boost_spec::boost_control_spec::InterpolationType>>(mut self, v: T) -> Self{
                            self.interpolation_type = v.into();
                            self
                        }

                        /// Sets the value of [control_points][crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::condition_boost_spec::BoostControlSpec::control_points].
                        pub fn set_control_points<T, V>(mut self, v: T) -> Self
                        where
                            T: std::iter::IntoIterator<Item = V>,
                            V: std::convert::Into<crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::condition_boost_spec::boost_control_spec::ControlPoint>
                        {
                            use std::iter::Iterator;
                            self.control_points = v.into_iter().map(|i| i.into()).collect();
                            self
                        }
                    }

                    impl wkt::message::Message for BoostControlSpec {
                        fn typename() -> &'static str {
                            "type.googleapis.com/google.cloud.dialogflow.v2.SearchKnowledgeRequest.SearchConfig.BoostSpecs.BoostSpec.ConditionBoostSpec.BoostControlSpec"
                        }
                    }

                    /// Defines additional types related to [BoostControlSpec].
                    pub mod boost_control_spec {
                        #[allow(unused_imports)]
                        use super::*;

                        /// The control points used to define the curve. The curve defined
                        /// through these control points can only be monotonically increasing
                        /// or decreasing(constant values are acceptable).
                        #[serde_with::serde_as]
                        #[derive(
                            Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize,
                        )]
                        #[serde(default, rename_all = "camelCase")]
                        #[non_exhaustive]
                        pub struct ControlPoint {
                            /// Optional. Can be one of:
                            ///
                            /// . The numerical field value.
                            /// . The duration spec for freshness:
                            ///   The value must be formatted as an XSD `dayTimeDuration` value
                            ///   (a restricted subset of an ISO 8601 duration value). The
                            ///   pattern for this is: `[nD][T[nH][nM][nS]]`.
                            #[serde(skip_serializing_if = "std::string::String::is_empty")]
                            pub attribute_value: std::string::String,

                            /// Optional. The value between -1 to 1 by which to boost the score
                            /// if the attribute_value evaluates to the value specified above.
                            #[serde(skip_serializing_if = "wkt::internal::is_default")]
                            pub boost_amount: f32,

                            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
                            _unknown_fields:
                                serde_json::Map<std::string::String, serde_json::Value>,
                        }

                        impl ControlPoint {
                            pub fn new() -> Self {
                                std::default::Default::default()
                            }

                            /// Sets the value of [attribute_value][crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::condition_boost_spec::boost_control_spec::ControlPoint::attribute_value].
                            pub fn set_attribute_value<
                                T: std::convert::Into<std::string::String>,
                            >(
                                mut self,
                                v: T,
                            ) -> Self {
                                self.attribute_value = v.into();
                                self
                            }

                            /// Sets the value of [boost_amount][crate::model::search_knowledge_request::search_config::boost_specs::boost_spec::condition_boost_spec::boost_control_spec::ControlPoint::boost_amount].
                            pub fn set_boost_amount<T: std::convert::Into<f32>>(
                                mut self,
                                v: T,
                            ) -> Self {
                                self.boost_amount = v.into();
                                self
                            }
                        }

                        impl wkt::message::Message for ControlPoint {
                            fn typename() -> &'static str {
                                "type.googleapis.com/google.cloud.dialogflow.v2.SearchKnowledgeRequest.SearchConfig.BoostSpecs.BoostSpec.ConditionBoostSpec.BoostControlSpec.ControlPoint"
                            }
                        }

                        /// The attribute(or function) for which the custom ranking is to be
                        /// applied.
                        ///
                        /// # Working with unknown values
                        ///
                        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
                        /// additional enum variants at any time. Adding new variants is not considered
                        /// a breaking change. Applications should write their code in anticipation of:
                        ///
                        /// - New values appearing in future releases of the client library, **and**
                        /// - New values received dynamically, without application changes.
                        ///
                        /// Please consult the [Working with enums] section in the user guide for some
                        /// guidelines.
                        ///
                        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
                        #[derive(Clone, Debug, PartialEq)]
                        #[non_exhaustive]
                        pub enum AttributeType {
                            /// Unspecified AttributeType.
                            Unspecified,
                            /// The value of the numerical field will be used to dynamically
                            /// update the boost amount. In this case, the attribute_value (the
                            /// x value) of the control point will be the actual value of the
                            /// numerical field for which the boost_amount is specified.
                            Numerical,
                            /// For the freshness use case the attribute value will be the
                            /// duration between the current time and the date in the datetime
                            /// field specified. The value must be formatted as an XSD
                            /// `dayTimeDuration` value (a restricted subset of an ISO 8601
                            /// duration value). The pattern for this is:
                            /// `[nD][T[nH][nM][nS]]`. E.g. `5D`, `3DT12H30M`, `T24H`.
                            Freshness,
                            /// If set, the enum was initialized with an unknown value.
                            ///
                            /// Applications can examine the value using [AttributeType::value] or
                            /// [AttributeType::name].
                            UnknownValue(attribute_type::UnknownValue),
                        }

                        #[doc(hidden)]
                        pub mod attribute_type {
                            #[allow(unused_imports)]
                            use super::*;
                            #[derive(Clone, Debug, PartialEq)]
                            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
                        }

                        impl AttributeType {
                            /// Gets the enum value.
                            ///
                            /// Returns `None` if the enum contains an unknown value deserialized from
                            /// the string representation of enums.
                            pub fn value(&self) -> std::option::Option<i32> {
                                match self {
                                    Self::Unspecified => std::option::Option::Some(0),
                                    Self::Numerical => std::option::Option::Some(1),
                                    Self::Freshness => std::option::Option::Some(2),
                                    Self::UnknownValue(u) => u.0.value(),
                                }
                            }

                            /// Gets the enum value as a string.
                            ///
                            /// Returns `None` if the enum contains an unknown value deserialized from
                            /// the integer representation of enums.
                            pub fn name(&self) -> std::option::Option<&str> {
                                match self {
                                    Self::Unspecified => {
                                        std::option::Option::Some("ATTRIBUTE_TYPE_UNSPECIFIED")
                                    }
                                    Self::Numerical => std::option::Option::Some("NUMERICAL"),
                                    Self::Freshness => std::option::Option::Some("FRESHNESS"),
                                    Self::UnknownValue(u) => u.0.name(),
                                }
                            }
                        }

                        impl std::default::Default for AttributeType {
                            fn default() -> Self {
                                use std::convert::From;
                                Self::from(0)
                            }
                        }

                        impl std::fmt::Display for AttributeType {
                            fn fmt(
                                &self,
                                f: &mut std::fmt::Formatter<'_>,
                            ) -> std::result::Result<(), std::fmt::Error>
                            {
                                wkt::internal::display_enum(f, self.name(), self.value())
                            }
                        }

                        impl std::convert::From<i32> for AttributeType {
                            fn from(value: i32) -> Self {
                                match value {
                                    0 => Self::Unspecified,
                                    1 => Self::Numerical,
                                    2 => Self::Freshness,
                                    _ => Self::UnknownValue(attribute_type::UnknownValue(
                                        wkt::internal::UnknownEnumValue::Integer(value),
                                    )),
                                }
                            }
                        }

                        impl std::convert::From<&str> for AttributeType {
                            fn from(value: &str) -> Self {
                                use std::string::ToString;
                                match value {
                                    "ATTRIBUTE_TYPE_UNSPECIFIED" => Self::Unspecified,
                                    "NUMERICAL" => Self::Numerical,
                                    "FRESHNESS" => Self::Freshness,
                                    _ => Self::UnknownValue(attribute_type::UnknownValue(
                                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                                    )),
                                }
                            }
                        }

                        impl serde::ser::Serialize for AttributeType {
                            fn serialize<S>(
                                &self,
                                serializer: S,
                            ) -> std::result::Result<S::Ok, S::Error>
                            where
                                S: serde::Serializer,
                            {
                                match self {
                                    Self::Unspecified => serializer.serialize_i32(0),
                                    Self::Numerical => serializer.serialize_i32(1),
                                    Self::Freshness => serializer.serialize_i32(2),
                                    Self::UnknownValue(u) => u.0.serialize(serializer),
                                }
                            }
                        }

                        impl<'de> serde::de::Deserialize<'de> for AttributeType {
                            fn deserialize<D>(
                                deserializer: D,
                            ) -> std::result::Result<Self, D::Error>
                            where
                                D: serde::Deserializer<'de>,
                            {
                                deserializer.deserialize_any(wkt::internal::EnumVisitor::<AttributeType>::new(
                                    ".google.cloud.dialogflow.v2.SearchKnowledgeRequest.SearchConfig.BoostSpecs.BoostSpec.ConditionBoostSpec.BoostControlSpec.AttributeType"))
                            }
                        }

                        /// The interpolation type to be applied. Default will be linear
                        /// (Piecewise Linear).
                        ///
                        /// # Working with unknown values
                        ///
                        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
                        /// additional enum variants at any time. Adding new variants is not considered
                        /// a breaking change. Applications should write their code in anticipation of:
                        ///
                        /// - New values appearing in future releases of the client library, **and**
                        /// - New values received dynamically, without application changes.
                        ///
                        /// Please consult the [Working with enums] section in the user guide for some
                        /// guidelines.
                        ///
                        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
                        #[derive(Clone, Debug, PartialEq)]
                        #[non_exhaustive]
                        pub enum InterpolationType {
                            /// Interpolation type is unspecified. In this case, it defaults to
                            /// Linear.
                            Unspecified,
                            /// Piecewise linear interpolation will be applied.
                            Linear,
                            /// If set, the enum was initialized with an unknown value.
                            ///
                            /// Applications can examine the value using [InterpolationType::value] or
                            /// [InterpolationType::name].
                            UnknownValue(interpolation_type::UnknownValue),
                        }

                        #[doc(hidden)]
                        pub mod interpolation_type {
                            #[allow(unused_imports)]
                            use super::*;
                            #[derive(Clone, Debug, PartialEq)]
                            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
                        }

                        impl InterpolationType {
                            /// Gets the enum value.
                            ///
                            /// Returns `None` if the enum contains an unknown value deserialized from
                            /// the string representation of enums.
                            pub fn value(&self) -> std::option::Option<i32> {
                                match self {
                                    Self::Unspecified => std::option::Option::Some(0),
                                    Self::Linear => std::option::Option::Some(1),
                                    Self::UnknownValue(u) => u.0.value(),
                                }
                            }

                            /// Gets the enum value as a string.
                            ///
                            /// Returns `None` if the enum contains an unknown value deserialized from
                            /// the integer representation of enums.
                            pub fn name(&self) -> std::option::Option<&str> {
                                match self {
                                    Self::Unspecified => {
                                        std::option::Option::Some("INTERPOLATION_TYPE_UNSPECIFIED")
                                    }
                                    Self::Linear => std::option::Option::Some("LINEAR"),
                                    Self::UnknownValue(u) => u.0.name(),
                                }
                            }
                        }

                        impl std::default::Default for InterpolationType {
                            fn default() -> Self {
                                use std::convert::From;
                                Self::from(0)
                            }
                        }

                        impl std::fmt::Display for InterpolationType {
                            fn fmt(
                                &self,
                                f: &mut std::fmt::Formatter<'_>,
                            ) -> std::result::Result<(), std::fmt::Error>
                            {
                                wkt::internal::display_enum(f, self.name(), self.value())
                            }
                        }

                        impl std::convert::From<i32> for InterpolationType {
                            fn from(value: i32) -> Self {
                                match value {
                                    0 => Self::Unspecified,
                                    1 => Self::Linear,
                                    _ => Self::UnknownValue(interpolation_type::UnknownValue(
                                        wkt::internal::UnknownEnumValue::Integer(value),
                                    )),
                                }
                            }
                        }

                        impl std::convert::From<&str> for InterpolationType {
                            fn from(value: &str) -> Self {
                                use std::string::ToString;
                                match value {
                                    "INTERPOLATION_TYPE_UNSPECIFIED" => Self::Unspecified,
                                    "LINEAR" => Self::Linear,
                                    _ => Self::UnknownValue(interpolation_type::UnknownValue(
                                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                                    )),
                                }
                            }
                        }

                        impl serde::ser::Serialize for InterpolationType {
                            fn serialize<S>(
                                &self,
                                serializer: S,
                            ) -> std::result::Result<S::Ok, S::Error>
                            where
                                S: serde::Serializer,
                            {
                                match self {
                                    Self::Unspecified => serializer.serialize_i32(0),
                                    Self::Linear => serializer.serialize_i32(1),
                                    Self::UnknownValue(u) => u.0.serialize(serializer),
                                }
                            }
                        }

                        impl<'de> serde::de::Deserialize<'de> for InterpolationType {
                            fn deserialize<D>(
                                deserializer: D,
                            ) -> std::result::Result<Self, D::Error>
                            where
                                D: serde::Deserializer<'de>,
                            {
                                deserializer.deserialize_any(wkt::internal::EnumVisitor::<InterpolationType>::new(
                                    ".google.cloud.dialogflow.v2.SearchKnowledgeRequest.SearchConfig.BoostSpecs.BoostSpec.ConditionBoostSpec.BoostControlSpec.InterpolationType"))
                            }
                        }
                    }
                }
            }
        }

        /// Filter specification for data store queries.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct FilterSpecs {
            /// Optional. The data store where the filter configuration is applied.
            /// Full resource name of data store, such as
            /// projects/{project}/locations/{location}/collections/{collectionId}/
            /// dataStores/{dataStoreId}.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub data_stores: std::vec::Vec<std::string::String>,

            /// Optional. The filter expression to be applied.
            /// Expression syntax is documented at
            /// <https://cloud.google.com/generative-ai-app-builder/docs/filter-search-metadata#filter-expression-syntax>
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub filter: std::string::String,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl FilterSpecs {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [filter][crate::model::search_knowledge_request::search_config::FilterSpecs::filter].
            pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.filter = v.into();
                self
            }

            /// Sets the value of [data_stores][crate::model::search_knowledge_request::search_config::FilterSpecs::data_stores].
            pub fn set_data_stores<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<std::string::String>,
            {
                use std::iter::Iterator;
                self.data_stores = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for FilterSpecs {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.SearchKnowledgeRequest.SearchConfig.FilterSpecs"
            }
        }
    }

    /// The source of the query. We use QuerySource to distinguish queries directly
    /// entered by agents and suggested queries from
    /// [Participants.SuggestKnowledgeAssist][google.cloud.dialogflow.v2.Participants.SuggestKnowledgeAssist].
    /// If SUGGESTED_QUERY source is specified, we will treat it as a continuation
    /// of a SuggestKnowledgeAssist call.
    ///
    /// [google.cloud.dialogflow.v2.Participants.SuggestKnowledgeAssist]: crate::client::Participants::suggest_knowledge_assist
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum QuerySource {
        /// Unknown query source.
        Unspecified,
        /// The query is from agents.
        AgentQuery,
        /// The query is a suggested query from
        /// [Participants.SuggestKnowledgeAssist][google.cloud.dialogflow.v2.Participants.SuggestKnowledgeAssist].
        ///
        /// [google.cloud.dialogflow.v2.Participants.SuggestKnowledgeAssist]: crate::client::Participants::suggest_knowledge_assist
        SuggestedQuery,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [QuerySource::value] or
        /// [QuerySource::name].
        UnknownValue(query_source::UnknownValue),
    }

    #[doc(hidden)]
    pub mod query_source {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl QuerySource {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::AgentQuery => std::option::Option::Some(1),
                Self::SuggestedQuery => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("QUERY_SOURCE_UNSPECIFIED"),
                Self::AgentQuery => std::option::Option::Some("AGENT_QUERY"),
                Self::SuggestedQuery => std::option::Option::Some("SUGGESTED_QUERY"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for QuerySource {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for QuerySource {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for QuerySource {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::AgentQuery,
                2 => Self::SuggestedQuery,
                _ => Self::UnknownValue(query_source::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for QuerySource {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "QUERY_SOURCE_UNSPECIFIED" => Self::Unspecified,
                "AGENT_QUERY" => Self::AgentQuery,
                "SUGGESTED_QUERY" => Self::SuggestedQuery,
                _ => Self::UnknownValue(query_source::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for QuerySource {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::AgentQuery => serializer.serialize_i32(1),
                Self::SuggestedQuery => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for QuerySource {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<QuerySource>::new(
                ".google.cloud.dialogflow.v2.SearchKnowledgeRequest.QuerySource",
            ))
        }
    }
}

/// The response message for
/// [Conversations.SearchKnowledge][google.cloud.dialogflow.v2.Conversations.SearchKnowledge].
///
/// [google.cloud.dialogflow.v2.Conversations.SearchKnowledge]: crate::client::Conversations::search_knowledge
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SearchKnowledgeResponse {
    /// Most relevant snippets extracted from articles in the given knowledge base,
    /// ordered by confidence.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub answers: std::vec::Vec<crate::model::SearchKnowledgeAnswer>,

    /// The rewritten query used to search knowledge.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub rewritten_query: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SearchKnowledgeResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [rewritten_query][crate::model::SearchKnowledgeResponse::rewritten_query].
    pub fn set_rewritten_query<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.rewritten_query = v.into();
        self
    }

    /// Sets the value of [answers][crate::model::SearchKnowledgeResponse::answers].
    pub fn set_answers<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SearchKnowledgeAnswer>,
    {
        use std::iter::Iterator;
        self.answers = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SearchKnowledgeResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SearchKnowledgeResponse"
    }
}

/// Represents a SearchKnowledge answer.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SearchKnowledgeAnswer {
    /// The piece of text from the knowledge base documents that answers
    /// the search query
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub answer: std::string::String,

    /// The type of the answer.
    pub answer_type: crate::model::search_knowledge_answer::AnswerType,

    /// All sources used to generate the answer.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub answer_sources: std::vec::Vec<crate::model::search_knowledge_answer::AnswerSource>,

    /// The name of the answer record.
    /// Format: `projects/<Project ID>/locations/<location ID>/answer
    /// Records/<Answer Record ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub answer_record: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SearchKnowledgeAnswer {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [answer][crate::model::SearchKnowledgeAnswer::answer].
    pub fn set_answer<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.answer = v.into();
        self
    }

    /// Sets the value of [answer_type][crate::model::SearchKnowledgeAnswer::answer_type].
    pub fn set_answer_type<
        T: std::convert::Into<crate::model::search_knowledge_answer::AnswerType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.answer_type = v.into();
        self
    }

    /// Sets the value of [answer_record][crate::model::SearchKnowledgeAnswer::answer_record].
    pub fn set_answer_record<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.answer_record = v.into();
        self
    }

    /// Sets the value of [answer_sources][crate::model::SearchKnowledgeAnswer::answer_sources].
    pub fn set_answer_sources<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::search_knowledge_answer::AnswerSource>,
    {
        use std::iter::Iterator;
        self.answer_sources = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SearchKnowledgeAnswer {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SearchKnowledgeAnswer"
    }
}

/// Defines additional types related to [SearchKnowledgeAnswer].
pub mod search_knowledge_answer {
    #[allow(unused_imports)]
    use super::*;

    /// The sources of the answers.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AnswerSource {
        /// The title of the article.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub title: std::string::String,

        /// The URI of the article.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub uri: std::string::String,

        /// The relevant snippet of the article.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub snippet: std::string::String,

        /// Metadata associated with the article.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub metadata: std::option::Option<wkt::Struct>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl AnswerSource {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [title][crate::model::search_knowledge_answer::AnswerSource::title].
        pub fn set_title<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.title = v.into();
            self
        }

        /// Sets the value of [uri][crate::model::search_knowledge_answer::AnswerSource::uri].
        pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.uri = v.into();
            self
        }

        /// Sets the value of [snippet][crate::model::search_knowledge_answer::AnswerSource::snippet].
        pub fn set_snippet<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.snippet = v.into();
            self
        }

        /// Sets the value of [metadata][crate::model::search_knowledge_answer::AnswerSource::metadata].
        pub fn set_metadata<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
            mut self,
            v: T,
        ) -> Self {
            self.metadata = v.into();
            self
        }
    }

    impl wkt::message::Message for AnswerSource {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.SearchKnowledgeAnswer.AnswerSource"
        }
    }

    /// The type of the answer.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum AnswerType {
        /// The answer has a unspecified type.
        Unspecified,
        /// The answer is from FAQ documents.
        Faq,
        /// The answer is from generative model.
        Generative,
        /// The answer is from intent matching.
        Intent,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [AnswerType::value] or
        /// [AnswerType::name].
        UnknownValue(answer_type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod answer_type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl AnswerType {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Faq => std::option::Option::Some(1),
                Self::Generative => std::option::Option::Some(2),
                Self::Intent => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("ANSWER_TYPE_UNSPECIFIED"),
                Self::Faq => std::option::Option::Some("FAQ"),
                Self::Generative => std::option::Option::Some("GENERATIVE"),
                Self::Intent => std::option::Option::Some("INTENT"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for AnswerType {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for AnswerType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for AnswerType {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Faq,
                2 => Self::Generative,
                3 => Self::Intent,
                _ => Self::UnknownValue(answer_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for AnswerType {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "ANSWER_TYPE_UNSPECIFIED" => Self::Unspecified,
                "FAQ" => Self::Faq,
                "GENERATIVE" => Self::Generative,
                "INTENT" => Self::Intent,
                _ => Self::UnknownValue(answer_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for AnswerType {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Faq => serializer.serialize_i32(1),
                Self::Generative => serializer.serialize_i32(2),
                Self::Intent => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for AnswerType {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<AnswerType>::new(
                ".google.cloud.dialogflow.v2.SearchKnowledgeAnswer.AnswerType",
            ))
        }
    }
}

/// The request message for
/// [Conversations.GenerateSuggestions][google.cloud.dialogflow.v2.Conversations.GenerateSuggestions].
///
/// [google.cloud.dialogflow.v2.Conversations.GenerateSuggestions]: crate::client::Conversations::generate_suggestions
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GenerateSuggestionsRequest {
    /// Required. The conversation for which the suggestions are generated. Format:
    /// `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>`.
    ///
    /// The conversation must be created with a conversation profile which has
    /// generators configured in it to be able to get suggestions.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation: std::string::String,

    /// Optional. The name of the latest conversation message for which the request
    /// is triggered. Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/messages/<Message ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub latest_message: std::string::String,

    /// Optional. A list of trigger events. Only generators configured in the
    /// conversation_profile whose trigger_event is listed here will be triggered.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub trigger_events: std::vec::Vec<crate::model::TriggerEvent>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GenerateSuggestionsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation][crate::model::GenerateSuggestionsRequest::conversation].
    pub fn set_conversation<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.conversation = v.into();
        self
    }

    /// Sets the value of [latest_message][crate::model::GenerateSuggestionsRequest::latest_message].
    pub fn set_latest_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.latest_message = v.into();
        self
    }

    /// Sets the value of [trigger_events][crate::model::GenerateSuggestionsRequest::trigger_events].
    pub fn set_trigger_events<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TriggerEvent>,
    {
        use std::iter::Iterator;
        self.trigger_events = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for GenerateSuggestionsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GenerateSuggestionsRequest"
    }
}

/// Represents metadata of a conversation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ConversationInfo {
    /// Optional. The language code of the conversation data within this dataset.
    /// See <https://cloud.google.com/apis/design/standard_fields> for more
    /// information. Supports all UTF-8 languages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ConversationInfo {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [language_code][crate::model::ConversationInfo::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for ConversationInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ConversationInfo"
    }
}

/// Represents the configuration of importing a set of conversation files in
/// Google Cloud Storage.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InputConfig {
    /// Required. Where the data is from.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub source: std::option::Option<crate::model::input_config::Source>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl InputConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [source][crate::model::InputConfig::source].
    ///
    /// Note that all the setters affecting `source` are mutually
    /// exclusive.
    pub fn set_source<
        T: std::convert::Into<std::option::Option<crate::model::input_config::Source>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = v.into();
        self
    }

    /// The value of [source][crate::model::InputConfig::source]
    /// if it holds a `GcsSource`, `None` if the field is not set or
    /// holds a different branch.
    pub fn gcs_source(&self) -> std::option::Option<&std::boxed::Box<crate::model::GcsSources>> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::input_config::Source::GcsSource(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [source][crate::model::InputConfig::source]
    /// to hold a `GcsSource`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_gcs_source<T: std::convert::Into<std::boxed::Box<crate::model::GcsSources>>>(
        mut self,
        v: T,
    ) -> Self {
        self.source =
            std::option::Option::Some(crate::model::input_config::Source::GcsSource(v.into()));
        self
    }
}

impl wkt::message::Message for InputConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.InputConfig"
    }
}

/// Defines additional types related to [InputConfig].
pub mod input_config {
    #[allow(unused_imports)]
    use super::*;

    /// Required. Where the data is from.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Source {
        /// The Cloud Storage URI has the form gs://\<Google Cloud Storage bucket
        /// name\>//agent*.json. Wildcards are allowed and will be expanded into all
        /// matched JSON files, which will be read as one conversation per file.
        GcsSource(std::boxed::Box<crate::model::GcsSources>),
    }
}

/// Represents a conversation dataset that a user imports raw data into.
/// The data inside ConversationDataset can not be changed after
/// ImportConversationData finishes (and calling ImportConversationData on a
/// dataset that already has data is not allowed).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ConversationDataset {
    /// Output only. ConversationDataset resource name. Format:
    /// `projects/<Project ID>/locations/<Location
    /// ID>/conversationDatasets/<Conversation Dataset ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The display name of the dataset. Maximum of 64 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Optional. The description of the dataset. Maximum of 10000 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. Creation time of this dataset.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Input configurations set during conversation data import.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub input_config: std::option::Option<crate::model::InputConfig>,

    /// Output only. Metadata set during conversation data import.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub conversation_info: std::option::Option<crate::model::ConversationInfo>,

    /// Output only. The number of conversations this conversation dataset
    /// contains.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub conversation_count: i64,

    /// Output only. A read only boolean field reflecting Zone Isolation status of
    /// the dataset.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub satisfies_pzi: std::option::Option<bool>,

    /// Output only. A read only boolean field reflecting Zone Separation status of
    /// the dataset.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub satisfies_pzs: std::option::Option<bool>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ConversationDataset {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ConversationDataset::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::ConversationDataset::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::ConversationDataset::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ConversationDataset::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [input_config][crate::model::ConversationDataset::input_config].
    pub fn set_input_config<
        T: std::convert::Into<std::option::Option<crate::model::InputConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.input_config = v.into();
        self
    }

    /// Sets the value of [conversation_info][crate::model::ConversationDataset::conversation_info].
    pub fn set_conversation_info<
        T: std::convert::Into<std::option::Option<crate::model::ConversationInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_info = v.into();
        self
    }

    /// Sets the value of [conversation_count][crate::model::ConversationDataset::conversation_count].
    pub fn set_conversation_count<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.conversation_count = v.into();
        self
    }

    /// Sets the value of [satisfies_pzi][crate::model::ConversationDataset::satisfies_pzi].
    pub fn set_satisfies_pzi<T: std::convert::Into<std::option::Option<bool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.satisfies_pzi = v.into();
        self
    }

    /// Sets the value of [satisfies_pzs][crate::model::ConversationDataset::satisfies_pzs].
    pub fn set_satisfies_pzs<T: std::convert::Into<std::option::Option<bool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.satisfies_pzs = v.into();
        self
    }
}

impl wkt::message::Message for ConversationDataset {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ConversationDataset"
    }
}

/// The request message for
/// [ConversationDatasets.CreateConversationDataset][google.cloud.dialogflow.v2.ConversationDatasets.CreateConversationDataset].
///
/// [google.cloud.dialogflow.v2.ConversationDatasets.CreateConversationDataset]: crate::client::ConversationDatasets::create_conversation_dataset
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateConversationDatasetRequest {
    /// Required. The project to create conversation dataset for. Format:
    /// `projects/<Project ID>/locations/<Location ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The conversation dataset to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub conversation_dataset: std::option::Option<crate::model::ConversationDataset>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateConversationDatasetRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateConversationDatasetRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [conversation_dataset][crate::model::CreateConversationDatasetRequest::conversation_dataset].
    pub fn set_conversation_dataset<
        T: std::convert::Into<std::option::Option<crate::model::ConversationDataset>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_dataset = v.into();
        self
    }
}

impl wkt::message::Message for CreateConversationDatasetRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateConversationDatasetRequest"
    }
}

/// The request message for
/// [ConversationDatasets.GetConversationDataset][google.cloud.dialogflow.v2.ConversationDatasets.GetConversationDataset].
///
/// [google.cloud.dialogflow.v2.ConversationDatasets.GetConversationDataset]: crate::client::ConversationDatasets::get_conversation_dataset
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetConversationDatasetRequest {
    /// Required. The conversation dataset to retrieve. Format:
    /// `projects/<Project ID>/locations/<Location
    /// ID>/conversationDatasets/<Conversation Dataset ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetConversationDatasetRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetConversationDatasetRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetConversationDatasetRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetConversationDatasetRequest"
    }
}

/// The request message for
/// [ConversationDatasets.ListConversationDatasets][google.cloud.dialogflow.v2.ConversationDatasets.ListConversationDatasets].
///
/// [google.cloud.dialogflow.v2.ConversationDatasets.ListConversationDatasets]: crate::client::ConversationDatasets::list_conversation_datasets
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListConversationDatasetsRequest {
    /// Required. The project and location name to list all conversation datasets
    /// for. Format: `projects/<Project ID>/locations/<Location ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Maximum number of conversation datasets to return in a single
    /// page. By default 100 and at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// Optional. The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListConversationDatasetsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListConversationDatasetsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListConversationDatasetsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListConversationDatasetsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListConversationDatasetsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListConversationDatasetsRequest"
    }
}

/// The response message for
/// [ConversationDatasets.ListConversationDatasets][google.cloud.dialogflow.v2.ConversationDatasets.ListConversationDatasets].
///
/// [google.cloud.dialogflow.v2.ConversationDatasets.ListConversationDatasets]: crate::client::ConversationDatasets::list_conversation_datasets
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListConversationDatasetsResponse {
    /// The list of datasets to return.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub conversation_datasets: std::vec::Vec<crate::model::ConversationDataset>,

    /// The token to use to retrieve the next page of results, or empty if there
    /// are no more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListConversationDatasetsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListConversationDatasetsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [conversation_datasets][crate::model::ListConversationDatasetsResponse::conversation_datasets].
    pub fn set_conversation_datasets<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ConversationDataset>,
    {
        use std::iter::Iterator;
        self.conversation_datasets = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListConversationDatasetsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListConversationDatasetsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListConversationDatasetsResponse {
    type PageItem = crate::model::ConversationDataset;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.conversation_datasets
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [ConversationDatasets.DeleteConversationDataset][google.cloud.dialogflow.v2.ConversationDatasets.DeleteConversationDataset].
///
/// [google.cloud.dialogflow.v2.ConversationDatasets.DeleteConversationDataset]: crate::client::ConversationDatasets::delete_conversation_dataset
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteConversationDatasetRequest {
    /// Required. The conversation dataset to delete. Format:
    /// `projects/<Project ID>/locations/<Location
    /// ID>/conversationDatasets/<Conversation Dataset ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteConversationDatasetRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteConversationDatasetRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteConversationDatasetRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeleteConversationDatasetRequest"
    }
}

/// The request message for
/// [ConversationDatasets.ImportConversationData][google.cloud.dialogflow.v2.ConversationDatasets.ImportConversationData].
///
/// [google.cloud.dialogflow.v2.ConversationDatasets.ImportConversationData]: crate::client::ConversationDatasets::import_conversation_data
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportConversationDataRequest {
    /// Required. Dataset resource name. Format:
    /// `projects/<Project ID>/locations/<Location
    /// ID>/conversationDatasets/<Conversation Dataset ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Configuration describing where to import data from.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub input_config: std::option::Option<crate::model::InputConfig>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportConversationDataRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ImportConversationDataRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [input_config][crate::model::ImportConversationDataRequest::input_config].
    pub fn set_input_config<
        T: std::convert::Into<std::option::Option<crate::model::InputConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.input_config = v.into();
        self
    }
}

impl wkt::message::Message for ImportConversationDataRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ImportConversationDataRequest"
    }
}

/// Metadata for a
/// [ConversationDatasets.ImportConversationData][google.cloud.dialogflow.v2.ConversationDatasets.ImportConversationData]
/// operation.
///
/// [google.cloud.dialogflow.v2.ConversationDatasets.ImportConversationData]: crate::client::ConversationDatasets::import_conversation_data
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportConversationDataOperationMetadata {
    /// The resource name of the imported conversation dataset. Format:
    /// `projects/<Project ID>/locations/<Location
    /// ID>/conversationDatasets/<Conversation Dataset Id>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation_dataset: std::string::String,

    /// Partial failures are failures that don't fail the whole long running
    /// operation, e.g. single files that couldn't be read.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub partial_failures: std::vec::Vec<rpc::model::Status>,

    /// Timestamp when import conversation data request was created. The time is
    /// measured on server side.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportConversationDataOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation_dataset][crate::model::ImportConversationDataOperationMetadata::conversation_dataset].
    pub fn set_conversation_dataset<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_dataset = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ImportConversationDataOperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [partial_failures][crate::model::ImportConversationDataOperationMetadata::partial_failures].
    pub fn set_partial_failures<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<rpc::model::Status>,
    {
        use std::iter::Iterator;
        self.partial_failures = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ImportConversationDataOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ImportConversationDataOperationMetadata"
    }
}

/// Response used for
/// [ConversationDatasets.ImportConversationData][google.cloud.dialogflow.v2.ConversationDatasets.ImportConversationData]
/// long running operation.
///
/// [google.cloud.dialogflow.v2.ConversationDatasets.ImportConversationData]: crate::client::ConversationDatasets::import_conversation_data
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportConversationDataOperationResponse {
    /// The resource name of the imported conversation dataset. Format:
    /// `projects/<Project ID>/locations/<Location
    /// ID>/conversationDatasets/<Conversation Dataset Id>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation_dataset: std::string::String,

    /// Number of conversations imported successfully.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub import_count: i32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportConversationDataOperationResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation_dataset][crate::model::ImportConversationDataOperationResponse::conversation_dataset].
    pub fn set_conversation_dataset<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_dataset = v.into();
        self
    }

    /// Sets the value of [import_count][crate::model::ImportConversationDataOperationResponse::import_count].
    pub fn set_import_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.import_count = v.into();
        self
    }
}

impl wkt::message::Message for ImportConversationDataOperationResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ImportConversationDataOperationResponse"
    }
}

/// Metadata for [CreateConversationDataset][].
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateConversationDatasetOperationMetadata {
    /// The resource name of the conversation dataset that will be created. Format:
    /// `projects/<Project ID>/locations/<Location
    /// ID>/conversationDatasets/<Conversation Dataset Id>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation_dataset: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateConversationDatasetOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation_dataset][crate::model::CreateConversationDatasetOperationMetadata::conversation_dataset].
    pub fn set_conversation_dataset<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_dataset = v.into();
        self
    }
}

impl wkt::message::Message for CreateConversationDatasetOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateConversationDatasetOperationMetadata"
    }
}

/// Metadata for [DeleteConversationDataset][].
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteConversationDatasetOperationMetadata {
    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteConversationDatasetOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for DeleteConversationDatasetOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeleteConversationDatasetOperationMetadata"
    }
}

/// Represents a notification sent to Pub/Sub subscribers for conversation
/// lifecycle events.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ConversationEvent {
    /// The unique identifier of the conversation this notification
    /// refers to.
    /// Format: `projects/<Project ID>/conversations/<Conversation ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation: std::string::String,

    /// The type of the event that this notification refers to.
    #[serde(rename = "type")]
    pub r#type: crate::model::conversation_event::Type,

    /// More detailed information about an error. Only set for type
    /// UNRECOVERABLE_ERROR_IN_PHONE_CALL.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub error_status: std::option::Option<rpc::model::Status>,

    /// Payload of conversation event.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub payload: std::option::Option<crate::model::conversation_event::Payload>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ConversationEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation][crate::model::ConversationEvent::conversation].
    pub fn set_conversation<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.conversation = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::ConversationEvent::type].
    pub fn set_type<T: std::convert::Into<crate::model::conversation_event::Type>>(
        mut self,
        v: T,
    ) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [error_status][crate::model::ConversationEvent::error_status].
    pub fn set_error_status<T: std::convert::Into<std::option::Option<rpc::model::Status>>>(
        mut self,
        v: T,
    ) -> Self {
        self.error_status = v.into();
        self
    }

    /// Sets the value of [payload][crate::model::ConversationEvent::payload].
    ///
    /// Note that all the setters affecting `payload` are mutually
    /// exclusive.
    pub fn set_payload<
        T: std::convert::Into<std::option::Option<crate::model::conversation_event::Payload>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.payload = v.into();
        self
    }

    /// The value of [payload][crate::model::ConversationEvent::payload]
    /// if it holds a `NewMessagePayload`, `None` if the field is not set or
    /// holds a different branch.
    pub fn new_message_payload(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::Message>> {
        #[allow(unreachable_patterns)]
        self.payload.as_ref().and_then(|v| match v {
            crate::model::conversation_event::Payload::NewMessagePayload(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [payload][crate::model::ConversationEvent::payload]
    /// if it holds a `NewRecognitionResultPayload`, `None` if the field is not set or
    /// holds a different branch.
    pub fn new_recognition_result_payload(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::StreamingRecognitionResult>> {
        #[allow(unreachable_patterns)]
        self.payload.as_ref().and_then(|v| match v {
            crate::model::conversation_event::Payload::NewRecognitionResultPayload(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [payload][crate::model::ConversationEvent::payload]
    /// to hold a `NewMessagePayload`.
    ///
    /// Note that all the setters affecting `payload` are
    /// mutually exclusive.
    pub fn set_new_message_payload<
        T: std::convert::Into<std::boxed::Box<crate::model::Message>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.payload = std::option::Option::Some(
            crate::model::conversation_event::Payload::NewMessagePayload(v.into()),
        );
        self
    }

    /// Sets the value of [payload][crate::model::ConversationEvent::payload]
    /// to hold a `NewRecognitionResultPayload`.
    ///
    /// Note that all the setters affecting `payload` are
    /// mutually exclusive.
    pub fn set_new_recognition_result_payload<
        T: std::convert::Into<std::boxed::Box<crate::model::StreamingRecognitionResult>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.payload = std::option::Option::Some(
            crate::model::conversation_event::Payload::NewRecognitionResultPayload(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ConversationEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ConversationEvent"
    }
}

/// Defines additional types related to [ConversationEvent].
pub mod conversation_event {
    #[allow(unused_imports)]
    use super::*;

    /// Enumeration of the types of events available.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Type {
        /// Type not set.
        Unspecified,
        /// A new conversation has been opened. This is fired when a telephone call
        /// is answered, or a conversation is created via the API.
        ConversationStarted,
        /// An existing conversation has closed. This is fired when a telephone call
        /// is terminated, or a conversation is closed via the API.
        ConversationFinished,
        /// An existing conversation has received notification from Dialogflow that
        /// human intervention is required.
        HumanInterventionNeeded,
        /// An existing conversation has received a new message, either from API or
        /// telephony. It is configured in
        /// [ConversationProfile.new_message_event_notification_config][google.cloud.dialogflow.v2.ConversationProfile.new_message_event_notification_config]
        ///
        /// [google.cloud.dialogflow.v2.ConversationProfile.new_message_event_notification_config]: crate::model::ConversationProfile::new_message_event_notification_config
        NewMessage,
        /// An existing conversation has received a new speech recognition result.
        /// This is mainly for delivering intermediate transcripts. The notification
        /// is configured in
        /// [ConversationProfile.new_recognition_event_notification_config][].
        NewRecognitionResult,
        /// Unrecoverable error during a telephone call.
        ///
        /// In general non-recoverable errors only occur if something was
        /// misconfigured in the ConversationProfile corresponding to the call. After
        /// a non-recoverable error, Dialogflow may stop responding.
        ///
        /// We don't fire this event:
        ///
        /// * in an API call because we can directly return the error, or,
        /// * when we can recover from an error.
        UnrecoverableError,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [Type::value] or
        /// [Type::name].
        UnknownValue(r#type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod r#type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl Type {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::ConversationStarted => std::option::Option::Some(1),
                Self::ConversationFinished => std::option::Option::Some(2),
                Self::HumanInterventionNeeded => std::option::Option::Some(3),
                Self::NewMessage => std::option::Option::Some(5),
                Self::NewRecognitionResult => std::option::Option::Some(7),
                Self::UnrecoverableError => std::option::Option::Some(4),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("TYPE_UNSPECIFIED"),
                Self::ConversationStarted => std::option::Option::Some("CONVERSATION_STARTED"),
                Self::ConversationFinished => std::option::Option::Some("CONVERSATION_FINISHED"),
                Self::HumanInterventionNeeded => {
                    std::option::Option::Some("HUMAN_INTERVENTION_NEEDED")
                }
                Self::NewMessage => std::option::Option::Some("NEW_MESSAGE"),
                Self::NewRecognitionResult => std::option::Option::Some("NEW_RECOGNITION_RESULT"),
                Self::UnrecoverableError => std::option::Option::Some("UNRECOVERABLE_ERROR"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for Type {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for Type {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for Type {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::ConversationStarted,
                2 => Self::ConversationFinished,
                3 => Self::HumanInterventionNeeded,
                4 => Self::UnrecoverableError,
                5 => Self::NewMessage,
                7 => Self::NewRecognitionResult,
                _ => Self::UnknownValue(r#type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for Type {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "TYPE_UNSPECIFIED" => Self::Unspecified,
                "CONVERSATION_STARTED" => Self::ConversationStarted,
                "CONVERSATION_FINISHED" => Self::ConversationFinished,
                "HUMAN_INTERVENTION_NEEDED" => Self::HumanInterventionNeeded,
                "NEW_MESSAGE" => Self::NewMessage,
                "NEW_RECOGNITION_RESULT" => Self::NewRecognitionResult,
                "UNRECOVERABLE_ERROR" => Self::UnrecoverableError,
                _ => Self::UnknownValue(r#type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for Type {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::ConversationStarted => serializer.serialize_i32(1),
                Self::ConversationFinished => serializer.serialize_i32(2),
                Self::HumanInterventionNeeded => serializer.serialize_i32(3),
                Self::NewMessage => serializer.serialize_i32(5),
                Self::NewRecognitionResult => serializer.serialize_i32(7),
                Self::UnrecoverableError => serializer.serialize_i32(4),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for Type {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<Type>::new(
                ".google.cloud.dialogflow.v2.ConversationEvent.Type",
            ))
        }
    }

    /// Payload of conversation event.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Payload {
        /// Payload of NEW_MESSAGE event.
        NewMessagePayload(std::boxed::Box<crate::model::Message>),
        /// Payload of NEW_RECOGNITION_RESULT event.
        NewRecognitionResultPayload(std::boxed::Box<crate::model::StreamingRecognitionResult>),
    }
}

/// Represents a conversation model.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ConversationModel {
    /// ConversationModel resource name. Format:
    /// `projects/<Project ID>/conversationModels/<Conversation Model ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The display name of the model. At most 64 bytes long.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Output only. Creation time of this model.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Required. Datasets used to create model.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub datasets: std::vec::Vec<crate::model::InputDataset>,

    /// Output only. State of the model. A model can only serve prediction requests
    /// after it gets deployed.
    pub state: crate::model::conversation_model::State,

    /// Language code for the conversation model. If not specified, the language
    /// is en-US. Language at ConversationModel should be set for all non en-us
    /// languages.
    /// This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt)
    /// language tag. Example: "en-US".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// Output only. A read only boolean field reflecting Zone Separation
    /// status of the model.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub satisfies_pzs: std::option::Option<bool>,

    /// Output only. A read only boolean field reflecting Zone Isolation status
    /// of the model.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub satisfies_pzi: std::option::Option<bool>,

    /// Required.
    /// The model metadata that is specific to the problem type.
    /// Must match the metadata type of the dataset used to train the model.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub model_metadata: std::option::Option<crate::model::conversation_model::ModelMetadata>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ConversationModel {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ConversationModel::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::ConversationModel::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ConversationModel::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [state][crate::model::ConversationModel::state].
    pub fn set_state<T: std::convert::Into<crate::model::conversation_model::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::ConversationModel::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [satisfies_pzs][crate::model::ConversationModel::satisfies_pzs].
    pub fn set_satisfies_pzs<T: std::convert::Into<std::option::Option<bool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.satisfies_pzs = v.into();
        self
    }

    /// Sets the value of [satisfies_pzi][crate::model::ConversationModel::satisfies_pzi].
    pub fn set_satisfies_pzi<T: std::convert::Into<std::option::Option<bool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.satisfies_pzi = v.into();
        self
    }

    /// Sets the value of [datasets][crate::model::ConversationModel::datasets].
    pub fn set_datasets<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::InputDataset>,
    {
        use std::iter::Iterator;
        self.datasets = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [model_metadata][crate::model::ConversationModel::model_metadata].
    ///
    /// Note that all the setters affecting `model_metadata` are mutually
    /// exclusive.
    pub fn set_model_metadata<
        T: std::convert::Into<std::option::Option<crate::model::conversation_model::ModelMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.model_metadata = v.into();
        self
    }

    /// The value of [model_metadata][crate::model::ConversationModel::model_metadata]
    /// if it holds a `ArticleSuggestionModelMetadata`, `None` if the field is not set or
    /// holds a different branch.
    pub fn article_suggestion_model_metadata(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::ArticleSuggestionModelMetadata>> {
        #[allow(unreachable_patterns)]
        self.model_metadata.as_ref().and_then(|v| match v {
            crate::model::conversation_model::ModelMetadata::ArticleSuggestionModelMetadata(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [model_metadata][crate::model::ConversationModel::model_metadata]
    /// if it holds a `SmartReplyModelMetadata`, `None` if the field is not set or
    /// holds a different branch.
    pub fn smart_reply_model_metadata(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::SmartReplyModelMetadata>> {
        #[allow(unreachable_patterns)]
        self.model_metadata.as_ref().and_then(|v| match v {
            crate::model::conversation_model::ModelMetadata::SmartReplyModelMetadata(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [model_metadata][crate::model::ConversationModel::model_metadata]
    /// to hold a `ArticleSuggestionModelMetadata`.
    ///
    /// Note that all the setters affecting `model_metadata` are
    /// mutually exclusive.
    pub fn set_article_suggestion_model_metadata<
        T: std::convert::Into<std::boxed::Box<crate::model::ArticleSuggestionModelMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.model_metadata = std::option::Option::Some(
            crate::model::conversation_model::ModelMetadata::ArticleSuggestionModelMetadata(
                v.into(),
            ),
        );
        self
    }

    /// Sets the value of [model_metadata][crate::model::ConversationModel::model_metadata]
    /// to hold a `SmartReplyModelMetadata`.
    ///
    /// Note that all the setters affecting `model_metadata` are
    /// mutually exclusive.
    pub fn set_smart_reply_model_metadata<
        T: std::convert::Into<std::boxed::Box<crate::model::SmartReplyModelMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.model_metadata = std::option::Option::Some(
            crate::model::conversation_model::ModelMetadata::SmartReplyModelMetadata(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ConversationModel {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ConversationModel"
    }
}

/// Defines additional types related to [ConversationModel].
pub mod conversation_model {
    #[allow(unused_imports)]
    use super::*;

    /// State of the model.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum State {
        /// Should not be used, an un-set enum has this value by default.
        Unspecified,
        /// Model being created.
        Creating,
        /// Model is not deployed but ready to deploy.
        Undeployed,
        /// Model is deploying.
        Deploying,
        /// Model is deployed and ready to use.
        Deployed,
        /// Model is undeploying.
        Undeploying,
        /// Model is deleting.
        Deleting,
        /// Model is in error state. Not ready to deploy and use.
        Failed,
        /// Model is being created but the training has not started,
        /// The model may remain in this state until there is enough capacity to
        /// start training.
        Pending,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [State::value] or
        /// [State::name].
        UnknownValue(state::UnknownValue),
    }

    #[doc(hidden)]
    pub mod state {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl State {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Creating => std::option::Option::Some(1),
                Self::Undeployed => std::option::Option::Some(2),
                Self::Deploying => std::option::Option::Some(3),
                Self::Deployed => std::option::Option::Some(4),
                Self::Undeploying => std::option::Option::Some(5),
                Self::Deleting => std::option::Option::Some(6),
                Self::Failed => std::option::Option::Some(7),
                Self::Pending => std::option::Option::Some(8),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("STATE_UNSPECIFIED"),
                Self::Creating => std::option::Option::Some("CREATING"),
                Self::Undeployed => std::option::Option::Some("UNDEPLOYED"),
                Self::Deploying => std::option::Option::Some("DEPLOYING"),
                Self::Deployed => std::option::Option::Some("DEPLOYED"),
                Self::Undeploying => std::option::Option::Some("UNDEPLOYING"),
                Self::Deleting => std::option::Option::Some("DELETING"),
                Self::Failed => std::option::Option::Some("FAILED"),
                Self::Pending => std::option::Option::Some("PENDING"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for State {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Creating,
                2 => Self::Undeployed,
                3 => Self::Deploying,
                4 => Self::Deployed,
                5 => Self::Undeploying,
                6 => Self::Deleting,
                7 => Self::Failed,
                8 => Self::Pending,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for State {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "STATE_UNSPECIFIED" => Self::Unspecified,
                "CREATING" => Self::Creating,
                "UNDEPLOYED" => Self::Undeployed,
                "DEPLOYING" => Self::Deploying,
                "DEPLOYED" => Self::Deployed,
                "UNDEPLOYING" => Self::Undeploying,
                "DELETING" => Self::Deleting,
                "FAILED" => Self::Failed,
                "PENDING" => Self::Pending,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for State {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Creating => serializer.serialize_i32(1),
                Self::Undeployed => serializer.serialize_i32(2),
                Self::Deploying => serializer.serialize_i32(3),
                Self::Deployed => serializer.serialize_i32(4),
                Self::Undeploying => serializer.serialize_i32(5),
                Self::Deleting => serializer.serialize_i32(6),
                Self::Failed => serializer.serialize_i32(7),
                Self::Pending => serializer.serialize_i32(8),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for State {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<State>::new(
                ".google.cloud.dialogflow.v2.ConversationModel.State",
            ))
        }
    }

    /// Model type.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum ModelType {
        /// ModelType unspecified.
        Unspecified,
        /// ModelType smart reply dual encoder model.
        SmartReplyDualEncoderModel,
        /// ModelType smart reply bert model.
        SmartReplyBertModel,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [ModelType::value] or
        /// [ModelType::name].
        UnknownValue(model_type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod model_type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl ModelType {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::SmartReplyDualEncoderModel => std::option::Option::Some(2),
                Self::SmartReplyBertModel => std::option::Option::Some(6),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("MODEL_TYPE_UNSPECIFIED"),
                Self::SmartReplyDualEncoderModel => {
                    std::option::Option::Some("SMART_REPLY_DUAL_ENCODER_MODEL")
                }
                Self::SmartReplyBertModel => std::option::Option::Some("SMART_REPLY_BERT_MODEL"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for ModelType {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for ModelType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for ModelType {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                2 => Self::SmartReplyDualEncoderModel,
                6 => Self::SmartReplyBertModel,
                _ => Self::UnknownValue(model_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for ModelType {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "MODEL_TYPE_UNSPECIFIED" => Self::Unspecified,
                "SMART_REPLY_DUAL_ENCODER_MODEL" => Self::SmartReplyDualEncoderModel,
                "SMART_REPLY_BERT_MODEL" => Self::SmartReplyBertModel,
                _ => Self::UnknownValue(model_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for ModelType {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::SmartReplyDualEncoderModel => serializer.serialize_i32(2),
                Self::SmartReplyBertModel => serializer.serialize_i32(6),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for ModelType {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<ModelType>::new(
                ".google.cloud.dialogflow.v2.ConversationModel.ModelType",
            ))
        }
    }

    /// Required.
    /// The model metadata that is specific to the problem type.
    /// Must match the metadata type of the dataset used to train the model.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum ModelMetadata {
        /// Metadata for article suggestion models.
        ArticleSuggestionModelMetadata(
            std::boxed::Box<crate::model::ArticleSuggestionModelMetadata>,
        ),
        /// Metadata for smart reply models.
        SmartReplyModelMetadata(std::boxed::Box<crate::model::SmartReplyModelMetadata>),
    }
}

/// Represents evaluation result of a conversation model.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ConversationModelEvaluation {
    /// The resource name of the evaluation. Format:
    /// `projects/<Project ID>/conversationModels/<Conversation Model
    /// ID>/evaluations/<Evaluation ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. The display name of the model evaluation. At most 64 bytes long.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Optional. The configuration of the evaluation task.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub evaluation_config: std::option::Option<crate::model::EvaluationConfig>,

    /// Output only. Creation time of this model.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Human eval template in csv format.
    /// It takes real-world conversations provided through input dataset, generates
    /// example suggestions for customer to verify quality of the model.
    /// For Smart Reply, the generated csv file contains columns of
    /// Context, (Suggestions,Q1,Q2)*3, Actual reply.
    /// Context contains at most 10 latest messages in the conversation prior to
    /// the current suggestion.
    /// Q1: "Would you send it as the next message of agent?"
    /// Evaluated based on whether the suggest is appropriate to be sent by
    /// agent in current context.
    /// Q2: "Does the suggestion move the conversation closer to resolution?"
    /// Evaluated based on whether the suggestion provide solutions, or answers
    /// customer's question or collect information from customer to resolve the
    /// customer's issue.
    /// Actual reply column contains the actual agent reply sent in the context.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub raw_human_eval_template_csv: std::string::String,

    /// Metrics details.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub metrics: std::option::Option<crate::model::conversation_model_evaluation::Metrics>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ConversationModelEvaluation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ConversationModelEvaluation::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::ConversationModelEvaluation::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [evaluation_config][crate::model::ConversationModelEvaluation::evaluation_config].
    pub fn set_evaluation_config<
        T: std::convert::Into<std::option::Option<crate::model::EvaluationConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.evaluation_config = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ConversationModelEvaluation::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [raw_human_eval_template_csv][crate::model::ConversationModelEvaluation::raw_human_eval_template_csv].
    pub fn set_raw_human_eval_template_csv<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.raw_human_eval_template_csv = v.into();
        self
    }

    /// Sets the value of [metrics][crate::model::ConversationModelEvaluation::metrics].
    ///
    /// Note that all the setters affecting `metrics` are mutually
    /// exclusive.
    pub fn set_metrics<
        T: std::convert::Into<
                std::option::Option<crate::model::conversation_model_evaluation::Metrics>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metrics = v.into();
        self
    }

    /// The value of [metrics][crate::model::ConversationModelEvaluation::metrics]
    /// if it holds a `SmartReplyMetrics`, `None` if the field is not set or
    /// holds a different branch.
    pub fn smart_reply_metrics(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::SmartReplyMetrics>> {
        #[allow(unreachable_patterns)]
        self.metrics.as_ref().and_then(|v| match v {
            crate::model::conversation_model_evaluation::Metrics::SmartReplyMetrics(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [metrics][crate::model::ConversationModelEvaluation::metrics]
    /// to hold a `SmartReplyMetrics`.
    ///
    /// Note that all the setters affecting `metrics` are
    /// mutually exclusive.
    pub fn set_smart_reply_metrics<
        T: std::convert::Into<std::boxed::Box<crate::model::SmartReplyMetrics>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metrics = std::option::Option::Some(
            crate::model::conversation_model_evaluation::Metrics::SmartReplyMetrics(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ConversationModelEvaluation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ConversationModelEvaluation"
    }
}

/// Defines additional types related to [ConversationModelEvaluation].
pub mod conversation_model_evaluation {
    #[allow(unused_imports)]
    use super::*;

    /// Metrics details.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Metrics {
        /// Output only. Only available when model is for smart reply.
        SmartReplyMetrics(std::boxed::Box<crate::model::SmartReplyMetrics>),
    }
}

/// The configuration for model evaluation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EvaluationConfig {
    /// Required. Datasets used for evaluation.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub datasets: std::vec::Vec<crate::model::InputDataset>,

    /// Specific configurations for different models in order to do evaluation.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub model_specific_config:
        std::option::Option<crate::model::evaluation_config::ModelSpecificConfig>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl EvaluationConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [datasets][crate::model::EvaluationConfig::datasets].
    pub fn set_datasets<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::InputDataset>,
    {
        use std::iter::Iterator;
        self.datasets = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [model_specific_config][crate::model::EvaluationConfig::model_specific_config].
    ///
    /// Note that all the setters affecting `model_specific_config` are mutually
    /// exclusive.
    pub fn set_model_specific_config<
        T: std::convert::Into<
                std::option::Option<crate::model::evaluation_config::ModelSpecificConfig>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.model_specific_config = v.into();
        self
    }

    /// The value of [model_specific_config][crate::model::EvaluationConfig::model_specific_config]
    /// if it holds a `SmartReplyConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn smart_reply_config(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::evaluation_config::SmartReplyConfig>>
    {
        #[allow(unreachable_patterns)]
        self.model_specific_config.as_ref().and_then(|v| match v {
            crate::model::evaluation_config::ModelSpecificConfig::SmartReplyConfig(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [model_specific_config][crate::model::EvaluationConfig::model_specific_config]
    /// if it holds a `SmartComposeConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn smart_compose_config(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::evaluation_config::SmartComposeConfig>>
    {
        #[allow(unreachable_patterns)]
        self.model_specific_config.as_ref().and_then(|v| match v {
            crate::model::evaluation_config::ModelSpecificConfig::SmartComposeConfig(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [model_specific_config][crate::model::EvaluationConfig::model_specific_config]
    /// to hold a `SmartReplyConfig`.
    ///
    /// Note that all the setters affecting `model_specific_config` are
    /// mutually exclusive.
    pub fn set_smart_reply_config<
        T: std::convert::Into<std::boxed::Box<crate::model::evaluation_config::SmartReplyConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.model_specific_config = std::option::Option::Some(
            crate::model::evaluation_config::ModelSpecificConfig::SmartReplyConfig(v.into()),
        );
        self
    }

    /// Sets the value of [model_specific_config][crate::model::EvaluationConfig::model_specific_config]
    /// to hold a `SmartComposeConfig`.
    ///
    /// Note that all the setters affecting `model_specific_config` are
    /// mutually exclusive.
    pub fn set_smart_compose_config<
        T: std::convert::Into<std::boxed::Box<crate::model::evaluation_config::SmartComposeConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.model_specific_config = std::option::Option::Some(
            crate::model::evaluation_config::ModelSpecificConfig::SmartComposeConfig(v.into()),
        );
        self
    }
}

impl wkt::message::Message for EvaluationConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.EvaluationConfig"
    }
}

/// Defines additional types related to [EvaluationConfig].
pub mod evaluation_config {
    #[allow(unused_imports)]
    use super::*;

    /// Smart reply specific configuration for evaluation job.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SmartReplyConfig {
        /// The allowlist document resource name.
        /// Format: `projects/<Project ID>/knowledgeBases/<Knowledge Base
        /// ID>/documents/<Document ID>`. Only used for smart reply model.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub allowlist_document: std::string::String,

        /// Required. The model to be evaluated can return multiple results with
        /// confidence score on each query. These results will be sorted by the
        /// descending order of the scores and we only keep the first
        /// max_result_count results as the final results to evaluate.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub max_result_count: i32,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SmartReplyConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [allowlist_document][crate::model::evaluation_config::SmartReplyConfig::allowlist_document].
        pub fn set_allowlist_document<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.allowlist_document = v.into();
            self
        }

        /// Sets the value of [max_result_count][crate::model::evaluation_config::SmartReplyConfig::max_result_count].
        pub fn set_max_result_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.max_result_count = v.into();
            self
        }
    }

    impl wkt::message::Message for SmartReplyConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.EvaluationConfig.SmartReplyConfig"
        }
    }

    /// Smart compose specific configuration for evaluation job.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SmartComposeConfig {
        /// The allowlist document resource name.
        /// Format: `projects/<Project ID>/knowledgeBases/<Knowledge Base
        /// ID>/documents/<Document ID>`. Only used for smart compose model.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub allowlist_document: std::string::String,

        /// Required. The model to be evaluated can return multiple results with
        /// confidence score on each query. These results will be sorted by the
        /// descending order of the scores and we only keep the first
        /// max_result_count results as the final results to evaluate.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub max_result_count: i32,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SmartComposeConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [allowlist_document][crate::model::evaluation_config::SmartComposeConfig::allowlist_document].
        pub fn set_allowlist_document<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.allowlist_document = v.into();
            self
        }

        /// Sets the value of [max_result_count][crate::model::evaluation_config::SmartComposeConfig::max_result_count].
        pub fn set_max_result_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.max_result_count = v.into();
            self
        }
    }

    impl wkt::message::Message for SmartComposeConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.EvaluationConfig.SmartComposeConfig"
        }
    }

    /// Specific configurations for different models in order to do evaluation.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum ModelSpecificConfig {
        /// Configuration for smart reply model evaluation.
        SmartReplyConfig(std::boxed::Box<crate::model::evaluation_config::SmartReplyConfig>),
        /// Configuration for smart compose model evaluation.
        SmartComposeConfig(std::boxed::Box<crate::model::evaluation_config::SmartComposeConfig>),
    }
}

/// InputDataset used to create model or do evaluation.
/// NextID:5
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InputDataset {
    /// Required. ConversationDataset resource name. Format:
    /// `projects/<Project ID>/locations/<Location
    /// ID>/conversationDatasets/<Conversation Dataset ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub dataset: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl InputDataset {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [dataset][crate::model::InputDataset::dataset].
    pub fn set_dataset<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.dataset = v.into();
        self
    }
}

impl wkt::message::Message for InputDataset {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.InputDataset"
    }
}

/// Metadata for article suggestion models.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ArticleSuggestionModelMetadata {
    /// Optional. Type of the article suggestion model. If not provided, model_type
    /// is used.
    pub training_model_type: crate::model::conversation_model::ModelType,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ArticleSuggestionModelMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [training_model_type][crate::model::ArticleSuggestionModelMetadata::training_model_type].
    pub fn set_training_model_type<
        T: std::convert::Into<crate::model::conversation_model::ModelType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.training_model_type = v.into();
        self
    }
}

impl wkt::message::Message for ArticleSuggestionModelMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ArticleSuggestionModelMetadata"
    }
}

/// Metadata for smart reply models.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SmartReplyModelMetadata {
    /// Optional. Type of the smart reply model. If not provided, model_type is
    /// used.
    pub training_model_type: crate::model::conversation_model::ModelType,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SmartReplyModelMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [training_model_type][crate::model::SmartReplyModelMetadata::training_model_type].
    pub fn set_training_model_type<
        T: std::convert::Into<crate::model::conversation_model::ModelType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.training_model_type = v.into();
        self
    }
}

impl wkt::message::Message for SmartReplyModelMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SmartReplyModelMetadata"
    }
}

/// The evaluation metrics for smart reply model.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SmartReplyMetrics {
    /// Percentage of target participant messages in the evaluation dataset for
    /// which similar messages have appeared at least once in the allowlist. Should
    /// be [0, 1].
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub allowlist_coverage: f32,

    /// Metrics of top n smart replies, sorted by [TopNMetric.n][].
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub top_n_metrics: std::vec::Vec<crate::model::smart_reply_metrics::TopNMetrics>,

    /// Total number of conversations used to generate this metric.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub conversation_count: i64,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SmartReplyMetrics {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [allowlist_coverage][crate::model::SmartReplyMetrics::allowlist_coverage].
    pub fn set_allowlist_coverage<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.allowlist_coverage = v.into();
        self
    }

    /// Sets the value of [conversation_count][crate::model::SmartReplyMetrics::conversation_count].
    pub fn set_conversation_count<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.conversation_count = v.into();
        self
    }

    /// Sets the value of [top_n_metrics][crate::model::SmartReplyMetrics::top_n_metrics].
    pub fn set_top_n_metrics<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::smart_reply_metrics::TopNMetrics>,
    {
        use std::iter::Iterator;
        self.top_n_metrics = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SmartReplyMetrics {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SmartReplyMetrics"
    }
}

/// Defines additional types related to [SmartReplyMetrics].
pub mod smart_reply_metrics {
    #[allow(unused_imports)]
    use super::*;

    /// Evaluation metrics when retrieving `n` smart replies with the model.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct TopNMetrics {
        /// Number of retrieved smart replies. For example, when `n` is 3, this
        /// evaluation contains metrics for when Dialogflow retrieves 3 smart replies
        /// with the model.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub n: i32,

        /// Defined as `number of queries whose top n smart replies have at least one
        /// similar (token match similarity above the defined threshold) reply as the
        /// real reply` divided by `number of queries with at least one smart reply`.
        /// Value ranges from 0.0 to 1.0 inclusive.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub recall: f32,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl TopNMetrics {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [n][crate::model::smart_reply_metrics::TopNMetrics::n].
        pub fn set_n<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.n = v.into();
            self
        }

        /// Sets the value of [recall][crate::model::smart_reply_metrics::TopNMetrics::recall].
        pub fn set_recall<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
            self.recall = v.into();
            self
        }
    }

    impl wkt::message::Message for TopNMetrics {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.SmartReplyMetrics.TopNMetrics"
        }
    }
}

/// The request message for
/// [ConversationModels.CreateConversationModel][google.cloud.dialogflow.v2.ConversationModels.CreateConversationModel]
///
/// [google.cloud.dialogflow.v2.ConversationModels.CreateConversationModel]: crate::client::ConversationModels::create_conversation_model
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateConversationModelRequest {
    /// The project to create conversation model for. Format:
    /// `projects/<Project ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The conversation model to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub conversation_model: std::option::Option<crate::model::ConversationModel>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateConversationModelRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateConversationModelRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [conversation_model][crate::model::CreateConversationModelRequest::conversation_model].
    pub fn set_conversation_model<
        T: std::convert::Into<std::option::Option<crate::model::ConversationModel>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_model = v.into();
        self
    }
}

impl wkt::message::Message for CreateConversationModelRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateConversationModelRequest"
    }
}

/// The request message for
/// [ConversationModels.GetConversationModel][google.cloud.dialogflow.v2.ConversationModels.GetConversationModel]
///
/// [google.cloud.dialogflow.v2.ConversationModels.GetConversationModel]: crate::client::ConversationModels::get_conversation_model
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetConversationModelRequest {
    /// Required. The conversation model to retrieve. Format:
    /// `projects/<Project ID>/conversationModels/<Conversation Model ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetConversationModelRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetConversationModelRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetConversationModelRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetConversationModelRequest"
    }
}

/// The request message for
/// [ConversationModels.ListConversationModels][google.cloud.dialogflow.v2.ConversationModels.ListConversationModels]
///
/// [google.cloud.dialogflow.v2.ConversationModels.ListConversationModels]: crate::client::ConversationModels::list_conversation_models
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListConversationModelsRequest {
    /// Required. The project to list all conversation models for.
    /// Format: `projects/<Project ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Maximum number of conversation models to return in a single
    /// page. By default 100 and at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// Optional. The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListConversationModelsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListConversationModelsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListConversationModelsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListConversationModelsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListConversationModelsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListConversationModelsRequest"
    }
}

/// The response message for
/// [ConversationModels.ListConversationModels][google.cloud.dialogflow.v2.ConversationModels.ListConversationModels]
///
/// [google.cloud.dialogflow.v2.ConversationModels.ListConversationModels]: crate::client::ConversationModels::list_conversation_models
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListConversationModelsResponse {
    /// The list of models to return.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub conversation_models: std::vec::Vec<crate::model::ConversationModel>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListConversationModelsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListConversationModelsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [conversation_models][crate::model::ListConversationModelsResponse::conversation_models].
    pub fn set_conversation_models<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ConversationModel>,
    {
        use std::iter::Iterator;
        self.conversation_models = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListConversationModelsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListConversationModelsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListConversationModelsResponse {
    type PageItem = crate::model::ConversationModel;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.conversation_models
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [ConversationModels.DeleteConversationModel][google.cloud.dialogflow.v2.ConversationModels.DeleteConversationModel]
///
/// [google.cloud.dialogflow.v2.ConversationModels.DeleteConversationModel]: crate::client::ConversationModels::delete_conversation_model
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteConversationModelRequest {
    /// Required. The conversation model to delete. Format:
    /// `projects/<Project ID>/conversationModels/<Conversation Model ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteConversationModelRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteConversationModelRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteConversationModelRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeleteConversationModelRequest"
    }
}

/// The request message for
/// [ConversationModels.DeployConversationModel][google.cloud.dialogflow.v2.ConversationModels.DeployConversationModel]
///
/// [google.cloud.dialogflow.v2.ConversationModels.DeployConversationModel]: crate::client::ConversationModels::deploy_conversation_model
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeployConversationModelRequest {
    /// Required. The conversation model to deploy. Format:
    /// `projects/<Project ID>/conversationModels/<Conversation Model ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeployConversationModelRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeployConversationModelRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeployConversationModelRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeployConversationModelRequest"
    }
}

/// The request message for
/// [ConversationModels.UndeployConversationModel][google.cloud.dialogflow.v2.ConversationModels.UndeployConversationModel]
///
/// [google.cloud.dialogflow.v2.ConversationModels.UndeployConversationModel]: crate::client::ConversationModels::undeploy_conversation_model
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UndeployConversationModelRequest {
    /// Required. The conversation model to undeploy. Format:
    /// `projects/<Project ID>/conversationModels/<Conversation Model ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UndeployConversationModelRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::UndeployConversationModelRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for UndeployConversationModelRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.UndeployConversationModelRequest"
    }
}

/// The request message for
/// [ConversationModels.GetConversationModelEvaluation][google.cloud.dialogflow.v2.ConversationModels.GetConversationModelEvaluation]
///
/// [google.cloud.dialogflow.v2.ConversationModels.GetConversationModelEvaluation]: crate::client::ConversationModels::get_conversation_model_evaluation
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetConversationModelEvaluationRequest {
    /// Required. The conversation model evaluation resource name. Format:
    /// `projects/<Project ID>/conversationModels/<Conversation Model
    /// ID>/evaluations/<Evaluation ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetConversationModelEvaluationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetConversationModelEvaluationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetConversationModelEvaluationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetConversationModelEvaluationRequest"
    }
}

/// The request message for
/// [ConversationModels.ListConversationModelEvaluations][google.cloud.dialogflow.v2.ConversationModels.ListConversationModelEvaluations]
///
/// [google.cloud.dialogflow.v2.ConversationModels.ListConversationModelEvaluations]: crate::client::ConversationModels::list_conversation_model_evaluations
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListConversationModelEvaluationsRequest {
    /// Required. The conversation model resource name. Format:
    /// `projects/<Project ID>/conversationModels/<Conversation Model ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Maximum number of evaluations to return in a
    /// single page. By default 100 and at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// Optional. The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListConversationModelEvaluationsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListConversationModelEvaluationsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListConversationModelEvaluationsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListConversationModelEvaluationsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListConversationModelEvaluationsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListConversationModelEvaluationsRequest"
    }
}

/// The response message for
/// [ConversationModels.ListConversationModelEvaluations][google.cloud.dialogflow.v2.ConversationModels.ListConversationModelEvaluations]
///
/// [google.cloud.dialogflow.v2.ConversationModels.ListConversationModelEvaluations]: crate::client::ConversationModels::list_conversation_model_evaluations
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListConversationModelEvaluationsResponse {
    /// The list of evaluations to return.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub conversation_model_evaluations: std::vec::Vec<crate::model::ConversationModelEvaluation>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListConversationModelEvaluationsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListConversationModelEvaluationsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [conversation_model_evaluations][crate::model::ListConversationModelEvaluationsResponse::conversation_model_evaluations].
    pub fn set_conversation_model_evaluations<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ConversationModelEvaluation>,
    {
        use std::iter::Iterator;
        self.conversation_model_evaluations = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListConversationModelEvaluationsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListConversationModelEvaluationsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListConversationModelEvaluationsResponse {
    type PageItem = crate::model::ConversationModelEvaluation;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.conversation_model_evaluations
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [ConversationModels.CreateConversationModelEvaluation][google.cloud.dialogflow.v2.ConversationModels.CreateConversationModelEvaluation]
///
/// [google.cloud.dialogflow.v2.ConversationModels.CreateConversationModelEvaluation]: crate::client::ConversationModels::create_conversation_model_evaluation
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateConversationModelEvaluationRequest {
    /// Required. The conversation model resource name. Format:
    /// `projects/<Project ID>/locations/<Location
    /// ID>/conversationModels/<Conversation Model ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The conversation model evaluation to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub conversation_model_evaluation:
        std::option::Option<crate::model::ConversationModelEvaluation>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateConversationModelEvaluationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateConversationModelEvaluationRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [conversation_model_evaluation][crate::model::CreateConversationModelEvaluationRequest::conversation_model_evaluation].
    pub fn set_conversation_model_evaluation<
        T: std::convert::Into<std::option::Option<crate::model::ConversationModelEvaluation>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_model_evaluation = v.into();
        self
    }
}

impl wkt::message::Message for CreateConversationModelEvaluationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateConversationModelEvaluationRequest"
    }
}

/// Metadata for a
/// [ConversationModels.CreateConversationModel][google.cloud.dialogflow.v2.ConversationModels.CreateConversationModel]
/// operation.
///
/// [google.cloud.dialogflow.v2.ConversationModels.CreateConversationModel]: crate::client::ConversationModels::create_conversation_model
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateConversationModelOperationMetadata {
    /// The resource name of the conversation model. Format:
    /// `projects/<Project ID>/conversationModels/<Conversation Model Id>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation_model: std::string::String,

    /// State of CreateConversationModel operation.
    pub state: crate::model::create_conversation_model_operation_metadata::State,

    /// Timestamp when the request to create conversation model is submitted. The
    /// time is measured on server side.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateConversationModelOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation_model][crate::model::CreateConversationModelOperationMetadata::conversation_model].
    pub fn set_conversation_model<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_model = v.into();
        self
    }

    /// Sets the value of [state][crate::model::CreateConversationModelOperationMetadata::state].
    pub fn set_state<
        T: std::convert::Into<crate::model::create_conversation_model_operation_metadata::State>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::CreateConversationModelOperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }
}

impl wkt::message::Message for CreateConversationModelOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateConversationModelOperationMetadata"
    }
}

/// Defines additional types related to [CreateConversationModelOperationMetadata].
pub mod create_conversation_model_operation_metadata {
    #[allow(unused_imports)]
    use super::*;

    /// State of CreateConversationModel operation.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum State {
        /// Invalid.
        Unspecified,
        /// Request is submitted, but training has not started yet.
        /// The model may remain in this state until there is enough capacity to
        /// start training.
        Pending,
        /// The training has succeeded.
        Succeeded,
        /// The training has succeeded.
        Failed,
        /// The training has been cancelled.
        Cancelled,
        /// The training is in cancelling state.
        Cancelling,
        /// Custom model is training.
        Training,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [State::value] or
        /// [State::name].
        UnknownValue(state::UnknownValue),
    }

    #[doc(hidden)]
    pub mod state {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl State {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Pending => std::option::Option::Some(1),
                Self::Succeeded => std::option::Option::Some(2),
                Self::Failed => std::option::Option::Some(3),
                Self::Cancelled => std::option::Option::Some(4),
                Self::Cancelling => std::option::Option::Some(5),
                Self::Training => std::option::Option::Some(6),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("STATE_UNSPECIFIED"),
                Self::Pending => std::option::Option::Some("PENDING"),
                Self::Succeeded => std::option::Option::Some("SUCCEEDED"),
                Self::Failed => std::option::Option::Some("FAILED"),
                Self::Cancelled => std::option::Option::Some("CANCELLED"),
                Self::Cancelling => std::option::Option::Some("CANCELLING"),
                Self::Training => std::option::Option::Some("TRAINING"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for State {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Pending,
                2 => Self::Succeeded,
                3 => Self::Failed,
                4 => Self::Cancelled,
                5 => Self::Cancelling,
                6 => Self::Training,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for State {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "STATE_UNSPECIFIED" => Self::Unspecified,
                "PENDING" => Self::Pending,
                "SUCCEEDED" => Self::Succeeded,
                "FAILED" => Self::Failed,
                "CANCELLED" => Self::Cancelled,
                "CANCELLING" => Self::Cancelling,
                "TRAINING" => Self::Training,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for State {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Pending => serializer.serialize_i32(1),
                Self::Succeeded => serializer.serialize_i32(2),
                Self::Failed => serializer.serialize_i32(3),
                Self::Cancelled => serializer.serialize_i32(4),
                Self::Cancelling => serializer.serialize_i32(5),
                Self::Training => serializer.serialize_i32(6),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for State {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<State>::new(
                ".google.cloud.dialogflow.v2.CreateConversationModelOperationMetadata.State",
            ))
        }
    }
}

/// Metadata for a
/// [ConversationModels.DeployConversationModel][google.cloud.dialogflow.v2.ConversationModels.DeployConversationModel]
/// operation.
///
/// [google.cloud.dialogflow.v2.ConversationModels.DeployConversationModel]: crate::client::ConversationModels::deploy_conversation_model
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeployConversationModelOperationMetadata {
    /// The resource name of the conversation model. Format:
    /// `projects/<Project ID>/conversationModels/<Conversation Model Id>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation_model: std::string::String,

    /// Timestamp when request to deploy conversation model was submitted. The time
    /// is measured on server side.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeployConversationModelOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation_model][crate::model::DeployConversationModelOperationMetadata::conversation_model].
    pub fn set_conversation_model<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_model = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::DeployConversationModelOperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }
}

impl wkt::message::Message for DeployConversationModelOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeployConversationModelOperationMetadata"
    }
}

/// Metadata for a
/// [ConversationModels.UndeployConversationModel][google.cloud.dialogflow.v2.ConversationModels.UndeployConversationModel]
/// operation.
///
/// [google.cloud.dialogflow.v2.ConversationModels.UndeployConversationModel]: crate::client::ConversationModels::undeploy_conversation_model
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UndeployConversationModelOperationMetadata {
    /// The resource name of the conversation model. Format:
    /// `projects/<Project ID>/conversationModels/<Conversation Model Id>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation_model: std::string::String,

    /// Timestamp when the request to undeploy conversation model was submitted.
    /// The time is measured on server side.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UndeployConversationModelOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation_model][crate::model::UndeployConversationModelOperationMetadata::conversation_model].
    pub fn set_conversation_model<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_model = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::UndeployConversationModelOperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }
}

impl wkt::message::Message for UndeployConversationModelOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.UndeployConversationModelOperationMetadata"
    }
}

/// Metadata for a
/// [ConversationModels.DeleteConversationModel][google.cloud.dialogflow.v2.ConversationModels.DeleteConversationModel]
/// operation.
///
/// [google.cloud.dialogflow.v2.ConversationModels.DeleteConversationModel]: crate::client::ConversationModels::delete_conversation_model
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteConversationModelOperationMetadata {
    /// The resource name of the conversation model. Format:
    /// `projects/<Project ID>/conversationModels/<Conversation Model Id>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation_model: std::string::String,

    /// Timestamp when delete conversation model request was created. The time is
    /// measured on server side.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteConversationModelOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation_model][crate::model::DeleteConversationModelOperationMetadata::conversation_model].
    pub fn set_conversation_model<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_model = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::DeleteConversationModelOperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }
}

impl wkt::message::Message for DeleteConversationModelOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeleteConversationModelOperationMetadata"
    }
}

/// Metadata for a
/// [ConversationModels.CreateConversationModelEvaluation][google.cloud.dialogflow.v2.ConversationModels.CreateConversationModelEvaluation]
/// operation.
///
/// [google.cloud.dialogflow.v2.ConversationModels.CreateConversationModelEvaluation]: crate::client::ConversationModels::create_conversation_model_evaluation
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateConversationModelEvaluationOperationMetadata {
    /// The resource name of the conversation model. Format:
    /// `projects/<Project ID>/locations/<Location
    /// ID>/conversationModels/<Conversation Model Id>/evaluations/<Evaluation Id>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation_model_evaluation: std::string::String,

    /// The resource name of the conversation model. Format:
    /// `projects/<Project ID>/locations/<Location
    /// ID>/conversationModels/<Conversation Model Id>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation_model: std::string::String,

    /// State of CreateConversationModel operation.
    pub state: crate::model::create_conversation_model_evaluation_operation_metadata::State,

    /// Timestamp when the request to create conversation model was submitted. The
    /// time is measured on server side.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateConversationModelEvaluationOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation_model_evaluation][crate::model::CreateConversationModelEvaluationOperationMetadata::conversation_model_evaluation].
    pub fn set_conversation_model_evaluation<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_model_evaluation = v.into();
        self
    }

    /// Sets the value of [conversation_model][crate::model::CreateConversationModelEvaluationOperationMetadata::conversation_model].
    pub fn set_conversation_model<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_model = v.into();
        self
    }

    /// Sets the value of [state][crate::model::CreateConversationModelEvaluationOperationMetadata::state].
    pub fn set_state<
        T: std::convert::Into<
                crate::model::create_conversation_model_evaluation_operation_metadata::State,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::CreateConversationModelEvaluationOperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }
}

impl wkt::message::Message for CreateConversationModelEvaluationOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateConversationModelEvaluationOperationMetadata"
    }
}

/// Defines additional types related to [CreateConversationModelEvaluationOperationMetadata].
pub mod create_conversation_model_evaluation_operation_metadata {
    #[allow(unused_imports)]
    use super::*;

    /// State of CreateConversationModel operation.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum State {
        /// Operation status not specified.
        Unspecified,
        /// The operation is being prepared.
        Initializing,
        /// The operation is running.
        Running,
        /// The operation is cancelled.
        Cancelled,
        /// The operation has succeeded.
        Succeeded,
        /// The operation has failed.
        Failed,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [State::value] or
        /// [State::name].
        UnknownValue(state::UnknownValue),
    }

    #[doc(hidden)]
    pub mod state {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl State {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Initializing => std::option::Option::Some(1),
                Self::Running => std::option::Option::Some(2),
                Self::Cancelled => std::option::Option::Some(3),
                Self::Succeeded => std::option::Option::Some(4),
                Self::Failed => std::option::Option::Some(5),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("STATE_UNSPECIFIED"),
                Self::Initializing => std::option::Option::Some("INITIALIZING"),
                Self::Running => std::option::Option::Some("RUNNING"),
                Self::Cancelled => std::option::Option::Some("CANCELLED"),
                Self::Succeeded => std::option::Option::Some("SUCCEEDED"),
                Self::Failed => std::option::Option::Some("FAILED"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for State {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Initializing,
                2 => Self::Running,
                3 => Self::Cancelled,
                4 => Self::Succeeded,
                5 => Self::Failed,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for State {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "STATE_UNSPECIFIED" => Self::Unspecified,
                "INITIALIZING" => Self::Initializing,
                "RUNNING" => Self::Running,
                "CANCELLED" => Self::Cancelled,
                "SUCCEEDED" => Self::Succeeded,
                "FAILED" => Self::Failed,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for State {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Initializing => serializer.serialize_i32(1),
                Self::Running => serializer.serialize_i32(2),
                Self::Cancelled => serializer.serialize_i32(3),
                Self::Succeeded => serializer.serialize_i32(4),
                Self::Failed => serializer.serialize_i32(5),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for State {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<State>::new(
                ".google.cloud.dialogflow.v2.CreateConversationModelEvaluationOperationMetadata.State"))
        }
    }
}

/// Defines the services to connect to incoming Dialogflow conversations.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ConversationProfile {
    /// The unique identifier of this conversation profile.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversationProfiles/<Conversation Profile ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Human readable name for this profile. Max length 1024 bytes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Output only. Create time of the conversation profile.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Update time of the conversation profile.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Configuration for an automated agent to use with this profile.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub automated_agent_config: std::option::Option<crate::model::AutomatedAgentConfig>,

    /// Configuration for agent assistance to use with this profile.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub human_agent_assistant_config: std::option::Option<crate::model::HumanAgentAssistantConfig>,

    /// Configuration for connecting to a live agent.
    ///
    /// Currently, this feature is not general available, please contact Google
    /// to get access.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub human_agent_handoff_config: std::option::Option<crate::model::HumanAgentHandoffConfig>,

    /// Configuration for publishing conversation lifecycle events.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub notification_config: std::option::Option<crate::model::NotificationConfig>,

    /// Configuration for logging conversation lifecycle events.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub logging_config: std::option::Option<crate::model::LoggingConfig>,

    /// Configuration for publishing new message events. Event will be sent in
    /// format of [ConversationEvent][google.cloud.dialogflow.v2.ConversationEvent]
    ///
    /// [google.cloud.dialogflow.v2.ConversationEvent]: crate::model::ConversationEvent
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub new_message_event_notification_config:
        std::option::Option<crate::model::NotificationConfig>,

    /// Optional. Configuration for publishing transcription intermediate results.
    /// Event will be sent in format of
    /// [ConversationEvent][google.cloud.dialogflow.v2.ConversationEvent]. If
    /// configured, the following information will be populated as
    /// [ConversationEvent][google.cloud.dialogflow.v2.ConversationEvent] Pub/Sub
    /// message attributes:
    ///
    /// - "participant_id"
    /// - "participant_role"
    /// - "message_id"
    ///
    /// [google.cloud.dialogflow.v2.ConversationEvent]: crate::model::ConversationEvent
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub new_recognition_result_notification_config:
        std::option::Option<crate::model::NotificationConfig>,

    /// Settings for speech transcription.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub stt_config: std::option::Option<crate::model::SpeechToTextConfig>,

    /// Language code for the conversation profile. If not specified, the language
    /// is en-US. Language at ConversationProfile should be set for all non en-US
    /// languages.
    /// This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt)
    /// language tag. Example: "en-US".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// The time zone of this conversational profile from the
    /// [time zone database](https://www.iana.org/time-zones), e.g.,
    /// America/New_York, Europe/Paris. Defaults to America/New_York.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub time_zone: std::string::String,

    /// Name of the CX SecuritySettings reference for the agent.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/securitySettings/<Security Settings ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub security_settings: std::string::String,

    /// Configuration for Text-to-Speech synthesization.
    ///
    /// Used by Phone Gateway to specify synthesization options. If agent defines
    /// synthesization options as well, agent settings overrides the option here.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub tts_config: std::option::Option<crate::model::SynthesizeSpeechConfig>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ConversationProfile {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ConversationProfile::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::ConversationProfile::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ConversationProfile::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::ConversationProfile::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [automated_agent_config][crate::model::ConversationProfile::automated_agent_config].
    pub fn set_automated_agent_config<
        T: std::convert::Into<std::option::Option<crate::model::AutomatedAgentConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.automated_agent_config = v.into();
        self
    }

    /// Sets the value of [human_agent_assistant_config][crate::model::ConversationProfile::human_agent_assistant_config].
    pub fn set_human_agent_assistant_config<
        T: std::convert::Into<std::option::Option<crate::model::HumanAgentAssistantConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.human_agent_assistant_config = v.into();
        self
    }

    /// Sets the value of [human_agent_handoff_config][crate::model::ConversationProfile::human_agent_handoff_config].
    pub fn set_human_agent_handoff_config<
        T: std::convert::Into<std::option::Option<crate::model::HumanAgentHandoffConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.human_agent_handoff_config = v.into();
        self
    }

    /// Sets the value of [notification_config][crate::model::ConversationProfile::notification_config].
    pub fn set_notification_config<
        T: std::convert::Into<std::option::Option<crate::model::NotificationConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.notification_config = v.into();
        self
    }

    /// Sets the value of [logging_config][crate::model::ConversationProfile::logging_config].
    pub fn set_logging_config<
        T: std::convert::Into<std::option::Option<crate::model::LoggingConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.logging_config = v.into();
        self
    }

    /// Sets the value of [new_message_event_notification_config][crate::model::ConversationProfile::new_message_event_notification_config].
    pub fn set_new_message_event_notification_config<
        T: std::convert::Into<std::option::Option<crate::model::NotificationConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.new_message_event_notification_config = v.into();
        self
    }

    /// Sets the value of [new_recognition_result_notification_config][crate::model::ConversationProfile::new_recognition_result_notification_config].
    pub fn set_new_recognition_result_notification_config<
        T: std::convert::Into<std::option::Option<crate::model::NotificationConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.new_recognition_result_notification_config = v.into();
        self
    }

    /// Sets the value of [stt_config][crate::model::ConversationProfile::stt_config].
    pub fn set_stt_config<
        T: std::convert::Into<std::option::Option<crate::model::SpeechToTextConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.stt_config = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::ConversationProfile::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [time_zone][crate::model::ConversationProfile::time_zone].
    pub fn set_time_zone<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.time_zone = v.into();
        self
    }

    /// Sets the value of [security_settings][crate::model::ConversationProfile::security_settings].
    pub fn set_security_settings<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.security_settings = v.into();
        self
    }

    /// Sets the value of [tts_config][crate::model::ConversationProfile::tts_config].
    pub fn set_tts_config<
        T: std::convert::Into<std::option::Option<crate::model::SynthesizeSpeechConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.tts_config = v.into();
        self
    }
}

impl wkt::message::Message for ConversationProfile {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ConversationProfile"
    }
}

/// The request message for
/// [ConversationProfiles.ListConversationProfiles][google.cloud.dialogflow.v2.ConversationProfiles.ListConversationProfiles].
///
/// [google.cloud.dialogflow.v2.ConversationProfiles.ListConversationProfiles]: crate::client::ConversationProfiles::list_conversation_profiles
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListConversationProfilesRequest {
    /// Required. The project to list all conversation profiles from.
    /// Format: `projects/<Project ID>/locations/<Location ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return in a single page. By
    /// default 100 and at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListConversationProfilesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListConversationProfilesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListConversationProfilesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListConversationProfilesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListConversationProfilesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListConversationProfilesRequest"
    }
}

/// The response message for
/// [ConversationProfiles.ListConversationProfiles][google.cloud.dialogflow.v2.ConversationProfiles.ListConversationProfiles].
///
/// [google.cloud.dialogflow.v2.ConversationProfiles.ListConversationProfiles]: crate::client::ConversationProfiles::list_conversation_profiles
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListConversationProfilesResponse {
    /// The list of project conversation profiles. There is a maximum number
    /// of items returned based on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub conversation_profiles: std::vec::Vec<crate::model::ConversationProfile>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListConversationProfilesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListConversationProfilesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [conversation_profiles][crate::model::ListConversationProfilesResponse::conversation_profiles].
    pub fn set_conversation_profiles<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ConversationProfile>,
    {
        use std::iter::Iterator;
        self.conversation_profiles = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListConversationProfilesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListConversationProfilesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListConversationProfilesResponse {
    type PageItem = crate::model::ConversationProfile;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.conversation_profiles
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [ConversationProfiles.GetConversationProfile][google.cloud.dialogflow.v2.ConversationProfiles.GetConversationProfile].
///
/// [google.cloud.dialogflow.v2.ConversationProfiles.GetConversationProfile]: crate::client::ConversationProfiles::get_conversation_profile
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetConversationProfileRequest {
    /// Required. The resource name of the conversation profile.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversationProfiles/<Conversation Profile ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetConversationProfileRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetConversationProfileRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetConversationProfileRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetConversationProfileRequest"
    }
}

/// The request message for
/// [ConversationProfiles.CreateConversationProfile][google.cloud.dialogflow.v2.ConversationProfiles.CreateConversationProfile].
///
/// [google.cloud.dialogflow.v2.ConversationProfiles.CreateConversationProfile]: crate::client::ConversationProfiles::create_conversation_profile
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateConversationProfileRequest {
    /// Required. The project to create a conversation profile for.
    /// Format: `projects/<Project ID>/locations/<Location ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The conversation profile to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub conversation_profile: std::option::Option<crate::model::ConversationProfile>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateConversationProfileRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateConversationProfileRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [conversation_profile][crate::model::CreateConversationProfileRequest::conversation_profile].
    pub fn set_conversation_profile<
        T: std::convert::Into<std::option::Option<crate::model::ConversationProfile>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_profile = v.into();
        self
    }
}

impl wkt::message::Message for CreateConversationProfileRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateConversationProfileRequest"
    }
}

/// The request message for
/// [ConversationProfiles.UpdateConversationProfile][google.cloud.dialogflow.v2.ConversationProfiles.UpdateConversationProfile].
///
/// [google.cloud.dialogflow.v2.ConversationProfiles.UpdateConversationProfile]: crate::client::ConversationProfiles::update_conversation_profile
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateConversationProfileRequest {
    /// Required. The conversation profile to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub conversation_profile: std::option::Option<crate::model::ConversationProfile>,

    /// Required. The mask to control which fields to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateConversationProfileRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation_profile][crate::model::UpdateConversationProfileRequest::conversation_profile].
    pub fn set_conversation_profile<
        T: std::convert::Into<std::option::Option<crate::model::ConversationProfile>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_profile = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateConversationProfileRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateConversationProfileRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.UpdateConversationProfileRequest"
    }
}

/// The request message for
/// [ConversationProfiles.DeleteConversationProfile][google.cloud.dialogflow.v2.ConversationProfiles.DeleteConversationProfile].
///
/// This operation fails if the conversation profile is still referenced from
/// a phone number.
///
/// [google.cloud.dialogflow.v2.ConversationProfiles.DeleteConversationProfile]: crate::client::ConversationProfiles::delete_conversation_profile
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteConversationProfileRequest {
    /// Required. The name of the conversation profile to delete.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversationProfiles/<Conversation Profile ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteConversationProfileRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteConversationProfileRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteConversationProfileRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeleteConversationProfileRequest"
    }
}

/// Defines the Automated Agent to connect to a conversation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AutomatedAgentConfig {
    /// Required. ID of the Dialogflow agent environment to use.
    ///
    /// This project needs to either be the same project as the conversation or you
    /// need to grant `service-<Conversation Project
    /// Number>@gcp-sa-dialogflow.iam.gserviceaccount.com` the `Dialogflow API
    /// Service Agent` role in this project.
    ///
    /// - For ES agents, use format: `projects/<Project ID>/locations/<Location
    ///   ID>/agent/environments/<Environment ID or '-'>`. If environment is not
    ///   specified, the default `draft` environment is used. Refer to
    ///   [DetectIntentRequest](/dialogflow/docs/reference/rpc/google.cloud.dialogflow.v2#google.cloud.dialogflow.v2.DetectIntentRequest)
    ///   for more details.
    ///
    /// - For CX agents, use format `projects/<Project ID>/locations/<Location
    ///   ID>/agents/<Agent ID>/environments/<Environment ID
    ///   or '-'>`. If environment is not specified, the default `draft` environment
    ///   is used.
    ///
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub agent: std::string::String,

    /// Optional. Configure lifetime of the Dialogflow session.
    /// By default, a Dialogflow CX session remains active and its data is stored
    /// for 30 minutes after the last request is sent for the session.
    /// This value should be no longer than 1 day.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub session_ttl: std::option::Option<wkt::Duration>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AutomatedAgentConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [agent][crate::model::AutomatedAgentConfig::agent].
    pub fn set_agent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.agent = v.into();
        self
    }

    /// Sets the value of [session_ttl][crate::model::AutomatedAgentConfig::session_ttl].
    pub fn set_session_ttl<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.session_ttl = v.into();
        self
    }
}

impl wkt::message::Message for AutomatedAgentConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.AutomatedAgentConfig"
    }
}

/// Defines the Human Agent Assist to connect to a conversation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct HumanAgentAssistantConfig {
    /// Pub/Sub topic on which to publish new agent assistant events.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub notification_config: std::option::Option<crate::model::NotificationConfig>,

    /// Configuration for agent assistance of human agent participant.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub human_agent_suggestion_config:
        std::option::Option<crate::model::human_agent_assistant_config::SuggestionConfig>,

    /// Configuration for agent assistance of end user participant.
    ///
    /// Currently, this feature is not general available, please contact Google
    /// to get access.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_user_suggestion_config:
        std::option::Option<crate::model::human_agent_assistant_config::SuggestionConfig>,

    /// Configuration for message analysis.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub message_analysis_config:
        std::option::Option<crate::model::human_agent_assistant_config::MessageAnalysisConfig>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl HumanAgentAssistantConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [notification_config][crate::model::HumanAgentAssistantConfig::notification_config].
    pub fn set_notification_config<
        T: std::convert::Into<std::option::Option<crate::model::NotificationConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.notification_config = v.into();
        self
    }

    /// Sets the value of [human_agent_suggestion_config][crate::model::HumanAgentAssistantConfig::human_agent_suggestion_config].
    pub fn set_human_agent_suggestion_config<
        T: std::convert::Into<
                std::option::Option<crate::model::human_agent_assistant_config::SuggestionConfig>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.human_agent_suggestion_config = v.into();
        self
    }

    /// Sets the value of [end_user_suggestion_config][crate::model::HumanAgentAssistantConfig::end_user_suggestion_config].
    pub fn set_end_user_suggestion_config<
        T: std::convert::Into<
                std::option::Option<crate::model::human_agent_assistant_config::SuggestionConfig>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.end_user_suggestion_config = v.into();
        self
    }

    /// Sets the value of [message_analysis_config][crate::model::HumanAgentAssistantConfig::message_analysis_config].
    pub fn set_message_analysis_config<
        T: std::convert::Into<
                std::option::Option<
                    crate::model::human_agent_assistant_config::MessageAnalysisConfig,
                >,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.message_analysis_config = v.into();
        self
    }
}

impl wkt::message::Message for HumanAgentAssistantConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentAssistantConfig"
    }
}

/// Defines additional types related to [HumanAgentAssistantConfig].
pub mod human_agent_assistant_config {
    #[allow(unused_imports)]
    use super::*;

    /// Settings of suggestion trigger.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SuggestionTriggerSettings {
        /// Do not trigger if last utterance is small talk.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub no_smalltalk: bool,

        /// Only trigger suggestion if participant role of last utterance is
        /// END_USER.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub only_end_user: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SuggestionTriggerSettings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [no_smalltalk][crate::model::human_agent_assistant_config::SuggestionTriggerSettings::no_smalltalk].
        pub fn set_no_smalltalk<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.no_smalltalk = v.into();
            self
        }

        /// Sets the value of [only_end_user][crate::model::human_agent_assistant_config::SuggestionTriggerSettings::only_end_user].
        pub fn set_only_end_user<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.only_end_user = v.into();
            self
        }
    }

    impl wkt::message::Message for SuggestionTriggerSettings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionTriggerSettings"
        }
    }

    /// Config for suggestion features.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SuggestionFeatureConfig {
        /// The suggestion feature.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub suggestion_feature: std::option::Option<crate::model::SuggestionFeature>,

        /// Automatically iterates all participants and tries to compile
        /// suggestions.
        ///
        /// Supported features: ARTICLE_SUGGESTION, FAQ, DIALOGFLOW_ASSIST,
        /// KNOWLEDGE_ASSIST.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enable_event_based_suggestion: bool,

        /// Optional. Disable the logging of search queries sent by human agents. It
        /// can prevent those queries from being stored at answer records.
        ///
        /// Supported features: KNOWLEDGE_SEARCH.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub disable_agent_query_logging: bool,

        /// Optional. Enable query suggestion even if we can't find its answer.
        /// By default, queries are suggested only if we find its answer.
        /// Supported features: KNOWLEDGE_ASSIST
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enable_query_suggestion_when_no_answer: bool,

        /// Optional. Enable including conversation context during query answer
        /// generation. Supported features: KNOWLEDGE_SEARCH.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enable_conversation_augmented_query: bool,

        /// Optional. Enable query suggestion only.
        /// Supported features: KNOWLEDGE_ASSIST
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enable_query_suggestion_only: bool,

        /// Settings of suggestion trigger.
        ///
        /// Currently, only ARTICLE_SUGGESTION and FAQ will use this field.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub suggestion_trigger_settings: std::option::Option<
            crate::model::human_agent_assistant_config::SuggestionTriggerSettings,
        >,

        /// Configs of query.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub query_config:
            std::option::Option<crate::model::human_agent_assistant_config::SuggestionQueryConfig>,

        /// Configs of custom conversation model.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub conversation_model_config: std::option::Option<
            crate::model::human_agent_assistant_config::ConversationModelConfig,
        >,

        /// Configs for processing conversation.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub conversation_process_config: std::option::Option<
            crate::model::human_agent_assistant_config::ConversationProcessConfig,
        >,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SuggestionFeatureConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [suggestion_feature][crate::model::human_agent_assistant_config::SuggestionFeatureConfig::suggestion_feature].
        pub fn set_suggestion_feature<
            T: std::convert::Into<std::option::Option<crate::model::SuggestionFeature>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.suggestion_feature = v.into();
            self
        }

        /// Sets the value of [enable_event_based_suggestion][crate::model::human_agent_assistant_config::SuggestionFeatureConfig::enable_event_based_suggestion].
        pub fn set_enable_event_based_suggestion<T: std::convert::Into<bool>>(
            mut self,
            v: T,
        ) -> Self {
            self.enable_event_based_suggestion = v.into();
            self
        }

        /// Sets the value of [disable_agent_query_logging][crate::model::human_agent_assistant_config::SuggestionFeatureConfig::disable_agent_query_logging].
        pub fn set_disable_agent_query_logging<T: std::convert::Into<bool>>(
            mut self,
            v: T,
        ) -> Self {
            self.disable_agent_query_logging = v.into();
            self
        }

        /// Sets the value of [enable_query_suggestion_when_no_answer][crate::model::human_agent_assistant_config::SuggestionFeatureConfig::enable_query_suggestion_when_no_answer].
        pub fn set_enable_query_suggestion_when_no_answer<T: std::convert::Into<bool>>(
            mut self,
            v: T,
        ) -> Self {
            self.enable_query_suggestion_when_no_answer = v.into();
            self
        }

        /// Sets the value of [enable_conversation_augmented_query][crate::model::human_agent_assistant_config::SuggestionFeatureConfig::enable_conversation_augmented_query].
        pub fn set_enable_conversation_augmented_query<T: std::convert::Into<bool>>(
            mut self,
            v: T,
        ) -> Self {
            self.enable_conversation_augmented_query = v.into();
            self
        }

        /// Sets the value of [enable_query_suggestion_only][crate::model::human_agent_assistant_config::SuggestionFeatureConfig::enable_query_suggestion_only].
        pub fn set_enable_query_suggestion_only<T: std::convert::Into<bool>>(
            mut self,
            v: T,
        ) -> Self {
            self.enable_query_suggestion_only = v.into();
            self
        }

        /// Sets the value of [suggestion_trigger_settings][crate::model::human_agent_assistant_config::SuggestionFeatureConfig::suggestion_trigger_settings].
        pub fn set_suggestion_trigger_settings<
            T: std::convert::Into<
                    std::option::Option<
                        crate::model::human_agent_assistant_config::SuggestionTriggerSettings,
                    >,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.suggestion_trigger_settings = v.into();
            self
        }

        /// Sets the value of [query_config][crate::model::human_agent_assistant_config::SuggestionFeatureConfig::query_config].
        pub fn set_query_config<
            T: std::convert::Into<
                    std::option::Option<
                        crate::model::human_agent_assistant_config::SuggestionQueryConfig,
                    >,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.query_config = v.into();
            self
        }

        /// Sets the value of [conversation_model_config][crate::model::human_agent_assistant_config::SuggestionFeatureConfig::conversation_model_config].
        pub fn set_conversation_model_config<
            T: std::convert::Into<
                    std::option::Option<
                        crate::model::human_agent_assistant_config::ConversationModelConfig,
                    >,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.conversation_model_config = v.into();
            self
        }

        /// Sets the value of [conversation_process_config][crate::model::human_agent_assistant_config::SuggestionFeatureConfig::conversation_process_config].
        pub fn set_conversation_process_config<
            T: std::convert::Into<
                    std::option::Option<
                        crate::model::human_agent_assistant_config::ConversationProcessConfig,
                    >,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.conversation_process_config = v.into();
            self
        }
    }

    impl wkt::message::Message for SuggestionFeatureConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionFeatureConfig"
        }
    }

    /// Detail human agent assistant config.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SuggestionConfig {
        /// Configuration of different suggestion features. One feature can have only
        /// one config.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub feature_configs:
            std::vec::Vec<crate::model::human_agent_assistant_config::SuggestionFeatureConfig>,

        /// If `group_suggestion_responses` is false, and there are multiple
        /// `feature_configs` in `event based suggestion` or
        /// StreamingAnalyzeContent, we will try to deliver suggestions to customers
        /// as soon as we get new suggestion. Different type of suggestions based on
        /// the same context will be in  separate Pub/Sub event or
        /// `StreamingAnalyzeContentResponse`.
        ///
        /// If `group_suggestion_responses` set to true. All the suggestions to the
        /// same participant based on the same context will be grouped into a single
        /// Pub/Sub event or StreamingAnalyzeContentResponse.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub group_suggestion_responses: bool,

        /// Optional. List of various generator resource names used in the
        /// conversation profile.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub generators: std::vec::Vec<std::string::String>,

        /// Optional. When disable_high_latency_features_sync_delivery is true and
        /// using the AnalyzeContent API, we will not deliver the responses from high
        /// latency features in the API response. The
        /// human_agent_assistant_config.notification_config must be configured and
        /// enable_event_based_suggestion must be set to true to receive the
        /// responses from high latency features in Pub/Sub. High latency feature(s):
        /// KNOWLEDGE_ASSIST
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub disable_high_latency_features_sync_delivery: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SuggestionConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [group_suggestion_responses][crate::model::human_agent_assistant_config::SuggestionConfig::group_suggestion_responses].
        pub fn set_group_suggestion_responses<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.group_suggestion_responses = v.into();
            self
        }

        /// Sets the value of [disable_high_latency_features_sync_delivery][crate::model::human_agent_assistant_config::SuggestionConfig::disable_high_latency_features_sync_delivery].
        pub fn set_disable_high_latency_features_sync_delivery<T: std::convert::Into<bool>>(
            mut self,
            v: T,
        ) -> Self {
            self.disable_high_latency_features_sync_delivery = v.into();
            self
        }

        /// Sets the value of [feature_configs][crate::model::human_agent_assistant_config::SuggestionConfig::feature_configs].
        pub fn set_feature_configs<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<
                    crate::model::human_agent_assistant_config::SuggestionFeatureConfig,
                >,
        {
            use std::iter::Iterator;
            self.feature_configs = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [generators][crate::model::human_agent_assistant_config::SuggestionConfig::generators].
        pub fn set_generators<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.generators = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for SuggestionConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionConfig"
        }
    }

    /// Config for suggestion query.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SuggestionQueryConfig {

        /// Maximum number of results to return. Currently, if unset, defaults to 10.
        /// And the max number is 20.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub max_results: i32,

        /// Confidence threshold of query result.
        ///
        /// Agent Assist gives each suggestion a score in the range [0.0, 1.0], based
        /// on the relevance between the suggestion and the current conversation
        /// context. A score of 0.0 has no relevance, while a score of 1.0 has high
        /// relevance. Only suggestions with a score greater than or equal to the
        /// value of this field are included in the results.
        ///
        /// For a baseline model (the default), the recommended value is in the range
        /// [0.05, 0.1].
        ///
        /// For a custom model, there is no recommended value. Tune this value by
        /// starting from a very low value and slowly increasing until you have
        /// desired results.
        ///
        /// If this field is not set, it defaults to 0.0, which means that all
        /// suggestions are returned.
        ///
        /// Supported features: ARTICLE_SUGGESTION, FAQ, SMART_REPLY, SMART_COMPOSE,
        /// KNOWLEDGE_SEARCH, KNOWLEDGE_ASSIST, ENTITY_EXTRACTION.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub confidence_threshold: f32,

        /// Determines how recent conversation context is filtered when generating
        /// suggestions. If unspecified, no messages will be dropped.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub context_filter_settings: std::option::Option<crate::model::human_agent_assistant_config::suggestion_query_config::ContextFilterSettings>,

        /// Optional. The customized sections chosen to return when requesting a
        /// summary of a conversation.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub sections: std::option::Option<crate::model::human_agent_assistant_config::suggestion_query_config::Sections>,

        /// Optional. The number of recent messages to include in the context.
        /// Supported features: KNOWLEDGE_ASSIST.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub context_size: i32,

        /// Source of query.
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub query_source: std::option::Option<crate::model::human_agent_assistant_config::suggestion_query_config::QuerySource>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SuggestionQueryConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [max_results][crate::model::human_agent_assistant_config::SuggestionQueryConfig::max_results].
        pub fn set_max_results<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.max_results = v.into();
            self
        }

        /// Sets the value of [confidence_threshold][crate::model::human_agent_assistant_config::SuggestionQueryConfig::confidence_threshold].
        pub fn set_confidence_threshold<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
            self.confidence_threshold = v.into();
            self
        }

        /// Sets the value of [context_filter_settings][crate::model::human_agent_assistant_config::SuggestionQueryConfig::context_filter_settings].
        pub fn set_context_filter_settings<T: std::convert::Into<std::option::Option<crate::model::human_agent_assistant_config::suggestion_query_config::ContextFilterSettings>>>(mut self, v: T) -> Self{
            self.context_filter_settings = v.into();
            self
        }

        /// Sets the value of [sections][crate::model::human_agent_assistant_config::SuggestionQueryConfig::sections].
        pub fn set_sections<T: std::convert::Into<std::option::Option<crate::model::human_agent_assistant_config::suggestion_query_config::Sections>>>(mut self, v: T) -> Self{
            self.sections = v.into();
            self
        }

        /// Sets the value of [context_size][crate::model::human_agent_assistant_config::SuggestionQueryConfig::context_size].
        pub fn set_context_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.context_size = v.into();
            self
        }

        /// Sets the value of [query_source][crate::model::human_agent_assistant_config::SuggestionQueryConfig::query_source].
        ///
        /// Note that all the setters affecting `query_source` are mutually
        /// exclusive.
        pub fn set_query_source<T: std::convert::Into<std::option::Option<crate::model::human_agent_assistant_config::suggestion_query_config::QuerySource>>>(mut self, v: T) -> Self
        {
            self.query_source = v.into();
            self
        }

        /// The value of [query_source][crate::model::human_agent_assistant_config::SuggestionQueryConfig::query_source]
        /// if it holds a `KnowledgeBaseQuerySource`, `None` if the field is not set or
        /// holds a different branch.
        pub fn knowledge_base_query_source(&self) -> std::option::Option<&std::boxed::Box<crate::model::human_agent_assistant_config::suggestion_query_config::KnowledgeBaseQuerySource>>{
            #[allow(unreachable_patterns)]
            self.query_source.as_ref().and_then(|v| match v {
                crate::model::human_agent_assistant_config::suggestion_query_config::QuerySource::KnowledgeBaseQuerySource(v) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// The value of [query_source][crate::model::human_agent_assistant_config::SuggestionQueryConfig::query_source]
        /// if it holds a `DocumentQuerySource`, `None` if the field is not set or
        /// holds a different branch.
        pub fn document_query_source(&self) -> std::option::Option<&std::boxed::Box<crate::model::human_agent_assistant_config::suggestion_query_config::DocumentQuerySource>>{
            #[allow(unreachable_patterns)]
            self.query_source.as_ref().and_then(|v| match v {
                crate::model::human_agent_assistant_config::suggestion_query_config::QuerySource::DocumentQuerySource(v) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// The value of [query_source][crate::model::human_agent_assistant_config::SuggestionQueryConfig::query_source]
        /// if it holds a `DialogflowQuerySource`, `None` if the field is not set or
        /// holds a different branch.
        pub fn dialogflow_query_source(&self) -> std::option::Option<&std::boxed::Box<crate::model::human_agent_assistant_config::suggestion_query_config::DialogflowQuerySource>>{
            #[allow(unreachable_patterns)]
            self.query_source.as_ref().and_then(|v| match v {
                crate::model::human_agent_assistant_config::suggestion_query_config::QuerySource::DialogflowQuerySource(v) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [query_source][crate::model::human_agent_assistant_config::SuggestionQueryConfig::query_source]
        /// to hold a `KnowledgeBaseQuerySource`.
        ///
        /// Note that all the setters affecting `query_source` are
        /// mutually exclusive.
        pub fn set_knowledge_base_query_source<T: std::convert::Into<std::boxed::Box<crate::model::human_agent_assistant_config::suggestion_query_config::KnowledgeBaseQuerySource>>>(mut self, v: T) -> Self{
            self.query_source = std::option::Option::Some(
                crate::model::human_agent_assistant_config::suggestion_query_config::QuerySource::KnowledgeBaseQuerySource(
                    v.into()
                )
            );
            self
        }

        /// Sets the value of [query_source][crate::model::human_agent_assistant_config::SuggestionQueryConfig::query_source]
        /// to hold a `DocumentQuerySource`.
        ///
        /// Note that all the setters affecting `query_source` are
        /// mutually exclusive.
        pub fn set_document_query_source<T: std::convert::Into<std::boxed::Box<crate::model::human_agent_assistant_config::suggestion_query_config::DocumentQuerySource>>>(mut self, v: T) -> Self{
            self.query_source = std::option::Option::Some(
                crate::model::human_agent_assistant_config::suggestion_query_config::QuerySource::DocumentQuerySource(
                    v.into()
                )
            );
            self
        }

        /// Sets the value of [query_source][crate::model::human_agent_assistant_config::SuggestionQueryConfig::query_source]
        /// to hold a `DialogflowQuerySource`.
        ///
        /// Note that all the setters affecting `query_source` are
        /// mutually exclusive.
        pub fn set_dialogflow_query_source<T: std::convert::Into<std::boxed::Box<crate::model::human_agent_assistant_config::suggestion_query_config::DialogflowQuerySource>>>(mut self, v: T) -> Self{
            self.query_source = std::option::Option::Some(
                crate::model::human_agent_assistant_config::suggestion_query_config::QuerySource::DialogflowQuerySource(
                    v.into()
                )
            );
            self
        }
    }

    impl wkt::message::Message for SuggestionQueryConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionQueryConfig"
        }
    }

    /// Defines additional types related to [SuggestionQueryConfig].
    pub mod suggestion_query_config {
        #[allow(unused_imports)]
        use super::*;

        /// Knowledge base source settings.
        ///
        /// Supported features: ARTICLE_SUGGESTION, FAQ.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct KnowledgeBaseQuerySource {
            /// Required. Knowledge bases to query. Format:
            /// `projects/<Project ID>/locations/<Location
            /// ID>/knowledgeBases/<Knowledge Base ID>`. Currently, at most 5 knowledge
            /// bases are supported.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub knowledge_bases: std::vec::Vec<std::string::String>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl KnowledgeBaseQuerySource {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [knowledge_bases][crate::model::human_agent_assistant_config::suggestion_query_config::KnowledgeBaseQuerySource::knowledge_bases].
            pub fn set_knowledge_bases<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<std::string::String>,
            {
                use std::iter::Iterator;
                self.knowledge_bases = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for KnowledgeBaseQuerySource {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionQueryConfig.KnowledgeBaseQuerySource"
            }
        }

        /// Document source settings.
        ///
        /// Supported features: SMART_REPLY, SMART_COMPOSE.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct DocumentQuerySource {
            /// Required. Knowledge documents to query from. Format:
            /// `projects/<Project ID>/locations/<Location
            /// ID>/knowledgeBases/<KnowledgeBase ID>/documents/<Document ID>`.
            /// Currently, at most 5 documents are supported.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub documents: std::vec::Vec<std::string::String>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl DocumentQuerySource {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [documents][crate::model::human_agent_assistant_config::suggestion_query_config::DocumentQuerySource::documents].
            pub fn set_documents<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<std::string::String>,
            {
                use std::iter::Iterator;
                self.documents = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for DocumentQuerySource {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionQueryConfig.DocumentQuerySource"
            }
        }

        /// Dialogflow source setting.
        ///
        /// Supported feature: DIALOGFLOW_ASSIST.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct DialogflowQuerySource {

            /// Required. The name of a Dialogflow virtual agent used for end user side
            /// intent detection and suggestion. Format: `projects/<Project
            /// ID>/locations/<Location ID>/agent`. When multiple agents are allowed in
            /// the same Dialogflow project.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub agent: std::string::String,

            /// Optional. The Dialogflow assist configuration for human agent.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub human_agent_side_config: std::option::Option<crate::model::human_agent_assistant_config::suggestion_query_config::dialogflow_query_source::HumanAgentSideConfig>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl DialogflowQuerySource {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [agent][crate::model::human_agent_assistant_config::suggestion_query_config::DialogflowQuerySource::agent].
            pub fn set_agent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.agent = v.into();
                self
            }

            /// Sets the value of [human_agent_side_config][crate::model::human_agent_assistant_config::suggestion_query_config::DialogflowQuerySource::human_agent_side_config].
            pub fn set_human_agent_side_config<T: std::convert::Into<std::option::Option<crate::model::human_agent_assistant_config::suggestion_query_config::dialogflow_query_source::HumanAgentSideConfig>>>(mut self, v: T) -> Self{
                self.human_agent_side_config = v.into();
                self
            }
        }

        impl wkt::message::Message for DialogflowQuerySource {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionQueryConfig.DialogflowQuerySource"
            }
        }

        /// Defines additional types related to [DialogflowQuerySource].
        pub mod dialogflow_query_source {
            #[allow(unused_imports)]
            use super::*;

            /// The configuration used for human agent side Dialogflow assist
            /// suggestion.
            #[serde_with::serde_as]
            #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(default, rename_all = "camelCase")]
            #[non_exhaustive]
            pub struct HumanAgentSideConfig {
                /// Optional. The name of a dialogflow virtual agent used for intent
                /// detection and suggestion triggered by human agent.
                /// Format: `projects/<Project ID>/locations/<Location ID>/agent`.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub agent: std::string::String,

                #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
                _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
            }

            impl HumanAgentSideConfig {
                pub fn new() -> Self {
                    std::default::Default::default()
                }

                /// Sets the value of [agent][crate::model::human_agent_assistant_config::suggestion_query_config::dialogflow_query_source::HumanAgentSideConfig::agent].
                pub fn set_agent<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.agent = v.into();
                    self
                }
            }

            impl wkt::message::Message for HumanAgentSideConfig {
                fn typename() -> &'static str {
                    "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionQueryConfig.DialogflowQuerySource.HumanAgentSideConfig"
                }
            }
        }

        /// Settings that determine how to filter recent conversation context when
        /// generating suggestions.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct ContextFilterSettings {
            /// If set to true, the last message from virtual agent (hand off message)
            /// and the message before it (trigger message of hand off) are dropped.
            #[serde(skip_serializing_if = "wkt::internal::is_default")]
            pub drop_handoff_messages: bool,

            /// If set to true, all messages from virtual agent are dropped.
            #[serde(skip_serializing_if = "wkt::internal::is_default")]
            pub drop_virtual_agent_messages: bool,

            /// If set to true, all messages from ivr stage are dropped.
            #[serde(skip_serializing_if = "wkt::internal::is_default")]
            pub drop_ivr_messages: bool,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl ContextFilterSettings {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [drop_handoff_messages][crate::model::human_agent_assistant_config::suggestion_query_config::ContextFilterSettings::drop_handoff_messages].
            pub fn set_drop_handoff_messages<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
                self.drop_handoff_messages = v.into();
                self
            }

            /// Sets the value of [drop_virtual_agent_messages][crate::model::human_agent_assistant_config::suggestion_query_config::ContextFilterSettings::drop_virtual_agent_messages].
            pub fn set_drop_virtual_agent_messages<T: std::convert::Into<bool>>(
                mut self,
                v: T,
            ) -> Self {
                self.drop_virtual_agent_messages = v.into();
                self
            }

            /// Sets the value of [drop_ivr_messages][crate::model::human_agent_assistant_config::suggestion_query_config::ContextFilterSettings::drop_ivr_messages].
            pub fn set_drop_ivr_messages<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
                self.drop_ivr_messages = v.into();
                self
            }
        }

        impl wkt::message::Message for ContextFilterSettings {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionQueryConfig.ContextFilterSettings"
            }
        }

        /// Custom sections to return when requesting a summary of a conversation.
        /// This is only supported when `baseline_model_version` == '2.0'.
        ///
        /// Supported features: CONVERSATION_SUMMARIZATION,
        /// CONVERSATION_SUMMARIZATION_VOICE.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Sections {

            /// The selected sections chosen to return when requesting a summary of a
            /// conversation. A duplicate selected section will be treated as a single
            /// selected section. If section types are not provided, the default will
            /// be {SITUATION, ACTION, RESULT}.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub section_types: std::vec::Vec<crate::model::human_agent_assistant_config::suggestion_query_config::sections::SectionType>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl Sections {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [section_types][crate::model::human_agent_assistant_config::suggestion_query_config::Sections::section_types].
            pub fn set_section_types<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<crate::model::human_agent_assistant_config::suggestion_query_config::sections::SectionType>
            {
                use std::iter::Iterator;
                self.section_types = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for Sections {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionQueryConfig.Sections"
            }
        }

        /// Defines additional types related to [Sections].
        pub mod sections {
            #[allow(unused_imports)]
            use super::*;

            /// Selectable sections to return when requesting a summary of a
            /// conversation.
            ///
            /// # Working with unknown values
            ///
            /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
            /// additional enum variants at any time. Adding new variants is not considered
            /// a breaking change. Applications should write their code in anticipation of:
            ///
            /// - New values appearing in future releases of the client library, **and**
            /// - New values received dynamically, without application changes.
            ///
            /// Please consult the [Working with enums] section in the user guide for some
            /// guidelines.
            ///
            /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
            #[derive(Clone, Debug, PartialEq)]
            #[non_exhaustive]
            pub enum SectionType {
                /// Undefined section type, does not return anything.
                Unspecified,
                /// What the customer needs help with or has question about.
                /// Section name: "situation".
                Situation,
                /// What the agent does to help the customer.
                /// Section name: "action".
                Action,
                /// Result of the customer service. A single word describing the result
                /// of the conversation.
                /// Section name: "resolution".
                Resolution,
                /// Reason for cancellation if the customer requests for a cancellation.
                /// "N/A" otherwise.
                /// Section name: "reason_for_cancellation".
                ReasonForCancellation,
                /// "Unsatisfied" or "Satisfied" depending on the customer's feelings at
                /// the end of the conversation.
                /// Section name: "customer_satisfaction".
                CustomerSatisfaction,
                /// Key entities extracted from the conversation, such as ticket number,
                /// order number, dollar amount, etc.
                /// Section names are prefixed by "entities/".
                Entities,
                /// If set, the enum was initialized with an unknown value.
                ///
                /// Applications can examine the value using [SectionType::value] or
                /// [SectionType::name].
                UnknownValue(section_type::UnknownValue),
            }

            #[doc(hidden)]
            pub mod section_type {
                #[allow(unused_imports)]
                use super::*;
                #[derive(Clone, Debug, PartialEq)]
                pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
            }

            impl SectionType {
                /// Gets the enum value.
                ///
                /// Returns `None` if the enum contains an unknown value deserialized from
                /// the string representation of enums.
                pub fn value(&self) -> std::option::Option<i32> {
                    match self {
                        Self::Unspecified => std::option::Option::Some(0),
                        Self::Situation => std::option::Option::Some(1),
                        Self::Action => std::option::Option::Some(2),
                        Self::Resolution => std::option::Option::Some(3),
                        Self::ReasonForCancellation => std::option::Option::Some(4),
                        Self::CustomerSatisfaction => std::option::Option::Some(5),
                        Self::Entities => std::option::Option::Some(6),
                        Self::UnknownValue(u) => u.0.value(),
                    }
                }

                /// Gets the enum value as a string.
                ///
                /// Returns `None` if the enum contains an unknown value deserialized from
                /// the integer representation of enums.
                pub fn name(&self) -> std::option::Option<&str> {
                    match self {
                        Self::Unspecified => std::option::Option::Some("SECTION_TYPE_UNSPECIFIED"),
                        Self::Situation => std::option::Option::Some("SITUATION"),
                        Self::Action => std::option::Option::Some("ACTION"),
                        Self::Resolution => std::option::Option::Some("RESOLUTION"),
                        Self::ReasonForCancellation => {
                            std::option::Option::Some("REASON_FOR_CANCELLATION")
                        }
                        Self::CustomerSatisfaction => {
                            std::option::Option::Some("CUSTOMER_SATISFACTION")
                        }
                        Self::Entities => std::option::Option::Some("ENTITIES"),
                        Self::UnknownValue(u) => u.0.name(),
                    }
                }
            }

            impl std::default::Default for SectionType {
                fn default() -> Self {
                    use std::convert::From;
                    Self::from(0)
                }
            }

            impl std::fmt::Display for SectionType {
                fn fmt(
                    &self,
                    f: &mut std::fmt::Formatter<'_>,
                ) -> std::result::Result<(), std::fmt::Error> {
                    wkt::internal::display_enum(f, self.name(), self.value())
                }
            }

            impl std::convert::From<i32> for SectionType {
                fn from(value: i32) -> Self {
                    match value {
                        0 => Self::Unspecified,
                        1 => Self::Situation,
                        2 => Self::Action,
                        3 => Self::Resolution,
                        4 => Self::ReasonForCancellation,
                        5 => Self::CustomerSatisfaction,
                        6 => Self::Entities,
                        _ => Self::UnknownValue(section_type::UnknownValue(
                            wkt::internal::UnknownEnumValue::Integer(value),
                        )),
                    }
                }
            }

            impl std::convert::From<&str> for SectionType {
                fn from(value: &str) -> Self {
                    use std::string::ToString;
                    match value {
                        "SECTION_TYPE_UNSPECIFIED" => Self::Unspecified,
                        "SITUATION" => Self::Situation,
                        "ACTION" => Self::Action,
                        "RESOLUTION" => Self::Resolution,
                        "REASON_FOR_CANCELLATION" => Self::ReasonForCancellation,
                        "CUSTOMER_SATISFACTION" => Self::CustomerSatisfaction,
                        "ENTITIES" => Self::Entities,
                        _ => Self::UnknownValue(section_type::UnknownValue(
                            wkt::internal::UnknownEnumValue::String(value.to_string()),
                        )),
                    }
                }
            }

            impl serde::ser::Serialize for SectionType {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::Serializer,
                {
                    match self {
                        Self::Unspecified => serializer.serialize_i32(0),
                        Self::Situation => serializer.serialize_i32(1),
                        Self::Action => serializer.serialize_i32(2),
                        Self::Resolution => serializer.serialize_i32(3),
                        Self::ReasonForCancellation => serializer.serialize_i32(4),
                        Self::CustomerSatisfaction => serializer.serialize_i32(5),
                        Self::Entities => serializer.serialize_i32(6),
                        Self::UnknownValue(u) => u.0.serialize(serializer),
                    }
                }
            }

            impl<'de> serde::de::Deserialize<'de> for SectionType {
                fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
                where
                    D: serde::Deserializer<'de>,
                {
                    deserializer.deserialize_any(wkt::internal::EnumVisitor::<SectionType>::new(
                        ".google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionQueryConfig.Sections.SectionType"))
                }
            }
        }

        /// Source of query.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum QuerySource {
            /// Query from knowledgebase. It is used by:
            /// ARTICLE_SUGGESTION, FAQ.
            KnowledgeBaseQuerySource(std::boxed::Box<crate::model::human_agent_assistant_config::suggestion_query_config::KnowledgeBaseQuerySource>),
            /// Query from knowledge base document. It is used by:
            /// SMART_REPLY, SMART_COMPOSE.
            DocumentQuerySource(std::boxed::Box<crate::model::human_agent_assistant_config::suggestion_query_config::DocumentQuerySource>),
            /// Query from Dialogflow agent. It is used by DIALOGFLOW_ASSIST.
            DialogflowQuerySource(std::boxed::Box<crate::model::human_agent_assistant_config::suggestion_query_config::DialogflowQuerySource>),
        }
    }

    /// Custom conversation models used in agent assist feature.
    ///
    /// Supported feature: ARTICLE_SUGGESTION, SMART_COMPOSE, SMART_REPLY,
    /// CONVERSATION_SUMMARIZATION.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ConversationModelConfig {
        /// Conversation model resource name. Format: `projects/<Project
        /// ID>/conversationModels/<Model ID>`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub model: std::string::String,

        /// Version of current baseline model. It will be ignored if
        /// [model][google.cloud.dialogflow.v2.HumanAgentAssistantConfig.ConversationModelConfig.model]
        /// is set. Valid versions are:
        /// Article Suggestion baseline model:
        /// - 0.9
        /// - 1.0 (default)
        /// Summarization baseline model:
        /// - 1.0
        ///
        /// [google.cloud.dialogflow.v2.HumanAgentAssistantConfig.ConversationModelConfig.model]: crate::model::human_agent_assistant_config::ConversationModelConfig::model
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub baseline_model_version: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ConversationModelConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [model][crate::model::human_agent_assistant_config::ConversationModelConfig::model].
        pub fn set_model<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.model = v.into();
            self
        }

        /// Sets the value of [baseline_model_version][crate::model::human_agent_assistant_config::ConversationModelConfig::baseline_model_version].
        pub fn set_baseline_model_version<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.baseline_model_version = v.into();
            self
        }
    }

    impl wkt::message::Message for ConversationModelConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentAssistantConfig.ConversationModelConfig"
        }
    }

    /// Config to process conversation.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ConversationProcessConfig {
        /// Number of recent non-small-talk sentences to use as context for article
        /// and FAQ suggestion
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub recent_sentences_count: i32,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ConversationProcessConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [recent_sentences_count][crate::model::human_agent_assistant_config::ConversationProcessConfig::recent_sentences_count].
        pub fn set_recent_sentences_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.recent_sentences_count = v.into();
            self
        }
    }

    impl wkt::message::Message for ConversationProcessConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentAssistantConfig.ConversationProcessConfig"
        }
    }

    /// Configuration for analyses to run on each conversation message.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct MessageAnalysisConfig {
        /// Enable entity extraction in conversation messages on [agent assist
        /// stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages).
        /// If unspecified, defaults to false.
        ///
        /// Currently, this feature is not general available, please contact Google
        /// to get access.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enable_entity_extraction: bool,

        /// Enable sentiment analysis in conversation messages on [agent assist
        /// stage](https://cloud.google.com/dialogflow/priv/docs/contact-center/basics#stages).
        /// If unspecified, defaults to false. Sentiment analysis inspects user input
        /// and identifies the prevailing subjective opinion, especially to determine
        /// a user's attitude as positive, negative, or neutral:
        /// <https://cloud.google.com/natural-language/docs/basics#sentiment_analysis>
        /// For
        /// [Participants.StreamingAnalyzeContent][google.cloud.dialogflow.v2.Participants.StreamingAnalyzeContent]
        /// method, result will be in
        /// [StreamingAnalyzeContentResponse.message.SentimentAnalysisResult][google.cloud.dialogflow.v2.StreamingAnalyzeContentResponse.message].
        /// For
        /// [Participants.AnalyzeContent][google.cloud.dialogflow.v2.Participants.AnalyzeContent]
        /// method, result will be in
        /// [AnalyzeContentResponse.message.SentimentAnalysisResult][google.cloud.dialogflow.v2.AnalyzeContentResponse.message]
        /// For
        /// [Conversations.ListMessages][google.cloud.dialogflow.v2.Conversations.ListMessages]
        /// method, result will be in
        /// [ListMessagesResponse.messages.SentimentAnalysisResult][google.cloud.dialogflow.v2.ListMessagesResponse.messages]
        /// If Pub/Sub notification is configured, result will be in
        /// [ConversationEvent.new_message_payload.SentimentAnalysisResult][google.cloud.dialogflow.v2.ConversationEvent.new_message_payload].
        ///
        /// [google.cloud.dialogflow.v2.AnalyzeContentResponse.message]: crate::model::AnalyzeContentResponse::message
        /// [google.cloud.dialogflow.v2.ConversationEvent.new_message_payload]: crate::model::ConversationEvent::payload
        /// [google.cloud.dialogflow.v2.Conversations.ListMessages]: crate::client::Conversations::list_messages
        /// [google.cloud.dialogflow.v2.ListMessagesResponse.messages]: crate::model::ListMessagesResponse::messages
        /// [google.cloud.dialogflow.v2.Participants.AnalyzeContent]: crate::client::Participants::analyze_content
        /// [google.cloud.dialogflow.v2.StreamingAnalyzeContentResponse.message]: crate::model::StreamingAnalyzeContentResponse::message
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub enable_sentiment_analysis: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl MessageAnalysisConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [enable_entity_extraction][crate::model::human_agent_assistant_config::MessageAnalysisConfig::enable_entity_extraction].
        pub fn set_enable_entity_extraction<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enable_entity_extraction = v.into();
            self
        }

        /// Sets the value of [enable_sentiment_analysis][crate::model::human_agent_assistant_config::MessageAnalysisConfig::enable_sentiment_analysis].
        pub fn set_enable_sentiment_analysis<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.enable_sentiment_analysis = v.into();
            self
        }
    }

    impl wkt::message::Message for MessageAnalysisConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentAssistantConfig.MessageAnalysisConfig"
        }
    }
}

/// Defines the hand off to a live agent, typically on which external agent
/// service provider to connect to a conversation.
///
/// Currently, this feature is not general available, please contact Google
/// to get access.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct HumanAgentHandoffConfig {
    /// Required. Specifies which agent service to connect for human agent handoff.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub agent_service: std::option::Option<crate::model::human_agent_handoff_config::AgentService>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl HumanAgentHandoffConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [agent_service][crate::model::HumanAgentHandoffConfig::agent_service].
    ///
    /// Note that all the setters affecting `agent_service` are mutually
    /// exclusive.
    pub fn set_agent_service<
        T: std::convert::Into<
                std::option::Option<crate::model::human_agent_handoff_config::AgentService>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.agent_service = v.into();
        self
    }

    /// The value of [agent_service][crate::model::HumanAgentHandoffConfig::agent_service]
    /// if it holds a `LivePersonConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn live_person_config(
        &self,
    ) -> std::option::Option<
        &std::boxed::Box<crate::model::human_agent_handoff_config::LivePersonConfig>,
    > {
        #[allow(unreachable_patterns)]
        self.agent_service.as_ref().and_then(|v| match v {
            crate::model::human_agent_handoff_config::AgentService::LivePersonConfig(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [agent_service][crate::model::HumanAgentHandoffConfig::agent_service]
    /// if it holds a `SalesforceLiveAgentConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn salesforce_live_agent_config(
        &self,
    ) -> std::option::Option<
        &std::boxed::Box<crate::model::human_agent_handoff_config::SalesforceLiveAgentConfig>,
    > {
        #[allow(unreachable_patterns)]
        self.agent_service.as_ref().and_then(|v| match v {
            crate::model::human_agent_handoff_config::AgentService::SalesforceLiveAgentConfig(
                v,
            ) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [agent_service][crate::model::HumanAgentHandoffConfig::agent_service]
    /// to hold a `LivePersonConfig`.
    ///
    /// Note that all the setters affecting `agent_service` are
    /// mutually exclusive.
    pub fn set_live_person_config<
        T: std::convert::Into<
                std::boxed::Box<crate::model::human_agent_handoff_config::LivePersonConfig>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.agent_service = std::option::Option::Some(
            crate::model::human_agent_handoff_config::AgentService::LivePersonConfig(v.into()),
        );
        self
    }

    /// Sets the value of [agent_service][crate::model::HumanAgentHandoffConfig::agent_service]
    /// to hold a `SalesforceLiveAgentConfig`.
    ///
    /// Note that all the setters affecting `agent_service` are
    /// mutually exclusive.
    pub fn set_salesforce_live_agent_config<
        T: std::convert::Into<
                std::boxed::Box<
                    crate::model::human_agent_handoff_config::SalesforceLiveAgentConfig,
                >,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.agent_service = std::option::Option::Some(
            crate::model::human_agent_handoff_config::AgentService::SalesforceLiveAgentConfig(
                v.into(),
            ),
        );
        self
    }
}

impl wkt::message::Message for HumanAgentHandoffConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentHandoffConfig"
    }
}

/// Defines additional types related to [HumanAgentHandoffConfig].
pub mod human_agent_handoff_config {
    #[allow(unused_imports)]
    use super::*;

    /// Configuration specific to [LivePerson](https://www.liveperson.com).
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct LivePersonConfig {
        /// Required. Account number of the LivePerson account to connect. This is
        /// the account number you input at the login page.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub account_number: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl LivePersonConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [account_number][crate::model::human_agent_handoff_config::LivePersonConfig::account_number].
        pub fn set_account_number<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.account_number = v.into();
            self
        }
    }

    impl wkt::message::Message for LivePersonConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentHandoffConfig.LivePersonConfig"
        }
    }

    /// Configuration specific to Salesforce Live Agent.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SalesforceLiveAgentConfig {
        /// Required. The organization ID of the Salesforce account.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub organization_id: std::string::String,

        /// Required. Live Agent deployment ID.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub deployment_id: std::string::String,

        /// Required. Live Agent chat button ID.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub button_id: std::string::String,

        /// Required. Domain of the Live Agent endpoint for this agent. You can find
        /// the endpoint URL in the `Live Agent settings` page. For example if URL
        /// has the form <https://d.la4-c2-phx.salesforceliveagent.com/..>.,
        /// you should fill in d.la4-c2-phx.salesforceliveagent.com.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub endpoint_domain: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SalesforceLiveAgentConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [organization_id][crate::model::human_agent_handoff_config::SalesforceLiveAgentConfig::organization_id].
        pub fn set_organization_id<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.organization_id = v.into();
            self
        }

        /// Sets the value of [deployment_id][crate::model::human_agent_handoff_config::SalesforceLiveAgentConfig::deployment_id].
        pub fn set_deployment_id<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.deployment_id = v.into();
            self
        }

        /// Sets the value of [button_id][crate::model::human_agent_handoff_config::SalesforceLiveAgentConfig::button_id].
        pub fn set_button_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.button_id = v.into();
            self
        }

        /// Sets the value of [endpoint_domain][crate::model::human_agent_handoff_config::SalesforceLiveAgentConfig::endpoint_domain].
        pub fn set_endpoint_domain<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.endpoint_domain = v.into();
            self
        }
    }

    impl wkt::message::Message for SalesforceLiveAgentConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentHandoffConfig.SalesforceLiveAgentConfig"
        }
    }

    /// Required. Specifies which agent service to connect for human agent handoff.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum AgentService {
        /// Uses [LivePerson](https://www.liveperson.com).
        LivePersonConfig(
            std::boxed::Box<crate::model::human_agent_handoff_config::LivePersonConfig>,
        ),
        /// Uses Salesforce Live Agent.
        SalesforceLiveAgentConfig(
            std::boxed::Box<crate::model::human_agent_handoff_config::SalesforceLiveAgentConfig>,
        ),
    }
}

/// Defines notification behavior.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct NotificationConfig {
    /// Name of the Pub/Sub topic to publish conversation
    /// events like
    /// [CONVERSATION_STARTED][google.cloud.dialogflow.v2.ConversationEvent.Type.CONVERSATION_STARTED]
    /// as serialized
    /// [ConversationEvent][google.cloud.dialogflow.v2.ConversationEvent] protos.
    ///
    /// For telephony integration to receive notification, make sure either this
    /// topic is in the same project as the conversation or you grant
    /// `service-<Conversation Project
    /// Number>@gcp-sa-dialogflow.iam.gserviceaccount.com` the `Dialogflow Service
    /// Agent` role in the topic project.
    ///
    /// For chat integration to receive notification, make sure API caller has been
    /// granted the `Dialogflow Service Agent` role for the topic.
    ///
    /// Format: `projects/<Project ID>/locations/<Location ID>/topics/<Topic ID>`.
    ///
    /// [google.cloud.dialogflow.v2.ConversationEvent]: crate::model::ConversationEvent
    /// [google.cloud.dialogflow.v2.ConversationEvent.Type.CONVERSATION_STARTED]: crate::model::conversation_event::Type::ConversationStarted
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub topic: std::string::String,

    /// Format of message.
    pub message_format: crate::model::notification_config::MessageFormat,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl NotificationConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [topic][crate::model::NotificationConfig::topic].
    pub fn set_topic<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.topic = v.into();
        self
    }

    /// Sets the value of [message_format][crate::model::NotificationConfig::message_format].
    pub fn set_message_format<
        T: std::convert::Into<crate::model::notification_config::MessageFormat>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.message_format = v.into();
        self
    }
}

impl wkt::message::Message for NotificationConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.NotificationConfig"
    }
}

/// Defines additional types related to [NotificationConfig].
pub mod notification_config {
    #[allow(unused_imports)]
    use super::*;

    /// Format of cloud pub/sub message.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum MessageFormat {
        /// If it is unspecified, PROTO will be used.
        Unspecified,
        /// Pub/Sub message will be serialized proto.
        Proto,
        /// Pub/Sub message will be json.
        Json,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [MessageFormat::value] or
        /// [MessageFormat::name].
        UnknownValue(message_format::UnknownValue),
    }

    #[doc(hidden)]
    pub mod message_format {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl MessageFormat {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Proto => std::option::Option::Some(1),
                Self::Json => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("MESSAGE_FORMAT_UNSPECIFIED"),
                Self::Proto => std::option::Option::Some("PROTO"),
                Self::Json => std::option::Option::Some("JSON"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for MessageFormat {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for MessageFormat {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for MessageFormat {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Proto,
                2 => Self::Json,
                _ => Self::UnknownValue(message_format::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for MessageFormat {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "MESSAGE_FORMAT_UNSPECIFIED" => Self::Unspecified,
                "PROTO" => Self::Proto,
                "JSON" => Self::Json,
                _ => Self::UnknownValue(message_format::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for MessageFormat {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Proto => serializer.serialize_i32(1),
                Self::Json => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for MessageFormat {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<MessageFormat>::new(
                ".google.cloud.dialogflow.v2.NotificationConfig.MessageFormat",
            ))
        }
    }
}

/// Defines logging behavior for conversation lifecycle events.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LoggingConfig {
    /// Whether to log conversation events like
    /// [CONVERSATION_STARTED][google.cloud.dialogflow.v2.ConversationEvent.Type.CONVERSATION_STARTED]
    /// to Stackdriver in the conversation project as JSON format
    /// [ConversationEvent][google.cloud.dialogflow.v2.ConversationEvent] protos.
    ///
    /// [google.cloud.dialogflow.v2.ConversationEvent]: crate::model::ConversationEvent
    /// [google.cloud.dialogflow.v2.ConversationEvent.Type.CONVERSATION_STARTED]: crate::model::conversation_event::Type::ConversationStarted
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_stackdriver_logging: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl LoggingConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [enable_stackdriver_logging][crate::model::LoggingConfig::enable_stackdriver_logging].
    pub fn set_enable_stackdriver_logging<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_stackdriver_logging = v.into();
        self
    }
}

impl wkt::message::Message for LoggingConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.LoggingConfig"
    }
}

/// The type of Human Agent Assistant API suggestion to perform, and the maximum
/// number of results to return for that type. Multiple `Feature` objects can
/// be specified in the `features` list.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SuggestionFeature {
    /// Type of Human Agent Assistant API feature to request.
    #[serde(rename = "type")]
    pub r#type: crate::model::suggestion_feature::Type,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SuggestionFeature {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [r#type][crate::model::SuggestionFeature::type].
    pub fn set_type<T: std::convert::Into<crate::model::suggestion_feature::Type>>(
        mut self,
        v: T,
    ) -> Self {
        self.r#type = v.into();
        self
    }
}

impl wkt::message::Message for SuggestionFeature {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SuggestionFeature"
    }
}

/// Defines additional types related to [SuggestionFeature].
pub mod suggestion_feature {
    #[allow(unused_imports)]
    use super::*;

    /// Defines the type of Human Agent Assistant feature.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Type {
        /// Unspecified feature type.
        Unspecified,
        /// Run article suggestion model for chat.
        ArticleSuggestion,
        /// Run FAQ model for chat.
        Faq,
        /// Run smart reply model for chat.
        SmartReply,
        /// Run conversation summarization model for chat.
        ConversationSummarization,
        /// Run knowledge search with text input from agent or text generated query.
        KnowledgeSearch,
        /// Run knowledge assist with automatic query generation.
        KnowledgeAssist,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [Type::value] or
        /// [Type::name].
        UnknownValue(r#type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod r#type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl Type {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::ArticleSuggestion => std::option::Option::Some(1),
                Self::Faq => std::option::Option::Some(2),
                Self::SmartReply => std::option::Option::Some(3),
                Self::ConversationSummarization => std::option::Option::Some(8),
                Self::KnowledgeSearch => std::option::Option::Some(14),
                Self::KnowledgeAssist => std::option::Option::Some(15),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("TYPE_UNSPECIFIED"),
                Self::ArticleSuggestion => std::option::Option::Some("ARTICLE_SUGGESTION"),
                Self::Faq => std::option::Option::Some("FAQ"),
                Self::SmartReply => std::option::Option::Some("SMART_REPLY"),
                Self::ConversationSummarization => {
                    std::option::Option::Some("CONVERSATION_SUMMARIZATION")
                }
                Self::KnowledgeSearch => std::option::Option::Some("KNOWLEDGE_SEARCH"),
                Self::KnowledgeAssist => std::option::Option::Some("KNOWLEDGE_ASSIST"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for Type {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for Type {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for Type {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::ArticleSuggestion,
                2 => Self::Faq,
                3 => Self::SmartReply,
                8 => Self::ConversationSummarization,
                14 => Self::KnowledgeSearch,
                15 => Self::KnowledgeAssist,
                _ => Self::UnknownValue(r#type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for Type {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "TYPE_UNSPECIFIED" => Self::Unspecified,
                "ARTICLE_SUGGESTION" => Self::ArticleSuggestion,
                "FAQ" => Self::Faq,
                "SMART_REPLY" => Self::SmartReply,
                "CONVERSATION_SUMMARIZATION" => Self::ConversationSummarization,
                "KNOWLEDGE_SEARCH" => Self::KnowledgeSearch,
                "KNOWLEDGE_ASSIST" => Self::KnowledgeAssist,
                _ => Self::UnknownValue(r#type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for Type {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::ArticleSuggestion => serializer.serialize_i32(1),
                Self::Faq => serializer.serialize_i32(2),
                Self::SmartReply => serializer.serialize_i32(3),
                Self::ConversationSummarization => serializer.serialize_i32(8),
                Self::KnowledgeSearch => serializer.serialize_i32(14),
                Self::KnowledgeAssist => serializer.serialize_i32(15),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for Type {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<Type>::new(
                ".google.cloud.dialogflow.v2.SuggestionFeature.Type",
            ))
        }
    }
}

/// The request message for
/// [ConversationProfiles.SetSuggestionFeatureConfig][google.cloud.dialogflow.v2.ConversationProfiles.SetSuggestionFeatureConfig].
///
/// [google.cloud.dialogflow.v2.ConversationProfiles.SetSuggestionFeatureConfig]: crate::client::ConversationProfiles::set_suggestion_feature_config
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SetSuggestionFeatureConfigRequest {
    /// Required. The Conversation Profile to add or update the suggestion feature
    /// config. Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversationProfiles/<Conversation Profile ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation_profile: std::string::String,

    /// Required. The participant role to add or update the suggestion feature
    /// config. Only HUMAN_AGENT or END_USER can be used.
    pub participant_role: crate::model::participant::Role,

    /// Required. The suggestion feature config to add or update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub suggestion_feature_config:
        std::option::Option<crate::model::human_agent_assistant_config::SuggestionFeatureConfig>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SetSuggestionFeatureConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation_profile][crate::model::SetSuggestionFeatureConfigRequest::conversation_profile].
    pub fn set_conversation_profile<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_profile = v.into();
        self
    }

    /// Sets the value of [participant_role][crate::model::SetSuggestionFeatureConfigRequest::participant_role].
    pub fn set_participant_role<T: std::convert::Into<crate::model::participant::Role>>(
        mut self,
        v: T,
    ) -> Self {
        self.participant_role = v.into();
        self
    }

    /// Sets the value of [suggestion_feature_config][crate::model::SetSuggestionFeatureConfigRequest::suggestion_feature_config].
    pub fn set_suggestion_feature_config<
        T: std::convert::Into<
                std::option::Option<
                    crate::model::human_agent_assistant_config::SuggestionFeatureConfig,
                >,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.suggestion_feature_config = v.into();
        self
    }
}

impl wkt::message::Message for SetSuggestionFeatureConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SetSuggestionFeatureConfigRequest"
    }
}

/// The request message for
/// [ConversationProfiles.ClearSuggestionFeatureConfig][google.cloud.dialogflow.v2.ConversationProfiles.ClearSuggestionFeatureConfig].
///
/// [google.cloud.dialogflow.v2.ConversationProfiles.ClearSuggestionFeatureConfig]: crate::client::ConversationProfiles::clear_suggestion_feature_config
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ClearSuggestionFeatureConfigRequest {
    /// Required. The Conversation Profile to add or update the suggestion feature
    /// config. Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversationProfiles/<Conversation Profile ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation_profile: std::string::String,

    /// Required. The participant role to remove the suggestion feature
    /// config. Only HUMAN_AGENT or END_USER can be used.
    pub participant_role: crate::model::participant::Role,

    /// Required. The type of the suggestion feature to remove.
    pub suggestion_feature_type: crate::model::suggestion_feature::Type,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ClearSuggestionFeatureConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation_profile][crate::model::ClearSuggestionFeatureConfigRequest::conversation_profile].
    pub fn set_conversation_profile<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_profile = v.into();
        self
    }

    /// Sets the value of [participant_role][crate::model::ClearSuggestionFeatureConfigRequest::participant_role].
    pub fn set_participant_role<T: std::convert::Into<crate::model::participant::Role>>(
        mut self,
        v: T,
    ) -> Self {
        self.participant_role = v.into();
        self
    }

    /// Sets the value of [suggestion_feature_type][crate::model::ClearSuggestionFeatureConfigRequest::suggestion_feature_type].
    pub fn set_suggestion_feature_type<
        T: std::convert::Into<crate::model::suggestion_feature::Type>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.suggestion_feature_type = v.into();
        self
    }
}

impl wkt::message::Message for ClearSuggestionFeatureConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ClearSuggestionFeatureConfigRequest"
    }
}

/// Metadata for a
/// [ConversationProfiles.SetSuggestionFeatureConfig][google.cloud.dialogflow.v2.ConversationProfiles.SetSuggestionFeatureConfig]
/// operation.
///
/// [google.cloud.dialogflow.v2.ConversationProfiles.SetSuggestionFeatureConfig]: crate::client::ConversationProfiles::set_suggestion_feature_config
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SetSuggestionFeatureConfigOperationMetadata {
    /// The resource name of the conversation profile. Format:
    /// `projects/<Project ID>/locations/<Location
    /// ID>/conversationProfiles/<Conversation Profile ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation_profile: std::string::String,

    /// Required. The participant role to add or update the suggestion feature
    /// config. Only HUMAN_AGENT or END_USER can be used.
    pub participant_role: crate::model::participant::Role,

    /// Required. The type of the suggestion feature to add or update.
    pub suggestion_feature_type: crate::model::suggestion_feature::Type,

    /// Timestamp whe the request was created. The time is measured on server side.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SetSuggestionFeatureConfigOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation_profile][crate::model::SetSuggestionFeatureConfigOperationMetadata::conversation_profile].
    pub fn set_conversation_profile<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_profile = v.into();
        self
    }

    /// Sets the value of [participant_role][crate::model::SetSuggestionFeatureConfigOperationMetadata::participant_role].
    pub fn set_participant_role<T: std::convert::Into<crate::model::participant::Role>>(
        mut self,
        v: T,
    ) -> Self {
        self.participant_role = v.into();
        self
    }

    /// Sets the value of [suggestion_feature_type][crate::model::SetSuggestionFeatureConfigOperationMetadata::suggestion_feature_type].
    pub fn set_suggestion_feature_type<
        T: std::convert::Into<crate::model::suggestion_feature::Type>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.suggestion_feature_type = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::SetSuggestionFeatureConfigOperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }
}

impl wkt::message::Message for SetSuggestionFeatureConfigOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SetSuggestionFeatureConfigOperationMetadata"
    }
}

/// Metadata for a
/// [ConversationProfiles.ClearSuggestionFeatureConfig][google.cloud.dialogflow.v2.ConversationProfiles.ClearSuggestionFeatureConfig]
/// operation.
///
/// [google.cloud.dialogflow.v2.ConversationProfiles.ClearSuggestionFeatureConfig]: crate::client::ConversationProfiles::clear_suggestion_feature_config
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ClearSuggestionFeatureConfigOperationMetadata {
    /// The resource name of the conversation profile. Format:
    /// `projects/<Project ID>/locations/<Location
    /// ID>/conversationProfiles/<Conversation Profile ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation_profile: std::string::String,

    /// Required. The participant role to remove the suggestion feature
    /// config. Only HUMAN_AGENT or END_USER can be used.
    pub participant_role: crate::model::participant::Role,

    /// Required. The type of the suggestion feature to remove.
    pub suggestion_feature_type: crate::model::suggestion_feature::Type,

    /// Timestamp whe the request was created. The time is measured on server side.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ClearSuggestionFeatureConfigOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation_profile][crate::model::ClearSuggestionFeatureConfigOperationMetadata::conversation_profile].
    pub fn set_conversation_profile<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_profile = v.into();
        self
    }

    /// Sets the value of [participant_role][crate::model::ClearSuggestionFeatureConfigOperationMetadata::participant_role].
    pub fn set_participant_role<T: std::convert::Into<crate::model::participant::Role>>(
        mut self,
        v: T,
    ) -> Self {
        self.participant_role = v.into();
        self
    }

    /// Sets the value of [suggestion_feature_type][crate::model::ClearSuggestionFeatureConfigOperationMetadata::suggestion_feature_type].
    pub fn set_suggestion_feature_type<
        T: std::convert::Into<crate::model::suggestion_feature::Type>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.suggestion_feature_type = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ClearSuggestionFeatureConfigOperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }
}

impl wkt::message::Message for ClearSuggestionFeatureConfigOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ClearSuggestionFeatureConfigOperationMetadata"
    }
}

/// A knowledge document to be used by a
/// [KnowledgeBase][google.cloud.dialogflow.v2.KnowledgeBase].
///
/// For more information, see the [knowledge base
/// guide](https://cloud.google.com/dialogflow/docs/how/knowledge-bases).
///
/// Note: The `projects.agent.knowledgeBases.documents` resource is deprecated;
/// only use `projects.knowledgeBases.documents`.
///
/// [google.cloud.dialogflow.v2.KnowledgeBase]: crate::model::KnowledgeBase
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Document {
    /// Optional. The document resource name.
    /// The name must be empty when creating a document.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/knowledgeBases/<Knowledge Base ID>/documents/<Document ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The display name of the document. The name must be 1024 bytes or
    /// less; otherwise, the creation request fails.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Required. The MIME type of this document.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub mime_type: std::string::String,

    /// Required. The knowledge type of document content.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub knowledge_types: std::vec::Vec<crate::model::document::KnowledgeType>,

    /// Optional. If true, we try to automatically reload the document every day
    /// (at a time picked by the system). If false or unspecified, we don't try
    /// to automatically reload the document.
    ///
    /// Currently you can only enable automatic reload for documents sourced from
    /// a public url, see `source` field for the source types.
    ///
    /// Reload status can be tracked in `latest_reload_status`. If a reload
    /// fails, we will keep the document unchanged.
    ///
    /// If a reload fails with internal errors, the system will try to reload the
    /// document on the next day.
    /// If a reload fails with non-retriable errors (e.g. PERMISSION_DENIED), the
    /// system will not try to reload the document anymore. You need to manually
    /// reload the document successfully by calling `ReloadDocument` and clear the
    /// errors.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_auto_reload: bool,

    /// Output only. The time and status of the latest reload.
    /// This reload may have been triggered automatically or manually
    /// and may not have succeeded.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub latest_reload_status: std::option::Option<crate::model::document::ReloadStatus>,

    /// Optional. Metadata for the document. The metadata supports arbitrary
    /// key-value pairs. Suggested use cases include storing a document's title,
    /// an external URL distinct from the document's content_uri, etc.
    /// The max size of a `key` or a `value` of the metadata is 1024 bytes.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub metadata: std::collections::HashMap<std::string::String, std::string::String>,

    /// Output only. The current state of the document.
    pub state: crate::model::document::State,

    /// Required. The source of this document.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub source: std::option::Option<crate::model::document::Source>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Document {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Document::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Document::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [mime_type][crate::model::Document::mime_type].
    pub fn set_mime_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.mime_type = v.into();
        self
    }

    /// Sets the value of [enable_auto_reload][crate::model::Document::enable_auto_reload].
    pub fn set_enable_auto_reload<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_auto_reload = v.into();
        self
    }

    /// Sets the value of [latest_reload_status][crate::model::Document::latest_reload_status].
    pub fn set_latest_reload_status<
        T: std::convert::Into<std::option::Option<crate::model::document::ReloadStatus>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.latest_reload_status = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Document::state].
    pub fn set_state<T: std::convert::Into<crate::model::document::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [knowledge_types][crate::model::Document::knowledge_types].
    pub fn set_knowledge_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::document::KnowledgeType>,
    {
        use std::iter::Iterator;
        self.knowledge_types = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [metadata][crate::model::Document::metadata].
    pub fn set_metadata<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.metadata = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [source][crate::model::Document::source].
    ///
    /// Note that all the setters affecting `source` are mutually
    /// exclusive.
    pub fn set_source<
        T: std::convert::Into<std::option::Option<crate::model::document::Source>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = v.into();
        self
    }

    /// The value of [source][crate::model::Document::source]
    /// if it holds a `ContentUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn content_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::document::Source::ContentUri(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [source][crate::model::Document::source]
    /// if it holds a `RawContent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn raw_content(&self) -> std::option::Option<&::bytes::Bytes> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::document::Source::RawContent(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [source][crate::model::Document::source]
    /// to hold a `ContentUri`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_content_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source =
            std::option::Option::Some(crate::model::document::Source::ContentUri(v.into()));
        self
    }

    /// Sets the value of [source][crate::model::Document::source]
    /// to hold a `RawContent`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_raw_content<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.source =
            std::option::Option::Some(crate::model::document::Source::RawContent(v.into()));
        self
    }
}

impl wkt::message::Message for Document {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.Document"
    }
}

/// Defines additional types related to [Document].
pub mod document {
    #[allow(unused_imports)]
    use super::*;

    /// The status of a reload attempt.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ReloadStatus {
        /// The time of a reload attempt.
        /// This reload may have been triggered automatically or manually and may
        /// not have succeeded.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub time: std::option::Option<wkt::Timestamp>,

        /// The status of a reload attempt or the initial load.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub status: std::option::Option<rpc::model::Status>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ReloadStatus {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [time][crate::model::document::ReloadStatus::time].
        pub fn set_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
            mut self,
            v: T,
        ) -> Self {
            self.time = v.into();
            self
        }

        /// Sets the value of [status][crate::model::document::ReloadStatus::status].
        pub fn set_status<T: std::convert::Into<std::option::Option<rpc::model::Status>>>(
            mut self,
            v: T,
        ) -> Self {
            self.status = v.into();
            self
        }
    }

    impl wkt::message::Message for ReloadStatus {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.Document.ReloadStatus"
        }
    }

    /// The knowledge type of document content.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum KnowledgeType {
        /// The type is unspecified or arbitrary.
        Unspecified,
        /// The document content contains question and answer pairs as either HTML or
        /// CSV. Typical FAQ HTML formats are parsed accurately, but unusual formats
        /// may fail to be parsed.
        ///
        /// CSV must have questions in the first column and answers in the second,
        /// with no header. Because of this explicit format, they are always parsed
        /// accurately.
        Faq,
        /// Documents for which unstructured text is extracted and used for
        /// question answering.
        ExtractiveQa,
        /// The entire document content as a whole can be used for query results.
        /// Only for Contact Center Solutions on Dialogflow.
        ArticleSuggestion,
        /// The document contains agent-facing Smart Reply entries.
        AgentFacingSmartReply,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [KnowledgeType::value] or
        /// [KnowledgeType::name].
        UnknownValue(knowledge_type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod knowledge_type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl KnowledgeType {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Faq => std::option::Option::Some(1),
                Self::ExtractiveQa => std::option::Option::Some(2),
                Self::ArticleSuggestion => std::option::Option::Some(3),
                Self::AgentFacingSmartReply => std::option::Option::Some(4),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("KNOWLEDGE_TYPE_UNSPECIFIED"),
                Self::Faq => std::option::Option::Some("FAQ"),
                Self::ExtractiveQa => std::option::Option::Some("EXTRACTIVE_QA"),
                Self::ArticleSuggestion => std::option::Option::Some("ARTICLE_SUGGESTION"),
                Self::AgentFacingSmartReply => {
                    std::option::Option::Some("AGENT_FACING_SMART_REPLY")
                }
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for KnowledgeType {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for KnowledgeType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for KnowledgeType {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Faq,
                2 => Self::ExtractiveQa,
                3 => Self::ArticleSuggestion,
                4 => Self::AgentFacingSmartReply,
                _ => Self::UnknownValue(knowledge_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for KnowledgeType {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "KNOWLEDGE_TYPE_UNSPECIFIED" => Self::Unspecified,
                "FAQ" => Self::Faq,
                "EXTRACTIVE_QA" => Self::ExtractiveQa,
                "ARTICLE_SUGGESTION" => Self::ArticleSuggestion,
                "AGENT_FACING_SMART_REPLY" => Self::AgentFacingSmartReply,
                _ => Self::UnknownValue(knowledge_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for KnowledgeType {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Faq => serializer.serialize_i32(1),
                Self::ExtractiveQa => serializer.serialize_i32(2),
                Self::ArticleSuggestion => serializer.serialize_i32(3),
                Self::AgentFacingSmartReply => serializer.serialize_i32(4),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for KnowledgeType {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<KnowledgeType>::new(
                ".google.cloud.dialogflow.v2.Document.KnowledgeType",
            ))
        }
    }

    /// Possible states of the document
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum State {
        /// The document state is unspecified.
        Unspecified,
        /// The document creation is in progress.
        Creating,
        /// The document is active and ready to use.
        Active,
        /// The document updation is in progress.
        Updating,
        /// The document is reloading.
        Reloading,
        /// The document deletion is in progress.
        Deleting,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [State::value] or
        /// [State::name].
        UnknownValue(state::UnknownValue),
    }

    #[doc(hidden)]
    pub mod state {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl State {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Creating => std::option::Option::Some(1),
                Self::Active => std::option::Option::Some(2),
                Self::Updating => std::option::Option::Some(3),
                Self::Reloading => std::option::Option::Some(4),
                Self::Deleting => std::option::Option::Some(5),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("STATE_UNSPECIFIED"),
                Self::Creating => std::option::Option::Some("CREATING"),
                Self::Active => std::option::Option::Some("ACTIVE"),
                Self::Updating => std::option::Option::Some("UPDATING"),
                Self::Reloading => std::option::Option::Some("RELOADING"),
                Self::Deleting => std::option::Option::Some("DELETING"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for State {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Creating,
                2 => Self::Active,
                3 => Self::Updating,
                4 => Self::Reloading,
                5 => Self::Deleting,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for State {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "STATE_UNSPECIFIED" => Self::Unspecified,
                "CREATING" => Self::Creating,
                "ACTIVE" => Self::Active,
                "UPDATING" => Self::Updating,
                "RELOADING" => Self::Reloading,
                "DELETING" => Self::Deleting,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for State {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Creating => serializer.serialize_i32(1),
                Self::Active => serializer.serialize_i32(2),
                Self::Updating => serializer.serialize_i32(3),
                Self::Reloading => serializer.serialize_i32(4),
                Self::Deleting => serializer.serialize_i32(5),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for State {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<State>::new(
                ".google.cloud.dialogflow.v2.Document.State",
            ))
        }
    }

    /// Required. The source of this document.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Source {
        /// The URI where the file content is located.
        ///
        /// For documents stored in Google Cloud Storage, these URIs must have
        /// the form `gs://<bucket-name>/<object-name>`.
        ///
        /// NOTE: External URLs must correspond to public webpages, i.e., they must
        /// be indexed by Google Search. In particular, URLs for showing documents in
        /// Google Cloud Storage (i.e. the URL in your browser) are not supported.
        /// Instead use the `gs://` format URI described above.
        ContentUri(std::string::String),
        /// The raw content of the document. This field is only permitted for
        /// EXTRACTIVE_QA and FAQ knowledge types.
        RawContent(::bytes::Bytes),
    }
}

/// Request message for
/// [Documents.GetDocument][google.cloud.dialogflow.v2.Documents.GetDocument].
///
/// [google.cloud.dialogflow.v2.Documents.GetDocument]: crate::client::Documents::get_document
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetDocumentRequest {
    /// Required. The name of the document to retrieve.
    /// Format `projects/<Project ID>/locations/<Location
    /// ID>/knowledgeBases/<Knowledge Base ID>/documents/<Document ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetDocumentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetDocumentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetDocumentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetDocumentRequest"
    }
}

/// Request message for
/// [Documents.ListDocuments][google.cloud.dialogflow.v2.Documents.ListDocuments].
///
/// [google.cloud.dialogflow.v2.Documents.ListDocuments]: crate::client::Documents::list_documents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListDocumentsRequest {
    /// Required. The knowledge base to list all documents for.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/knowledgeBases/<Knowledge Base ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return in a single page. By
    /// default 10 and at most 100.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// The filter expression used to filter documents returned by the list method.
    /// The expression has the following syntax:
    ///
    /// \<field\> \<operator\> \<value\> [AND \<field\> \<operator\> \<value\>] ...
    ///
    /// The following fields and operators are supported:
    ///
    /// * knowledge_types with has(:) operator
    /// * display_name with has(:) operator
    /// * state with equals(=) operator
    ///
    /// Examples:
    ///
    /// * "knowledge_types:FAQ" matches documents with FAQ knowledge type.
    /// * "display_name:customer" matches documents whose display name contains
    ///   "customer".
    /// * "state=ACTIVE" matches documents with ACTIVE state.
    /// * "knowledge_types:FAQ AND state=ACTIVE" matches all active FAQ documents.
    ///
    /// For more information about filtering, see
    /// [API Filtering](https://aip.dev/160).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListDocumentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListDocumentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListDocumentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListDocumentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListDocumentsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }
}

impl wkt::message::Message for ListDocumentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListDocumentsRequest"
    }
}

/// Response message for
/// [Documents.ListDocuments][google.cloud.dialogflow.v2.Documents.ListDocuments].
///
/// [google.cloud.dialogflow.v2.Documents.ListDocuments]: crate::client::Documents::list_documents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListDocumentsResponse {
    /// The list of documents.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub documents: std::vec::Vec<crate::model::Document>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListDocumentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListDocumentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [documents][crate::model::ListDocumentsResponse::documents].
    pub fn set_documents<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Document>,
    {
        use std::iter::Iterator;
        self.documents = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListDocumentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListDocumentsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListDocumentsResponse {
    type PageItem = crate::model::Document;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.documents
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request message for
/// [Documents.CreateDocument][google.cloud.dialogflow.v2.Documents.CreateDocument].
///
/// [google.cloud.dialogflow.v2.Documents.CreateDocument]: crate::client::Documents::create_document
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateDocumentRequest {
    /// Required. The knowledge base to create a document for.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/knowledgeBases/<Knowledge Base ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The document to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub document: std::option::Option<crate::model::Document>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateDocumentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateDocumentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [document][crate::model::CreateDocumentRequest::document].
    pub fn set_document<T: std::convert::Into<std::option::Option<crate::model::Document>>>(
        mut self,
        v: T,
    ) -> Self {
        self.document = v.into();
        self
    }
}

impl wkt::message::Message for CreateDocumentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateDocumentRequest"
    }
}

/// Request message for
/// [Documents.ImportDocuments][google.cloud.dialogflow.v2.Documents.ImportDocuments].
///
/// [google.cloud.dialogflow.v2.Documents.ImportDocuments]: crate::client::Documents::import_documents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportDocumentsRequest {
    /// Required. The knowledge base to import documents into.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/knowledgeBases/<Knowledge Base ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Document template used for importing all the documents.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub document_template: std::option::Option<crate::model::ImportDocumentTemplate>,

    /// Whether to import custom metadata from Google Cloud Storage.
    /// Only valid when the document source is Google Cloud Storage URI.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub import_gcs_custom_metadata: bool,

    /// Required. The source to use for importing documents.
    ///
    /// If the source captures multiple objects, then multiple documents will be
    /// created, one corresponding to each object, and all of these documents will
    /// be created using the same document template.
    ///
    /// Dialogflow supports up to 350 documents in each request. If you try to
    /// import more, Dialogflow will return an error.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub source: std::option::Option<crate::model::import_documents_request::Source>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportDocumentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ImportDocumentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [document_template][crate::model::ImportDocumentsRequest::document_template].
    pub fn set_document_template<
        T: std::convert::Into<std::option::Option<crate::model::ImportDocumentTemplate>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.document_template = v.into();
        self
    }

    /// Sets the value of [import_gcs_custom_metadata][crate::model::ImportDocumentsRequest::import_gcs_custom_metadata].
    pub fn set_import_gcs_custom_metadata<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.import_gcs_custom_metadata = v.into();
        self
    }

    /// Sets the value of [source][crate::model::ImportDocumentsRequest::source].
    ///
    /// Note that all the setters affecting `source` are mutually
    /// exclusive.
    pub fn set_source<
        T: std::convert::Into<std::option::Option<crate::model::import_documents_request::Source>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = v.into();
        self
    }

    /// The value of [source][crate::model::ImportDocumentsRequest::source]
    /// if it holds a `GcsSource`, `None` if the field is not set or
    /// holds a different branch.
    pub fn gcs_source(&self) -> std::option::Option<&std::boxed::Box<crate::model::GcsSources>> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::import_documents_request::Source::GcsSource(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [source][crate::model::ImportDocumentsRequest::source]
    /// to hold a `GcsSource`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_gcs_source<T: std::convert::Into<std::boxed::Box<crate::model::GcsSources>>>(
        mut self,
        v: T,
    ) -> Self {
        self.source = std::option::Option::Some(
            crate::model::import_documents_request::Source::GcsSource(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ImportDocumentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ImportDocumentsRequest"
    }
}

/// Defines additional types related to [ImportDocumentsRequest].
pub mod import_documents_request {
    #[allow(unused_imports)]
    use super::*;

    /// Required. The source to use for importing documents.
    ///
    /// If the source captures multiple objects, then multiple documents will be
    /// created, one corresponding to each object, and all of these documents will
    /// be created using the same document template.
    ///
    /// Dialogflow supports up to 350 documents in each request. If you try to
    /// import more, Dialogflow will return an error.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Source {
        /// Optional. The Google Cloud Storage location for the documents.
        /// The path can include a wildcard.
        ///
        /// These URIs may have the forms
        /// `gs://<bucket-name>/<object-name>`.
        /// `gs://<bucket-name>/<object-path>/*.<extension>`.
        GcsSource(std::boxed::Box<crate::model::GcsSources>),
    }
}

/// The template used for importing documents.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportDocumentTemplate {
    /// Required. The MIME type of the document.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub mime_type: std::string::String,

    /// Required. The knowledge type of document content.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub knowledge_types: std::vec::Vec<crate::model::document::KnowledgeType>,

    /// Metadata for the document. The metadata supports arbitrary
    /// key-value pairs. Suggested use cases include storing a document's title,
    /// an external URL distinct from the document's content_uri, etc.
    /// The max size of a `key` or a `value` of the metadata is 1024 bytes.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub metadata: std::collections::HashMap<std::string::String, std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportDocumentTemplate {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [mime_type][crate::model::ImportDocumentTemplate::mime_type].
    pub fn set_mime_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.mime_type = v.into();
        self
    }

    /// Sets the value of [knowledge_types][crate::model::ImportDocumentTemplate::knowledge_types].
    pub fn set_knowledge_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::document::KnowledgeType>,
    {
        use std::iter::Iterator;
        self.knowledge_types = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [metadata][crate::model::ImportDocumentTemplate::metadata].
    pub fn set_metadata<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.metadata = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for ImportDocumentTemplate {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ImportDocumentTemplate"
    }
}

/// Response message for
/// [Documents.ImportDocuments][google.cloud.dialogflow.v2.Documents.ImportDocuments].
///
/// [google.cloud.dialogflow.v2.Documents.ImportDocuments]: crate::client::Documents::import_documents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportDocumentsResponse {
    /// Includes details about skipped documents or any other warnings.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub warnings: std::vec::Vec<rpc::model::Status>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ImportDocumentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [warnings][crate::model::ImportDocumentsResponse::warnings].
    pub fn set_warnings<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<rpc::model::Status>,
    {
        use std::iter::Iterator;
        self.warnings = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ImportDocumentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ImportDocumentsResponse"
    }
}

/// Request message for
/// [Documents.DeleteDocument][google.cloud.dialogflow.v2.Documents.DeleteDocument].
///
/// [google.cloud.dialogflow.v2.Documents.DeleteDocument]: crate::client::Documents::delete_document
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteDocumentRequest {
    /// Required. The name of the document to delete.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/knowledgeBases/<Knowledge Base ID>/documents/<Document ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteDocumentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteDocumentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteDocumentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeleteDocumentRequest"
    }
}

/// Request message for
/// [Documents.UpdateDocument][google.cloud.dialogflow.v2.Documents.UpdateDocument].
///
/// [google.cloud.dialogflow.v2.Documents.UpdateDocument]: crate::client::Documents::update_document
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateDocumentRequest {
    /// Required. The document to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub document: std::option::Option<crate::model::Document>,

    /// Optional. Not specified means `update all`.
    /// Currently, only `display_name` can be updated, an InvalidArgument will be
    /// returned for attempting to update other fields.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateDocumentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [document][crate::model::UpdateDocumentRequest::document].
    pub fn set_document<T: std::convert::Into<std::option::Option<crate::model::Document>>>(
        mut self,
        v: T,
    ) -> Self {
        self.document = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateDocumentRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateDocumentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.UpdateDocumentRequest"
    }
}

/// Request message for
/// [Documents.ReloadDocument][google.cloud.dialogflow.v2.Documents.ReloadDocument].
///
/// [google.cloud.dialogflow.v2.Documents.ReloadDocument]: crate::client::Documents::reload_document
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ReloadDocumentRequest {
    /// Required. The name of the document to reload.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/knowledgeBases/<Knowledge Base ID>/documents/<Document ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. Whether to import custom metadata from Google Cloud Storage.
    /// Only valid when the document source is Google Cloud Storage URI.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub import_gcs_custom_metadata: bool,

    /// Optional. When enabled, the reload request is to apply partial update to
    /// the smart messaging allowlist.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub smart_messaging_partial_update: bool,

    /// The source for document reloading.
    ///
    /// If provided, the service will load the contents from the source
    /// and update document in the knowledge base.
    ///
    /// Reloading from a new document source is allowed for smart messaging
    /// documents only. If you want to update the source for other document types,
    /// please delete the existing document and create a new one instead.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub source: std::option::Option<crate::model::reload_document_request::Source>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ReloadDocumentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ReloadDocumentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [import_gcs_custom_metadata][crate::model::ReloadDocumentRequest::import_gcs_custom_metadata].
    pub fn set_import_gcs_custom_metadata<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.import_gcs_custom_metadata = v.into();
        self
    }

    /// Sets the value of [smart_messaging_partial_update][crate::model::ReloadDocumentRequest::smart_messaging_partial_update].
    pub fn set_smart_messaging_partial_update<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.smart_messaging_partial_update = v.into();
        self
    }

    /// Sets the value of [source][crate::model::ReloadDocumentRequest::source].
    ///
    /// Note that all the setters affecting `source` are mutually
    /// exclusive.
    pub fn set_source<
        T: std::convert::Into<std::option::Option<crate::model::reload_document_request::Source>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = v.into();
        self
    }

    /// The value of [source][crate::model::ReloadDocumentRequest::source]
    /// if it holds a `ContentUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn content_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::reload_document_request::Source::ContentUri(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [source][crate::model::ReloadDocumentRequest::source]
    /// to hold a `ContentUri`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_content_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source = std::option::Option::Some(
            crate::model::reload_document_request::Source::ContentUri(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ReloadDocumentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ReloadDocumentRequest"
    }
}

/// Defines additional types related to [ReloadDocumentRequest].
pub mod reload_document_request {
    #[allow(unused_imports)]
    use super::*;

    /// The source for document reloading.
    ///
    /// If provided, the service will load the contents from the source
    /// and update document in the knowledge base.
    ///
    /// Reloading from a new document source is allowed for smart messaging
    /// documents only. If you want to update the source for other document types,
    /// please delete the existing document and create a new one instead.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Source {
        /// Optional. The path of gcs source file for reloading document content. For
        /// now, only gcs uri is supported.
        ///
        /// For documents stored in Google Cloud Storage, these URIs must have
        /// the form `gs://<bucket-name>/<object-name>`.
        ContentUri(std::string::String),
    }
}

/// Request message for
/// [Documents.ExportDocument][google.cloud.dialogflow.v2.Documents.ExportDocument].
///
/// [google.cloud.dialogflow.v2.Documents.ExportDocument]: crate::client::Documents::export_document
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportDocumentRequest {
    /// Required. The name of the document to export.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/knowledgeBases/<Knowledge Base ID>/documents/<Document ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// When enabled, export the full content of the document including empirical
    /// probability.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub export_full_content: bool,

    /// When enabled, export the smart messaging allowlist document for partial
    /// update.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub smart_messaging_partial_update: bool,

    /// Required. The destination for the export.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub destination: std::option::Option<crate::model::export_document_request::Destination>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExportDocumentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ExportDocumentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [export_full_content][crate::model::ExportDocumentRequest::export_full_content].
    pub fn set_export_full_content<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.export_full_content = v.into();
        self
    }

    /// Sets the value of [smart_messaging_partial_update][crate::model::ExportDocumentRequest::smart_messaging_partial_update].
    pub fn set_smart_messaging_partial_update<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.smart_messaging_partial_update = v.into();
        self
    }

    /// Sets the value of [destination][crate::model::ExportDocumentRequest::destination].
    ///
    /// Note that all the setters affecting `destination` are mutually
    /// exclusive.
    pub fn set_destination<
        T: std::convert::Into<std::option::Option<crate::model::export_document_request::Destination>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = v.into();
        self
    }

    /// The value of [destination][crate::model::ExportDocumentRequest::destination]
    /// if it holds a `GcsDestination`, `None` if the field is not set or
    /// holds a different branch.
    pub fn gcs_destination(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::GcsDestination>> {
        #[allow(unreachable_patterns)]
        self.destination.as_ref().and_then(|v| match v {
            crate::model::export_document_request::Destination::GcsDestination(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [destination][crate::model::ExportDocumentRequest::destination]
    /// to hold a `GcsDestination`.
    ///
    /// Note that all the setters affecting `destination` are
    /// mutually exclusive.
    pub fn set_gcs_destination<
        T: std::convert::Into<std::boxed::Box<crate::model::GcsDestination>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination = std::option::Option::Some(
            crate::model::export_document_request::Destination::GcsDestination(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ExportDocumentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ExportDocumentRequest"
    }
}

/// Defines additional types related to [ExportDocumentRequest].
pub mod export_document_request {
    #[allow(unused_imports)]
    use super::*;

    /// Required. The destination for the export.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Destination {
        /// Cloud Storage file path to export the document.
        GcsDestination(std::boxed::Box<crate::model::GcsDestination>),
    }
}

/// Metadata related to the Export Data Operations (e.g. ExportDocument).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportOperationMetadata {
    /// Cloud Storage file path of the exported data.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub exported_gcs_destination: std::option::Option<crate::model::GcsDestination>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ExportOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [exported_gcs_destination][crate::model::ExportOperationMetadata::exported_gcs_destination].
    pub fn set_exported_gcs_destination<
        T: std::convert::Into<std::option::Option<crate::model::GcsDestination>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.exported_gcs_destination = v.into();
        self
    }
}

impl wkt::message::Message for ExportOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ExportOperationMetadata"
    }
}

/// Metadata in google::longrunning::Operation for Knowledge operations.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct KnowledgeOperationMetadata {
    /// Output only. The current state of this operation.
    pub state: crate::model::knowledge_operation_metadata::State,

    /// The name of the knowledge base interacted with during the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub knowledge_base: std::string::String,

    /// Additional metadata for the Knowledge operation.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub operation_metadata:
        std::option::Option<crate::model::knowledge_operation_metadata::OperationMetadata>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl KnowledgeOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [state][crate::model::KnowledgeOperationMetadata::state].
    pub fn set_state<T: std::convert::Into<crate::model::knowledge_operation_metadata::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [knowledge_base][crate::model::KnowledgeOperationMetadata::knowledge_base].
    pub fn set_knowledge_base<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.knowledge_base = v.into();
        self
    }

    /// Sets the value of [operation_metadata][crate::model::KnowledgeOperationMetadata::operation_metadata].
    ///
    /// Note that all the setters affecting `operation_metadata` are mutually
    /// exclusive.
    pub fn set_operation_metadata<
        T: std::convert::Into<
                std::option::Option<crate::model::knowledge_operation_metadata::OperationMetadata>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.operation_metadata = v.into();
        self
    }

    /// The value of [operation_metadata][crate::model::KnowledgeOperationMetadata::operation_metadata]
    /// if it holds a `ExportOperationMetadata`, `None` if the field is not set or
    /// holds a different branch.
    pub fn export_operation_metadata(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::ExportOperationMetadata>> {
        #[allow(unreachable_patterns)]
        self.operation_metadata.as_ref().and_then(|v| match v {
            crate::model::knowledge_operation_metadata::OperationMetadata::ExportOperationMetadata(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [operation_metadata][crate::model::KnowledgeOperationMetadata::operation_metadata]
    /// to hold a `ExportOperationMetadata`.
    ///
    /// Note that all the setters affecting `operation_metadata` are
    /// mutually exclusive.
    pub fn set_export_operation_metadata<
        T: std::convert::Into<std::boxed::Box<crate::model::ExportOperationMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.operation_metadata = std::option::Option::Some(
            crate::model::knowledge_operation_metadata::OperationMetadata::ExportOperationMetadata(
                v.into(),
            ),
        );
        self
    }
}

impl wkt::message::Message for KnowledgeOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.KnowledgeOperationMetadata"
    }
}

/// Defines additional types related to [KnowledgeOperationMetadata].
pub mod knowledge_operation_metadata {
    #[allow(unused_imports)]
    use super::*;

    /// States of the operation.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum State {
        /// State unspecified.
        Unspecified,
        /// The operation has been created.
        Pending,
        /// The operation is currently running.
        Running,
        /// The operation is done, either cancelled or completed.
        Done,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [State::value] or
        /// [State::name].
        UnknownValue(state::UnknownValue),
    }

    #[doc(hidden)]
    pub mod state {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl State {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Pending => std::option::Option::Some(1),
                Self::Running => std::option::Option::Some(2),
                Self::Done => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("STATE_UNSPECIFIED"),
                Self::Pending => std::option::Option::Some("PENDING"),
                Self::Running => std::option::Option::Some("RUNNING"),
                Self::Done => std::option::Option::Some("DONE"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for State {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Pending,
                2 => Self::Running,
                3 => Self::Done,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for State {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "STATE_UNSPECIFIED" => Self::Unspecified,
                "PENDING" => Self::Pending,
                "RUNNING" => Self::Running,
                "DONE" => Self::Done,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for State {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Pending => serializer.serialize_i32(1),
                Self::Running => serializer.serialize_i32(2),
                Self::Done => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for State {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<State>::new(
                ".google.cloud.dialogflow.v2.KnowledgeOperationMetadata.State",
            ))
        }
    }

    /// Additional metadata for the Knowledge operation.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum OperationMetadata {
        /// Metadata for the Export Data Operation such as the destination of export.
        ExportOperationMetadata(std::boxed::Box<crate::model::ExportOperationMetadata>),
    }
}

/// The request to get location-level encryption specification.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetEncryptionSpecRequest {
    /// Required. The name of the encryption spec resource to get.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetEncryptionSpecRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetEncryptionSpecRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetEncryptionSpecRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetEncryptionSpecRequest"
    }
}

/// A customer-managed encryption key specification that can be applied to all
/// created resources (e.g. Conversation).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EncryptionSpec {
    /// Immutable. The resource name of the encryption key specification resource.
    /// Format:
    /// projects/{project}/locations/{location}/encryptionSpec
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The name of customer-managed encryption key that is used to
    /// secure a resource and its sub-resources. If empty, the resource is secured
    /// by the default Google encryption key. Only the key in the same location as
    /// this resource is allowed to be used for encryption. Format:
    /// `projects/{project}/locations/{location}/keyRings/{keyRing}/cryptoKeys/{key}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub kms_key: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl EncryptionSpec {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::EncryptionSpec::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [kms_key][crate::model::EncryptionSpec::kms_key].
    pub fn set_kms_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.kms_key = v.into();
        self
    }
}

impl wkt::message::Message for EncryptionSpec {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.EncryptionSpec"
    }
}

/// The request to initialize a location-level encryption specification.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InitializeEncryptionSpecRequest {
    /// Required. The encryption spec used for CMEK encryption. It is required that
    /// the kms key is in the same region as the endpoint. The same key will be
    /// used for all provisioned resources, if encryption is available. If the
    /// kms_key_name is left empty, no encryption will be enforced.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub encryption_spec: std::option::Option<crate::model::EncryptionSpec>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl InitializeEncryptionSpecRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [encryption_spec][crate::model::InitializeEncryptionSpecRequest::encryption_spec].
    pub fn set_encryption_spec<
        T: std::convert::Into<std::option::Option<crate::model::EncryptionSpec>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.encryption_spec = v.into();
        self
    }
}

impl wkt::message::Message for InitializeEncryptionSpecRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.InitializeEncryptionSpecRequest"
    }
}

/// The response to initialize a location-level encryption specification.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InitializeEncryptionSpecResponse {
    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl InitializeEncryptionSpecResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for InitializeEncryptionSpecResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.InitializeEncryptionSpecResponse"
    }
}

/// Metadata for initializing a location-level encryption specification.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InitializeEncryptionSpecMetadata {
    /// Output only. The original request for initialization.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub request: std::option::Option<crate::model::InitializeEncryptionSpecRequest>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl InitializeEncryptionSpecMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [request][crate::model::InitializeEncryptionSpecMetadata::request].
    pub fn set_request<
        T: std::convert::Into<std::option::Option<crate::model::InitializeEncryptionSpecRequest>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.request = v.into();
        self
    }
}

impl wkt::message::Message for InitializeEncryptionSpecMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.InitializeEncryptionSpecMetadata"
    }
}

/// Each intent parameter has a type, called the entity type, which dictates
/// exactly how data from an end-user expression is extracted.
///
/// Dialogflow provides predefined system entities that can match many common
/// types of data. For example, there are system entities for matching dates,
/// times, colors, email addresses, and so on. You can also create your own
/// custom entities for matching custom data. For example, you could define a
/// vegetable entity that can match the types of vegetables available for
/// purchase with a grocery store agent.
///
/// For more information, see the
/// [Entity guide](https://cloud.google.com/dialogflow/docs/entities-overview).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EntityType {
    /// The unique identifier of the entity type.
    /// Required for
    /// [EntityTypes.UpdateEntityType][google.cloud.dialogflow.v2.EntityTypes.UpdateEntityType]
    /// and
    /// [EntityTypes.BatchUpdateEntityTypes][google.cloud.dialogflow.v2.EntityTypes.BatchUpdateEntityTypes]
    /// methods. Format: `projects/<Project ID>/agent/entityTypes/<Entity Type
    /// ID>`.
    ///
    /// [google.cloud.dialogflow.v2.EntityTypes.BatchUpdateEntityTypes]: crate::client::EntityTypes::batch_update_entity_types
    /// [google.cloud.dialogflow.v2.EntityTypes.UpdateEntityType]: crate::client::EntityTypes::update_entity_type
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The name of the entity type.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Required. Indicates the kind of entity type.
    pub kind: crate::model::entity_type::Kind,

    /// Optional. Indicates whether the entity type can be automatically
    /// expanded.
    pub auto_expansion_mode: crate::model::entity_type::AutoExpansionMode,

    /// Optional. The collection of entity entries associated with the entity type.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub entities: std::vec::Vec<crate::model::entity_type::Entity>,

    /// Optional. Enables fuzzy entity extraction during classification.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_fuzzy_extraction: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl EntityType {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::EntityType::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::EntityType::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [kind][crate::model::EntityType::kind].
    pub fn set_kind<T: std::convert::Into<crate::model::entity_type::Kind>>(
        mut self,
        v: T,
    ) -> Self {
        self.kind = v.into();
        self
    }

    /// Sets the value of [auto_expansion_mode][crate::model::EntityType::auto_expansion_mode].
    pub fn set_auto_expansion_mode<
        T: std::convert::Into<crate::model::entity_type::AutoExpansionMode>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.auto_expansion_mode = v.into();
        self
    }

    /// Sets the value of [enable_fuzzy_extraction][crate::model::EntityType::enable_fuzzy_extraction].
    pub fn set_enable_fuzzy_extraction<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_fuzzy_extraction = v.into();
        self
    }

    /// Sets the value of [entities][crate::model::EntityType::entities].
    pub fn set_entities<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::entity_type::Entity>,
    {
        use std::iter::Iterator;
        self.entities = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for EntityType {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.EntityType"
    }
}

/// Defines additional types related to [EntityType].
pub mod entity_type {
    #[allow(unused_imports)]
    use super::*;

    /// An **entity entry** for an associated entity type.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Entity {
        /// Required. The primary value associated with this entity entry.
        /// For example, if the entity type is *vegetable*, the value could be
        /// *scallions*.
        ///
        /// For `KIND_MAP` entity types:
        ///
        /// * A reference value to be used in place of synonyms.
        ///
        /// For `KIND_LIST` entity types:
        ///
        /// * A string that can contain references to other entity types (with or
        ///   without aliases).
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub value: std::string::String,

        /// Required. A collection of value synonyms. For example, if the entity type
        /// is *vegetable*, and `value` is *scallions*, a synonym could be *green
        /// onions*.
        ///
        /// For `KIND_LIST` entity types:
        ///
        /// * This collection must contain exactly one synonym equal to `value`.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub synonyms: std::vec::Vec<std::string::String>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Entity {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [value][crate::model::entity_type::Entity::value].
        pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.value = v.into();
            self
        }

        /// Sets the value of [synonyms][crate::model::entity_type::Entity::synonyms].
        pub fn set_synonyms<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.synonyms = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for Entity {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.EntityType.Entity"
        }
    }

    /// Represents kinds of entities.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Kind {
        /// Not specified. This value should be never used.
        Unspecified,
        /// Map entity types allow mapping of a group of synonyms to a reference
        /// value.
        Map,
        /// List entity types contain a set of entries that do not map to reference
        /// values. However, list entity types can contain references to other entity
        /// types (with or without aliases).
        List,
        /// Regexp entity types allow to specify regular expressions in entries
        /// values.
        Regexp,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [Kind::value] or
        /// [Kind::name].
        UnknownValue(kind::UnknownValue),
    }

    #[doc(hidden)]
    pub mod kind {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl Kind {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Map => std::option::Option::Some(1),
                Self::List => std::option::Option::Some(2),
                Self::Regexp => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("KIND_UNSPECIFIED"),
                Self::Map => std::option::Option::Some("KIND_MAP"),
                Self::List => std::option::Option::Some("KIND_LIST"),
                Self::Regexp => std::option::Option::Some("KIND_REGEXP"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for Kind {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for Kind {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for Kind {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Map,
                2 => Self::List,
                3 => Self::Regexp,
                _ => Self::UnknownValue(kind::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for Kind {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "KIND_UNSPECIFIED" => Self::Unspecified,
                "KIND_MAP" => Self::Map,
                "KIND_LIST" => Self::List,
                "KIND_REGEXP" => Self::Regexp,
                _ => Self::UnknownValue(kind::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for Kind {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Map => serializer.serialize_i32(1),
                Self::List => serializer.serialize_i32(2),
                Self::Regexp => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for Kind {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<Kind>::new(
                ".google.cloud.dialogflow.v2.EntityType.Kind",
            ))
        }
    }

    /// Represents different entity type expansion modes. Automated expansion
    /// allows an agent to recognize values that have not been explicitly listed in
    /// the entity (for example, new kinds of shopping list items).
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum AutoExpansionMode {
        /// Auto expansion disabled for the entity.
        Unspecified,
        /// Allows an agent to recognize values that have not been explicitly
        /// listed in the entity.
        Default,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [AutoExpansionMode::value] or
        /// [AutoExpansionMode::name].
        UnknownValue(auto_expansion_mode::UnknownValue),
    }

    #[doc(hidden)]
    pub mod auto_expansion_mode {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl AutoExpansionMode {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Default => std::option::Option::Some(1),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("AUTO_EXPANSION_MODE_UNSPECIFIED"),
                Self::Default => std::option::Option::Some("AUTO_EXPANSION_MODE_DEFAULT"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for AutoExpansionMode {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for AutoExpansionMode {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for AutoExpansionMode {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Default,
                _ => Self::UnknownValue(auto_expansion_mode::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for AutoExpansionMode {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "AUTO_EXPANSION_MODE_UNSPECIFIED" => Self::Unspecified,
                "AUTO_EXPANSION_MODE_DEFAULT" => Self::Default,
                _ => Self::UnknownValue(auto_expansion_mode::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for AutoExpansionMode {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Default => serializer.serialize_i32(1),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for AutoExpansionMode {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<AutoExpansionMode>::new(
                ".google.cloud.dialogflow.v2.EntityType.AutoExpansionMode",
            ))
        }
    }
}

/// The request message for
/// [EntityTypes.ListEntityTypes][google.cloud.dialogflow.v2.EntityTypes.ListEntityTypes].
///
/// [google.cloud.dialogflow.v2.EntityTypes.ListEntityTypes]: crate::client::EntityTypes::list_entity_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListEntityTypesRequest {
    /// Required. The agent to list all entity types from.
    /// Format: `projects/<Project ID>/agent`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The language used to access language-specific data.
    /// If not specified, the agent's default language is used.
    /// For more information, see
    /// [Multilingual intent and entity
    /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// Optional. The maximum number of items to return in a single page. By
    /// default 100 and at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// Optional. The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListEntityTypesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListEntityTypesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::ListEntityTypesRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListEntityTypesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListEntityTypesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListEntityTypesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListEntityTypesRequest"
    }
}

/// The response message for
/// [EntityTypes.ListEntityTypes][google.cloud.dialogflow.v2.EntityTypes.ListEntityTypes].
///
/// [google.cloud.dialogflow.v2.EntityTypes.ListEntityTypes]: crate::client::EntityTypes::list_entity_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListEntityTypesResponse {
    /// The list of agent entity types. There will be a maximum number of items
    /// returned based on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub entity_types: std::vec::Vec<crate::model::EntityType>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListEntityTypesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListEntityTypesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [entity_types][crate::model::ListEntityTypesResponse::entity_types].
    pub fn set_entity_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EntityType>,
    {
        use std::iter::Iterator;
        self.entity_types = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListEntityTypesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListEntityTypesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListEntityTypesResponse {
    type PageItem = crate::model::EntityType;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.entity_types
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [EntityTypes.GetEntityType][google.cloud.dialogflow.v2.EntityTypes.GetEntityType].
///
/// [google.cloud.dialogflow.v2.EntityTypes.GetEntityType]: crate::client::EntityTypes::get_entity_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetEntityTypeRequest {
    /// Required. The name of the entity type.
    /// Format: `projects/<Project ID>/agent/entityTypes/<EntityType ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. The language used to access language-specific data.
    /// If not specified, the agent's default language is used.
    /// For more information, see
    /// [Multilingual intent and entity
    /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetEntityTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetEntityTypeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::GetEntityTypeRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for GetEntityTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetEntityTypeRequest"
    }
}

/// The request message for
/// [EntityTypes.CreateEntityType][google.cloud.dialogflow.v2.EntityTypes.CreateEntityType].
///
/// [google.cloud.dialogflow.v2.EntityTypes.CreateEntityType]: crate::client::EntityTypes::create_entity_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateEntityTypeRequest {
    /// Required. The agent to create a entity type for.
    /// Format: `projects/<Project ID>/agent`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The entity type to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub entity_type: std::option::Option<crate::model::EntityType>,

    /// Optional. The language used to access language-specific data.
    /// If not specified, the agent's default language is used.
    /// For more information, see
    /// [Multilingual intent and entity
    /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateEntityTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateEntityTypeRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [entity_type][crate::model::CreateEntityTypeRequest::entity_type].
    pub fn set_entity_type<T: std::convert::Into<std::option::Option<crate::model::EntityType>>>(
        mut self,
        v: T,
    ) -> Self {
        self.entity_type = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::CreateEntityTypeRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for CreateEntityTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateEntityTypeRequest"
    }
}

/// The request message for
/// [EntityTypes.UpdateEntityType][google.cloud.dialogflow.v2.EntityTypes.UpdateEntityType].
///
/// [google.cloud.dialogflow.v2.EntityTypes.UpdateEntityType]: crate::client::EntityTypes::update_entity_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateEntityTypeRequest {
    /// Required. The entity type to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub entity_type: std::option::Option<crate::model::EntityType>,

    /// Optional. The language used to access language-specific data.
    /// If not specified, the agent's default language is used.
    /// For more information, see
    /// [Multilingual intent and entity
    /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// Optional. The mask to control which fields get updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateEntityTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [entity_type][crate::model::UpdateEntityTypeRequest::entity_type].
    pub fn set_entity_type<T: std::convert::Into<std::option::Option<crate::model::EntityType>>>(
        mut self,
        v: T,
    ) -> Self {
        self.entity_type = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::UpdateEntityTypeRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateEntityTypeRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateEntityTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.UpdateEntityTypeRequest"
    }
}

/// The request message for
/// [EntityTypes.DeleteEntityType][google.cloud.dialogflow.v2.EntityTypes.DeleteEntityType].
///
/// [google.cloud.dialogflow.v2.EntityTypes.DeleteEntityType]: crate::client::EntityTypes::delete_entity_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteEntityTypeRequest {
    /// Required. The name of the entity type to delete.
    /// Format: `projects/<Project ID>/agent/entityTypes/<EntityType ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteEntityTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteEntityTypeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteEntityTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeleteEntityTypeRequest"
    }
}

/// The request message for
/// [EntityTypes.BatchUpdateEntityTypes][google.cloud.dialogflow.v2.EntityTypes.BatchUpdateEntityTypes].
///
/// [google.cloud.dialogflow.v2.EntityTypes.BatchUpdateEntityTypes]: crate::client::EntityTypes::batch_update_entity_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchUpdateEntityTypesRequest {
    /// Required. The name of the agent to update or create entity types in.
    /// Format: `projects/<Project ID>/agent`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The language used to access language-specific data.
    /// If not specified, the agent's default language is used.
    /// For more information, see
    /// [Multilingual intent and entity
    /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// Optional. The mask to control which fields get updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// The source of the entity type batch.
    ///
    /// For each entity type in the batch:
    ///
    /// * If `name` is specified, we update an existing entity type.
    /// * If `name` is not specified, we create a new entity type.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub entity_type_batch:
        std::option::Option<crate::model::batch_update_entity_types_request::EntityTypeBatch>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BatchUpdateEntityTypesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::BatchUpdateEntityTypesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::BatchUpdateEntityTypesRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::BatchUpdateEntityTypesRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [entity_type_batch][crate::model::BatchUpdateEntityTypesRequest::entity_type_batch].
    ///
    /// Note that all the setters affecting `entity_type_batch` are mutually
    /// exclusive.
    pub fn set_entity_type_batch<
        T: std::convert::Into<
                std::option::Option<
                    crate::model::batch_update_entity_types_request::EntityTypeBatch,
                >,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.entity_type_batch = v.into();
        self
    }

    /// The value of [entity_type_batch][crate::model::BatchUpdateEntityTypesRequest::entity_type_batch]
    /// if it holds a `EntityTypeBatchUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn entity_type_batch_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.entity_type_batch.as_ref().and_then(|v| match v {
            crate::model::batch_update_entity_types_request::EntityTypeBatch::EntityTypeBatchUri(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [entity_type_batch][crate::model::BatchUpdateEntityTypesRequest::entity_type_batch]
    /// if it holds a `EntityTypeBatchInline`, `None` if the field is not set or
    /// holds a different branch.
    pub fn entity_type_batch_inline(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::EntityTypeBatch>> {
        #[allow(unreachable_patterns)]
        self.entity_type_batch.as_ref().and_then(|v| match v {
            crate::model::batch_update_entity_types_request::EntityTypeBatch::EntityTypeBatchInline(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [entity_type_batch][crate::model::BatchUpdateEntityTypesRequest::entity_type_batch]
    /// to hold a `EntityTypeBatchUri`.
    ///
    /// Note that all the setters affecting `entity_type_batch` are
    /// mutually exclusive.
    pub fn set_entity_type_batch_uri<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.entity_type_batch = std::option::Option::Some(
            crate::model::batch_update_entity_types_request::EntityTypeBatch::EntityTypeBatchUri(
                v.into(),
            ),
        );
        self
    }

    /// Sets the value of [entity_type_batch][crate::model::BatchUpdateEntityTypesRequest::entity_type_batch]
    /// to hold a `EntityTypeBatchInline`.
    ///
    /// Note that all the setters affecting `entity_type_batch` are
    /// mutually exclusive.
    pub fn set_entity_type_batch_inline<
        T: std::convert::Into<std::boxed::Box<crate::model::EntityTypeBatch>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.entity_type_batch = std::option::Option::Some(
            crate::model::batch_update_entity_types_request::EntityTypeBatch::EntityTypeBatchInline(
                v.into(),
            ),
        );
        self
    }
}

impl wkt::message::Message for BatchUpdateEntityTypesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.BatchUpdateEntityTypesRequest"
    }
}

/// Defines additional types related to [BatchUpdateEntityTypesRequest].
pub mod batch_update_entity_types_request {
    #[allow(unused_imports)]
    use super::*;

    /// The source of the entity type batch.
    ///
    /// For each entity type in the batch:
    ///
    /// * If `name` is specified, we update an existing entity type.
    /// * If `name` is not specified, we create a new entity type.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum EntityTypeBatch {
        /// The URI to a Google Cloud Storage file containing entity types to update
        /// or create. The file format can either be a serialized proto (of
        /// EntityBatch type) or a JSON object. Note: The URI must start with
        /// "gs://".
        EntityTypeBatchUri(std::string::String),
        /// The collection of entity types to update or create.
        EntityTypeBatchInline(std::boxed::Box<crate::model::EntityTypeBatch>),
    }
}

/// The response message for
/// [EntityTypes.BatchUpdateEntityTypes][google.cloud.dialogflow.v2.EntityTypes.BatchUpdateEntityTypes].
///
/// [google.cloud.dialogflow.v2.EntityTypes.BatchUpdateEntityTypes]: crate::client::EntityTypes::batch_update_entity_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchUpdateEntityTypesResponse {
    /// The collection of updated or created entity types.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub entity_types: std::vec::Vec<crate::model::EntityType>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BatchUpdateEntityTypesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [entity_types][crate::model::BatchUpdateEntityTypesResponse::entity_types].
    pub fn set_entity_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EntityType>,
    {
        use std::iter::Iterator;
        self.entity_types = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchUpdateEntityTypesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.BatchUpdateEntityTypesResponse"
    }
}

/// The request message for
/// [EntityTypes.BatchDeleteEntityTypes][google.cloud.dialogflow.v2.EntityTypes.BatchDeleteEntityTypes].
///
/// [google.cloud.dialogflow.v2.EntityTypes.BatchDeleteEntityTypes]: crate::client::EntityTypes::batch_delete_entity_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchDeleteEntityTypesRequest {
    /// Required. The name of the agent to delete all entities types for. Format:
    /// `projects/<Project ID>/agent`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The names entity types to delete. All names must point to the
    /// same agent as `parent`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub entity_type_names: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BatchDeleteEntityTypesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::BatchDeleteEntityTypesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [entity_type_names][crate::model::BatchDeleteEntityTypesRequest::entity_type_names].
    pub fn set_entity_type_names<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.entity_type_names = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchDeleteEntityTypesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.BatchDeleteEntityTypesRequest"
    }
}

/// The request message for
/// [EntityTypes.BatchCreateEntities][google.cloud.dialogflow.v2.EntityTypes.BatchCreateEntities].
///
/// [google.cloud.dialogflow.v2.EntityTypes.BatchCreateEntities]: crate::client::EntityTypes::batch_create_entities
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchCreateEntitiesRequest {
    /// Required. The name of the entity type to create entities in. Format:
    /// `projects/<Project ID>/agent/entityTypes/<Entity Type ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The entities to create.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub entities: std::vec::Vec<crate::model::entity_type::Entity>,

    /// Optional. The language used to access language-specific data.
    /// If not specified, the agent's default language is used.
    /// For more information, see
    /// [Multilingual intent and entity
    /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BatchCreateEntitiesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::BatchCreateEntitiesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::BatchCreateEntitiesRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [entities][crate::model::BatchCreateEntitiesRequest::entities].
    pub fn set_entities<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::entity_type::Entity>,
    {
        use std::iter::Iterator;
        self.entities = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchCreateEntitiesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.BatchCreateEntitiesRequest"
    }
}

/// The request message for
/// [EntityTypes.BatchUpdateEntities][google.cloud.dialogflow.v2.EntityTypes.BatchUpdateEntities].
///
/// [google.cloud.dialogflow.v2.EntityTypes.BatchUpdateEntities]: crate::client::EntityTypes::batch_update_entities
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchUpdateEntitiesRequest {
    /// Required. The name of the entity type to update or create entities in.
    /// Format: `projects/<Project ID>/agent/entityTypes/<Entity Type ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The entities to update or create.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub entities: std::vec::Vec<crate::model::entity_type::Entity>,

    /// Optional. The language used to access language-specific data.
    /// If not specified, the agent's default language is used.
    /// For more information, see
    /// [Multilingual intent and entity
    /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// Optional. The mask to control which fields get updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BatchUpdateEntitiesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::BatchUpdateEntitiesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::BatchUpdateEntitiesRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::BatchUpdateEntitiesRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [entities][crate::model::BatchUpdateEntitiesRequest::entities].
    pub fn set_entities<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::entity_type::Entity>,
    {
        use std::iter::Iterator;
        self.entities = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchUpdateEntitiesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.BatchUpdateEntitiesRequest"
    }
}

/// The request message for
/// [EntityTypes.BatchDeleteEntities][google.cloud.dialogflow.v2.EntityTypes.BatchDeleteEntities].
///
/// [google.cloud.dialogflow.v2.EntityTypes.BatchDeleteEntities]: crate::client::EntityTypes::batch_delete_entities
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchDeleteEntitiesRequest {
    /// Required. The name of the entity type to delete entries for. Format:
    /// `projects/<Project ID>/agent/entityTypes/<Entity Type ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The reference `values` of the entities to delete. Note that
    /// these are not fully-qualified names, i.e. they don't start with
    /// `projects/<Project ID>`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub entity_values: std::vec::Vec<std::string::String>,

    /// Optional. The language used to access language-specific data.
    /// If not specified, the agent's default language is used.
    /// For more information, see
    /// [Multilingual intent and entity
    /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BatchDeleteEntitiesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::BatchDeleteEntitiesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::BatchDeleteEntitiesRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [entity_values][crate::model::BatchDeleteEntitiesRequest::entity_values].
    pub fn set_entity_values<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.entity_values = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchDeleteEntitiesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.BatchDeleteEntitiesRequest"
    }
}

/// This message is a wrapper around a collection of entity types.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EntityTypeBatch {
    /// A collection of entity types.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub entity_types: std::vec::Vec<crate::model::EntityType>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl EntityTypeBatch {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [entity_types][crate::model::EntityTypeBatch::entity_types].
    pub fn set_entity_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EntityType>,
    {
        use std::iter::Iterator;
        self.entity_types = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for EntityTypeBatch {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.EntityTypeBatch"
    }
}

/// You can create multiple versions of your agent and publish them to separate
/// environments.
///
/// When you edit an agent, you are editing the draft agent. At any point, you
/// can save the draft agent as an agent version, which is an immutable snapshot
/// of your agent.
///
/// When you save the draft agent, it is published to the default environment.
/// When you create agent versions, you can publish them to custom environments.
/// You can create a variety of custom environments for:
///
/// - testing
/// - development
/// - production
/// - etc.
///
/// For more information, see the [versions and environments
/// guide](https://cloud.google.com/dialogflow/docs/agents-versions).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Environment {
    /// Output only. The unique identifier of this agent environment.
    /// Supported formats:
    ///
    /// - `projects/<Project ID>/agent/environments/<Environment ID>`
    /// - `projects/<Project ID>/locations/<Location
    ///   ID>/agent/environments/<Environment ID>`
    ///
    /// The environment ID for the default environment is `-`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. The developer-provided description for this environment.
    /// The maximum length is 500 characters. If exceeded, the request is rejected.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. The agent version loaded into this environment.
    /// Supported formats:
    ///
    /// - `projects/<Project ID>/agent/versions/<Version ID>`
    /// - `projects/<Project ID>/locations/<Location ID>/agent/versions/<Version
    ///   ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub agent_version: std::string::String,

    /// Output only. The state of this environment. This field is read-only, i.e.,
    /// it cannot be set by create and update methods.
    pub state: crate::model::environment::State,

    /// Output only. The last update time of this environment. This field is
    /// read-only, i.e., it cannot be set by create and update methods.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. Text to speech settings for this environment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub text_to_speech_settings: std::option::Option<crate::model::TextToSpeechSettings>,

    /// Optional. The fulfillment settings to use for this environment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub fulfillment: std::option::Option<crate::model::Fulfillment>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Environment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Environment::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Environment::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [agent_version][crate::model::Environment::agent_version].
    pub fn set_agent_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.agent_version = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Environment::state].
    pub fn set_state<T: std::convert::Into<crate::model::environment::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Environment::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [text_to_speech_settings][crate::model::Environment::text_to_speech_settings].
    pub fn set_text_to_speech_settings<
        T: std::convert::Into<std::option::Option<crate::model::TextToSpeechSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.text_to_speech_settings = v.into();
        self
    }

    /// Sets the value of [fulfillment][crate::model::Environment::fulfillment].
    pub fn set_fulfillment<
        T: std::convert::Into<std::option::Option<crate::model::Fulfillment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.fulfillment = v.into();
        self
    }
}

impl wkt::message::Message for Environment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.Environment"
    }
}

/// Defines additional types related to [Environment].
pub mod environment {
    #[allow(unused_imports)]
    use super::*;

    /// Represents an environment state. When an environment is pointed to a new
    /// agent version, the environment is temporarily set to the `LOADING` state.
    /// During that time, the environment keeps on serving the previous version of
    /// the agent. After the new agent version is done loading, the environment is
    /// set back to the `RUNNING` state.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum State {
        /// Not specified. This value is not used.
        Unspecified,
        /// Stopped.
        Stopped,
        /// Loading.
        Loading,
        /// Running.
        Running,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [State::value] or
        /// [State::name].
        UnknownValue(state::UnknownValue),
    }

    #[doc(hidden)]
    pub mod state {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl State {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Stopped => std::option::Option::Some(1),
                Self::Loading => std::option::Option::Some(2),
                Self::Running => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("STATE_UNSPECIFIED"),
                Self::Stopped => std::option::Option::Some("STOPPED"),
                Self::Loading => std::option::Option::Some("LOADING"),
                Self::Running => std::option::Option::Some("RUNNING"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for State {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Stopped,
                2 => Self::Loading,
                3 => Self::Running,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for State {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "STATE_UNSPECIFIED" => Self::Unspecified,
                "STOPPED" => Self::Stopped,
                "LOADING" => Self::Loading,
                "RUNNING" => Self::Running,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for State {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Stopped => serializer.serialize_i32(1),
                Self::Loading => serializer.serialize_i32(2),
                Self::Running => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for State {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<State>::new(
                ".google.cloud.dialogflow.v2.Environment.State",
            ))
        }
    }
}

/// Instructs the speech synthesizer on how to generate the output audio content.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TextToSpeechSettings {
    /// Optional. Indicates whether text to speech is enabled. Even when this field
    /// is false, other settings in this proto are still retained.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_text_to_speech: bool,

    /// Required. Audio encoding of the synthesized audio content.
    pub output_audio_encoding: crate::model::OutputAudioEncoding,

    /// Optional. The synthesis sample rate (in hertz) for this audio. If not
    /// provided, then the synthesizer will use the default sample rate based on
    /// the audio encoding. If this is different from the voice's natural sample
    /// rate, then the synthesizer will honor this request by converting to the
    /// desired sample rate (which might result in worse audio quality).
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub sample_rate_hertz: i32,

    /// Optional. Configuration of how speech should be synthesized, mapping from
    /// language (<https://cloud.google.com/dialogflow/docs/reference/language>) to
    /// SynthesizeSpeechConfig.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub synthesize_speech_configs:
        std::collections::HashMap<std::string::String, crate::model::SynthesizeSpeechConfig>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TextToSpeechSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [enable_text_to_speech][crate::model::TextToSpeechSettings::enable_text_to_speech].
    pub fn set_enable_text_to_speech<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_text_to_speech = v.into();
        self
    }

    /// Sets the value of [output_audio_encoding][crate::model::TextToSpeechSettings::output_audio_encoding].
    pub fn set_output_audio_encoding<T: std::convert::Into<crate::model::OutputAudioEncoding>>(
        mut self,
        v: T,
    ) -> Self {
        self.output_audio_encoding = v.into();
        self
    }

    /// Sets the value of [sample_rate_hertz][crate::model::TextToSpeechSettings::sample_rate_hertz].
    pub fn set_sample_rate_hertz<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.sample_rate_hertz = v.into();
        self
    }

    /// Sets the value of [synthesize_speech_configs][crate::model::TextToSpeechSettings::synthesize_speech_configs].
    pub fn set_synthesize_speech_configs<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::SynthesizeSpeechConfig>,
    {
        use std::iter::Iterator;
        self.synthesize_speech_configs = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for TextToSpeechSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.TextToSpeechSettings"
    }
}

/// The request message for
/// [Environments.ListEnvironments][google.cloud.dialogflow.v2.Environments.ListEnvironments].
///
/// [google.cloud.dialogflow.v2.Environments.ListEnvironments]: crate::client::Environments::list_environments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListEnvironmentsRequest {
    /// Required. The agent to list all environments from.
    /// Format:
    ///
    /// - `projects/<Project ID>/agent`
    /// - `projects/<Project ID>/locations/<Location ID>/agent`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of items to return in a single page. By
    /// default 100 and at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// Optional. The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListEnvironmentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListEnvironmentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListEnvironmentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListEnvironmentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListEnvironmentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListEnvironmentsRequest"
    }
}

/// The response message for
/// [Environments.ListEnvironments][google.cloud.dialogflow.v2.Environments.ListEnvironments].
///
/// [google.cloud.dialogflow.v2.Environments.ListEnvironments]: crate::client::Environments::list_environments
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListEnvironmentsResponse {
    /// The list of agent environments. There will be a maximum number of items
    /// returned based on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub environments: std::vec::Vec<crate::model::Environment>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListEnvironmentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListEnvironmentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [environments][crate::model::ListEnvironmentsResponse::environments].
    pub fn set_environments<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Environment>,
    {
        use std::iter::Iterator;
        self.environments = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListEnvironmentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListEnvironmentsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListEnvironmentsResponse {
    type PageItem = crate::model::Environment;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.environments
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Environments.GetEnvironment][google.cloud.dialogflow.v2.Environments.GetEnvironment].
///
/// [google.cloud.dialogflow.v2.Environments.GetEnvironment]: crate::client::Environments::get_environment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetEnvironmentRequest {
    /// Required. The name of the environment.
    /// Supported formats:
    ///
    /// - `projects/<Project ID>/agent/environments/<Environment ID>`
    /// - `projects/<Project ID>/locations/<Location
    ///   ID>/agent/environments/<Environment ID>`
    ///
    /// The environment ID for the default environment is `-`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetEnvironmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetEnvironmentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetEnvironmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetEnvironmentRequest"
    }
}

/// The request message for
/// [Environments.CreateEnvironment][google.cloud.dialogflow.v2.Environments.CreateEnvironment].
///
/// [google.cloud.dialogflow.v2.Environments.CreateEnvironment]: crate::client::Environments::create_environment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateEnvironmentRequest {
    /// Required. The agent to create an environment for.
    /// Supported formats:
    ///
    /// - `projects/<Project ID>/agent`
    /// - `projects/<Project ID>/locations/<Location ID>/agent`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The environment to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub environment: std::option::Option<crate::model::Environment>,

    /// Required. The unique id of the new environment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub environment_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateEnvironmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateEnvironmentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [environment][crate::model::CreateEnvironmentRequest::environment].
    pub fn set_environment<
        T: std::convert::Into<std::option::Option<crate::model::Environment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.environment = v.into();
        self
    }

    /// Sets the value of [environment_id][crate::model::CreateEnvironmentRequest::environment_id].
    pub fn set_environment_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.environment_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateEnvironmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateEnvironmentRequest"
    }
}

/// The request message for
/// [Environments.UpdateEnvironment][google.cloud.dialogflow.v2.Environments.UpdateEnvironment].
///
/// [google.cloud.dialogflow.v2.Environments.UpdateEnvironment]: crate::client::Environments::update_environment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateEnvironmentRequest {
    /// Required. The environment to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub environment: std::option::Option<crate::model::Environment>,

    /// Required. The mask to control which fields get updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Optional. This field is used to prevent accidental overwrite of the default
    /// environment, which is an operation that cannot be undone. To confirm that
    /// the caller desires this overwrite, this field must be explicitly set to
    /// true when updating the default environment (environment ID = `-`).
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub allow_load_to_draft_and_discard_changes: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateEnvironmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [environment][crate::model::UpdateEnvironmentRequest::environment].
    pub fn set_environment<
        T: std::convert::Into<std::option::Option<crate::model::Environment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.environment = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateEnvironmentRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [allow_load_to_draft_and_discard_changes][crate::model::UpdateEnvironmentRequest::allow_load_to_draft_and_discard_changes].
    pub fn set_allow_load_to_draft_and_discard_changes<T: std::convert::Into<bool>>(
        mut self,
        v: T,
    ) -> Self {
        self.allow_load_to_draft_and_discard_changes = v.into();
        self
    }
}

impl wkt::message::Message for UpdateEnvironmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.UpdateEnvironmentRequest"
    }
}

/// The request message for
/// [Environments.DeleteEnvironment][google.cloud.dialogflow.v2.Environments.DeleteEnvironment].
///
/// [google.cloud.dialogflow.v2.Environments.DeleteEnvironment]: crate::client::Environments::delete_environment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteEnvironmentRequest {
    /// Required. The name of the environment to delete.
    /// / Format:
    ///
    /// - `projects/<Project ID>/agent/environments/<Environment ID>`
    /// - `projects/<Project ID>/locations/<Location
    ///   ID>/agent/environments/<Environment ID>`
    ///
    /// The environment ID for the default environment is `-`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteEnvironmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteEnvironmentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteEnvironmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeleteEnvironmentRequest"
    }
}

/// The request message for
/// [Environments.GetEnvironmentHistory][google.cloud.dialogflow.v2.Environments.GetEnvironmentHistory].
///
/// [google.cloud.dialogflow.v2.Environments.GetEnvironmentHistory]: crate::client::Environments::get_environment_history
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetEnvironmentHistoryRequest {
    /// Required. The name of the environment to retrieve history for.
    /// Supported formats:
    ///
    /// - `projects/<Project ID>/agent/environments/<Environment ID>`
    /// - `projects/<Project ID>/locations/<Location
    ///   ID>/agent/environments/<Environment ID>`
    ///
    /// The environment ID for the default environment is `-`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of items to return in a single page. By
    /// default 100 and at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// Optional. The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetEnvironmentHistoryRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::GetEnvironmentHistoryRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::GetEnvironmentHistoryRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::GetEnvironmentHistoryRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for GetEnvironmentHistoryRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetEnvironmentHistoryRequest"
    }
}

/// The response message for
/// [Environments.GetEnvironmentHistory][google.cloud.dialogflow.v2.Environments.GetEnvironmentHistory].
///
/// [google.cloud.dialogflow.v2.Environments.GetEnvironmentHistory]: crate::client::Environments::get_environment_history
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EnvironmentHistory {
    /// Output only. The name of the environment this history is for.
    /// Supported formats:
    ///
    /// - `projects/<Project ID>/agent/environments/<Environment ID>`
    /// - `projects/<Project ID>/locations/<Location
    ///   ID>/agent/environments/<Environment ID>`
    ///
    /// The environment ID for the default environment is `-`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Output only. The list of agent environments. There will be a maximum number
    /// of items returned based on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub entries: std::vec::Vec<crate::model::environment_history::Entry>,

    /// Output only. Token to retrieve the next page of results, or empty if there
    /// are no more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl EnvironmentHistory {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::EnvironmentHistory::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [next_page_token][crate::model::EnvironmentHistory::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [entries][crate::model::EnvironmentHistory::entries].
    pub fn set_entries<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::environment_history::Entry>,
    {
        use std::iter::Iterator;
        self.entries = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for EnvironmentHistory {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.EnvironmentHistory"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for EnvironmentHistory {
    type PageItem = crate::model::environment_history::Entry;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.entries
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Defines additional types related to [EnvironmentHistory].
pub mod environment_history {
    #[allow(unused_imports)]
    use super::*;

    /// Represents an environment history entry.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Entry {
        /// The agent version loaded into this environment history entry.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub agent_version: std::string::String,

        /// The developer-provided description for this environment history entry.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub description: std::string::String,

        /// The creation time of this environment history entry.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub create_time: std::option::Option<wkt::Timestamp>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Entry {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [agent_version][crate::model::environment_history::Entry::agent_version].
        pub fn set_agent_version<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.agent_version = v.into();
            self
        }

        /// Sets the value of [description][crate::model::environment_history::Entry::description].
        pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.description = v.into();
            self
        }

        /// Sets the value of [create_time][crate::model::environment_history::Entry::create_time].
        pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
            mut self,
            v: T,
        ) -> Self {
            self.create_time = v.into();
            self
        }
    }

    impl wkt::message::Message for Entry {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.EnvironmentHistory.Entry"
        }
    }
}

/// By default, your agent responds to a matched intent with a static response.
/// As an alternative, you can provide a more dynamic response by using
/// fulfillment. When you enable fulfillment for an intent, Dialogflow responds
/// to that intent by calling a service that you define. For example, if an
/// end-user wants to schedule a haircut on Friday, your service can check your
/// database and respond to the end-user with availability information for
/// Friday.
///
/// For more information, see the [fulfillment
/// guide](https://cloud.google.com/dialogflow/docs/fulfillment-overview).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Fulfillment {
    /// Required. The unique identifier of the fulfillment.
    /// Supported formats:
    ///
    /// - `projects/<Project ID>/agent/fulfillment`
    /// - `projects/<Project ID>/locations/<Location ID>/agent/fulfillment`
    ///
    /// This field is not used for Fulfillment in an Environment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. The human-readable name of the fulfillment, unique within the
    /// agent.
    ///
    /// This field is not used for Fulfillment in an Environment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Optional. Whether fulfillment is enabled.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enabled: bool,

    /// Optional. The field defines whether the fulfillment is enabled for certain
    /// features.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub features: std::vec::Vec<crate::model::fulfillment::Feature>,

    /// Required. The fulfillment configuration.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub fulfillment: std::option::Option<crate::model::fulfillment::Fulfillment>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Fulfillment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Fulfillment::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Fulfillment::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [enabled][crate::model::Fulfillment::enabled].
    pub fn set_enabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enabled = v.into();
        self
    }

    /// Sets the value of [features][crate::model::Fulfillment::features].
    pub fn set_features<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::fulfillment::Feature>,
    {
        use std::iter::Iterator;
        self.features = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [fulfillment][crate::model::Fulfillment::fulfillment].
    ///
    /// Note that all the setters affecting `fulfillment` are mutually
    /// exclusive.
    pub fn set_fulfillment<
        T: std::convert::Into<std::option::Option<crate::model::fulfillment::Fulfillment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.fulfillment = v.into();
        self
    }

    /// The value of [fulfillment][crate::model::Fulfillment::fulfillment]
    /// if it holds a `GenericWebService`, `None` if the field is not set or
    /// holds a different branch.
    pub fn generic_web_service(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::fulfillment::GenericWebService>> {
        #[allow(unreachable_patterns)]
        self.fulfillment.as_ref().and_then(|v| match v {
            crate::model::fulfillment::Fulfillment::GenericWebService(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [fulfillment][crate::model::Fulfillment::fulfillment]
    /// to hold a `GenericWebService`.
    ///
    /// Note that all the setters affecting `fulfillment` are
    /// mutually exclusive.
    pub fn set_generic_web_service<
        T: std::convert::Into<std::boxed::Box<crate::model::fulfillment::GenericWebService>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.fulfillment = std::option::Option::Some(
            crate::model::fulfillment::Fulfillment::GenericWebService(v.into()),
        );
        self
    }
}

impl wkt::message::Message for Fulfillment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.Fulfillment"
    }
}

/// Defines additional types related to [Fulfillment].
pub mod fulfillment {
    #[allow(unused_imports)]
    use super::*;

    /// Represents configuration for a generic web service.
    /// Dialogflow supports two mechanisms for authentications:
    ///
    /// - Basic authentication with username and password.
    /// - Authentication with additional authentication headers.
    ///
    /// More information could be found at:
    /// <https://cloud.google.com/dialogflow/docs/fulfillment-configure>.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct GenericWebService {
        /// Required. The fulfillment URI for receiving POST requests.
        /// It must use https protocol.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub uri: std::string::String,

        /// Optional. The user name for HTTP Basic authentication.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub username: std::string::String,

        /// Optional. The password for HTTP Basic authentication.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub password: std::string::String,

        /// Optional. The HTTP request headers to send together with fulfillment
        /// requests.
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub request_headers: std::collections::HashMap<std::string::String, std::string::String>,

        /// Optional. Indicates if generic web service is created through Cloud
        /// Functions integration. Defaults to false.
        ///
        /// is_cloud_function is deprecated. Cloud functions can be configured by
        /// its uri as a regular web service now.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        #[deprecated]
        pub is_cloud_function: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl GenericWebService {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [uri][crate::model::fulfillment::GenericWebService::uri].
        pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.uri = v.into();
            self
        }

        /// Sets the value of [username][crate::model::fulfillment::GenericWebService::username].
        pub fn set_username<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.username = v.into();
            self
        }

        /// Sets the value of [password][crate::model::fulfillment::GenericWebService::password].
        pub fn set_password<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.password = v.into();
            self
        }

        /// Sets the value of [is_cloud_function][crate::model::fulfillment::GenericWebService::is_cloud_function].
        #[deprecated]
        pub fn set_is_cloud_function<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.is_cloud_function = v.into();
            self
        }

        /// Sets the value of [request_headers][crate::model::fulfillment::GenericWebService::request_headers].
        pub fn set_request_headers<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.request_headers = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl wkt::message::Message for GenericWebService {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.Fulfillment.GenericWebService"
        }
    }

    /// Whether fulfillment is enabled for the specific feature.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Feature {
        /// The type of the feature that enabled for fulfillment.
        #[serde(rename = "type")]
        pub r#type: crate::model::fulfillment::feature::Type,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Feature {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [r#type][crate::model::fulfillment::Feature::type].
        pub fn set_type<T: std::convert::Into<crate::model::fulfillment::feature::Type>>(
            mut self,
            v: T,
        ) -> Self {
            self.r#type = v.into();
            self
        }
    }

    impl wkt::message::Message for Feature {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.Fulfillment.Feature"
        }
    }

    /// Defines additional types related to [Feature].
    pub mod feature {
        #[allow(unused_imports)]
        use super::*;

        /// The type of the feature.
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum Type {
            /// Feature type not specified.
            Unspecified,
            /// Fulfillment is enabled for SmallTalk.
            Smalltalk,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [Type::value] or
            /// [Type::name].
            UnknownValue(r#type::UnknownValue),
        }

        #[doc(hidden)]
        pub mod r#type {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl Type {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::Unspecified => std::option::Option::Some(0),
                    Self::Smalltalk => std::option::Option::Some(1),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::Unspecified => std::option::Option::Some("TYPE_UNSPECIFIED"),
                    Self::Smalltalk => std::option::Option::Some("SMALLTALK"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for Type {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for Type {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for Type {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::Unspecified,
                    1 => Self::Smalltalk,
                    _ => Self::UnknownValue(r#type::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for Type {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "TYPE_UNSPECIFIED" => Self::Unspecified,
                    "SMALLTALK" => Self::Smalltalk,
                    _ => Self::UnknownValue(r#type::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for Type {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::Unspecified => serializer.serialize_i32(0),
                    Self::Smalltalk => serializer.serialize_i32(1),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for Type {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<Type>::new(
                    ".google.cloud.dialogflow.v2.Fulfillment.Feature.Type",
                ))
            }
        }
    }

    /// Required. The fulfillment configuration.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Fulfillment {
        /// Configuration for a generic web service.
        GenericWebService(std::boxed::Box<crate::model::fulfillment::GenericWebService>),
    }
}

/// The request message for
/// [Fulfillments.GetFulfillment][google.cloud.dialogflow.v2.Fulfillments.GetFulfillment].
///
/// [google.cloud.dialogflow.v2.Fulfillments.GetFulfillment]: crate::client::Fulfillments::get_fulfillment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetFulfillmentRequest {
    /// Required. The name of the fulfillment.
    /// Format: `projects/<Project ID>/agent/fulfillment`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetFulfillmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetFulfillmentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetFulfillmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetFulfillmentRequest"
    }
}

/// The request message for
/// [Fulfillments.UpdateFulfillment][google.cloud.dialogflow.v2.Fulfillments.UpdateFulfillment].
///
/// [google.cloud.dialogflow.v2.Fulfillments.UpdateFulfillment]: crate::client::Fulfillments::update_fulfillment
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateFulfillmentRequest {
    /// Required. The fulfillment to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub fulfillment: std::option::Option<crate::model::Fulfillment>,

    /// Required. The mask to control which fields get updated. If the mask is not
    /// present, all fields will be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateFulfillmentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [fulfillment][crate::model::UpdateFulfillmentRequest::fulfillment].
    pub fn set_fulfillment<
        T: std::convert::Into<std::option::Option<crate::model::Fulfillment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.fulfillment = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateFulfillmentRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateFulfillmentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.UpdateFulfillmentRequest"
    }
}

/// Google Cloud Storage location for the inputs.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GcsSources {
    /// Required. Google Cloud Storage URIs for the inputs. A URI is of the form:
    /// `gs://bucket/object-prefix-or-name`
    /// Whether a prefix or name is used depends on the use case.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub uris: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GcsSources {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [uris][crate::model::GcsSources::uris].
    pub fn set_uris<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.uris = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for GcsSources {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GcsSources"
    }
}

/// Google Cloud Storage location for the output.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GcsDestination {
    /// The Google Cloud Storage URIs for the output. A URI is of the
    /// form:
    /// `gs://bucket/object-prefix-or-name`
    /// Whether a prefix or name is used depends on the use case. The requesting
    /// user must have "write-permission" to the bucket.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GcsDestination {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [uri][crate::model::GcsDestination::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }
}

impl wkt::message::Message for GcsDestination {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GcsDestination"
    }
}

/// Request message of CreateGenerator.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateGeneratorRequest {
    /// Required. The project/location to create generator for. Format:
    /// `projects/<Project ID>/locations/<Location ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The generator to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub generator: std::option::Option<crate::model::Generator>,

    /// Optional. The ID to use for the generator, which will become the final
    /// component of the generator's resource name.
    ///
    /// The generator ID must be compliant with the regression formula
    /// `[a-zA-Z][a-zA-Z0-9_-]*` with the characters length in range of [3,64].
    /// If the field is not provided, an Id will be auto-generated.
    /// If the field is provided, the caller is responsible for
    ///
    /// . the uniqueness of the ID, otherwise the request will be rejected.
    /// . the consistency for whether to use custom ID or not under a project to
    ///   better ensure uniqueness.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub generator_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateGeneratorRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateGeneratorRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [generator][crate::model::CreateGeneratorRequest::generator].
    pub fn set_generator<T: std::convert::Into<std::option::Option<crate::model::Generator>>>(
        mut self,
        v: T,
    ) -> Self {
        self.generator = v.into();
        self
    }

    /// Sets the value of [generator_id][crate::model::CreateGeneratorRequest::generator_id].
    pub fn set_generator_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.generator_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateGeneratorRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateGeneratorRequest"
    }
}

/// Request message of GetGenerator.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetGeneratorRequest {
    /// Required. The generator resource name to retrieve. Format:
    /// `projects/<Project ID>/locations/<Location ID>/generators/<Generator ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetGeneratorRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetGeneratorRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetGeneratorRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetGeneratorRequest"
    }
}

/// Request message of ListGenerators.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListGeneratorsRequest {
    /// Required. The project/location to list generators for. Format:
    /// `projects/<Project ID>/locations/<Location ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Maximum number of conversation models to return in a single page.
    /// Default to 10.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// Optional. The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListGeneratorsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListGeneratorsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListGeneratorsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListGeneratorsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListGeneratorsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListGeneratorsRequest"
    }
}

/// Response of ListGenerators.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListGeneratorsResponse {
    /// List of generators retrieved.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub generators: std::vec::Vec<crate::model::Generator>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListGeneratorsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListGeneratorsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [generators][crate::model::ListGeneratorsResponse::generators].
    pub fn set_generators<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Generator>,
    {
        use std::iter::Iterator;
        self.generators = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListGeneratorsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListGeneratorsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListGeneratorsResponse {
    type PageItem = crate::model::Generator;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.generators
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request of DeleteGenerator.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteGeneratorRequest {
    /// Required. The generator resource name to delete. Format:
    /// `projects/<Project ID>/locations/<Location ID>/generators/<Generator ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteGeneratorRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteGeneratorRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteGeneratorRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeleteGeneratorRequest"
    }
}

/// Request of UpdateGenerator.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateGeneratorRequest {
    /// Required. The generator to update.
    /// The name field of generator is to identify the generator to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub generator: std::option::Option<crate::model::Generator>,

    /// Optional. The list of fields to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateGeneratorRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [generator][crate::model::UpdateGeneratorRequest::generator].
    pub fn set_generator<T: std::convert::Into<std::option::Option<crate::model::Generator>>>(
        mut self,
        v: T,
    ) -> Self {
        self.generator = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateGeneratorRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateGeneratorRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.UpdateGeneratorRequest"
    }
}

/// Represents a message entry of a conversation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageEntry {
    /// Optional. Participant role of the message.
    pub role: crate::model::message_entry::Role,

    /// Optional. Transcript content of the message.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub text: std::string::String,

    /// Optional. The language of the text. See [Language
    /// Support](https://cloud.google.com/dialogflow/docs/reference/language) for a
    /// list of the currently supported language codes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// Optional. Create time of the message entry.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageEntry {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [role][crate::model::MessageEntry::role].
    pub fn set_role<T: std::convert::Into<crate::model::message_entry::Role>>(
        mut self,
        v: T,
    ) -> Self {
        self.role = v.into();
        self
    }

    /// Sets the value of [text][crate::model::MessageEntry::text].
    pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.text = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::MessageEntry::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::MessageEntry::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }
}

impl wkt::message::Message for MessageEntry {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.MessageEntry"
    }
}

/// Defines additional types related to [MessageEntry].
pub mod message_entry {
    #[allow(unused_imports)]
    use super::*;

    /// Enumeration of the roles a participant can play in a conversation.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Role {
        /// Participant role not set.
        Unspecified,
        /// Participant is a human agent.
        HumanAgent,
        /// Participant is an automated agent, such as a Dialogflow agent.
        AutomatedAgent,
        /// Participant is an end user that has called or chatted with
        /// Dialogflow services.
        EndUser,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [Role::value] or
        /// [Role::name].
        UnknownValue(role::UnknownValue),
    }

    #[doc(hidden)]
    pub mod role {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl Role {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::HumanAgent => std::option::Option::Some(1),
                Self::AutomatedAgent => std::option::Option::Some(2),
                Self::EndUser => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("ROLE_UNSPECIFIED"),
                Self::HumanAgent => std::option::Option::Some("HUMAN_AGENT"),
                Self::AutomatedAgent => std::option::Option::Some("AUTOMATED_AGENT"),
                Self::EndUser => std::option::Option::Some("END_USER"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for Role {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for Role {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for Role {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::HumanAgent,
                2 => Self::AutomatedAgent,
                3 => Self::EndUser,
                _ => Self::UnknownValue(role::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for Role {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "ROLE_UNSPECIFIED" => Self::Unspecified,
                "HUMAN_AGENT" => Self::HumanAgent,
                "AUTOMATED_AGENT" => Self::AutomatedAgent,
                "END_USER" => Self::EndUser,
                _ => Self::UnknownValue(role::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for Role {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::HumanAgent => serializer.serialize_i32(1),
                Self::AutomatedAgent => serializer.serialize_i32(2),
                Self::EndUser => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for Role {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<Role>::new(
                ".google.cloud.dialogflow.v2.MessageEntry.Role",
            ))
        }
    }
}

/// Context of the conversation, including transcripts.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ConversationContext {
    /// Optional. List of message transcripts in the conversation.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub message_entries: std::vec::Vec<crate::model::MessageEntry>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ConversationContext {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [message_entries][crate::model::ConversationContext::message_entries].
    pub fn set_message_entries<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::MessageEntry>,
    {
        use std::iter::Iterator;
        self.message_entries = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ConversationContext {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ConversationContext"
    }
}

/// List of summarization sections.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SummarizationSectionList {
    /// Optional. Summarization sections.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub summarization_sections: std::vec::Vec<crate::model::SummarizationSection>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SummarizationSectionList {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [summarization_sections][crate::model::SummarizationSectionList::summarization_sections].
    pub fn set_summarization_sections<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SummarizationSection>,
    {
        use std::iter::Iterator;
        self.summarization_sections = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SummarizationSectionList {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SummarizationSectionList"
    }
}

/// Providing examples in the generator (i.e. building a few-shot generator)
/// helps convey the desired format of the LLM response.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FewShotExample {
    /// Optional. Conversation transcripts.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub conversation_context: std::option::Option<crate::model::ConversationContext>,

    /// Optional. Key is the placeholder field name in input, value is the value of
    /// the placeholder. E.g. instruction contains "@price", and ingested data has
    /// <"price", "10">
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub extra_info: std::collections::HashMap<std::string::String, std::string::String>,

    /// Required. Example output of the model.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub output: std::option::Option<crate::model::GeneratorSuggestion>,

    /// Instruction list of this few_shot example.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub instruction_list: std::option::Option<crate::model::few_shot_example::InstructionList>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl FewShotExample {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation_context][crate::model::FewShotExample::conversation_context].
    pub fn set_conversation_context<
        T: std::convert::Into<std::option::Option<crate::model::ConversationContext>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.conversation_context = v.into();
        self
    }

    /// Sets the value of [output][crate::model::FewShotExample::output].
    pub fn set_output<
        T: std::convert::Into<std::option::Option<crate::model::GeneratorSuggestion>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.output = v.into();
        self
    }

    /// Sets the value of [extra_info][crate::model::FewShotExample::extra_info].
    pub fn set_extra_info<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.extra_info = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [instruction_list][crate::model::FewShotExample::instruction_list].
    ///
    /// Note that all the setters affecting `instruction_list` are mutually
    /// exclusive.
    pub fn set_instruction_list<
        T: std::convert::Into<std::option::Option<crate::model::few_shot_example::InstructionList>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.instruction_list = v.into();
        self
    }

    /// The value of [instruction_list][crate::model::FewShotExample::instruction_list]
    /// if it holds a `SummarizationSectionList`, `None` if the field is not set or
    /// holds a different branch.
    pub fn summarization_section_list(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::SummarizationSectionList>> {
        #[allow(unreachable_patterns)]
        self.instruction_list.as_ref().and_then(|v| match v {
            crate::model::few_shot_example::InstructionList::SummarizationSectionList(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [instruction_list][crate::model::FewShotExample::instruction_list]
    /// to hold a `SummarizationSectionList`.
    ///
    /// Note that all the setters affecting `instruction_list` are
    /// mutually exclusive.
    pub fn set_summarization_section_list<
        T: std::convert::Into<std::boxed::Box<crate::model::SummarizationSectionList>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.instruction_list = std::option::Option::Some(
            crate::model::few_shot_example::InstructionList::SummarizationSectionList(v.into()),
        );
        self
    }
}

impl wkt::message::Message for FewShotExample {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.FewShotExample"
    }
}

/// Defines additional types related to [FewShotExample].
pub mod few_shot_example {
    #[allow(unused_imports)]
    use super::*;

    /// Instruction list of this few_shot example.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum InstructionList {
        /// Summarization sections.
        SummarizationSectionList(std::boxed::Box<crate::model::SummarizationSectionList>),
    }
}

/// The parameters of inference.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InferenceParameter {
    /// Optional. Maximum number of the output tokens for the generator.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub max_output_tokens: std::option::Option<i32>,

    /// Optional. Controls the randomness of LLM predictions.
    /// Low temperature = less random. High temperature = more random.
    /// If unset (or 0), uses a default value of 0.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub temperature: std::option::Option<f64>,

    /// Optional. Top-k changes how the model selects tokens for output. A top-k of
    /// 1 means the selected token is the most probable among all tokens in the
    /// model's vocabulary (also called greedy decoding), while a top-k of 3 means
    /// that the next token is selected from among the 3 most probable tokens
    /// (using temperature). For each token selection step, the top K tokens with
    /// the highest probabilities are sampled. Then tokens are further filtered
    /// based on topP with the final token selected using temperature sampling.
    /// Specify a lower value for less random responses and a higher value for more
    /// random responses. Acceptable value is [1, 40], default to 40.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub top_k: std::option::Option<i32>,

    /// Optional. Top-p changes how the model selects tokens for output. Tokens are
    /// selected from most K (see topK parameter) probable to least until the sum
    /// of their probabilities equals the top-p value. For example, if tokens A, B,
    /// and C have a probability of 0.3, 0.2, and 0.1 and the top-p value is 0.5,
    /// then the model will select either A or B as the next token (using
    /// temperature) and doesn't consider C. The default top-p value is 0.95.
    /// Specify a lower value for less random responses and a higher value for more
    /// random responses. Acceptable value is [0.0, 1.0], default to 0.95.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub top_p: std::option::Option<f64>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl InferenceParameter {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [max_output_tokens][crate::model::InferenceParameter::max_output_tokens].
    pub fn set_max_output_tokens<T: std::convert::Into<std::option::Option<i32>>>(
        mut self,
        v: T,
    ) -> Self {
        self.max_output_tokens = v.into();
        self
    }

    /// Sets the value of [temperature][crate::model::InferenceParameter::temperature].
    pub fn set_temperature<T: std::convert::Into<std::option::Option<f64>>>(
        mut self,
        v: T,
    ) -> Self {
        self.temperature = v.into();
        self
    }

    /// Sets the value of [top_k][crate::model::InferenceParameter::top_k].
    pub fn set_top_k<T: std::convert::Into<std::option::Option<i32>>>(mut self, v: T) -> Self {
        self.top_k = v.into();
        self
    }

    /// Sets the value of [top_p][crate::model::InferenceParameter::top_p].
    pub fn set_top_p<T: std::convert::Into<std::option::Option<f64>>>(mut self, v: T) -> Self {
        self.top_p = v.into();
        self
    }
}

impl wkt::message::Message for InferenceParameter {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.InferenceParameter"
    }
}

/// Represents the section of summarization.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SummarizationSection {
    /// Optional. Name of the section, for example, "situation".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub key: std::string::String,

    /// Optional. Definition of the section, for example, "what the customer needs
    /// help with or has question about."
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub definition: std::string::String,

    /// Optional. Type of the summarization section.
    #[serde(rename = "type")]
    pub r#type: crate::model::summarization_section::Type,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SummarizationSection {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [key][crate::model::SummarizationSection::key].
    pub fn set_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.key = v.into();
        self
    }

    /// Sets the value of [definition][crate::model::SummarizationSection::definition].
    pub fn set_definition<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.definition = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::SummarizationSection::type].
    pub fn set_type<T: std::convert::Into<crate::model::summarization_section::Type>>(
        mut self,
        v: T,
    ) -> Self {
        self.r#type = v.into();
        self
    }
}

impl wkt::message::Message for SummarizationSection {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SummarizationSection"
    }
}

/// Defines additional types related to [SummarizationSection].
pub mod summarization_section {
    #[allow(unused_imports)]
    use super::*;

    /// Type enum of the summarization sections.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Type {
        /// Undefined section type, does not return anything.
        Unspecified,
        /// What the customer needs help with or has question about.
        /// Section name: "situation".
        Situation,
        /// What the agent does to help the customer.
        /// Section name: "action".
        Action,
        /// Result of the customer service. A single word describing the result
        /// of the conversation.
        /// Section name: "resolution".
        Resolution,
        /// Reason for cancellation if the customer requests for a cancellation.
        /// "N/A" otherwise.
        /// Section name: "reason_for_cancellation".
        ReasonForCancellation,
        /// "Unsatisfied" or "Satisfied" depending on the customer's feelings at
        /// the end of the conversation.
        /// Section name: "customer_satisfaction".
        CustomerSatisfaction,
        /// Key entities extracted from the conversation, such as ticket number,
        /// order number, dollar amount, etc.
        /// Section names are prefixed by "entities/".
        Entities,
        /// Customer defined sections.
        CustomerDefined,
        /// Concise version of the situation section. This type is only available if
        /// type SITUATION is not selected.
        SituationConcise,
        /// Concise version of the action section. This type is only available if
        /// type ACTION is not selected.
        ActionConcise,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [Type::value] or
        /// [Type::name].
        UnknownValue(r#type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod r#type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl Type {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Situation => std::option::Option::Some(1),
                Self::Action => std::option::Option::Some(2),
                Self::Resolution => std::option::Option::Some(3),
                Self::ReasonForCancellation => std::option::Option::Some(4),
                Self::CustomerSatisfaction => std::option::Option::Some(5),
                Self::Entities => std::option::Option::Some(6),
                Self::CustomerDefined => std::option::Option::Some(7),
                Self::SituationConcise => std::option::Option::Some(9),
                Self::ActionConcise => std::option::Option::Some(10),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("TYPE_UNSPECIFIED"),
                Self::Situation => std::option::Option::Some("SITUATION"),
                Self::Action => std::option::Option::Some("ACTION"),
                Self::Resolution => std::option::Option::Some("RESOLUTION"),
                Self::ReasonForCancellation => std::option::Option::Some("REASON_FOR_CANCELLATION"),
                Self::CustomerSatisfaction => std::option::Option::Some("CUSTOMER_SATISFACTION"),
                Self::Entities => std::option::Option::Some("ENTITIES"),
                Self::CustomerDefined => std::option::Option::Some("CUSTOMER_DEFINED"),
                Self::SituationConcise => std::option::Option::Some("SITUATION_CONCISE"),
                Self::ActionConcise => std::option::Option::Some("ACTION_CONCISE"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for Type {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for Type {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for Type {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Situation,
                2 => Self::Action,
                3 => Self::Resolution,
                4 => Self::ReasonForCancellation,
                5 => Self::CustomerSatisfaction,
                6 => Self::Entities,
                7 => Self::CustomerDefined,
                9 => Self::SituationConcise,
                10 => Self::ActionConcise,
                _ => Self::UnknownValue(r#type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for Type {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "TYPE_UNSPECIFIED" => Self::Unspecified,
                "SITUATION" => Self::Situation,
                "ACTION" => Self::Action,
                "RESOLUTION" => Self::Resolution,
                "REASON_FOR_CANCELLATION" => Self::ReasonForCancellation,
                "CUSTOMER_SATISFACTION" => Self::CustomerSatisfaction,
                "ENTITIES" => Self::Entities,
                "CUSTOMER_DEFINED" => Self::CustomerDefined,
                "SITUATION_CONCISE" => Self::SituationConcise,
                "ACTION_CONCISE" => Self::ActionConcise,
                _ => Self::UnknownValue(r#type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for Type {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Situation => serializer.serialize_i32(1),
                Self::Action => serializer.serialize_i32(2),
                Self::Resolution => serializer.serialize_i32(3),
                Self::ReasonForCancellation => serializer.serialize_i32(4),
                Self::CustomerSatisfaction => serializer.serialize_i32(5),
                Self::Entities => serializer.serialize_i32(6),
                Self::CustomerDefined => serializer.serialize_i32(7),
                Self::SituationConcise => serializer.serialize_i32(9),
                Self::ActionConcise => serializer.serialize_i32(10),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for Type {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<Type>::new(
                ".google.cloud.dialogflow.v2.SummarizationSection.Type",
            ))
        }
    }
}

/// Summarization context that customer can configure.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SummarizationContext {
    /// Optional. List of sections. Note it contains both predefined section sand
    /// customer defined sections.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub summarization_sections: std::vec::Vec<crate::model::SummarizationSection>,

    /// Optional. List of few shot examples.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub few_shot_examples: std::vec::Vec<crate::model::FewShotExample>,

    /// Optional. Version of the feature. If not set, default to latest version.
    /// Current candidates are ["1.0"].
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub version: std::string::String,

    /// Optional. The target language of the generated summary. The language code
    /// for conversation will be used if this field is empty. Supported 2.0 and
    /// later versions.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub output_language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SummarizationContext {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [version][crate::model::SummarizationContext::version].
    pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.version = v.into();
        self
    }

    /// Sets the value of [output_language_code][crate::model::SummarizationContext::output_language_code].
    pub fn set_output_language_code<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.output_language_code = v.into();
        self
    }

    /// Sets the value of [summarization_sections][crate::model::SummarizationContext::summarization_sections].
    pub fn set_summarization_sections<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SummarizationSection>,
    {
        use std::iter::Iterator;
        self.summarization_sections = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [few_shot_examples][crate::model::SummarizationContext::few_shot_examples].
    pub fn set_few_shot_examples<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::FewShotExample>,
    {
        use std::iter::Iterator;
        self.few_shot_examples = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SummarizationContext {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SummarizationContext"
    }
}

/// Free form generator context that customer can configure.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FreeFormContext {
    /// Optional. Free form text input to LLM.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub text: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl FreeFormContext {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [text][crate::model::FreeFormContext::text].
    pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.text = v.into();
        self
    }
}

impl wkt::message::Message for FreeFormContext {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.FreeFormContext"
    }
}

/// LLM generator.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Generator {
    /// Output only. Identifier. The resource name of the generator. Format:
    /// `projects/<Project ID>/locations/<Location ID>/generators/<Generator ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. Human readable description of the generator.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. Inference parameters for this generator.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub inference_parameter: std::option::Option<crate::model::InferenceParameter>,

    /// Optional. The trigger event of the generator. It defines when the generator
    /// is triggered in a conversation.
    pub trigger_event: crate::model::TriggerEvent,

    /// Output only. Creation time of this generator.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Update time of this generator.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Required. Input context of the generator.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub context: std::option::Option<crate::model::generator::Context>,

    /// The foundation model to use for generating suggestions. If a foundation
    /// model isn't specified here, a model specifically tuned for the feature
    /// type (and version when applicable) will be used.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub foundation_model: std::option::Option<crate::model::generator::FoundationModel>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Generator {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Generator::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Generator::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [inference_parameter][crate::model::Generator::inference_parameter].
    pub fn set_inference_parameter<
        T: std::convert::Into<std::option::Option<crate::model::InferenceParameter>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.inference_parameter = v.into();
        self
    }

    /// Sets the value of [trigger_event][crate::model::Generator::trigger_event].
    pub fn set_trigger_event<T: std::convert::Into<crate::model::TriggerEvent>>(
        mut self,
        v: T,
    ) -> Self {
        self.trigger_event = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Generator::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Generator::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [context][crate::model::Generator::context].
    ///
    /// Note that all the setters affecting `context` are mutually
    /// exclusive.
    pub fn set_context<
        T: std::convert::Into<std::option::Option<crate::model::generator::Context>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.context = v.into();
        self
    }

    /// The value of [context][crate::model::Generator::context]
    /// if it holds a `FreeFormContext`, `None` if the field is not set or
    /// holds a different branch.
    pub fn free_form_context(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::FreeFormContext>> {
        #[allow(unreachable_patterns)]
        self.context.as_ref().and_then(|v| match v {
            crate::model::generator::Context::FreeFormContext(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [context][crate::model::Generator::context]
    /// if it holds a `SummarizationContext`, `None` if the field is not set or
    /// holds a different branch.
    pub fn summarization_context(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::SummarizationContext>> {
        #[allow(unreachable_patterns)]
        self.context.as_ref().and_then(|v| match v {
            crate::model::generator::Context::SummarizationContext(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [context][crate::model::Generator::context]
    /// to hold a `FreeFormContext`.
    ///
    /// Note that all the setters affecting `context` are
    /// mutually exclusive.
    pub fn set_free_form_context<
        T: std::convert::Into<std::boxed::Box<crate::model::FreeFormContext>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.context =
            std::option::Option::Some(crate::model::generator::Context::FreeFormContext(v.into()));
        self
    }

    /// Sets the value of [context][crate::model::Generator::context]
    /// to hold a `SummarizationContext`.
    ///
    /// Note that all the setters affecting `context` are
    /// mutually exclusive.
    pub fn set_summarization_context<
        T: std::convert::Into<std::boxed::Box<crate::model::SummarizationContext>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.context = std::option::Option::Some(
            crate::model::generator::Context::SummarizationContext(v.into()),
        );
        self
    }

    /// Sets the value of [foundation_model][crate::model::Generator::foundation_model].
    ///
    /// Note that all the setters affecting `foundation_model` are mutually
    /// exclusive.
    pub fn set_foundation_model<
        T: std::convert::Into<std::option::Option<crate::model::generator::FoundationModel>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.foundation_model = v.into();
        self
    }

    /// The value of [foundation_model][crate::model::Generator::foundation_model]
    /// if it holds a `PublishedModel`, `None` if the field is not set or
    /// holds a different branch.
    pub fn published_model(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.foundation_model.as_ref().and_then(|v| match v {
            crate::model::generator::FoundationModel::PublishedModel(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [foundation_model][crate::model::Generator::foundation_model]
    /// to hold a `PublishedModel`.
    ///
    /// Note that all the setters affecting `foundation_model` are
    /// mutually exclusive.
    pub fn set_published_model<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.foundation_model = std::option::Option::Some(
            crate::model::generator::FoundationModel::PublishedModel(v.into()),
        );
        self
    }
}

impl wkt::message::Message for Generator {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.Generator"
    }
}

/// Defines additional types related to [Generator].
pub mod generator {
    #[allow(unused_imports)]
    use super::*;

    /// Required. Input context of the generator.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Context {
        /// Input of free from generator to LLM.
        FreeFormContext(std::boxed::Box<crate::model::FreeFormContext>),
        /// Input of prebuilt Summarization feature.
        SummarizationContext(std::boxed::Box<crate::model::SummarizationContext>),
    }

    /// The foundation model to use for generating suggestions. If a foundation
    /// model isn't specified here, a model specifically tuned for the feature
    /// type (and version when applicable) will be used.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum FoundationModel {
        /// Optional. The published Large Language Model name.
        ///
        /// * To use the latest model version, specify the model name without version
        ///   number. Example: `text-bison`
        /// * To use a stable model version, specify the version number as well.
        ///   Example: `text-bison@002`.
        PublishedModel(std::string::String),
    }
}

/// Suggestion generated using free form generator.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FreeFormSuggestion {
    /// Required. Free form suggestion.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub response: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl FreeFormSuggestion {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [response][crate::model::FreeFormSuggestion::response].
    pub fn set_response<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.response = v.into();
        self
    }
}

impl wkt::message::Message for FreeFormSuggestion {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.FreeFormSuggestion"
    }
}

/// Suggested summary of the conversation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SummarySuggestion {
    /// Required. All the parts of generated summary.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub summary_sections: std::vec::Vec<crate::model::summary_suggestion::SummarySection>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SummarySuggestion {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [summary_sections][crate::model::SummarySuggestion::summary_sections].
    pub fn set_summary_sections<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::summary_suggestion::SummarySection>,
    {
        use std::iter::Iterator;
        self.summary_sections = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SummarySuggestion {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SummarySuggestion"
    }
}

/// Defines additional types related to [SummarySuggestion].
pub mod summary_suggestion {
    #[allow(unused_imports)]
    use super::*;

    /// A component of the generated summary.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SummarySection {
        /// Required. Name of the section.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub section: std::string::String,

        /// Required. Summary text for the section.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub summary: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SummarySection {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [section][crate::model::summary_suggestion::SummarySection::section].
        pub fn set_section<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.section = v.into();
            self
        }

        /// Sets the value of [summary][crate::model::summary_suggestion::SummarySection::summary].
        pub fn set_summary<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.summary = v.into();
            self
        }
    }

    impl wkt::message::Message for SummarySection {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.SummarySuggestion.SummarySection"
        }
    }
}

/// Suggestion generated using a Generator.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GeneratorSuggestion {
    /// The suggestion could be one of the many types
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub suggestion: std::option::Option<crate::model::generator_suggestion::Suggestion>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GeneratorSuggestion {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [suggestion][crate::model::GeneratorSuggestion::suggestion].
    ///
    /// Note that all the setters affecting `suggestion` are mutually
    /// exclusive.
    pub fn set_suggestion<
        T: std::convert::Into<std::option::Option<crate::model::generator_suggestion::Suggestion>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.suggestion = v.into();
        self
    }

    /// The value of [suggestion][crate::model::GeneratorSuggestion::suggestion]
    /// if it holds a `FreeFormSuggestion`, `None` if the field is not set or
    /// holds a different branch.
    pub fn free_form_suggestion(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::FreeFormSuggestion>> {
        #[allow(unreachable_patterns)]
        self.suggestion.as_ref().and_then(|v| match v {
            crate::model::generator_suggestion::Suggestion::FreeFormSuggestion(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [suggestion][crate::model::GeneratorSuggestion::suggestion]
    /// if it holds a `SummarySuggestion`, `None` if the field is not set or
    /// holds a different branch.
    pub fn summary_suggestion(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::SummarySuggestion>> {
        #[allow(unreachable_patterns)]
        self.suggestion.as_ref().and_then(|v| match v {
            crate::model::generator_suggestion::Suggestion::SummarySuggestion(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [suggestion][crate::model::GeneratorSuggestion::suggestion]
    /// to hold a `FreeFormSuggestion`.
    ///
    /// Note that all the setters affecting `suggestion` are
    /// mutually exclusive.
    pub fn set_free_form_suggestion<
        T: std::convert::Into<std::boxed::Box<crate::model::FreeFormSuggestion>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.suggestion = std::option::Option::Some(
            crate::model::generator_suggestion::Suggestion::FreeFormSuggestion(v.into()),
        );
        self
    }

    /// Sets the value of [suggestion][crate::model::GeneratorSuggestion::suggestion]
    /// to hold a `SummarySuggestion`.
    ///
    /// Note that all the setters affecting `suggestion` are
    /// mutually exclusive.
    pub fn set_summary_suggestion<
        T: std::convert::Into<std::boxed::Box<crate::model::SummarySuggestion>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.suggestion = std::option::Option::Some(
            crate::model::generator_suggestion::Suggestion::SummarySuggestion(v.into()),
        );
        self
    }
}

impl wkt::message::Message for GeneratorSuggestion {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GeneratorSuggestion"
    }
}

/// Defines additional types related to [GeneratorSuggestion].
pub mod generator_suggestion {
    #[allow(unused_imports)]
    use super::*;

    /// The suggestion could be one of the many types
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Suggestion {
        /// Optional. Free form suggestion.
        FreeFormSuggestion(std::boxed::Box<crate::model::FreeFormSuggestion>),
        /// Optional. Suggested summary.
        SummarySuggestion(std::boxed::Box<crate::model::SummarySuggestion>),
    }
}

/// Represents a notification sent to Cloud Pub/Sub subscribers for
/// human agent assistant events in a specific conversation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct HumanAgentAssistantEvent {
    /// The conversation this notification refers to.
    /// Format: `projects/<Project ID>/conversations/<Conversation ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub conversation: std::string::String,

    /// The participant that the suggestion is compiled for.
    /// Format: `projects/<Project ID>/conversations/<Conversation
    /// ID>/participants/<Participant ID>`. It will not be set in legacy workflow.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub participant: std::string::String,

    /// The suggestion results payload that this notification refers to.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub suggestion_results: std::vec::Vec<crate::model::SuggestionResult>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl HumanAgentAssistantEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [conversation][crate::model::HumanAgentAssistantEvent::conversation].
    pub fn set_conversation<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.conversation = v.into();
        self
    }

    /// Sets the value of [participant][crate::model::HumanAgentAssistantEvent::participant].
    pub fn set_participant<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.participant = v.into();
        self
    }

    /// Sets the value of [suggestion_results][crate::model::HumanAgentAssistantEvent::suggestion_results].
    pub fn set_suggestion_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SuggestionResult>,
    {
        use std::iter::Iterator;
        self.suggestion_results = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for HumanAgentAssistantEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.HumanAgentAssistantEvent"
    }
}

/// An intent categorizes an end-user's intention for one conversation turn. For
/// each agent, you define many intents, where your combined intents can handle a
/// complete conversation. When an end-user writes or says something, referred to
/// as an end-user expression or end-user input, Dialogflow matches the end-user
/// input to the best intent in your agent. Matching an intent is also known as
/// intent classification.
///
/// For more information, see the [intent
/// guide](https://cloud.google.com/dialogflow/docs/intents-overview).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Intent {
    /// Optional. The unique identifier of this intent.
    /// Required for
    /// [Intents.UpdateIntent][google.cloud.dialogflow.v2.Intents.UpdateIntent] and
    /// [Intents.BatchUpdateIntents][google.cloud.dialogflow.v2.Intents.BatchUpdateIntents]
    /// methods.
    /// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
    ///
    /// [google.cloud.dialogflow.v2.Intents.BatchUpdateIntents]: crate::client::Intents::batch_update_intents
    /// [google.cloud.dialogflow.v2.Intents.UpdateIntent]: crate::client::Intents::update_intent
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The name of this intent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Optional. Indicates whether webhooks are enabled for the intent.
    pub webhook_state: crate::model::intent::WebhookState,

    /// Optional. The priority of this intent. Higher numbers represent higher
    /// priorities.
    ///
    /// - If the supplied value is unspecified or 0, the service
    ///   translates the value to 500,000, which corresponds to the
    ///   `Normal` priority in the console.
    /// - If the supplied value is negative, the intent is ignored
    ///   in runtime detect intent requests.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub priority: i32,

    /// Optional. Indicates whether this is a fallback intent.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub is_fallback: bool,

    /// Optional. Indicates whether Machine Learning is disabled for the intent.
    /// Note: If `ml_disabled` setting is set to true, then this intent is not
    /// taken into account during inference in `ML ONLY` match mode. Also,
    /// auto-markup in the UI is turned off.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub ml_disabled: bool,

    /// Optional. Indicates that a live agent should be brought in to handle the
    /// interaction with the user. In most cases, when you set this flag to true,
    /// you would also want to set end_interaction to true as well. Default is
    /// false.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub live_agent_handoff: bool,

    /// Optional. Indicates that this intent ends an interaction. Some integrations
    /// (e.g., Actions on Google or Dialogflow phone gateway) use this information
    /// to close interaction with an end user. Default is false.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub end_interaction: bool,

    /// Optional. The list of context names required for this intent to be
    /// triggered.
    /// Format: `projects/<Project ID>/agent/sessions/-/contexts/<Context ID>`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub input_context_names: std::vec::Vec<std::string::String>,

    /// Optional. The collection of event names that trigger the intent.
    /// If the collection of input contexts is not empty, all of the contexts must
    /// be present in the active user session for an event to trigger this intent.
    /// Event names are limited to 150 characters.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub events: std::vec::Vec<std::string::String>,

    /// Optional. The collection of examples that the agent is
    /// trained on.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub training_phrases: std::vec::Vec<crate::model::intent::TrainingPhrase>,

    /// Optional. The name of the action associated with the intent.
    /// Note: The action name must not contain whitespaces.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub action: std::string::String,

    /// Optional. The collection of contexts that are activated when the intent
    /// is matched. Context messages in this collection should not set the
    /// parameters field. Setting the `lifespan_count` to 0 will reset the context
    /// when the intent is matched.
    /// Format: `projects/<Project ID>/agent/sessions/-/contexts/<Context ID>`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub output_contexts: std::vec::Vec<crate::model::Context>,

    /// Optional. Indicates whether to delete all contexts in the current
    /// session when this intent is matched.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub reset_contexts: bool,

    /// Optional. The collection of parameters associated with the intent.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub parameters: std::vec::Vec<crate::model::intent::Parameter>,

    /// Optional. The collection of rich messages corresponding to the
    /// `Response` field in the Dialogflow console.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub messages: std::vec::Vec<crate::model::intent::Message>,

    /// Optional. The list of platforms for which the first responses will be
    /// copied from the messages in PLATFORM_UNSPECIFIED (i.e. default platform).
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub default_response_platforms: std::vec::Vec<crate::model::intent::message::Platform>,

    /// Output only.
    /// Read-only. The unique identifier of the root intent in the chain of
    /// followup intents. It identifies the correct followup intents chain for
    /// this intent. We populate this field only in the output.
    ///
    /// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub root_followup_intent_name: std::string::String,

    /// Read-only after creation. The unique identifier of the parent intent in the
    /// chain of followup intents. You can set this field when creating an intent,
    /// for example with
    /// [CreateIntent][google.cloud.dialogflow.v2.Intents.CreateIntent] or
    /// [BatchUpdateIntents][google.cloud.dialogflow.v2.Intents.BatchUpdateIntents],
    /// in order to make this intent a followup intent.
    ///
    /// It identifies the parent followup intent.
    /// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
    ///
    /// [google.cloud.dialogflow.v2.Intents.BatchUpdateIntents]: crate::client::Intents::batch_update_intents
    /// [google.cloud.dialogflow.v2.Intents.CreateIntent]: crate::client::Intents::create_intent
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent_followup_intent_name: std::string::String,

    /// Output only. Read-only. Information about all followup intents that have
    /// this intent as a direct or indirect parent. We populate this field only in
    /// the output.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub followup_intent_info: std::vec::Vec<crate::model::intent::FollowupIntentInfo>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Intent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Intent::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Intent::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [webhook_state][crate::model::Intent::webhook_state].
    pub fn set_webhook_state<T: std::convert::Into<crate::model::intent::WebhookState>>(
        mut self,
        v: T,
    ) -> Self {
        self.webhook_state = v.into();
        self
    }

    /// Sets the value of [priority][crate::model::Intent::priority].
    pub fn set_priority<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.priority = v.into();
        self
    }

    /// Sets the value of [is_fallback][crate::model::Intent::is_fallback].
    pub fn set_is_fallback<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.is_fallback = v.into();
        self
    }

    /// Sets the value of [ml_disabled][crate::model::Intent::ml_disabled].
    pub fn set_ml_disabled<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.ml_disabled = v.into();
        self
    }

    /// Sets the value of [live_agent_handoff][crate::model::Intent::live_agent_handoff].
    pub fn set_live_agent_handoff<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.live_agent_handoff = v.into();
        self
    }

    /// Sets the value of [end_interaction][crate::model::Intent::end_interaction].
    pub fn set_end_interaction<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.end_interaction = v.into();
        self
    }

    /// Sets the value of [action][crate::model::Intent::action].
    pub fn set_action<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.action = v.into();
        self
    }

    /// Sets the value of [reset_contexts][crate::model::Intent::reset_contexts].
    pub fn set_reset_contexts<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.reset_contexts = v.into();
        self
    }

    /// Sets the value of [root_followup_intent_name][crate::model::Intent::root_followup_intent_name].
    pub fn set_root_followup_intent_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.root_followup_intent_name = v.into();
        self
    }

    /// Sets the value of [parent_followup_intent_name][crate::model::Intent::parent_followup_intent_name].
    pub fn set_parent_followup_intent_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.parent_followup_intent_name = v.into();
        self
    }

    /// Sets the value of [input_context_names][crate::model::Intent::input_context_names].
    pub fn set_input_context_names<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.input_context_names = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [events][crate::model::Intent::events].
    pub fn set_events<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.events = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [training_phrases][crate::model::Intent::training_phrases].
    pub fn set_training_phrases<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::intent::TrainingPhrase>,
    {
        use std::iter::Iterator;
        self.training_phrases = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [output_contexts][crate::model::Intent::output_contexts].
    pub fn set_output_contexts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Context>,
    {
        use std::iter::Iterator;
        self.output_contexts = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [parameters][crate::model::Intent::parameters].
    pub fn set_parameters<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::intent::Parameter>,
    {
        use std::iter::Iterator;
        self.parameters = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [messages][crate::model::Intent::messages].
    pub fn set_messages<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::intent::Message>,
    {
        use std::iter::Iterator;
        self.messages = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [default_response_platforms][crate::model::Intent::default_response_platforms].
    pub fn set_default_response_platforms<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::intent::message::Platform>,
    {
        use std::iter::Iterator;
        self.default_response_platforms = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [followup_intent_info][crate::model::Intent::followup_intent_info].
    pub fn set_followup_intent_info<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::intent::FollowupIntentInfo>,
    {
        use std::iter::Iterator;
        self.followup_intent_info = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Intent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.Intent"
    }
}

/// Defines additional types related to [Intent].
pub mod intent {
    #[allow(unused_imports)]
    use super::*;

    /// Represents an example that the agent is trained on.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct TrainingPhrase {
        /// Output only. The unique identifier of this training phrase.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,

        /// Required. The type of the training phrase.
        #[serde(rename = "type")]
        pub r#type: crate::model::intent::training_phrase::Type,

        /// Required. The ordered list of training phrase parts.
        /// The parts are concatenated in order to form the training phrase.
        ///
        /// Note: The API does not automatically annotate training phrases like the
        /// Dialogflow Console does.
        ///
        /// Note: Do not forget to include whitespace at part boundaries,
        /// so the training phrase is well formatted when the parts are concatenated.
        ///
        /// If the training phrase does not need to be annotated with parameters,
        /// you just need a single part with only the
        /// [Part.text][google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.text]
        /// field set.
        ///
        /// If you want to annotate the training phrase, you must create multiple
        /// parts, where the fields of each part are populated in one of two ways:
        ///
        /// - `Part.text` is set to a part of the phrase that has no parameters.
        /// - `Part.text` is set to a part of the phrase that you want to annotate,
        ///   and the `entity_type`, `alias`, and `user_defined` fields are all
        ///   set.
        ///
        /// [google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part.text]: crate::model::intent::training_phrase::Part::text
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub parts: std::vec::Vec<crate::model::intent::training_phrase::Part>,

        /// Optional. Indicates how many times this example was added to
        /// the intent. Each time a developer adds an existing sample by editing an
        /// intent or training, this counter is increased.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub times_added_count: i32,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl TrainingPhrase {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [name][crate::model::intent::TrainingPhrase::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }

        /// Sets the value of [r#type][crate::model::intent::TrainingPhrase::type].
        pub fn set_type<T: std::convert::Into<crate::model::intent::training_phrase::Type>>(
            mut self,
            v: T,
        ) -> Self {
            self.r#type = v.into();
            self
        }

        /// Sets the value of [times_added_count][crate::model::intent::TrainingPhrase::times_added_count].
        pub fn set_times_added_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.times_added_count = v.into();
            self
        }

        /// Sets the value of [parts][crate::model::intent::TrainingPhrase::parts].
        pub fn set_parts<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::intent::training_phrase::Part>,
        {
            use std::iter::Iterator;
            self.parts = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for TrainingPhrase {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.Intent.TrainingPhrase"
        }
    }

    /// Defines additional types related to [TrainingPhrase].
    pub mod training_phrase {
        #[allow(unused_imports)]
        use super::*;

        /// Represents a part of a training phrase.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Part {
            /// Required. The text for this part.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub text: std::string::String,

            /// Optional. The entity type name prefixed with `@`.
            /// This field is required for annotated parts of the training phrase.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub entity_type: std::string::String,

            /// Optional. The parameter name for the value extracted from the
            /// annotated part of the example.
            /// This field is required for annotated parts of the training phrase.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub alias: std::string::String,

            /// Optional. Indicates whether the text was manually annotated.
            /// This field is set to true when the Dialogflow Console is used to
            /// manually annotate the part. When creating an annotated part with the
            /// API, you must set this to true.
            #[serde(skip_serializing_if = "wkt::internal::is_default")]
            pub user_defined: bool,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl Part {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [text][crate::model::intent::training_phrase::Part::text].
            pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.text = v.into();
                self
            }

            /// Sets the value of [entity_type][crate::model::intent::training_phrase::Part::entity_type].
            pub fn set_entity_type<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.entity_type = v.into();
                self
            }

            /// Sets the value of [alias][crate::model::intent::training_phrase::Part::alias].
            pub fn set_alias<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.alias = v.into();
                self
            }

            /// Sets the value of [user_defined][crate::model::intent::training_phrase::Part::user_defined].
            pub fn set_user_defined<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
                self.user_defined = v.into();
                self
            }
        }

        impl wkt::message::Message for Part {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.TrainingPhrase.Part"
            }
        }

        /// Represents different types of training phrases.
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum Type {
            /// Not specified. This value should never be used.
            Unspecified,
            /// Examples do not contain @-prefixed entity type names, but example parts
            /// can be annotated with entity types.
            Example,
            /// Templates are not annotated with entity types, but they can contain
            /// @-prefixed entity type names as substrings.
            /// Template mode has been deprecated. Example mode is the only supported
            /// way to create new training phrases. If you have existing training
            /// phrases that you've created in template mode, those will continue to
            /// work.
            #[deprecated]
            Template,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [Type::value] or
            /// [Type::name].
            UnknownValue(r#type::UnknownValue),
        }

        #[doc(hidden)]
        pub mod r#type {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl Type {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::Unspecified => std::option::Option::Some(0),
                    Self::Example => std::option::Option::Some(1),
                    Self::Template => std::option::Option::Some(2),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::Unspecified => std::option::Option::Some("TYPE_UNSPECIFIED"),
                    Self::Example => std::option::Option::Some("EXAMPLE"),
                    Self::Template => std::option::Option::Some("TEMPLATE"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for Type {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for Type {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for Type {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::Unspecified,
                    1 => Self::Example,
                    2 => Self::Template,
                    _ => Self::UnknownValue(r#type::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for Type {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "TYPE_UNSPECIFIED" => Self::Unspecified,
                    "EXAMPLE" => Self::Example,
                    "TEMPLATE" => Self::Template,
                    _ => Self::UnknownValue(r#type::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for Type {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::Unspecified => serializer.serialize_i32(0),
                    Self::Example => serializer.serialize_i32(1),
                    Self::Template => serializer.serialize_i32(2),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for Type {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<Type>::new(
                    ".google.cloud.dialogflow.v2.Intent.TrainingPhrase.Type",
                ))
            }
        }
    }

    /// Represents intent parameters.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Parameter {
        /// The unique identifier of this parameter.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,

        /// Required. The name of the parameter.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub display_name: std::string::String,

        /// Optional. The definition of the parameter value. It can be:
        ///
        /// - a constant string,
        /// - a parameter value defined as `$parameter_name`,
        /// - an original parameter value defined as `$parameter_name.original`,
        /// - a parameter value from some context defined as
        ///   `#context_name.parameter_name`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub value: std::string::String,

        /// Optional. The default value to use when the `value` yields an empty
        /// result.
        /// Default values can be extracted from contexts by using the following
        /// syntax: `#context_name.parameter_name`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub default_value: std::string::String,

        /// Optional. The name of the entity type, prefixed with `@`, that
        /// describes values of the parameter. If the parameter is
        /// required, this must be provided.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub entity_type_display_name: std::string::String,

        /// Optional. Indicates whether the parameter is required. That is,
        /// whether the intent cannot be completed without collecting the parameter
        /// value.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub mandatory: bool,

        /// Optional. The collection of prompts that the agent can present to the
        /// user in order to collect a value for the parameter.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub prompts: std::vec::Vec<std::string::String>,

        /// Optional. Indicates whether the parameter represents a list of values.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        pub is_list: bool,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Parameter {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [name][crate::model::intent::Parameter::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }

        /// Sets the value of [display_name][crate::model::intent::Parameter::display_name].
        pub fn set_display_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.display_name = v.into();
            self
        }

        /// Sets the value of [value][crate::model::intent::Parameter::value].
        pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.value = v.into();
            self
        }

        /// Sets the value of [default_value][crate::model::intent::Parameter::default_value].
        pub fn set_default_value<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.default_value = v.into();
            self
        }

        /// Sets the value of [entity_type_display_name][crate::model::intent::Parameter::entity_type_display_name].
        pub fn set_entity_type_display_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.entity_type_display_name = v.into();
            self
        }

        /// Sets the value of [mandatory][crate::model::intent::Parameter::mandatory].
        pub fn set_mandatory<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.mandatory = v.into();
            self
        }

        /// Sets the value of [is_list][crate::model::intent::Parameter::is_list].
        pub fn set_is_list<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.is_list = v.into();
            self
        }

        /// Sets the value of [prompts][crate::model::intent::Parameter::prompts].
        pub fn set_prompts<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.prompts = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for Parameter {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Parameter"
        }
    }

    /// A rich response message.
    /// Corresponds to the intent `Response` field in the Dialogflow console.
    /// For more information, see
    /// [Rich response
    /// messages](https://cloud.google.com/dialogflow/docs/intents-rich-messages).
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Message {
        /// Optional. The platform that this message is intended for.
        pub platform: crate::model::intent::message::Platform,

        /// Required. The rich response message.
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub message: std::option::Option<crate::model::intent::message::Message>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Message {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [platform][crate::model::intent::Message::platform].
        pub fn set_platform<T: std::convert::Into<crate::model::intent::message::Platform>>(
            mut self,
            v: T,
        ) -> Self {
            self.platform = v.into();
            self
        }

        /// Sets the value of [message][crate::model::intent::Message::message].
        ///
        /// Note that all the setters affecting `message` are mutually
        /// exclusive.
        pub fn set_message<
            T: std::convert::Into<std::option::Option<crate::model::intent::message::Message>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.message = v.into();
            self
        }

        /// The value of [message][crate::model::intent::Message::message]
        /// if it holds a `Text`, `None` if the field is not set or
        /// holds a different branch.
        pub fn text(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::intent::message::Text>> {
            #[allow(unreachable_patterns)]
            self.message.as_ref().and_then(|v| match v {
                crate::model::intent::message::Message::Text(v) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// The value of [message][crate::model::intent::Message::message]
        /// if it holds a `Image`, `None` if the field is not set or
        /// holds a different branch.
        pub fn image(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::intent::message::Image>> {
            #[allow(unreachable_patterns)]
            self.message.as_ref().and_then(|v| match v {
                crate::model::intent::message::Message::Image(v) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// The value of [message][crate::model::intent::Message::message]
        /// if it holds a `QuickReplies`, `None` if the field is not set or
        /// holds a different branch.
        pub fn quick_replies(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::intent::message::QuickReplies>>
        {
            #[allow(unreachable_patterns)]
            self.message.as_ref().and_then(|v| match v {
                crate::model::intent::message::Message::QuickReplies(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [message][crate::model::intent::Message::message]
        /// if it holds a `Card`, `None` if the field is not set or
        /// holds a different branch.
        pub fn card(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::intent::message::Card>> {
            #[allow(unreachable_patterns)]
            self.message.as_ref().and_then(|v| match v {
                crate::model::intent::message::Message::Card(v) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// The value of [message][crate::model::intent::Message::message]
        /// if it holds a `Payload`, `None` if the field is not set or
        /// holds a different branch.
        pub fn payload(&self) -> std::option::Option<&std::boxed::Box<wkt::Struct>> {
            #[allow(unreachable_patterns)]
            self.message.as_ref().and_then(|v| match v {
                crate::model::intent::message::Message::Payload(v) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// The value of [message][crate::model::intent::Message::message]
        /// if it holds a `SimpleResponses`, `None` if the field is not set or
        /// holds a different branch.
        pub fn simple_responses(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::intent::message::SimpleResponses>>
        {
            #[allow(unreachable_patterns)]
            self.message.as_ref().and_then(|v| match v {
                crate::model::intent::message::Message::SimpleResponses(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [message][crate::model::intent::Message::message]
        /// if it holds a `BasicCard`, `None` if the field is not set or
        /// holds a different branch.
        pub fn basic_card(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::intent::message::BasicCard>>
        {
            #[allow(unreachable_patterns)]
            self.message.as_ref().and_then(|v| match v {
                crate::model::intent::message::Message::BasicCard(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [message][crate::model::intent::Message::message]
        /// if it holds a `Suggestions`, `None` if the field is not set or
        /// holds a different branch.
        pub fn suggestions(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::intent::message::Suggestions>>
        {
            #[allow(unreachable_patterns)]
            self.message.as_ref().and_then(|v| match v {
                crate::model::intent::message::Message::Suggestions(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [message][crate::model::intent::Message::message]
        /// if it holds a `LinkOutSuggestion`, `None` if the field is not set or
        /// holds a different branch.
        pub fn link_out_suggestion(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::intent::message::LinkOutSuggestion>>
        {
            #[allow(unreachable_patterns)]
            self.message.as_ref().and_then(|v| match v {
                crate::model::intent::message::Message::LinkOutSuggestion(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [message][crate::model::intent::Message::message]
        /// if it holds a `ListSelect`, `None` if the field is not set or
        /// holds a different branch.
        pub fn list_select(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::intent::message::ListSelect>>
        {
            #[allow(unreachable_patterns)]
            self.message.as_ref().and_then(|v| match v {
                crate::model::intent::message::Message::ListSelect(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [message][crate::model::intent::Message::message]
        /// if it holds a `CarouselSelect`, `None` if the field is not set or
        /// holds a different branch.
        pub fn carousel_select(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::intent::message::CarouselSelect>>
        {
            #[allow(unreachable_patterns)]
            self.message.as_ref().and_then(|v| match v {
                crate::model::intent::message::Message::CarouselSelect(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [message][crate::model::intent::Message::message]
        /// if it holds a `BrowseCarouselCard`, `None` if the field is not set or
        /// holds a different branch.
        pub fn browse_carousel_card(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::intent::message::BrowseCarouselCard>>
        {
            #[allow(unreachable_patterns)]
            self.message.as_ref().and_then(|v| match v {
                crate::model::intent::message::Message::BrowseCarouselCard(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [message][crate::model::intent::Message::message]
        /// if it holds a `TableCard`, `None` if the field is not set or
        /// holds a different branch.
        pub fn table_card(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::intent::message::TableCard>>
        {
            #[allow(unreachable_patterns)]
            self.message.as_ref().and_then(|v| match v {
                crate::model::intent::message::Message::TableCard(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [message][crate::model::intent::Message::message]
        /// if it holds a `MediaContent`, `None` if the field is not set or
        /// holds a different branch.
        pub fn media_content(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::intent::message::MediaContent>>
        {
            #[allow(unreachable_patterns)]
            self.message.as_ref().and_then(|v| match v {
                crate::model::intent::message::Message::MediaContent(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [message][crate::model::intent::Message::message]
        /// to hold a `Text`.
        ///
        /// Note that all the setters affecting `message` are
        /// mutually exclusive.
        pub fn set_text<
            T: std::convert::Into<std::boxed::Box<crate::model::intent::message::Text>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.message =
                std::option::Option::Some(crate::model::intent::message::Message::Text(v.into()));
            self
        }

        /// Sets the value of [message][crate::model::intent::Message::message]
        /// to hold a `Image`.
        ///
        /// Note that all the setters affecting `message` are
        /// mutually exclusive.
        pub fn set_image<
            T: std::convert::Into<std::boxed::Box<crate::model::intent::message::Image>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.message =
                std::option::Option::Some(crate::model::intent::message::Message::Image(v.into()));
            self
        }

        /// Sets the value of [message][crate::model::intent::Message::message]
        /// to hold a `QuickReplies`.
        ///
        /// Note that all the setters affecting `message` are
        /// mutually exclusive.
        pub fn set_quick_replies<
            T: std::convert::Into<std::boxed::Box<crate::model::intent::message::QuickReplies>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.message = std::option::Option::Some(
                crate::model::intent::message::Message::QuickReplies(v.into()),
            );
            self
        }

        /// Sets the value of [message][crate::model::intent::Message::message]
        /// to hold a `Card`.
        ///
        /// Note that all the setters affecting `message` are
        /// mutually exclusive.
        pub fn set_card<
            T: std::convert::Into<std::boxed::Box<crate::model::intent::message::Card>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.message =
                std::option::Option::Some(crate::model::intent::message::Message::Card(v.into()));
            self
        }

        /// Sets the value of [message][crate::model::intent::Message::message]
        /// to hold a `Payload`.
        ///
        /// Note that all the setters affecting `message` are
        /// mutually exclusive.
        pub fn set_payload<T: std::convert::Into<std::boxed::Box<wkt::Struct>>>(
            mut self,
            v: T,
        ) -> Self {
            self.message = std::option::Option::Some(
                crate::model::intent::message::Message::Payload(v.into()),
            );
            self
        }

        /// Sets the value of [message][crate::model::intent::Message::message]
        /// to hold a `SimpleResponses`.
        ///
        /// Note that all the setters affecting `message` are
        /// mutually exclusive.
        pub fn set_simple_responses<
            T: std::convert::Into<std::boxed::Box<crate::model::intent::message::SimpleResponses>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.message = std::option::Option::Some(
                crate::model::intent::message::Message::SimpleResponses(v.into()),
            );
            self
        }

        /// Sets the value of [message][crate::model::intent::Message::message]
        /// to hold a `BasicCard`.
        ///
        /// Note that all the setters affecting `message` are
        /// mutually exclusive.
        pub fn set_basic_card<
            T: std::convert::Into<std::boxed::Box<crate::model::intent::message::BasicCard>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.message = std::option::Option::Some(
                crate::model::intent::message::Message::BasicCard(v.into()),
            );
            self
        }

        /// Sets the value of [message][crate::model::intent::Message::message]
        /// to hold a `Suggestions`.
        ///
        /// Note that all the setters affecting `message` are
        /// mutually exclusive.
        pub fn set_suggestions<
            T: std::convert::Into<std::boxed::Box<crate::model::intent::message::Suggestions>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.message = std::option::Option::Some(
                crate::model::intent::message::Message::Suggestions(v.into()),
            );
            self
        }

        /// Sets the value of [message][crate::model::intent::Message::message]
        /// to hold a `LinkOutSuggestion`.
        ///
        /// Note that all the setters affecting `message` are
        /// mutually exclusive.
        pub fn set_link_out_suggestion<
            T: std::convert::Into<std::boxed::Box<crate::model::intent::message::LinkOutSuggestion>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.message = std::option::Option::Some(
                crate::model::intent::message::Message::LinkOutSuggestion(v.into()),
            );
            self
        }

        /// Sets the value of [message][crate::model::intent::Message::message]
        /// to hold a `ListSelect`.
        ///
        /// Note that all the setters affecting `message` are
        /// mutually exclusive.
        pub fn set_list_select<
            T: std::convert::Into<std::boxed::Box<crate::model::intent::message::ListSelect>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.message = std::option::Option::Some(
                crate::model::intent::message::Message::ListSelect(v.into()),
            );
            self
        }

        /// Sets the value of [message][crate::model::intent::Message::message]
        /// to hold a `CarouselSelect`.
        ///
        /// Note that all the setters affecting `message` are
        /// mutually exclusive.
        pub fn set_carousel_select<
            T: std::convert::Into<std::boxed::Box<crate::model::intent::message::CarouselSelect>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.message = std::option::Option::Some(
                crate::model::intent::message::Message::CarouselSelect(v.into()),
            );
            self
        }

        /// Sets the value of [message][crate::model::intent::Message::message]
        /// to hold a `BrowseCarouselCard`.
        ///
        /// Note that all the setters affecting `message` are
        /// mutually exclusive.
        pub fn set_browse_carousel_card<
            T: std::convert::Into<std::boxed::Box<crate::model::intent::message::BrowseCarouselCard>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.message = std::option::Option::Some(
                crate::model::intent::message::Message::BrowseCarouselCard(v.into()),
            );
            self
        }

        /// Sets the value of [message][crate::model::intent::Message::message]
        /// to hold a `TableCard`.
        ///
        /// Note that all the setters affecting `message` are
        /// mutually exclusive.
        pub fn set_table_card<
            T: std::convert::Into<std::boxed::Box<crate::model::intent::message::TableCard>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.message = std::option::Option::Some(
                crate::model::intent::message::Message::TableCard(v.into()),
            );
            self
        }

        /// Sets the value of [message][crate::model::intent::Message::message]
        /// to hold a `MediaContent`.
        ///
        /// Note that all the setters affecting `message` are
        /// mutually exclusive.
        pub fn set_media_content<
            T: std::convert::Into<std::boxed::Box<crate::model::intent::message::MediaContent>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.message = std::option::Option::Some(
                crate::model::intent::message::Message::MediaContent(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for Message {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message"
        }
    }

    /// Defines additional types related to [Message].
    pub mod message {
        #[allow(unused_imports)]
        use super::*;

        /// The text response message.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Text {
            /// Optional. The collection of the agent's responses.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub text: std::vec::Vec<std::string::String>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl Text {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [text][crate::model::intent::message::Text::text].
            pub fn set_text<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<std::string::String>,
            {
                use std::iter::Iterator;
                self.text = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for Text {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.Text"
            }
        }

        /// The image response message.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Image {
            /// Optional. The public URI to an image file.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub image_uri: std::string::String,

            /// Optional. A text description of the image to be used for accessibility,
            /// e.g., screen readers.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub accessibility_text: std::string::String,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl Image {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [image_uri][crate::model::intent::message::Image::image_uri].
            pub fn set_image_uri<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.image_uri = v.into();
                self
            }

            /// Sets the value of [accessibility_text][crate::model::intent::message::Image::accessibility_text].
            pub fn set_accessibility_text<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.accessibility_text = v.into();
                self
            }
        }

        impl wkt::message::Message for Image {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.Image"
            }
        }

        /// The quick replies response message.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct QuickReplies {
            /// Optional. The title of the collection of quick replies.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub title: std::string::String,

            /// Optional. The collection of quick replies.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub quick_replies: std::vec::Vec<std::string::String>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl QuickReplies {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [title][crate::model::intent::message::QuickReplies::title].
            pub fn set_title<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.title = v.into();
                self
            }

            /// Sets the value of [quick_replies][crate::model::intent::message::QuickReplies::quick_replies].
            pub fn set_quick_replies<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<std::string::String>,
            {
                use std::iter::Iterator;
                self.quick_replies = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for QuickReplies {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.QuickReplies"
            }
        }

        /// The card response message.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Card {
            /// Optional. The title of the card.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub title: std::string::String,

            /// Optional. The subtitle of the card.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub subtitle: std::string::String,

            /// Optional. The public URI to an image file for the card.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub image_uri: std::string::String,

            /// Optional. The collection of card buttons.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub buttons: std::vec::Vec<crate::model::intent::message::card::Button>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl Card {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [title][crate::model::intent::message::Card::title].
            pub fn set_title<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.title = v.into();
                self
            }

            /// Sets the value of [subtitle][crate::model::intent::message::Card::subtitle].
            pub fn set_subtitle<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.subtitle = v.into();
                self
            }

            /// Sets the value of [image_uri][crate::model::intent::message::Card::image_uri].
            pub fn set_image_uri<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.image_uri = v.into();
                self
            }

            /// Sets the value of [buttons][crate::model::intent::message::Card::buttons].
            pub fn set_buttons<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<crate::model::intent::message::card::Button>,
            {
                use std::iter::Iterator;
                self.buttons = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for Card {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.Card"
            }
        }

        /// Defines additional types related to [Card].
        pub mod card {
            #[allow(unused_imports)]
            use super::*;

            /// Contains information about a button.
            #[serde_with::serde_as]
            #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(default, rename_all = "camelCase")]
            #[non_exhaustive]
            pub struct Button {
                /// Optional. The text to show on the button.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub text: std::string::String,

                /// Optional. The text to send back to the Dialogflow API or a URI to
                /// open.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub postback: std::string::String,

                #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
                _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
            }

            impl Button {
                pub fn new() -> Self {
                    std::default::Default::default()
                }

                /// Sets the value of [text][crate::model::intent::message::card::Button::text].
                pub fn set_text<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.text = v.into();
                    self
                }

                /// Sets the value of [postback][crate::model::intent::message::card::Button::postback].
                pub fn set_postback<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.postback = v.into();
                    self
                }
            }

            impl wkt::message::Message for Button {
                fn typename() -> &'static str {
                    "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.Card.Button"
                }
            }
        }

        /// The simple response message containing speech or text.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct SimpleResponse {
            /// One of text_to_speech or ssml must be provided. The plain text of the
            /// speech output. Mutually exclusive with ssml.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub text_to_speech: std::string::String,

            /// One of text_to_speech or ssml must be provided. Structured spoken
            /// response to the user in the SSML format. Mutually exclusive with
            /// text_to_speech.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub ssml: std::string::String,

            /// Optional. The text to display.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub display_text: std::string::String,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl SimpleResponse {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [text_to_speech][crate::model::intent::message::SimpleResponse::text_to_speech].
            pub fn set_text_to_speech<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.text_to_speech = v.into();
                self
            }

            /// Sets the value of [ssml][crate::model::intent::message::SimpleResponse::ssml].
            pub fn set_ssml<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.ssml = v.into();
                self
            }

            /// Sets the value of [display_text][crate::model::intent::message::SimpleResponse::display_text].
            pub fn set_display_text<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.display_text = v.into();
                self
            }
        }

        impl wkt::message::Message for SimpleResponse {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.SimpleResponse"
            }
        }

        /// The collection of simple response candidates.
        /// This message in `QueryResult.fulfillment_messages` and
        /// `WebhookResponse.fulfillment_messages` should contain only one
        /// `SimpleResponse`.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct SimpleResponses {
            /// Required. The list of simple responses.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub simple_responses: std::vec::Vec<crate::model::intent::message::SimpleResponse>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl SimpleResponses {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [simple_responses][crate::model::intent::message::SimpleResponses::simple_responses].
            pub fn set_simple_responses<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<crate::model::intent::message::SimpleResponse>,
            {
                use std::iter::Iterator;
                self.simple_responses = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for SimpleResponses {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.SimpleResponses"
            }
        }

        /// The basic card message. Useful for displaying information.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct BasicCard {
            /// Optional. The title of the card.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub title: std::string::String,

            /// Optional. The subtitle of the card.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub subtitle: std::string::String,

            /// Required, unless image is present. The body text of the card.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub formatted_text: std::string::String,

            /// Optional. The image for the card.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub image: std::option::Option<crate::model::intent::message::Image>,

            /// Optional. The collection of card buttons.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub buttons: std::vec::Vec<crate::model::intent::message::basic_card::Button>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl BasicCard {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [title][crate::model::intent::message::BasicCard::title].
            pub fn set_title<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.title = v.into();
                self
            }

            /// Sets the value of [subtitle][crate::model::intent::message::BasicCard::subtitle].
            pub fn set_subtitle<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.subtitle = v.into();
                self
            }

            /// Sets the value of [formatted_text][crate::model::intent::message::BasicCard::formatted_text].
            pub fn set_formatted_text<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.formatted_text = v.into();
                self
            }

            /// Sets the value of [image][crate::model::intent::message::BasicCard::image].
            pub fn set_image<
                T: std::convert::Into<std::option::Option<crate::model::intent::message::Image>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.image = v.into();
                self
            }

            /// Sets the value of [buttons][crate::model::intent::message::BasicCard::buttons].
            pub fn set_buttons<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<crate::model::intent::message::basic_card::Button>,
            {
                use std::iter::Iterator;
                self.buttons = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for BasicCard {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.BasicCard"
            }
        }

        /// Defines additional types related to [BasicCard].
        pub mod basic_card {
            #[allow(unused_imports)]
            use super::*;

            /// The button object that appears at the bottom of a card.
            #[serde_with::serde_as]
            #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(default, rename_all = "camelCase")]
            #[non_exhaustive]
            pub struct Button {
                /// Required. The title of the button.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub title: std::string::String,

                /// Required. Action to take when a user taps on the button.
                #[serde(skip_serializing_if = "std::option::Option::is_none")]
                pub open_uri_action: std::option::Option<
                    crate::model::intent::message::basic_card::button::OpenUriAction,
                >,

                #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
                _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
            }

            impl Button {
                pub fn new() -> Self {
                    std::default::Default::default()
                }

                /// Sets the value of [title][crate::model::intent::message::basic_card::Button::title].
                pub fn set_title<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.title = v.into();
                    self
                }

                /// Sets the value of [open_uri_action][crate::model::intent::message::basic_card::Button::open_uri_action].
                pub fn set_open_uri_action<
                    T: std::convert::Into<
                            std::option::Option<
                                crate::model::intent::message::basic_card::button::OpenUriAction,
                            >,
                        >,
                >(
                    mut self,
                    v: T,
                ) -> Self {
                    self.open_uri_action = v.into();
                    self
                }
            }

            impl wkt::message::Message for Button {
                fn typename() -> &'static str {
                    "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button"
                }
            }

            /// Defines additional types related to [Button].
            pub mod button {
                #[allow(unused_imports)]
                use super::*;

                /// Opens the given URI.
                #[serde_with::serde_as]
                #[derive(
                    Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize,
                )]
                #[serde(default, rename_all = "camelCase")]
                #[non_exhaustive]
                pub struct OpenUriAction {
                    /// Required. The HTTP or HTTPS scheme URI.
                    #[serde(skip_serializing_if = "std::string::String::is_empty")]
                    pub uri: std::string::String,

                    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
                    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
                }

                impl OpenUriAction {
                    pub fn new() -> Self {
                        std::default::Default::default()
                    }

                    /// Sets the value of [uri][crate::model::intent::message::basic_card::button::OpenUriAction::uri].
                    pub fn set_uri<T: std::convert::Into<std::string::String>>(
                        mut self,
                        v: T,
                    ) -> Self {
                        self.uri = v.into();
                        self
                    }
                }

                impl wkt::message::Message for OpenUriAction {
                    fn typename() -> &'static str {
                        "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.BasicCard.Button.OpenUriAction"
                    }
                }
            }
        }

        /// The suggestion chip message that the user can tap to quickly post a reply
        /// to the conversation.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Suggestion {
            /// Required. The text shown the in the suggestion chip.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub title: std::string::String,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl Suggestion {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [title][crate::model::intent::message::Suggestion::title].
            pub fn set_title<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.title = v.into();
                self
            }
        }

        impl wkt::message::Message for Suggestion {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.Suggestion"
            }
        }

        /// The collection of suggestions.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Suggestions {
            /// Required. The list of suggested replies.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub suggestions: std::vec::Vec<crate::model::intent::message::Suggestion>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl Suggestions {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [suggestions][crate::model::intent::message::Suggestions::suggestions].
            pub fn set_suggestions<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<crate::model::intent::message::Suggestion>,
            {
                use std::iter::Iterator;
                self.suggestions = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for Suggestions {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.Suggestions"
            }
        }

        /// The suggestion chip message that allows the user to jump out to the app
        /// or website associated with this agent.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct LinkOutSuggestion {
            /// Required. The name of the app or site this chip is linking to.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub destination_name: std::string::String,

            /// Required. The URI of the app or site to open when the user taps the
            /// suggestion chip.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub uri: std::string::String,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl LinkOutSuggestion {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [destination_name][crate::model::intent::message::LinkOutSuggestion::destination_name].
            pub fn set_destination_name<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.destination_name = v.into();
                self
            }

            /// Sets the value of [uri][crate::model::intent::message::LinkOutSuggestion::uri].
            pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.uri = v.into();
                self
            }
        }

        impl wkt::message::Message for LinkOutSuggestion {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.LinkOutSuggestion"
            }
        }

        /// The card for presenting a list of options to select from.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct ListSelect {
            /// Optional. The overall title of the list.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub title: std::string::String,

            /// Required. List items.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub items: std::vec::Vec<crate::model::intent::message::list_select::Item>,

            /// Optional. Subtitle of the list.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub subtitle: std::string::String,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl ListSelect {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [title][crate::model::intent::message::ListSelect::title].
            pub fn set_title<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.title = v.into();
                self
            }

            /// Sets the value of [subtitle][crate::model::intent::message::ListSelect::subtitle].
            pub fn set_subtitle<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.subtitle = v.into();
                self
            }

            /// Sets the value of [items][crate::model::intent::message::ListSelect::items].
            pub fn set_items<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<crate::model::intent::message::list_select::Item>,
            {
                use std::iter::Iterator;
                self.items = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for ListSelect {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.ListSelect"
            }
        }

        /// Defines additional types related to [ListSelect].
        pub mod list_select {
            #[allow(unused_imports)]
            use super::*;

            /// An item in the list.
            #[serde_with::serde_as]
            #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(default, rename_all = "camelCase")]
            #[non_exhaustive]
            pub struct Item {
                /// Required. Additional information about this option.
                #[serde(skip_serializing_if = "std::option::Option::is_none")]
                pub info: std::option::Option<crate::model::intent::message::SelectItemInfo>,

                /// Required. The title of the list item.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub title: std::string::String,

                /// Optional. The main text describing the item.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub description: std::string::String,

                /// Optional. The image to display.
                #[serde(skip_serializing_if = "std::option::Option::is_none")]
                pub image: std::option::Option<crate::model::intent::message::Image>,

                #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
                _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
            }

            impl Item {
                pub fn new() -> Self {
                    std::default::Default::default()
                }

                /// Sets the value of [info][crate::model::intent::message::list_select::Item::info].
                pub fn set_info<
                    T: std::convert::Into<
                            std::option::Option<crate::model::intent::message::SelectItemInfo>,
                        >,
                >(
                    mut self,
                    v: T,
                ) -> Self {
                    self.info = v.into();
                    self
                }

                /// Sets the value of [title][crate::model::intent::message::list_select::Item::title].
                pub fn set_title<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.title = v.into();
                    self
                }

                /// Sets the value of [description][crate::model::intent::message::list_select::Item::description].
                pub fn set_description<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.description = v.into();
                    self
                }

                /// Sets the value of [image][crate::model::intent::message::list_select::Item::image].
                pub fn set_image<
                    T: std::convert::Into<std::option::Option<crate::model::intent::message::Image>>,
                >(
                    mut self,
                    v: T,
                ) -> Self {
                    self.image = v.into();
                    self
                }
            }

            impl wkt::message::Message for Item {
                fn typename() -> &'static str {
                    "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.ListSelect.Item"
                }
            }
        }

        /// The card for presenting a carousel of options to select from.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct CarouselSelect {
            /// Required. Carousel items.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub items: std::vec::Vec<crate::model::intent::message::carousel_select::Item>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl CarouselSelect {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [items][crate::model::intent::message::CarouselSelect::items].
            pub fn set_items<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<crate::model::intent::message::carousel_select::Item>,
            {
                use std::iter::Iterator;
                self.items = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for CarouselSelect {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.CarouselSelect"
            }
        }

        /// Defines additional types related to [CarouselSelect].
        pub mod carousel_select {
            #[allow(unused_imports)]
            use super::*;

            /// An item in the carousel.
            #[serde_with::serde_as]
            #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(default, rename_all = "camelCase")]
            #[non_exhaustive]
            pub struct Item {
                /// Required. Additional info about the option item.
                #[serde(skip_serializing_if = "std::option::Option::is_none")]
                pub info: std::option::Option<crate::model::intent::message::SelectItemInfo>,

                /// Required. Title of the carousel item.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub title: std::string::String,

                /// Optional. The body text of the card.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub description: std::string::String,

                /// Optional. The image to display.
                #[serde(skip_serializing_if = "std::option::Option::is_none")]
                pub image: std::option::Option<crate::model::intent::message::Image>,

                #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
                _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
            }

            impl Item {
                pub fn new() -> Self {
                    std::default::Default::default()
                }

                /// Sets the value of [info][crate::model::intent::message::carousel_select::Item::info].
                pub fn set_info<
                    T: std::convert::Into<
                            std::option::Option<crate::model::intent::message::SelectItemInfo>,
                        >,
                >(
                    mut self,
                    v: T,
                ) -> Self {
                    self.info = v.into();
                    self
                }

                /// Sets the value of [title][crate::model::intent::message::carousel_select::Item::title].
                pub fn set_title<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.title = v.into();
                    self
                }

                /// Sets the value of [description][crate::model::intent::message::carousel_select::Item::description].
                pub fn set_description<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.description = v.into();
                    self
                }

                /// Sets the value of [image][crate::model::intent::message::carousel_select::Item::image].
                pub fn set_image<
                    T: std::convert::Into<std::option::Option<crate::model::intent::message::Image>>,
                >(
                    mut self,
                    v: T,
                ) -> Self {
                    self.image = v.into();
                    self
                }
            }

            impl wkt::message::Message for Item {
                fn typename() -> &'static str {
                    "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.CarouselSelect.Item"
                }
            }
        }

        /// Additional info about the select item for when it is triggered in a
        /// dialog.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct SelectItemInfo {
            /// Required. A unique key that will be sent back to the agent if this
            /// response is given.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub key: std::string::String,

            /// Optional. A list of synonyms that can also be used to trigger this
            /// item in dialog.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub synonyms: std::vec::Vec<std::string::String>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl SelectItemInfo {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [key][crate::model::intent::message::SelectItemInfo::key].
            pub fn set_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.key = v.into();
                self
            }

            /// Sets the value of [synonyms][crate::model::intent::message::SelectItemInfo::synonyms].
            pub fn set_synonyms<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<std::string::String>,
            {
                use std::iter::Iterator;
                self.synonyms = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for SelectItemInfo {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.SelectItemInfo"
            }
        }

        /// The media content card for Actions on Google.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct MediaContent {
            /// Optional. What type of media is the content (ie "audio").
            pub media_type: crate::model::intent::message::media_content::ResponseMediaType,

            /// Required. List of media objects.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub media_objects:
                std::vec::Vec<crate::model::intent::message::media_content::ResponseMediaObject>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl MediaContent {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [media_type][crate::model::intent::message::MediaContent::media_type].
            pub fn set_media_type<
                T: std::convert::Into<crate::model::intent::message::media_content::ResponseMediaType>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.media_type = v.into();
                self
            }

            /// Sets the value of [media_objects][crate::model::intent::message::MediaContent::media_objects].
            pub fn set_media_objects<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<
                        crate::model::intent::message::media_content::ResponseMediaObject,
                    >,
            {
                use std::iter::Iterator;
                self.media_objects = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for MediaContent {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.MediaContent"
            }
        }

        /// Defines additional types related to [MediaContent].
        pub mod media_content {
            #[allow(unused_imports)]
            use super::*;

            /// Response media object for media content card.
            #[serde_with::serde_as]
            #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(default, rename_all = "camelCase")]
            #[non_exhaustive]
            pub struct ResponseMediaObject {
                /// Required. Name of media card.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub name: std::string::String,

                /// Optional. Description of media card.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub description: std::string::String,

                /// Required. Url where the media is stored.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub content_url: std::string::String,

                /// Image to show with the media card.
                #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
                pub image: std::option::Option<
                    crate::model::intent::message::media_content::response_media_object::Image,
                >,

                #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
                _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
            }

            impl ResponseMediaObject {
                pub fn new() -> Self {
                    std::default::Default::default()
                }

                /// Sets the value of [name][crate::model::intent::message::media_content::ResponseMediaObject::name].
                pub fn set_name<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.name = v.into();
                    self
                }

                /// Sets the value of [description][crate::model::intent::message::media_content::ResponseMediaObject::description].
                pub fn set_description<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.description = v.into();
                    self
                }

                /// Sets the value of [content_url][crate::model::intent::message::media_content::ResponseMediaObject::content_url].
                pub fn set_content_url<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.content_url = v.into();
                    self
                }

                /// Sets the value of [image][crate::model::intent::message::media_content::ResponseMediaObject::image].
                ///
                /// Note that all the setters affecting `image` are mutually
                /// exclusive.
                pub fn set_image<T: std::convert::Into<std::option::Option<crate::model::intent::message::media_content::response_media_object::Image>>>(mut self, v: T) -> Self
                {
                    self.image = v.into();
                    self
                }

                /// The value of [image][crate::model::intent::message::media_content::ResponseMediaObject::image]
                /// if it holds a `LargeImage`, `None` if the field is not set or
                /// holds a different branch.
                pub fn large_image(
                    &self,
                ) -> std::option::Option<&std::boxed::Box<crate::model::intent::message::Image>>
                {
                    #[allow(unreachable_patterns)]
                    self.image.as_ref().and_then(|v| match v {
                        crate::model::intent::message::media_content::response_media_object::Image::LargeImage(v) => std::option::Option::Some(v),
                        _ => std::option::Option::None,
                    })
                }

                /// The value of [image][crate::model::intent::message::media_content::ResponseMediaObject::image]
                /// if it holds a `Icon`, `None` if the field is not set or
                /// holds a different branch.
                pub fn icon(
                    &self,
                ) -> std::option::Option<&std::boxed::Box<crate::model::intent::message::Image>>
                {
                    #[allow(unreachable_patterns)]
                    self.image.as_ref().and_then(|v| match v {
                        crate::model::intent::message::media_content::response_media_object::Image::Icon(v) => std::option::Option::Some(v),
                        _ => std::option::Option::None,
                    })
                }

                /// Sets the value of [image][crate::model::intent::message::media_content::ResponseMediaObject::image]
                /// to hold a `LargeImage`.
                ///
                /// Note that all the setters affecting `image` are
                /// mutually exclusive.
                pub fn set_large_image<
                    T: std::convert::Into<std::boxed::Box<crate::model::intent::message::Image>>,
                >(
                    mut self,
                    v: T,
                ) -> Self {
                    self.image = std::option::Option::Some(
                        crate::model::intent::message::media_content::response_media_object::Image::LargeImage(
                            v.into()
                        )
                    );
                    self
                }

                /// Sets the value of [image][crate::model::intent::message::media_content::ResponseMediaObject::image]
                /// to hold a `Icon`.
                ///
                /// Note that all the setters affecting `image` are
                /// mutually exclusive.
                pub fn set_icon<
                    T: std::convert::Into<std::boxed::Box<crate::model::intent::message::Image>>,
                >(
                    mut self,
                    v: T,
                ) -> Self {
                    self.image = std::option::Option::Some(
                        crate::model::intent::message::media_content::response_media_object::Image::Icon(
                            v.into()
                        )
                    );
                    self
                }
            }

            impl wkt::message::Message for ResponseMediaObject {
                fn typename() -> &'static str {
                    "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaObject"
                }
            }

            /// Defines additional types related to [ResponseMediaObject].
            pub mod response_media_object {
                #[allow(unused_imports)]
                use super::*;

                /// Image to show with the media card.
                #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
                #[serde(rename_all = "camelCase")]
                #[non_exhaustive]
                pub enum Image {
                    /// Optional. Image to display above media content.
                    LargeImage(std::boxed::Box<crate::model::intent::message::Image>),
                    /// Optional. Icon to display above media content.
                    Icon(std::boxed::Box<crate::model::intent::message::Image>),
                }
            }

            /// Format of response media type.
            ///
            /// # Working with unknown values
            ///
            /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
            /// additional enum variants at any time. Adding new variants is not considered
            /// a breaking change. Applications should write their code in anticipation of:
            ///
            /// - New values appearing in future releases of the client library, **and**
            /// - New values received dynamically, without application changes.
            ///
            /// Please consult the [Working with enums] section in the user guide for some
            /// guidelines.
            ///
            /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
            #[derive(Clone, Debug, PartialEq)]
            #[non_exhaustive]
            pub enum ResponseMediaType {
                /// Unspecified.
                Unspecified,
                /// Response media type is audio.
                Audio,
                /// If set, the enum was initialized with an unknown value.
                ///
                /// Applications can examine the value using [ResponseMediaType::value] or
                /// [ResponseMediaType::name].
                UnknownValue(response_media_type::UnknownValue),
            }

            #[doc(hidden)]
            pub mod response_media_type {
                #[allow(unused_imports)]
                use super::*;
                #[derive(Clone, Debug, PartialEq)]
                pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
            }

            impl ResponseMediaType {
                /// Gets the enum value.
                ///
                /// Returns `None` if the enum contains an unknown value deserialized from
                /// the string representation of enums.
                pub fn value(&self) -> std::option::Option<i32> {
                    match self {
                        Self::Unspecified => std::option::Option::Some(0),
                        Self::Audio => std::option::Option::Some(1),
                        Self::UnknownValue(u) => u.0.value(),
                    }
                }

                /// Gets the enum value as a string.
                ///
                /// Returns `None` if the enum contains an unknown value deserialized from
                /// the integer representation of enums.
                pub fn name(&self) -> std::option::Option<&str> {
                    match self {
                        Self::Unspecified => {
                            std::option::Option::Some("RESPONSE_MEDIA_TYPE_UNSPECIFIED")
                        }
                        Self::Audio => std::option::Option::Some("AUDIO"),
                        Self::UnknownValue(u) => u.0.name(),
                    }
                }
            }

            impl std::default::Default for ResponseMediaType {
                fn default() -> Self {
                    use std::convert::From;
                    Self::from(0)
                }
            }

            impl std::fmt::Display for ResponseMediaType {
                fn fmt(
                    &self,
                    f: &mut std::fmt::Formatter<'_>,
                ) -> std::result::Result<(), std::fmt::Error> {
                    wkt::internal::display_enum(f, self.name(), self.value())
                }
            }

            impl std::convert::From<i32> for ResponseMediaType {
                fn from(value: i32) -> Self {
                    match value {
                        0 => Self::Unspecified,
                        1 => Self::Audio,
                        _ => Self::UnknownValue(response_media_type::UnknownValue(
                            wkt::internal::UnknownEnumValue::Integer(value),
                        )),
                    }
                }
            }

            impl std::convert::From<&str> for ResponseMediaType {
                fn from(value: &str) -> Self {
                    use std::string::ToString;
                    match value {
                        "RESPONSE_MEDIA_TYPE_UNSPECIFIED" => Self::Unspecified,
                        "AUDIO" => Self::Audio,
                        _ => Self::UnknownValue(response_media_type::UnknownValue(
                            wkt::internal::UnknownEnumValue::String(value.to_string()),
                        )),
                    }
                }
            }

            impl serde::ser::Serialize for ResponseMediaType {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::Serializer,
                {
                    match self {
                        Self::Unspecified => serializer.serialize_i32(0),
                        Self::Audio => serializer.serialize_i32(1),
                        Self::UnknownValue(u) => u.0.serialize(serializer),
                    }
                }
            }

            impl<'de> serde::de::Deserialize<'de> for ResponseMediaType {
                fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
                where
                    D: serde::Deserializer<'de>,
                {
                    deserializer.deserialize_any(wkt::internal::EnumVisitor::<ResponseMediaType>::new(
                        ".google.cloud.dialogflow.v2.Intent.Message.MediaContent.ResponseMediaType"))
                }
            }
        }

        /// Browse Carousel Card for Actions on Google.
        /// <https://developers.google.com/actions/assistant/responses#browsing_carousel>
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct BrowseCarouselCard {
            /// Required. List of items in the Browse Carousel Card. Minimum of two
            /// items, maximum of ten.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub items: std::vec::Vec<
                crate::model::intent::message::browse_carousel_card::BrowseCarouselCardItem,
            >,

            /// Optional. Settings for displaying the image. Applies to every image in
            /// [items][google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.items].
            ///
            /// [google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.items]: crate::model::intent::message::BrowseCarouselCard::items
            pub image_display_options:
                crate::model::intent::message::browse_carousel_card::ImageDisplayOptions,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl BrowseCarouselCard {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [image_display_options][crate::model::intent::message::BrowseCarouselCard::image_display_options].
            pub fn set_image_display_options<
                T: std::convert::Into<
                        crate::model::intent::message::browse_carousel_card::ImageDisplayOptions,
                    >,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.image_display_options = v.into();
                self
            }

            /// Sets the value of [items][crate::model::intent::message::BrowseCarouselCard::items].
            pub fn set_items<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<
                        crate::model::intent::message::browse_carousel_card::BrowseCarouselCardItem,
                    >,
            {
                use std::iter::Iterator;
                self.items = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for BrowseCarouselCard {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard"
            }
        }

        /// Defines additional types related to [BrowseCarouselCard].
        pub mod browse_carousel_card {
            #[allow(unused_imports)]
            use super::*;

            /// Browsing carousel tile
            #[serde_with::serde_as]
            #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(default, rename_all = "camelCase")]
            #[non_exhaustive]
            pub struct BrowseCarouselCardItem {

                /// Required. Action to present to the user.
                #[serde(skip_serializing_if = "std::option::Option::is_none")]
                pub open_uri_action: std::option::Option<crate::model::intent::message::browse_carousel_card::browse_carousel_card_item::OpenUrlAction>,

                /// Required. Title of the carousel item. Maximum of two lines of text.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub title: std::string::String,

                /// Optional. Description of the carousel item. Maximum of four lines of
                /// text.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub description: std::string::String,

                /// Optional. Hero image for the carousel item.
                #[serde(skip_serializing_if = "std::option::Option::is_none")]
                pub image: std::option::Option<crate::model::intent::message::Image>,

                /// Optional. Text that appears at the bottom of the Browse Carousel
                /// Card. Maximum of one line of text.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub footer: std::string::String,

                #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
                _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
            }

            impl BrowseCarouselCardItem {
                pub fn new() -> Self {
                    std::default::Default::default()
                }

                /// Sets the value of [open_uri_action][crate::model::intent::message::browse_carousel_card::BrowseCarouselCardItem::open_uri_action].
                pub fn set_open_uri_action<T: std::convert::Into<std::option::Option<crate::model::intent::message::browse_carousel_card::browse_carousel_card_item::OpenUrlAction>>>(mut self, v: T) -> Self{
                    self.open_uri_action = v.into();
                    self
                }

                /// Sets the value of [title][crate::model::intent::message::browse_carousel_card::BrowseCarouselCardItem::title].
                pub fn set_title<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.title = v.into();
                    self
                }

                /// Sets the value of [description][crate::model::intent::message::browse_carousel_card::BrowseCarouselCardItem::description].
                pub fn set_description<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.description = v.into();
                    self
                }

                /// Sets the value of [image][crate::model::intent::message::browse_carousel_card::BrowseCarouselCardItem::image].
                pub fn set_image<
                    T: std::convert::Into<std::option::Option<crate::model::intent::message::Image>>,
                >(
                    mut self,
                    v: T,
                ) -> Self {
                    self.image = v.into();
                    self
                }

                /// Sets the value of [footer][crate::model::intent::message::browse_carousel_card::BrowseCarouselCardItem::footer].
                pub fn set_footer<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.footer = v.into();
                    self
                }
            }

            impl wkt::message::Message for BrowseCarouselCardItem {
                fn typename() -> &'static str {
                    "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem"
                }
            }

            /// Defines additional types related to [BrowseCarouselCardItem].
            pub mod browse_carousel_card_item {
                #[allow(unused_imports)]
                use super::*;

                /// Actions on Google action to open a given url.
                #[serde_with::serde_as]
                #[derive(
                    Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize,
                )]
                #[serde(default, rename_all = "camelCase")]
                #[non_exhaustive]
                pub struct OpenUrlAction {

                    /// Required. URL
                    #[serde(skip_serializing_if = "std::string::String::is_empty")]
                    pub url: std::string::String,

                    /// Optional. Specifies the type of viewer that is used when opening
                    /// the URL. Defaults to opening via web browser.
                    pub url_type_hint: crate::model::intent::message::browse_carousel_card::browse_carousel_card_item::open_url_action::UrlTypeHint,

                    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
                    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
                }

                impl OpenUrlAction {
                    pub fn new() -> Self {
                        std::default::Default::default()
                    }

                    /// Sets the value of [url][crate::model::intent::message::browse_carousel_card::browse_carousel_card_item::OpenUrlAction::url].
                    pub fn set_url<T: std::convert::Into<std::string::String>>(
                        mut self,
                        v: T,
                    ) -> Self {
                        self.url = v.into();
                        self
                    }

                    /// Sets the value of [url_type_hint][crate::model::intent::message::browse_carousel_card::browse_carousel_card_item::OpenUrlAction::url_type_hint].
                    pub fn set_url_type_hint<T: std::convert::Into<crate::model::intent::message::browse_carousel_card::browse_carousel_card_item::open_url_action::UrlTypeHint>>(mut self, v: T) -> Self{
                        self.url_type_hint = v.into();
                        self
                    }
                }

                impl wkt::message::Message for OpenUrlAction {
                    fn typename() -> &'static str {
                        "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction"
                    }
                }

                /// Defines additional types related to [OpenUrlAction].
                pub mod open_url_action {
                    #[allow(unused_imports)]
                    use super::*;

                    /// Type of the URI.
                    ///
                    /// # Working with unknown values
                    ///
                    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
                    /// additional enum variants at any time. Adding new variants is not considered
                    /// a breaking change. Applications should write their code in anticipation of:
                    ///
                    /// - New values appearing in future releases of the client library, **and**
                    /// - New values received dynamically, without application changes.
                    ///
                    /// Please consult the [Working with enums] section in the user guide for some
                    /// guidelines.
                    ///
                    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
                    #[derive(Clone, Debug, PartialEq)]
                    #[non_exhaustive]
                    pub enum UrlTypeHint {
                        /// Unspecified
                        Unspecified,
                        /// Url would be an amp action
                        AmpAction,
                        /// URL that points directly to AMP content, or to a canonical URL
                        /// which refers to AMP content via \<link rel="amphtml"\>.
                        AmpContent,
                        /// If set, the enum was initialized with an unknown value.
                        ///
                        /// Applications can examine the value using [UrlTypeHint::value] or
                        /// [UrlTypeHint::name].
                        UnknownValue(url_type_hint::UnknownValue),
                    }

                    #[doc(hidden)]
                    pub mod url_type_hint {
                        #[allow(unused_imports)]
                        use super::*;
                        #[derive(Clone, Debug, PartialEq)]
                        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
                    }

                    impl UrlTypeHint {
                        /// Gets the enum value.
                        ///
                        /// Returns `None` if the enum contains an unknown value deserialized from
                        /// the string representation of enums.
                        pub fn value(&self) -> std::option::Option<i32> {
                            match self {
                                Self::Unspecified => std::option::Option::Some(0),
                                Self::AmpAction => std::option::Option::Some(1),
                                Self::AmpContent => std::option::Option::Some(2),
                                Self::UnknownValue(u) => u.0.value(),
                            }
                        }

                        /// Gets the enum value as a string.
                        ///
                        /// Returns `None` if the enum contains an unknown value deserialized from
                        /// the integer representation of enums.
                        pub fn name(&self) -> std::option::Option<&str> {
                            match self {
                                Self::Unspecified => {
                                    std::option::Option::Some("URL_TYPE_HINT_UNSPECIFIED")
                                }
                                Self::AmpAction => std::option::Option::Some("AMP_ACTION"),
                                Self::AmpContent => std::option::Option::Some("AMP_CONTENT"),
                                Self::UnknownValue(u) => u.0.name(),
                            }
                        }
                    }

                    impl std::default::Default for UrlTypeHint {
                        fn default() -> Self {
                            use std::convert::From;
                            Self::from(0)
                        }
                    }

                    impl std::fmt::Display for UrlTypeHint {
                        fn fmt(
                            &self,
                            f: &mut std::fmt::Formatter<'_>,
                        ) -> std::result::Result<(), std::fmt::Error> {
                            wkt::internal::display_enum(f, self.name(), self.value())
                        }
                    }

                    impl std::convert::From<i32> for UrlTypeHint {
                        fn from(value: i32) -> Self {
                            match value {
                                0 => Self::Unspecified,
                                1 => Self::AmpAction,
                                2 => Self::AmpContent,
                                _ => Self::UnknownValue(url_type_hint::UnknownValue(
                                    wkt::internal::UnknownEnumValue::Integer(value),
                                )),
                            }
                        }
                    }

                    impl std::convert::From<&str> for UrlTypeHint {
                        fn from(value: &str) -> Self {
                            use std::string::ToString;
                            match value {
                                "URL_TYPE_HINT_UNSPECIFIED" => Self::Unspecified,
                                "AMP_ACTION" => Self::AmpAction,
                                "AMP_CONTENT" => Self::AmpContent,
                                _ => Self::UnknownValue(url_type_hint::UnknownValue(
                                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                                )),
                            }
                        }
                    }

                    impl serde::ser::Serialize for UrlTypeHint {
                        fn serialize<S>(
                            &self,
                            serializer: S,
                        ) -> std::result::Result<S::Ok, S::Error>
                        where
                            S: serde::Serializer,
                        {
                            match self {
                                Self::Unspecified => serializer.serialize_i32(0),
                                Self::AmpAction => serializer.serialize_i32(1),
                                Self::AmpContent => serializer.serialize_i32(2),
                                Self::UnknownValue(u) => u.0.serialize(serializer),
                            }
                        }
                    }

                    impl<'de> serde::de::Deserialize<'de> for UrlTypeHint {
                        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
                        where
                            D: serde::Deserializer<'de>,
                        {
                            deserializer.deserialize_any(wkt::internal::EnumVisitor::<UrlTypeHint>::new(
                                ".google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.BrowseCarouselCardItem.OpenUrlAction.UrlTypeHint"))
                        }
                    }
                }
            }

            /// Image display options for Actions on Google. This should be used for
            /// when the image's aspect ratio does not match the image container's
            /// aspect ratio.
            ///
            /// # Working with unknown values
            ///
            /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
            /// additional enum variants at any time. Adding new variants is not considered
            /// a breaking change. Applications should write their code in anticipation of:
            ///
            /// - New values appearing in future releases of the client library, **and**
            /// - New values received dynamically, without application changes.
            ///
            /// Please consult the [Working with enums] section in the user guide for some
            /// guidelines.
            ///
            /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
            #[derive(Clone, Debug, PartialEq)]
            #[non_exhaustive]
            pub enum ImageDisplayOptions {
                /// Fill the gaps between the image and the image container with gray
                /// bars.
                Unspecified,
                /// Fill the gaps between the image and the image container with gray
                /// bars.
                Gray,
                /// Fill the gaps between the image and the image container with white
                /// bars.
                White,
                /// Image is scaled such that the image width and height match or exceed
                /// the container dimensions. This may crop the top and bottom of the
                /// image if the scaled image height is greater than the container
                /// height, or crop the left and right of the image if the scaled image
                /// width is greater than the container width. This is similar to "Zoom
                /// Mode" on a widescreen TV when playing a 4:3 video.
                Cropped,
                /// Pad the gaps between image and image frame with a blurred copy of the
                /// same image.
                BlurredBackground,
                /// If set, the enum was initialized with an unknown value.
                ///
                /// Applications can examine the value using [ImageDisplayOptions::value] or
                /// [ImageDisplayOptions::name].
                UnknownValue(image_display_options::UnknownValue),
            }

            #[doc(hidden)]
            pub mod image_display_options {
                #[allow(unused_imports)]
                use super::*;
                #[derive(Clone, Debug, PartialEq)]
                pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
            }

            impl ImageDisplayOptions {
                /// Gets the enum value.
                ///
                /// Returns `None` if the enum contains an unknown value deserialized from
                /// the string representation of enums.
                pub fn value(&self) -> std::option::Option<i32> {
                    match self {
                        Self::Unspecified => std::option::Option::Some(0),
                        Self::Gray => std::option::Option::Some(1),
                        Self::White => std::option::Option::Some(2),
                        Self::Cropped => std::option::Option::Some(3),
                        Self::BlurredBackground => std::option::Option::Some(4),
                        Self::UnknownValue(u) => u.0.value(),
                    }
                }

                /// Gets the enum value as a string.
                ///
                /// Returns `None` if the enum contains an unknown value deserialized from
                /// the integer representation of enums.
                pub fn name(&self) -> std::option::Option<&str> {
                    match self {
                        Self::Unspecified => {
                            std::option::Option::Some("IMAGE_DISPLAY_OPTIONS_UNSPECIFIED")
                        }
                        Self::Gray => std::option::Option::Some("GRAY"),
                        Self::White => std::option::Option::Some("WHITE"),
                        Self::Cropped => std::option::Option::Some("CROPPED"),
                        Self::BlurredBackground => std::option::Option::Some("BLURRED_BACKGROUND"),
                        Self::UnknownValue(u) => u.0.name(),
                    }
                }
            }

            impl std::default::Default for ImageDisplayOptions {
                fn default() -> Self {
                    use std::convert::From;
                    Self::from(0)
                }
            }

            impl std::fmt::Display for ImageDisplayOptions {
                fn fmt(
                    &self,
                    f: &mut std::fmt::Formatter<'_>,
                ) -> std::result::Result<(), std::fmt::Error> {
                    wkt::internal::display_enum(f, self.name(), self.value())
                }
            }

            impl std::convert::From<i32> for ImageDisplayOptions {
                fn from(value: i32) -> Self {
                    match value {
                        0 => Self::Unspecified,
                        1 => Self::Gray,
                        2 => Self::White,
                        3 => Self::Cropped,
                        4 => Self::BlurredBackground,
                        _ => Self::UnknownValue(image_display_options::UnknownValue(
                            wkt::internal::UnknownEnumValue::Integer(value),
                        )),
                    }
                }
            }

            impl std::convert::From<&str> for ImageDisplayOptions {
                fn from(value: &str) -> Self {
                    use std::string::ToString;
                    match value {
                        "IMAGE_DISPLAY_OPTIONS_UNSPECIFIED" => Self::Unspecified,
                        "GRAY" => Self::Gray,
                        "WHITE" => Self::White,
                        "CROPPED" => Self::Cropped,
                        "BLURRED_BACKGROUND" => Self::BlurredBackground,
                        _ => Self::UnknownValue(image_display_options::UnknownValue(
                            wkt::internal::UnknownEnumValue::String(value.to_string()),
                        )),
                    }
                }
            }

            impl serde::ser::Serialize for ImageDisplayOptions {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::Serializer,
                {
                    match self {
                        Self::Unspecified => serializer.serialize_i32(0),
                        Self::Gray => serializer.serialize_i32(1),
                        Self::White => serializer.serialize_i32(2),
                        Self::Cropped => serializer.serialize_i32(3),
                        Self::BlurredBackground => serializer.serialize_i32(4),
                        Self::UnknownValue(u) => u.0.serialize(serializer),
                    }
                }
            }

            impl<'de> serde::de::Deserialize<'de> for ImageDisplayOptions {
                fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
                where
                    D: serde::Deserializer<'de>,
                {
                    deserializer.deserialize_any(wkt::internal::EnumVisitor::<ImageDisplayOptions>::new(
                        ".google.cloud.dialogflow.v2.Intent.Message.BrowseCarouselCard.ImageDisplayOptions"))
                }
            }
        }

        /// Table card for Actions on Google.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct TableCard {
            /// Required. Title of the card.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub title: std::string::String,

            /// Optional. Subtitle to the title.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub subtitle: std::string::String,

            /// Optional. Image which should be displayed on the card.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub image: std::option::Option<crate::model::intent::message::Image>,

            /// Optional. Display properties for the columns in this table.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub column_properties: std::vec::Vec<crate::model::intent::message::ColumnProperties>,

            /// Optional. Rows in this table of data.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub rows: std::vec::Vec<crate::model::intent::message::TableCardRow>,

            /// Optional. List of buttons for the card.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub buttons: std::vec::Vec<crate::model::intent::message::basic_card::Button>,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl TableCard {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [title][crate::model::intent::message::TableCard::title].
            pub fn set_title<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.title = v.into();
                self
            }

            /// Sets the value of [subtitle][crate::model::intent::message::TableCard::subtitle].
            pub fn set_subtitle<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.subtitle = v.into();
                self
            }

            /// Sets the value of [image][crate::model::intent::message::TableCard::image].
            pub fn set_image<
                T: std::convert::Into<std::option::Option<crate::model::intent::message::Image>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.image = v.into();
                self
            }

            /// Sets the value of [column_properties][crate::model::intent::message::TableCard::column_properties].
            pub fn set_column_properties<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<crate::model::intent::message::ColumnProperties>,
            {
                use std::iter::Iterator;
                self.column_properties = v.into_iter().map(|i| i.into()).collect();
                self
            }

            /// Sets the value of [rows][crate::model::intent::message::TableCard::rows].
            pub fn set_rows<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<crate::model::intent::message::TableCardRow>,
            {
                use std::iter::Iterator;
                self.rows = v.into_iter().map(|i| i.into()).collect();
                self
            }

            /// Sets the value of [buttons][crate::model::intent::message::TableCard::buttons].
            pub fn set_buttons<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<crate::model::intent::message::basic_card::Button>,
            {
                use std::iter::Iterator;
                self.buttons = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for TableCard {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.TableCard"
            }
        }

        /// Column properties for
        /// [TableCard][google.cloud.dialogflow.v2.Intent.Message.TableCard].
        ///
        /// [google.cloud.dialogflow.v2.Intent.Message.TableCard]: crate::model::intent::message::TableCard
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct ColumnProperties {
            /// Required. Column heading.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub header: std::string::String,

            /// Optional. Defines text alignment for all cells in this column.
            pub horizontal_alignment:
                crate::model::intent::message::column_properties::HorizontalAlignment,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl ColumnProperties {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [header][crate::model::intent::message::ColumnProperties::header].
            pub fn set_header<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.header = v.into();
                self
            }

            /// Sets the value of [horizontal_alignment][crate::model::intent::message::ColumnProperties::horizontal_alignment].
            pub fn set_horizontal_alignment<
                T: std::convert::Into<
                        crate::model::intent::message::column_properties::HorizontalAlignment,
                    >,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.horizontal_alignment = v.into();
                self
            }
        }

        impl wkt::message::Message for ColumnProperties {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.ColumnProperties"
            }
        }

        /// Defines additional types related to [ColumnProperties].
        pub mod column_properties {
            #[allow(unused_imports)]
            use super::*;

            /// Text alignments within a cell.
            ///
            /// # Working with unknown values
            ///
            /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
            /// additional enum variants at any time. Adding new variants is not considered
            /// a breaking change. Applications should write their code in anticipation of:
            ///
            /// - New values appearing in future releases of the client library, **and**
            /// - New values received dynamically, without application changes.
            ///
            /// Please consult the [Working with enums] section in the user guide for some
            /// guidelines.
            ///
            /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
            #[derive(Clone, Debug, PartialEq)]
            #[non_exhaustive]
            pub enum HorizontalAlignment {
                /// Text is aligned to the leading edge of the column.
                Unspecified,
                /// Text is aligned to the leading edge of the column.
                Leading,
                /// Text is centered in the column.
                Center,
                /// Text is aligned to the trailing edge of the column.
                Trailing,
                /// If set, the enum was initialized with an unknown value.
                ///
                /// Applications can examine the value using [HorizontalAlignment::value] or
                /// [HorizontalAlignment::name].
                UnknownValue(horizontal_alignment::UnknownValue),
            }

            #[doc(hidden)]
            pub mod horizontal_alignment {
                #[allow(unused_imports)]
                use super::*;
                #[derive(Clone, Debug, PartialEq)]
                pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
            }

            impl HorizontalAlignment {
                /// Gets the enum value.
                ///
                /// Returns `None` if the enum contains an unknown value deserialized from
                /// the string representation of enums.
                pub fn value(&self) -> std::option::Option<i32> {
                    match self {
                        Self::Unspecified => std::option::Option::Some(0),
                        Self::Leading => std::option::Option::Some(1),
                        Self::Center => std::option::Option::Some(2),
                        Self::Trailing => std::option::Option::Some(3),
                        Self::UnknownValue(u) => u.0.value(),
                    }
                }

                /// Gets the enum value as a string.
                ///
                /// Returns `None` if the enum contains an unknown value deserialized from
                /// the integer representation of enums.
                pub fn name(&self) -> std::option::Option<&str> {
                    match self {
                        Self::Unspecified => {
                            std::option::Option::Some("HORIZONTAL_ALIGNMENT_UNSPECIFIED")
                        }
                        Self::Leading => std::option::Option::Some("LEADING"),
                        Self::Center => std::option::Option::Some("CENTER"),
                        Self::Trailing => std::option::Option::Some("TRAILING"),
                        Self::UnknownValue(u) => u.0.name(),
                    }
                }
            }

            impl std::default::Default for HorizontalAlignment {
                fn default() -> Self {
                    use std::convert::From;
                    Self::from(0)
                }
            }

            impl std::fmt::Display for HorizontalAlignment {
                fn fmt(
                    &self,
                    f: &mut std::fmt::Formatter<'_>,
                ) -> std::result::Result<(), std::fmt::Error> {
                    wkt::internal::display_enum(f, self.name(), self.value())
                }
            }

            impl std::convert::From<i32> for HorizontalAlignment {
                fn from(value: i32) -> Self {
                    match value {
                        0 => Self::Unspecified,
                        1 => Self::Leading,
                        2 => Self::Center,
                        3 => Self::Trailing,
                        _ => Self::UnknownValue(horizontal_alignment::UnknownValue(
                            wkt::internal::UnknownEnumValue::Integer(value),
                        )),
                    }
                }
            }

            impl std::convert::From<&str> for HorizontalAlignment {
                fn from(value: &str) -> Self {
                    use std::string::ToString;
                    match value {
                        "HORIZONTAL_ALIGNMENT_UNSPECIFIED" => Self::Unspecified,
                        "LEADING" => Self::Leading,
                        "CENTER" => Self::Center,
                        "TRAILING" => Self::Trailing,
                        _ => Self::UnknownValue(horizontal_alignment::UnknownValue(
                            wkt::internal::UnknownEnumValue::String(value.to_string()),
                        )),
                    }
                }
            }

            impl serde::ser::Serialize for HorizontalAlignment {
                fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
                where
                    S: serde::Serializer,
                {
                    match self {
                        Self::Unspecified => serializer.serialize_i32(0),
                        Self::Leading => serializer.serialize_i32(1),
                        Self::Center => serializer.serialize_i32(2),
                        Self::Trailing => serializer.serialize_i32(3),
                        Self::UnknownValue(u) => u.0.serialize(serializer),
                    }
                }
            }

            impl<'de> serde::de::Deserialize<'de> for HorizontalAlignment {
                fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
                where
                    D: serde::Deserializer<'de>,
                {
                    deserializer.deserialize_any(wkt::internal::EnumVisitor::<HorizontalAlignment>::new(
                        ".google.cloud.dialogflow.v2.Intent.Message.ColumnProperties.HorizontalAlignment"))
                }
            }
        }

        /// Row of [TableCard][google.cloud.dialogflow.v2.Intent.Message.TableCard].
        ///
        /// [google.cloud.dialogflow.v2.Intent.Message.TableCard]: crate::model::intent::message::TableCard
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct TableCardRow {
            /// Optional. List of cells that make up this row.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub cells: std::vec::Vec<crate::model::intent::message::TableCardCell>,

            /// Optional. Whether to add a visual divider after this row.
            #[serde(skip_serializing_if = "wkt::internal::is_default")]
            pub divider_after: bool,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl TableCardRow {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [divider_after][crate::model::intent::message::TableCardRow::divider_after].
            pub fn set_divider_after<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
                self.divider_after = v.into();
                self
            }

            /// Sets the value of [cells][crate::model::intent::message::TableCardRow::cells].
            pub fn set_cells<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<crate::model::intent::message::TableCardCell>,
            {
                use std::iter::Iterator;
                self.cells = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for TableCardRow {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.TableCardRow"
            }
        }

        /// Cell of
        /// [TableCardRow][google.cloud.dialogflow.v2.Intent.Message.TableCardRow].
        ///
        /// [google.cloud.dialogflow.v2.Intent.Message.TableCardRow]: crate::model::intent::message::TableCardRow
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct TableCardCell {
            /// Required. Text in this cell.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub text: std::string::String,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl TableCardCell {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [text][crate::model::intent::message::TableCardCell::text].
            pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.text = v.into();
                self
            }
        }

        impl wkt::message::Message for TableCardCell {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.Intent.Message.TableCardCell"
            }
        }

        /// The rich response message integration platform. See
        /// [Integrations](https://cloud.google.com/dialogflow/docs/integrations).
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum Platform {
            /// Default platform.
            Unspecified,
            /// Facebook.
            Facebook,
            /// Slack.
            Slack,
            /// Telegram.
            Telegram,
            /// Kik.
            Kik,
            /// Skype.
            Skype,
            /// Line.
            Line,
            /// Viber.
            Viber,
            /// Google Assistant
            /// See [Dialogflow webhook
            /// format](https://developers.google.com/assistant/actions/build/json/dialogflow-webhook-json)
            ActionsOnGoogle,
            /// Google Hangouts.
            GoogleHangouts,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [Platform::value] or
            /// [Platform::name].
            UnknownValue(platform::UnknownValue),
        }

        #[doc(hidden)]
        pub mod platform {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl Platform {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::Unspecified => std::option::Option::Some(0),
                    Self::Facebook => std::option::Option::Some(1),
                    Self::Slack => std::option::Option::Some(2),
                    Self::Telegram => std::option::Option::Some(3),
                    Self::Kik => std::option::Option::Some(4),
                    Self::Skype => std::option::Option::Some(5),
                    Self::Line => std::option::Option::Some(6),
                    Self::Viber => std::option::Option::Some(7),
                    Self::ActionsOnGoogle => std::option::Option::Some(8),
                    Self::GoogleHangouts => std::option::Option::Some(11),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::Unspecified => std::option::Option::Some("PLATFORM_UNSPECIFIED"),
                    Self::Facebook => std::option::Option::Some("FACEBOOK"),
                    Self::Slack => std::option::Option::Some("SLACK"),
                    Self::Telegram => std::option::Option::Some("TELEGRAM"),
                    Self::Kik => std::option::Option::Some("KIK"),
                    Self::Skype => std::option::Option::Some("SKYPE"),
                    Self::Line => std::option::Option::Some("LINE"),
                    Self::Viber => std::option::Option::Some("VIBER"),
                    Self::ActionsOnGoogle => std::option::Option::Some("ACTIONS_ON_GOOGLE"),
                    Self::GoogleHangouts => std::option::Option::Some("GOOGLE_HANGOUTS"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for Platform {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for Platform {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for Platform {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::Unspecified,
                    1 => Self::Facebook,
                    2 => Self::Slack,
                    3 => Self::Telegram,
                    4 => Self::Kik,
                    5 => Self::Skype,
                    6 => Self::Line,
                    7 => Self::Viber,
                    8 => Self::ActionsOnGoogle,
                    11 => Self::GoogleHangouts,
                    _ => Self::UnknownValue(platform::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for Platform {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "PLATFORM_UNSPECIFIED" => Self::Unspecified,
                    "FACEBOOK" => Self::Facebook,
                    "SLACK" => Self::Slack,
                    "TELEGRAM" => Self::Telegram,
                    "KIK" => Self::Kik,
                    "SKYPE" => Self::Skype,
                    "LINE" => Self::Line,
                    "VIBER" => Self::Viber,
                    "ACTIONS_ON_GOOGLE" => Self::ActionsOnGoogle,
                    "GOOGLE_HANGOUTS" => Self::GoogleHangouts,
                    _ => Self::UnknownValue(platform::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for Platform {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::Unspecified => serializer.serialize_i32(0),
                    Self::Facebook => serializer.serialize_i32(1),
                    Self::Slack => serializer.serialize_i32(2),
                    Self::Telegram => serializer.serialize_i32(3),
                    Self::Kik => serializer.serialize_i32(4),
                    Self::Skype => serializer.serialize_i32(5),
                    Self::Line => serializer.serialize_i32(6),
                    Self::Viber => serializer.serialize_i32(7),
                    Self::ActionsOnGoogle => serializer.serialize_i32(8),
                    Self::GoogleHangouts => serializer.serialize_i32(11),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for Platform {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<Platform>::new(
                    ".google.cloud.dialogflow.v2.Intent.Message.Platform",
                ))
            }
        }

        /// Required. The rich response message.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum Message {
            /// The text response.
            Text(std::boxed::Box<crate::model::intent::message::Text>),
            /// The image response.
            Image(std::boxed::Box<crate::model::intent::message::Image>),
            /// The quick replies response.
            QuickReplies(std::boxed::Box<crate::model::intent::message::QuickReplies>),
            /// The card response.
            Card(std::boxed::Box<crate::model::intent::message::Card>),
            /// A custom platform-specific response.
            Payload(std::boxed::Box<wkt::Struct>),
            /// The voice and text-only responses for Actions on Google.
            SimpleResponses(std::boxed::Box<crate::model::intent::message::SimpleResponses>),
            /// The basic card response for Actions on Google.
            BasicCard(std::boxed::Box<crate::model::intent::message::BasicCard>),
            /// The suggestion chips for Actions on Google.
            Suggestions(std::boxed::Box<crate::model::intent::message::Suggestions>),
            /// The link out suggestion chip for Actions on Google.
            LinkOutSuggestion(std::boxed::Box<crate::model::intent::message::LinkOutSuggestion>),
            /// The list card response for Actions on Google.
            ListSelect(std::boxed::Box<crate::model::intent::message::ListSelect>),
            /// The carousel card response for Actions on Google.
            CarouselSelect(std::boxed::Box<crate::model::intent::message::CarouselSelect>),
            /// Browse carousel card for Actions on Google.
            BrowseCarouselCard(std::boxed::Box<crate::model::intent::message::BrowseCarouselCard>),
            /// Table card for Actions on Google.
            TableCard(std::boxed::Box<crate::model::intent::message::TableCard>),
            /// The media content card for Actions on Google.
            MediaContent(std::boxed::Box<crate::model::intent::message::MediaContent>),
        }
    }

    /// Represents a single followup intent in the chain.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct FollowupIntentInfo {
        /// The unique identifier of the followup intent.
        /// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub followup_intent_name: std::string::String,

        /// The unique identifier of the followup intent's parent.
        /// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub parent_followup_intent_name: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl FollowupIntentInfo {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [followup_intent_name][crate::model::intent::FollowupIntentInfo::followup_intent_name].
        pub fn set_followup_intent_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.followup_intent_name = v.into();
            self
        }

        /// Sets the value of [parent_followup_intent_name][crate::model::intent::FollowupIntentInfo::parent_followup_intent_name].
        pub fn set_parent_followup_intent_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.parent_followup_intent_name = v.into();
            self
        }
    }

    impl wkt::message::Message for FollowupIntentInfo {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.Intent.FollowupIntentInfo"
        }
    }

    /// Represents the different states that webhooks can be in.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum WebhookState {
        /// Webhook is disabled in the agent and in the intent.
        Unspecified,
        /// Webhook is enabled in the agent and in the intent.
        Enabled,
        /// Webhook is enabled in the agent and in the intent. Also, each slot
        /// filling prompt is forwarded to the webhook.
        EnabledForSlotFilling,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [WebhookState::value] or
        /// [WebhookState::name].
        UnknownValue(webhook_state::UnknownValue),
    }

    #[doc(hidden)]
    pub mod webhook_state {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl WebhookState {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Enabled => std::option::Option::Some(1),
                Self::EnabledForSlotFilling => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("WEBHOOK_STATE_UNSPECIFIED"),
                Self::Enabled => std::option::Option::Some("WEBHOOK_STATE_ENABLED"),
                Self::EnabledForSlotFilling => {
                    std::option::Option::Some("WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING")
                }
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for WebhookState {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for WebhookState {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for WebhookState {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Enabled,
                2 => Self::EnabledForSlotFilling,
                _ => Self::UnknownValue(webhook_state::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for WebhookState {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "WEBHOOK_STATE_UNSPECIFIED" => Self::Unspecified,
                "WEBHOOK_STATE_ENABLED" => Self::Enabled,
                "WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING" => Self::EnabledForSlotFilling,
                _ => Self::UnknownValue(webhook_state::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for WebhookState {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Enabled => serializer.serialize_i32(1),
                Self::EnabledForSlotFilling => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for WebhookState {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<WebhookState>::new(
                ".google.cloud.dialogflow.v2.Intent.WebhookState",
            ))
        }
    }
}

/// The request message for
/// [Intents.ListIntents][google.cloud.dialogflow.v2.Intents.ListIntents].
///
/// [google.cloud.dialogflow.v2.Intents.ListIntents]: crate::client::Intents::list_intents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListIntentsRequest {
    /// Required. The agent to list all intents from.
    /// Format: `projects/<Project ID>/agent` or `projects/<Project
    /// ID>/locations/<Location ID>/agent`.
    ///
    /// Alternatively, you can specify the environment to list intents for.
    /// Format: `projects/<Project ID>/agent/environments/<Environment ID>`
    /// or `projects/<Project ID>/locations/<Location
    /// ID>/agent/environments/<Environment ID>`.
    /// Note: training phrases of the intents will not be returned for non-draft
    /// environment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The language used to access language-specific data.
    /// If not specified, the agent's default language is used.
    /// For more information, see
    /// [Multilingual intent and entity
    /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// Optional. The resource view to apply to the returned intent.
    pub intent_view: crate::model::IntentView,

    /// Optional. The maximum number of items to return in a single page. By
    /// default 100 and at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// Optional. The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListIntentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListIntentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::ListIntentsRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [intent_view][crate::model::ListIntentsRequest::intent_view].
    pub fn set_intent_view<T: std::convert::Into<crate::model::IntentView>>(
        mut self,
        v: T,
    ) -> Self {
        self.intent_view = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListIntentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListIntentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListIntentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListIntentsRequest"
    }
}

/// The response message for
/// [Intents.ListIntents][google.cloud.dialogflow.v2.Intents.ListIntents].
///
/// [google.cloud.dialogflow.v2.Intents.ListIntents]: crate::client::Intents::list_intents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListIntentsResponse {
    /// The list of agent intents. There will be a maximum number of items
    /// returned based on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub intents: std::vec::Vec<crate::model::Intent>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListIntentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListIntentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [intents][crate::model::ListIntentsResponse::intents].
    pub fn set_intents<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Intent>,
    {
        use std::iter::Iterator;
        self.intents = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListIntentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListIntentsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListIntentsResponse {
    type PageItem = crate::model::Intent;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.intents
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Intents.GetIntent][google.cloud.dialogflow.v2.Intents.GetIntent].
///
/// [google.cloud.dialogflow.v2.Intents.GetIntent]: crate::client::Intents::get_intent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetIntentRequest {
    /// Required. The name of the intent.
    /// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. The language used to access language-specific data.
    /// If not specified, the agent's default language is used.
    /// For more information, see
    /// [Multilingual intent and entity
    /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// Optional. The resource view to apply to the returned intent.
    pub intent_view: crate::model::IntentView,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetIntentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetIntentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::GetIntentRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [intent_view][crate::model::GetIntentRequest::intent_view].
    pub fn set_intent_view<T: std::convert::Into<crate::model::IntentView>>(
        mut self,
        v: T,
    ) -> Self {
        self.intent_view = v.into();
        self
    }
}

impl wkt::message::Message for GetIntentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetIntentRequest"
    }
}

/// The request message for
/// [Intents.CreateIntent][google.cloud.dialogflow.v2.Intents.CreateIntent].
///
/// [google.cloud.dialogflow.v2.Intents.CreateIntent]: crate::client::Intents::create_intent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateIntentRequest {
    /// Required. The agent to create a intent for.
    /// Format: `projects/<Project ID>/agent`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The intent to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub intent: std::option::Option<crate::model::Intent>,

    /// Optional. The language used to access language-specific data.
    /// If not specified, the agent's default language is used.
    /// For more information, see
    /// [Multilingual intent and entity
    /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// Optional. The resource view to apply to the returned intent.
    pub intent_view: crate::model::IntentView,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateIntentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateIntentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [intent][crate::model::CreateIntentRequest::intent].
    pub fn set_intent<T: std::convert::Into<std::option::Option<crate::model::Intent>>>(
        mut self,
        v: T,
    ) -> Self {
        self.intent = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::CreateIntentRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [intent_view][crate::model::CreateIntentRequest::intent_view].
    pub fn set_intent_view<T: std::convert::Into<crate::model::IntentView>>(
        mut self,
        v: T,
    ) -> Self {
        self.intent_view = v.into();
        self
    }
}

impl wkt::message::Message for CreateIntentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateIntentRequest"
    }
}

/// The request message for
/// [Intents.UpdateIntent][google.cloud.dialogflow.v2.Intents.UpdateIntent].
///
/// [google.cloud.dialogflow.v2.Intents.UpdateIntent]: crate::client::Intents::update_intent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateIntentRequest {
    /// Required. The intent to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub intent: std::option::Option<crate::model::Intent>,

    /// Optional. The language used to access language-specific data.
    /// If not specified, the agent's default language is used.
    /// For more information, see
    /// [Multilingual intent and entity
    /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// Optional. The mask to control which fields get updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Optional. The resource view to apply to the returned intent.
    pub intent_view: crate::model::IntentView,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateIntentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [intent][crate::model::UpdateIntentRequest::intent].
    pub fn set_intent<T: std::convert::Into<std::option::Option<crate::model::Intent>>>(
        mut self,
        v: T,
    ) -> Self {
        self.intent = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::UpdateIntentRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateIntentRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [intent_view][crate::model::UpdateIntentRequest::intent_view].
    pub fn set_intent_view<T: std::convert::Into<crate::model::IntentView>>(
        mut self,
        v: T,
    ) -> Self {
        self.intent_view = v.into();
        self
    }
}

impl wkt::message::Message for UpdateIntentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.UpdateIntentRequest"
    }
}

/// The request message for
/// [Intents.DeleteIntent][google.cloud.dialogflow.v2.Intents.DeleteIntent].
///
/// [google.cloud.dialogflow.v2.Intents.DeleteIntent]: crate::client::Intents::delete_intent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteIntentRequest {
    /// Required. The name of the intent to delete. If this intent has direct or
    /// indirect followup intents, we also delete them.
    /// Format: `projects/<Project ID>/agent/intents/<Intent ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteIntentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteIntentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteIntentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeleteIntentRequest"
    }
}

#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchUpdateIntentsRequest {
    /// Required. The name of the agent to update or create intents in.
    /// Format: `projects/<Project ID>/agent`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The language used to access language-specific data.
    /// If not specified, the agent's default language is used.
    /// For more information, see
    /// [Multilingual intent and entity
    /// data](https://cloud.google.com/dialogflow/docs/agents-multilingual#intent-entity).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// Optional. The mask to control which fields get updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Optional. The resource view to apply to the returned intent.
    pub intent_view: crate::model::IntentView,

    /// The source of the intent batch.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub intent_batch: std::option::Option<crate::model::batch_update_intents_request::IntentBatch>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BatchUpdateIntentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::BatchUpdateIntentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::BatchUpdateIntentsRequest::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::BatchUpdateIntentsRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [intent_view][crate::model::BatchUpdateIntentsRequest::intent_view].
    pub fn set_intent_view<T: std::convert::Into<crate::model::IntentView>>(
        mut self,
        v: T,
    ) -> Self {
        self.intent_view = v.into();
        self
    }

    /// Sets the value of [intent_batch][crate::model::BatchUpdateIntentsRequest::intent_batch].
    ///
    /// Note that all the setters affecting `intent_batch` are mutually
    /// exclusive.
    pub fn set_intent_batch<
        T: std::convert::Into<
                std::option::Option<crate::model::batch_update_intents_request::IntentBatch>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.intent_batch = v.into();
        self
    }

    /// The value of [intent_batch][crate::model::BatchUpdateIntentsRequest::intent_batch]
    /// if it holds a `IntentBatchUri`, `None` if the field is not set or
    /// holds a different branch.
    pub fn intent_batch_uri(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.intent_batch.as_ref().and_then(|v| match v {
            crate::model::batch_update_intents_request::IntentBatch::IntentBatchUri(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [intent_batch][crate::model::BatchUpdateIntentsRequest::intent_batch]
    /// if it holds a `IntentBatchInline`, `None` if the field is not set or
    /// holds a different branch.
    pub fn intent_batch_inline(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::IntentBatch>> {
        #[allow(unreachable_patterns)]
        self.intent_batch.as_ref().and_then(|v| match v {
            crate::model::batch_update_intents_request::IntentBatch::IntentBatchInline(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [intent_batch][crate::model::BatchUpdateIntentsRequest::intent_batch]
    /// to hold a `IntentBatchUri`.
    ///
    /// Note that all the setters affecting `intent_batch` are
    /// mutually exclusive.
    pub fn set_intent_batch_uri<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.intent_batch = std::option::Option::Some(
            crate::model::batch_update_intents_request::IntentBatch::IntentBatchUri(v.into()),
        );
        self
    }

    /// Sets the value of [intent_batch][crate::model::BatchUpdateIntentsRequest::intent_batch]
    /// to hold a `IntentBatchInline`.
    ///
    /// Note that all the setters affecting `intent_batch` are
    /// mutually exclusive.
    pub fn set_intent_batch_inline<
        T: std::convert::Into<std::boxed::Box<crate::model::IntentBatch>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.intent_batch = std::option::Option::Some(
            crate::model::batch_update_intents_request::IntentBatch::IntentBatchInline(v.into()),
        );
        self
    }
}

impl wkt::message::Message for BatchUpdateIntentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.BatchUpdateIntentsRequest"
    }
}

/// Defines additional types related to [BatchUpdateIntentsRequest].
pub mod batch_update_intents_request {
    #[allow(unused_imports)]
    use super::*;

    /// The source of the intent batch.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum IntentBatch {
        /// The URI to a Google Cloud Storage file containing intents to update or
        /// create. The file format can either be a serialized proto (of IntentBatch
        /// type) or JSON object. Note: The URI must start with "gs://".
        IntentBatchUri(std::string::String),
        /// The collection of intents to update or create.
        IntentBatchInline(std::boxed::Box<crate::model::IntentBatch>),
    }
}

/// The response message for
/// [Intents.BatchUpdateIntents][google.cloud.dialogflow.v2.Intents.BatchUpdateIntents].
///
/// [google.cloud.dialogflow.v2.Intents.BatchUpdateIntents]: crate::client::Intents::batch_update_intents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchUpdateIntentsResponse {
    /// The collection of updated or created intents.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub intents: std::vec::Vec<crate::model::Intent>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BatchUpdateIntentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [intents][crate::model::BatchUpdateIntentsResponse::intents].
    pub fn set_intents<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Intent>,
    {
        use std::iter::Iterator;
        self.intents = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchUpdateIntentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.BatchUpdateIntentsResponse"
    }
}

/// The request message for
/// [Intents.BatchDeleteIntents][google.cloud.dialogflow.v2.Intents.BatchDeleteIntents].
///
/// [google.cloud.dialogflow.v2.Intents.BatchDeleteIntents]: crate::client::Intents::batch_delete_intents
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchDeleteIntentsRequest {
    /// Required. The name of the agent to delete all entities types for. Format:
    /// `projects/<Project ID>/agent`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The collection of intents to delete. Only intent `name` must be
    /// filled in.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub intents: std::vec::Vec<crate::model::Intent>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl BatchDeleteIntentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::BatchDeleteIntentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [intents][crate::model::BatchDeleteIntentsRequest::intents].
    pub fn set_intents<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Intent>,
    {
        use std::iter::Iterator;
        self.intents = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchDeleteIntentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.BatchDeleteIntentsRequest"
    }
}

/// This message is a wrapper around a collection of intents.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct IntentBatch {
    /// A collection of intents.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub intents: std::vec::Vec<crate::model::Intent>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl IntentBatch {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [intents][crate::model::IntentBatch::intents].
    pub fn set_intents<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Intent>,
    {
        use std::iter::Iterator;
        self.intents = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for IntentBatch {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.IntentBatch"
    }
}

/// A knowledge base represents a collection of knowledge documents that you
/// provide to Dialogflow. Your knowledge documents contain information that may
/// be useful during conversations with end-users. Some Dialogflow features use
/// knowledge bases when looking for a response to an end-user input.
///
/// For more information, see the [knowledge base
/// guide](https://cloud.google.com/dialogflow/docs/how/knowledge-bases).
///
/// Note: The `projects.agent.knowledgeBases` resource is deprecated;
/// only use `projects.knowledgeBases`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct KnowledgeBase {
    /// The knowledge base resource name.
    /// The name must be empty when creating a knowledge base.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/knowledgeBases/<Knowledge Base ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The display name of the knowledge base. The name must be 1024
    /// bytes or less; otherwise, the creation request fails.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Language which represents the KnowledgeBase. When the KnowledgeBase is
    /// created/updated, expect this to be present for non en-us languages. When
    /// unspecified, the default language code en-us applies.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl KnowledgeBase {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::KnowledgeBase::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::KnowledgeBase::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::KnowledgeBase::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for KnowledgeBase {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.KnowledgeBase"
    }
}

/// Request message for
/// [KnowledgeBases.ListKnowledgeBases][google.cloud.dialogflow.v2.KnowledgeBases.ListKnowledgeBases].
///
/// [google.cloud.dialogflow.v2.KnowledgeBases.ListKnowledgeBases]: crate::client::KnowledgeBases::list_knowledge_bases
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListKnowledgeBasesRequest {
    /// Required. The project to list of knowledge bases for.
    /// Format: `projects/<Project ID>/locations/<Location ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of items to return in a single page. By
    /// default 10 and at most 100.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// The filter expression used to filter knowledge bases returned by the list
    /// method. The expression has the following syntax:
    ///
    /// \<field\> \<operator\> \<value\> [AND \<field\> \<operator\> \<value\>] ...
    ///
    /// The following fields and operators are supported:
    ///
    /// * display_name with has(:) operator
    /// * language_code with equals(=) operator
    ///
    /// Examples:
    ///
    /// * 'language_code=en-us' matches knowledge bases with en-us language code.
    /// * 'display_name:articles' matches knowledge bases whose display name
    ///   contains "articles".
    /// * 'display_name:"Best Articles"' matches knowledge bases whose display
    ///   name contains "Best Articles".
    /// * 'language_code=en-gb AND display_name=articles' matches all knowledge
    ///   bases whose display name contains "articles" and whose language code is
    ///   "en-gb".
    ///
    /// Note: An empty filter string (i.e. "") is a no-op and will result in no
    /// filtering.
    ///
    /// For more information about filtering, see
    /// [API Filtering](https://aip.dev/160).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListKnowledgeBasesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListKnowledgeBasesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListKnowledgeBasesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListKnowledgeBasesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListKnowledgeBasesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }
}

impl wkt::message::Message for ListKnowledgeBasesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListKnowledgeBasesRequest"
    }
}

/// Response message for
/// [KnowledgeBases.ListKnowledgeBases][google.cloud.dialogflow.v2.KnowledgeBases.ListKnowledgeBases].
///
/// [google.cloud.dialogflow.v2.KnowledgeBases.ListKnowledgeBases]: crate::client::KnowledgeBases::list_knowledge_bases
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListKnowledgeBasesResponse {
    /// The list of knowledge bases.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub knowledge_bases: std::vec::Vec<crate::model::KnowledgeBase>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListKnowledgeBasesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListKnowledgeBasesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [knowledge_bases][crate::model::ListKnowledgeBasesResponse::knowledge_bases].
    pub fn set_knowledge_bases<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::KnowledgeBase>,
    {
        use std::iter::Iterator;
        self.knowledge_bases = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListKnowledgeBasesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListKnowledgeBasesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListKnowledgeBasesResponse {
    type PageItem = crate::model::KnowledgeBase;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.knowledge_bases
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request message for
/// [KnowledgeBases.GetKnowledgeBase][google.cloud.dialogflow.v2.KnowledgeBases.GetKnowledgeBase].
///
/// [google.cloud.dialogflow.v2.KnowledgeBases.GetKnowledgeBase]: crate::client::KnowledgeBases::get_knowledge_base
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetKnowledgeBaseRequest {
    /// Required. The name of the knowledge base to retrieve.
    /// Format `projects/<Project ID>/locations/<Location
    /// ID>/knowledgeBases/<Knowledge Base ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetKnowledgeBaseRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetKnowledgeBaseRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetKnowledgeBaseRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetKnowledgeBaseRequest"
    }
}

/// Request message for
/// [KnowledgeBases.CreateKnowledgeBase][google.cloud.dialogflow.v2.KnowledgeBases.CreateKnowledgeBase].
///
/// [google.cloud.dialogflow.v2.KnowledgeBases.CreateKnowledgeBase]: crate::client::KnowledgeBases::create_knowledge_base
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateKnowledgeBaseRequest {
    /// Required. The project to create a knowledge base for.
    /// Format: `projects/<Project ID>/locations/<Location ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The knowledge base to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub knowledge_base: std::option::Option<crate::model::KnowledgeBase>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateKnowledgeBaseRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateKnowledgeBaseRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [knowledge_base][crate::model::CreateKnowledgeBaseRequest::knowledge_base].
    pub fn set_knowledge_base<
        T: std::convert::Into<std::option::Option<crate::model::KnowledgeBase>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.knowledge_base = v.into();
        self
    }
}

impl wkt::message::Message for CreateKnowledgeBaseRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateKnowledgeBaseRequest"
    }
}

/// Request message for
/// [KnowledgeBases.DeleteKnowledgeBase][google.cloud.dialogflow.v2.KnowledgeBases.DeleteKnowledgeBase].
///
/// [google.cloud.dialogflow.v2.KnowledgeBases.DeleteKnowledgeBase]: crate::client::KnowledgeBases::delete_knowledge_base
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteKnowledgeBaseRequest {
    /// Required. The name of the knowledge base to delete.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/knowledgeBases/<Knowledge Base ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. Force deletes the knowledge base. When set to true, any documents
    /// in the knowledge base are also deleted.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub force: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteKnowledgeBaseRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteKnowledgeBaseRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [force][crate::model::DeleteKnowledgeBaseRequest::force].
    pub fn set_force<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.force = v.into();
        self
    }
}

impl wkt::message::Message for DeleteKnowledgeBaseRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeleteKnowledgeBaseRequest"
    }
}

/// Request message for
/// [KnowledgeBases.UpdateKnowledgeBase][google.cloud.dialogflow.v2.KnowledgeBases.UpdateKnowledgeBase].
///
/// [google.cloud.dialogflow.v2.KnowledgeBases.UpdateKnowledgeBase]: crate::client::KnowledgeBases::update_knowledge_base
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateKnowledgeBaseRequest {
    /// Required. The knowledge base to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub knowledge_base: std::option::Option<crate::model::KnowledgeBase>,

    /// Optional. Not specified means `update all`.
    /// Currently, only `display_name` can be updated, an InvalidArgument will be
    /// returned for attempting to update other fields.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateKnowledgeBaseRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [knowledge_base][crate::model::UpdateKnowledgeBaseRequest::knowledge_base].
    pub fn set_knowledge_base<
        T: std::convert::Into<std::option::Option<crate::model::KnowledgeBase>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.knowledge_base = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateKnowledgeBaseRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateKnowledgeBaseRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.UpdateKnowledgeBaseRequest"
    }
}

/// Represents a conversation participant (human agent, virtual agent, end-user).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Participant {
    /// Optional. The unique identifier of this participant.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/participants/<Participant ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Immutable. The role this participant plays in the conversation. This field
    /// must be set during participant creation and is then immutable.
    pub role: crate::model::participant::Role,

    /// Optional. Label applied to streams representing this participant in SIPREC
    /// XML metadata and SDP. This is used to assign transcriptions from that
    /// media stream to this participant. This field can be updated.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub sip_recording_media_label: std::string::String,

    /// Optional. Obfuscated user id that should be associated with the created
    /// participant.
    ///
    /// You can specify a user id as follows:
    ///
    /// . If you set this field in
    ///   [CreateParticipantRequest][google.cloud.dialogflow.v2.CreateParticipantRequest.participant]
    ///   or
    ///   [UpdateParticipantRequest][google.cloud.dialogflow.v2.UpdateParticipantRequest.participant],
    ///   Dialogflow adds the obfuscated user id with the participant.
    ///
    /// . If you set this field in
    ///   [AnalyzeContent][google.cloud.dialogflow.v2.AnalyzeContentRequest.participant]
    ///   or
    ///   [StreamingAnalyzeContent][google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.participant],
    ///   Dialogflow will update
    ///   [Participant.obfuscated_external_user_id][google.cloud.dialogflow.v2.Participant.obfuscated_external_user_id].
    ///
    ///
    /// Dialogflow returns an error if you try to add a user id for a
    /// non-[END_USER][google.cloud.dialogflow.v2.Participant.Role.END_USER]
    /// participant.
    ///
    /// Dialogflow uses this user id for billing and measurement purposes. For
    /// example, Dialogflow determines whether a user in one conversation returned
    /// in a later conversation.
    ///
    /// Note:
    ///
    /// * Please never pass raw user ids to Dialogflow. Always obfuscate your user
    ///   id first.
    /// * Dialogflow only accepts a UTF-8 encoded string, e.g., a hex digest of a
    ///   hash function like SHA-512.
    /// * The length of the user id must be <= 256 characters.
    ///
    /// [google.cloud.dialogflow.v2.AnalyzeContentRequest.participant]: crate::model::AnalyzeContentRequest::participant
    /// [google.cloud.dialogflow.v2.CreateParticipantRequest.participant]: crate::model::CreateParticipantRequest::participant
    /// [google.cloud.dialogflow.v2.Participant.Role.END_USER]: crate::model::participant::Role::EndUser
    /// [google.cloud.dialogflow.v2.Participant.obfuscated_external_user_id]: crate::model::Participant::obfuscated_external_user_id
    /// [google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.participant]: crate::model::StreamingAnalyzeContentRequest::participant
    /// [google.cloud.dialogflow.v2.UpdateParticipantRequest.participant]: crate::model::UpdateParticipantRequest::participant
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub obfuscated_external_user_id: std::string::String,

    /// Optional. Key-value filters on the metadata of documents returned by
    /// article suggestion. If specified, article suggestion only returns suggested
    /// documents that match all filters in their
    /// [Document.metadata][google.cloud.dialogflow.v2.Document.metadata]. Multiple
    /// values for a metadata key should be concatenated by comma. For example,
    /// filters to match all documents that have 'US' or 'CA' in their market
    /// metadata values and 'agent' in their user metadata values will be
    ///
    /// ```norust
    /// documents_metadata_filters {
    ///   key: "market"
    ///   value: "US,CA"
    /// }
    /// documents_metadata_filters {
    ///   key: "user"
    ///   value: "agent"
    /// }
    /// ```
    ///
    /// [google.cloud.dialogflow.v2.Document.metadata]: crate::model::Document::metadata
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub documents_metadata_filters:
        std::collections::HashMap<std::string::String, std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Participant {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Participant::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [role][crate::model::Participant::role].
    pub fn set_role<T: std::convert::Into<crate::model::participant::Role>>(
        mut self,
        v: T,
    ) -> Self {
        self.role = v.into();
        self
    }

    /// Sets the value of [sip_recording_media_label][crate::model::Participant::sip_recording_media_label].
    pub fn set_sip_recording_media_label<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.sip_recording_media_label = v.into();
        self
    }

    /// Sets the value of [obfuscated_external_user_id][crate::model::Participant::obfuscated_external_user_id].
    pub fn set_obfuscated_external_user_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.obfuscated_external_user_id = v.into();
        self
    }

    /// Sets the value of [documents_metadata_filters][crate::model::Participant::documents_metadata_filters].
    pub fn set_documents_metadata_filters<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.documents_metadata_filters =
            v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Participant {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.Participant"
    }
}

/// Defines additional types related to [Participant].
pub mod participant {
    #[allow(unused_imports)]
    use super::*;

    /// Enumeration of the roles a participant can play in a conversation.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Role {
        /// Participant role not set.
        Unspecified,
        /// Participant is a human agent.
        HumanAgent,
        /// Participant is an automated agent, such as a Dialogflow agent.
        AutomatedAgent,
        /// Participant is an end user that has called or chatted with
        /// Dialogflow services.
        EndUser,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [Role::value] or
        /// [Role::name].
        UnknownValue(role::UnknownValue),
    }

    #[doc(hidden)]
    pub mod role {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl Role {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::HumanAgent => std::option::Option::Some(1),
                Self::AutomatedAgent => std::option::Option::Some(2),
                Self::EndUser => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("ROLE_UNSPECIFIED"),
                Self::HumanAgent => std::option::Option::Some("HUMAN_AGENT"),
                Self::AutomatedAgent => std::option::Option::Some("AUTOMATED_AGENT"),
                Self::EndUser => std::option::Option::Some("END_USER"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for Role {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for Role {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for Role {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::HumanAgent,
                2 => Self::AutomatedAgent,
                3 => Self::EndUser,
                _ => Self::UnknownValue(role::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for Role {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "ROLE_UNSPECIFIED" => Self::Unspecified,
                "HUMAN_AGENT" => Self::HumanAgent,
                "AUTOMATED_AGENT" => Self::AutomatedAgent,
                "END_USER" => Self::EndUser,
                _ => Self::UnknownValue(role::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for Role {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::HumanAgent => serializer.serialize_i32(1),
                Self::AutomatedAgent => serializer.serialize_i32(2),
                Self::EndUser => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for Role {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<Role>::new(
                ".google.cloud.dialogflow.v2.Participant.Role",
            ))
        }
    }
}

/// Represents a message posted into a conversation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Message {
    /// Optional. The unique identifier of the message.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/messages/<Message ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The message content.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub content: std::string::String,

    /// Optional. The message language.
    /// This should be a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt)
    /// language tag. Example: "en-US".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// Output only. The participant that sends this message.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub participant: std::string::String,

    /// Output only. The role of the participant.
    pub participant_role: crate::model::participant::Role,

    /// Output only. The time when the message was created in Contact Center AI.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Optional. The time when the message was sent. For voice messages, this is
    /// the time when an utterance started.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub send_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The annotation for the message.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub message_annotation: std::option::Option<crate::model::MessageAnnotation>,

    /// Output only. The sentiment analysis result for the message.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub sentiment_analysis: std::option::Option<crate::model::SentimentAnalysisResult>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Message {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Message::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [content][crate::model::Message::content].
    pub fn set_content<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.content = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::Message::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [participant][crate::model::Message::participant].
    pub fn set_participant<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.participant = v.into();
        self
    }

    /// Sets the value of [participant_role][crate::model::Message::participant_role].
    pub fn set_participant_role<T: std::convert::Into<crate::model::participant::Role>>(
        mut self,
        v: T,
    ) -> Self {
        self.participant_role = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Message::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [send_time][crate::model::Message::send_time].
    pub fn set_send_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.send_time = v.into();
        self
    }

    /// Sets the value of [message_annotation][crate::model::Message::message_annotation].
    pub fn set_message_annotation<
        T: std::convert::Into<std::option::Option<crate::model::MessageAnnotation>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.message_annotation = v.into();
        self
    }

    /// Sets the value of [sentiment_analysis][crate::model::Message::sentiment_analysis].
    pub fn set_sentiment_analysis<
        T: std::convert::Into<std::option::Option<crate::model::SentimentAnalysisResult>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.sentiment_analysis = v.into();
        self
    }
}

impl wkt::message::Message for Message {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.Message"
    }
}

/// The request message for
/// [Participants.CreateParticipant][google.cloud.dialogflow.v2.Participants.CreateParticipant].
///
/// [google.cloud.dialogflow.v2.Participants.CreateParticipant]: crate::client::Participants::create_participant
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateParticipantRequest {
    /// Required. Resource identifier of the conversation adding the participant.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The participant to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub participant: std::option::Option<crate::model::Participant>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateParticipantRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateParticipantRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [participant][crate::model::CreateParticipantRequest::participant].
    pub fn set_participant<
        T: std::convert::Into<std::option::Option<crate::model::Participant>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.participant = v.into();
        self
    }
}

impl wkt::message::Message for CreateParticipantRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateParticipantRequest"
    }
}

/// The request message for
/// [Participants.GetParticipant][google.cloud.dialogflow.v2.Participants.GetParticipant].
///
/// [google.cloud.dialogflow.v2.Participants.GetParticipant]: crate::client::Participants::get_participant
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetParticipantRequest {
    /// Required. The name of the participant. Format:
    /// `projects/<Project ID>/locations/<Location ID>/conversations/<Conversation
    /// ID>/participants/<Participant ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetParticipantRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetParticipantRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetParticipantRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetParticipantRequest"
    }
}

/// The request message for
/// [Participants.ListParticipants][google.cloud.dialogflow.v2.Participants.ListParticipants].
///
/// [google.cloud.dialogflow.v2.Participants.ListParticipants]: crate::client::Participants::list_participants
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListParticipantsRequest {
    /// Required. The conversation to list all participants from.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of items to return in a single page. By
    /// default 100 and at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// Optional. The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListParticipantsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListParticipantsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListParticipantsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListParticipantsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListParticipantsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListParticipantsRequest"
    }
}

/// The response message for
/// [Participants.ListParticipants][google.cloud.dialogflow.v2.Participants.ListParticipants].
///
/// [google.cloud.dialogflow.v2.Participants.ListParticipants]: crate::client::Participants::list_participants
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListParticipantsResponse {
    /// The list of participants. There is a maximum number of items
    /// returned based on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub participants: std::vec::Vec<crate::model::Participant>,

    /// Token to retrieve the next page of results or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListParticipantsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListParticipantsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [participants][crate::model::ListParticipantsResponse::participants].
    pub fn set_participants<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Participant>,
    {
        use std::iter::Iterator;
        self.participants = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListParticipantsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListParticipantsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListParticipantsResponse {
    type PageItem = crate::model::Participant;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.participants
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Participants.UpdateParticipant][google.cloud.dialogflow.v2.Participants.UpdateParticipant].
///
/// [google.cloud.dialogflow.v2.Participants.UpdateParticipant]: crate::client::Participants::update_participant
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateParticipantRequest {
    /// Required. The participant to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub participant: std::option::Option<crate::model::Participant>,

    /// Required. The mask to specify which fields to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateParticipantRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [participant][crate::model::UpdateParticipantRequest::participant].
    pub fn set_participant<
        T: std::convert::Into<std::option::Option<crate::model::Participant>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.participant = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateParticipantRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateParticipantRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.UpdateParticipantRequest"
    }
}

/// The request message for
/// [Participants.AnalyzeContent][google.cloud.dialogflow.v2.Participants.AnalyzeContent].
///
/// [google.cloud.dialogflow.v2.Participants.AnalyzeContent]: crate::client::Participants::analyze_content
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AnalyzeContentRequest {
    /// Required. The name of the participant this text comes from.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/participants/<Participant ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub participant: std::string::String,

    /// Speech synthesis configuration.
    /// The speech synthesis settings for a virtual agent that may be configured
    /// for the associated conversation profile are not used when calling
    /// AnalyzeContent. If this configuration is not supplied, speech synthesis
    /// is disabled.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub reply_audio_config: std::option::Option<crate::model::OutputAudioConfig>,

    /// Parameters for a Dialogflow virtual-agent query.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_params: std::option::Option<crate::model::QueryParameters>,

    /// Parameters for a human assist query.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub assist_query_params: std::option::Option<crate::model::AssistQueryParameters>,

    /// Additional parameters to be put into Dialogflow CX session parameters. To
    /// remove a parameter from the session, clients should explicitly set the
    /// parameter value to null.
    ///
    /// Note: this field should only be used if you are connecting to a Dialogflow
    /// CX agent.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cx_parameters: std::option::Option<wkt::Struct>,

    /// A unique identifier for this request. Restricted to 36 ASCII characters.
    /// A random UUID is recommended.
    /// This request is only idempotent if a `request_id` is provided.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Required. The input content.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub input: std::option::Option<crate::model::analyze_content_request::Input>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AnalyzeContentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [participant][crate::model::AnalyzeContentRequest::participant].
    pub fn set_participant<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.participant = v.into();
        self
    }

    /// Sets the value of [reply_audio_config][crate::model::AnalyzeContentRequest::reply_audio_config].
    pub fn set_reply_audio_config<
        T: std::convert::Into<std::option::Option<crate::model::OutputAudioConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.reply_audio_config = v.into();
        self
    }

    /// Sets the value of [query_params][crate::model::AnalyzeContentRequest::query_params].
    pub fn set_query_params<
        T: std::convert::Into<std::option::Option<crate::model::QueryParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query_params = v.into();
        self
    }

    /// Sets the value of [assist_query_params][crate::model::AnalyzeContentRequest::assist_query_params].
    pub fn set_assist_query_params<
        T: std::convert::Into<std::option::Option<crate::model::AssistQueryParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.assist_query_params = v.into();
        self
    }

    /// Sets the value of [cx_parameters][crate::model::AnalyzeContentRequest::cx_parameters].
    pub fn set_cx_parameters<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.cx_parameters = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::AnalyzeContentRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [input][crate::model::AnalyzeContentRequest::input].
    ///
    /// Note that all the setters affecting `input` are mutually
    /// exclusive.
    pub fn set_input<
        T: std::convert::Into<std::option::Option<crate::model::analyze_content_request::Input>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.input = v.into();
        self
    }

    /// The value of [input][crate::model::AnalyzeContentRequest::input]
    /// if it holds a `TextInput`, `None` if the field is not set or
    /// holds a different branch.
    pub fn text_input(&self) -> std::option::Option<&std::boxed::Box<crate::model::TextInput>> {
        #[allow(unreachable_patterns)]
        self.input.as_ref().and_then(|v| match v {
            crate::model::analyze_content_request::Input::TextInput(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [input][crate::model::AnalyzeContentRequest::input]
    /// if it holds a `AudioInput`, `None` if the field is not set or
    /// holds a different branch.
    pub fn audio_input(&self) -> std::option::Option<&std::boxed::Box<crate::model::AudioInput>> {
        #[allow(unreachable_patterns)]
        self.input.as_ref().and_then(|v| match v {
            crate::model::analyze_content_request::Input::AudioInput(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [input][crate::model::AnalyzeContentRequest::input]
    /// if it holds a `EventInput`, `None` if the field is not set or
    /// holds a different branch.
    pub fn event_input(&self) -> std::option::Option<&std::boxed::Box<crate::model::EventInput>> {
        #[allow(unreachable_patterns)]
        self.input.as_ref().and_then(|v| match v {
            crate::model::analyze_content_request::Input::EventInput(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [input][crate::model::AnalyzeContentRequest::input]
    /// if it holds a `SuggestionInput`, `None` if the field is not set or
    /// holds a different branch.
    pub fn suggestion_input(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::SuggestionInput>> {
        #[allow(unreachable_patterns)]
        self.input.as_ref().and_then(|v| match v {
            crate::model::analyze_content_request::Input::SuggestionInput(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [input][crate::model::AnalyzeContentRequest::input]
    /// to hold a `TextInput`.
    ///
    /// Note that all the setters affecting `input` are
    /// mutually exclusive.
    pub fn set_text_input<T: std::convert::Into<std::boxed::Box<crate::model::TextInput>>>(
        mut self,
        v: T,
    ) -> Self {
        self.input = std::option::Option::Some(
            crate::model::analyze_content_request::Input::TextInput(v.into()),
        );
        self
    }

    /// Sets the value of [input][crate::model::AnalyzeContentRequest::input]
    /// to hold a `AudioInput`.
    ///
    /// Note that all the setters affecting `input` are
    /// mutually exclusive.
    pub fn set_audio_input<T: std::convert::Into<std::boxed::Box<crate::model::AudioInput>>>(
        mut self,
        v: T,
    ) -> Self {
        self.input = std::option::Option::Some(
            crate::model::analyze_content_request::Input::AudioInput(v.into()),
        );
        self
    }

    /// Sets the value of [input][crate::model::AnalyzeContentRequest::input]
    /// to hold a `EventInput`.
    ///
    /// Note that all the setters affecting `input` are
    /// mutually exclusive.
    pub fn set_event_input<T: std::convert::Into<std::boxed::Box<crate::model::EventInput>>>(
        mut self,
        v: T,
    ) -> Self {
        self.input = std::option::Option::Some(
            crate::model::analyze_content_request::Input::EventInput(v.into()),
        );
        self
    }

    /// Sets the value of [input][crate::model::AnalyzeContentRequest::input]
    /// to hold a `SuggestionInput`.
    ///
    /// Note that all the setters affecting `input` are
    /// mutually exclusive.
    pub fn set_suggestion_input<
        T: std::convert::Into<std::boxed::Box<crate::model::SuggestionInput>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.input = std::option::Option::Some(
            crate::model::analyze_content_request::Input::SuggestionInput(v.into()),
        );
        self
    }
}

impl wkt::message::Message for AnalyzeContentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.AnalyzeContentRequest"
    }
}

/// Defines additional types related to [AnalyzeContentRequest].
pub mod analyze_content_request {
    #[allow(unused_imports)]
    use super::*;

    /// Required. The input content.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Input {
        /// The natural language text to be processed.
        TextInput(std::boxed::Box<crate::model::TextInput>),
        /// The natural language speech audio to be processed.
        AudioInput(std::boxed::Box<crate::model::AudioInput>),
        /// An input event to send to Dialogflow.
        EventInput(std::boxed::Box<crate::model::EventInput>),
        /// An input representing the selection of a suggestion.
        SuggestionInput(std::boxed::Box<crate::model::SuggestionInput>),
    }
}

/// The message in the response that indicates the parameters of DTMF.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DtmfParameters {
    /// Indicates whether DTMF input can be handled in the next request.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub accepts_dtmf_input: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DtmfParameters {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [accepts_dtmf_input][crate::model::DtmfParameters::accepts_dtmf_input].
    pub fn set_accepts_dtmf_input<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.accepts_dtmf_input = v.into();
        self
    }
}

impl wkt::message::Message for DtmfParameters {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DtmfParameters"
    }
}

/// The response message for
/// [Participants.AnalyzeContent][google.cloud.dialogflow.v2.Participants.AnalyzeContent].
///
/// [google.cloud.dialogflow.v2.Participants.AnalyzeContent]: crate::client::Participants::analyze_content
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AnalyzeContentResponse {
    /// The output text content.
    /// This field is set if the automated agent responded with text to show to
    /// the user.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub reply_text: std::string::String,

    /// The audio data bytes encoded as specified in the request.
    /// This field is set if:
    ///
    /// - `reply_audio_config` was specified in the request, or
    /// - The automated agent responded with audio to play to the user. In such
    ///   case, `reply_audio.config` contains settings used to synthesize the
    ///   speech.
    ///
    /// In some scenarios, multiple output audio fields may be present in the
    /// response structure. In these cases, only the top-most-level audio output
    /// has content.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub reply_audio: std::option::Option<crate::model::OutputAudio>,

    /// Only set if a Dialogflow automated agent has responded.
    /// Note that in [AutomatedAgentReply.DetectIntentResponse][],
    /// [Sessions.DetectIntentResponse.output_audio][]
    /// and [Sessions.DetectIntentResponse.output_audio_config][]
    /// are always empty, use
    /// [reply_audio][google.cloud.dialogflow.v2.AnalyzeContentResponse.reply_audio]
    /// instead.
    ///
    /// [google.cloud.dialogflow.v2.AnalyzeContentResponse.reply_audio]: crate::model::AnalyzeContentResponse::reply_audio
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub automated_agent_reply: std::option::Option<crate::model::AutomatedAgentReply>,

    /// Message analyzed by CCAI.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub message: std::option::Option<crate::model::Message>,

    /// The suggestions for most recent human agent. The order is the same as
    /// [HumanAgentAssistantConfig.SuggestionConfig.feature_configs][google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionConfig.feature_configs]
    /// of
    /// [HumanAgentAssistantConfig.human_agent_suggestion_config][google.cloud.dialogflow.v2.HumanAgentAssistantConfig.human_agent_suggestion_config].
    ///
    /// Note that any failure of Agent Assist features will not lead to the overall
    /// failure of an AnalyzeContent API call. Instead, the features will
    /// fail silently with the error field set in the corresponding
    /// SuggestionResult.
    ///
    /// [google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionConfig.feature_configs]: crate::model::human_agent_assistant_config::SuggestionConfig::feature_configs
    /// [google.cloud.dialogflow.v2.HumanAgentAssistantConfig.human_agent_suggestion_config]: crate::model::HumanAgentAssistantConfig::human_agent_suggestion_config
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub human_agent_suggestion_results: std::vec::Vec<crate::model::SuggestionResult>,

    /// The suggestions for end user. The order is the same as
    /// [HumanAgentAssistantConfig.SuggestionConfig.feature_configs][google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionConfig.feature_configs]
    /// of
    /// [HumanAgentAssistantConfig.end_user_suggestion_config][google.cloud.dialogflow.v2.HumanAgentAssistantConfig.end_user_suggestion_config].
    ///
    /// Same as human_agent_suggestion_results, any failure of Agent Assist
    /// features will not lead to the overall failure of an AnalyzeContent API
    /// call. Instead, the features will fail silently with the error field set in
    /// the corresponding SuggestionResult.
    ///
    /// [google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionConfig.feature_configs]: crate::model::human_agent_assistant_config::SuggestionConfig::feature_configs
    /// [google.cloud.dialogflow.v2.HumanAgentAssistantConfig.end_user_suggestion_config]: crate::model::HumanAgentAssistantConfig::end_user_suggestion_config
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub end_user_suggestion_results: std::vec::Vec<crate::model::SuggestionResult>,

    /// Indicates the parameters of DTMF.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub dtmf_parameters: std::option::Option<crate::model::DtmfParameters>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AnalyzeContentResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [reply_text][crate::model::AnalyzeContentResponse::reply_text].
    pub fn set_reply_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.reply_text = v.into();
        self
    }

    /// Sets the value of [reply_audio][crate::model::AnalyzeContentResponse::reply_audio].
    pub fn set_reply_audio<
        T: std::convert::Into<std::option::Option<crate::model::OutputAudio>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.reply_audio = v.into();
        self
    }

    /// Sets the value of [automated_agent_reply][crate::model::AnalyzeContentResponse::automated_agent_reply].
    pub fn set_automated_agent_reply<
        T: std::convert::Into<std::option::Option<crate::model::AutomatedAgentReply>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.automated_agent_reply = v.into();
        self
    }

    /// Sets the value of [message][crate::model::AnalyzeContentResponse::message].
    pub fn set_message<T: std::convert::Into<std::option::Option<crate::model::Message>>>(
        mut self,
        v: T,
    ) -> Self {
        self.message = v.into();
        self
    }

    /// Sets the value of [dtmf_parameters][crate::model::AnalyzeContentResponse::dtmf_parameters].
    pub fn set_dtmf_parameters<
        T: std::convert::Into<std::option::Option<crate::model::DtmfParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.dtmf_parameters = v.into();
        self
    }

    /// Sets the value of [human_agent_suggestion_results][crate::model::AnalyzeContentResponse::human_agent_suggestion_results].
    pub fn set_human_agent_suggestion_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SuggestionResult>,
    {
        use std::iter::Iterator;
        self.human_agent_suggestion_results = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [end_user_suggestion_results][crate::model::AnalyzeContentResponse::end_user_suggestion_results].
    pub fn set_end_user_suggestion_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SuggestionResult>,
    {
        use std::iter::Iterator;
        self.end_user_suggestion_results = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for AnalyzeContentResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.AnalyzeContentResponse"
    }
}

/// The top-level message sent by the client to the
/// [Participants.StreamingAnalyzeContent][google.cloud.dialogflow.v2.Participants.StreamingAnalyzeContent]
/// method.
///
/// Multiple request messages should be sent in order:
///
/// . The first message must contain
///   [participant][google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.participant],
///   [config][google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.config]
///   and optionally
///   [query_params][google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.query_params].
///   If you want to receive an audio response, it should also contain
///   [reply_audio_config][google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.reply_audio_config].
///   The message must not contain
///   [input][google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.input].
///
/// . If
///   [config][google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.config] in
///   the first message
///   was set to
///   [audio_config][google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.audio_config],
///   all subsequent messages must contain
///   [input_audio][google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.input_audio]
///   to continue with Speech recognition. However, note that:
///
///   * Dialogflow will bill you for the audio so far.
///   * Dialogflow discards all Speech recognition results in favor of the
///     text input.
/// . If
///   [StreamingAnalyzeContentRequest.config][google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.config]
///   in the first message was set
///   to
///   [StreamingAnalyzeContentRequest.text_config][google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.text_config],
///   then the second message must contain only
///   [input_text][google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.input_text].
///   Moreover, you must not send more than two messages.
///
///
/// After you sent all input, you must half-close or abort the request stream.
///
/// [google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.audio_config]: crate::model::StreamingAnalyzeContentRequest::config
/// [google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.config]: crate::model::StreamingAnalyzeContentRequest::config
/// [google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.input]: crate::model::StreamingAnalyzeContentRequest::input
/// [google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.input_audio]: crate::model::StreamingAnalyzeContentRequest::input
/// [google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.input_text]: crate::model::StreamingAnalyzeContentRequest::input
/// [google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.participant]: crate::model::StreamingAnalyzeContentRequest::participant
/// [google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.query_params]: crate::model::StreamingAnalyzeContentRequest::query_params
/// [google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.reply_audio_config]: crate::model::StreamingAnalyzeContentRequest::reply_audio_config
/// [google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest.text_config]: crate::model::StreamingAnalyzeContentRequest::config
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StreamingAnalyzeContentRequest {
    /// Required. The name of the participant this text comes from.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/participants/<Participant ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub participant: std::string::String,

    /// Speech synthesis configuration.
    /// The speech synthesis settings for a virtual agent that may be configured
    /// for the associated conversation profile are not used when calling
    /// StreamingAnalyzeContent. If this configuration is not supplied, speech
    /// synthesis is disabled.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub reply_audio_config: std::option::Option<crate::model::OutputAudioConfig>,

    /// Parameters for a Dialogflow virtual-agent query.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_params: std::option::Option<crate::model::QueryParameters>,

    /// Parameters for a human assist query.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub assist_query_params: std::option::Option<crate::model::AssistQueryParameters>,

    /// Additional parameters to be put into Dialogflow CX session parameters. To
    /// remove a parameter from the session, clients should explicitly set the
    /// parameter value to null.
    ///
    /// Note: this field should only be used if you are connecting to a Dialogflow
    /// CX agent.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cx_parameters: std::option::Option<wkt::Struct>,

    /// Optional. Enable full bidirectional streaming. You can keep streaming the
    /// audio until timeout, and there's no need to half close the stream to get
    /// the response.
    ///
    /// Restrictions:
    ///
    /// - Timeout: 3 mins.
    /// - Audio Encoding: only supports
    ///   [AudioEncoding.AUDIO_ENCODING_LINEAR_16][google.cloud.dialogflow.v2.AudioEncoding.AUDIO_ENCODING_LINEAR_16]
    ///   and
    ///   [AudioEncoding.AUDIO_ENCODING_MULAW][google.cloud.dialogflow.v2.AudioEncoding.AUDIO_ENCODING_MULAW]
    /// - Lifecycle: conversation should be in `Assist Stage`, go to
    ///   [Conversations.CreateConversation][google.cloud.dialogflow.v2.Conversations.CreateConversation]
    ///   for more information.
    ///
    /// InvalidArgument Error will be returned if the one of restriction checks
    /// failed.
    ///
    /// You can find more details in
    /// <https://cloud.google.com/agent-assist/docs/extended-streaming>
    ///
    /// [google.cloud.dialogflow.v2.AudioEncoding.AUDIO_ENCODING_LINEAR_16]: crate::model::AudioEncoding::Linear16
    /// [google.cloud.dialogflow.v2.AudioEncoding.AUDIO_ENCODING_MULAW]: crate::model::AudioEncoding::Mulaw
    /// [google.cloud.dialogflow.v2.Conversations.CreateConversation]: crate::client::Conversations::create_conversation
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_extended_streaming: bool,

    /// Optional. Enable partial responses from Dialogflow CX agent. If this flag
    /// is not enabled, response stream still contains only one final response even
    /// if some `Fulfillment`s in Dialogflow CX agent have been configured to
    /// return partial responses.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_partial_automated_agent_reply: bool,

    /// If true, `StreamingAnalyzeContentResponse.debugging_info` will get
    /// populated.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_debugging_info: bool,

    /// The input config.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub config: std::option::Option<crate::model::streaming_analyze_content_request::Config>,

    /// The input.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub input: std::option::Option<crate::model::streaming_analyze_content_request::Input>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl StreamingAnalyzeContentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [participant][crate::model::StreamingAnalyzeContentRequest::participant].
    pub fn set_participant<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.participant = v.into();
        self
    }

    /// Sets the value of [reply_audio_config][crate::model::StreamingAnalyzeContentRequest::reply_audio_config].
    pub fn set_reply_audio_config<
        T: std::convert::Into<std::option::Option<crate::model::OutputAudioConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.reply_audio_config = v.into();
        self
    }

    /// Sets the value of [query_params][crate::model::StreamingAnalyzeContentRequest::query_params].
    pub fn set_query_params<
        T: std::convert::Into<std::option::Option<crate::model::QueryParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query_params = v.into();
        self
    }

    /// Sets the value of [assist_query_params][crate::model::StreamingAnalyzeContentRequest::assist_query_params].
    pub fn set_assist_query_params<
        T: std::convert::Into<std::option::Option<crate::model::AssistQueryParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.assist_query_params = v.into();
        self
    }

    /// Sets the value of [cx_parameters][crate::model::StreamingAnalyzeContentRequest::cx_parameters].
    pub fn set_cx_parameters<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.cx_parameters = v.into();
        self
    }

    /// Sets the value of [enable_extended_streaming][crate::model::StreamingAnalyzeContentRequest::enable_extended_streaming].
    pub fn set_enable_extended_streaming<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_extended_streaming = v.into();
        self
    }

    /// Sets the value of [enable_partial_automated_agent_reply][crate::model::StreamingAnalyzeContentRequest::enable_partial_automated_agent_reply].
    pub fn set_enable_partial_automated_agent_reply<T: std::convert::Into<bool>>(
        mut self,
        v: T,
    ) -> Self {
        self.enable_partial_automated_agent_reply = v.into();
        self
    }

    /// Sets the value of [enable_debugging_info][crate::model::StreamingAnalyzeContentRequest::enable_debugging_info].
    pub fn set_enable_debugging_info<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_debugging_info = v.into();
        self
    }

    /// Sets the value of [config][crate::model::StreamingAnalyzeContentRequest::config].
    ///
    /// Note that all the setters affecting `config` are mutually
    /// exclusive.
    pub fn set_config<
        T: std::convert::Into<
                std::option::Option<crate::model::streaming_analyze_content_request::Config>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.config = v.into();
        self
    }

    /// The value of [config][crate::model::StreamingAnalyzeContentRequest::config]
    /// if it holds a `AudioConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn audio_config(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::InputAudioConfig>> {
        #[allow(unreachable_patterns)]
        self.config.as_ref().and_then(|v| match v {
            crate::model::streaming_analyze_content_request::Config::AudioConfig(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [config][crate::model::StreamingAnalyzeContentRequest::config]
    /// if it holds a `TextConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn text_config(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::InputTextConfig>> {
        #[allow(unreachable_patterns)]
        self.config.as_ref().and_then(|v| match v {
            crate::model::streaming_analyze_content_request::Config::TextConfig(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [config][crate::model::StreamingAnalyzeContentRequest::config]
    /// to hold a `AudioConfig`.
    ///
    /// Note that all the setters affecting `config` are
    /// mutually exclusive.
    pub fn set_audio_config<
        T: std::convert::Into<std::boxed::Box<crate::model::InputAudioConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.config = std::option::Option::Some(
            crate::model::streaming_analyze_content_request::Config::AudioConfig(v.into()),
        );
        self
    }

    /// Sets the value of [config][crate::model::StreamingAnalyzeContentRequest::config]
    /// to hold a `TextConfig`.
    ///
    /// Note that all the setters affecting `config` are
    /// mutually exclusive.
    pub fn set_text_config<
        T: std::convert::Into<std::boxed::Box<crate::model::InputTextConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.config = std::option::Option::Some(
            crate::model::streaming_analyze_content_request::Config::TextConfig(v.into()),
        );
        self
    }

    /// Sets the value of [input][crate::model::StreamingAnalyzeContentRequest::input].
    ///
    /// Note that all the setters affecting `input` are mutually
    /// exclusive.
    pub fn set_input<
        T: std::convert::Into<
                std::option::Option<crate::model::streaming_analyze_content_request::Input>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.input = v.into();
        self
    }

    /// The value of [input][crate::model::StreamingAnalyzeContentRequest::input]
    /// if it holds a `InputAudio`, `None` if the field is not set or
    /// holds a different branch.
    pub fn input_audio(&self) -> std::option::Option<&::bytes::Bytes> {
        #[allow(unreachable_patterns)]
        self.input.as_ref().and_then(|v| match v {
            crate::model::streaming_analyze_content_request::Input::InputAudio(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [input][crate::model::StreamingAnalyzeContentRequest::input]
    /// if it holds a `InputText`, `None` if the field is not set or
    /// holds a different branch.
    pub fn input_text(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.input.as_ref().and_then(|v| match v {
            crate::model::streaming_analyze_content_request::Input::InputText(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [input][crate::model::StreamingAnalyzeContentRequest::input]
    /// if it holds a `InputDtmf`, `None` if the field is not set or
    /// holds a different branch.
    pub fn input_dtmf(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::TelephonyDtmfEvents>> {
        #[allow(unreachable_patterns)]
        self.input.as_ref().and_then(|v| match v {
            crate::model::streaming_analyze_content_request::Input::InputDtmf(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [input][crate::model::StreamingAnalyzeContentRequest::input]
    /// to hold a `InputAudio`.
    ///
    /// Note that all the setters affecting `input` are
    /// mutually exclusive.
    pub fn set_input_audio<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.input = std::option::Option::Some(
            crate::model::streaming_analyze_content_request::Input::InputAudio(v.into()),
        );
        self
    }

    /// Sets the value of [input][crate::model::StreamingAnalyzeContentRequest::input]
    /// to hold a `InputText`.
    ///
    /// Note that all the setters affecting `input` are
    /// mutually exclusive.
    pub fn set_input_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.input = std::option::Option::Some(
            crate::model::streaming_analyze_content_request::Input::InputText(v.into()),
        );
        self
    }

    /// Sets the value of [input][crate::model::StreamingAnalyzeContentRequest::input]
    /// to hold a `InputDtmf`.
    ///
    /// Note that all the setters affecting `input` are
    /// mutually exclusive.
    pub fn set_input_dtmf<
        T: std::convert::Into<std::boxed::Box<crate::model::TelephonyDtmfEvents>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.input = std::option::Option::Some(
            crate::model::streaming_analyze_content_request::Input::InputDtmf(v.into()),
        );
        self
    }
}

impl wkt::message::Message for StreamingAnalyzeContentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.StreamingAnalyzeContentRequest"
    }
}

/// Defines additional types related to [StreamingAnalyzeContentRequest].
pub mod streaming_analyze_content_request {
    #[allow(unused_imports)]
    use super::*;

    /// The input config.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Config {
        /// Instructs the speech recognizer how to process the speech audio.
        AudioConfig(std::boxed::Box<crate::model::InputAudioConfig>),
        /// The natural language text to be processed.
        TextConfig(std::boxed::Box<crate::model::InputTextConfig>),
    }

    /// The input.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Input {
        /// The input audio content to be recognized. Must be sent if `audio_config`
        /// is set in the first message. The complete audio over all streaming
        /// messages must not exceed 1 minute.
        InputAudio(::bytes::Bytes),
        /// The UTF-8 encoded natural language text to be processed. Must be sent if
        /// `text_config` is set in the first message. Text length must not exceed
        /// 256 bytes for virtual agent interactions. The `input_text` field can be
        /// only sent once, and would cancel the speech recognition if any ongoing.
        InputText(std::string::String),
        /// The DTMF digits used to invoke intent and fill in parameter value.
        ///
        /// This input is ignored if the previous response indicated that DTMF input
        /// is not accepted.
        InputDtmf(std::boxed::Box<crate::model::TelephonyDtmfEvents>),
    }
}

/// The top-level message returned from the `StreamingAnalyzeContent` method.
///
/// Multiple response messages can be returned in order:
///
/// . If the input was set to streaming audio, the first one or more messages
///   contain `recognition_result`. Each `recognition_result` represents a more
///   complete transcript of what the user said. The last `recognition_result`
///   has `is_final` set to `true`.
///
/// . In virtual agent stage: if `enable_partial_automated_agent_reply` is
///   true, the following N (currently 1 <= N <= 4) messages
///   contain `automated_agent_reply` and optionally `reply_audio`
///   returned by the virtual agent. The first (N-1)
///   `automated_agent_reply`s will have `automated_agent_reply_type` set to
///   `PARTIAL`. The last `automated_agent_reply` has
///   `automated_agent_reply_type` set to `FINAL`.
///   If `enable_partial_automated_agent_reply` is not enabled, response stream
///   only contains the final reply.
///
/// . In human assist stage: the following N (N >= 1) messages contain
///   `human_agent_suggestion_results`, `end_user_suggestion_results` or
///   `message`.
///
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StreamingAnalyzeContentResponse {
    /// The result of speech recognition.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub recognition_result: std::option::Option<crate::model::StreamingRecognitionResult>,

    /// The output text content.
    /// This field is set if an automated agent responded with a text for the user.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub reply_text: std::string::String,

    /// The audio data bytes encoded as specified in the request.
    /// This field is set if:
    ///
    /// - The `reply_audio_config` field is specified in the request.
    /// - The automated agent, which this output comes from, responded with audio.
    ///   In such case, the `reply_audio.config` field contains settings used to
    ///   synthesize the speech.
    ///
    /// In some scenarios, multiple output audio fields may be present in the
    /// response structure. In these cases, only the top-most-level audio output
    /// has content.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub reply_audio: std::option::Option<crate::model::OutputAudio>,

    /// Note that in [AutomatedAgentReply.DetectIntentResponse][],
    /// [Sessions.DetectIntentResponse.output_audio][]
    /// and [Sessions.DetectIntentResponse.output_audio_config][]
    /// are always empty, use
    /// [reply_audio][google.cloud.dialogflow.v2.StreamingAnalyzeContentResponse.reply_audio]
    /// instead.
    ///
    /// [google.cloud.dialogflow.v2.StreamingAnalyzeContentResponse.reply_audio]: crate::model::StreamingAnalyzeContentResponse::reply_audio
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub automated_agent_reply: std::option::Option<crate::model::AutomatedAgentReply>,

    /// Message analyzed by CCAI.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub message: std::option::Option<crate::model::Message>,

    /// The suggestions for most recent human agent. The order is the same as
    /// [HumanAgentAssistantConfig.SuggestionConfig.feature_configs][google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionConfig.feature_configs]
    /// of
    /// [HumanAgentAssistantConfig.human_agent_suggestion_config][google.cloud.dialogflow.v2.HumanAgentAssistantConfig.human_agent_suggestion_config].
    ///
    /// [google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionConfig.feature_configs]: crate::model::human_agent_assistant_config::SuggestionConfig::feature_configs
    /// [google.cloud.dialogflow.v2.HumanAgentAssistantConfig.human_agent_suggestion_config]: crate::model::HumanAgentAssistantConfig::human_agent_suggestion_config
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub human_agent_suggestion_results: std::vec::Vec<crate::model::SuggestionResult>,

    /// The suggestions for end user. The order is the same as
    /// [HumanAgentAssistantConfig.SuggestionConfig.feature_configs][google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionConfig.feature_configs]
    /// of
    /// [HumanAgentAssistantConfig.end_user_suggestion_config][google.cloud.dialogflow.v2.HumanAgentAssistantConfig.end_user_suggestion_config].
    ///
    /// [google.cloud.dialogflow.v2.HumanAgentAssistantConfig.SuggestionConfig.feature_configs]: crate::model::human_agent_assistant_config::SuggestionConfig::feature_configs
    /// [google.cloud.dialogflow.v2.HumanAgentAssistantConfig.end_user_suggestion_config]: crate::model::HumanAgentAssistantConfig::end_user_suggestion_config
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub end_user_suggestion_results: std::vec::Vec<crate::model::SuggestionResult>,

    /// Indicates the parameters of DTMF.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub dtmf_parameters: std::option::Option<crate::model::DtmfParameters>,

    /// Debugging info that would get populated when
    /// `StreamingAnalyzeContentRequest.enable_debugging_info` is set to true.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub debugging_info: std::option::Option<crate::model::CloudConversationDebuggingInfo>,

    /// The name of the actual Cloud speech model used for speech recognition.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub speech_model: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl StreamingAnalyzeContentResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [recognition_result][crate::model::StreamingAnalyzeContentResponse::recognition_result].
    pub fn set_recognition_result<
        T: std::convert::Into<std::option::Option<crate::model::StreamingRecognitionResult>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.recognition_result = v.into();
        self
    }

    /// Sets the value of [reply_text][crate::model::StreamingAnalyzeContentResponse::reply_text].
    pub fn set_reply_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.reply_text = v.into();
        self
    }

    /// Sets the value of [reply_audio][crate::model::StreamingAnalyzeContentResponse::reply_audio].
    pub fn set_reply_audio<
        T: std::convert::Into<std::option::Option<crate::model::OutputAudio>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.reply_audio = v.into();
        self
    }

    /// Sets the value of [automated_agent_reply][crate::model::StreamingAnalyzeContentResponse::automated_agent_reply].
    pub fn set_automated_agent_reply<
        T: std::convert::Into<std::option::Option<crate::model::AutomatedAgentReply>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.automated_agent_reply = v.into();
        self
    }

    /// Sets the value of [message][crate::model::StreamingAnalyzeContentResponse::message].
    pub fn set_message<T: std::convert::Into<std::option::Option<crate::model::Message>>>(
        mut self,
        v: T,
    ) -> Self {
        self.message = v.into();
        self
    }

    /// Sets the value of [dtmf_parameters][crate::model::StreamingAnalyzeContentResponse::dtmf_parameters].
    pub fn set_dtmf_parameters<
        T: std::convert::Into<std::option::Option<crate::model::DtmfParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.dtmf_parameters = v.into();
        self
    }

    /// Sets the value of [debugging_info][crate::model::StreamingAnalyzeContentResponse::debugging_info].
    pub fn set_debugging_info<
        T: std::convert::Into<std::option::Option<crate::model::CloudConversationDebuggingInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.debugging_info = v.into();
        self
    }

    /// Sets the value of [speech_model][crate::model::StreamingAnalyzeContentResponse::speech_model].
    pub fn set_speech_model<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.speech_model = v.into();
        self
    }

    /// Sets the value of [human_agent_suggestion_results][crate::model::StreamingAnalyzeContentResponse::human_agent_suggestion_results].
    pub fn set_human_agent_suggestion_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SuggestionResult>,
    {
        use std::iter::Iterator;
        self.human_agent_suggestion_results = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [end_user_suggestion_results][crate::model::StreamingAnalyzeContentResponse::end_user_suggestion_results].
    pub fn set_end_user_suggestion_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SuggestionResult>,
    {
        use std::iter::Iterator;
        self.end_user_suggestion_results = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for StreamingAnalyzeContentResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.StreamingAnalyzeContentResponse"
    }
}

/// The request message for
/// [Participants.SuggestArticles][google.cloud.dialogflow.v2.Participants.SuggestArticles].
///
/// [google.cloud.dialogflow.v2.Participants.SuggestArticles]: crate::client::Participants::suggest_articles
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SuggestArticlesRequest {
    /// Required. The name of the participant to fetch suggestion for.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/participants/<Participant ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The name of the latest conversation message to compile suggestion
    /// for. If empty, it will be the latest message of the conversation.
    ///
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/messages/<Message ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub latest_message: std::string::String,

    /// Optional. Max number of messages prior to and including
    /// [latest_message][google.cloud.dialogflow.v2.SuggestArticlesRequest.latest_message]
    /// to use as context when compiling the suggestion. By default 20 and at
    /// most 50.
    ///
    /// [google.cloud.dialogflow.v2.SuggestArticlesRequest.latest_message]: crate::model::SuggestArticlesRequest::latest_message
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub context_size: i32,

    /// Parameters for a human assist query.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub assist_query_params: std::option::Option<crate::model::AssistQueryParameters>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SuggestArticlesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::SuggestArticlesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [latest_message][crate::model::SuggestArticlesRequest::latest_message].
    pub fn set_latest_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.latest_message = v.into();
        self
    }

    /// Sets the value of [context_size][crate::model::SuggestArticlesRequest::context_size].
    pub fn set_context_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.context_size = v.into();
        self
    }

    /// Sets the value of [assist_query_params][crate::model::SuggestArticlesRequest::assist_query_params].
    pub fn set_assist_query_params<
        T: std::convert::Into<std::option::Option<crate::model::AssistQueryParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.assist_query_params = v.into();
        self
    }
}

impl wkt::message::Message for SuggestArticlesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SuggestArticlesRequest"
    }
}

/// The response message for
/// [Participants.SuggestArticles][google.cloud.dialogflow.v2.Participants.SuggestArticles].
///
/// [google.cloud.dialogflow.v2.Participants.SuggestArticles]: crate::client::Participants::suggest_articles
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SuggestArticlesResponse {
    /// Articles ordered by score in descending order.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub article_answers: std::vec::Vec<crate::model::ArticleAnswer>,

    /// The name of the latest conversation message used to compile
    /// suggestion for.
    ///
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/messages/<Message ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub latest_message: std::string::String,

    /// Number of messages prior to and including
    /// [latest_message][google.cloud.dialogflow.v2.SuggestArticlesResponse.latest_message]
    /// to compile the suggestion. It may be smaller than the
    /// [SuggestArticlesRequest.context_size][google.cloud.dialogflow.v2.SuggestArticlesRequest.context_size]
    /// field in the request if there aren't that many messages in the
    /// conversation.
    ///
    /// [google.cloud.dialogflow.v2.SuggestArticlesRequest.context_size]: crate::model::SuggestArticlesRequest::context_size
    /// [google.cloud.dialogflow.v2.SuggestArticlesResponse.latest_message]: crate::model::SuggestArticlesResponse::latest_message
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub context_size: i32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SuggestArticlesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [latest_message][crate::model::SuggestArticlesResponse::latest_message].
    pub fn set_latest_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.latest_message = v.into();
        self
    }

    /// Sets the value of [context_size][crate::model::SuggestArticlesResponse::context_size].
    pub fn set_context_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.context_size = v.into();
        self
    }

    /// Sets the value of [article_answers][crate::model::SuggestArticlesResponse::article_answers].
    pub fn set_article_answers<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ArticleAnswer>,
    {
        use std::iter::Iterator;
        self.article_answers = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SuggestArticlesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SuggestArticlesResponse"
    }
}

/// The request message for
/// [Participants.SuggestFaqAnswers][google.cloud.dialogflow.v2.Participants.SuggestFaqAnswers].
///
/// [google.cloud.dialogflow.v2.Participants.SuggestFaqAnswers]: crate::client::Participants::suggest_faq_answers
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SuggestFaqAnswersRequest {
    /// Required. The name of the participant to fetch suggestion for.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/participants/<Participant ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The name of the latest conversation message to compile suggestion
    /// for. If empty, it will be the latest message of the conversation.
    ///
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/messages/<Message ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub latest_message: std::string::String,

    /// Optional. Max number of messages prior to and including
    /// [latest_message] to use as context when compiling the
    /// suggestion. By default 20 and at most 50.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub context_size: i32,

    /// Parameters for a human assist query.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub assist_query_params: std::option::Option<crate::model::AssistQueryParameters>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SuggestFaqAnswersRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::SuggestFaqAnswersRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [latest_message][crate::model::SuggestFaqAnswersRequest::latest_message].
    pub fn set_latest_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.latest_message = v.into();
        self
    }

    /// Sets the value of [context_size][crate::model::SuggestFaqAnswersRequest::context_size].
    pub fn set_context_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.context_size = v.into();
        self
    }

    /// Sets the value of [assist_query_params][crate::model::SuggestFaqAnswersRequest::assist_query_params].
    pub fn set_assist_query_params<
        T: std::convert::Into<std::option::Option<crate::model::AssistQueryParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.assist_query_params = v.into();
        self
    }
}

impl wkt::message::Message for SuggestFaqAnswersRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SuggestFaqAnswersRequest"
    }
}

/// The request message for
/// [Participants.SuggestFaqAnswers][google.cloud.dialogflow.v2.Participants.SuggestFaqAnswers].
///
/// [google.cloud.dialogflow.v2.Participants.SuggestFaqAnswers]: crate::client::Participants::suggest_faq_answers
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SuggestFaqAnswersResponse {
    /// Answers extracted from FAQ documents.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub faq_answers: std::vec::Vec<crate::model::FaqAnswer>,

    /// The name of the latest conversation message used to compile
    /// suggestion for.
    ///
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/messages/<Message ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub latest_message: std::string::String,

    /// Number of messages prior to and including
    /// [latest_message][google.cloud.dialogflow.v2.SuggestFaqAnswersResponse.latest_message]
    /// to compile the suggestion. It may be smaller than the
    /// [SuggestFaqAnswersRequest.context_size][google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.context_size]
    /// field in the request if there aren't that many messages in the
    /// conversation.
    ///
    /// [google.cloud.dialogflow.v2.SuggestFaqAnswersRequest.context_size]: crate::model::SuggestFaqAnswersRequest::context_size
    /// [google.cloud.dialogflow.v2.SuggestFaqAnswersResponse.latest_message]: crate::model::SuggestFaqAnswersResponse::latest_message
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub context_size: i32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SuggestFaqAnswersResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [latest_message][crate::model::SuggestFaqAnswersResponse::latest_message].
    pub fn set_latest_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.latest_message = v.into();
        self
    }

    /// Sets the value of [context_size][crate::model::SuggestFaqAnswersResponse::context_size].
    pub fn set_context_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.context_size = v.into();
        self
    }

    /// Sets the value of [faq_answers][crate::model::SuggestFaqAnswersResponse::faq_answers].
    pub fn set_faq_answers<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::FaqAnswer>,
    {
        use std::iter::Iterator;
        self.faq_answers = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SuggestFaqAnswersResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SuggestFaqAnswersResponse"
    }
}

/// The response message for
/// [Conversations.GenerateSuggestions][google.cloud.dialogflow.v2.Conversations.GenerateSuggestions].
///
/// [google.cloud.dialogflow.v2.Conversations.GenerateSuggestions]: crate::client::Conversations::generate_suggestions
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GenerateSuggestionsResponse {
    /// The answers generated for the conversation based on context.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub generator_suggestion_answers:
        std::vec::Vec<crate::model::generate_suggestions_response::GeneratorSuggestionAnswer>,

    /// The name of the latest conversation message used as context for
    /// compiling suggestion.
    ///
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/messages/<Message ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub latest_message: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GenerateSuggestionsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [latest_message][crate::model::GenerateSuggestionsResponse::latest_message].
    pub fn set_latest_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.latest_message = v.into();
        self
    }

    /// Sets the value of [generator_suggestion_answers][crate::model::GenerateSuggestionsResponse::generator_suggestion_answers].
    pub fn set_generator_suggestion_answers<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<
                crate::model::generate_suggestions_response::GeneratorSuggestionAnswer,
            >,
    {
        use std::iter::Iterator;
        self.generator_suggestion_answers = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for GenerateSuggestionsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GenerateSuggestionsResponse"
    }
}

/// Defines additional types related to [GenerateSuggestionsResponse].
pub mod generate_suggestions_response {
    #[allow(unused_imports)]
    use super::*;

    /// A GeneratorSuggestion answer.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct GeneratorSuggestionAnswer {
        /// Suggestion details.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub generator_suggestion: std::option::Option<crate::model::GeneratorSuggestion>,

        /// The name of the generator used to generate this suggestion. Format:
        /// `projects/<Project ID>/locations/<Location ID>/generators/<Generator
        /// ID>`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub source_generator: std::string::String,

        /// Answer record that uniquely identifies the suggestion. This can be used
        /// to provide suggestion feedback.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub answer_record: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl GeneratorSuggestionAnswer {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [generator_suggestion][crate::model::generate_suggestions_response::GeneratorSuggestionAnswer::generator_suggestion].
        pub fn set_generator_suggestion<
            T: std::convert::Into<std::option::Option<crate::model::GeneratorSuggestion>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.generator_suggestion = v.into();
            self
        }

        /// Sets the value of [source_generator][crate::model::generate_suggestions_response::GeneratorSuggestionAnswer::source_generator].
        pub fn set_source_generator<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.source_generator = v.into();
            self
        }

        /// Sets the value of [answer_record][crate::model::generate_suggestions_response::GeneratorSuggestionAnswer::answer_record].
        pub fn set_answer_record<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.answer_record = v.into();
            self
        }
    }

    impl wkt::message::Message for GeneratorSuggestionAnswer {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.GenerateSuggestionsResponse.GeneratorSuggestionAnswer"
        }
    }
}

/// The request message for
/// [Participants.SuggestSmartReplies][google.cloud.dialogflow.v2.Participants.SuggestSmartReplies].
///
/// [google.cloud.dialogflow.v2.Participants.SuggestSmartReplies]: crate::client::Participants::suggest_smart_replies
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SuggestSmartRepliesRequest {
    /// Required. The name of the participant to fetch suggestion for.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/participants/<Participant ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The current natural language text segment to compile suggestion
    /// for. This provides a way for user to get follow up smart reply suggestion
    /// after a smart reply selection, without sending a text message.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub current_text_input: std::option::Option<crate::model::TextInput>,

    /// The name of the latest conversation message to compile suggestion
    /// for. If empty, it will be the latest message of the conversation.
    ///
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/messages/<Message ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub latest_message: std::string::String,

    /// Max number of messages prior to and including
    /// [latest_message] to use as context when compiling the
    /// suggestion. By default 20 and at most 50.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub context_size: i32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SuggestSmartRepliesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::SuggestSmartRepliesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [current_text_input][crate::model::SuggestSmartRepliesRequest::current_text_input].
    pub fn set_current_text_input<
        T: std::convert::Into<std::option::Option<crate::model::TextInput>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.current_text_input = v.into();
        self
    }

    /// Sets the value of [latest_message][crate::model::SuggestSmartRepliesRequest::latest_message].
    pub fn set_latest_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.latest_message = v.into();
        self
    }

    /// Sets the value of [context_size][crate::model::SuggestSmartRepliesRequest::context_size].
    pub fn set_context_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.context_size = v.into();
        self
    }
}

impl wkt::message::Message for SuggestSmartRepliesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SuggestSmartRepliesRequest"
    }
}

/// The response message for
/// [Participants.SuggestSmartReplies][google.cloud.dialogflow.v2.Participants.SuggestSmartReplies].
///
/// [google.cloud.dialogflow.v2.Participants.SuggestSmartReplies]: crate::client::Participants::suggest_smart_replies
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SuggestSmartRepliesResponse {
    /// Output only. Multiple reply options provided by smart reply service. The
    /// order is based on the rank of the model prediction.
    /// The maximum number of the returned replies is set in SmartReplyConfig.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub smart_reply_answers: std::vec::Vec<crate::model::SmartReplyAnswer>,

    /// The name of the latest conversation message used to compile
    /// suggestion for.
    ///
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/messages/<Message ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub latest_message: std::string::String,

    /// Number of messages prior to and including
    /// [latest_message][google.cloud.dialogflow.v2.SuggestSmartRepliesResponse.latest_message]
    /// to compile the suggestion. It may be smaller than the
    /// [SuggestSmartRepliesRequest.context_size][google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.context_size]
    /// field in the request if there aren't that many messages in the
    /// conversation.
    ///
    /// [google.cloud.dialogflow.v2.SuggestSmartRepliesRequest.context_size]: crate::model::SuggestSmartRepliesRequest::context_size
    /// [google.cloud.dialogflow.v2.SuggestSmartRepliesResponse.latest_message]: crate::model::SuggestSmartRepliesResponse::latest_message
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub context_size: i32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SuggestSmartRepliesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [latest_message][crate::model::SuggestSmartRepliesResponse::latest_message].
    pub fn set_latest_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.latest_message = v.into();
        self
    }

    /// Sets the value of [context_size][crate::model::SuggestSmartRepliesResponse::context_size].
    pub fn set_context_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.context_size = v.into();
        self
    }

    /// Sets the value of [smart_reply_answers][crate::model::SuggestSmartRepliesResponse::smart_reply_answers].
    pub fn set_smart_reply_answers<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SmartReplyAnswer>,
    {
        use std::iter::Iterator;
        self.smart_reply_answers = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SuggestSmartRepliesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SuggestSmartRepliesResponse"
    }
}

/// Represents the natural language speech audio to be processed.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AudioInput {
    /// Required. Instructs the speech recognizer how to process the speech audio.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub config: std::option::Option<crate::model::InputAudioConfig>,

    /// Required. The natural language speech audio to be processed.
    /// A single request can contain up to 2 minutes of speech audio data.
    /// The transcribed text cannot contain more than 256 bytes for virtual agent
    /// interactions.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub audio: ::bytes::Bytes,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AudioInput {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [config][crate::model::AudioInput::config].
    pub fn set_config<
        T: std::convert::Into<std::option::Option<crate::model::InputAudioConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.config = v.into();
        self
    }

    /// Sets the value of [audio][crate::model::AudioInput::audio].
    pub fn set_audio<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.audio = v.into();
        self
    }
}

impl wkt::message::Message for AudioInput {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.AudioInput"
    }
}

/// Represents the natural language speech audio to be played to the end user.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OutputAudio {
    /// Instructs the speech synthesizer how to generate the speech
    /// audio.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub config: std::option::Option<crate::model::OutputAudioConfig>,

    /// The natural language speech audio.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub audio: ::bytes::Bytes,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl OutputAudio {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [config][crate::model::OutputAudio::config].
    pub fn set_config<
        T: std::convert::Into<std::option::Option<crate::model::OutputAudioConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.config = v.into();
        self
    }

    /// Sets the value of [audio][crate::model::OutputAudio::audio].
    pub fn set_audio<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.audio = v.into();
        self
    }
}

impl wkt::message::Message for OutputAudio {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.OutputAudio"
    }
}

/// Represents a response from an automated agent.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AutomatedAgentReply {
    /// Response of the Dialogflow
    /// [Sessions.DetectIntent][google.cloud.dialogflow.v2.Sessions.DetectIntent]
    /// call.
    ///
    /// [google.cloud.dialogflow.v2.Sessions.DetectIntent]: crate::client::Sessions::detect_intent
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub detect_intent_response: std::option::Option<crate::model::DetectIntentResponse>,

    /// AutomatedAgentReply type.
    pub automated_agent_reply_type: crate::model::automated_agent_reply::AutomatedAgentReplyType,

    /// Indicates whether the partial automated agent reply is interruptible when a
    /// later reply message arrives. e.g. if the agent specified some music as
    /// partial response, it can be cancelled.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub allow_cancellation: bool,

    /// The unique identifier of the current Dialogflow CX conversation page.
    /// Format: `projects/<Project ID>/locations/<Location ID>/agents/<Agent
    /// ID>/flows/<Flow ID>/pages/<Page ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub cx_current_page: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AutomatedAgentReply {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [detect_intent_response][crate::model::AutomatedAgentReply::detect_intent_response].
    pub fn set_detect_intent_response<
        T: std::convert::Into<std::option::Option<crate::model::DetectIntentResponse>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.detect_intent_response = v.into();
        self
    }

    /// Sets the value of [automated_agent_reply_type][crate::model::AutomatedAgentReply::automated_agent_reply_type].
    pub fn set_automated_agent_reply_type<
        T: std::convert::Into<crate::model::automated_agent_reply::AutomatedAgentReplyType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.automated_agent_reply_type = v.into();
        self
    }

    /// Sets the value of [allow_cancellation][crate::model::AutomatedAgentReply::allow_cancellation].
    pub fn set_allow_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_cancellation = v.into();
        self
    }

    /// Sets the value of [cx_current_page][crate::model::AutomatedAgentReply::cx_current_page].
    pub fn set_cx_current_page<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.cx_current_page = v.into();
        self
    }
}

impl wkt::message::Message for AutomatedAgentReply {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.AutomatedAgentReply"
    }
}

/// Defines additional types related to [AutomatedAgentReply].
pub mod automated_agent_reply {
    #[allow(unused_imports)]
    use super::*;

    /// Represents different automated agent reply types.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum AutomatedAgentReplyType {
        /// Not specified. This should never happen.
        Unspecified,
        /// Partial reply. e.g. Aggregated responses in a `Fulfillment` that enables
        /// `return_partial_response` can be returned as partial reply.
        /// WARNING: partial reply is not eligible for barge-in.
        Partial,
        /// Final reply.
        Final,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [AutomatedAgentReplyType::value] or
        /// [AutomatedAgentReplyType::name].
        UnknownValue(automated_agent_reply_type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod automated_agent_reply_type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl AutomatedAgentReplyType {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Partial => std::option::Option::Some(1),
                Self::Final => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => {
                    std::option::Option::Some("AUTOMATED_AGENT_REPLY_TYPE_UNSPECIFIED")
                }
                Self::Partial => std::option::Option::Some("PARTIAL"),
                Self::Final => std::option::Option::Some("FINAL"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for AutomatedAgentReplyType {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for AutomatedAgentReplyType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for AutomatedAgentReplyType {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Partial,
                2 => Self::Final,
                _ => Self::UnknownValue(automated_agent_reply_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for AutomatedAgentReplyType {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "AUTOMATED_AGENT_REPLY_TYPE_UNSPECIFIED" => Self::Unspecified,
                "PARTIAL" => Self::Partial,
                "FINAL" => Self::Final,
                _ => Self::UnknownValue(automated_agent_reply_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for AutomatedAgentReplyType {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Partial => serializer.serialize_i32(1),
                Self::Final => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for AutomatedAgentReplyType {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(
                wkt::internal::EnumVisitor::<AutomatedAgentReplyType>::new(
                    ".google.cloud.dialogflow.v2.AutomatedAgentReply.AutomatedAgentReplyType",
                ),
            )
        }
    }
}

/// Represents article answer.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ArticleAnswer {
    /// The article title.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub title: std::string::String,

    /// The article URI.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,

    /// Article snippets.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub snippets: std::vec::Vec<std::string::String>,

    /// Article match confidence.
    /// The system's confidence score that this article is a good match for this
    /// conversation, as a value from 0.0 (completely uncertain) to 1.0
    /// (completely certain).
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub confidence: f32,

    /// A map that contains metadata about the answer and the
    /// document from which it originates.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub metadata: std::collections::HashMap<std::string::String, std::string::String>,

    /// The name of answer record, in the format of
    /// "projects/\<Project ID\>/locations/\<Location ID\>/answerRecords/\<Answer Record
    /// ID\>"
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub answer_record: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ArticleAnswer {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [title][crate::model::ArticleAnswer::title].
    pub fn set_title<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.title = v.into();
        self
    }

    /// Sets the value of [uri][crate::model::ArticleAnswer::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }

    /// Sets the value of [confidence][crate::model::ArticleAnswer::confidence].
    pub fn set_confidence<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.confidence = v.into();
        self
    }

    /// Sets the value of [answer_record][crate::model::ArticleAnswer::answer_record].
    pub fn set_answer_record<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.answer_record = v.into();
        self
    }

    /// Sets the value of [snippets][crate::model::ArticleAnswer::snippets].
    pub fn set_snippets<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.snippets = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [metadata][crate::model::ArticleAnswer::metadata].
    pub fn set_metadata<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.metadata = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for ArticleAnswer {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ArticleAnswer"
    }
}

/// Represents answer from "frequently asked questions".
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FaqAnswer {
    /// The piece of text from the `source` knowledge base document.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub answer: std::string::String,

    /// The system's confidence score that this Knowledge answer is a good match
    /// for this conversational query, range from 0.0 (completely uncertain)
    /// to 1.0 (completely certain).
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub confidence: f32,

    /// The corresponding FAQ question.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub question: std::string::String,

    /// Indicates which Knowledge Document this answer was extracted
    /// from.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/agent/knowledgeBases/<Knowledge Base ID>/documents/<Document ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source: std::string::String,

    /// A map that contains metadata about the answer and the
    /// document from which it originates.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub metadata: std::collections::HashMap<std::string::String, std::string::String>,

    /// The name of answer record, in the format of
    /// "projects/\<Project ID\>/locations/\<Location ID\>/answerRecords/\<Answer Record
    /// ID\>"
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub answer_record: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl FaqAnswer {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [answer][crate::model::FaqAnswer::answer].
    pub fn set_answer<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.answer = v.into();
        self
    }

    /// Sets the value of [confidence][crate::model::FaqAnswer::confidence].
    pub fn set_confidence<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.confidence = v.into();
        self
    }

    /// Sets the value of [question][crate::model::FaqAnswer::question].
    pub fn set_question<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.question = v.into();
        self
    }

    /// Sets the value of [source][crate::model::FaqAnswer::source].
    pub fn set_source<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source = v.into();
        self
    }

    /// Sets the value of [answer_record][crate::model::FaqAnswer::answer_record].
    pub fn set_answer_record<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.answer_record = v.into();
        self
    }

    /// Sets the value of [metadata][crate::model::FaqAnswer::metadata].
    pub fn set_metadata<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.metadata = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for FaqAnswer {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.FaqAnswer"
    }
}

/// Represents a smart reply answer.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SmartReplyAnswer {
    /// The content of the reply.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub reply: std::string::String,

    /// Smart reply confidence.
    /// The system's confidence score that this reply is a good match for
    /// this conversation, as a value from 0.0 (completely uncertain) to 1.0
    /// (completely certain).
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub confidence: f32,

    /// The name of answer record, in the format of
    /// "projects/\<Project ID\>/locations/\<Location ID\>/answerRecords/\<Answer Record
    /// ID\>"
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub answer_record: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SmartReplyAnswer {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [reply][crate::model::SmartReplyAnswer::reply].
    pub fn set_reply<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.reply = v.into();
        self
    }

    /// Sets the value of [confidence][crate::model::SmartReplyAnswer::confidence].
    pub fn set_confidence<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.confidence = v.into();
        self
    }

    /// Sets the value of [answer_record][crate::model::SmartReplyAnswer::answer_record].
    pub fn set_answer_record<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.answer_record = v.into();
        self
    }
}

impl wkt::message::Message for SmartReplyAnswer {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SmartReplyAnswer"
    }
}

/// Represents an intent suggestion.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct IntentSuggestion {
    /// The display name of the intent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Human readable description for better understanding an intent like its
    /// scope, content, result etc. Maximum character limit: 140 characters.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// The name of the intent.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub intent: std::option::Option<crate::model::intent_suggestion::Intent>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl IntentSuggestion {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [display_name][crate::model::IntentSuggestion::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::IntentSuggestion::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [intent][crate::model::IntentSuggestion::intent].
    ///
    /// Note that all the setters affecting `intent` are mutually
    /// exclusive.
    pub fn set_intent<
        T: std::convert::Into<std::option::Option<crate::model::intent_suggestion::Intent>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.intent = v.into();
        self
    }

    /// The value of [intent][crate::model::IntentSuggestion::intent]
    /// if it holds a `IntentV2`, `None` if the field is not set or
    /// holds a different branch.
    pub fn intent_v2(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.intent.as_ref().and_then(|v| match v {
            crate::model::intent_suggestion::Intent::IntentV2(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [intent][crate::model::IntentSuggestion::intent]
    /// to hold a `IntentV2`.
    ///
    /// Note that all the setters affecting `intent` are
    /// mutually exclusive.
    pub fn set_intent_v2<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.intent =
            std::option::Option::Some(crate::model::intent_suggestion::Intent::IntentV2(v.into()));
        self
    }
}

impl wkt::message::Message for IntentSuggestion {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.IntentSuggestion"
    }
}

/// Defines additional types related to [IntentSuggestion].
pub mod intent_suggestion {
    #[allow(unused_imports)]
    use super::*;

    /// The name of the intent.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Intent {
        /// The unique identifier of this
        /// [intent][google.cloud.dialogflow.v2.Intent]. Format: `projects/<Project
        /// ID>/locations/<Location ID>/agent/intents/<Intent ID>`.
        ///
        /// [google.cloud.dialogflow.v2.Intent]: crate::model::Intent
        IntentV2(std::string::String),
    }
}

/// Represents a Dialogflow assist answer.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DialogflowAssistAnswer {
    /// The name of answer record, in the format of
    /// "projects/\<Project ID\>/locations/\<Location ID\>/answerRecords/\<Answer Record
    /// ID\>"
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub answer_record: std::string::String,

    /// Result from DetectIntent for one matched intent.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub result: std::option::Option<crate::model::dialogflow_assist_answer::Result>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DialogflowAssistAnswer {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [answer_record][crate::model::DialogflowAssistAnswer::answer_record].
    pub fn set_answer_record<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.answer_record = v.into();
        self
    }

    /// Sets the value of [result][crate::model::DialogflowAssistAnswer::result].
    ///
    /// Note that all the setters affecting `result` are mutually
    /// exclusive.
    pub fn set_result<
        T: std::convert::Into<std::option::Option<crate::model::dialogflow_assist_answer::Result>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.result = v.into();
        self
    }

    /// The value of [result][crate::model::DialogflowAssistAnswer::result]
    /// if it holds a `QueryResult`, `None` if the field is not set or
    /// holds a different branch.
    pub fn query_result(&self) -> std::option::Option<&std::boxed::Box<crate::model::QueryResult>> {
        #[allow(unreachable_patterns)]
        self.result.as_ref().and_then(|v| match v {
            crate::model::dialogflow_assist_answer::Result::QueryResult(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [result][crate::model::DialogflowAssistAnswer::result]
    /// if it holds a `IntentSuggestion`, `None` if the field is not set or
    /// holds a different branch.
    pub fn intent_suggestion(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::IntentSuggestion>> {
        #[allow(unreachable_patterns)]
        self.result.as_ref().and_then(|v| match v {
            crate::model::dialogflow_assist_answer::Result::IntentSuggestion(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [result][crate::model::DialogflowAssistAnswer::result]
    /// to hold a `QueryResult`.
    ///
    /// Note that all the setters affecting `result` are
    /// mutually exclusive.
    pub fn set_query_result<T: std::convert::Into<std::boxed::Box<crate::model::QueryResult>>>(
        mut self,
        v: T,
    ) -> Self {
        self.result = std::option::Option::Some(
            crate::model::dialogflow_assist_answer::Result::QueryResult(v.into()),
        );
        self
    }

    /// Sets the value of [result][crate::model::DialogflowAssistAnswer::result]
    /// to hold a `IntentSuggestion`.
    ///
    /// Note that all the setters affecting `result` are
    /// mutually exclusive.
    pub fn set_intent_suggestion<
        T: std::convert::Into<std::boxed::Box<crate::model::IntentSuggestion>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.result = std::option::Option::Some(
            crate::model::dialogflow_assist_answer::Result::IntentSuggestion(v.into()),
        );
        self
    }
}

impl wkt::message::Message for DialogflowAssistAnswer {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DialogflowAssistAnswer"
    }
}

/// Defines additional types related to [DialogflowAssistAnswer].
pub mod dialogflow_assist_answer {
    #[allow(unused_imports)]
    use super::*;

    /// Result from DetectIntent for one matched intent.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Result {
        /// Result from v2 agent.
        QueryResult(std::boxed::Box<crate::model::QueryResult>),
        /// An intent suggestion generated from conversation.
        IntentSuggestion(std::boxed::Box<crate::model::IntentSuggestion>),
    }
}

/// One response of different type of suggestion response which is used in
/// the response of
/// [Participants.AnalyzeContent][google.cloud.dialogflow.v2.Participants.AnalyzeContent]
/// and
/// [Participants.AnalyzeContent][google.cloud.dialogflow.v2.Participants.AnalyzeContent],
/// as well as
/// [HumanAgentAssistantEvent][google.cloud.dialogflow.v2.HumanAgentAssistantEvent].
///
/// [google.cloud.dialogflow.v2.HumanAgentAssistantEvent]: crate::model::HumanAgentAssistantEvent
/// [google.cloud.dialogflow.v2.Participants.AnalyzeContent]: crate::client::Participants::analyze_content
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SuggestionResult {
    /// Different type of suggestion response.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub suggestion_response:
        std::option::Option<crate::model::suggestion_result::SuggestionResponse>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SuggestionResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [suggestion_response][crate::model::SuggestionResult::suggestion_response].
    ///
    /// Note that all the setters affecting `suggestion_response` are mutually
    /// exclusive.
    pub fn set_suggestion_response<
        T: std::convert::Into<
                std::option::Option<crate::model::suggestion_result::SuggestionResponse>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.suggestion_response = v.into();
        self
    }

    /// The value of [suggestion_response][crate::model::SuggestionResult::suggestion_response]
    /// if it holds a `Error`, `None` if the field is not set or
    /// holds a different branch.
    pub fn error(&self) -> std::option::Option<&std::boxed::Box<rpc::model::Status>> {
        #[allow(unreachable_patterns)]
        self.suggestion_response.as_ref().and_then(|v| match v {
            crate::model::suggestion_result::SuggestionResponse::Error(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [suggestion_response][crate::model::SuggestionResult::suggestion_response]
    /// if it holds a `SuggestArticlesResponse`, `None` if the field is not set or
    /// holds a different branch.
    pub fn suggest_articles_response(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::SuggestArticlesResponse>> {
        #[allow(unreachable_patterns)]
        self.suggestion_response.as_ref().and_then(|v| match v {
            crate::model::suggestion_result::SuggestionResponse::SuggestArticlesResponse(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [suggestion_response][crate::model::SuggestionResult::suggestion_response]
    /// if it holds a `SuggestKnowledgeAssistResponse`, `None` if the field is not set or
    /// holds a different branch.
    pub fn suggest_knowledge_assist_response(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::SuggestKnowledgeAssistResponse>> {
        #[allow(unreachable_patterns)]
        self.suggestion_response.as_ref().and_then(|v| match v {
            crate::model::suggestion_result::SuggestionResponse::SuggestKnowledgeAssistResponse(
                v,
            ) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [suggestion_response][crate::model::SuggestionResult::suggestion_response]
    /// if it holds a `SuggestFaqAnswersResponse`, `None` if the field is not set or
    /// holds a different branch.
    pub fn suggest_faq_answers_response(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::SuggestFaqAnswersResponse>> {
        #[allow(unreachable_patterns)]
        self.suggestion_response.as_ref().and_then(|v| match v {
            crate::model::suggestion_result::SuggestionResponse::SuggestFaqAnswersResponse(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [suggestion_response][crate::model::SuggestionResult::suggestion_response]
    /// if it holds a `SuggestSmartRepliesResponse`, `None` if the field is not set or
    /// holds a different branch.
    pub fn suggest_smart_replies_response(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::SuggestSmartRepliesResponse>> {
        #[allow(unreachable_patterns)]
        self.suggestion_response.as_ref().and_then(|v| match v {
            crate::model::suggestion_result::SuggestionResponse::SuggestSmartRepliesResponse(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [suggestion_response][crate::model::SuggestionResult::suggestion_response]
    /// if it holds a `GenerateSuggestionsResponse`, `None` if the field is not set or
    /// holds a different branch.
    pub fn generate_suggestions_response(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::GenerateSuggestionsResponse>> {
        #[allow(unreachable_patterns)]
        self.suggestion_response.as_ref().and_then(|v| match v {
            crate::model::suggestion_result::SuggestionResponse::GenerateSuggestionsResponse(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [suggestion_response][crate::model::SuggestionResult::suggestion_response]
    /// to hold a `Error`.
    ///
    /// Note that all the setters affecting `suggestion_response` are
    /// mutually exclusive.
    pub fn set_error<T: std::convert::Into<std::boxed::Box<rpc::model::Status>>>(
        mut self,
        v: T,
    ) -> Self {
        self.suggestion_response = std::option::Option::Some(
            crate::model::suggestion_result::SuggestionResponse::Error(v.into()),
        );
        self
    }

    /// Sets the value of [suggestion_response][crate::model::SuggestionResult::suggestion_response]
    /// to hold a `SuggestArticlesResponse`.
    ///
    /// Note that all the setters affecting `suggestion_response` are
    /// mutually exclusive.
    pub fn set_suggest_articles_response<
        T: std::convert::Into<std::boxed::Box<crate::model::SuggestArticlesResponse>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.suggestion_response = std::option::Option::Some(
            crate::model::suggestion_result::SuggestionResponse::SuggestArticlesResponse(v.into()),
        );
        self
    }

    /// Sets the value of [suggestion_response][crate::model::SuggestionResult::suggestion_response]
    /// to hold a `SuggestKnowledgeAssistResponse`.
    ///
    /// Note that all the setters affecting `suggestion_response` are
    /// mutually exclusive.
    pub fn set_suggest_knowledge_assist_response<
        T: std::convert::Into<std::boxed::Box<crate::model::SuggestKnowledgeAssistResponse>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.suggestion_response = std::option::Option::Some(
            crate::model::suggestion_result::SuggestionResponse::SuggestKnowledgeAssistResponse(
                v.into(),
            ),
        );
        self
    }

    /// Sets the value of [suggestion_response][crate::model::SuggestionResult::suggestion_response]
    /// to hold a `SuggestFaqAnswersResponse`.
    ///
    /// Note that all the setters affecting `suggestion_response` are
    /// mutually exclusive.
    pub fn set_suggest_faq_answers_response<
        T: std::convert::Into<std::boxed::Box<crate::model::SuggestFaqAnswersResponse>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.suggestion_response = std::option::Option::Some(
            crate::model::suggestion_result::SuggestionResponse::SuggestFaqAnswersResponse(
                v.into(),
            ),
        );
        self
    }

    /// Sets the value of [suggestion_response][crate::model::SuggestionResult::suggestion_response]
    /// to hold a `SuggestSmartRepliesResponse`.
    ///
    /// Note that all the setters affecting `suggestion_response` are
    /// mutually exclusive.
    pub fn set_suggest_smart_replies_response<
        T: std::convert::Into<std::boxed::Box<crate::model::SuggestSmartRepliesResponse>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.suggestion_response = std::option::Option::Some(
            crate::model::suggestion_result::SuggestionResponse::SuggestSmartRepliesResponse(
                v.into(),
            ),
        );
        self
    }

    /// Sets the value of [suggestion_response][crate::model::SuggestionResult::suggestion_response]
    /// to hold a `GenerateSuggestionsResponse`.
    ///
    /// Note that all the setters affecting `suggestion_response` are
    /// mutually exclusive.
    pub fn set_generate_suggestions_response<
        T: std::convert::Into<std::boxed::Box<crate::model::GenerateSuggestionsResponse>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.suggestion_response = std::option::Option::Some(
            crate::model::suggestion_result::SuggestionResponse::GenerateSuggestionsResponse(
                v.into(),
            ),
        );
        self
    }
}

impl wkt::message::Message for SuggestionResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SuggestionResult"
    }
}

/// Defines additional types related to [SuggestionResult].
pub mod suggestion_result {
    #[allow(unused_imports)]
    use super::*;

    /// Different type of suggestion response.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum SuggestionResponse {
        /// Error status if the request failed.
        Error(std::boxed::Box<rpc::model::Status>),
        /// SuggestArticlesResponse if request is for ARTICLE_SUGGESTION.
        SuggestArticlesResponse(std::boxed::Box<crate::model::SuggestArticlesResponse>),
        /// SuggestKnowledgeAssistResponse if request is for KNOWLEDGE_ASSIST.
        SuggestKnowledgeAssistResponse(
            std::boxed::Box<crate::model::SuggestKnowledgeAssistResponse>,
        ),
        /// SuggestFaqAnswersResponse if request is for FAQ_ANSWER.
        SuggestFaqAnswersResponse(std::boxed::Box<crate::model::SuggestFaqAnswersResponse>),
        /// SuggestSmartRepliesResponse if request is for SMART_REPLY.
        SuggestSmartRepliesResponse(std::boxed::Box<crate::model::SuggestSmartRepliesResponse>),
        /// Suggestions generated using generators triggered by customer or agent
        /// messages.
        GenerateSuggestionsResponse(std::boxed::Box<crate::model::GenerateSuggestionsResponse>),
    }
}

/// Defines the language used in the input text.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct InputTextConfig {
    /// Required. The language of this conversational query. See [Language
    /// Support](https://cloud.google.com/dialogflow/docs/reference/language)
    /// for a list of the currently supported language codes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl InputTextConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [language_code][crate::model::InputTextConfig::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for InputTextConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.InputTextConfig"
    }
}

/// Represents a part of a message possibly annotated with an entity. The part
/// can be an entity or purely a part of the message between two entities or
/// message start/end.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AnnotatedMessagePart {
    /// A part of a message possibly annotated with an entity.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub text: std::string::String,

    /// The [Dialogflow system entity
    /// type](https://cloud.google.com/dialogflow/docs/reference/system-entities)
    /// of this message part. If this is empty, Dialogflow could not annotate the
    /// phrase part with a system entity.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub entity_type: std::string::String,

    /// The [Dialogflow system entity formatted value
    /// ](https://cloud.google.com/dialogflow/docs/reference/system-entities) of
    /// this message part. For example for a system entity of type
    /// `@sys.unit-currency`, this may contain:
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub formatted_value: std::option::Option<wkt::Value>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AnnotatedMessagePart {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [text][crate::model::AnnotatedMessagePart::text].
    pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.text = v.into();
        self
    }

    /// Sets the value of [entity_type][crate::model::AnnotatedMessagePart::entity_type].
    pub fn set_entity_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.entity_type = v.into();
        self
    }

    /// Sets the value of [formatted_value][crate::model::AnnotatedMessagePart::formatted_value].
    pub fn set_formatted_value<T: std::convert::Into<std::option::Option<wkt::Value>>>(
        mut self,
        v: T,
    ) -> Self {
        self.formatted_value = v.into();
        self
    }
}

impl wkt::message::Message for AnnotatedMessagePart {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.AnnotatedMessagePart"
    }
}

/// Represents the result of annotation for the message.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MessageAnnotation {
    /// The collection of annotated message parts ordered by their
    /// position in the message. You can recover the annotated message by
    /// concatenating [AnnotatedMessagePart.text].
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub parts: std::vec::Vec<crate::model::AnnotatedMessagePart>,

    /// Indicates whether the text message contains entities.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub contain_entities: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MessageAnnotation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [contain_entities][crate::model::MessageAnnotation::contain_entities].
    pub fn set_contain_entities<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.contain_entities = v.into();
        self
    }

    /// Sets the value of [parts][crate::model::MessageAnnotation::parts].
    pub fn set_parts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::AnnotatedMessagePart>,
    {
        use std::iter::Iterator;
        self.parts = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for MessageAnnotation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.MessageAnnotation"
    }
}

/// Represents the selection of a suggestion.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SuggestionInput {
    /// Required. The ID of a suggestion selected by the human agent.
    /// The suggestion(s) were generated in a previous call to
    /// request Dialogflow assist.
    /// The format is:
    /// `projects/<Project ID>/locations/<Location ID>/answerRecords/<Answer Record
    /// ID>` where \<Answer Record ID\> is an alphanumeric string.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub answer_record: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SuggestionInput {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [answer_record][crate::model::SuggestionInput::answer_record].
    pub fn set_answer_record<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.answer_record = v.into();
        self
    }
}

impl wkt::message::Message for SuggestionInput {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SuggestionInput"
    }
}

/// Represents the parameters of human assist query.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AssistQueryParameters {
    /// Key-value filters on the metadata of documents returned by article
    /// suggestion. If specified, article suggestion only returns suggested
    /// documents that match all filters in their
    /// [Document.metadata][google.cloud.dialogflow.v2.Document.metadata]. Multiple
    /// values for a metadata key should be concatenated by comma. For example,
    /// filters to match all documents that have 'US' or 'CA' in their market
    /// metadata values and 'agent' in their user metadata values will be
    ///
    /// ```norust
    /// documents_metadata_filters {
    ///   key: "market"
    ///   value: "US,CA"
    /// }
    /// documents_metadata_filters {
    ///   key: "user"
    ///   value: "agent"
    /// }
    /// ```
    ///
    /// [google.cloud.dialogflow.v2.Document.metadata]: crate::model::Document::metadata
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub documents_metadata_filters:
        std::collections::HashMap<std::string::String, std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AssistQueryParameters {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [documents_metadata_filters][crate::model::AssistQueryParameters::documents_metadata_filters].
    pub fn set_documents_metadata_filters<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.documents_metadata_filters =
            v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for AssistQueryParameters {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.AssistQueryParameters"
    }
}

/// The request message for
/// [Participants.SuggestKnowledgeAssist][google.cloud.dialogflow.v2.Participants.SuggestKnowledgeAssist].
///
/// [google.cloud.dialogflow.v2.Participants.SuggestKnowledgeAssist]: crate::client::Participants::suggest_knowledge_assist
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SuggestKnowledgeAssistRequest {
    /// Required. The name of the participant to fetch suggestions for.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/participants/<Participant ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The name of the latest conversation message to compile
    /// suggestions for. If empty, it will be the latest message of the
    /// conversation. Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/messages/<Message ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub latest_message: std::string::String,

    /// Optional. Max number of messages prior to and including
    /// [latest_message][google.cloud.dialogflow.v2.SuggestKnowledgeAssistRequest.latest_message]
    /// to use as context when compiling the suggestion. The context size is by
    /// default 100 and at most 100.
    ///
    /// [google.cloud.dialogflow.v2.SuggestKnowledgeAssistRequest.latest_message]: crate::model::SuggestKnowledgeAssistRequest::latest_message
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub context_size: i32,

    /// Optional. The previously suggested query for the given conversation. This
    /// helps identify whether the next suggestion we generate is reasonably
    /// different from the previous one. This is useful to avoid similar
    /// suggestions within the conversation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub previous_suggested_query: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SuggestKnowledgeAssistRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::SuggestKnowledgeAssistRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [latest_message][crate::model::SuggestKnowledgeAssistRequest::latest_message].
    pub fn set_latest_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.latest_message = v.into();
        self
    }

    /// Sets the value of [context_size][crate::model::SuggestKnowledgeAssistRequest::context_size].
    pub fn set_context_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.context_size = v.into();
        self
    }

    /// Sets the value of [previous_suggested_query][crate::model::SuggestKnowledgeAssistRequest::previous_suggested_query].
    pub fn set_previous_suggested_query<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.previous_suggested_query = v.into();
        self
    }
}

impl wkt::message::Message for SuggestKnowledgeAssistRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SuggestKnowledgeAssistRequest"
    }
}

/// The response message for
/// [Participants.SuggestKnowledgeAssist][google.cloud.dialogflow.v2.Participants.SuggestKnowledgeAssist].
///
/// [google.cloud.dialogflow.v2.Participants.SuggestKnowledgeAssist]: crate::client::Participants::suggest_knowledge_assist
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SuggestKnowledgeAssistResponse {
    /// Output only. Knowledge Assist suggestion.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub knowledge_assist_answer: std::option::Option<crate::model::KnowledgeAssistAnswer>,

    /// The name of the latest conversation message used to compile suggestion for.
    /// Format: `projects/<Project ID>/locations/<Location
    /// ID>/conversations/<Conversation ID>/messages/<Message ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub latest_message: std::string::String,

    /// Number of messages prior to and including
    /// [latest_message][google.cloud.dialogflow.v2.SuggestKnowledgeAssistResponse.latest_message]
    /// to compile the suggestion. It may be smaller than the
    /// [SuggestKnowledgeAssistRequest.context_size][google.cloud.dialogflow.v2.SuggestKnowledgeAssistRequest.context_size]
    /// field in the request if there are fewer messages in the conversation.
    ///
    /// [google.cloud.dialogflow.v2.SuggestKnowledgeAssistRequest.context_size]: crate::model::SuggestKnowledgeAssistRequest::context_size
    /// [google.cloud.dialogflow.v2.SuggestKnowledgeAssistResponse.latest_message]: crate::model::SuggestKnowledgeAssistResponse::latest_message
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub context_size: i32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SuggestKnowledgeAssistResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [knowledge_assist_answer][crate::model::SuggestKnowledgeAssistResponse::knowledge_assist_answer].
    pub fn set_knowledge_assist_answer<
        T: std::convert::Into<std::option::Option<crate::model::KnowledgeAssistAnswer>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.knowledge_assist_answer = v.into();
        self
    }

    /// Sets the value of [latest_message][crate::model::SuggestKnowledgeAssistResponse::latest_message].
    pub fn set_latest_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.latest_message = v.into();
        self
    }

    /// Sets the value of [context_size][crate::model::SuggestKnowledgeAssistResponse::context_size].
    pub fn set_context_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.context_size = v.into();
        self
    }
}

impl wkt::message::Message for SuggestKnowledgeAssistResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SuggestKnowledgeAssistResponse"
    }
}

/// Represents a Knowledge Assist answer.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct KnowledgeAssistAnswer {
    /// The query suggested based on the context. Suggestion is made only if it
    /// is different from the previous suggestion.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub suggested_query: std::option::Option<crate::model::knowledge_assist_answer::SuggestedQuery>,

    /// The answer generated for the suggested query. Whether or not an answer is
    /// generated depends on how confident we are about the generated query.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub suggested_query_answer:
        std::option::Option<crate::model::knowledge_assist_answer::KnowledgeAnswer>,

    /// The name of the answer record.
    /// Format: `projects/<Project ID>/locations/<location ID>/answer
    /// Records/<Answer Record ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub answer_record: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl KnowledgeAssistAnswer {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [suggested_query][crate::model::KnowledgeAssistAnswer::suggested_query].
    pub fn set_suggested_query<
        T: std::convert::Into<
                std::option::Option<crate::model::knowledge_assist_answer::SuggestedQuery>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.suggested_query = v.into();
        self
    }

    /// Sets the value of [suggested_query_answer][crate::model::KnowledgeAssistAnswer::suggested_query_answer].
    pub fn set_suggested_query_answer<
        T: std::convert::Into<
                std::option::Option<crate::model::knowledge_assist_answer::KnowledgeAnswer>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.suggested_query_answer = v.into();
        self
    }

    /// Sets the value of [answer_record][crate::model::KnowledgeAssistAnswer::answer_record].
    pub fn set_answer_record<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.answer_record = v.into();
        self
    }
}

impl wkt::message::Message for KnowledgeAssistAnswer {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.KnowledgeAssistAnswer"
    }
}

/// Defines additional types related to [KnowledgeAssistAnswer].
pub mod knowledge_assist_answer {
    #[allow(unused_imports)]
    use super::*;

    /// Represents a suggested query.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SuggestedQuery {
        /// Suggested query text.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub query_text: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SuggestedQuery {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [query_text][crate::model::knowledge_assist_answer::SuggestedQuery::query_text].
        pub fn set_query_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.query_text = v.into();
            self
        }
    }

    impl wkt::message::Message for SuggestedQuery {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.KnowledgeAssistAnswer.SuggestedQuery"
        }
    }

    /// Represents an answer from Knowledge. Currently supports FAQ and Generative
    /// answers.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct KnowledgeAnswer {
        /// The piece of text from the `source` that answers this suggested query.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub answer_text: std::string::String,

        /// Source of result.
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub source:
            std::option::Option<crate::model::knowledge_assist_answer::knowledge_answer::Source>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl KnowledgeAnswer {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [answer_text][crate::model::knowledge_assist_answer::KnowledgeAnswer::answer_text].
        pub fn set_answer_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.answer_text = v.into();
            self
        }

        /// Sets the value of [source][crate::model::knowledge_assist_answer::KnowledgeAnswer::source].
        ///
        /// Note that all the setters affecting `source` are mutually
        /// exclusive.
        pub fn set_source<
            T: std::convert::Into<
                    std::option::Option<
                        crate::model::knowledge_assist_answer::knowledge_answer::Source,
                    >,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.source = v.into();
            self
        }

        /// The value of [source][crate::model::knowledge_assist_answer::KnowledgeAnswer::source]
        /// if it holds a `FaqSource`, `None` if the field is not set or
        /// holds a different branch.
        pub fn faq_source(
            &self,
        ) -> std::option::Option<
            &std::boxed::Box<crate::model::knowledge_assist_answer::knowledge_answer::FaqSource>,
        > {
            #[allow(unreachable_patterns)]
            self.source.as_ref().and_then(|v| match v {
                crate::model::knowledge_assist_answer::knowledge_answer::Source::FaqSource(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [source][crate::model::knowledge_assist_answer::KnowledgeAnswer::source]
        /// if it holds a `GenerativeSource`, `None` if the field is not set or
        /// holds a different branch.
        pub fn generative_source(
            &self,
        ) -> std::option::Option<
            &std::boxed::Box<
                crate::model::knowledge_assist_answer::knowledge_answer::GenerativeSource,
            >,
        > {
            #[allow(unreachable_patterns)]
            self.source.as_ref().and_then(|v| match v {
                crate::model::knowledge_assist_answer::knowledge_answer::Source::GenerativeSource(v) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [source][crate::model::knowledge_assist_answer::KnowledgeAnswer::source]
        /// to hold a `FaqSource`.
        ///
        /// Note that all the setters affecting `source` are
        /// mutually exclusive.
        pub fn set_faq_source<
            T: std::convert::Into<
                    std::boxed::Box<
                        crate::model::knowledge_assist_answer::knowledge_answer::FaqSource,
                    >,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.source = std::option::Option::Some(
                crate::model::knowledge_assist_answer::knowledge_answer::Source::FaqSource(
                    v.into(),
                ),
            );
            self
        }

        /// Sets the value of [source][crate::model::knowledge_assist_answer::KnowledgeAnswer::source]
        /// to hold a `GenerativeSource`.
        ///
        /// Note that all the setters affecting `source` are
        /// mutually exclusive.
        pub fn set_generative_source<
            T: std::convert::Into<
                    std::boxed::Box<
                        crate::model::knowledge_assist_answer::knowledge_answer::GenerativeSource,
                    >,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.source = std::option::Option::Some(
                crate::model::knowledge_assist_answer::knowledge_answer::Source::GenerativeSource(
                    v.into(),
                ),
            );
            self
        }
    }

    impl wkt::message::Message for KnowledgeAnswer {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.dialogflow.v2.KnowledgeAssistAnswer.KnowledgeAnswer"
        }
    }

    /// Defines additional types related to [KnowledgeAnswer].
    pub mod knowledge_answer {
        #[allow(unused_imports)]
        use super::*;

        /// Details about source of FAQ answer.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct FaqSource {
            /// The corresponding FAQ question.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub question: std::string::String,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl FaqSource {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [question][crate::model::knowledge_assist_answer::knowledge_answer::FaqSource::question].
            pub fn set_question<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.question = v.into();
                self
            }
        }

        impl wkt::message::Message for FaqSource {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.KnowledgeAssistAnswer.KnowledgeAnswer.FaqSource"
            }
        }

        /// Details about source of Generative answer.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct GenerativeSource {
            /// All snippets used for this Generative Prediction, with their source URI
            /// and data.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub snippets: std::vec::Vec<
                crate::model::knowledge_assist_answer::knowledge_answer::generative_source::Snippet,
            >,

            #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
            _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl GenerativeSource {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [snippets][crate::model::knowledge_assist_answer::knowledge_answer::GenerativeSource::snippets].
            pub fn set_snippets<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<crate::model::knowledge_assist_answer::knowledge_answer::generative_source::Snippet>
            {
                use std::iter::Iterator;
                self.snippets = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for GenerativeSource {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.dialogflow.v2.KnowledgeAssistAnswer.KnowledgeAnswer.GenerativeSource"
            }
        }

        /// Defines additional types related to [GenerativeSource].
        pub mod generative_source {
            #[allow(unused_imports)]
            use super::*;

            /// Snippet Source for a Generative Prediction.
            #[serde_with::serde_as]
            #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(default, rename_all = "camelCase")]
            #[non_exhaustive]
            pub struct Snippet {
                /// URI the data is sourced from.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub uri: std::string::String,

                /// Text taken from that URI.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub text: std::string::String,

                /// Title of the document.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub title: std::string::String,

                /// Metadata of the document.
                #[serde(skip_serializing_if = "std::option::Option::is_none")]
                pub metadata: std::option::Option<wkt::Struct>,

                #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
                _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
            }

            impl Snippet {
                pub fn new() -> Self {
                    std::default::Default::default()
                }

                /// Sets the value of [uri][crate::model::knowledge_assist_answer::knowledge_answer::generative_source::Snippet::uri].
                pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                    self.uri = v.into();
                    self
                }

                /// Sets the value of [text][crate::model::knowledge_assist_answer::knowledge_answer::generative_source::Snippet::text].
                pub fn set_text<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.text = v.into();
                    self
                }

                /// Sets the value of [title][crate::model::knowledge_assist_answer::knowledge_answer::generative_source::Snippet::title].
                pub fn set_title<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.title = v.into();
                    self
                }

                /// Sets the value of [metadata][crate::model::knowledge_assist_answer::knowledge_answer::generative_source::Snippet::metadata].
                pub fn set_metadata<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.metadata = v.into();
                    self
                }
            }

            impl wkt::message::Message for Snippet {
                fn typename() -> &'static str {
                    "type.googleapis.com/google.cloud.dialogflow.v2.KnowledgeAssistAnswer.KnowledgeAnswer.GenerativeSource.Snippet"
                }
            }
        }

        /// Source of result.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum Source {
            /// Populated if the prediction came from FAQ.
            FaqSource(
                std::boxed::Box<crate::model::knowledge_assist_answer::knowledge_answer::FaqSource>,
            ),
            /// Populated if the prediction was Generative.
            GenerativeSource(
                std::boxed::Box<
                    crate::model::knowledge_assist_answer::knowledge_answer::GenerativeSource,
                >,
            ),
        }
    }
}

/// The request to detect user's intent.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DetectIntentRequest {
    /// Required. The name of the session this query is sent to. Format:
    /// `projects/<Project ID>/agent/sessions/<Session ID>`, or
    /// `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
    /// ID>/sessions/<Session ID>`. If `Environment ID` is not specified, we assume
    /// default 'draft' environment (`Environment ID` might be referred to as
    /// environment name at some places). If `User ID` is not specified, we are
    /// using "-". It's up to the API caller to choose an appropriate `Session ID`
    /// and `User Id`. They can be a random number or some type of user and session
    /// identifiers (preferably hashed). The length of the `Session ID` and
    /// `User ID` must not exceed 36 characters.
    ///
    /// For more information, see the [API interactions
    /// guide](https://cloud.google.com/dialogflow/docs/api-overview).
    ///
    /// Note: Always use agent versions for production traffic.
    /// See [Versions and
    /// environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub session: std::string::String,

    /// The parameters of this query.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_params: std::option::Option<crate::model::QueryParameters>,

    /// Required. The input specification. It can be set to:
    ///
    /// . an audio config which instructs the speech recognizer how to process
    ///   the speech audio,
    ///
    /// . a conversational query in the form of text, or
    ///
    /// . an event that specifies which intent to trigger.
    ///
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_input: std::option::Option<crate::model::QueryInput>,

    /// Instructs the speech synthesizer how to generate the output
    /// audio. If this field is not set and agent-level speech synthesizer is not
    /// configured, no output audio is generated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub output_audio_config: std::option::Option<crate::model::OutputAudioConfig>,

    /// Mask for
    /// [output_audio_config][google.cloud.dialogflow.v2.DetectIntentRequest.output_audio_config]
    /// indicating which settings in this request-level config should override
    /// speech synthesizer settings defined at agent-level.
    ///
    /// If unspecified or empty,
    /// [output_audio_config][google.cloud.dialogflow.v2.DetectIntentRequest.output_audio_config]
    /// replaces the agent-level config in its entirety.
    ///
    /// [google.cloud.dialogflow.v2.DetectIntentRequest.output_audio_config]: crate::model::DetectIntentRequest::output_audio_config
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub output_audio_config_mask: std::option::Option<wkt::FieldMask>,

    /// The natural language speech audio to be processed. This field
    /// should be populated iff `query_input` is set to an input audio config.
    /// A single request can contain up to 1 minute of speech audio data.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub input_audio: ::bytes::Bytes,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DetectIntentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [session][crate::model::DetectIntentRequest::session].
    pub fn set_session<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.session = v.into();
        self
    }

    /// Sets the value of [query_params][crate::model::DetectIntentRequest::query_params].
    pub fn set_query_params<
        T: std::convert::Into<std::option::Option<crate::model::QueryParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query_params = v.into();
        self
    }

    /// Sets the value of [query_input][crate::model::DetectIntentRequest::query_input].
    pub fn set_query_input<T: std::convert::Into<std::option::Option<crate::model::QueryInput>>>(
        mut self,
        v: T,
    ) -> Self {
        self.query_input = v.into();
        self
    }

    /// Sets the value of [output_audio_config][crate::model::DetectIntentRequest::output_audio_config].
    pub fn set_output_audio_config<
        T: std::convert::Into<std::option::Option<crate::model::OutputAudioConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.output_audio_config = v.into();
        self
    }

    /// Sets the value of [output_audio_config_mask][crate::model::DetectIntentRequest::output_audio_config_mask].
    pub fn set_output_audio_config_mask<
        T: std::convert::Into<std::option::Option<wkt::FieldMask>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.output_audio_config_mask = v.into();
        self
    }

    /// Sets the value of [input_audio][crate::model::DetectIntentRequest::input_audio].
    pub fn set_input_audio<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.input_audio = v.into();
        self
    }
}

impl wkt::message::Message for DetectIntentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DetectIntentRequest"
    }
}

/// The message returned from the [DetectIntent][] method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DetectIntentResponse {
    /// The unique identifier of the response. It can be used to
    /// locate a response in the training example set or for reporting issues.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub response_id: std::string::String,

    /// The selected results of the conversational query or event processing.
    /// See `alternative_query_results` for additional potential results.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_result: std::option::Option<crate::model::QueryResult>,

    /// Specifies the status of the webhook request.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub webhook_status: std::option::Option<rpc::model::Status>,

    /// The audio data bytes encoded as specified in the request.
    /// Note: The output audio is generated based on the values of default platform
    /// text responses found in the `query_result.fulfillment_messages` field. If
    /// multiple default text responses exist, they will be concatenated when
    /// generating audio. If no default platform text responses exist, the
    /// generated audio content will be empty.
    ///
    /// In some scenarios, multiple output audio fields may be present in the
    /// response structure. In these cases, only the top-most-level audio output
    /// has content.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub output_audio: ::bytes::Bytes,

    /// The config used by the speech synthesizer to generate the output audio.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub output_audio_config: std::option::Option<crate::model::OutputAudioConfig>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DetectIntentResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [response_id][crate::model::DetectIntentResponse::response_id].
    pub fn set_response_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.response_id = v.into();
        self
    }

    /// Sets the value of [query_result][crate::model::DetectIntentResponse::query_result].
    pub fn set_query_result<
        T: std::convert::Into<std::option::Option<crate::model::QueryResult>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query_result = v.into();
        self
    }

    /// Sets the value of [webhook_status][crate::model::DetectIntentResponse::webhook_status].
    pub fn set_webhook_status<T: std::convert::Into<std::option::Option<rpc::model::Status>>>(
        mut self,
        v: T,
    ) -> Self {
        self.webhook_status = v.into();
        self
    }

    /// Sets the value of [output_audio][crate::model::DetectIntentResponse::output_audio].
    pub fn set_output_audio<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.output_audio = v.into();
        self
    }

    /// Sets the value of [output_audio_config][crate::model::DetectIntentResponse::output_audio_config].
    pub fn set_output_audio_config<
        T: std::convert::Into<std::option::Option<crate::model::OutputAudioConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.output_audio_config = v.into();
        self
    }
}

impl wkt::message::Message for DetectIntentResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DetectIntentResponse"
    }
}

/// Represents the parameters of the conversational query.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct QueryParameters {
    /// The time zone of this conversational query from the
    /// [time zone database](https://www.iana.org/time-zones), e.g.,
    /// America/New_York, Europe/Paris. If not provided, the time zone specified in
    /// agent settings is used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub time_zone: std::string::String,

    /// The geo location of this conversational query.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub geo_location: std::option::Option<gtype::model::LatLng>,

    /// The collection of contexts to be activated before this query is
    /// executed.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub contexts: std::vec::Vec<crate::model::Context>,

    /// Specifies whether to delete all contexts in the current session
    /// before the new ones are activated.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub reset_contexts: bool,

    /// Additional session entity types to replace or extend developer
    /// entity types with. The entity synonyms apply to all languages and persist
    /// for the session of this query.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub session_entity_types: std::vec::Vec<crate::model::SessionEntityType>,

    /// This field can be used to pass custom data to your webhook.
    /// Arbitrary JSON objects are supported.
    /// If supplied, the value is used to populate the
    /// `WebhookRequest.original_detect_intent_request.payload`
    /// field sent to your webhook.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub payload: std::option::Option<wkt::Struct>,

    /// Configures the type of sentiment analysis to perform. If not
    /// provided, sentiment analysis is not performed.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub sentiment_analysis_request_config:
        std::option::Option<crate::model::SentimentAnalysisRequestConfig>,

    /// This field can be used to pass HTTP headers for a webhook
    /// call. These headers will be sent to webhook along with the headers that
    /// have been configured through the Dialogflow web console. The headers
    /// defined within this field will overwrite the headers configured through the
    /// Dialogflow console if there is a conflict. Header names are
    /// case-insensitive. Google's specified headers are not allowed. Including:
    /// "Host", "Content-Length", "Connection", "From", "User-Agent",
    /// "Accept-Encoding", "If-Modified-Since", "If-None-Match", "X-Forwarded-For",
    /// etc.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub webhook_headers: std::collections::HashMap<std::string::String, std::string::String>,

    /// The platform of the virtual agent response messages.
    ///
    /// If not empty, only emits messages from this platform in the response.
    /// Valid values are the enum names of
    /// [platform][google.cloud.dialogflow.v2.Intent.Message.platform].
    ///
    /// [google.cloud.dialogflow.v2.Intent.Message.platform]: crate::model::intent::Message::platform
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub platform: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl QueryParameters {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [time_zone][crate::model::QueryParameters::time_zone].
    pub fn set_time_zone<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.time_zone = v.into();
        self
    }

    /// Sets the value of [geo_location][crate::model::QueryParameters::geo_location].
    pub fn set_geo_location<T: std::convert::Into<std::option::Option<gtype::model::LatLng>>>(
        mut self,
        v: T,
    ) -> Self {
        self.geo_location = v.into();
        self
    }

    /// Sets the value of [reset_contexts][crate::model::QueryParameters::reset_contexts].
    pub fn set_reset_contexts<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.reset_contexts = v.into();
        self
    }

    /// Sets the value of [payload][crate::model::QueryParameters::payload].
    pub fn set_payload<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.payload = v.into();
        self
    }

    /// Sets the value of [sentiment_analysis_request_config][crate::model::QueryParameters::sentiment_analysis_request_config].
    pub fn set_sentiment_analysis_request_config<
        T: std::convert::Into<std::option::Option<crate::model::SentimentAnalysisRequestConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.sentiment_analysis_request_config = v.into();
        self
    }

    /// Sets the value of [platform][crate::model::QueryParameters::platform].
    pub fn set_platform<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.platform = v.into();
        self
    }

    /// Sets the value of [contexts][crate::model::QueryParameters::contexts].
    pub fn set_contexts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Context>,
    {
        use std::iter::Iterator;
        self.contexts = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [session_entity_types][crate::model::QueryParameters::session_entity_types].
    pub fn set_session_entity_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SessionEntityType>,
    {
        use std::iter::Iterator;
        self.session_entity_types = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [webhook_headers][crate::model::QueryParameters::webhook_headers].
    pub fn set_webhook_headers<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.webhook_headers = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for QueryParameters {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.QueryParameters"
    }
}

/// Represents the query input. It can contain either:
///
/// . An audio config which instructs the speech recognizer how to process the
///   speech audio.
///
/// . A conversational query in the form of text.
///
/// . An event that specifies which intent to trigger.
///
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct QueryInput {
    /// Required. The input specification.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub input: std::option::Option<crate::model::query_input::Input>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl QueryInput {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [input][crate::model::QueryInput::input].
    ///
    /// Note that all the setters affecting `input` are mutually
    /// exclusive.
    pub fn set_input<
        T: std::convert::Into<std::option::Option<crate::model::query_input::Input>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.input = v.into();
        self
    }

    /// The value of [input][crate::model::QueryInput::input]
    /// if it holds a `AudioConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn audio_config(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::InputAudioConfig>> {
        #[allow(unreachable_patterns)]
        self.input.as_ref().and_then(|v| match v {
            crate::model::query_input::Input::AudioConfig(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [input][crate::model::QueryInput::input]
    /// if it holds a `Text`, `None` if the field is not set or
    /// holds a different branch.
    pub fn text(&self) -> std::option::Option<&std::boxed::Box<crate::model::TextInput>> {
        #[allow(unreachable_patterns)]
        self.input.as_ref().and_then(|v| match v {
            crate::model::query_input::Input::Text(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [input][crate::model::QueryInput::input]
    /// if it holds a `Event`, `None` if the field is not set or
    /// holds a different branch.
    pub fn event(&self) -> std::option::Option<&std::boxed::Box<crate::model::EventInput>> {
        #[allow(unreachable_patterns)]
        self.input.as_ref().and_then(|v| match v {
            crate::model::query_input::Input::Event(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [input][crate::model::QueryInput::input]
    /// to hold a `AudioConfig`.
    ///
    /// Note that all the setters affecting `input` are
    /// mutually exclusive.
    pub fn set_audio_config<
        T: std::convert::Into<std::boxed::Box<crate::model::InputAudioConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.input =
            std::option::Option::Some(crate::model::query_input::Input::AudioConfig(v.into()));
        self
    }

    /// Sets the value of [input][crate::model::QueryInput::input]
    /// to hold a `Text`.
    ///
    /// Note that all the setters affecting `input` are
    /// mutually exclusive.
    pub fn set_text<T: std::convert::Into<std::boxed::Box<crate::model::TextInput>>>(
        mut self,
        v: T,
    ) -> Self {
        self.input = std::option::Option::Some(crate::model::query_input::Input::Text(v.into()));
        self
    }

    /// Sets the value of [input][crate::model::QueryInput::input]
    /// to hold a `Event`.
    ///
    /// Note that all the setters affecting `input` are
    /// mutually exclusive.
    pub fn set_event<T: std::convert::Into<std::boxed::Box<crate::model::EventInput>>>(
        mut self,
        v: T,
    ) -> Self {
        self.input = std::option::Option::Some(crate::model::query_input::Input::Event(v.into()));
        self
    }
}

impl wkt::message::Message for QueryInput {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.QueryInput"
    }
}

/// Defines additional types related to [QueryInput].
pub mod query_input {
    #[allow(unused_imports)]
    use super::*;

    /// Required. The input specification.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Input {
        /// Instructs the speech recognizer how to process the speech audio.
        AudioConfig(std::boxed::Box<crate::model::InputAudioConfig>),
        /// The natural language text to be processed. Text length must not exceed
        /// 256 character for virtual agent interactions.
        Text(std::boxed::Box<crate::model::TextInput>),
        /// The event to be processed.
        Event(std::boxed::Box<crate::model::EventInput>),
    }
}

/// Represents the result of conversational query or event processing.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct QueryResult {
    /// The original conversational query text:
    ///
    /// - If natural language text was provided as input, `query_text` contains
    ///   a copy of the input.
    /// - If natural language speech audio was provided as input, `query_text`
    ///   contains the speech recognition result. If speech recognizer produced
    ///   multiple alternatives, a particular one is picked.
    /// - If automatic spell correction is enabled, `query_text` will contain the
    ///   corrected user input.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub query_text: std::string::String,

    /// The language that was triggered during intent detection.
    /// See [Language
    /// Support](https://cloud.google.com/dialogflow/docs/reference/language)
    /// for a list of the currently supported language codes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// The Speech recognition confidence between 0.0 and 1.0. A higher number
    /// indicates an estimated greater likelihood that the recognized words are
    /// correct. The default of 0.0 is a sentinel value indicating that confidence
    /// was not set.
    ///
    /// This field is not guaranteed to be accurate or set. In particular this
    /// field isn't set for [StreamingDetectIntent][] since the streaming endpoint
    /// has separate confidence estimates per portion of the audio in
    /// StreamingRecognitionResult.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub speech_recognition_confidence: f32,

    /// The action name from the matched intent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub action: std::string::String,

    /// The collection of extracted parameters.
    ///
    /// Depending on your protocol or client library language, this is a
    /// map, associative array, symbol table, dictionary, or JSON object
    /// composed of a collection of (MapKey, MapValue) pairs:
    ///
    /// * MapKey type: string
    /// * MapKey value: parameter name
    /// * MapValue type: If parameter's entity type is a composite entity then use
    ///   map, otherwise, depending on the parameter value type, it could be one of
    ///   string, number, boolean, null, list or map.
    /// * MapValue value: If parameter's entity type is a composite entity then use
    ///   map from composite entity property names to property values, otherwise,
    ///   use parameter value.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub parameters: std::option::Option<wkt::Struct>,

    /// This field is set to:
    ///
    /// - `false` if the matched intent has required parameters and not all of
    ///   the required parameter values have been collected.
    /// - `true` if all required parameter values have been collected, or if the
    ///   matched intent doesn't contain any required parameters.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub all_required_params_present: bool,

    /// Indicates whether the conversational query triggers a cancellation for slot
    /// filling. For more information, see the [cancel slot filling
    /// documentation](https://cloud.google.com/dialogflow/es/docs/intents-actions-parameters#cancel).
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub cancels_slot_filling: bool,

    /// The text to be pronounced to the user or shown on the screen.
    /// Note: This is a legacy field, `fulfillment_messages` should be preferred.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub fulfillment_text: std::string::String,

    /// The collection of rich messages to present to the user.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub fulfillment_messages: std::vec::Vec<crate::model::intent::Message>,

    /// If the query was fulfilled by a webhook call, this field is set to the
    /// value of the `source` field returned in the webhook response.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub webhook_source: std::string::String,

    /// If the query was fulfilled by a webhook call, this field is set to the
    /// value of the `payload` field returned in the webhook response.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub webhook_payload: std::option::Option<wkt::Struct>,

    /// The collection of output contexts. If applicable,
    /// `output_contexts.parameters` contains entries with name
    /// `<parameter name>.original` containing the original parameter values
    /// before the query.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub output_contexts: std::vec::Vec<crate::model::Context>,

    /// The intent that matched the conversational query. Some, not
    /// all fields are filled in this message, including but not limited to:
    /// `name`, `display_name`, `end_interaction` and `is_fallback`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub intent: std::option::Option<crate::model::Intent>,

    /// The intent detection confidence. Values range from 0.0
    /// (completely uncertain) to 1.0 (completely certain).
    /// This value is for informational purpose only and is only used to
    /// help match the best intent within the classification threshold.
    /// This value may change for the same end-user expression at any time due to a
    /// model retraining or change in implementation.
    /// If there are `multiple knowledge_answers` messages, this value is set to
    /// the greatest `knowledgeAnswers.match_confidence` value in the list.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub intent_detection_confidence: f32,

    /// Free-form diagnostic information for the associated detect intent request.
    /// The fields of this data can change without notice, so you should not write
    /// code that depends on its structure.
    /// The data may contain:
    ///
    /// - webhook call latency
    /// - webhook errors
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub diagnostic_info: std::option::Option<wkt::Struct>,

    /// The sentiment analysis result, which depends on the
    /// `sentiment_analysis_request_config` specified in the request.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub sentiment_analysis_result: std::option::Option<crate::model::SentimentAnalysisResult>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl QueryResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [query_text][crate::model::QueryResult::query_text].
    pub fn set_query_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query_text = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::QueryResult::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [speech_recognition_confidence][crate::model::QueryResult::speech_recognition_confidence].
    pub fn set_speech_recognition_confidence<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.speech_recognition_confidence = v.into();
        self
    }

    /// Sets the value of [action][crate::model::QueryResult::action].
    pub fn set_action<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.action = v.into();
        self
    }

    /// Sets the value of [parameters][crate::model::QueryResult::parameters].
    pub fn set_parameters<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.parameters = v.into();
        self
    }

    /// Sets the value of [all_required_params_present][crate::model::QueryResult::all_required_params_present].
    pub fn set_all_required_params_present<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.all_required_params_present = v.into();
        self
    }

    /// Sets the value of [cancels_slot_filling][crate::model::QueryResult::cancels_slot_filling].
    pub fn set_cancels_slot_filling<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.cancels_slot_filling = v.into();
        self
    }

    /// Sets the value of [fulfillment_text][crate::model::QueryResult::fulfillment_text].
    pub fn set_fulfillment_text<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.fulfillment_text = v.into();
        self
    }

    /// Sets the value of [webhook_source][crate::model::QueryResult::webhook_source].
    pub fn set_webhook_source<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.webhook_source = v.into();
        self
    }

    /// Sets the value of [webhook_payload][crate::model::QueryResult::webhook_payload].
    pub fn set_webhook_payload<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.webhook_payload = v.into();
        self
    }

    /// Sets the value of [intent][crate::model::QueryResult::intent].
    pub fn set_intent<T: std::convert::Into<std::option::Option<crate::model::Intent>>>(
        mut self,
        v: T,
    ) -> Self {
        self.intent = v.into();
        self
    }

    /// Sets the value of [intent_detection_confidence][crate::model::QueryResult::intent_detection_confidence].
    pub fn set_intent_detection_confidence<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.intent_detection_confidence = v.into();
        self
    }

    /// Sets the value of [diagnostic_info][crate::model::QueryResult::diagnostic_info].
    pub fn set_diagnostic_info<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.diagnostic_info = v.into();
        self
    }

    /// Sets the value of [sentiment_analysis_result][crate::model::QueryResult::sentiment_analysis_result].
    pub fn set_sentiment_analysis_result<
        T: std::convert::Into<std::option::Option<crate::model::SentimentAnalysisResult>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.sentiment_analysis_result = v.into();
        self
    }

    /// Sets the value of [fulfillment_messages][crate::model::QueryResult::fulfillment_messages].
    pub fn set_fulfillment_messages<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::intent::Message>,
    {
        use std::iter::Iterator;
        self.fulfillment_messages = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [output_contexts][crate::model::QueryResult::output_contexts].
    pub fn set_output_contexts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Context>,
    {
        use std::iter::Iterator;
        self.output_contexts = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for QueryResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.QueryResult"
    }
}

/// The top-level message sent by the client to the
/// [StreamingDetectIntent][] method.
///
/// Multiple request messages should be sent in order:
///
/// . The first message must contain
///   [session][google.cloud.dialogflow.v2.StreamingDetectIntentRequest.session],
///   [query_input][google.cloud.dialogflow.v2.StreamingDetectIntentRequest.query_input]
///   plus optionally
///   [query_params][google.cloud.dialogflow.v2.StreamingDetectIntentRequest.query_params].
///   If the client wants to receive an audio response, it should also contain
///   [output_audio_config][google.cloud.dialogflow.v2.StreamingDetectIntentRequest.output_audio_config].
///   The message must not contain
///   [input_audio][google.cloud.dialogflow.v2.StreamingDetectIntentRequest.input_audio].
///
/// . If
///   [query_input][google.cloud.dialogflow.v2.StreamingDetectIntentRequest.query_input]
///   was set to
///   [query_input.audio_config][google.cloud.dialogflow.v2.InputAudioConfig],
///   all subsequent messages must contain
///   [input_audio][google.cloud.dialogflow.v2.StreamingDetectIntentRequest.input_audio]
///   to continue with Speech recognition. If you decide to rather detect an
///   intent from text input after you already started Speech recognition,
///   please send a message with
///   [query_input.text][google.cloud.dialogflow.v2.QueryInput.text].
///
/// . However, note that:
///
///   * Dialogflow will bill you for the audio duration so far.
///   * Dialogflow discards all Speech recognition results in favor of the
///     input text.
///   * Dialogflow will use the language code from the first message.
///
/// After you sent all input, you must half-close or abort the request stream.
///
/// [google.cloud.dialogflow.v2.InputAudioConfig]: crate::model::InputAudioConfig
/// [google.cloud.dialogflow.v2.QueryInput.text]: crate::model::QueryInput::input
/// [google.cloud.dialogflow.v2.StreamingDetectIntentRequest.input_audio]: crate::model::StreamingDetectIntentRequest::input_audio
/// [google.cloud.dialogflow.v2.StreamingDetectIntentRequest.output_audio_config]: crate::model::StreamingDetectIntentRequest::output_audio_config
/// [google.cloud.dialogflow.v2.StreamingDetectIntentRequest.query_input]: crate::model::StreamingDetectIntentRequest::query_input
/// [google.cloud.dialogflow.v2.StreamingDetectIntentRequest.query_params]: crate::model::StreamingDetectIntentRequest::query_params
/// [google.cloud.dialogflow.v2.StreamingDetectIntentRequest.session]: crate::model::StreamingDetectIntentRequest::session
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StreamingDetectIntentRequest {
    /// Required. The name of the session the query is sent to.
    /// Format of the session name:
    /// `projects/<Project ID>/agent/sessions/<Session ID>`, or
    /// `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
    /// ID>/sessions/<Session ID>`. If `Environment ID` is not specified, we assume
    /// default 'draft' environment. If `User ID` is not specified, we are using
    /// "-". It's up to the API caller to choose an appropriate `Session ID` and
    /// `User Id`. They can be a random number or some type of user and session
    /// identifiers (preferably hashed). The length of the `Session ID` and
    /// `User ID` must not exceed 36 characters.
    ///
    /// For more information, see the [API interactions
    /// guide](https://cloud.google.com/dialogflow/docs/api-overview).
    ///
    /// Note: Always use agent versions for production traffic.
    /// See [Versions and
    /// environments](https://cloud.google.com/dialogflow/es/docs/agents-versions).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub session: std::string::String,

    /// The parameters of this query.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_params: std::option::Option<crate::model::QueryParameters>,

    /// Required. The input specification. It can be set to:
    ///
    /// . an audio config which instructs the speech recognizer how to process
    ///   the speech audio,
    ///
    /// . a conversational query in the form of text, or
    ///
    /// . an event that specifies which intent to trigger.
    ///
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_input: std::option::Option<crate::model::QueryInput>,

    /// Please use
    /// [InputAudioConfig.single_utterance][google.cloud.dialogflow.v2.InputAudioConfig.single_utterance]
    /// instead. If `false` (default), recognition does not cease until the client
    /// closes the stream. If `true`, the recognizer will detect a single spoken
    /// utterance in input audio. Recognition ceases when it detects the audio's
    /// voice has stopped or paused. In this case, once a detected intent is
    /// received, the client should close the stream and start a new request with a
    /// new stream as needed. This setting is ignored when `query_input` is a piece
    /// of text or an event.
    ///
    /// [google.cloud.dialogflow.v2.InputAudioConfig.single_utterance]: crate::model::InputAudioConfig::single_utterance
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[deprecated]
    pub single_utterance: bool,

    /// Instructs the speech synthesizer how to generate the output
    /// audio. If this field is not set and agent-level speech synthesizer is not
    /// configured, no output audio is generated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub output_audio_config: std::option::Option<crate::model::OutputAudioConfig>,

    /// Mask for
    /// [output_audio_config][google.cloud.dialogflow.v2.StreamingDetectIntentRequest.output_audio_config]
    /// indicating which settings in this request-level config should override
    /// speech synthesizer settings defined at agent-level.
    ///
    /// If unspecified or empty,
    /// [output_audio_config][google.cloud.dialogflow.v2.StreamingDetectIntentRequest.output_audio_config]
    /// replaces the agent-level config in its entirety.
    ///
    /// [google.cloud.dialogflow.v2.StreamingDetectIntentRequest.output_audio_config]: crate::model::StreamingDetectIntentRequest::output_audio_config
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub output_audio_config_mask: std::option::Option<wkt::FieldMask>,

    /// The input audio content to be recognized. Must be sent if
    /// `query_input` was set to a streaming input audio config. The complete audio
    /// over all streaming messages must not exceed 1 minute.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub input_audio: ::bytes::Bytes,

    /// if true, `StreamingDetectIntentResponse.debugging_info` will get populated.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub enable_debugging_info: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl StreamingDetectIntentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [session][crate::model::StreamingDetectIntentRequest::session].
    pub fn set_session<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.session = v.into();
        self
    }

    /// Sets the value of [query_params][crate::model::StreamingDetectIntentRequest::query_params].
    pub fn set_query_params<
        T: std::convert::Into<std::option::Option<crate::model::QueryParameters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query_params = v.into();
        self
    }

    /// Sets the value of [query_input][crate::model::StreamingDetectIntentRequest::query_input].
    pub fn set_query_input<T: std::convert::Into<std::option::Option<crate::model::QueryInput>>>(
        mut self,
        v: T,
    ) -> Self {
        self.query_input = v.into();
        self
    }

    /// Sets the value of [single_utterance][crate::model::StreamingDetectIntentRequest::single_utterance].
    #[deprecated]
    pub fn set_single_utterance<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.single_utterance = v.into();
        self
    }

    /// Sets the value of [output_audio_config][crate::model::StreamingDetectIntentRequest::output_audio_config].
    pub fn set_output_audio_config<
        T: std::convert::Into<std::option::Option<crate::model::OutputAudioConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.output_audio_config = v.into();
        self
    }

    /// Sets the value of [output_audio_config_mask][crate::model::StreamingDetectIntentRequest::output_audio_config_mask].
    pub fn set_output_audio_config_mask<
        T: std::convert::Into<std::option::Option<wkt::FieldMask>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.output_audio_config_mask = v.into();
        self
    }

    /// Sets the value of [input_audio][crate::model::StreamingDetectIntentRequest::input_audio].
    pub fn set_input_audio<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.input_audio = v.into();
        self
    }

    /// Sets the value of [enable_debugging_info][crate::model::StreamingDetectIntentRequest::enable_debugging_info].
    pub fn set_enable_debugging_info<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_debugging_info = v.into();
        self
    }
}

impl wkt::message::Message for StreamingDetectIntentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.StreamingDetectIntentRequest"
    }
}

/// Cloud conversation info for easier debugging.
/// It will get populated in `StreamingDetectIntentResponse` or
/// `StreamingAnalyzeContentResponse` when the flag `enable_debugging_info` is
/// set to true in corresponding requests.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CloudConversationDebuggingInfo {
    /// Number of input audio data chunks in streaming requests.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub audio_data_chunks: i32,

    /// Time offset of the end of speech utterance relative to the
    /// beginning of the first audio chunk.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub result_end_time_offset: std::option::Option<wkt::Duration>,

    /// Duration of first audio chunk.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub first_audio_duration: std::option::Option<wkt::Duration>,

    /// Whether client used single utterance mode.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub single_utterance: bool,

    /// Time offsets of the speech partial results relative to the beginning of
    /// the stream.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub speech_partial_results_end_times: std::vec::Vec<wkt::Duration>,

    /// Time offsets of the speech final results (is_final=true) relative to the
    /// beginning of the stream.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub speech_final_results_end_times: std::vec::Vec<wkt::Duration>,

    /// Total number of partial responses.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub partial_responses: i32,

    /// Time offset of Speaker ID stream close time relative to the Speech stream
    /// close time in milliseconds. Only meaningful for conversations involving
    /// passive verification.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub speaker_id_passive_latency_ms_offset: i32,

    /// Whether a barge-in event is triggered in this request.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub bargein_event_triggered: bool,

    /// Whether speech uses single utterance mode.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub speech_single_utterance: bool,

    /// Time offsets of the DTMF partial results relative to the beginning of
    /// the stream.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub dtmf_partial_results_times: std::vec::Vec<wkt::Duration>,

    /// Time offsets of the DTMF final results relative to the beginning of
    /// the stream.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub dtmf_final_results_times: std::vec::Vec<wkt::Duration>,

    /// Time offset of the end-of-single-utterance signal relative to the
    /// beginning of the stream.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub single_utterance_end_time_offset: std::option::Option<wkt::Duration>,

    /// No speech timeout settings for the stream.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub no_speech_timeout: std::option::Option<wkt::Duration>,

    /// Speech endpointing timeout settings for the stream.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub endpointing_timeout: std::option::Option<wkt::Duration>,

    /// Whether the streaming terminates with an injected text query.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub is_input_text: bool,

    /// Client half close time in terms of input audio duration.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub client_half_close_time_offset: std::option::Option<wkt::Duration>,

    /// Client half close time in terms of API streaming duration.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub client_half_close_streaming_time_offset: std::option::Option<wkt::Duration>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CloudConversationDebuggingInfo {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [audio_data_chunks][crate::model::CloudConversationDebuggingInfo::audio_data_chunks].
    pub fn set_audio_data_chunks<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.audio_data_chunks = v.into();
        self
    }

    /// Sets the value of [result_end_time_offset][crate::model::CloudConversationDebuggingInfo::result_end_time_offset].
    pub fn set_result_end_time_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.result_end_time_offset = v.into();
        self
    }

    /// Sets the value of [first_audio_duration][crate::model::CloudConversationDebuggingInfo::first_audio_duration].
    pub fn set_first_audio_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.first_audio_duration = v.into();
        self
    }

    /// Sets the value of [single_utterance][crate::model::CloudConversationDebuggingInfo::single_utterance].
    pub fn set_single_utterance<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.single_utterance = v.into();
        self
    }

    /// Sets the value of [partial_responses][crate::model::CloudConversationDebuggingInfo::partial_responses].
    pub fn set_partial_responses<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.partial_responses = v.into();
        self
    }

    /// Sets the value of [speaker_id_passive_latency_ms_offset][crate::model::CloudConversationDebuggingInfo::speaker_id_passive_latency_ms_offset].
    pub fn set_speaker_id_passive_latency_ms_offset<T: std::convert::Into<i32>>(
        mut self,
        v: T,
    ) -> Self {
        self.speaker_id_passive_latency_ms_offset = v.into();
        self
    }

    /// Sets the value of [bargein_event_triggered][crate::model::CloudConversationDebuggingInfo::bargein_event_triggered].
    pub fn set_bargein_event_triggered<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.bargein_event_triggered = v.into();
        self
    }

    /// Sets the value of [speech_single_utterance][crate::model::CloudConversationDebuggingInfo::speech_single_utterance].
    pub fn set_speech_single_utterance<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.speech_single_utterance = v.into();
        self
    }

    /// Sets the value of [single_utterance_end_time_offset][crate::model::CloudConversationDebuggingInfo::single_utterance_end_time_offset].
    pub fn set_single_utterance_end_time_offset<
        T: std::convert::Into<std::option::Option<wkt::Duration>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.single_utterance_end_time_offset = v.into();
        self
    }

    /// Sets the value of [no_speech_timeout][crate::model::CloudConversationDebuggingInfo::no_speech_timeout].
    pub fn set_no_speech_timeout<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.no_speech_timeout = v.into();
        self
    }

    /// Sets the value of [endpointing_timeout][crate::model::CloudConversationDebuggingInfo::endpointing_timeout].
    pub fn set_endpointing_timeout<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.endpointing_timeout = v.into();
        self
    }

    /// Sets the value of [is_input_text][crate::model::CloudConversationDebuggingInfo::is_input_text].
    pub fn set_is_input_text<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.is_input_text = v.into();
        self
    }

    /// Sets the value of [client_half_close_time_offset][crate::model::CloudConversationDebuggingInfo::client_half_close_time_offset].
    pub fn set_client_half_close_time_offset<
        T: std::convert::Into<std::option::Option<wkt::Duration>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.client_half_close_time_offset = v.into();
        self
    }

    /// Sets the value of [client_half_close_streaming_time_offset][crate::model::CloudConversationDebuggingInfo::client_half_close_streaming_time_offset].
    pub fn set_client_half_close_streaming_time_offset<
        T: std::convert::Into<std::option::Option<wkt::Duration>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.client_half_close_streaming_time_offset = v.into();
        self
    }

    /// Sets the value of [speech_partial_results_end_times][crate::model::CloudConversationDebuggingInfo::speech_partial_results_end_times].
    pub fn set_speech_partial_results_end_times<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::Duration>,
    {
        use std::iter::Iterator;
        self.speech_partial_results_end_times = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [speech_final_results_end_times][crate::model::CloudConversationDebuggingInfo::speech_final_results_end_times].
    pub fn set_speech_final_results_end_times<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::Duration>,
    {
        use std::iter::Iterator;
        self.speech_final_results_end_times = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [dtmf_partial_results_times][crate::model::CloudConversationDebuggingInfo::dtmf_partial_results_times].
    pub fn set_dtmf_partial_results_times<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::Duration>,
    {
        use std::iter::Iterator;
        self.dtmf_partial_results_times = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [dtmf_final_results_times][crate::model::CloudConversationDebuggingInfo::dtmf_final_results_times].
    pub fn set_dtmf_final_results_times<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<wkt::Duration>,
    {
        use std::iter::Iterator;
        self.dtmf_final_results_times = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CloudConversationDebuggingInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CloudConversationDebuggingInfo"
    }
}

/// The top-level message returned from the
/// [StreamingDetectIntent][] method.
///
/// Multiple response messages can be returned in order:
///
/// . If the
///   [StreamingDetectIntentRequest.input_audio][google.cloud.dialogflow.v2.StreamingDetectIntentRequest.input_audio]
///   field was
///   set, the `recognition_result` field is populated for one
///   or more messages.
///   See the
///   [StreamingRecognitionResult][google.cloud.dialogflow.v2.StreamingRecognitionResult]
///   message for details about the result message sequence.
///
/// . The next message contains `response_id`, `query_result`
///   and optionally `webhook_status` if a WebHook was called.
///
///
/// [google.cloud.dialogflow.v2.StreamingDetectIntentRequest.input_audio]: crate::model::StreamingDetectIntentRequest::input_audio
/// [google.cloud.dialogflow.v2.StreamingRecognitionResult]: crate::model::StreamingRecognitionResult
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StreamingDetectIntentResponse {
    /// The unique identifier of the response. It can be used to
    /// locate a response in the training example set or for reporting issues.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub response_id: std::string::String,

    /// The result of speech recognition.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub recognition_result: std::option::Option<crate::model::StreamingRecognitionResult>,

    /// The result of the conversational query or event processing.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_result: std::option::Option<crate::model::QueryResult>,

    /// Specifies the status of the webhook request.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub webhook_status: std::option::Option<rpc::model::Status>,

    /// The audio data bytes encoded as specified in the request.
    /// Note: The output audio is generated based on the values of default platform
    /// text responses found in the `query_result.fulfillment_messages` field. If
    /// multiple default text responses exist, they will be concatenated when
    /// generating audio. If no default platform text responses exist, the
    /// generated audio content will be empty.
    ///
    /// In some scenarios, multiple output audio fields may be present in the
    /// response structure. In these cases, only the top-most-level audio output
    /// has content.
    #[serde(skip_serializing_if = "::bytes::Bytes::is_empty")]
    #[serde_as(as = "serde_with::base64::Base64")]
    pub output_audio: ::bytes::Bytes,

    /// The config used by the speech synthesizer to generate the output audio.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub output_audio_config: std::option::Option<crate::model::OutputAudioConfig>,

    /// Debugging info that would get populated when
    /// [StreamingDetectIntentRequest.enable_debugging_info][google.cloud.dialogflow.v2.StreamingDetectIntentRequest.enable_debugging_info]
    /// is set to true.
    ///
    /// [google.cloud.dialogflow.v2.StreamingDetectIntentRequest.enable_debugging_info]: crate::model::StreamingDetectIntentRequest::enable_debugging_info
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub debugging_info: std::option::Option<crate::model::CloudConversationDebuggingInfo>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl StreamingDetectIntentResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [response_id][crate::model::StreamingDetectIntentResponse::response_id].
    pub fn set_response_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.response_id = v.into();
        self
    }

    /// Sets the value of [recognition_result][crate::model::StreamingDetectIntentResponse::recognition_result].
    pub fn set_recognition_result<
        T: std::convert::Into<std::option::Option<crate::model::StreamingRecognitionResult>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.recognition_result = v.into();
        self
    }

    /// Sets the value of [query_result][crate::model::StreamingDetectIntentResponse::query_result].
    pub fn set_query_result<
        T: std::convert::Into<std::option::Option<crate::model::QueryResult>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query_result = v.into();
        self
    }

    /// Sets the value of [webhook_status][crate::model::StreamingDetectIntentResponse::webhook_status].
    pub fn set_webhook_status<T: std::convert::Into<std::option::Option<rpc::model::Status>>>(
        mut self,
        v: T,
    ) -> Self {
        self.webhook_status = v.into();
        self
    }

    /// Sets the value of [output_audio][crate::model::StreamingDetectIntentResponse::output_audio].
    pub fn set_output_audio<T: std::convert::Into<::bytes::Bytes>>(mut self, v: T) -> Self {
        self.output_audio = v.into();
        self
    }

    /// Sets the value of [output_audio_config][crate::model::StreamingDetectIntentResponse::output_audio_config].
    pub fn set_output_audio_config<
        T: std::convert::Into<std::option::Option<crate::model::OutputAudioConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.output_audio_config = v.into();
        self
    }

    /// Sets the value of [debugging_info][crate::model::StreamingDetectIntentResponse::debugging_info].
    pub fn set_debugging_info<
        T: std::convert::Into<std::option::Option<crate::model::CloudConversationDebuggingInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.debugging_info = v.into();
        self
    }
}

impl wkt::message::Message for StreamingDetectIntentResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.StreamingDetectIntentResponse"
    }
}

/// Contains a speech recognition result corresponding to a portion of the audio
/// that is currently being processed or an indication that this is the end
/// of the single requested utterance.
///
/// While end-user audio is being processed, Dialogflow sends a series of
/// results. Each result may contain a `transcript` value. A transcript
/// represents a portion of the utterance. While the recognizer is processing
/// audio, transcript values may be interim values or finalized values.
/// Once a transcript is finalized, the `is_final` value is set to true and
/// processing continues for the next transcript.
///
/// If `StreamingDetectIntentRequest.query_input.audio_config.single_utterance`
/// was true, and the recognizer has completed processing audio,
/// the `message_type` value is set to `END_OF_SINGLE_UTTERANCE and the
/// following (last) result contains the last finalized transcript.
///
/// The complete end-user utterance is determined by concatenating the
/// finalized transcript values received for the series of results.
///
/// In the following example, single utterance is enabled. In the case where
/// single utterance is not enabled, result 7 would not occur.
///
/// ```norust
/// Num | transcript              | message_type            | is_final
/// --- | ----------------------- | ----------------------- | --------
/// 1   | "tube"                  | TRANSCRIPT              | false
/// 2   | "to be a"               | TRANSCRIPT              | false
/// 3   | "to be"                 | TRANSCRIPT              | false
/// 4   | "to be or not to be"    | TRANSCRIPT              | true
/// 5   | "that's"                | TRANSCRIPT              | false
/// 6   | "that is                | TRANSCRIPT              | false
/// 7   | unset                   | END_OF_SINGLE_UTTERANCE | unset
/// 8   | " that is the question" | TRANSCRIPT              | true
/// ```
///
/// Concatenating the finalized transcripts with `is_final` set to true,
/// the complete utterance becomes "to be or not to be that is the question".
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct StreamingRecognitionResult {
    /// Type of the result message.
    pub message_type: crate::model::streaming_recognition_result::MessageType,

    /// Transcript text representing the words that the user spoke.
    /// Populated if and only if `message_type` = `TRANSCRIPT`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub transcript: std::string::String,

    /// If `false`, the `StreamingRecognitionResult` represents an
    /// interim result that may change. If `true`, the recognizer will not return
    /// any further hypotheses about this piece of the audio. May only be populated
    /// for `message_type` = `TRANSCRIPT`.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub is_final: bool,

    /// The Speech confidence between 0.0 and 1.0 for the current portion of audio.
    /// A higher number indicates an estimated greater likelihood that the
    /// recognized words are correct. The default of 0.0 is a sentinel value
    /// indicating that confidence was not set.
    ///
    /// This field is typically only provided if `is_final` is true and you should
    /// not rely on it being accurate or even set.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub confidence: f32,

    /// Word-specific information for the words recognized by Speech in
    /// [transcript][google.cloud.dialogflow.v2.StreamingRecognitionResult.transcript].
    /// Populated if and only if `message_type` = `TRANSCRIPT` and
    /// [InputAudioConfig.enable_word_info] is set.
    ///
    /// [google.cloud.dialogflow.v2.StreamingRecognitionResult.transcript]: crate::model::StreamingRecognitionResult::transcript
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub speech_word_info: std::vec::Vec<crate::model::SpeechWordInfo>,

    /// Time offset of the end of this Speech recognition result relative to the
    /// beginning of the audio. Only populated for `message_type` = `TRANSCRIPT`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub speech_end_offset: std::option::Option<wkt::Duration>,

    /// Detected language code for the transcript.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl StreamingRecognitionResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [message_type][crate::model::StreamingRecognitionResult::message_type].
    pub fn set_message_type<
        T: std::convert::Into<crate::model::streaming_recognition_result::MessageType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.message_type = v.into();
        self
    }

    /// Sets the value of [transcript][crate::model::StreamingRecognitionResult::transcript].
    pub fn set_transcript<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.transcript = v.into();
        self
    }

    /// Sets the value of [is_final][crate::model::StreamingRecognitionResult::is_final].
    pub fn set_is_final<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.is_final = v.into();
        self
    }

    /// Sets the value of [confidence][crate::model::StreamingRecognitionResult::confidence].
    pub fn set_confidence<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.confidence = v.into();
        self
    }

    /// Sets the value of [speech_end_offset][crate::model::StreamingRecognitionResult::speech_end_offset].
    pub fn set_speech_end_offset<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.speech_end_offset = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::StreamingRecognitionResult::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [speech_word_info][crate::model::StreamingRecognitionResult::speech_word_info].
    pub fn set_speech_word_info<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SpeechWordInfo>,
    {
        use std::iter::Iterator;
        self.speech_word_info = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for StreamingRecognitionResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.StreamingRecognitionResult"
    }
}

/// Defines additional types related to [StreamingRecognitionResult].
pub mod streaming_recognition_result {
    #[allow(unused_imports)]
    use super::*;

    /// Type of the response message.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum MessageType {
        /// Not specified. Should never be used.
        Unspecified,
        /// Message contains a (possibly partial) transcript.
        Transcript,
        /// This event indicates that the server has detected the end of the user's
        /// speech utterance and expects no additional inputs.
        /// Therefore, the server will not process additional audio (although it may
        /// subsequently return additional results). The client should stop sending
        /// additional audio data, half-close the gRPC connection, and wait for any
        /// additional results until the server closes the gRPC connection. This
        /// message is only sent if `single_utterance` was set to `true`, and is not
        /// used otherwise.
        EndOfSingleUtterance,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [MessageType::value] or
        /// [MessageType::name].
        UnknownValue(message_type::UnknownValue),
    }

    #[doc(hidden)]
    pub mod message_type {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl MessageType {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Transcript => std::option::Option::Some(1),
                Self::EndOfSingleUtterance => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("MESSAGE_TYPE_UNSPECIFIED"),
                Self::Transcript => std::option::Option::Some("TRANSCRIPT"),
                Self::EndOfSingleUtterance => std::option::Option::Some("END_OF_SINGLE_UTTERANCE"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for MessageType {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for MessageType {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for MessageType {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Transcript,
                2 => Self::EndOfSingleUtterance,
                _ => Self::UnknownValue(message_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for MessageType {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "MESSAGE_TYPE_UNSPECIFIED" => Self::Unspecified,
                "TRANSCRIPT" => Self::Transcript,
                "END_OF_SINGLE_UTTERANCE" => Self::EndOfSingleUtterance,
                _ => Self::UnknownValue(message_type::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for MessageType {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Transcript => serializer.serialize_i32(1),
                Self::EndOfSingleUtterance => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for MessageType {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<MessageType>::new(
                ".google.cloud.dialogflow.v2.StreamingRecognitionResult.MessageType",
            ))
        }
    }
}

/// Auxiliary proto messages.
///
/// Represents the natural language text to be processed.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TextInput {
    /// Required. The UTF-8 encoded natural language text to be processed.
    /// Text length must not exceed 256 characters for virtual agent interactions.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub text: std::string::String,

    /// Required. The language of this conversational query. See [Language
    /// Support](https://cloud.google.com/dialogflow/docs/reference/language)
    /// for a list of the currently supported language codes. Note that queries in
    /// the same session do not necessarily need to specify the same language.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl TextInput {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [text][crate::model::TextInput::text].
    pub fn set_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.text = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::TextInput::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for TextInput {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.TextInput"
    }
}

/// Events allow for matching intents by event name instead of the natural
/// language input. For instance, input `<event: { name: "welcome_event",
/// parameters: { name: "Sam" } }>` can trigger a personalized welcome response.
/// The parameter `name` may be used by the agent in the response:
/// `"Hello #welcome_event.name! What can I do for you today?"`.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EventInput {
    /// Required. The unique identifier of the event.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The collection of parameters associated with the event.
    ///
    /// Depending on your protocol or client library language, this is a
    /// map, associative array, symbol table, dictionary, or JSON object
    /// composed of a collection of (MapKey, MapValue) pairs:
    ///
    /// * MapKey type: string
    /// * MapKey value: parameter name
    /// * MapValue type: If parameter's entity type is a composite entity then use
    ///   map, otherwise, depending on the parameter value type, it could be one of
    ///   string, number, boolean, null, list or map.
    /// * MapValue value: If parameter's entity type is a composite entity then use
    ///   map from composite entity property names to property values, otherwise,
    ///   use parameter value.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub parameters: std::option::Option<wkt::Struct>,

    /// Required. The language of this query. See [Language
    /// Support](https://cloud.google.com/dialogflow/docs/reference/language)
    /// for a list of the currently supported language codes. Note that queries in
    /// the same session do not necessarily need to specify the same language.
    ///
    /// This field is ignored when used in the context of a
    /// [WebhookResponse.followup_event_input][google.cloud.dialogflow.v2.WebhookResponse.followup_event_input]
    /// field, because the language was already defined in the originating detect
    /// intent request.
    ///
    /// [google.cloud.dialogflow.v2.WebhookResponse.followup_event_input]: crate::model::WebhookResponse::followup_event_input
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl EventInput {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::EventInput::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [parameters][crate::model::EventInput::parameters].
    pub fn set_parameters<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.parameters = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::EventInput::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }
}

impl wkt::message::Message for EventInput {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.EventInput"
    }
}

/// Configures the types of sentiment analysis to perform.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SentimentAnalysisRequestConfig {
    /// Instructs the service to perform sentiment analysis on
    /// `query_text`. If not provided, sentiment analysis is not performed on
    /// `query_text`.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub analyze_query_text_sentiment: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SentimentAnalysisRequestConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [analyze_query_text_sentiment][crate::model::SentimentAnalysisRequestConfig::analyze_query_text_sentiment].
    pub fn set_analyze_query_text_sentiment<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.analyze_query_text_sentiment = v.into();
        self
    }
}

impl wkt::message::Message for SentimentAnalysisRequestConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SentimentAnalysisRequestConfig"
    }
}

/// The result of sentiment analysis. Sentiment analysis inspects user input
/// and identifies the prevailing subjective opinion, especially to determine a
/// user's attitude as positive, negative, or neutral.
/// For [DetectIntent][], it needs to be configured in
/// [DetectIntentRequest.query_params][google.cloud.dialogflow.v2.DetectIntentRequest.query_params].
/// For [StreamingDetectIntent][], it needs to be configured in
/// [StreamingDetectIntentRequest.query_params][google.cloud.dialogflow.v2.StreamingDetectIntentRequest.query_params].
/// And for
/// [Participants.AnalyzeContent][google.cloud.dialogflow.v2.Participants.AnalyzeContent]
/// and
/// [Participants.StreamingAnalyzeContent][google.cloud.dialogflow.v2.Participants.StreamingAnalyzeContent],
/// it needs to be configured in
/// [ConversationProfile.human_agent_assistant_config][google.cloud.dialogflow.v2.ConversationProfile.human_agent_assistant_config]
///
/// [google.cloud.dialogflow.v2.ConversationProfile.human_agent_assistant_config]: crate::model::ConversationProfile::human_agent_assistant_config
/// [google.cloud.dialogflow.v2.DetectIntentRequest.query_params]: crate::model::DetectIntentRequest::query_params
/// [google.cloud.dialogflow.v2.Participants.AnalyzeContent]: crate::client::Participants::analyze_content
/// [google.cloud.dialogflow.v2.StreamingDetectIntentRequest.query_params]: crate::model::StreamingDetectIntentRequest::query_params
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SentimentAnalysisResult {
    /// The sentiment analysis result for `query_text`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_text_sentiment: std::option::Option<crate::model::Sentiment>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SentimentAnalysisResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [query_text_sentiment][crate::model::SentimentAnalysisResult::query_text_sentiment].
    pub fn set_query_text_sentiment<
        T: std::convert::Into<std::option::Option<crate::model::Sentiment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query_text_sentiment = v.into();
        self
    }
}

impl wkt::message::Message for SentimentAnalysisResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SentimentAnalysisResult"
    }
}

/// The sentiment, such as positive/negative feeling or association, for a unit
/// of analysis, such as the query text. See:
/// <https://cloud.google.com/natural-language/docs/basics#interpreting_sentiment_analysis_values>
/// for how to interpret the result.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Sentiment {
    /// Sentiment score between -1.0 (negative sentiment) and 1.0 (positive
    /// sentiment).
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub score: f32,

    /// A non-negative number in the [0, +inf) range, which represents the absolute
    /// magnitude of sentiment, regardless of score (positive or negative).
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub magnitude: f32,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Sentiment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [score][crate::model::Sentiment::score].
    pub fn set_score<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.score = v.into();
        self
    }

    /// Sets the value of [magnitude][crate::model::Sentiment::magnitude].
    pub fn set_magnitude<T: std::convert::Into<f32>>(mut self, v: T) -> Self {
        self.magnitude = v.into();
        self
    }
}

impl wkt::message::Message for Sentiment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.Sentiment"
    }
}

/// A session represents a conversation between a Dialogflow agent and an
/// end-user. You can create special entities, called session entities, during a
/// session. Session entities can extend or replace custom entity types and only
/// exist during the session that they were created for. All session data,
/// including session entities, is stored by Dialogflow for 20 minutes.
///
/// For more information, see the [session entity
/// guide](https://cloud.google.com/dialogflow/docs/entities-session).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SessionEntityType {
    /// Required. The unique identifier of this session entity type. Format:
    /// `projects/<Project ID>/agent/sessions/<Session ID>/entityTypes/<Entity Type
    /// Display Name>`, or `projects/<Project ID>/agent/environments/<Environment
    /// ID>/users/<User ID>/sessions/<Session ID>/entityTypes/<Entity Type Display
    /// Name>`.
    /// If `Environment ID` is not specified, we assume default 'draft'
    /// environment. If `User ID` is not specified, we assume default '-' user.
    ///
    /// `<Entity Type Display Name>` must be the display name of an existing entity
    /// type in the same agent that will be overridden or supplemented.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Indicates whether the additional data should override or
    /// supplement the custom entity type definition.
    pub entity_override_mode: crate::model::session_entity_type::EntityOverrideMode,

    /// Required. The collection of entities associated with this session entity
    /// type.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub entities: std::vec::Vec<crate::model::entity_type::Entity>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SessionEntityType {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::SessionEntityType::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [entity_override_mode][crate::model::SessionEntityType::entity_override_mode].
    pub fn set_entity_override_mode<
        T: std::convert::Into<crate::model::session_entity_type::EntityOverrideMode>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.entity_override_mode = v.into();
        self
    }

    /// Sets the value of [entities][crate::model::SessionEntityType::entities].
    pub fn set_entities<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::entity_type::Entity>,
    {
        use std::iter::Iterator;
        self.entities = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SessionEntityType {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.SessionEntityType"
    }
}

/// Defines additional types related to [SessionEntityType].
pub mod session_entity_type {
    #[allow(unused_imports)]
    use super::*;

    /// The types of modifications for a session entity type.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum EntityOverrideMode {
        /// Not specified. This value should be never used.
        Unspecified,
        /// The collection of session entities overrides the collection of entities
        /// in the corresponding custom entity type.
        Override,
        /// The collection of session entities extends the collection of entities in
        /// the corresponding custom entity type.
        ///
        /// Note: Even in this override mode calls to `ListSessionEntityTypes`,
        /// `GetSessionEntityType`, `CreateSessionEntityType` and
        /// `UpdateSessionEntityType` only return the additional entities added in
        /// this session entity type. If you want to get the supplemented list,
        /// please call
        /// [EntityTypes.GetEntityType][google.cloud.dialogflow.v2.EntityTypes.GetEntityType]
        /// on the custom entity type and merge.
        ///
        /// [google.cloud.dialogflow.v2.EntityTypes.GetEntityType]: crate::client::EntityTypes::get_entity_type
        Supplement,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [EntityOverrideMode::value] or
        /// [EntityOverrideMode::name].
        UnknownValue(entity_override_mode::UnknownValue),
    }

    #[doc(hidden)]
    pub mod entity_override_mode {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl EntityOverrideMode {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Override => std::option::Option::Some(1),
                Self::Supplement => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("ENTITY_OVERRIDE_MODE_UNSPECIFIED"),
                Self::Override => std::option::Option::Some("ENTITY_OVERRIDE_MODE_OVERRIDE"),
                Self::Supplement => std::option::Option::Some("ENTITY_OVERRIDE_MODE_SUPPLEMENT"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for EntityOverrideMode {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for EntityOverrideMode {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for EntityOverrideMode {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Override,
                2 => Self::Supplement,
                _ => Self::UnknownValue(entity_override_mode::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for EntityOverrideMode {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "ENTITY_OVERRIDE_MODE_UNSPECIFIED" => Self::Unspecified,
                "ENTITY_OVERRIDE_MODE_OVERRIDE" => Self::Override,
                "ENTITY_OVERRIDE_MODE_SUPPLEMENT" => Self::Supplement,
                _ => Self::UnknownValue(entity_override_mode::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for EntityOverrideMode {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Override => serializer.serialize_i32(1),
                Self::Supplement => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for EntityOverrideMode {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<EntityOverrideMode>::new(
                ".google.cloud.dialogflow.v2.SessionEntityType.EntityOverrideMode",
            ))
        }
    }
}

/// The request message for
/// [SessionEntityTypes.ListSessionEntityTypes][google.cloud.dialogflow.v2.SessionEntityTypes.ListSessionEntityTypes].
///
/// [google.cloud.dialogflow.v2.SessionEntityTypes.ListSessionEntityTypes]: crate::client::SessionEntityTypes::list_session_entity_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSessionEntityTypesRequest {
    /// Required. The session to list all session entity types from.
    /// Format: `projects/<Project ID>/agent/sessions/<Session ID>` or
    /// `projects/<Project ID>/agent/environments/<Environment ID>/users/<User ID>/
    /// sessions/<Session ID>`.
    /// If `Environment ID` is not specified, we assume default 'draft'
    /// environment. If `User ID` is not specified, we assume default '-' user.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of items to return in a single page. By
    /// default 100 and at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// Optional. The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListSessionEntityTypesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListSessionEntityTypesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListSessionEntityTypesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListSessionEntityTypesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListSessionEntityTypesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListSessionEntityTypesRequest"
    }
}

/// The response message for
/// [SessionEntityTypes.ListSessionEntityTypes][google.cloud.dialogflow.v2.SessionEntityTypes.ListSessionEntityTypes].
///
/// [google.cloud.dialogflow.v2.SessionEntityTypes.ListSessionEntityTypes]: crate::client::SessionEntityTypes::list_session_entity_types
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSessionEntityTypesResponse {
    /// The list of session entity types. There will be a maximum number of items
    /// returned based on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub session_entity_types: std::vec::Vec<crate::model::SessionEntityType>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListSessionEntityTypesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListSessionEntityTypesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [session_entity_types][crate::model::ListSessionEntityTypesResponse::session_entity_types].
    pub fn set_session_entity_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SessionEntityType>,
    {
        use std::iter::Iterator;
        self.session_entity_types = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListSessionEntityTypesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListSessionEntityTypesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListSessionEntityTypesResponse {
    type PageItem = crate::model::SessionEntityType;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.session_entity_types
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [SessionEntityTypes.GetSessionEntityType][google.cloud.dialogflow.v2.SessionEntityTypes.GetSessionEntityType].
///
/// [google.cloud.dialogflow.v2.SessionEntityTypes.GetSessionEntityType]: crate::client::SessionEntityTypes::get_session_entity_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetSessionEntityTypeRequest {
    /// Required. The name of the session entity type. Format:
    /// `projects/<Project ID>/agent/sessions/<Session ID>/entityTypes/<Entity Type
    /// Display Name>` or `projects/<Project ID>/agent/environments/<Environment
    /// ID>/users/<User ID>/sessions/<Session ID>/entityTypes/<Entity Type Display
    /// Name>`.
    /// If `Environment ID` is not specified, we assume default 'draft'
    /// environment. If `User ID` is not specified, we assume default '-' user.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetSessionEntityTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetSessionEntityTypeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetSessionEntityTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetSessionEntityTypeRequest"
    }
}

/// The request message for
/// [SessionEntityTypes.CreateSessionEntityType][google.cloud.dialogflow.v2.SessionEntityTypes.CreateSessionEntityType].
///
/// [google.cloud.dialogflow.v2.SessionEntityTypes.CreateSessionEntityType]: crate::client::SessionEntityTypes::create_session_entity_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateSessionEntityTypeRequest {
    /// Required. The session to create a session entity type for.
    /// Format: `projects/<Project ID>/agent/sessions/<Session ID>` or
    /// `projects/<Project ID>/agent/environments/<Environment ID>/users/<User ID>/
    /// sessions/<Session ID>`.
    /// If `Environment ID` is not specified, we assume default 'draft'
    /// environment. If `User ID` is not specified, we assume default '-' user.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The session entity type to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub session_entity_type: std::option::Option<crate::model::SessionEntityType>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateSessionEntityTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateSessionEntityTypeRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [session_entity_type][crate::model::CreateSessionEntityTypeRequest::session_entity_type].
    pub fn set_session_entity_type<
        T: std::convert::Into<std::option::Option<crate::model::SessionEntityType>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.session_entity_type = v.into();
        self
    }
}

impl wkt::message::Message for CreateSessionEntityTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateSessionEntityTypeRequest"
    }
}

/// The request message for
/// [SessionEntityTypes.UpdateSessionEntityType][google.cloud.dialogflow.v2.SessionEntityTypes.UpdateSessionEntityType].
///
/// [google.cloud.dialogflow.v2.SessionEntityTypes.UpdateSessionEntityType]: crate::client::SessionEntityTypes::update_session_entity_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateSessionEntityTypeRequest {
    /// Required. The session entity type to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub session_entity_type: std::option::Option<crate::model::SessionEntityType>,

    /// Optional. The mask to control which fields get updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateSessionEntityTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [session_entity_type][crate::model::UpdateSessionEntityTypeRequest::session_entity_type].
    pub fn set_session_entity_type<
        T: std::convert::Into<std::option::Option<crate::model::SessionEntityType>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.session_entity_type = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateSessionEntityTypeRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateSessionEntityTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.UpdateSessionEntityTypeRequest"
    }
}

/// The request message for
/// [SessionEntityTypes.DeleteSessionEntityType][google.cloud.dialogflow.v2.SessionEntityTypes.DeleteSessionEntityType].
///
/// [google.cloud.dialogflow.v2.SessionEntityTypes.DeleteSessionEntityType]: crate::client::SessionEntityTypes::delete_session_entity_type
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteSessionEntityTypeRequest {
    /// Required. The name of the entity type to delete. Format:
    /// `projects/<Project ID>/agent/sessions/<Session ID>/entityTypes/<Entity Type
    /// Display Name>` or `projects/<Project ID>/agent/environments/<Environment
    /// ID>/users/<User ID>/sessions/<Session ID>/entityTypes/<Entity Type Display
    /// Name>`.
    /// If `Environment ID` is not specified, we assume default 'draft'
    /// environment. If `User ID` is not specified, we assume default '-' user.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteSessionEntityTypeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteSessionEntityTypeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteSessionEntityTypeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeleteSessionEntityTypeRequest"
    }
}

/// Represents a single validation error.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ValidationError {
    /// The severity of the error.
    pub severity: crate::model::validation_error::Severity,

    /// The names of the entries that the error is associated with.
    /// Format:
    ///
    /// - `projects/<Project ID>/agent`, if the error is associated with the entire
    ///   agent.
    /// - `projects/<Project ID>/agent/intents/<Intent ID>`, if the error is
    ///   associated with certain intents.
    /// - `projects/<Project ID>/agent/intents/<Intent
    ///   Id>/trainingPhrases/<Training Phrase ID>`, if the error is associated with
    ///   certain intent training phrases.
    /// - `projects/<Project ID>/agent/intents/<Intent Id>/parameters/<Parameter
    ///   ID>`, if the error is associated with certain intent parameters.
    /// - `projects/<Project ID>/agent/entities/<Entity ID>`, if the error is
    ///   associated with certain entities.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub entries: std::vec::Vec<std::string::String>,

    /// The detailed error message.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub error_message: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ValidationError {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [severity][crate::model::ValidationError::severity].
    pub fn set_severity<T: std::convert::Into<crate::model::validation_error::Severity>>(
        mut self,
        v: T,
    ) -> Self {
        self.severity = v.into();
        self
    }

    /// Sets the value of [error_message][crate::model::ValidationError::error_message].
    pub fn set_error_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.error_message = v.into();
        self
    }

    /// Sets the value of [entries][crate::model::ValidationError::entries].
    pub fn set_entries<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.entries = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ValidationError {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ValidationError"
    }
}

/// Defines additional types related to [ValidationError].
pub mod validation_error {
    #[allow(unused_imports)]
    use super::*;

    /// Represents a level of severity.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Severity {
        /// Not specified. This value should never be used.
        Unspecified,
        /// The agent doesn't follow Dialogflow best practices.
        Info,
        /// The agent may not behave as expected.
        Warning,
        /// The agent may experience partial failures.
        Error,
        /// The agent may completely fail.
        Critical,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [Severity::value] or
        /// [Severity::name].
        UnknownValue(severity::UnknownValue),
    }

    #[doc(hidden)]
    pub mod severity {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl Severity {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Info => std::option::Option::Some(1),
                Self::Warning => std::option::Option::Some(2),
                Self::Error => std::option::Option::Some(3),
                Self::Critical => std::option::Option::Some(4),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("SEVERITY_UNSPECIFIED"),
                Self::Info => std::option::Option::Some("INFO"),
                Self::Warning => std::option::Option::Some("WARNING"),
                Self::Error => std::option::Option::Some("ERROR"),
                Self::Critical => std::option::Option::Some("CRITICAL"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for Severity {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for Severity {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for Severity {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Info,
                2 => Self::Warning,
                3 => Self::Error,
                4 => Self::Critical,
                _ => Self::UnknownValue(severity::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for Severity {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "SEVERITY_UNSPECIFIED" => Self::Unspecified,
                "INFO" => Self::Info,
                "WARNING" => Self::Warning,
                "ERROR" => Self::Error,
                "CRITICAL" => Self::Critical,
                _ => Self::UnknownValue(severity::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for Severity {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Info => serializer.serialize_i32(1),
                Self::Warning => serializer.serialize_i32(2),
                Self::Error => serializer.serialize_i32(3),
                Self::Critical => serializer.serialize_i32(4),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for Severity {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<Severity>::new(
                ".google.cloud.dialogflow.v2.ValidationError.Severity",
            ))
        }
    }
}

/// Represents the output of agent validation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ValidationResult {
    /// Contains all validation errors.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub validation_errors: std::vec::Vec<crate::model::ValidationError>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ValidationResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [validation_errors][crate::model::ValidationResult::validation_errors].
    pub fn set_validation_errors<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ValidationError>,
    {
        use std::iter::Iterator;
        self.validation_errors = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ValidationResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ValidationResult"
    }
}

/// You can create multiple versions of your agent and publish them to separate
/// environments.
///
/// When you edit an agent, you are editing the draft agent. At any point, you
/// can save the draft agent as an agent version, which is an immutable snapshot
/// of your agent.
///
/// When you save the draft agent, it is published to the default environment.
/// When you create agent versions, you can publish them to custom environments.
/// You can create a variety of custom environments for:
///
/// - testing
/// - development
/// - production
/// - etc.
///
/// For more information, see the [versions and environments
/// guide](https://cloud.google.com/dialogflow/docs/agents-versions).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Version {
    /// Output only. The unique identifier of this agent version.
    /// Supported formats:
    ///
    /// - `projects/<Project ID>/agent/versions/<Version ID>`
    /// - `projects/<Project ID>/locations/<Location ID>/agent/versions/<Version
    ///   ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. The developer-provided description of this version.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. The sequential number of this version. This field is read-only
    /// which means it cannot be set by create and update methods.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub version_number: i32,

    /// Output only. The creation time of this version. This field is read-only,
    /// i.e., it cannot be set by create and update methods.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The status of this version. This field is read-only and cannot
    /// be set by create and update methods.
    pub status: crate::model::version::VersionStatus,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Version {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Version::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Version::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [version_number][crate::model::Version::version_number].
    pub fn set_version_number<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.version_number = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Version::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [status][crate::model::Version::status].
    pub fn set_status<T: std::convert::Into<crate::model::version::VersionStatus>>(
        mut self,
        v: T,
    ) -> Self {
        self.status = v.into();
        self
    }
}

impl wkt::message::Message for Version {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.Version"
    }
}

/// Defines additional types related to [Version].
pub mod version {
    #[allow(unused_imports)]
    use super::*;

    /// The status of a version.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum VersionStatus {
        /// Not specified. This value is not used.
        Unspecified,
        /// Version is not ready to serve (e.g. training is in progress).
        InProgress,
        /// Version is ready to serve.
        Ready,
        /// Version training failed.
        Failed,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [VersionStatus::value] or
        /// [VersionStatus::name].
        UnknownValue(version_status::UnknownValue),
    }

    #[doc(hidden)]
    pub mod version_status {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl VersionStatus {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::InProgress => std::option::Option::Some(1),
                Self::Ready => std::option::Option::Some(2),
                Self::Failed => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("VERSION_STATUS_UNSPECIFIED"),
                Self::InProgress => std::option::Option::Some("IN_PROGRESS"),
                Self::Ready => std::option::Option::Some("READY"),
                Self::Failed => std::option::Option::Some("FAILED"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for VersionStatus {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for VersionStatus {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for VersionStatus {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::InProgress,
                2 => Self::Ready,
                3 => Self::Failed,
                _ => Self::UnknownValue(version_status::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for VersionStatus {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "VERSION_STATUS_UNSPECIFIED" => Self::Unspecified,
                "IN_PROGRESS" => Self::InProgress,
                "READY" => Self::Ready,
                "FAILED" => Self::Failed,
                _ => Self::UnknownValue(version_status::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for VersionStatus {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::InProgress => serializer.serialize_i32(1),
                Self::Ready => serializer.serialize_i32(2),
                Self::Failed => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for VersionStatus {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<VersionStatus>::new(
                ".google.cloud.dialogflow.v2.Version.VersionStatus",
            ))
        }
    }
}

/// The request message for
/// [Versions.ListVersions][google.cloud.dialogflow.v2.Versions.ListVersions].
///
/// [google.cloud.dialogflow.v2.Versions.ListVersions]: crate::client::Versions::list_versions
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListVersionsRequest {
    /// Required. The agent to list all versions from.
    /// Supported formats:
    ///
    /// - `projects/<Project ID>/agent`
    /// - `projects/<Project ID>/locations/<Location ID>/agent`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of items to return in a single page. By
    /// default 100 and at most 1000.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// Optional. The next_page_token value returned from a previous list request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListVersionsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListVersionsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListVersionsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListVersionsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListVersionsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListVersionsRequest"
    }
}

/// The response message for
/// [Versions.ListVersions][google.cloud.dialogflow.v2.Versions.ListVersions].
///
/// [google.cloud.dialogflow.v2.Versions.ListVersions]: crate::client::Versions::list_versions
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListVersionsResponse {
    /// The list of agent versions. There will be a maximum number of items
    /// returned based on the page_size field in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub versions: std::vec::Vec<crate::model::Version>,

    /// Token to retrieve the next page of results, or empty if there are no
    /// more results in the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListVersionsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListVersionsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [versions][crate::model::ListVersionsResponse::versions].
    pub fn set_versions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Version>,
    {
        use std::iter::Iterator;
        self.versions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListVersionsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.ListVersionsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListVersionsResponse {
    type PageItem = crate::model::Version;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.versions
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request message for
/// [Versions.GetVersion][google.cloud.dialogflow.v2.Versions.GetVersion].
///
/// [google.cloud.dialogflow.v2.Versions.GetVersion]: crate::client::Versions::get_version
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetVersionRequest {
    /// Required. The name of the version.
    /// Supported formats:
    ///
    /// - `projects/<Project ID>/agent/versions/<Version ID>`
    /// - `projects/<Project ID>/locations/<Location ID>/agent/versions/<Version
    ///   ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetVersionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetVersionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetVersionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.GetVersionRequest"
    }
}

/// The request message for
/// [Versions.CreateVersion][google.cloud.dialogflow.v2.Versions.CreateVersion].
///
/// [google.cloud.dialogflow.v2.Versions.CreateVersion]: crate::client::Versions::create_version
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateVersionRequest {
    /// Required. The agent to create a version for.
    /// Supported formats:
    ///
    /// - `projects/<Project ID>/agent`
    /// - `projects/<Project ID>/locations/<Location ID>/agent`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The version to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub version: std::option::Option<crate::model::Version>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateVersionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateVersionRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [version][crate::model::CreateVersionRequest::version].
    pub fn set_version<T: std::convert::Into<std::option::Option<crate::model::Version>>>(
        mut self,
        v: T,
    ) -> Self {
        self.version = v.into();
        self
    }
}

impl wkt::message::Message for CreateVersionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.CreateVersionRequest"
    }
}

/// The request message for
/// [Versions.UpdateVersion][google.cloud.dialogflow.v2.Versions.UpdateVersion].
///
/// [google.cloud.dialogflow.v2.Versions.UpdateVersion]: crate::client::Versions::update_version
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateVersionRequest {
    /// Required. The version to update.
    /// Supported formats:
    ///
    /// - `projects/<Project ID>/agent/versions/<Version ID>`
    /// - `projects/<Project ID>/locations/<Location ID>/agent/versions/<Version
    ///   ID>`
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub version: std::option::Option<crate::model::Version>,

    /// Required. The mask to control which fields get updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateVersionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [version][crate::model::UpdateVersionRequest::version].
    pub fn set_version<T: std::convert::Into<std::option::Option<crate::model::Version>>>(
        mut self,
        v: T,
    ) -> Self {
        self.version = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateVersionRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateVersionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.UpdateVersionRequest"
    }
}

/// The request message for
/// [Versions.DeleteVersion][google.cloud.dialogflow.v2.Versions.DeleteVersion].
///
/// [google.cloud.dialogflow.v2.Versions.DeleteVersion]: crate::client::Versions::delete_version
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteVersionRequest {
    /// Required. The name of the version to delete.
    /// Supported formats:
    ///
    /// - `projects/<Project ID>/agent/versions/<Version ID>`
    /// - `projects/<Project ID>/locations/<Location ID>/agent/versions/<Version
    ///   ID>`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteVersionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteVersionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteVersionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.DeleteVersionRequest"
    }
}

/// The request message for a webhook call.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct WebhookRequest {
    /// The unique identifier of detectIntent request session.
    /// Can be used to identify end-user inside webhook implementation.
    /// Format: `projects/<Project ID>/agent/sessions/<Session ID>`, or
    /// `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
    /// ID>/sessions/<Session ID>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub session: std::string::String,

    /// The unique identifier of the response. Contains the same value as
    /// `[Streaming]DetectIntentResponse.response_id`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub response_id: std::string::String,

    /// The result of the conversational query or event processing. Contains the
    /// same value as `[Streaming]DetectIntentResponse.query_result`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub query_result: std::option::Option<crate::model::QueryResult>,

    /// Optional. The contents of the original request that was passed to
    /// `[Streaming]DetectIntent` call.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub original_detect_intent_request:
        std::option::Option<crate::model::OriginalDetectIntentRequest>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl WebhookRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [session][crate::model::WebhookRequest::session].
    pub fn set_session<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.session = v.into();
        self
    }

    /// Sets the value of [response_id][crate::model::WebhookRequest::response_id].
    pub fn set_response_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.response_id = v.into();
        self
    }

    /// Sets the value of [query_result][crate::model::WebhookRequest::query_result].
    pub fn set_query_result<
        T: std::convert::Into<std::option::Option<crate::model::QueryResult>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.query_result = v.into();
        self
    }

    /// Sets the value of [original_detect_intent_request][crate::model::WebhookRequest::original_detect_intent_request].
    pub fn set_original_detect_intent_request<
        T: std::convert::Into<std::option::Option<crate::model::OriginalDetectIntentRequest>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.original_detect_intent_request = v.into();
        self
    }
}

impl wkt::message::Message for WebhookRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.WebhookRequest"
    }
}

/// The response message for a webhook call.
///
/// This response is validated by the Dialogflow server. If validation fails,
/// an error will be returned in the
/// [QueryResult.diagnostic_info][google.cloud.dialogflow.v2.QueryResult.diagnostic_info]
/// field. Setting JSON fields to an empty value with the wrong type is a common
/// error. To avoid this error:
///
/// - Use `""` for empty strings
/// - Use `{}` or `null` for empty objects
/// - Use `[]` or `null` for empty arrays
///
/// For more information, see the
/// [Protocol Buffers Language
/// Guide](https://developers.google.com/protocol-buffers/docs/proto3#json).
///
/// [google.cloud.dialogflow.v2.QueryResult.diagnostic_info]: crate::model::QueryResult::diagnostic_info
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct WebhookResponse {
    /// Optional. The text response message intended for the end-user.
    /// It is recommended to use `fulfillment_messages.text.text[0]` instead.
    /// When provided, Dialogflow uses this field to populate
    /// [QueryResult.fulfillment_text][google.cloud.dialogflow.v2.QueryResult.fulfillment_text]
    /// sent to the integration or API caller.
    ///
    /// [google.cloud.dialogflow.v2.QueryResult.fulfillment_text]: crate::model::QueryResult::fulfillment_text
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub fulfillment_text: std::string::String,

    /// Optional. The rich response messages intended for the end-user.
    /// When provided, Dialogflow uses this field to populate
    /// [QueryResult.fulfillment_messages][google.cloud.dialogflow.v2.QueryResult.fulfillment_messages]
    /// sent to the integration or API caller.
    ///
    /// [google.cloud.dialogflow.v2.QueryResult.fulfillment_messages]: crate::model::QueryResult::fulfillment_messages
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub fulfillment_messages: std::vec::Vec<crate::model::intent::Message>,

    /// Optional. A custom field used to identify the webhook source.
    /// Arbitrary strings are supported.
    /// When provided, Dialogflow uses this field to populate
    /// [QueryResult.webhook_source][google.cloud.dialogflow.v2.QueryResult.webhook_source]
    /// sent to the integration or API caller.
    ///
    /// [google.cloud.dialogflow.v2.QueryResult.webhook_source]: crate::model::QueryResult::webhook_source
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source: std::string::String,

    /// Optional. This field can be used to pass custom data from your webhook to
    /// the integration or API caller. Arbitrary JSON objects are supported. When
    /// provided, Dialogflow uses this field to populate
    /// [QueryResult.webhook_payload][google.cloud.dialogflow.v2.QueryResult.webhook_payload]
    /// sent to the integration or API caller. This field is also used by the
    /// [Google Assistant
    /// integration](https://cloud.google.com/dialogflow/docs/integrations/aog)
    /// for rich response messages.
    /// See the format definition at [Google Assistant Dialogflow webhook
    /// format](https://developers.google.com/assistant/actions/build/json/dialogflow-webhook-json)
    ///
    /// [google.cloud.dialogflow.v2.QueryResult.webhook_payload]: crate::model::QueryResult::webhook_payload
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub payload: std::option::Option<wkt::Struct>,

    /// Optional. The collection of output contexts that will overwrite currently
    /// active contexts for the session and reset their lifespans.
    /// When provided, Dialogflow uses this field to populate
    /// [QueryResult.output_contexts][google.cloud.dialogflow.v2.QueryResult.output_contexts]
    /// sent to the integration or API caller.
    ///
    /// [google.cloud.dialogflow.v2.QueryResult.output_contexts]: crate::model::QueryResult::output_contexts
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub output_contexts: std::vec::Vec<crate::model::Context>,

    /// Optional. Invokes the supplied events.
    /// When this field is set, Dialogflow ignores the `fulfillment_text`,
    /// `fulfillment_messages`, and `payload` fields.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub followup_event_input: std::option::Option<crate::model::EventInput>,

    /// Optional. Additional session entity types to replace or extend developer
    /// entity types with. The entity synonyms apply to all languages and persist
    /// for the session. Setting this data from a webhook overwrites
    /// the session entity types that have been set using `detectIntent`,
    /// `streamingDetectIntent` or
    /// [SessionEntityType][google.cloud.dialogflow.v2.SessionEntityType]
    /// management methods.
    ///
    /// [google.cloud.dialogflow.v2.SessionEntityType]: crate::model::SessionEntityType
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub session_entity_types: std::vec::Vec<crate::model::SessionEntityType>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl WebhookResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [fulfillment_text][crate::model::WebhookResponse::fulfillment_text].
    pub fn set_fulfillment_text<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.fulfillment_text = v.into();
        self
    }

    /// Sets the value of [source][crate::model::WebhookResponse::source].
    pub fn set_source<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source = v.into();
        self
    }

    /// Sets the value of [payload][crate::model::WebhookResponse::payload].
    pub fn set_payload<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.payload = v.into();
        self
    }

    /// Sets the value of [followup_event_input][crate::model::WebhookResponse::followup_event_input].
    pub fn set_followup_event_input<
        T: std::convert::Into<std::option::Option<crate::model::EventInput>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.followup_event_input = v.into();
        self
    }

    /// Sets the value of [fulfillment_messages][crate::model::WebhookResponse::fulfillment_messages].
    pub fn set_fulfillment_messages<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::intent::Message>,
    {
        use std::iter::Iterator;
        self.fulfillment_messages = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [output_contexts][crate::model::WebhookResponse::output_contexts].
    pub fn set_output_contexts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Context>,
    {
        use std::iter::Iterator;
        self.output_contexts = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [session_entity_types][crate::model::WebhookResponse::session_entity_types].
    pub fn set_session_entity_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::SessionEntityType>,
    {
        use std::iter::Iterator;
        self.session_entity_types = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for WebhookResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.WebhookResponse"
    }
}

/// Represents the contents of the original request that was passed to
/// the `[Streaming]DetectIntent` call.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OriginalDetectIntentRequest {
    /// The source of this request, e.g., `google`, `facebook`, `slack`. It is set
    /// by Dialogflow-owned servers.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source: std::string::String,

    /// Optional. The version of the protocol used for this request.
    /// This field is AoG-specific.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub version: std::string::String,

    /// Optional. This field is set to the value of the `QueryParameters.payload`
    /// field passed in the request. Some integrations that query a Dialogflow
    /// agent may provide additional information in the payload.
    ///
    /// In particular, for the Dialogflow Phone Gateway integration, this field has
    /// the form:
    ///
    /// Note: The caller ID field (`caller_id`) will be redacted for Trial
    /// Edition agents and populated with the caller ID in [E.164
    /// format](https://en.wikipedia.org/wiki/E.164) for Essentials Edition agents.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub payload: std::option::Option<wkt::Struct>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl OriginalDetectIntentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [source][crate::model::OriginalDetectIntentRequest::source].
    pub fn set_source<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source = v.into();
        self
    }

    /// Sets the value of [version][crate::model::OriginalDetectIntentRequest::version].
    pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.version = v.into();
        self
    }

    /// Sets the value of [payload][crate::model::OriginalDetectIntentRequest::payload].
    pub fn set_payload<T: std::convert::Into<std::option::Option<wkt::Struct>>>(
        mut self,
        v: T,
    ) -> Self {
        self.payload = v.into();
        self
    }
}

impl wkt::message::Message for OriginalDetectIntentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.dialogflow.v2.OriginalDetectIntentRequest"
    }
}

/// [DTMF](https://en.wikipedia.org/wiki/Dual-tone_multi-frequency_signaling)
/// digit in Telephony Gateway.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum TelephonyDtmf {
    /// Not specified. This value may be used to indicate an absent digit.
    Unspecified,
    /// Number: '1'.
    DtmfOne,
    /// Number: '2'.
    DtmfTwo,
    /// Number: '3'.
    DtmfThree,
    /// Number: '4'.
    DtmfFour,
    /// Number: '5'.
    DtmfFive,
    /// Number: '6'.
    DtmfSix,
    /// Number: '7'.
    DtmfSeven,
    /// Number: '8'.
    DtmfEight,
    /// Number: '9'.
    DtmfNine,
    /// Number: '0'.
    DtmfZero,
    /// Letter: 'A'.
    DtmfA,
    /// Letter: 'B'.
    DtmfB,
    /// Letter: 'C'.
    DtmfC,
    /// Letter: 'D'.
    DtmfD,
    /// Asterisk/star: '*'.
    DtmfStar,
    /// Pound/diamond/hash/square/gate/octothorpe: '#'.
    DtmfPound,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [TelephonyDtmf::value] or
    /// [TelephonyDtmf::name].
    UnknownValue(telephony_dtmf::UnknownValue),
}

#[doc(hidden)]
pub mod telephony_dtmf {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl TelephonyDtmf {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::DtmfOne => std::option::Option::Some(1),
            Self::DtmfTwo => std::option::Option::Some(2),
            Self::DtmfThree => std::option::Option::Some(3),
            Self::DtmfFour => std::option::Option::Some(4),
            Self::DtmfFive => std::option::Option::Some(5),
            Self::DtmfSix => std::option::Option::Some(6),
            Self::DtmfSeven => std::option::Option::Some(7),
            Self::DtmfEight => std::option::Option::Some(8),
            Self::DtmfNine => std::option::Option::Some(9),
            Self::DtmfZero => std::option::Option::Some(10),
            Self::DtmfA => std::option::Option::Some(11),
            Self::DtmfB => std::option::Option::Some(12),
            Self::DtmfC => std::option::Option::Some(13),
            Self::DtmfD => std::option::Option::Some(14),
            Self::DtmfStar => std::option::Option::Some(15),
            Self::DtmfPound => std::option::Option::Some(16),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("TELEPHONY_DTMF_UNSPECIFIED"),
            Self::DtmfOne => std::option::Option::Some("DTMF_ONE"),
            Self::DtmfTwo => std::option::Option::Some("DTMF_TWO"),
            Self::DtmfThree => std::option::Option::Some("DTMF_THREE"),
            Self::DtmfFour => std::option::Option::Some("DTMF_FOUR"),
            Self::DtmfFive => std::option::Option::Some("DTMF_FIVE"),
            Self::DtmfSix => std::option::Option::Some("DTMF_SIX"),
            Self::DtmfSeven => std::option::Option::Some("DTMF_SEVEN"),
            Self::DtmfEight => std::option::Option::Some("DTMF_EIGHT"),
            Self::DtmfNine => std::option::Option::Some("DTMF_NINE"),
            Self::DtmfZero => std::option::Option::Some("DTMF_ZERO"),
            Self::DtmfA => std::option::Option::Some("DTMF_A"),
            Self::DtmfB => std::option::Option::Some("DTMF_B"),
            Self::DtmfC => std::option::Option::Some("DTMF_C"),
            Self::DtmfD => std::option::Option::Some("DTMF_D"),
            Self::DtmfStar => std::option::Option::Some("DTMF_STAR"),
            Self::DtmfPound => std::option::Option::Some("DTMF_POUND"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for TelephonyDtmf {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for TelephonyDtmf {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for TelephonyDtmf {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::DtmfOne,
            2 => Self::DtmfTwo,
            3 => Self::DtmfThree,
            4 => Self::DtmfFour,
            5 => Self::DtmfFive,
            6 => Self::DtmfSix,
            7 => Self::DtmfSeven,
            8 => Self::DtmfEight,
            9 => Self::DtmfNine,
            10 => Self::DtmfZero,
            11 => Self::DtmfA,
            12 => Self::DtmfB,
            13 => Self::DtmfC,
            14 => Self::DtmfD,
            15 => Self::DtmfStar,
            16 => Self::DtmfPound,
            _ => Self::UnknownValue(telephony_dtmf::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for TelephonyDtmf {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "TELEPHONY_DTMF_UNSPECIFIED" => Self::Unspecified,
            "DTMF_ONE" => Self::DtmfOne,
            "DTMF_TWO" => Self::DtmfTwo,
            "DTMF_THREE" => Self::DtmfThree,
            "DTMF_FOUR" => Self::DtmfFour,
            "DTMF_FIVE" => Self::DtmfFive,
            "DTMF_SIX" => Self::DtmfSix,
            "DTMF_SEVEN" => Self::DtmfSeven,
            "DTMF_EIGHT" => Self::DtmfEight,
            "DTMF_NINE" => Self::DtmfNine,
            "DTMF_ZERO" => Self::DtmfZero,
            "DTMF_A" => Self::DtmfA,
            "DTMF_B" => Self::DtmfB,
            "DTMF_C" => Self::DtmfC,
            "DTMF_D" => Self::DtmfD,
            "DTMF_STAR" => Self::DtmfStar,
            "DTMF_POUND" => Self::DtmfPound,
            _ => Self::UnknownValue(telephony_dtmf::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for TelephonyDtmf {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::DtmfOne => serializer.serialize_i32(1),
            Self::DtmfTwo => serializer.serialize_i32(2),
            Self::DtmfThree => serializer.serialize_i32(3),
            Self::DtmfFour => serializer.serialize_i32(4),
            Self::DtmfFive => serializer.serialize_i32(5),
            Self::DtmfSix => serializer.serialize_i32(6),
            Self::DtmfSeven => serializer.serialize_i32(7),
            Self::DtmfEight => serializer.serialize_i32(8),
            Self::DtmfNine => serializer.serialize_i32(9),
            Self::DtmfZero => serializer.serialize_i32(10),
            Self::DtmfA => serializer.serialize_i32(11),
            Self::DtmfB => serializer.serialize_i32(12),
            Self::DtmfC => serializer.serialize_i32(13),
            Self::DtmfD => serializer.serialize_i32(14),
            Self::DtmfStar => serializer.serialize_i32(15),
            Self::DtmfPound => serializer.serialize_i32(16),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for TelephonyDtmf {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<TelephonyDtmf>::new(
            ".google.cloud.dialogflow.v2.TelephonyDtmf",
        ))
    }
}

/// Audio encoding of the audio content sent in the conversational query request.
/// Refer to the
/// [Cloud Speech API
/// documentation](https://cloud.google.com/speech-to-text/docs/basics) for more
/// details.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum AudioEncoding {
    /// Not specified.
    Unspecified,
    /// Uncompressed 16-bit signed little-endian samples (Linear PCM).
    Linear16,
    /// [`FLAC`](https://xiph.org/flac/documentation.html) (Free Lossless Audio
    /// Codec) is the recommended encoding because it is lossless (therefore
    /// recognition is not compromised) and requires only about half the
    /// bandwidth of `LINEAR16`. `FLAC` stream encoding supports 16-bit and
    /// 24-bit samples, however, not all fields in `STREAMINFO` are supported.
    Flac,
    /// 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law.
    Mulaw,
    /// Adaptive Multi-Rate Narrowband codec. `sample_rate_hertz` must be 8000.
    Amr,
    /// Adaptive Multi-Rate Wideband codec. `sample_rate_hertz` must be 16000.
    AmrWb,
    /// Opus encoded audio frames in Ogg container
    /// ([OggOpus](https://wiki.xiph.org/OggOpus)).
    /// `sample_rate_hertz` must be 16000.
    OggOpus,
    /// Although the use of lossy encodings is not recommended, if a very low
    /// bitrate encoding is required, `OGG_OPUS` is highly preferred over
    /// Speex encoding. The [Speex](https://speex.org/) encoding supported by
    /// Dialogflow API has a header byte in each block, as in MIME type
    /// `audio/x-speex-with-header-byte`.
    /// It is a variant of the RTP Speex encoding defined in
    /// [RFC 5574](https://tools.ietf.org/html/rfc5574).
    /// The stream is a sequence of blocks, one block per RTP packet. Each block
    /// starts with a byte containing the length of the block, in bytes, followed
    /// by one or more frames of Speex data, padded to an integral number of
    /// bytes (octets) as specified in RFC 5574. In other words, each RTP header
    /// is replaced with a single byte containing the block length. Only Speex
    /// wideband is supported. `sample_rate_hertz` must be 16000.
    SpeexWithHeaderByte,
    /// 8-bit samples that compand 13-bit audio samples using G.711 PCMU/a-law.
    Alaw,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [AudioEncoding::value] or
    /// [AudioEncoding::name].
    UnknownValue(audio_encoding::UnknownValue),
}

#[doc(hidden)]
pub mod audio_encoding {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl AudioEncoding {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::Linear16 => std::option::Option::Some(1),
            Self::Flac => std::option::Option::Some(2),
            Self::Mulaw => std::option::Option::Some(3),
            Self::Amr => std::option::Option::Some(4),
            Self::AmrWb => std::option::Option::Some(5),
            Self::OggOpus => std::option::Option::Some(6),
            Self::SpeexWithHeaderByte => std::option::Option::Some(7),
            Self::Alaw => std::option::Option::Some(8),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("AUDIO_ENCODING_UNSPECIFIED"),
            Self::Linear16 => std::option::Option::Some("AUDIO_ENCODING_LINEAR_16"),
            Self::Flac => std::option::Option::Some("AUDIO_ENCODING_FLAC"),
            Self::Mulaw => std::option::Option::Some("AUDIO_ENCODING_MULAW"),
            Self::Amr => std::option::Option::Some("AUDIO_ENCODING_AMR"),
            Self::AmrWb => std::option::Option::Some("AUDIO_ENCODING_AMR_WB"),
            Self::OggOpus => std::option::Option::Some("AUDIO_ENCODING_OGG_OPUS"),
            Self::SpeexWithHeaderByte => {
                std::option::Option::Some("AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE")
            }
            Self::Alaw => std::option::Option::Some("AUDIO_ENCODING_ALAW"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for AudioEncoding {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for AudioEncoding {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for AudioEncoding {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::Linear16,
            2 => Self::Flac,
            3 => Self::Mulaw,
            4 => Self::Amr,
            5 => Self::AmrWb,
            6 => Self::OggOpus,
            7 => Self::SpeexWithHeaderByte,
            8 => Self::Alaw,
            _ => Self::UnknownValue(audio_encoding::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for AudioEncoding {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "AUDIO_ENCODING_UNSPECIFIED" => Self::Unspecified,
            "AUDIO_ENCODING_LINEAR_16" => Self::Linear16,
            "AUDIO_ENCODING_FLAC" => Self::Flac,
            "AUDIO_ENCODING_MULAW" => Self::Mulaw,
            "AUDIO_ENCODING_AMR" => Self::Amr,
            "AUDIO_ENCODING_AMR_WB" => Self::AmrWb,
            "AUDIO_ENCODING_OGG_OPUS" => Self::OggOpus,
            "AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE" => Self::SpeexWithHeaderByte,
            "AUDIO_ENCODING_ALAW" => Self::Alaw,
            _ => Self::UnknownValue(audio_encoding::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for AudioEncoding {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::Linear16 => serializer.serialize_i32(1),
            Self::Flac => serializer.serialize_i32(2),
            Self::Mulaw => serializer.serialize_i32(3),
            Self::Amr => serializer.serialize_i32(4),
            Self::AmrWb => serializer.serialize_i32(5),
            Self::OggOpus => serializer.serialize_i32(6),
            Self::SpeexWithHeaderByte => serializer.serialize_i32(7),
            Self::Alaw => serializer.serialize_i32(8),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for AudioEncoding {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<AudioEncoding>::new(
            ".google.cloud.dialogflow.v2.AudioEncoding",
        ))
    }
}

/// Variant of the specified [Speech
/// model][google.cloud.dialogflow.v2.InputAudioConfig.model] to use.
///
/// See the [Cloud Speech
/// documentation](https://cloud.google.com/speech-to-text/docs/enhanced-models)
/// for which models have different variants. For example, the "phone_call" model
/// has both a standard and an enhanced variant. When you use an enhanced model,
/// you will generally receive higher quality results than for a standard model.
///
/// [google.cloud.dialogflow.v2.InputAudioConfig.model]: crate::model::InputAudioConfig::model
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum SpeechModelVariant {
    /// No model variant specified. In this case Dialogflow defaults to
    /// USE_BEST_AVAILABLE.
    Unspecified,
    /// Use the best available variant of the [Speech model][model] that the caller
    /// is eligible for.
    ///
    /// Please see the [Dialogflow
    /// docs](https://cloud.google.com/dialogflow/docs/data-logging) for
    /// how to make your project eligible for enhanced models.
    UseBestAvailable,
    /// Use standard model variant even if an enhanced model is available.  See the
    /// [Cloud Speech
    /// documentation](https://cloud.google.com/speech-to-text/docs/enhanced-models)
    /// for details about enhanced models.
    UseStandard,
    /// Use an enhanced model variant:
    ///
    /// * If an enhanced variant does not exist for the given
    ///   [model][google.cloud.dialogflow.v2.InputAudioConfig.model] and request
    ///   language, Dialogflow falls back to the standard variant.
    ///
    /// * The [Cloud Speech
    ///   documentation](https://cloud.google.com/speech-to-text/docs/enhanced-models)
    ///   describes which models have enhanced variants.
    ///
    /// * If the API caller isn't eligible for enhanced models, Dialogflow returns
    ///   an error. Please see the [Dialogflow
    ///   docs](https://cloud.google.com/dialogflow/docs/data-logging)
    ///   for how to make your project eligible.
    ///
    ///
    /// [google.cloud.dialogflow.v2.InputAudioConfig.model]: crate::model::InputAudioConfig::model
    UseEnhanced,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [SpeechModelVariant::value] or
    /// [SpeechModelVariant::name].
    UnknownValue(speech_model_variant::UnknownValue),
}

#[doc(hidden)]
pub mod speech_model_variant {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl SpeechModelVariant {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::UseBestAvailable => std::option::Option::Some(1),
            Self::UseStandard => std::option::Option::Some(2),
            Self::UseEnhanced => std::option::Option::Some(3),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("SPEECH_MODEL_VARIANT_UNSPECIFIED"),
            Self::UseBestAvailable => std::option::Option::Some("USE_BEST_AVAILABLE"),
            Self::UseStandard => std::option::Option::Some("USE_STANDARD"),
            Self::UseEnhanced => std::option::Option::Some("USE_ENHANCED"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for SpeechModelVariant {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for SpeechModelVariant {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for SpeechModelVariant {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::UseBestAvailable,
            2 => Self::UseStandard,
            3 => Self::UseEnhanced,
            _ => Self::UnknownValue(speech_model_variant::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for SpeechModelVariant {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "SPEECH_MODEL_VARIANT_UNSPECIFIED" => Self::Unspecified,
            "USE_BEST_AVAILABLE" => Self::UseBestAvailable,
            "USE_STANDARD" => Self::UseStandard,
            "USE_ENHANCED" => Self::UseEnhanced,
            _ => Self::UnknownValue(speech_model_variant::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for SpeechModelVariant {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::UseBestAvailable => serializer.serialize_i32(1),
            Self::UseStandard => serializer.serialize_i32(2),
            Self::UseEnhanced => serializer.serialize_i32(3),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for SpeechModelVariant {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<SpeechModelVariant>::new(
            ".google.cloud.dialogflow.v2.SpeechModelVariant",
        ))
    }
}

/// Gender of the voice as described in
/// [SSML voice element](https://www.w3.org/TR/speech-synthesis11/#edef_voice).
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum SsmlVoiceGender {
    /// An unspecified gender, which means that the client doesn't care which
    /// gender the selected voice will have.
    Unspecified,
    /// A male voice.
    Male,
    /// A female voice.
    Female,
    /// A gender-neutral voice.
    Neutral,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [SsmlVoiceGender::value] or
    /// [SsmlVoiceGender::name].
    UnknownValue(ssml_voice_gender::UnknownValue),
}

#[doc(hidden)]
pub mod ssml_voice_gender {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl SsmlVoiceGender {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::Male => std::option::Option::Some(1),
            Self::Female => std::option::Option::Some(2),
            Self::Neutral => std::option::Option::Some(3),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("SSML_VOICE_GENDER_UNSPECIFIED"),
            Self::Male => std::option::Option::Some("SSML_VOICE_GENDER_MALE"),
            Self::Female => std::option::Option::Some("SSML_VOICE_GENDER_FEMALE"),
            Self::Neutral => std::option::Option::Some("SSML_VOICE_GENDER_NEUTRAL"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for SsmlVoiceGender {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for SsmlVoiceGender {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for SsmlVoiceGender {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::Male,
            2 => Self::Female,
            3 => Self::Neutral,
            _ => Self::UnknownValue(ssml_voice_gender::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for SsmlVoiceGender {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "SSML_VOICE_GENDER_UNSPECIFIED" => Self::Unspecified,
            "SSML_VOICE_GENDER_MALE" => Self::Male,
            "SSML_VOICE_GENDER_FEMALE" => Self::Female,
            "SSML_VOICE_GENDER_NEUTRAL" => Self::Neutral,
            _ => Self::UnknownValue(ssml_voice_gender::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for SsmlVoiceGender {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::Male => serializer.serialize_i32(1),
            Self::Female => serializer.serialize_i32(2),
            Self::Neutral => serializer.serialize_i32(3),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for SsmlVoiceGender {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<SsmlVoiceGender>::new(
            ".google.cloud.dialogflow.v2.SsmlVoiceGender",
        ))
    }
}

/// Audio encoding of the output audio format in Text-To-Speech.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum OutputAudioEncoding {
    /// Not specified.
    Unspecified,
    /// Uncompressed 16-bit signed little-endian samples (Linear PCM).
    /// Audio content returned as LINEAR16 also contains a WAV header.
    Linear16,
    /// MP3 audio at 32kbps.
    Mp3,
    /// MP3 audio at 64kbps.
    Mp364Kbps,
    /// Opus encoded audio wrapped in an ogg container. The result will be a
    /// file which can be played natively on Android, and in browsers (at least
    /// Chrome and Firefox). The quality of the encoding is considerably higher
    /// than MP3 while using approximately the same bitrate.
    OggOpus,
    /// 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law.
    Mulaw,
    /// 8-bit samples that compand 13-bit audio samples using G.711 PCMU/a-law.
    Alaw,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [OutputAudioEncoding::value] or
    /// [OutputAudioEncoding::name].
    UnknownValue(output_audio_encoding::UnknownValue),
}

#[doc(hidden)]
pub mod output_audio_encoding {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl OutputAudioEncoding {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::Linear16 => std::option::Option::Some(1),
            Self::Mp3 => std::option::Option::Some(2),
            Self::Mp364Kbps => std::option::Option::Some(4),
            Self::OggOpus => std::option::Option::Some(3),
            Self::Mulaw => std::option::Option::Some(5),
            Self::Alaw => std::option::Option::Some(6),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("OUTPUT_AUDIO_ENCODING_UNSPECIFIED"),
            Self::Linear16 => std::option::Option::Some("OUTPUT_AUDIO_ENCODING_LINEAR_16"),
            Self::Mp3 => std::option::Option::Some("OUTPUT_AUDIO_ENCODING_MP3"),
            Self::Mp364Kbps => std::option::Option::Some("OUTPUT_AUDIO_ENCODING_MP3_64_KBPS"),
            Self::OggOpus => std::option::Option::Some("OUTPUT_AUDIO_ENCODING_OGG_OPUS"),
            Self::Mulaw => std::option::Option::Some("OUTPUT_AUDIO_ENCODING_MULAW"),
            Self::Alaw => std::option::Option::Some("OUTPUT_AUDIO_ENCODING_ALAW"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for OutputAudioEncoding {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for OutputAudioEncoding {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for OutputAudioEncoding {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::Linear16,
            2 => Self::Mp3,
            3 => Self::OggOpus,
            4 => Self::Mp364Kbps,
            5 => Self::Mulaw,
            6 => Self::Alaw,
            _ => Self::UnknownValue(output_audio_encoding::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for OutputAudioEncoding {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "OUTPUT_AUDIO_ENCODING_UNSPECIFIED" => Self::Unspecified,
            "OUTPUT_AUDIO_ENCODING_LINEAR_16" => Self::Linear16,
            "OUTPUT_AUDIO_ENCODING_MP3" => Self::Mp3,
            "OUTPUT_AUDIO_ENCODING_MP3_64_KBPS" => Self::Mp364Kbps,
            "OUTPUT_AUDIO_ENCODING_OGG_OPUS" => Self::OggOpus,
            "OUTPUT_AUDIO_ENCODING_MULAW" => Self::Mulaw,
            "OUTPUT_AUDIO_ENCODING_ALAW" => Self::Alaw,
            _ => Self::UnknownValue(output_audio_encoding::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for OutputAudioEncoding {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::Linear16 => serializer.serialize_i32(1),
            Self::Mp3 => serializer.serialize_i32(2),
            Self::Mp364Kbps => serializer.serialize_i32(4),
            Self::OggOpus => serializer.serialize_i32(3),
            Self::Mulaw => serializer.serialize_i32(5),
            Self::Alaw => serializer.serialize_i32(6),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for OutputAudioEncoding {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<OutputAudioEncoding>::new(
            ".google.cloud.dialogflow.v2.OutputAudioEncoding",
        ))
    }
}

/// The event that triggers the generator and LLM execution.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum TriggerEvent {
    /// Default value for TriggerEvent.
    Unspecified,
    /// Triggers when each chat message or voice utterance ends.
    EndOfUtterance,
    /// Triggers on the conversation manually by API calls, such as
    /// Conversations.GenerateStatelessSuggestion and
    /// Conversations.GenerateSuggestions.
    ManualCall,
    /// Triggers after each customer message only.
    CustomerMessage,
    /// Triggers after each agent message only.
    AgentMessage,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [TriggerEvent::value] or
    /// [TriggerEvent::name].
    UnknownValue(trigger_event::UnknownValue),
}

#[doc(hidden)]
pub mod trigger_event {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl TriggerEvent {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::EndOfUtterance => std::option::Option::Some(1),
            Self::ManualCall => std::option::Option::Some(2),
            Self::CustomerMessage => std::option::Option::Some(3),
            Self::AgentMessage => std::option::Option::Some(4),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("TRIGGER_EVENT_UNSPECIFIED"),
            Self::EndOfUtterance => std::option::Option::Some("END_OF_UTTERANCE"),
            Self::ManualCall => std::option::Option::Some("MANUAL_CALL"),
            Self::CustomerMessage => std::option::Option::Some("CUSTOMER_MESSAGE"),
            Self::AgentMessage => std::option::Option::Some("AGENT_MESSAGE"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for TriggerEvent {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for TriggerEvent {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for TriggerEvent {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::EndOfUtterance,
            2 => Self::ManualCall,
            3 => Self::CustomerMessage,
            4 => Self::AgentMessage,
            _ => Self::UnknownValue(trigger_event::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for TriggerEvent {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "TRIGGER_EVENT_UNSPECIFIED" => Self::Unspecified,
            "END_OF_UTTERANCE" => Self::EndOfUtterance,
            "MANUAL_CALL" => Self::ManualCall,
            "CUSTOMER_MESSAGE" => Self::CustomerMessage,
            "AGENT_MESSAGE" => Self::AgentMessage,
            _ => Self::UnknownValue(trigger_event::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for TriggerEvent {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::EndOfUtterance => serializer.serialize_i32(1),
            Self::ManualCall => serializer.serialize_i32(2),
            Self::CustomerMessage => serializer.serialize_i32(3),
            Self::AgentMessage => serializer.serialize_i32(4),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for TriggerEvent {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<TriggerEvent>::new(
            ".google.cloud.dialogflow.v2.TriggerEvent",
        ))
    }
}

/// Represents the options for views of an intent.
/// An intent can be a sizable object. Therefore, we provide a resource view that
/// does not return training phrases in the response by default.
///
/// # Working with unknown values
///
/// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
/// additional enum variants at any time. Adding new variants is not considered
/// a breaking change. Applications should write their code in anticipation of:
///
/// - New values appearing in future releases of the client library, **and**
/// - New values received dynamically, without application changes.
///
/// Please consult the [Working with enums] section in the user guide for some
/// guidelines.
///
/// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
#[derive(Clone, Debug, PartialEq)]
#[non_exhaustive]
pub enum IntentView {
    /// Training phrases field is not populated in the response.
    Unspecified,
    /// All fields are populated.
    Full,
    /// If set, the enum was initialized with an unknown value.
    ///
    /// Applications can examine the value using [IntentView::value] or
    /// [IntentView::name].
    UnknownValue(intent_view::UnknownValue),
}

#[doc(hidden)]
pub mod intent_view {
    #[allow(unused_imports)]
    use super::*;
    #[derive(Clone, Debug, PartialEq)]
    pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
}

impl IntentView {
    /// Gets the enum value.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the string representation of enums.
    pub fn value(&self) -> std::option::Option<i32> {
        match self {
            Self::Unspecified => std::option::Option::Some(0),
            Self::Full => std::option::Option::Some(1),
            Self::UnknownValue(u) => u.0.value(),
        }
    }

    /// Gets the enum value as a string.
    ///
    /// Returns `None` if the enum contains an unknown value deserialized from
    /// the integer representation of enums.
    pub fn name(&self) -> std::option::Option<&str> {
        match self {
            Self::Unspecified => std::option::Option::Some("INTENT_VIEW_UNSPECIFIED"),
            Self::Full => std::option::Option::Some("INTENT_VIEW_FULL"),
            Self::UnknownValue(u) => u.0.name(),
        }
    }
}

impl std::default::Default for IntentView {
    fn default() -> Self {
        use std::convert::From;
        Self::from(0)
    }
}

impl std::fmt::Display for IntentView {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        wkt::internal::display_enum(f, self.name(), self.value())
    }
}

impl std::convert::From<i32> for IntentView {
    fn from(value: i32) -> Self {
        match value {
            0 => Self::Unspecified,
            1 => Self::Full,
            _ => Self::UnknownValue(intent_view::UnknownValue(
                wkt::internal::UnknownEnumValue::Integer(value),
            )),
        }
    }
}

impl std::convert::From<&str> for IntentView {
    fn from(value: &str) -> Self {
        use std::string::ToString;
        match value {
            "INTENT_VIEW_UNSPECIFIED" => Self::Unspecified,
            "INTENT_VIEW_FULL" => Self::Full,
            _ => Self::UnknownValue(intent_view::UnknownValue(
                wkt::internal::UnknownEnumValue::String(value.to_string()),
            )),
        }
    }
}

impl serde::ser::Serialize for IntentView {
    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        match self {
            Self::Unspecified => serializer.serialize_i32(0),
            Self::Full => serializer.serialize_i32(1),
            Self::UnknownValue(u) => u.0.serialize(serializer),
        }
    }
}

impl<'de> serde::de::Deserialize<'de> for IntentView {
    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        deserializer.deserialize_any(wkt::internal::EnumVisitor::<IntentView>::new(
            ".google.cloud.dialogflow.v2.IntentView",
        ))
    }
}
