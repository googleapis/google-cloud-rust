// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Serverless VPC Access API.
///
/// # Service Description
///
/// Serverless VPC Access API allows users to create and manage connectors for
/// App Engine, Cloud Functions and Cloud Run to have internal connections to
/// Virtual Private Cloud networks.
///
/// # Configuration
///
/// `VpcAccessService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `VpcAccessService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `VpcAccessService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct VpcAccessService {
    inner: Arc<dyn crate::stubs::dynamic::VpcAccessService>,
}

impl VpcAccessService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::VpcAccessService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::VpcAccessService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::VpcAccessService> {
        crate::transport::VpcAccessService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::VpcAccessService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::VpcAccessService::new)
    }

    /// Creates a Serverless VPC Access connector, returns an operation.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_connector(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::vpc_access_service::CreateConnector {
        crate::builders::vpc_access_service::CreateConnector::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a Serverless VPC Access connector. Returns NOT_FOUND if the resource
    /// does not exist.
    pub fn get_connector(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vpc_access_service::GetConnector {
        crate::builders::vpc_access_service::GetConnector::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists Serverless VPC Access connectors.
    pub fn list_connectors(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::vpc_access_service::ListConnectors {
        crate::builders::vpc_access_service::ListConnectors::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a Serverless VPC Access connector. Returns NOT_FOUND if the
    /// resource does not exist.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_connector(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vpc_access_service::DeleteConnector {
        crate::builders::vpc_access_service::DeleteConnector::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vpc_access_service::ListLocations {
        crate::builders::vpc_access_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vpc_access_service::ListOperations {
        crate::builders::vpc_access_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::vpc_access_service::GetOperation {
        crate::builders::vpc_access_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
