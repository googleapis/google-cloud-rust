// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use std::sync::Arc;

/// A dyn-compatible, crate-private version of [super::Aml].
#[async_trait::async_trait]
pub trait Aml: std::fmt::Debug + Send + Sync {
    async fn list_instances(
        &self,
        req: crate::model::ListInstancesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListInstancesResponse>;

    async fn get_instance(
        &self,
        req: crate::model::GetInstanceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Instance>;

    async fn create_instance(
        &self,
        req: crate::model::CreateInstanceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_instance(
        &self,
        req: crate::model::UpdateInstanceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_instance(
        &self,
        req: crate::model::DeleteInstanceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn import_registered_parties(
        &self,
        req: crate::model::ImportRegisteredPartiesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn export_registered_parties(
        &self,
        req: crate::model::ExportRegisteredPartiesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_datasets(
        &self,
        req: crate::model::ListDatasetsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListDatasetsResponse>;

    async fn get_dataset(
        &self,
        req: crate::model::GetDatasetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Dataset>;

    async fn create_dataset(
        &self,
        req: crate::model::CreateDatasetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_dataset(
        &self,
        req: crate::model::UpdateDatasetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_dataset(
        &self,
        req: crate::model::DeleteDatasetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_models(
        &self,
        req: crate::model::ListModelsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListModelsResponse>;

    async fn get_model(
        &self,
        req: crate::model::GetModelRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Model>;

    async fn create_model(
        &self,
        req: crate::model::CreateModelRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_model(
        &self,
        req: crate::model::UpdateModelRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn export_model_metadata(
        &self,
        req: crate::model::ExportModelMetadataRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_model(
        &self,
        req: crate::model::DeleteModelRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_engine_configs(
        &self,
        req: crate::model::ListEngineConfigsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListEngineConfigsResponse>;

    async fn get_engine_config(
        &self,
        req: crate::model::GetEngineConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::EngineConfig>;

    async fn create_engine_config(
        &self,
        req: crate::model::CreateEngineConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_engine_config(
        &self,
        req: crate::model::UpdateEngineConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn export_engine_config_metadata(
        &self,
        req: crate::model::ExportEngineConfigMetadataRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_engine_config(
        &self,
        req: crate::model::DeleteEngineConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn get_engine_version(
        &self,
        req: crate::model::GetEngineVersionRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::EngineVersion>;

    async fn list_engine_versions(
        &self,
        req: crate::model::ListEngineVersionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListEngineVersionsResponse>;

    async fn list_prediction_results(
        &self,
        req: crate::model::ListPredictionResultsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListPredictionResultsResponse>;

    async fn get_prediction_result(
        &self,
        req: crate::model::GetPredictionResultRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::PredictionResult>;

    async fn create_prediction_result(
        &self,
        req: crate::model::CreatePredictionResultRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_prediction_result(
        &self,
        req: crate::model::UpdatePredictionResultRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn export_prediction_result_metadata(
        &self,
        req: crate::model::ExportPredictionResultMetadataRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_prediction_result(
        &self,
        req: crate::model::DeletePredictionResultRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_backtest_results(
        &self,
        req: crate::model::ListBacktestResultsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListBacktestResultsResponse>;

    async fn get_backtest_result(
        &self,
        req: crate::model::GetBacktestResultRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::BacktestResult>;

    async fn create_backtest_result(
        &self,
        req: crate::model::CreateBacktestResultRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn update_backtest_result(
        &self,
        req: crate::model::UpdateBacktestResultRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn export_backtest_result_metadata(
        &self,
        req: crate::model::ExportBacktestResultMetadataRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_backtest_result(
        &self,
        req: crate::model::DeleteBacktestResultRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse>;

    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location>;

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse>;

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation>;

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy>;

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}

/// All implementations of [super::Aml] also implement [Aml].
#[async_trait::async_trait]
impl<T: super::Aml> Aml for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn list_instances(
        &self,
        req: crate::model::ListInstancesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListInstancesResponse> {
        T::list_instances(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_instance(
        &self,
        req: crate::model::GetInstanceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Instance> {
        T::get_instance(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_instance(
        &self,
        req: crate::model::CreateInstanceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_instance(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_instance(
        &self,
        req: crate::model::UpdateInstanceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_instance(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_instance(
        &self,
        req: crate::model::DeleteInstanceRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_instance(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn import_registered_parties(
        &self,
        req: crate::model::ImportRegisteredPartiesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::import_registered_parties(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn export_registered_parties(
        &self,
        req: crate::model::ExportRegisteredPartiesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::export_registered_parties(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_datasets(
        &self,
        req: crate::model::ListDatasetsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListDatasetsResponse> {
        T::list_datasets(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_dataset(
        &self,
        req: crate::model::GetDatasetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Dataset> {
        T::get_dataset(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_dataset(
        &self,
        req: crate::model::CreateDatasetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_dataset(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_dataset(
        &self,
        req: crate::model::UpdateDatasetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_dataset(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_dataset(
        &self,
        req: crate::model::DeleteDatasetRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_dataset(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_models(
        &self,
        req: crate::model::ListModelsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListModelsResponse> {
        T::list_models(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_model(
        &self,
        req: crate::model::GetModelRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Model> {
        T::get_model(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_model(
        &self,
        req: crate::model::CreateModelRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_model(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_model(
        &self,
        req: crate::model::UpdateModelRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_model(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn export_model_metadata(
        &self,
        req: crate::model::ExportModelMetadataRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::export_model_metadata(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_model(
        &self,
        req: crate::model::DeleteModelRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_model(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_engine_configs(
        &self,
        req: crate::model::ListEngineConfigsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListEngineConfigsResponse> {
        T::list_engine_configs(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_engine_config(
        &self,
        req: crate::model::GetEngineConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::EngineConfig> {
        T::get_engine_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_engine_config(
        &self,
        req: crate::model::CreateEngineConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_engine_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_engine_config(
        &self,
        req: crate::model::UpdateEngineConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_engine_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn export_engine_config_metadata(
        &self,
        req: crate::model::ExportEngineConfigMetadataRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::export_engine_config_metadata(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_engine_config(
        &self,
        req: crate::model::DeleteEngineConfigRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_engine_config(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_engine_version(
        &self,
        req: crate::model::GetEngineVersionRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::EngineVersion> {
        T::get_engine_version(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_engine_versions(
        &self,
        req: crate::model::ListEngineVersionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListEngineVersionsResponse> {
        T::list_engine_versions(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_prediction_results(
        &self,
        req: crate::model::ListPredictionResultsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListPredictionResultsResponse> {
        T::list_prediction_results(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_prediction_result(
        &self,
        req: crate::model::GetPredictionResultRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::PredictionResult> {
        T::get_prediction_result(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_prediction_result(
        &self,
        req: crate::model::CreatePredictionResultRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_prediction_result(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_prediction_result(
        &self,
        req: crate::model::UpdatePredictionResultRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_prediction_result(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn export_prediction_result_metadata(
        &self,
        req: crate::model::ExportPredictionResultMetadataRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::export_prediction_result_metadata(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_prediction_result(
        &self,
        req: crate::model::DeletePredictionResultRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_prediction_result(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_backtest_results(
        &self,
        req: crate::model::ListBacktestResultsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListBacktestResultsResponse> {
        T::list_backtest_results(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_backtest_result(
        &self,
        req: crate::model::GetBacktestResultRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::BacktestResult> {
        T::get_backtest_result(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_backtest_result(
        &self,
        req: crate::model::CreateBacktestResultRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::create_backtest_result(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_backtest_result(
        &self,
        req: crate::model::UpdateBacktestResultRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::update_backtest_result(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn export_backtest_result_metadata(
        &self,
        req: crate::model::ExportBacktestResultMetadataRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::export_backtest_result_metadata(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_backtest_result(
        &self,
        req: crate::model::DeleteBacktestResultRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::delete_backtest_result(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse> {
        T::list_locations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location> {
        T::get_location(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::ListOperationsResponse> {
        T::list_operations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<longrunning::model::Operation> {
        T::get_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::delete_operation(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::cancel_operation(self, req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        T::get_polling_policy(self, options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        T::get_polling_backoff_policy(self, options)
    }
}
