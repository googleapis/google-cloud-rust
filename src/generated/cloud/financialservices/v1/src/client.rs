// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Financial Services API.
///
/// # Service Description
///
/// The AML (Anti Money Laundering) service allows users to perform REST
/// operations on aml.
///
/// # Configuration
///
/// `Aml` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Aml` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Aml` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Aml {
    inner: Arc<dyn crate::stubs::dynamic::Aml>,
}

impl Aml {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Aml + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Aml>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(conf: gax::options::ClientConfig) -> Result<impl crate::stubs::Aml> {
        crate::transport::Aml::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Aml> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Aml::new)
    }

    /// Lists instances.
    pub fn list_instances(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::aml::ListInstances {
        crate::builders::aml::ListInstances::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Gets an instance.
    pub fn get_instance(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::GetInstance {
        crate::builders::aml::GetInstance::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates an instance.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_instance(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::aml::CreateInstance {
        crate::builders::aml::CreateInstance::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates the parameters of a single Instance.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_instance(
        &self,
        instance: impl Into<crate::model::Instance>,
    ) -> crate::builders::aml::UpdateInstance {
        crate::builders::aml::UpdateInstance::new(self.inner.clone()).set_instance(instance.into())
    }

    /// Deletes an instance.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_instance(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::DeleteInstance {
        crate::builders::aml::DeleteInstance::new(self.inner.clone()).set_name(name.into())
    }

    /// Imports the list of registered parties. See
    /// [Create and manage
    /// instances](https://cloud.google.com/financial-services/anti-money-laundering/docs/create-and-manage-instances#import-registered-parties)
    /// for information on the input schema and response for this method.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_registered_parties(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::ImportRegisteredParties {
        crate::builders::aml::ImportRegisteredParties::new(self.inner.clone()).set_name(name.into())
    }

    /// Exports the list of registered parties. See
    /// [Create and manage
    /// instances](https://cloud.google.com/financial-services/anti-money-laundering/docs/create-and-manage-instances#export-registered-parties)
    /// for information on the output schema for this method.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_registered_parties(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::ExportRegisteredParties {
        crate::builders::aml::ExportRegisteredParties::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists datasets.
    pub fn list_datasets(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::aml::ListDatasets {
        crate::builders::aml::ListDatasets::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Gets a dataset.
    pub fn get_dataset(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::GetDataset {
        crate::builders::aml::GetDataset::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a dataset.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_dataset(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::aml::CreateDataset {
        crate::builders::aml::CreateDataset::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates the parameters of a single Dataset.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_dataset(
        &self,
        dataset: impl Into<crate::model::Dataset>,
    ) -> crate::builders::aml::UpdateDataset {
        crate::builders::aml::UpdateDataset::new(self.inner.clone()).set_dataset(dataset.into())
    }

    /// Deletes a dataset.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_dataset(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::DeleteDataset {
        crate::builders::aml::DeleteDataset::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists models.
    pub fn list_models(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::aml::ListModels {
        crate::builders::aml::ListModels::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Gets a model.
    pub fn get_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::GetModel {
        crate::builders::aml::GetModel::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a model.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_model(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::aml::CreateModel {
        crate::builders::aml::CreateModel::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates the parameters of a single Model.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_model(
        &self,
        model: impl Into<crate::model::Model>,
    ) -> crate::builders::aml::UpdateModel {
        crate::builders::aml::UpdateModel::new(self.inner.clone()).set_model(model.into())
    }

    /// Export governance information for a Model resource. For
    /// information on the exported fields, see
    /// [AML output data
    /// model](https://cloud.google.com/financial-services/anti-money-laundering/docs/reference/schemas/aml-output-data-model#model).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_model_metadata(
        &self,
        model: impl Into<std::string::String>,
    ) -> crate::builders::aml::ExportModelMetadata {
        crate::builders::aml::ExportModelMetadata::new(self.inner.clone()).set_model(model.into())
    }

    /// Deletes a model.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::DeleteModel {
        crate::builders::aml::DeleteModel::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists engine configs.
    pub fn list_engine_configs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::aml::ListEngineConfigs {
        crate::builders::aml::ListEngineConfigs::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Gets an engine config.
    pub fn get_engine_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::GetEngineConfig {
        crate::builders::aml::GetEngineConfig::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates an engine config.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_engine_config(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::aml::CreateEngineConfig {
        crate::builders::aml::CreateEngineConfig::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates the parameters of a single EngineConfig.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_engine_config(
        &self,
        engine_config: impl Into<crate::model::EngineConfig>,
    ) -> crate::builders::aml::UpdateEngineConfig {
        crate::builders::aml::UpdateEngineConfig::new(self.inner.clone())
            .set_engine_config(engine_config.into())
    }

    /// Export governance information for an EngineConfig resource. For
    /// information on the exported fields, see
    /// [AML output data
    /// model](https://cloud.google.com/financial-services/anti-money-laundering/docs/reference/schemas/aml-output-data-model#engine-config).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_engine_config_metadata(
        &self,
        engine_config: impl Into<std::string::String>,
    ) -> crate::builders::aml::ExportEngineConfigMetadata {
        crate::builders::aml::ExportEngineConfigMetadata::new(self.inner.clone())
            .set_engine_config(engine_config.into())
    }

    /// Deletes an engine config.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_engine_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::DeleteEngineConfig {
        crate::builders::aml::DeleteEngineConfig::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets a single EngineVersion.
    pub fn get_engine_version(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::GetEngineVersion {
        crate::builders::aml::GetEngineVersion::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists EngineVersions for given location.
    pub fn list_engine_versions(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::aml::ListEngineVersions {
        crate::builders::aml::ListEngineVersions::new(self.inner.clone()).set_parent(parent.into())
    }

    /// List PredictionResults.
    pub fn list_prediction_results(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::aml::ListPredictionResults {
        crate::builders::aml::ListPredictionResults::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a PredictionResult.
    pub fn get_prediction_result(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::GetPredictionResult {
        crate::builders::aml::GetPredictionResult::new(self.inner.clone()).set_name(name.into())
    }

    /// Create a PredictionResult.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_prediction_result(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::aml::CreatePredictionResult {
        crate::builders::aml::CreatePredictionResult::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single PredictionResult.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_prediction_result(
        &self,
        prediction_result: impl Into<crate::model::PredictionResult>,
    ) -> crate::builders::aml::UpdatePredictionResult {
        crate::builders::aml::UpdatePredictionResult::new(self.inner.clone())
            .set_prediction_result(prediction_result.into())
    }

    /// Export governance information for a PredictionResult resource. For
    /// information on the exported fields, see
    /// [AML output data
    /// model](https://cloud.google.com/financial-services/anti-money-laundering/docs/reference/schemas/aml-output-data-model#prediction-results).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_prediction_result_metadata(
        &self,
        prediction_result: impl Into<std::string::String>,
    ) -> crate::builders::aml::ExportPredictionResultMetadata {
        crate::builders::aml::ExportPredictionResultMetadata::new(self.inner.clone())
            .set_prediction_result(prediction_result.into())
    }

    /// Deletes a PredictionResult.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_prediction_result(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::DeletePredictionResult {
        crate::builders::aml::DeletePredictionResult::new(self.inner.clone()).set_name(name.into())
    }

    /// List BacktestResults.
    pub fn list_backtest_results(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::aml::ListBacktestResults {
        crate::builders::aml::ListBacktestResults::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Gets a BacktestResult.
    pub fn get_backtest_result(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::GetBacktestResult {
        crate::builders::aml::GetBacktestResult::new(self.inner.clone()).set_name(name.into())
    }

    /// Create a BacktestResult.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_backtest_result(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::aml::CreateBacktestResult {
        crate::builders::aml::CreateBacktestResult::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single BacktestResult.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_backtest_result(
        &self,
        backtest_result: impl Into<crate::model::BacktestResult>,
    ) -> crate::builders::aml::UpdateBacktestResult {
        crate::builders::aml::UpdateBacktestResult::new(self.inner.clone())
            .set_backtest_result(backtest_result.into())
    }

    /// Export governance information for a BacktestResult resource. For
    /// information on the exported fields, see
    /// [AML output data
    /// model](https://cloud.google.com/financial-services/anti-money-laundering/docs/reference/schemas/aml-output-data-model#backtest-results).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_backtest_result_metadata(
        &self,
        backtest_result: impl Into<std::string::String>,
    ) -> crate::builders::aml::ExportBacktestResultMetadata {
        crate::builders::aml::ExportBacktestResultMetadata::new(self.inner.clone())
            .set_backtest_result(backtest_result.into())
    }

    /// Deletes a BacktestResult.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_backtest_result(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::DeleteBacktestResult {
        crate::builders::aml::DeleteBacktestResult::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::ListLocations {
        crate::builders::aml::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::GetLocation {
        crate::builders::aml::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::ListOperations {
        crate::builders::aml::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::GetOperation {
        crate::builders::aml::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::DeleteOperation {
        crate::builders::aml::DeleteOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::aml::CancelOperation {
        crate::builders::aml::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}
