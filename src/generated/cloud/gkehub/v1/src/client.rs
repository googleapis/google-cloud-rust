// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the GKE Hub.
///
/// # Service Description
///
/// The GKE Hub service handles the registration of many Kubernetes clusters to
/// Google Cloud, and the management of multi-cluster features over those
/// clusters.
///
/// The GKE Hub service operates on the following resources:
///
/// * [Membership][google.cloud.gkehub.v1.Membership]
/// * [Feature][google.cloud.gkehub.v1.Feature]
///
/// GKE Hub is currently available in the global region and all regions in
/// <https://cloud.google.com/compute/docs/regions-zones>. Feature is only
/// available in global region while membership is global region and all the
/// regions.
///
/// **Membership management may be non-trivial:** it is recommended to use one
/// of the Google-provided client libraries or tools where possible when working
/// with Membership resources.
///
/// [google.cloud.gkehub.v1.Feature]: crate::model::Feature
/// [google.cloud.gkehub.v1.Membership]: crate::model::Membership
///
/// # Configuration
///
/// `GkeHub` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `GkeHub` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `GkeHub` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct GkeHub {
    inner: Arc<dyn crate::stubs::dynamic::GkeHub>,
}

impl GkeHub {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::GkeHub + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::GkeHub>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::GkeHub> {
        crate::transport::GkeHub::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::GkeHub> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::GkeHub::new)
    }

    /// Lists Memberships in a given project and location.
    pub fn list_memberships(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::gke_hub::ListMemberships {
        crate::builders::gke_hub::ListMemberships::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Lists Features in a given project and location.
    pub fn list_features(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::gke_hub::ListFeatures {
        crate::builders::gke_hub::ListFeatures::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Gets the details of a Membership.
    pub fn get_membership(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gke_hub::GetMembership {
        crate::builders::gke_hub::GetMembership::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets details of a single Feature.
    pub fn get_feature(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gke_hub::GetFeature {
        crate::builders::gke_hub::GetFeature::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a new Membership.
    ///
    /// **This is currently only supported for GKE clusters on Google Cloud**.
    /// To register other clusters, follow the instructions at
    /// <https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster>.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_membership(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::gke_hub::CreateMembership {
        crate::builders::gke_hub::CreateMembership::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Adds a new Feature.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_feature(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::gke_hub::CreateFeature {
        crate::builders::gke_hub::CreateFeature::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Removes a Membership.
    ///
    /// **This is currently only supported for GKE clusters on Google Cloud**.
    /// To unregister other clusters, follow the instructions at
    /// <https://cloud.google.com/anthos/multicluster-management/connect/unregistering-a-cluster>.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_membership(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gke_hub::DeleteMembership {
        crate::builders::gke_hub::DeleteMembership::new(self.inner.clone()).set_name(name.into())
    }

    /// Removes a Feature.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_feature(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gke_hub::DeleteFeature {
        crate::builders::gke_hub::DeleteFeature::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates an existing Membership.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_membership(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gke_hub::UpdateMembership {
        crate::builders::gke_hub::UpdateMembership::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates an existing Feature.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_feature(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gke_hub::UpdateFeature {
        crate::builders::gke_hub::UpdateFeature::new(self.inner.clone()).set_name(name.into())
    }

    /// Generates the manifest for deployment of the GKE connect agent.
    ///
    /// **This method is used internally by Google-provided libraries.**
    /// Most clients should not need to call this method directly.
    pub fn generate_connect_manifest(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gke_hub::GenerateConnectManifest {
        crate::builders::gke_hub::GenerateConnectManifest::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gke_hub::ListOperations {
        crate::builders::gke_hub::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gke_hub::GetOperation {
        crate::builders::gke_hub::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gke_hub::DeleteOperation {
        crate::builders::gke_hub::DeleteOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::gke_hub::CancelOperation {
        crate::builders::gke_hub::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}
