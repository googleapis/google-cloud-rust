// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::DataMigrationService].
///
/// Application developers may need to implement this trait to mock
/// `client::DataMigrationService`.  In other use-cases, application developers only
/// use `client::DataMigrationService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait DataMigrationService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::DataMigrationService::list_migration_jobs].
    fn list_migration_jobs(
        &self,
        _req: crate::model::ListMigrationJobsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListMigrationJobsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListMigrationJobsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::DataMigrationService::get_migration_job].
    fn get_migration_job(
        &self,
        _req: crate::model::GetMigrationJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::MigrationJob>> + Send {
        std::future::ready::<crate::Result<crate::model::MigrationJob>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::create_migration_job].
    fn create_migration_job(
        &self,
        _req: crate::model::CreateMigrationJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::update_migration_job].
    fn update_migration_job(
        &self,
        _req: crate::model::UpdateMigrationJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::delete_migration_job].
    fn delete_migration_job(
        &self,
        _req: crate::model::DeleteMigrationJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::start_migration_job].
    fn start_migration_job(
        &self,
        _req: crate::model::StartMigrationJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::stop_migration_job].
    fn stop_migration_job(
        &self,
        _req: crate::model::StopMigrationJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::resume_migration_job].
    fn resume_migration_job(
        &self,
        _req: crate::model::ResumeMigrationJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::promote_migration_job].
    fn promote_migration_job(
        &self,
        _req: crate::model::PromoteMigrationJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::verify_migration_job].
    fn verify_migration_job(
        &self,
        _req: crate::model::VerifyMigrationJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::restart_migration_job].
    fn restart_migration_job(
        &self,
        _req: crate::model::RestartMigrationJobRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::generate_ssh_script].
    fn generate_ssh_script(
        &self,
        _req: crate::model::GenerateSshScriptRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SshScript>> + Send {
        std::future::ready::<crate::Result<crate::model::SshScript>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::generate_tcp_proxy_script].
    fn generate_tcp_proxy_script(
        &self,
        _req: crate::model::GenerateTcpProxyScriptRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::TcpProxyScript>> + Send {
        std::future::ready::<crate::Result<crate::model::TcpProxyScript>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::list_connection_profiles].
    fn list_connection_profiles(
        &self,
        _req: crate::model::ListConnectionProfilesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListConnectionProfilesResponse>>
           + Send {
        std::future::ready::<crate::Result<crate::model::ListConnectionProfilesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::DataMigrationService::get_connection_profile].
    fn get_connection_profile(
        &self,
        _req: crate::model::GetConnectionProfileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ConnectionProfile>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ConnectionProfile>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::create_connection_profile].
    fn create_connection_profile(
        &self,
        _req: crate::model::CreateConnectionProfileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::update_connection_profile].
    fn update_connection_profile(
        &self,
        _req: crate::model::UpdateConnectionProfileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::delete_connection_profile].
    fn delete_connection_profile(
        &self,
        _req: crate::model::DeleteConnectionProfileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::create_private_connection].
    fn create_private_connection(
        &self,
        _req: crate::model::CreatePrivateConnectionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::get_private_connection].
    fn get_private_connection(
        &self,
        _req: crate::model::GetPrivateConnectionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::PrivateConnection>> + Send
    {
        std::future::ready::<crate::Result<crate::model::PrivateConnection>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::list_private_connections].
    fn list_private_connections(
        &self,
        _req: crate::model::ListPrivateConnectionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListPrivateConnectionsResponse>>
           + Send {
        std::future::ready::<crate::Result<crate::model::ListPrivateConnectionsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::DataMigrationService::delete_private_connection].
    fn delete_private_connection(
        &self,
        _req: crate::model::DeletePrivateConnectionRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::get_conversion_workspace].
    fn get_conversion_workspace(
        &self,
        _req: crate::model::GetConversionWorkspaceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ConversionWorkspace>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ConversionWorkspace>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::list_conversion_workspaces].
    fn list_conversion_workspaces(
        &self,
        _req: crate::model::ListConversionWorkspacesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListConversionWorkspacesResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListConversionWorkspacesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::DataMigrationService::create_conversion_workspace].
    fn create_conversion_workspace(
        &self,
        _req: crate::model::CreateConversionWorkspaceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::update_conversion_workspace].
    fn update_conversion_workspace(
        &self,
        _req: crate::model::UpdateConversionWorkspaceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::delete_conversion_workspace].
    fn delete_conversion_workspace(
        &self,
        _req: crate::model::DeleteConversionWorkspaceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::create_mapping_rule].
    fn create_mapping_rule(
        &self,
        _req: crate::model::CreateMappingRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::MappingRule>> + Send {
        std::future::ready::<crate::Result<crate::model::MappingRule>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::delete_mapping_rule].
    fn delete_mapping_rule(
        &self,
        _req: crate::model::DeleteMappingRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::DataMigrationService::list_mapping_rules].
    fn list_mapping_rules(
        &self,
        _req: crate::model::ListMappingRulesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListMappingRulesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListMappingRulesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::DataMigrationService::get_mapping_rule].
    fn get_mapping_rule(
        &self,
        _req: crate::model::GetMappingRuleRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::MappingRule>> + Send {
        std::future::ready::<crate::Result<crate::model::MappingRule>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::seed_conversion_workspace].
    fn seed_conversion_workspace(
        &self,
        _req: crate::model::SeedConversionWorkspaceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::import_mapping_rules].
    fn import_mapping_rules(
        &self,
        _req: crate::model::ImportMappingRulesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::convert_conversion_workspace].
    fn convert_conversion_workspace(
        &self,
        _req: crate::model::ConvertConversionWorkspaceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::commit_conversion_workspace].
    fn commit_conversion_workspace(
        &self,
        _req: crate::model::CommitConversionWorkspaceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::rollback_conversion_workspace].
    fn rollback_conversion_workspace(
        &self,
        _req: crate::model::RollbackConversionWorkspaceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::apply_conversion_workspace].
    fn apply_conversion_workspace(
        &self,
        _req: crate::model::ApplyConversionWorkspaceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::describe_database_entities].
    fn describe_database_entities(
        &self,
        _req: crate::model::DescribeDatabaseEntitiesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::DescribeDatabaseEntitiesResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::DescribeDatabaseEntitiesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::DataMigrationService::search_background_jobs].
    fn search_background_jobs(
        &self,
        _req: crate::model::SearchBackgroundJobsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SearchBackgroundJobsResponse>>
           + Send {
        std::future::ready::<crate::Result<crate::model::SearchBackgroundJobsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::DataMigrationService::describe_conversion_workspace_revisions].
    fn describe_conversion_workspace_revisions(
        &self,
        _req: crate::model::DescribeConversionWorkspaceRevisionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::DescribeConversionWorkspaceRevisionsResponse>,
    > + Send {
        std::future::ready::<
            crate::Result<crate::model::DescribeConversionWorkspaceRevisionsResponse>,
        >(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::DataMigrationService::fetch_static_ips].
    fn fetch_static_ips(
        &self,
        _req: crate::model::FetchStaticIpsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::FetchStaticIpsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::FetchStaticIpsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::DataMigrationService::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::DataMigrationService::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::set_iam_policy].
    fn set_iam_policy(
        &self,
        _req: iam_v1::model::SetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::Policy>> + Send {
        std::future::ready::<crate::Result<iam_v1::model::Policy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::get_iam_policy].
    fn get_iam_policy(
        &self,
        _req: iam_v1::model::GetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::Policy>> + Send {
        std::future::ready::<crate::Result<iam_v1::model::Policy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::test_iam_permissions].
    fn test_iam_permissions(
        &self,
        _req: iam_v1::model::TestIamPermissionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::TestIamPermissionsResponse>> + Send
    {
        std::future::ready::<crate::Result<iam_v1::model::TestIamPermissionsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::DataMigrationService::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
           + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::DataMigrationService::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::DataMigrationService::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::DataMigrationService::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Returns the polling policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        Arc::new(gax::polling_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
