// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Database Migration API.
///
/// # Service Description
///
/// Database Migration service
///
/// # Configuration
///
/// `DataMigrationService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `DataMigrationService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `DataMigrationService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct DataMigrationService {
    inner: Arc<dyn crate::stubs::dynamic::DataMigrationService>,
}

impl DataMigrationService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::DataMigrationService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::DataMigrationService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DataMigrationService> {
        crate::transport::DataMigrationService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::DataMigrationService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::DataMigrationService::new)
    }

    /// Lists migration jobs in a given project and location.
    pub fn list_migration_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::ListMigrationJobs {
        crate::builders::data_migration_service::ListMigrationJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single migration job.
    pub fn get_migration_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::GetMigrationJob {
        crate::builders::data_migration_service::GetMigrationJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new migration job in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_migration_job(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::CreateMigrationJob {
        crate::builders::data_migration_service::CreateMigrationJob::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single migration job.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_migration_job(
        &self,
        migration_job: impl Into<crate::model::MigrationJob>,
    ) -> crate::builders::data_migration_service::UpdateMigrationJob {
        crate::builders::data_migration_service::UpdateMigrationJob::new(self.inner.clone())
            .set_migration_job(migration_job.into())
    }

    /// Deletes a single migration job.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_migration_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::DeleteMigrationJob {
        crate::builders::data_migration_service::DeleteMigrationJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Start an already created migration job.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn start_migration_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::StartMigrationJob {
        crate::builders::data_migration_service::StartMigrationJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Stops a running migration job.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn stop_migration_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::StopMigrationJob {
        crate::builders::data_migration_service::StopMigrationJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Resume a migration job that is currently stopped and is resumable (was
    /// stopped during CDC phase).
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn resume_migration_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::ResumeMigrationJob {
        crate::builders::data_migration_service::ResumeMigrationJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Promote a migration job, stopping replication to the destination and
    /// promoting the destination to be a standalone database.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn promote_migration_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::PromoteMigrationJob {
        crate::builders::data_migration_service::PromoteMigrationJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Verify a migration job, making sure the destination can reach the source
    /// and that all configuration and prerequisites are met.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn verify_migration_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::VerifyMigrationJob {
        crate::builders::data_migration_service::VerifyMigrationJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Restart a stopped or failed migration job, resetting the destination
    /// instance to its original state and starting the migration process from
    /// scratch.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn restart_migration_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::RestartMigrationJob {
        crate::builders::data_migration_service::RestartMigrationJob::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Generate a SSH configuration script to configure the reverse SSH
    /// connectivity.
    pub fn generate_ssh_script(
        &self,
        migration_job: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::GenerateSshScript {
        crate::builders::data_migration_service::GenerateSshScript::new(self.inner.clone())
            .set_migration_job(migration_job.into())
    }

    /// Generate a TCP Proxy configuration script to configure a cloud-hosted VM
    /// running a TCP Proxy.
    pub fn generate_tcp_proxy_script(
        &self,
        migration_job: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::GenerateTcpProxyScript {
        crate::builders::data_migration_service::GenerateTcpProxyScript::new(self.inner.clone())
            .set_migration_job(migration_job.into())
    }

    /// Retrieves a list of all connection profiles in a given project and
    /// location.
    pub fn list_connection_profiles(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::ListConnectionProfiles {
        crate::builders::data_migration_service::ListConnectionProfiles::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single connection profile.
    pub fn get_connection_profile(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::GetConnectionProfile {
        crate::builders::data_migration_service::GetConnectionProfile::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new connection profile in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_connection_profile(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::CreateConnectionProfile {
        crate::builders::data_migration_service::CreateConnectionProfile::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Update the configuration of a single connection profile.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_connection_profile(
        &self,
        connection_profile: impl Into<crate::model::ConnectionProfile>,
    ) -> crate::builders::data_migration_service::UpdateConnectionProfile {
        crate::builders::data_migration_service::UpdateConnectionProfile::new(self.inner.clone())
            .set_connection_profile(connection_profile.into())
    }

    /// Deletes a single Database Migration Service connection profile.
    /// A connection profile can only be deleted if it is not in use by any
    /// active migration jobs.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_connection_profile(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::DeleteConnectionProfile {
        crate::builders::data_migration_service::DeleteConnectionProfile::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new private connection in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_private_connection(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::CreatePrivateConnection {
        crate::builders::data_migration_service::CreatePrivateConnection::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single private connection.
    pub fn get_private_connection(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::GetPrivateConnection {
        crate::builders::data_migration_service::GetPrivateConnection::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Retrieves a list of private connections in a given project and location.
    pub fn list_private_connections(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::ListPrivateConnections {
        crate::builders::data_migration_service::ListPrivateConnections::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a single Database Migration Service private connection.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_private_connection(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::DeletePrivateConnection {
        crate::builders::data_migration_service::DeletePrivateConnection::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets details of a single conversion workspace.
    pub fn get_conversion_workspace(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::GetConversionWorkspace {
        crate::builders::data_migration_service::GetConversionWorkspace::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists conversion workspaces in a given project and location.
    pub fn list_conversion_workspaces(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::ListConversionWorkspaces {
        crate::builders::data_migration_service::ListConversionWorkspaces::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a new conversion workspace in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_conversion_workspace(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::CreateConversionWorkspace {
        crate::builders::data_migration_service::CreateConversionWorkspace::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the parameters of a single conversion workspace.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_conversion_workspace(
        &self,
        conversion_workspace: impl Into<crate::model::ConversionWorkspace>,
    ) -> crate::builders::data_migration_service::UpdateConversionWorkspace {
        crate::builders::data_migration_service::UpdateConversionWorkspace::new(self.inner.clone())
            .set_conversion_workspace(conversion_workspace.into())
    }

    /// Deletes a single conversion workspace.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_conversion_workspace(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::DeleteConversionWorkspace {
        crate::builders::data_migration_service::DeleteConversionWorkspace::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new mapping rule for a given conversion workspace.
    pub fn create_mapping_rule(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::CreateMappingRule {
        crate::builders::data_migration_service::CreateMappingRule::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a single mapping rule.
    pub fn delete_mapping_rule(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::DeleteMappingRule {
        crate::builders::data_migration_service::DeleteMappingRule::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists the mapping rules for a specific conversion workspace.
    pub fn list_mapping_rules(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::ListMappingRules {
        crate::builders::data_migration_service::ListMappingRules::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets the details of a mapping rule.
    pub fn get_mapping_rule(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::GetMappingRule {
        crate::builders::data_migration_service::GetMappingRule::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Imports a snapshot of the source database into the
    /// conversion workspace.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn seed_conversion_workspace(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::SeedConversionWorkspace {
        crate::builders::data_migration_service::SeedConversionWorkspace::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Imports the mapping rules for a given conversion workspace.
    /// Supports various formats of external rules files.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_mapping_rules(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::ImportMappingRules {
        crate::builders::data_migration_service::ImportMappingRules::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a draft tree schema for the destination database.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn convert_conversion_workspace(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::ConvertConversionWorkspace {
        crate::builders::data_migration_service::ConvertConversionWorkspace::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Marks all the data in the conversion workspace as committed.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn commit_conversion_workspace(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::CommitConversionWorkspace {
        crate::builders::data_migration_service::CommitConversionWorkspace::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Rolls back a conversion workspace to the last committed snapshot.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn rollback_conversion_workspace(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::RollbackConversionWorkspace {
        crate::builders::data_migration_service::RollbackConversionWorkspace::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Applies draft tree onto a specific destination database.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn apply_conversion_workspace(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::ApplyConversionWorkspace {
        crate::builders::data_migration_service::ApplyConversionWorkspace::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Describes the database entities tree for a specific conversion workspace
    /// and a specific tree type.
    ///
    /// Database entities are not resources like conversion workspaces or mapping
    /// rules, and they can't be created, updated or deleted. Instead, they are
    /// simple data objects describing the structure of the client database.
    pub fn describe_database_entities(
        &self,
        conversion_workspace: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::DescribeDatabaseEntities {
        crate::builders::data_migration_service::DescribeDatabaseEntities::new(self.inner.clone())
            .set_conversion_workspace(conversion_workspace.into())
    }

    /// Searches/lists the background jobs for a specific
    /// conversion workspace.
    ///
    /// The background jobs are not resources like conversion workspaces or
    /// mapping rules, and they can't be created, updated or deleted.
    /// Instead, they are a way to expose the data plane jobs log.
    pub fn search_background_jobs(
        &self,
        conversion_workspace: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::SearchBackgroundJobs {
        crate::builders::data_migration_service::SearchBackgroundJobs::new(self.inner.clone())
            .set_conversion_workspace(conversion_workspace.into())
    }

    /// Retrieves a list of committed revisions of a specific conversion
    /// workspace.
    pub fn describe_conversion_workspace_revisions(
        &self,
        conversion_workspace: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::DescribeConversionWorkspaceRevisions {
        crate::builders::data_migration_service::DescribeConversionWorkspaceRevisions::new(
            self.inner.clone(),
        )
        .set_conversion_workspace(conversion_workspace.into())
    }

    /// Fetches a set of static IP addresses that need to be allowlisted by the
    /// customer when using the static-IP connectivity method.
    pub fn fetch_static_ips(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::FetchStaticIps {
        crate::builders::data_migration_service::FetchStaticIps::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::ListLocations {
        crate::builders::data_migration_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::GetLocation {
        crate::builders::data_migration_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::SetIamPolicy {
        crate::builders::data_migration_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::GetIamPolicy {
        crate::builders::data_migration_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::TestIamPermissions {
        crate::builders::data_migration_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::ListOperations {
        crate::builders::data_migration_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::GetOperation {
        crate::builders::data_migration_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::DeleteOperation {
        crate::builders::data_migration_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::data_migration_service::CancelOperation {
        crate::builders::data_migration_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
