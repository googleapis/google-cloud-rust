// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gaxi;
extern crate gtype;
extern crate lazy_static;
extern crate location;
extern crate longrunning;
extern crate reqwest;
extern crate rpc;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Message for requesting list of ReportConfigs
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListReportConfigsRequest {
    /// Required. Parent value for ListReportConfigsRequest
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Requested page size. Server may return fewer items than requested.
    /// If unspecified, server will pick an appropriate default.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filtering results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Hint for how to order the results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListReportConfigsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListReportConfigsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListReportConfigsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListReportConfigsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListReportConfigsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListReportConfigsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListReportConfigsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.ListReportConfigsRequest"
    }
}

/// Message for response to listing ReportConfigs
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListReportConfigsResponse {
    /// The list of ReportConfig
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub report_configs: std::vec::Vec<crate::model::ReportConfig>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListReportConfigsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [report_configs][crate::model::ListReportConfigsResponse::report_configs].
    pub fn set_report_configs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ReportConfig>,
    {
        use std::iter::Iterator;
        self.report_configs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [next_page_token][crate::model::ListReportConfigsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListReportConfigsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListReportConfigsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.ListReportConfigsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListReportConfigsResponse {
    type PageItem = crate::model::ReportConfig;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.report_configs
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Message for getting a ReportConfig
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetReportConfigRequest {
    /// Required. Name of the resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetReportConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetReportConfigRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetReportConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.GetReportConfigRequest"
    }
}

/// Message for creating a ReportConfig
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateReportConfigRequest {
    /// Required. Value for parent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The resource being created
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub report_config: std::option::Option<crate::model::ReportConfig>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateReportConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateReportConfigRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [report_config][crate::model::CreateReportConfigRequest::report_config].
    pub fn set_report_config<
        T: std::convert::Into<std::option::Option<crate::model::ReportConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.report_config = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateReportConfigRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateReportConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.CreateReportConfigRequest"
    }
}

/// Message for updating a ReportConfig
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateReportConfigRequest {
    /// Required. Field mask is used to specify the fields to be overwritten in the
    /// ReportConfig resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The resource being updated
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub report_config: std::option::Option<crate::model::ReportConfig>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateReportConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateReportConfigRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [report_config][crate::model::UpdateReportConfigRequest::report_config].
    pub fn set_report_config<
        T: std::convert::Into<std::option::Option<crate::model::ReportConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.report_config = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateReportConfigRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateReportConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.UpdateReportConfigRequest"
    }
}

/// Message for deleting a ReportConfig
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteReportConfigRequest {
    /// Required. Name of the resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. If set, all ReportDetails for this ReportConfig will be deleted.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub force: bool,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteReportConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteReportConfigRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [force][crate::model::DeleteReportConfigRequest::force].
    pub fn set_force<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.force = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteReportConfigRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteReportConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.DeleteReportConfigRequest"
    }
}

/// Message describing ReportDetail object. ReportDetail represents metadata of
/// generated reports for a ReportConfig.
/// Next ID: 10
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ReportDetail {
    /// Name of resource. It will be of form
    /// projects/\<project\>/locations/\<location\>/reportConfigs/\<report-config-id\>/reportDetails/\<report-detail-id\>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The snapshot time.
    /// All the report data is referenced at this point of time.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub snapshot_time: std::option::Option<wkt::Timestamp>,

    /// Prefix of the object name of each report's shard. This will have full
    /// prefix except the "extension" and "shard_id".
    /// For example, if the `destination_path` is
    /// `{{report-config-id}}/dt={{datetime}}`, the shard object name would be
    /// `gs://my-insights/1A34-F2E456-12B456-1C3D/dt=2022-05-20T06:35/1A34-F2E456-12B456-1C3D_2022-05-20T06:35_5.csv`
    /// and the value of `report_path_prefix` field would be
    /// `gs://my-insights/1A34-F2E456-12B456-1C3D/dt=2022-05-20T06:35/1A34-F2E456-12B456-1C3D_2022-05-20T06:35_`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub report_path_prefix: std::string::String,

    /// Total shards generated for the report.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub shards_count: i64,

    /// Status of the ReportDetail.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub status: std::option::Option<rpc::model::Status>,

    /// Labels as key value pairs
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// The date for which report is generated. The time part of target_datetime
    /// will be zero till we support multiple reports per day.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub target_datetime: std::option::Option<gtype::model::DateTime>,

    /// Metrics of the report.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub report_metrics: std::option::Option<crate::model::report_detail::Metrics>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ReportDetail {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ReportDetail::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [snapshot_time][crate::model::ReportDetail::snapshot_time].
    pub fn set_snapshot_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.snapshot_time = v.into();
        self
    }

    /// Sets the value of [report_path_prefix][crate::model::ReportDetail::report_path_prefix].
    pub fn set_report_path_prefix<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.report_path_prefix = v.into();
        self
    }

    /// Sets the value of [shards_count][crate::model::ReportDetail::shards_count].
    pub fn set_shards_count<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.shards_count = v.into();
        self
    }

    /// Sets the value of [status][crate::model::ReportDetail::status].
    pub fn set_status<T: std::convert::Into<std::option::Option<rpc::model::Status>>>(
        mut self,
        v: T,
    ) -> Self {
        self.status = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::ReportDetail::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [target_datetime][crate::model::ReportDetail::target_datetime].
    pub fn set_target_datetime<
        T: std::convert::Into<std::option::Option<gtype::model::DateTime>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.target_datetime = v.into();
        self
    }

    /// Sets the value of [report_metrics][crate::model::ReportDetail::report_metrics].
    pub fn set_report_metrics<
        T: std::convert::Into<std::option::Option<crate::model::report_detail::Metrics>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.report_metrics = v.into();
        self
    }
}

impl wkt::message::Message for ReportDetail {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.ReportDetail"
    }
}

/// Defines additional types related to [ReportDetail].
pub mod report_detail {
    #[allow(unused_imports)]
    use super::*;

    /// Different metrics associated with the generated report.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Metrics {
        /// Count of Cloud Storage objects which are part of the report.
        #[serde(skip_serializing_if = "wkt::internal::is_default")]
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub processed_records_count: i64,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Metrics {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [processed_records_count][crate::model::report_detail::Metrics::processed_records_count].
        pub fn set_processed_records_count<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.processed_records_count = v.into();
            self
        }
    }

    impl wkt::message::Message for Metrics {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.storageinsights.v1.ReportDetail.Metrics"
        }
    }
}

/// Message for requesting list of ReportDetails
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListReportDetailsRequest {
    /// Required. Parent value for ListReportDetailsRequest
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Requested page size. Server may return fewer items than requested.
    /// If unspecified, server will pick an appropriate default.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub page_size: i32,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Filtering results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Hint for how to order the results
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListReportDetailsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListReportDetailsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListReportDetailsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListReportDetailsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListReportDetailsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListReportDetailsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListReportDetailsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.ListReportDetailsRequest"
    }
}

/// Message for response to listing ReportDetails
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListReportDetailsResponse {
    /// The list of ReportDetail
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub report_details: std::vec::Vec<crate::model::ReportDetail>,

    /// A token identifying a page of results the server should return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListReportDetailsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [report_details][crate::model::ListReportDetailsResponse::report_details].
    pub fn set_report_details<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ReportDetail>,
    {
        use std::iter::Iterator;
        self.report_details = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [next_page_token][crate::model::ListReportDetailsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListReportDetailsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListReportDetailsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.ListReportDetailsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListReportDetailsResponse {
    type PageItem = crate::model::ReportDetail;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.report_details
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Message for getting a ReportDetail
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetReportDetailRequest {
    /// Required. Name of the resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetReportDetailRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetReportDetailRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetReportDetailRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.GetReportDetailRequest"
    }
}

/// Represents the metadata of the long-running operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Output only. Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Output only. Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_message: std::string::String,

    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have been cancelled successfully
    /// have [Operation.error][] value with a
    /// [google.rpc.Status.code][google.rpc.Status.code] of 1, corresponding to
    /// `Code.CANCELLED`.
    ///
    /// [google.rpc.Status.code]: rpc::model::Status::code
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub requested_cancellation: bool,

    /// Output only. API version used to start the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl OperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::OperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::OperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::OperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_message][crate::model::OperationMetadata::status_message].
    pub fn set_status_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_message = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::OperationMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::OperationMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }
}

impl wkt::message::Message for OperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.OperationMetadata"
    }
}

/// ReportConfig Resource:
///
/// Options to setup frequency of report generation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct FrequencyOptions {
    /// Frequency of report generation.
    pub frequency: crate::model::frequency_options::Frequency,

    /// The date from which report generation should start.
    /// UTC time zone.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_date: std::option::Option<gtype::model::Date>,

    /// The date on which report generation should stop (Inclusive).
    /// UTC time zone.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_date: std::option::Option<gtype::model::Date>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl FrequencyOptions {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [frequency][crate::model::FrequencyOptions::frequency].
    pub fn set_frequency<T: std::convert::Into<crate::model::frequency_options::Frequency>>(
        mut self,
        v: T,
    ) -> Self {
        self.frequency = v.into();
        self
    }

    /// Sets the value of [start_date][crate::model::FrequencyOptions::start_date].
    pub fn set_start_date<T: std::convert::Into<std::option::Option<gtype::model::Date>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_date = v.into();
        self
    }

    /// Sets the value of [end_date][crate::model::FrequencyOptions::end_date].
    pub fn set_end_date<T: std::convert::Into<std::option::Option<gtype::model::Date>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_date = v.into();
        self
    }
}

impl wkt::message::Message for FrequencyOptions {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.FrequencyOptions"
    }
}

/// Defines additional types related to [FrequencyOptions].
pub mod frequency_options {
    #[allow(unused_imports)]
    use super::*;

    /// This ENUM specifies possible frequencies of report generation.
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Frequency {
        /// Unspecified.
        Unspecified,
        /// Report will be generated daily.
        Daily,
        /// Report will be generated weekly.
        Weekly,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [Frequency::value] or
        /// [Frequency::name].
        UnknownValue(frequency::UnknownValue),
    }

    #[doc(hidden)]
    pub mod frequency {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl Frequency {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Daily => std::option::Option::Some(1),
                Self::Weekly => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("FREQUENCY_UNSPECIFIED"),
                Self::Daily => std::option::Option::Some("DAILY"),
                Self::Weekly => std::option::Option::Some("WEEKLY"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for Frequency {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for Frequency {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for Frequency {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Daily,
                2 => Self::Weekly,
                _ => Self::UnknownValue(frequency::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for Frequency {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "FREQUENCY_UNSPECIFIED" => Self::Unspecified,
                "DAILY" => Self::Daily,
                "WEEKLY" => Self::Weekly,
                _ => Self::UnknownValue(frequency::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for Frequency {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Daily => serializer.serialize_i32(1),
                Self::Weekly => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for Frequency {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<Frequency>::new(
                ".google.cloud.storageinsights.v1.FrequencyOptions.Frequency",
            ))
        }
    }
}

/// Options to configure CSV formatted reports.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CSVOptions {
    /// Record separator characters in CSV.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub record_separator: std::string::String,

    /// Delimiter characters in CSV.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub delimiter: std::string::String,

    /// If set, will include a header row in the CSV report.
    #[serde(skip_serializing_if = "wkt::internal::is_default")]
    pub header_required: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CSVOptions {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [record_separator][crate::model::CSVOptions::record_separator].
    pub fn set_record_separator<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.record_separator = v.into();
        self
    }

    /// Sets the value of [delimiter][crate::model::CSVOptions::delimiter].
    pub fn set_delimiter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.delimiter = v.into();
        self
    }

    /// Sets the value of [header_required][crate::model::CSVOptions::header_required].
    pub fn set_header_required<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.header_required = v.into();
        self
    }
}

impl wkt::message::Message for CSVOptions {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.CSVOptions"
    }
}

/// Options to configure Parquet formatted reports.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ParquetOptions {
    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ParquetOptions {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for ParquetOptions {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.ParquetOptions"
    }
}

/// Options to filter data on storage systems.
/// Next ID: 2
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CloudStorageFilters {
    /// Bucket for which the report will be generated.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub bucket: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CloudStorageFilters {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [bucket][crate::model::CloudStorageFilters::bucket].
    pub fn set_bucket<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.bucket = v.into();
        self
    }
}

impl wkt::message::Message for CloudStorageFilters {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.CloudStorageFilters"
    }
}

/// Options to store reports in storage systems.
/// Next ID: 3
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CloudStorageDestinationOptions {
    /// Destination bucket.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub bucket: std::string::String,

    /// Destination path is the path in the bucket where the report should be
    /// generated.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub destination_path: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CloudStorageDestinationOptions {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [bucket][crate::model::CloudStorageDestinationOptions::bucket].
    pub fn set_bucket<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.bucket = v.into();
        self
    }

    /// Sets the value of [destination_path][crate::model::CloudStorageDestinationOptions::destination_path].
    pub fn set_destination_path<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.destination_path = v.into();
        self
    }
}

impl wkt::message::Message for CloudStorageDestinationOptions {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.CloudStorageDestinationOptions"
    }
}

/// Report specification for exporting object metadata.
/// Next ID: 4
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ObjectMetadataReportOptions {
    /// Metadata fields to be included in the report.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub metadata_fields: std::vec::Vec<std::string::String>,

    /// Filter options for storage systems.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub filter: std::option::Option<crate::model::object_metadata_report_options::Filter>,

    /// Options on destination for storage systems.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub destination_options:
        std::option::Option<crate::model::object_metadata_report_options::DestinationOptions>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ObjectMetadataReportOptions {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [metadata_fields][crate::model::ObjectMetadataReportOptions::metadata_fields].
    pub fn set_metadata_fields<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.metadata_fields = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [filter][crate::model::ObjectMetadataReportOptions::filter].
    ///
    /// Note that all the setters affecting `filter` are mutually
    /// exclusive.
    pub fn set_filter<
        T: std::convert::Into<
                std::option::Option<crate::model::object_metadata_report_options::Filter>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.filter = v.into();
        self
    }

    /// The value of [filter][crate::model::ObjectMetadataReportOptions::filter]
    /// if it holds a `StorageFilters`, `None` if the field is not set or
    /// holds a different branch.
    pub fn storage_filters(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::CloudStorageFilters>> {
        #[allow(unreachable_patterns)]
        self.filter.as_ref().and_then(|v| match v {
            crate::model::object_metadata_report_options::Filter::StorageFilters(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [filter][crate::model::ObjectMetadataReportOptions::filter]
    /// to hold a `StorageFilters`.
    ///
    /// Note that all the setters affecting `filter` are
    /// mutually exclusive.
    pub fn set_storage_filters<
        T: std::convert::Into<std::boxed::Box<crate::model::CloudStorageFilters>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.filter = std::option::Option::Some(
            crate::model::object_metadata_report_options::Filter::StorageFilters(v.into()),
        );
        self
    }

    /// Sets the value of [destination_options][crate::model::ObjectMetadataReportOptions::destination_options].
    ///
    /// Note that all the setters affecting `destination_options` are mutually
    /// exclusive.
    pub fn set_destination_options<
        T: std::convert::Into<
                std::option::Option<
                    crate::model::object_metadata_report_options::DestinationOptions,
                >,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination_options = v.into();
        self
    }

    /// The value of [destination_options][crate::model::ObjectMetadataReportOptions::destination_options]
    /// if it holds a `StorageDestinationOptions`, `None` if the field is not set or
    /// holds a different branch.
    pub fn storage_destination_options(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::CloudStorageDestinationOptions>> {
        #[allow(unreachable_patterns)]
        self.destination_options.as_ref().and_then(|v| match v {
            crate::model::object_metadata_report_options::DestinationOptions::StorageDestinationOptions(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [destination_options][crate::model::ObjectMetadataReportOptions::destination_options]
    /// to hold a `StorageDestinationOptions`.
    ///
    /// Note that all the setters affecting `destination_options` are
    /// mutually exclusive.
    pub fn set_storage_destination_options<
        T: std::convert::Into<std::boxed::Box<crate::model::CloudStorageDestinationOptions>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.destination_options = std::option::Option::Some(
            crate::model::object_metadata_report_options::DestinationOptions::StorageDestinationOptions(
                v.into()
            )
        );
        self
    }
}

impl wkt::message::Message for ObjectMetadataReportOptions {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.ObjectMetadataReportOptions"
    }
}

/// Defines additional types related to [ObjectMetadataReportOptions].
pub mod object_metadata_report_options {
    #[allow(unused_imports)]
    use super::*;

    /// Filter options for storage systems.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Filter {
        /// Cloud Storage as the storage system.
        StorageFilters(std::boxed::Box<crate::model::CloudStorageFilters>),
    }

    /// Options on destination for storage systems.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum DestinationOptions {
        /// Cloud Storage as the storage system.
        StorageDestinationOptions(std::boxed::Box<crate::model::CloudStorageDestinationOptions>),
    }
}

/// Message describing ReportConfig object. ReportConfig is the configuration to
/// generate reports.
/// See
/// <https://cloud.google.com/storage/docs/insights/using-inventory-reports#create-config-rest>
/// for more details on how to set various fields.
/// Next ID: 12
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ReportConfig {
    /// name of resource. It will be of form
    /// projects/\<project\>/locations/\<location\>/reportConfigs/\<report-config-id\>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. [Output only] Create time stamp
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. [Output only] Update time stamp
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// The frequency of report generation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub frequency_options: std::option::Option<crate::model::FrequencyOptions>,

    /// Labels as key value pairs
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// User provided display name which can be empty and limited to 256 characters
    /// that is editable.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Format in which report will be published.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub report_format: std::option::Option<crate::model::report_config::ReportFormat>,

    /// Configuration options for report contents.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub report_kind: std::option::Option<crate::model::report_config::ReportKind>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ReportConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ReportConfig::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ReportConfig::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::ReportConfig::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [frequency_options][crate::model::ReportConfig::frequency_options].
    pub fn set_frequency_options<
        T: std::convert::Into<std::option::Option<crate::model::FrequencyOptions>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.frequency_options = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::ReportConfig::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [display_name][crate::model::ReportConfig::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [report_format][crate::model::ReportConfig::report_format].
    ///
    /// Note that all the setters affecting `report_format` are mutually
    /// exclusive.
    pub fn set_report_format<
        T: std::convert::Into<std::option::Option<crate::model::report_config::ReportFormat>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.report_format = v.into();
        self
    }

    /// The value of [report_format][crate::model::ReportConfig::report_format]
    /// if it holds a `CsvOptions`, `None` if the field is not set or
    /// holds a different branch.
    pub fn csv_options(&self) -> std::option::Option<&std::boxed::Box<crate::model::CSVOptions>> {
        #[allow(unreachable_patterns)]
        self.report_format.as_ref().and_then(|v| match v {
            crate::model::report_config::ReportFormat::CsvOptions(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [report_format][crate::model::ReportConfig::report_format]
    /// to hold a `CsvOptions`.
    ///
    /// Note that all the setters affecting `report_format` are
    /// mutually exclusive.
    pub fn set_csv_options<T: std::convert::Into<std::boxed::Box<crate::model::CSVOptions>>>(
        mut self,
        v: T,
    ) -> Self {
        self.report_format = std::option::Option::Some(
            crate::model::report_config::ReportFormat::CsvOptions(v.into()),
        );
        self
    }

    /// The value of [report_format][crate::model::ReportConfig::report_format]
    /// if it holds a `ParquetOptions`, `None` if the field is not set or
    /// holds a different branch.
    pub fn parquet_options(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::ParquetOptions>> {
        #[allow(unreachable_patterns)]
        self.report_format.as_ref().and_then(|v| match v {
            crate::model::report_config::ReportFormat::ParquetOptions(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [report_format][crate::model::ReportConfig::report_format]
    /// to hold a `ParquetOptions`.
    ///
    /// Note that all the setters affecting `report_format` are
    /// mutually exclusive.
    pub fn set_parquet_options<
        T: std::convert::Into<std::boxed::Box<crate::model::ParquetOptions>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.report_format = std::option::Option::Some(
            crate::model::report_config::ReportFormat::ParquetOptions(v.into()),
        );
        self
    }

    /// Sets the value of [report_kind][crate::model::ReportConfig::report_kind].
    ///
    /// Note that all the setters affecting `report_kind` are mutually
    /// exclusive.
    pub fn set_report_kind<
        T: std::convert::Into<std::option::Option<crate::model::report_config::ReportKind>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.report_kind = v.into();
        self
    }

    /// The value of [report_kind][crate::model::ReportConfig::report_kind]
    /// if it holds a `ObjectMetadataReportOptions`, `None` if the field is not set or
    /// holds a different branch.
    pub fn object_metadata_report_options(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::ObjectMetadataReportOptions>> {
        #[allow(unreachable_patterns)]
        self.report_kind.as_ref().and_then(|v| match v {
            crate::model::report_config::ReportKind::ObjectMetadataReportOptions(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [report_kind][crate::model::ReportConfig::report_kind]
    /// to hold a `ObjectMetadataReportOptions`.
    ///
    /// Note that all the setters affecting `report_kind` are
    /// mutually exclusive.
    pub fn set_object_metadata_report_options<
        T: std::convert::Into<std::boxed::Box<crate::model::ObjectMetadataReportOptions>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.report_kind = std::option::Option::Some(
            crate::model::report_config::ReportKind::ObjectMetadataReportOptions(v.into()),
        );
        self
    }
}

impl wkt::message::Message for ReportConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.storageinsights.v1.ReportConfig"
    }
}

/// Defines additional types related to [ReportConfig].
pub mod report_config {
    #[allow(unused_imports)]
    use super::*;

    /// Format in which report will be published.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum ReportFormat {
        /// Options for CSV formatted reports.
        CsvOptions(std::boxed::Box<crate::model::CSVOptions>),
        /// Options for Parquet formatted reports.
        ParquetOptions(std::boxed::Box<crate::model::ParquetOptions>),
    }

    /// Configuration options for report contents.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum ReportKind {
        /// Report for exporting object metadata.
        ObjectMetadataReportOptions(std::boxed::Box<crate::model::ObjectMetadataReportOptions>),
    }
}
