// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [LicenseManagementService](crate::stubs::LicenseManagementService) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct LicenseManagementService<T>
where
    T: crate::stubs::LicenseManagementService + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> LicenseManagementService<T>
where
    T: crate::stubs::LicenseManagementService + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> crate::stubs::LicenseManagementService for LicenseManagementService<T>
where
    T: crate::stubs::LicenseManagementService + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn get_license_pool(
        &self,
        req: crate::model::GetLicensePoolRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::LicensePool> {
        self.inner.get_license_pool(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_license_pool(
        &self,
        req: crate::model::UpdateLicensePoolRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::LicensePool> {
        self.inner.update_license_pool(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn assign(
        &self,
        req: crate::model::AssignRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::AssignResponse> {
        self.inner.assign(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn unassign(
        &self,
        req: crate::model::UnassignRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::UnassignResponse> {
        self.inner.unassign(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn enumerate_licensed_users(
        &self,
        req: crate::model::EnumerateLicensedUsersRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::EnumerateLicensedUsersResponse> {
        self.inner.enumerate_licensed_users(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.get_operation(req, options).await
    }
}

/// Implements a [ConsumerProcurementService](crate::stubs::ConsumerProcurementService) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct ConsumerProcurementService<T>
where
    T: crate::stubs::ConsumerProcurementService + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> ConsumerProcurementService<T>
where
    T: crate::stubs::ConsumerProcurementService + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> crate::stubs::ConsumerProcurementService for ConsumerProcurementService<T>
where
    T: crate::stubs::ConsumerProcurementService + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn place_order(
        &self,
        req: crate::model::PlaceOrderRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.place_order(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_order(
        &self,
        req: crate::model::GetOrderRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Order> {
        self.inner.get_order(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_orders(
        &self,
        req: crate::model::ListOrdersRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListOrdersResponse> {
        self.inner.list_orders(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn modify_order(
        &self,
        req: crate::model::ModifyOrderRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.modify_order(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn cancel_order(
        &self,
        req: crate::model::CancelOrderRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.cancel_order(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.get_operation(req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_policy::PollingPolicy> {
        self.inner.get_polling_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}
