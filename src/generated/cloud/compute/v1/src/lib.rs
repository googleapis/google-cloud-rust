// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Google Cloud Client Libraries for Rust - Google Compute Engine API
//!
//!
//!
//! This crate contains traits, types, and functions to interact with Google Compute Engine API
//! Most applications will use the structs defined in the [client] module.
//!
//!
//! The client library types and functions are stable and not expected to change.
//! Please note that Google Cloud services do change from time to time. The client
//! libraries are designed to preserve backwards compatibility when the service
//! changes in compatible ways. For example, adding RPCs, or fields to messages
//! should not introduce breaking changes to the client libraries.
//!
//!
//! # Available Clients
//!
//! * [Images](client/struct.Images.html)
//! * [MachineTypes](client/struct.MachineTypes.html)
//! * [Zones](client/struct.Zones.html)

#![cfg_attr(docsrs, feature(doc_cfg))]
#![allow(deprecated)]

/// The messages and enums that are part of this client library.
#[allow(clippy::module_inception)]
pub mod model;

pub use gax::Result;
pub use gax::error::Error;

#[allow(rustdoc::invalid_html_tags)]
#[allow(rustdoc::redundant_explicit_links)]
pub mod stub;

/// Concrete implementations of this client library traits.
pub mod client;

/// Request builders.
pub mod builder;

#[doc(hidden)]
pub(crate) mod tracing;

#[doc(hidden)]
pub(crate) mod transport;

/// The default host used by the service.
#[cfg(any(feature = "images", feature = "machine-types", feature = "zones",))]
const DEFAULT_HOST: &str = "https://compute.googleapis.com/";

#[cfg(any(feature = "images", feature = "machine-types", feature = "zones",))]
pub(crate) mod info {
    const NAME: &str = env!("CARGO_PKG_NAME");
    const VERSION: &str = env!("CARGO_PKG_VERSION");
    lazy_static::lazy_static! {
        pub(crate) static ref X_GOOG_API_CLIENT_HEADER: String = {
            let ac = gaxi::api_header::XGoogApiClient{
                name:          NAME,
                version:       VERSION,
                library_type:  gaxi::api_header::GAPIC,
            };
            ac.rest_header_value()
        };
    }
}
