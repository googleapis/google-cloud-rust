// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gaxi;
extern crate lazy_static;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

mod debug;
mod deserialize;
mod serialize;

/// Deprecation status for a public resource.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct DeprecationStatus {
    /// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DELETED. This is only informational and the status will not change unless the client explicitly changes it.
    pub deleted: std::string::String,

    /// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to DEPRECATED. This is only informational and the status will not change unless the client explicitly changes it.
    pub deprecated: std::string::String,

    /// An optional RFC3339 timestamp on or after which the state of this resource is intended to change to OBSOLETE. This is only informational and the status will not change unless the client explicitly changes it.
    pub obsolete: std::string::String,

    /// The URL of the suggested replacement for a deprecated resource. The suggested replacement resource must be the same kind of resource as the deprecated resource.
    pub replacement: std::string::String,

    /// The deprecation state of this resource. This can be ACTIVE, DEPRECATED, OBSOLETE, or DELETED. Operations which communicate the end of life date for an image, can use ACTIVE. Operations which create a new resource using a DEPRECATED resource will return successfully, but with a warning indicating the deprecated resource and recommending its replacement. Operations which use OBSOLETE or DELETED resources will be rejected and result in an error.
    pub state: crate::model::deprecation_status::State,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeprecationStatus {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [deleted][crate::model::DeprecationStatus::deleted].
    pub fn set_deleted<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.deleted = v.into();
        self
    }

    /// Sets the value of [deprecated][crate::model::DeprecationStatus::deprecated].
    pub fn set_deprecated<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.deprecated = v.into();
        self
    }

    /// Sets the value of [obsolete][crate::model::DeprecationStatus::obsolete].
    pub fn set_obsolete<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.obsolete = v.into();
        self
    }

    /// Sets the value of [replacement][crate::model::DeprecationStatus::replacement].
    pub fn set_replacement<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.replacement = v.into();
        self
    }

    /// Sets the value of [state][crate::model::DeprecationStatus::state].
    pub fn set_state<T: std::convert::Into<crate::model::deprecation_status::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }
}

impl wkt::message::Message for DeprecationStatus {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.compute.v1.DeprecationStatus"
    }
}

/// Defines additional types related to [DeprecationStatus].
pub mod deprecation_status {
    #[allow(unused_imports)]
    use super::*;

    /// The enumerated type for the [state][google.cloud.compute.v1.DeprecationStatus.state] field.
    ///
    /// [google.cloud.compute.v1.DeprecationStatus.state]: crate::model::deprecation_status::State
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum State {
        Active,
        Deleted,
        Deprecated,
        Obsolete,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [State::value] or
        /// [State::name].
        UnknownValue(state::UnknownValue),
    }

    #[doc(hidden)]
    pub mod state {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl State {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Active => std::option::Option::Some(0),
                Self::Deleted => std::option::Option::Some(1),
                Self::Deprecated => std::option::Option::Some(2),
                Self::Obsolete => std::option::Option::Some(3),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Active => std::option::Option::Some("ACTIVE"),
                Self::Deleted => std::option::Option::Some("DELETED"),
                Self::Deprecated => std::option::Option::Some("DEPRECATED"),
                Self::Obsolete => std::option::Option::Some("OBSOLETE"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for State {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Active,
                1 => Self::Deleted,
                2 => Self::Deprecated,
                3 => Self::Obsolete,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for State {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "ACTIVE" => Self::Active,
                "DELETED" => Self::Deleted,
                "DEPRECATED" => Self::Deprecated,
                "OBSOLETE" => Self::Obsolete,
                _ => Self::UnknownValue(state::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for State {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Active => serializer.serialize_i32(0),
                Self::Deleted => serializer.serialize_i32(1),
                Self::Deprecated => serializer.serialize_i32(2),
                Self::Obsolete => serializer.serialize_i32(3),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for State {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<State>::new(
                ".google.cloud.compute.v1.DeprecationStatus.state",
            ))
        }
    }
}

/// Represents a Machine Type resource. You can use specific machine types for your VM instances based on performance and pricing requirements. For more information, read Machine Types.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct MachineType {
    /// [Output Only] A list of accelerator configurations assigned to this machine type.
    pub accelerators: std::vec::Vec<crate::model::machine_type::Accelerators>,

    /// [Output Only] The architecture of the machine type.
    pub architecture: crate::model::machine_type::Architecture,

    /// [Output Only] Creation timestamp in RFC3339 text format.
    pub creation_timestamp: std::string::String,

    /// [Output Only] The deprecation status associated with this machine type. Only applicable if the machine type is unavailable.
    pub deprecated: std::option::Option<crate::model::DeprecationStatus>,

    /// [Output Only] An optional textual description of the resource.
    pub description: std::string::String,

    /// [Output Only] The number of virtual CPUs that are available to the instance.
    pub guest_cpus: i32,

    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    pub id: u64,

    /// [Deprecated] This property is deprecated and will never be populated with any relevant values.
    pub image_space_gb: i32,

    /// [Output Only] Whether this machine type has a shared CPU. See Shared-core machine types for more information.
    pub is_shared_cpu: bool,

    /// [Output Only] The type of the resource. Always compute#machineType for machine types.
    pub kind: std::string::String,

    /// [Output Only] Maximum persistent disks allowed.
    pub maximum_persistent_disks: i32,

    /// [Output Only] Maximum total persistent disks size (GB) allowed.
    pub maximum_persistent_disks_size_gb: i64,

    /// [Output Only] The amount of physical memory available to the instance, defined in MB.
    pub memory_mb: i32,

    /// [Output Only] Name of the resource.
    pub name: std::string::String,

    /// [Output Only] Server-defined URL for the resource.
    pub self_link: std::string::String,

    /// [Output Only] The name of the zone where the machine type resides, such as us-central1-a.
    pub zone: std::string::String,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MachineType {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [accelerators][crate::model::MachineType::accelerators].
    pub fn set_accelerators<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::machine_type::Accelerators>,
    {
        use std::iter::Iterator;
        self.accelerators = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [architecture][crate::model::MachineType::architecture].
    pub fn set_architecture<T: std::convert::Into<crate::model::machine_type::Architecture>>(
        mut self,
        v: T,
    ) -> Self {
        self.architecture = v.into();
        self
    }

    /// Sets the value of [creation_timestamp][crate::model::MachineType::creation_timestamp].
    pub fn set_creation_timestamp<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.creation_timestamp = v.into();
        self
    }

    /// Sets the value of [deprecated][crate::model::MachineType::deprecated].
    pub fn set_deprecated<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::DeprecationStatus>,
    {
        self.deprecated = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [deprecated][crate::model::MachineType::deprecated].
    pub fn set_or_clear_deprecated<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::DeprecationStatus>,
    {
        self.deprecated = v.map(|x| x.into());
        self
    }

    /// Sets the value of [description][crate::model::MachineType::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [guest_cpus][crate::model::MachineType::guest_cpus].
    pub fn set_guest_cpus<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.guest_cpus = v.into();
        self
    }

    /// Sets the value of [id][crate::model::MachineType::id].
    pub fn set_id<T: std::convert::Into<u64>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [image_space_gb][crate::model::MachineType::image_space_gb].
    pub fn set_image_space_gb<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.image_space_gb = v.into();
        self
    }

    /// Sets the value of [is_shared_cpu][crate::model::MachineType::is_shared_cpu].
    pub fn set_is_shared_cpu<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.is_shared_cpu = v.into();
        self
    }

    /// Sets the value of [kind][crate::model::MachineType::kind].
    pub fn set_kind<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.kind = v.into();
        self
    }

    /// Sets the value of [maximum_persistent_disks][crate::model::MachineType::maximum_persistent_disks].
    pub fn set_maximum_persistent_disks<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.maximum_persistent_disks = v.into();
        self
    }

    /// Sets the value of [maximum_persistent_disks_size_gb][crate::model::MachineType::maximum_persistent_disks_size_gb].
    pub fn set_maximum_persistent_disks_size_gb<T: std::convert::Into<i64>>(
        mut self,
        v: T,
    ) -> Self {
        self.maximum_persistent_disks_size_gb = v.into();
        self
    }

    /// Sets the value of [memory_mb][crate::model::MachineType::memory_mb].
    pub fn set_memory_mb<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.memory_mb = v.into();
        self
    }

    /// Sets the value of [name][crate::model::MachineType::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [self_link][crate::model::MachineType::self_link].
    pub fn set_self_link<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.self_link = v.into();
        self
    }

    /// Sets the value of [zone][crate::model::MachineType::zone].
    pub fn set_zone<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.zone = v.into();
        self
    }
}

impl wkt::message::Message for MachineType {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.compute.v1.MachineType"
    }
}

/// Defines additional types related to [MachineType].
pub mod machine_type {
    #[allow(unused_imports)]
    use super::*;

    /// The message type for the [accelerators][google.cloud.compute.v1.MachineType.accelerators] field.
    ///
    /// [google.cloud.compute.v1.MachineType.accelerators]: crate::model::machine_type::Accelerators
    #[derive(Clone, Default, PartialEq)]
    #[non_exhaustive]
    pub struct Accelerators {
        /// Number of accelerator cards exposed to the guest.
        pub guest_accelerator_count: i32,

        /// The accelerator type resource name, not a full URL, e.g. nvidia-tesla-t4.
        pub guest_accelerator_type: std::string::String,

        pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Accelerators {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [guest_accelerator_count][crate::model::machine_type::Accelerators::guest_accelerator_count].
        pub fn set_guest_accelerator_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
            self.guest_accelerator_count = v.into();
            self
        }

        /// Sets the value of [guest_accelerator_type][crate::model::machine_type::Accelerators::guest_accelerator_type].
        pub fn set_guest_accelerator_type<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.guest_accelerator_type = v.into();
            self
        }
    }

    impl wkt::message::Message for Accelerators {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.compute.v1.MachineType.accelerators"
        }
    }

    /// The enumerated type for the [architecture][google.cloud.compute.v1.MachineType.architecture] field.
    ///
    /// [google.cloud.compute.v1.MachineType.architecture]: crate::model::machine_type::Architecture
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Architecture {
        /// Default value indicating Architecture is not set.
        Unspecified,
        /// Machines with architecture ARM64
        Arm64,
        /// Machines with architecture X86_64
        X8664,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [Architecture::value] or
        /// [Architecture::name].
        UnknownValue(architecture::UnknownValue),
    }

    #[doc(hidden)]
    pub mod architecture {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl Architecture {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Unspecified => std::option::Option::Some(0),
                Self::Arm64 => std::option::Option::Some(1),
                Self::X8664 => std::option::Option::Some(2),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Unspecified => std::option::Option::Some("ARCHITECTURE_UNSPECIFIED"),
                Self::Arm64 => std::option::Option::Some("ARM64"),
                Self::X8664 => std::option::Option::Some("X86_64"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for Architecture {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for Architecture {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for Architecture {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Unspecified,
                1 => Self::Arm64,
                2 => Self::X8664,
                _ => Self::UnknownValue(architecture::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for Architecture {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "ARCHITECTURE_UNSPECIFIED" => Self::Unspecified,
                "ARM64" => Self::Arm64,
                "X86_64" => Self::X8664,
                _ => Self::UnknownValue(architecture::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for Architecture {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Unspecified => serializer.serialize_i32(0),
                Self::Arm64 => serializer.serialize_i32(1),
                Self::X8664 => serializer.serialize_i32(2),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for Architecture {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<Architecture>::new(
                ".google.cloud.compute.v1.MachineType.architecture",
            ))
        }
    }
}

#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct MachineTypeAggregatedList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    pub id: std::string::String,

    /// A list of MachineTypesScopedList resources.
    pub items: std::collections::HashMap<std::string::String, crate::model::MachineTypesScopedList>,

    /// [Output Only] Type of resource. Always compute#machineTypeAggregatedList for aggregated lists of machine types.
    pub kind: std::string::String,

    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    pub next_page_token: std::string::String,

    /// [Output Only] Server-defined URL for this resource.
    pub self_link: std::string::String,

    /// [Output Only] Unreachable resources.
    pub unreachables: std::vec::Vec<std::string::String>,

    /// [Output Only] Informational warning message.
    pub warning: std::option::Option<crate::model::machine_type_aggregated_list::Warning>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MachineTypeAggregatedList {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [id][crate::model::MachineTypeAggregatedList::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [items][crate::model::MachineTypeAggregatedList::items].
    pub fn set_items<
        T: std::convert::Into<
                std::collections::HashMap<
                    std::string::String,
                    crate::model::MachineTypesScopedList,
                >,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.items = v.into();
        self
    }

    /// Sets the value of [kind][crate::model::MachineTypeAggregatedList::kind].
    pub fn set_kind<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.kind = v.into();
        self
    }

    /// Sets the value of [next_page_token][crate::model::MachineTypeAggregatedList::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [self_link][crate::model::MachineTypeAggregatedList::self_link].
    pub fn set_self_link<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.self_link = v.into();
        self
    }

    /// Sets the value of [unreachables][crate::model::MachineTypeAggregatedList::unreachables].
    pub fn set_unreachables<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachables = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [warning][crate::model::MachineTypeAggregatedList::warning].
    pub fn set_warning<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::machine_type_aggregated_list::Warning>,
    {
        self.warning = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [warning][crate::model::MachineTypeAggregatedList::warning].
    pub fn set_or_clear_warning<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::machine_type_aggregated_list::Warning>,
    {
        self.warning = v.map(|x| x.into());
        self
    }
}

impl wkt::message::Message for MachineTypeAggregatedList {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.compute.v1.MachineTypeAggregatedList"
    }
}

/// Defines additional types related to [MachineTypeAggregatedList].
pub mod machine_type_aggregated_list {
    #[allow(unused_imports)]
    use super::*;

    /// The message type for the [warning][google.cloud.compute.v1.MachineTypeAggregatedList.warning] field.
    ///
    /// [google.cloud.compute.v1.MachineTypeAggregatedList.warning]: crate::model::machine_type_aggregated_list::Warning
    #[derive(Clone, Default, PartialEq)]
    #[non_exhaustive]
    pub struct Warning {
        /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
        pub code: crate::model::machine_type_aggregated_list::warning::Code,

        /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
        pub data: std::vec::Vec<crate::model::machine_type_aggregated_list::warning::Data>,

        /// [Output Only] A human-readable description of the warning code.
        pub message: std::string::String,

        pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Warning {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [code][crate::model::machine_type_aggregated_list::Warning::code].
        pub fn set_code<
            T: std::convert::Into<crate::model::machine_type_aggregated_list::warning::Code>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.code = v.into();
            self
        }

        /// Sets the value of [data][crate::model::machine_type_aggregated_list::Warning::data].
        pub fn set_data<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::machine_type_aggregated_list::warning::Data>,
        {
            use std::iter::Iterator;
            self.data = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [message][crate::model::machine_type_aggregated_list::Warning::message].
        pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.message = v.into();
            self
        }
    }

    impl wkt::message::Message for Warning {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.compute.v1.MachineTypeAggregatedList.warning"
        }
    }

    /// Defines additional types related to [Warning].
    pub mod warning {
        #[allow(unused_imports)]
        use super::*;

        /// The message type for the [data][google.cloud.compute.v1.MachineTypeAggregatedList.warning.data] field.
        ///
        /// [google.cloud.compute.v1.MachineTypeAggregatedList.warning.data]: crate::model::machine_type_aggregated_list::warning::Data
        #[derive(Clone, Default, PartialEq)]
        #[non_exhaustive]
        pub struct Data {
            /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
            pub key: std::string::String,

            /// [Output Only] A warning data value corresponding to the key.
            pub value: std::string::String,

            pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl Data {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [key][crate::model::machine_type_aggregated_list::warning::Data::key].
            pub fn set_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.key = v.into();
                self
            }

            /// Sets the value of [value][crate::model::machine_type_aggregated_list::warning::Data::value].
            pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.value = v.into();
                self
            }
        }

        impl wkt::message::Message for Data {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.compute.v1.MachineTypeAggregatedList.warning.data"
            }
        }

        /// The enumerated type for the [code][google.cloud.compute.v1.MachineTypeAggregatedList.warning.code] field.
        ///
        /// [google.cloud.compute.v1.MachineTypeAggregatedList.warning.code]: crate::model::machine_type_aggregated_list::warning::Code
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum Code {
            /// Warning about failed cleanup of transient changes made by a failed operation.
            CleanupFailed,
            /// A link to a deprecated resource was created.
            DeprecatedResourceUsed,
            /// When deploying and at least one of the resources has a type marked as deprecated
            DeprecatedTypeUsed,
            /// The user created a boot disk that is larger than image size.
            DiskSizeLargerThanImageSize,
            /// When deploying and at least one of the resources has a type marked as experimental
            ExperimentalTypeUsed,
            /// Warning that is present in an external api call
            ExternalApiWarning,
            /// Warning that value of a field has been overridden. Deprecated unused field.
            FieldValueOverriden,
            /// The operation involved use of an injected kernel, which is deprecated.
            InjectedKernelsDeprecated,
            /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
            InvalidHealthCheckForDynamicWieghtedLb,
            /// When deploying a deployment with a exceedingly large number of resources
            LargeDeploymentWarning,
            /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
            ListOverheadQuotaExceed,
            /// A resource depends on a missing type
            MissingTypeDependency,
            /// The route's nextHopIp address is not assigned to an instance on the network.
            NextHopAddressNotAssigned,
            /// The route's next hop instance cannot ip forward.
            NextHopCannotIpForward,
            /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
            NextHopInstanceHasNoIpv6Interface,
            /// The route's nextHopInstance URL refers to an instance that does not exist.
            NextHopInstanceNotFound,
            /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
            NextHopInstanceNotOnNetwork,
            /// The route's next hop instance does not have a status of RUNNING.
            NextHopNotRunning,
            /// Error which is not critical. We decided to continue the process despite the mentioned error.
            NotCriticalError,
            /// No results are present on a particular list page.
            NoResultsOnPage,
            /// Success is reported, but some results may be missing due to errors
            PartialSuccess,
            /// Quota information is not available to client requests (e.g: regions.list).
            QuotaInfoUnavailable,
            /// The user attempted to use a resource that requires a TOS they have not accepted.
            RequiredTosAgreement,
            /// Warning that a resource is in use.
            ResourceInUseByOtherResourceWarning,
            /// One or more of the resources set to auto-delete could not be deleted because they were in use.
            ResourceNotDeleted,
            /// When a resource schema validation is ignored.
            SchemaValidationIgnored,
            /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
            SingleInstancePropertyTemplate,
            /// When undeclared properties in the schema are present
            UndeclaredProperties,
            /// A given scope cannot be reached.
            Unreachable,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [Code::value] or
            /// [Code::name].
            UnknownValue(code::UnknownValue),
        }

        #[doc(hidden)]
        pub mod code {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl Code {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::CleanupFailed => std::option::Option::Some(0),
                    Self::DeprecatedResourceUsed => std::option::Option::Some(1),
                    Self::DeprecatedTypeUsed => std::option::Option::Some(2),
                    Self::DiskSizeLargerThanImageSize => std::option::Option::Some(3),
                    Self::ExperimentalTypeUsed => std::option::Option::Some(4),
                    Self::ExternalApiWarning => std::option::Option::Some(5),
                    Self::FieldValueOverriden => std::option::Option::Some(6),
                    Self::InjectedKernelsDeprecated => std::option::Option::Some(7),
                    Self::InvalidHealthCheckForDynamicWieghtedLb => std::option::Option::Some(8),
                    Self::LargeDeploymentWarning => std::option::Option::Some(9),
                    Self::ListOverheadQuotaExceed => std::option::Option::Some(10),
                    Self::MissingTypeDependency => std::option::Option::Some(11),
                    Self::NextHopAddressNotAssigned => std::option::Option::Some(12),
                    Self::NextHopCannotIpForward => std::option::Option::Some(13),
                    Self::NextHopInstanceHasNoIpv6Interface => std::option::Option::Some(14),
                    Self::NextHopInstanceNotFound => std::option::Option::Some(15),
                    Self::NextHopInstanceNotOnNetwork => std::option::Option::Some(16),
                    Self::NextHopNotRunning => std::option::Option::Some(17),
                    Self::NotCriticalError => std::option::Option::Some(18),
                    Self::NoResultsOnPage => std::option::Option::Some(19),
                    Self::PartialSuccess => std::option::Option::Some(20),
                    Self::QuotaInfoUnavailable => std::option::Option::Some(21),
                    Self::RequiredTosAgreement => std::option::Option::Some(22),
                    Self::ResourceInUseByOtherResourceWarning => std::option::Option::Some(23),
                    Self::ResourceNotDeleted => std::option::Option::Some(24),
                    Self::SchemaValidationIgnored => std::option::Option::Some(25),
                    Self::SingleInstancePropertyTemplate => std::option::Option::Some(26),
                    Self::UndeclaredProperties => std::option::Option::Some(27),
                    Self::Unreachable => std::option::Option::Some(28),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::CleanupFailed => std::option::Option::Some("CLEANUP_FAILED"),
                    Self::DeprecatedResourceUsed => {
                        std::option::Option::Some("DEPRECATED_RESOURCE_USED")
                    }
                    Self::DeprecatedTypeUsed => std::option::Option::Some("DEPRECATED_TYPE_USED"),
                    Self::DiskSizeLargerThanImageSize => {
                        std::option::Option::Some("DISK_SIZE_LARGER_THAN_IMAGE_SIZE")
                    }
                    Self::ExperimentalTypeUsed => {
                        std::option::Option::Some("EXPERIMENTAL_TYPE_USED")
                    }
                    Self::ExternalApiWarning => std::option::Option::Some("EXTERNAL_API_WARNING"),
                    Self::FieldValueOverriden => std::option::Option::Some("FIELD_VALUE_OVERRIDEN"),
                    Self::InjectedKernelsDeprecated => {
                        std::option::Option::Some("INJECTED_KERNELS_DEPRECATED")
                    }
                    Self::InvalidHealthCheckForDynamicWieghtedLb => {
                        std::option::Option::Some("INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")
                    }
                    Self::LargeDeploymentWarning => {
                        std::option::Option::Some("LARGE_DEPLOYMENT_WARNING")
                    }
                    Self::ListOverheadQuotaExceed => {
                        std::option::Option::Some("LIST_OVERHEAD_QUOTA_EXCEED")
                    }
                    Self::MissingTypeDependency => {
                        std::option::Option::Some("MISSING_TYPE_DEPENDENCY")
                    }
                    Self::NextHopAddressNotAssigned => {
                        std::option::Option::Some("NEXT_HOP_ADDRESS_NOT_ASSIGNED")
                    }
                    Self::NextHopCannotIpForward => {
                        std::option::Option::Some("NEXT_HOP_CANNOT_IP_FORWARD")
                    }
                    Self::NextHopInstanceHasNoIpv6Interface => {
                        std::option::Option::Some("NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")
                    }
                    Self::NextHopInstanceNotFound => {
                        std::option::Option::Some("NEXT_HOP_INSTANCE_NOT_FOUND")
                    }
                    Self::NextHopInstanceNotOnNetwork => {
                        std::option::Option::Some("NEXT_HOP_INSTANCE_NOT_ON_NETWORK")
                    }
                    Self::NextHopNotRunning => std::option::Option::Some("NEXT_HOP_NOT_RUNNING"),
                    Self::NotCriticalError => std::option::Option::Some("NOT_CRITICAL_ERROR"),
                    Self::NoResultsOnPage => std::option::Option::Some("NO_RESULTS_ON_PAGE"),
                    Self::PartialSuccess => std::option::Option::Some("PARTIAL_SUCCESS"),
                    Self::QuotaInfoUnavailable => {
                        std::option::Option::Some("QUOTA_INFO_UNAVAILABLE")
                    }
                    Self::RequiredTosAgreement => {
                        std::option::Option::Some("REQUIRED_TOS_AGREEMENT")
                    }
                    Self::ResourceInUseByOtherResourceWarning => {
                        std::option::Option::Some("RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")
                    }
                    Self::ResourceNotDeleted => std::option::Option::Some("RESOURCE_NOT_DELETED"),
                    Self::SchemaValidationIgnored => {
                        std::option::Option::Some("SCHEMA_VALIDATION_IGNORED")
                    }
                    Self::SingleInstancePropertyTemplate => {
                        std::option::Option::Some("SINGLE_INSTANCE_PROPERTY_TEMPLATE")
                    }
                    Self::UndeclaredProperties => {
                        std::option::Option::Some("UNDECLARED_PROPERTIES")
                    }
                    Self::Unreachable => std::option::Option::Some("UNREACHABLE"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for Code {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for Code {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for Code {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::CleanupFailed,
                    1 => Self::DeprecatedResourceUsed,
                    2 => Self::DeprecatedTypeUsed,
                    3 => Self::DiskSizeLargerThanImageSize,
                    4 => Self::ExperimentalTypeUsed,
                    5 => Self::ExternalApiWarning,
                    6 => Self::FieldValueOverriden,
                    7 => Self::InjectedKernelsDeprecated,
                    8 => Self::InvalidHealthCheckForDynamicWieghtedLb,
                    9 => Self::LargeDeploymentWarning,
                    10 => Self::ListOverheadQuotaExceed,
                    11 => Self::MissingTypeDependency,
                    12 => Self::NextHopAddressNotAssigned,
                    13 => Self::NextHopCannotIpForward,
                    14 => Self::NextHopInstanceHasNoIpv6Interface,
                    15 => Self::NextHopInstanceNotFound,
                    16 => Self::NextHopInstanceNotOnNetwork,
                    17 => Self::NextHopNotRunning,
                    18 => Self::NotCriticalError,
                    19 => Self::NoResultsOnPage,
                    20 => Self::PartialSuccess,
                    21 => Self::QuotaInfoUnavailable,
                    22 => Self::RequiredTosAgreement,
                    23 => Self::ResourceInUseByOtherResourceWarning,
                    24 => Self::ResourceNotDeleted,
                    25 => Self::SchemaValidationIgnored,
                    26 => Self::SingleInstancePropertyTemplate,
                    27 => Self::UndeclaredProperties,
                    28 => Self::Unreachable,
                    _ => Self::UnknownValue(code::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for Code {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "CLEANUP_FAILED" => Self::CleanupFailed,
                    "DEPRECATED_RESOURCE_USED" => Self::DeprecatedResourceUsed,
                    "DEPRECATED_TYPE_USED" => Self::DeprecatedTypeUsed,
                    "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Self::DiskSizeLargerThanImageSize,
                    "EXPERIMENTAL_TYPE_USED" => Self::ExperimentalTypeUsed,
                    "EXTERNAL_API_WARNING" => Self::ExternalApiWarning,
                    "FIELD_VALUE_OVERRIDEN" => Self::FieldValueOverriden,
                    "INJECTED_KERNELS_DEPRECATED" => Self::InjectedKernelsDeprecated,
                    "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => {
                        Self::InvalidHealthCheckForDynamicWieghtedLb
                    }
                    "LARGE_DEPLOYMENT_WARNING" => Self::LargeDeploymentWarning,
                    "LIST_OVERHEAD_QUOTA_EXCEED" => Self::ListOverheadQuotaExceed,
                    "MISSING_TYPE_DEPENDENCY" => Self::MissingTypeDependency,
                    "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Self::NextHopAddressNotAssigned,
                    "NEXT_HOP_CANNOT_IP_FORWARD" => Self::NextHopCannotIpForward,
                    "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => {
                        Self::NextHopInstanceHasNoIpv6Interface
                    }
                    "NEXT_HOP_INSTANCE_NOT_FOUND" => Self::NextHopInstanceNotFound,
                    "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Self::NextHopInstanceNotOnNetwork,
                    "NEXT_HOP_NOT_RUNNING" => Self::NextHopNotRunning,
                    "NOT_CRITICAL_ERROR" => Self::NotCriticalError,
                    "NO_RESULTS_ON_PAGE" => Self::NoResultsOnPage,
                    "PARTIAL_SUCCESS" => Self::PartialSuccess,
                    "QUOTA_INFO_UNAVAILABLE" => Self::QuotaInfoUnavailable,
                    "REQUIRED_TOS_AGREEMENT" => Self::RequiredTosAgreement,
                    "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => {
                        Self::ResourceInUseByOtherResourceWarning
                    }
                    "RESOURCE_NOT_DELETED" => Self::ResourceNotDeleted,
                    "SCHEMA_VALIDATION_IGNORED" => Self::SchemaValidationIgnored,
                    "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Self::SingleInstancePropertyTemplate,
                    "UNDECLARED_PROPERTIES" => Self::UndeclaredProperties,
                    "UNREACHABLE" => Self::Unreachable,
                    _ => Self::UnknownValue(code::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for Code {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::CleanupFailed => serializer.serialize_i32(0),
                    Self::DeprecatedResourceUsed => serializer.serialize_i32(1),
                    Self::DeprecatedTypeUsed => serializer.serialize_i32(2),
                    Self::DiskSizeLargerThanImageSize => serializer.serialize_i32(3),
                    Self::ExperimentalTypeUsed => serializer.serialize_i32(4),
                    Self::ExternalApiWarning => serializer.serialize_i32(5),
                    Self::FieldValueOverriden => serializer.serialize_i32(6),
                    Self::InjectedKernelsDeprecated => serializer.serialize_i32(7),
                    Self::InvalidHealthCheckForDynamicWieghtedLb => serializer.serialize_i32(8),
                    Self::LargeDeploymentWarning => serializer.serialize_i32(9),
                    Self::ListOverheadQuotaExceed => serializer.serialize_i32(10),
                    Self::MissingTypeDependency => serializer.serialize_i32(11),
                    Self::NextHopAddressNotAssigned => serializer.serialize_i32(12),
                    Self::NextHopCannotIpForward => serializer.serialize_i32(13),
                    Self::NextHopInstanceHasNoIpv6Interface => serializer.serialize_i32(14),
                    Self::NextHopInstanceNotFound => serializer.serialize_i32(15),
                    Self::NextHopInstanceNotOnNetwork => serializer.serialize_i32(16),
                    Self::NextHopNotRunning => serializer.serialize_i32(17),
                    Self::NotCriticalError => serializer.serialize_i32(18),
                    Self::NoResultsOnPage => serializer.serialize_i32(19),
                    Self::PartialSuccess => serializer.serialize_i32(20),
                    Self::QuotaInfoUnavailable => serializer.serialize_i32(21),
                    Self::RequiredTosAgreement => serializer.serialize_i32(22),
                    Self::ResourceInUseByOtherResourceWarning => serializer.serialize_i32(23),
                    Self::ResourceNotDeleted => serializer.serialize_i32(24),
                    Self::SchemaValidationIgnored => serializer.serialize_i32(25),
                    Self::SingleInstancePropertyTemplate => serializer.serialize_i32(26),
                    Self::UndeclaredProperties => serializer.serialize_i32(27),
                    Self::Unreachable => serializer.serialize_i32(28),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for Code {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<Code>::new(
                    ".google.cloud.compute.v1.MachineTypeAggregatedList.warning.code",
                ))
            }
        }
    }
}

/// Contains a list of machine types.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct MachineTypeList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    pub id: std::string::String,

    /// A list of MachineType resources.
    pub items: std::vec::Vec<crate::model::MachineType>,

    /// [Output Only] Type of resource. Always compute#machineTypeList for lists of machine types.
    pub kind: std::string::String,

    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    pub next_page_token: std::string::String,

    /// [Output Only] Server-defined URL for this resource.
    pub self_link: std::string::String,

    /// [Output Only] Informational warning message.
    pub warning: std::option::Option<crate::model::machine_type_list::Warning>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MachineTypeList {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [id][crate::model::MachineTypeList::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [items][crate::model::MachineTypeList::items].
    pub fn set_items<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::MachineType>,
    {
        use std::iter::Iterator;
        self.items = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [kind][crate::model::MachineTypeList::kind].
    pub fn set_kind<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.kind = v.into();
        self
    }

    /// Sets the value of [next_page_token][crate::model::MachineTypeList::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [self_link][crate::model::MachineTypeList::self_link].
    pub fn set_self_link<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.self_link = v.into();
        self
    }

    /// Sets the value of [warning][crate::model::MachineTypeList::warning].
    pub fn set_warning<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::machine_type_list::Warning>,
    {
        self.warning = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [warning][crate::model::MachineTypeList::warning].
    pub fn set_or_clear_warning<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::machine_type_list::Warning>,
    {
        self.warning = v.map(|x| x.into());
        self
    }
}

impl wkt::message::Message for MachineTypeList {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.compute.v1.MachineTypeList"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for MachineTypeList {
    type PageItem = crate::model::MachineType;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.items
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Defines additional types related to [MachineTypeList].
pub mod machine_type_list {
    #[allow(unused_imports)]
    use super::*;

    /// The message type for the [warning][google.cloud.compute.v1.MachineTypeList.warning] field.
    ///
    /// [google.cloud.compute.v1.MachineTypeList.warning]: crate::model::machine_type_list::Warning
    #[derive(Clone, Default, PartialEq)]
    #[non_exhaustive]
    pub struct Warning {
        /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
        pub code: crate::model::machine_type_list::warning::Code,

        /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
        pub data: std::vec::Vec<crate::model::machine_type_list::warning::Data>,

        /// [Output Only] A human-readable description of the warning code.
        pub message: std::string::String,

        pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Warning {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [code][crate::model::machine_type_list::Warning::code].
        pub fn set_code<T: std::convert::Into<crate::model::machine_type_list::warning::Code>>(
            mut self,
            v: T,
        ) -> Self {
            self.code = v.into();
            self
        }

        /// Sets the value of [data][crate::model::machine_type_list::Warning::data].
        pub fn set_data<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::machine_type_list::warning::Data>,
        {
            use std::iter::Iterator;
            self.data = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [message][crate::model::machine_type_list::Warning::message].
        pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.message = v.into();
            self
        }
    }

    impl wkt::message::Message for Warning {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.compute.v1.MachineTypeList.warning"
        }
    }

    /// Defines additional types related to [Warning].
    pub mod warning {
        #[allow(unused_imports)]
        use super::*;

        /// The message type for the [data][google.cloud.compute.v1.MachineTypeList.warning.data] field.
        ///
        /// [google.cloud.compute.v1.MachineTypeList.warning.data]: crate::model::machine_type_list::warning::Data
        #[derive(Clone, Default, PartialEq)]
        #[non_exhaustive]
        pub struct Data {
            /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
            pub key: std::string::String,

            /// [Output Only] A warning data value corresponding to the key.
            pub value: std::string::String,

            pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl Data {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [key][crate::model::machine_type_list::warning::Data::key].
            pub fn set_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.key = v.into();
                self
            }

            /// Sets the value of [value][crate::model::machine_type_list::warning::Data::value].
            pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.value = v.into();
                self
            }
        }

        impl wkt::message::Message for Data {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.compute.v1.MachineTypeList.warning.data"
            }
        }

        /// The enumerated type for the [code][google.cloud.compute.v1.MachineTypeList.warning.code] field.
        ///
        /// [google.cloud.compute.v1.MachineTypeList.warning.code]: crate::model::machine_type_list::warning::Code
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum Code {
            /// Warning about failed cleanup of transient changes made by a failed operation.
            CleanupFailed,
            /// A link to a deprecated resource was created.
            DeprecatedResourceUsed,
            /// When deploying and at least one of the resources has a type marked as deprecated
            DeprecatedTypeUsed,
            /// The user created a boot disk that is larger than image size.
            DiskSizeLargerThanImageSize,
            /// When deploying and at least one of the resources has a type marked as experimental
            ExperimentalTypeUsed,
            /// Warning that is present in an external api call
            ExternalApiWarning,
            /// Warning that value of a field has been overridden. Deprecated unused field.
            FieldValueOverriden,
            /// The operation involved use of an injected kernel, which is deprecated.
            InjectedKernelsDeprecated,
            /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
            InvalidHealthCheckForDynamicWieghtedLb,
            /// When deploying a deployment with a exceedingly large number of resources
            LargeDeploymentWarning,
            /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
            ListOverheadQuotaExceed,
            /// A resource depends on a missing type
            MissingTypeDependency,
            /// The route's nextHopIp address is not assigned to an instance on the network.
            NextHopAddressNotAssigned,
            /// The route's next hop instance cannot ip forward.
            NextHopCannotIpForward,
            /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
            NextHopInstanceHasNoIpv6Interface,
            /// The route's nextHopInstance URL refers to an instance that does not exist.
            NextHopInstanceNotFound,
            /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
            NextHopInstanceNotOnNetwork,
            /// The route's next hop instance does not have a status of RUNNING.
            NextHopNotRunning,
            /// Error which is not critical. We decided to continue the process despite the mentioned error.
            NotCriticalError,
            /// No results are present on a particular list page.
            NoResultsOnPage,
            /// Success is reported, but some results may be missing due to errors
            PartialSuccess,
            /// Quota information is not available to client requests (e.g: regions.list).
            QuotaInfoUnavailable,
            /// The user attempted to use a resource that requires a TOS they have not accepted.
            RequiredTosAgreement,
            /// Warning that a resource is in use.
            ResourceInUseByOtherResourceWarning,
            /// One or more of the resources set to auto-delete could not be deleted because they were in use.
            ResourceNotDeleted,
            /// When a resource schema validation is ignored.
            SchemaValidationIgnored,
            /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
            SingleInstancePropertyTemplate,
            /// When undeclared properties in the schema are present
            UndeclaredProperties,
            /// A given scope cannot be reached.
            Unreachable,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [Code::value] or
            /// [Code::name].
            UnknownValue(code::UnknownValue),
        }

        #[doc(hidden)]
        pub mod code {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl Code {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::CleanupFailed => std::option::Option::Some(0),
                    Self::DeprecatedResourceUsed => std::option::Option::Some(1),
                    Self::DeprecatedTypeUsed => std::option::Option::Some(2),
                    Self::DiskSizeLargerThanImageSize => std::option::Option::Some(3),
                    Self::ExperimentalTypeUsed => std::option::Option::Some(4),
                    Self::ExternalApiWarning => std::option::Option::Some(5),
                    Self::FieldValueOverriden => std::option::Option::Some(6),
                    Self::InjectedKernelsDeprecated => std::option::Option::Some(7),
                    Self::InvalidHealthCheckForDynamicWieghtedLb => std::option::Option::Some(8),
                    Self::LargeDeploymentWarning => std::option::Option::Some(9),
                    Self::ListOverheadQuotaExceed => std::option::Option::Some(10),
                    Self::MissingTypeDependency => std::option::Option::Some(11),
                    Self::NextHopAddressNotAssigned => std::option::Option::Some(12),
                    Self::NextHopCannotIpForward => std::option::Option::Some(13),
                    Self::NextHopInstanceHasNoIpv6Interface => std::option::Option::Some(14),
                    Self::NextHopInstanceNotFound => std::option::Option::Some(15),
                    Self::NextHopInstanceNotOnNetwork => std::option::Option::Some(16),
                    Self::NextHopNotRunning => std::option::Option::Some(17),
                    Self::NotCriticalError => std::option::Option::Some(18),
                    Self::NoResultsOnPage => std::option::Option::Some(19),
                    Self::PartialSuccess => std::option::Option::Some(20),
                    Self::QuotaInfoUnavailable => std::option::Option::Some(21),
                    Self::RequiredTosAgreement => std::option::Option::Some(22),
                    Self::ResourceInUseByOtherResourceWarning => std::option::Option::Some(23),
                    Self::ResourceNotDeleted => std::option::Option::Some(24),
                    Self::SchemaValidationIgnored => std::option::Option::Some(25),
                    Self::SingleInstancePropertyTemplate => std::option::Option::Some(26),
                    Self::UndeclaredProperties => std::option::Option::Some(27),
                    Self::Unreachable => std::option::Option::Some(28),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::CleanupFailed => std::option::Option::Some("CLEANUP_FAILED"),
                    Self::DeprecatedResourceUsed => {
                        std::option::Option::Some("DEPRECATED_RESOURCE_USED")
                    }
                    Self::DeprecatedTypeUsed => std::option::Option::Some("DEPRECATED_TYPE_USED"),
                    Self::DiskSizeLargerThanImageSize => {
                        std::option::Option::Some("DISK_SIZE_LARGER_THAN_IMAGE_SIZE")
                    }
                    Self::ExperimentalTypeUsed => {
                        std::option::Option::Some("EXPERIMENTAL_TYPE_USED")
                    }
                    Self::ExternalApiWarning => std::option::Option::Some("EXTERNAL_API_WARNING"),
                    Self::FieldValueOverriden => std::option::Option::Some("FIELD_VALUE_OVERRIDEN"),
                    Self::InjectedKernelsDeprecated => {
                        std::option::Option::Some("INJECTED_KERNELS_DEPRECATED")
                    }
                    Self::InvalidHealthCheckForDynamicWieghtedLb => {
                        std::option::Option::Some("INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")
                    }
                    Self::LargeDeploymentWarning => {
                        std::option::Option::Some("LARGE_DEPLOYMENT_WARNING")
                    }
                    Self::ListOverheadQuotaExceed => {
                        std::option::Option::Some("LIST_OVERHEAD_QUOTA_EXCEED")
                    }
                    Self::MissingTypeDependency => {
                        std::option::Option::Some("MISSING_TYPE_DEPENDENCY")
                    }
                    Self::NextHopAddressNotAssigned => {
                        std::option::Option::Some("NEXT_HOP_ADDRESS_NOT_ASSIGNED")
                    }
                    Self::NextHopCannotIpForward => {
                        std::option::Option::Some("NEXT_HOP_CANNOT_IP_FORWARD")
                    }
                    Self::NextHopInstanceHasNoIpv6Interface => {
                        std::option::Option::Some("NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")
                    }
                    Self::NextHopInstanceNotFound => {
                        std::option::Option::Some("NEXT_HOP_INSTANCE_NOT_FOUND")
                    }
                    Self::NextHopInstanceNotOnNetwork => {
                        std::option::Option::Some("NEXT_HOP_INSTANCE_NOT_ON_NETWORK")
                    }
                    Self::NextHopNotRunning => std::option::Option::Some("NEXT_HOP_NOT_RUNNING"),
                    Self::NotCriticalError => std::option::Option::Some("NOT_CRITICAL_ERROR"),
                    Self::NoResultsOnPage => std::option::Option::Some("NO_RESULTS_ON_PAGE"),
                    Self::PartialSuccess => std::option::Option::Some("PARTIAL_SUCCESS"),
                    Self::QuotaInfoUnavailable => {
                        std::option::Option::Some("QUOTA_INFO_UNAVAILABLE")
                    }
                    Self::RequiredTosAgreement => {
                        std::option::Option::Some("REQUIRED_TOS_AGREEMENT")
                    }
                    Self::ResourceInUseByOtherResourceWarning => {
                        std::option::Option::Some("RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")
                    }
                    Self::ResourceNotDeleted => std::option::Option::Some("RESOURCE_NOT_DELETED"),
                    Self::SchemaValidationIgnored => {
                        std::option::Option::Some("SCHEMA_VALIDATION_IGNORED")
                    }
                    Self::SingleInstancePropertyTemplate => {
                        std::option::Option::Some("SINGLE_INSTANCE_PROPERTY_TEMPLATE")
                    }
                    Self::UndeclaredProperties => {
                        std::option::Option::Some("UNDECLARED_PROPERTIES")
                    }
                    Self::Unreachable => std::option::Option::Some("UNREACHABLE"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for Code {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for Code {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for Code {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::CleanupFailed,
                    1 => Self::DeprecatedResourceUsed,
                    2 => Self::DeprecatedTypeUsed,
                    3 => Self::DiskSizeLargerThanImageSize,
                    4 => Self::ExperimentalTypeUsed,
                    5 => Self::ExternalApiWarning,
                    6 => Self::FieldValueOverriden,
                    7 => Self::InjectedKernelsDeprecated,
                    8 => Self::InvalidHealthCheckForDynamicWieghtedLb,
                    9 => Self::LargeDeploymentWarning,
                    10 => Self::ListOverheadQuotaExceed,
                    11 => Self::MissingTypeDependency,
                    12 => Self::NextHopAddressNotAssigned,
                    13 => Self::NextHopCannotIpForward,
                    14 => Self::NextHopInstanceHasNoIpv6Interface,
                    15 => Self::NextHopInstanceNotFound,
                    16 => Self::NextHopInstanceNotOnNetwork,
                    17 => Self::NextHopNotRunning,
                    18 => Self::NotCriticalError,
                    19 => Self::NoResultsOnPage,
                    20 => Self::PartialSuccess,
                    21 => Self::QuotaInfoUnavailable,
                    22 => Self::RequiredTosAgreement,
                    23 => Self::ResourceInUseByOtherResourceWarning,
                    24 => Self::ResourceNotDeleted,
                    25 => Self::SchemaValidationIgnored,
                    26 => Self::SingleInstancePropertyTemplate,
                    27 => Self::UndeclaredProperties,
                    28 => Self::Unreachable,
                    _ => Self::UnknownValue(code::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for Code {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "CLEANUP_FAILED" => Self::CleanupFailed,
                    "DEPRECATED_RESOURCE_USED" => Self::DeprecatedResourceUsed,
                    "DEPRECATED_TYPE_USED" => Self::DeprecatedTypeUsed,
                    "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Self::DiskSizeLargerThanImageSize,
                    "EXPERIMENTAL_TYPE_USED" => Self::ExperimentalTypeUsed,
                    "EXTERNAL_API_WARNING" => Self::ExternalApiWarning,
                    "FIELD_VALUE_OVERRIDEN" => Self::FieldValueOverriden,
                    "INJECTED_KERNELS_DEPRECATED" => Self::InjectedKernelsDeprecated,
                    "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => {
                        Self::InvalidHealthCheckForDynamicWieghtedLb
                    }
                    "LARGE_DEPLOYMENT_WARNING" => Self::LargeDeploymentWarning,
                    "LIST_OVERHEAD_QUOTA_EXCEED" => Self::ListOverheadQuotaExceed,
                    "MISSING_TYPE_DEPENDENCY" => Self::MissingTypeDependency,
                    "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Self::NextHopAddressNotAssigned,
                    "NEXT_HOP_CANNOT_IP_FORWARD" => Self::NextHopCannotIpForward,
                    "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => {
                        Self::NextHopInstanceHasNoIpv6Interface
                    }
                    "NEXT_HOP_INSTANCE_NOT_FOUND" => Self::NextHopInstanceNotFound,
                    "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Self::NextHopInstanceNotOnNetwork,
                    "NEXT_HOP_NOT_RUNNING" => Self::NextHopNotRunning,
                    "NOT_CRITICAL_ERROR" => Self::NotCriticalError,
                    "NO_RESULTS_ON_PAGE" => Self::NoResultsOnPage,
                    "PARTIAL_SUCCESS" => Self::PartialSuccess,
                    "QUOTA_INFO_UNAVAILABLE" => Self::QuotaInfoUnavailable,
                    "REQUIRED_TOS_AGREEMENT" => Self::RequiredTosAgreement,
                    "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => {
                        Self::ResourceInUseByOtherResourceWarning
                    }
                    "RESOURCE_NOT_DELETED" => Self::ResourceNotDeleted,
                    "SCHEMA_VALIDATION_IGNORED" => Self::SchemaValidationIgnored,
                    "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Self::SingleInstancePropertyTemplate,
                    "UNDECLARED_PROPERTIES" => Self::UndeclaredProperties,
                    "UNREACHABLE" => Self::Unreachable,
                    _ => Self::UnknownValue(code::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for Code {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::CleanupFailed => serializer.serialize_i32(0),
                    Self::DeprecatedResourceUsed => serializer.serialize_i32(1),
                    Self::DeprecatedTypeUsed => serializer.serialize_i32(2),
                    Self::DiskSizeLargerThanImageSize => serializer.serialize_i32(3),
                    Self::ExperimentalTypeUsed => serializer.serialize_i32(4),
                    Self::ExternalApiWarning => serializer.serialize_i32(5),
                    Self::FieldValueOverriden => serializer.serialize_i32(6),
                    Self::InjectedKernelsDeprecated => serializer.serialize_i32(7),
                    Self::InvalidHealthCheckForDynamicWieghtedLb => serializer.serialize_i32(8),
                    Self::LargeDeploymentWarning => serializer.serialize_i32(9),
                    Self::ListOverheadQuotaExceed => serializer.serialize_i32(10),
                    Self::MissingTypeDependency => serializer.serialize_i32(11),
                    Self::NextHopAddressNotAssigned => serializer.serialize_i32(12),
                    Self::NextHopCannotIpForward => serializer.serialize_i32(13),
                    Self::NextHopInstanceHasNoIpv6Interface => serializer.serialize_i32(14),
                    Self::NextHopInstanceNotFound => serializer.serialize_i32(15),
                    Self::NextHopInstanceNotOnNetwork => serializer.serialize_i32(16),
                    Self::NextHopNotRunning => serializer.serialize_i32(17),
                    Self::NotCriticalError => serializer.serialize_i32(18),
                    Self::NoResultsOnPage => serializer.serialize_i32(19),
                    Self::PartialSuccess => serializer.serialize_i32(20),
                    Self::QuotaInfoUnavailable => serializer.serialize_i32(21),
                    Self::RequiredTosAgreement => serializer.serialize_i32(22),
                    Self::ResourceInUseByOtherResourceWarning => serializer.serialize_i32(23),
                    Self::ResourceNotDeleted => serializer.serialize_i32(24),
                    Self::SchemaValidationIgnored => serializer.serialize_i32(25),
                    Self::SingleInstancePropertyTemplate => serializer.serialize_i32(26),
                    Self::UndeclaredProperties => serializer.serialize_i32(27),
                    Self::Unreachable => serializer.serialize_i32(28),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for Code {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<Code>::new(
                    ".google.cloud.compute.v1.MachineTypeList.warning.code",
                ))
            }
        }
    }
}

#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct MachineTypesScopedList {
    /// [Output Only] A list of machine types contained in this scope.
    pub machine_types: std::vec::Vec<crate::model::MachineType>,

    /// [Output Only] An informational warning that appears when the machine types list is empty.
    pub warning: std::option::Option<crate::model::machine_types_scoped_list::Warning>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl MachineTypesScopedList {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [machine_types][crate::model::MachineTypesScopedList::machine_types].
    pub fn set_machine_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::MachineType>,
    {
        use std::iter::Iterator;
        self.machine_types = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [warning][crate::model::MachineTypesScopedList::warning].
    pub fn set_warning<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::machine_types_scoped_list::Warning>,
    {
        self.warning = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [warning][crate::model::MachineTypesScopedList::warning].
    pub fn set_or_clear_warning<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::machine_types_scoped_list::Warning>,
    {
        self.warning = v.map(|x| x.into());
        self
    }
}

impl wkt::message::Message for MachineTypesScopedList {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.compute.v1.MachineTypesScopedList"
    }
}

/// Defines additional types related to [MachineTypesScopedList].
pub mod machine_types_scoped_list {
    #[allow(unused_imports)]
    use super::*;

    /// The message type for the [warning][google.cloud.compute.v1.MachineTypesScopedList.warning] field.
    ///
    /// [google.cloud.compute.v1.MachineTypesScopedList.warning]: crate::model::machine_types_scoped_list::Warning
    #[derive(Clone, Default, PartialEq)]
    #[non_exhaustive]
    pub struct Warning {
        /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
        pub code: crate::model::machine_types_scoped_list::warning::Code,

        /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
        pub data: std::vec::Vec<crate::model::machine_types_scoped_list::warning::Data>,

        /// [Output Only] A human-readable description of the warning code.
        pub message: std::string::String,

        pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Warning {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [code][crate::model::machine_types_scoped_list::Warning::code].
        pub fn set_code<
            T: std::convert::Into<crate::model::machine_types_scoped_list::warning::Code>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.code = v.into();
            self
        }

        /// Sets the value of [data][crate::model::machine_types_scoped_list::Warning::data].
        pub fn set_data<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::machine_types_scoped_list::warning::Data>,
        {
            use std::iter::Iterator;
            self.data = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [message][crate::model::machine_types_scoped_list::Warning::message].
        pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.message = v.into();
            self
        }
    }

    impl wkt::message::Message for Warning {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.compute.v1.MachineTypesScopedList.warning"
        }
    }

    /// Defines additional types related to [Warning].
    pub mod warning {
        #[allow(unused_imports)]
        use super::*;

        /// The message type for the [data][google.cloud.compute.v1.MachineTypesScopedList.warning.data] field.
        ///
        /// [google.cloud.compute.v1.MachineTypesScopedList.warning.data]: crate::model::machine_types_scoped_list::warning::Data
        #[derive(Clone, Default, PartialEq)]
        #[non_exhaustive]
        pub struct Data {
            /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
            pub key: std::string::String,

            /// [Output Only] A warning data value corresponding to the key.
            pub value: std::string::String,

            pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl Data {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [key][crate::model::machine_types_scoped_list::warning::Data::key].
            pub fn set_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.key = v.into();
                self
            }

            /// Sets the value of [value][crate::model::machine_types_scoped_list::warning::Data::value].
            pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.value = v.into();
                self
            }
        }

        impl wkt::message::Message for Data {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.compute.v1.MachineTypesScopedList.warning.data"
            }
        }

        /// The enumerated type for the [code][google.cloud.compute.v1.MachineTypesScopedList.warning.code] field.
        ///
        /// [google.cloud.compute.v1.MachineTypesScopedList.warning.code]: crate::model::machine_types_scoped_list::warning::Code
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum Code {
            /// Warning about failed cleanup of transient changes made by a failed operation.
            CleanupFailed,
            /// A link to a deprecated resource was created.
            DeprecatedResourceUsed,
            /// When deploying and at least one of the resources has a type marked as deprecated
            DeprecatedTypeUsed,
            /// The user created a boot disk that is larger than image size.
            DiskSizeLargerThanImageSize,
            /// When deploying and at least one of the resources has a type marked as experimental
            ExperimentalTypeUsed,
            /// Warning that is present in an external api call
            ExternalApiWarning,
            /// Warning that value of a field has been overridden. Deprecated unused field.
            FieldValueOverriden,
            /// The operation involved use of an injected kernel, which is deprecated.
            InjectedKernelsDeprecated,
            /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
            InvalidHealthCheckForDynamicWieghtedLb,
            /// When deploying a deployment with a exceedingly large number of resources
            LargeDeploymentWarning,
            /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
            ListOverheadQuotaExceed,
            /// A resource depends on a missing type
            MissingTypeDependency,
            /// The route's nextHopIp address is not assigned to an instance on the network.
            NextHopAddressNotAssigned,
            /// The route's next hop instance cannot ip forward.
            NextHopCannotIpForward,
            /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
            NextHopInstanceHasNoIpv6Interface,
            /// The route's nextHopInstance URL refers to an instance that does not exist.
            NextHopInstanceNotFound,
            /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
            NextHopInstanceNotOnNetwork,
            /// The route's next hop instance does not have a status of RUNNING.
            NextHopNotRunning,
            /// Error which is not critical. We decided to continue the process despite the mentioned error.
            NotCriticalError,
            /// No results are present on a particular list page.
            NoResultsOnPage,
            /// Success is reported, but some results may be missing due to errors
            PartialSuccess,
            /// Quota information is not available to client requests (e.g: regions.list).
            QuotaInfoUnavailable,
            /// The user attempted to use a resource that requires a TOS they have not accepted.
            RequiredTosAgreement,
            /// Warning that a resource is in use.
            ResourceInUseByOtherResourceWarning,
            /// One or more of the resources set to auto-delete could not be deleted because they were in use.
            ResourceNotDeleted,
            /// When a resource schema validation is ignored.
            SchemaValidationIgnored,
            /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
            SingleInstancePropertyTemplate,
            /// When undeclared properties in the schema are present
            UndeclaredProperties,
            /// A given scope cannot be reached.
            Unreachable,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [Code::value] or
            /// [Code::name].
            UnknownValue(code::UnknownValue),
        }

        #[doc(hidden)]
        pub mod code {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl Code {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::CleanupFailed => std::option::Option::Some(0),
                    Self::DeprecatedResourceUsed => std::option::Option::Some(1),
                    Self::DeprecatedTypeUsed => std::option::Option::Some(2),
                    Self::DiskSizeLargerThanImageSize => std::option::Option::Some(3),
                    Self::ExperimentalTypeUsed => std::option::Option::Some(4),
                    Self::ExternalApiWarning => std::option::Option::Some(5),
                    Self::FieldValueOverriden => std::option::Option::Some(6),
                    Self::InjectedKernelsDeprecated => std::option::Option::Some(7),
                    Self::InvalidHealthCheckForDynamicWieghtedLb => std::option::Option::Some(8),
                    Self::LargeDeploymentWarning => std::option::Option::Some(9),
                    Self::ListOverheadQuotaExceed => std::option::Option::Some(10),
                    Self::MissingTypeDependency => std::option::Option::Some(11),
                    Self::NextHopAddressNotAssigned => std::option::Option::Some(12),
                    Self::NextHopCannotIpForward => std::option::Option::Some(13),
                    Self::NextHopInstanceHasNoIpv6Interface => std::option::Option::Some(14),
                    Self::NextHopInstanceNotFound => std::option::Option::Some(15),
                    Self::NextHopInstanceNotOnNetwork => std::option::Option::Some(16),
                    Self::NextHopNotRunning => std::option::Option::Some(17),
                    Self::NotCriticalError => std::option::Option::Some(18),
                    Self::NoResultsOnPage => std::option::Option::Some(19),
                    Self::PartialSuccess => std::option::Option::Some(20),
                    Self::QuotaInfoUnavailable => std::option::Option::Some(21),
                    Self::RequiredTosAgreement => std::option::Option::Some(22),
                    Self::ResourceInUseByOtherResourceWarning => std::option::Option::Some(23),
                    Self::ResourceNotDeleted => std::option::Option::Some(24),
                    Self::SchemaValidationIgnored => std::option::Option::Some(25),
                    Self::SingleInstancePropertyTemplate => std::option::Option::Some(26),
                    Self::UndeclaredProperties => std::option::Option::Some(27),
                    Self::Unreachable => std::option::Option::Some(28),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::CleanupFailed => std::option::Option::Some("CLEANUP_FAILED"),
                    Self::DeprecatedResourceUsed => {
                        std::option::Option::Some("DEPRECATED_RESOURCE_USED")
                    }
                    Self::DeprecatedTypeUsed => std::option::Option::Some("DEPRECATED_TYPE_USED"),
                    Self::DiskSizeLargerThanImageSize => {
                        std::option::Option::Some("DISK_SIZE_LARGER_THAN_IMAGE_SIZE")
                    }
                    Self::ExperimentalTypeUsed => {
                        std::option::Option::Some("EXPERIMENTAL_TYPE_USED")
                    }
                    Self::ExternalApiWarning => std::option::Option::Some("EXTERNAL_API_WARNING"),
                    Self::FieldValueOverriden => std::option::Option::Some("FIELD_VALUE_OVERRIDEN"),
                    Self::InjectedKernelsDeprecated => {
                        std::option::Option::Some("INJECTED_KERNELS_DEPRECATED")
                    }
                    Self::InvalidHealthCheckForDynamicWieghtedLb => {
                        std::option::Option::Some("INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")
                    }
                    Self::LargeDeploymentWarning => {
                        std::option::Option::Some("LARGE_DEPLOYMENT_WARNING")
                    }
                    Self::ListOverheadQuotaExceed => {
                        std::option::Option::Some("LIST_OVERHEAD_QUOTA_EXCEED")
                    }
                    Self::MissingTypeDependency => {
                        std::option::Option::Some("MISSING_TYPE_DEPENDENCY")
                    }
                    Self::NextHopAddressNotAssigned => {
                        std::option::Option::Some("NEXT_HOP_ADDRESS_NOT_ASSIGNED")
                    }
                    Self::NextHopCannotIpForward => {
                        std::option::Option::Some("NEXT_HOP_CANNOT_IP_FORWARD")
                    }
                    Self::NextHopInstanceHasNoIpv6Interface => {
                        std::option::Option::Some("NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")
                    }
                    Self::NextHopInstanceNotFound => {
                        std::option::Option::Some("NEXT_HOP_INSTANCE_NOT_FOUND")
                    }
                    Self::NextHopInstanceNotOnNetwork => {
                        std::option::Option::Some("NEXT_HOP_INSTANCE_NOT_ON_NETWORK")
                    }
                    Self::NextHopNotRunning => std::option::Option::Some("NEXT_HOP_NOT_RUNNING"),
                    Self::NotCriticalError => std::option::Option::Some("NOT_CRITICAL_ERROR"),
                    Self::NoResultsOnPage => std::option::Option::Some("NO_RESULTS_ON_PAGE"),
                    Self::PartialSuccess => std::option::Option::Some("PARTIAL_SUCCESS"),
                    Self::QuotaInfoUnavailable => {
                        std::option::Option::Some("QUOTA_INFO_UNAVAILABLE")
                    }
                    Self::RequiredTosAgreement => {
                        std::option::Option::Some("REQUIRED_TOS_AGREEMENT")
                    }
                    Self::ResourceInUseByOtherResourceWarning => {
                        std::option::Option::Some("RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")
                    }
                    Self::ResourceNotDeleted => std::option::Option::Some("RESOURCE_NOT_DELETED"),
                    Self::SchemaValidationIgnored => {
                        std::option::Option::Some("SCHEMA_VALIDATION_IGNORED")
                    }
                    Self::SingleInstancePropertyTemplate => {
                        std::option::Option::Some("SINGLE_INSTANCE_PROPERTY_TEMPLATE")
                    }
                    Self::UndeclaredProperties => {
                        std::option::Option::Some("UNDECLARED_PROPERTIES")
                    }
                    Self::Unreachable => std::option::Option::Some("UNREACHABLE"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for Code {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for Code {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for Code {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::CleanupFailed,
                    1 => Self::DeprecatedResourceUsed,
                    2 => Self::DeprecatedTypeUsed,
                    3 => Self::DiskSizeLargerThanImageSize,
                    4 => Self::ExperimentalTypeUsed,
                    5 => Self::ExternalApiWarning,
                    6 => Self::FieldValueOverriden,
                    7 => Self::InjectedKernelsDeprecated,
                    8 => Self::InvalidHealthCheckForDynamicWieghtedLb,
                    9 => Self::LargeDeploymentWarning,
                    10 => Self::ListOverheadQuotaExceed,
                    11 => Self::MissingTypeDependency,
                    12 => Self::NextHopAddressNotAssigned,
                    13 => Self::NextHopCannotIpForward,
                    14 => Self::NextHopInstanceHasNoIpv6Interface,
                    15 => Self::NextHopInstanceNotFound,
                    16 => Self::NextHopInstanceNotOnNetwork,
                    17 => Self::NextHopNotRunning,
                    18 => Self::NotCriticalError,
                    19 => Self::NoResultsOnPage,
                    20 => Self::PartialSuccess,
                    21 => Self::QuotaInfoUnavailable,
                    22 => Self::RequiredTosAgreement,
                    23 => Self::ResourceInUseByOtherResourceWarning,
                    24 => Self::ResourceNotDeleted,
                    25 => Self::SchemaValidationIgnored,
                    26 => Self::SingleInstancePropertyTemplate,
                    27 => Self::UndeclaredProperties,
                    28 => Self::Unreachable,
                    _ => Self::UnknownValue(code::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for Code {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "CLEANUP_FAILED" => Self::CleanupFailed,
                    "DEPRECATED_RESOURCE_USED" => Self::DeprecatedResourceUsed,
                    "DEPRECATED_TYPE_USED" => Self::DeprecatedTypeUsed,
                    "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Self::DiskSizeLargerThanImageSize,
                    "EXPERIMENTAL_TYPE_USED" => Self::ExperimentalTypeUsed,
                    "EXTERNAL_API_WARNING" => Self::ExternalApiWarning,
                    "FIELD_VALUE_OVERRIDEN" => Self::FieldValueOverriden,
                    "INJECTED_KERNELS_DEPRECATED" => Self::InjectedKernelsDeprecated,
                    "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => {
                        Self::InvalidHealthCheckForDynamicWieghtedLb
                    }
                    "LARGE_DEPLOYMENT_WARNING" => Self::LargeDeploymentWarning,
                    "LIST_OVERHEAD_QUOTA_EXCEED" => Self::ListOverheadQuotaExceed,
                    "MISSING_TYPE_DEPENDENCY" => Self::MissingTypeDependency,
                    "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Self::NextHopAddressNotAssigned,
                    "NEXT_HOP_CANNOT_IP_FORWARD" => Self::NextHopCannotIpForward,
                    "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => {
                        Self::NextHopInstanceHasNoIpv6Interface
                    }
                    "NEXT_HOP_INSTANCE_NOT_FOUND" => Self::NextHopInstanceNotFound,
                    "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Self::NextHopInstanceNotOnNetwork,
                    "NEXT_HOP_NOT_RUNNING" => Self::NextHopNotRunning,
                    "NOT_CRITICAL_ERROR" => Self::NotCriticalError,
                    "NO_RESULTS_ON_PAGE" => Self::NoResultsOnPage,
                    "PARTIAL_SUCCESS" => Self::PartialSuccess,
                    "QUOTA_INFO_UNAVAILABLE" => Self::QuotaInfoUnavailable,
                    "REQUIRED_TOS_AGREEMENT" => Self::RequiredTosAgreement,
                    "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => {
                        Self::ResourceInUseByOtherResourceWarning
                    }
                    "RESOURCE_NOT_DELETED" => Self::ResourceNotDeleted,
                    "SCHEMA_VALIDATION_IGNORED" => Self::SchemaValidationIgnored,
                    "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Self::SingleInstancePropertyTemplate,
                    "UNDECLARED_PROPERTIES" => Self::UndeclaredProperties,
                    "UNREACHABLE" => Self::Unreachable,
                    _ => Self::UnknownValue(code::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for Code {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::CleanupFailed => serializer.serialize_i32(0),
                    Self::DeprecatedResourceUsed => serializer.serialize_i32(1),
                    Self::DeprecatedTypeUsed => serializer.serialize_i32(2),
                    Self::DiskSizeLargerThanImageSize => serializer.serialize_i32(3),
                    Self::ExperimentalTypeUsed => serializer.serialize_i32(4),
                    Self::ExternalApiWarning => serializer.serialize_i32(5),
                    Self::FieldValueOverriden => serializer.serialize_i32(6),
                    Self::InjectedKernelsDeprecated => serializer.serialize_i32(7),
                    Self::InvalidHealthCheckForDynamicWieghtedLb => serializer.serialize_i32(8),
                    Self::LargeDeploymentWarning => serializer.serialize_i32(9),
                    Self::ListOverheadQuotaExceed => serializer.serialize_i32(10),
                    Self::MissingTypeDependency => serializer.serialize_i32(11),
                    Self::NextHopAddressNotAssigned => serializer.serialize_i32(12),
                    Self::NextHopCannotIpForward => serializer.serialize_i32(13),
                    Self::NextHopInstanceHasNoIpv6Interface => serializer.serialize_i32(14),
                    Self::NextHopInstanceNotFound => serializer.serialize_i32(15),
                    Self::NextHopInstanceNotOnNetwork => serializer.serialize_i32(16),
                    Self::NextHopNotRunning => serializer.serialize_i32(17),
                    Self::NotCriticalError => serializer.serialize_i32(18),
                    Self::NoResultsOnPage => serializer.serialize_i32(19),
                    Self::PartialSuccess => serializer.serialize_i32(20),
                    Self::QuotaInfoUnavailable => serializer.serialize_i32(21),
                    Self::RequiredTosAgreement => serializer.serialize_i32(22),
                    Self::ResourceInUseByOtherResourceWarning => serializer.serialize_i32(23),
                    Self::ResourceNotDeleted => serializer.serialize_i32(24),
                    Self::SchemaValidationIgnored => serializer.serialize_i32(25),
                    Self::SingleInstancePropertyTemplate => serializer.serialize_i32(26),
                    Self::UndeclaredProperties => serializer.serialize_i32(27),
                    Self::Unreachable => serializer.serialize_i32(28),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for Code {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<Code>::new(
                    ".google.cloud.compute.v1.MachineTypesScopedList.warning.code",
                ))
            }
        }
    }
}

/// Represents a Zone resource. A zone is a deployment area. These deployment areas are subsets of a region. For example the zone us-east1-b is located in the us-east1 region. For more information, read Regions and Zones.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct Zone {
    /// [Output Only] Available cpu/platform selections for the zone.
    pub available_cpu_platforms: std::vec::Vec<std::string::String>,

    /// [Output Only] Creation timestamp in RFC3339 text format.
    pub creation_timestamp: std::string::String,

    /// [Output Only] The deprecation status associated with this zone.
    pub deprecated: std::option::Option<crate::model::DeprecationStatus>,

    /// [Output Only] Textual description of the resource.
    pub description: std::string::String,

    /// [Output Only] The unique identifier for the resource. This identifier is defined by the server.
    pub id: u64,

    /// [Output Only] Type of the resource. Always compute#zone for zones.
    pub kind: std::string::String,

    /// [Output Only] Name of the resource.
    pub name: std::string::String,

    /// [Output Only] Full URL reference to the region which hosts the zone.
    pub region: std::string::String,

    /// [Output Only] Server-defined URL for the resource.
    pub self_link: std::string::String,

    /// [Output Only] Status of the zone, either UP or DOWN.
    pub status: crate::model::zone::Status,

    /// [Output Only] Reserved for future use.
    pub supports_pzs: bool,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Zone {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [available_cpu_platforms][crate::model::Zone::available_cpu_platforms].
    pub fn set_available_cpu_platforms<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.available_cpu_platforms = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [creation_timestamp][crate::model::Zone::creation_timestamp].
    pub fn set_creation_timestamp<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.creation_timestamp = v.into();
        self
    }

    /// Sets the value of [deprecated][crate::model::Zone::deprecated].
    pub fn set_deprecated<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::DeprecationStatus>,
    {
        self.deprecated = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [deprecated][crate::model::Zone::deprecated].
    pub fn set_or_clear_deprecated<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::DeprecationStatus>,
    {
        self.deprecated = v.map(|x| x.into());
        self
    }

    /// Sets the value of [description][crate::model::Zone::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [id][crate::model::Zone::id].
    pub fn set_id<T: std::convert::Into<u64>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [kind][crate::model::Zone::kind].
    pub fn set_kind<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.kind = v.into();
        self
    }

    /// Sets the value of [name][crate::model::Zone::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [region][crate::model::Zone::region].
    pub fn set_region<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.region = v.into();
        self
    }

    /// Sets the value of [self_link][crate::model::Zone::self_link].
    pub fn set_self_link<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.self_link = v.into();
        self
    }

    /// Sets the value of [status][crate::model::Zone::status].
    pub fn set_status<T: std::convert::Into<crate::model::zone::Status>>(mut self, v: T) -> Self {
        self.status = v.into();
        self
    }

    /// Sets the value of [supports_pzs][crate::model::Zone::supports_pzs].
    pub fn set_supports_pzs<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.supports_pzs = v.into();
        self
    }
}

impl wkt::message::Message for Zone {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.compute.v1.Zone"
    }
}

/// Defines additional types related to [Zone].
pub mod zone {
    #[allow(unused_imports)]
    use super::*;

    /// The enumerated type for the [status][google.cloud.compute.v1.Zone.status] field.
    ///
    /// [google.cloud.compute.v1.Zone.status]: crate::model::zone::Status
    ///
    /// # Working with unknown values
    ///
    /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
    /// additional enum variants at any time. Adding new variants is not considered
    /// a breaking change. Applications should write their code in anticipation of:
    ///
    /// - New values appearing in future releases of the client library, **and**
    /// - New values received dynamically, without application changes.
    ///
    /// Please consult the [Working with enums] section in the user guide for some
    /// guidelines.
    ///
    /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
    #[derive(Clone, Debug, PartialEq)]
    #[non_exhaustive]
    pub enum Status {
        Down,
        Up,
        /// If set, the enum was initialized with an unknown value.
        ///
        /// Applications can examine the value using [Status::value] or
        /// [Status::name].
        UnknownValue(status::UnknownValue),
    }

    #[doc(hidden)]
    pub mod status {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Clone, Debug, PartialEq)]
        pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
    }

    impl Status {
        /// Gets the enum value.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the string representation of enums.
        pub fn value(&self) -> std::option::Option<i32> {
            match self {
                Self::Down => std::option::Option::Some(0),
                Self::Up => std::option::Option::Some(1),
                Self::UnknownValue(u) => u.0.value(),
            }
        }

        /// Gets the enum value as a string.
        ///
        /// Returns `None` if the enum contains an unknown value deserialized from
        /// the integer representation of enums.
        pub fn name(&self) -> std::option::Option<&str> {
            match self {
                Self::Down => std::option::Option::Some("DOWN"),
                Self::Up => std::option::Option::Some("UP"),
                Self::UnknownValue(u) => u.0.name(),
            }
        }
    }

    impl std::default::Default for Status {
        fn default() -> Self {
            use std::convert::From;
            Self::from(0)
        }
    }

    impl std::fmt::Display for Status {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
            wkt::internal::display_enum(f, self.name(), self.value())
        }
    }

    impl std::convert::From<i32> for Status {
        fn from(value: i32) -> Self {
            match value {
                0 => Self::Down,
                1 => Self::Up,
                _ => Self::UnknownValue(status::UnknownValue(
                    wkt::internal::UnknownEnumValue::Integer(value),
                )),
            }
        }
    }

    impl std::convert::From<&str> for Status {
        fn from(value: &str) -> Self {
            use std::string::ToString;
            match value {
                "DOWN" => Self::Down,
                "UP" => Self::Up,
                _ => Self::UnknownValue(status::UnknownValue(
                    wkt::internal::UnknownEnumValue::String(value.to_string()),
                )),
            }
        }
    }

    impl serde::ser::Serialize for Status {
        fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
        where
            S: serde::Serializer,
        {
            match self {
                Self::Down => serializer.serialize_i32(0),
                Self::Up => serializer.serialize_i32(1),
                Self::UnknownValue(u) => u.0.serialize(serializer),
            }
        }
    }

    impl<'de> serde::de::Deserialize<'de> for Status {
        fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
        where
            D: serde::Deserializer<'de>,
        {
            deserializer.deserialize_any(wkt::internal::EnumVisitor::<Status>::new(
                ".google.cloud.compute.v1.Zone.status",
            ))
        }
    }
}

/// Contains a list of zone resources.
#[derive(Clone, Default, PartialEq)]
#[non_exhaustive]
pub struct ZoneList {
    /// [Output Only] Unique identifier for the resource; defined by the server.
    pub id: std::string::String,

    /// A list of Zone resources.
    pub items: std::vec::Vec<crate::model::Zone>,

    /// Type of resource.
    pub kind: std::string::String,

    /// [Output Only] This token allows you to get the next page of results for list requests. If the number of results is larger than maxResults, use the nextPageToken as a value for the query parameter pageToken in the next list request. Subsequent list requests will have their own nextPageToken to continue paging through the results.
    pub next_page_token: std::string::String,

    /// [Output Only] Server-defined URL for this resource.
    pub self_link: std::string::String,

    /// [Output Only] Informational warning message.
    pub warning: std::option::Option<crate::model::zone_list::Warning>,

    pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ZoneList {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [id][crate::model::ZoneList::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [items][crate::model::ZoneList::items].
    pub fn set_items<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Zone>,
    {
        use std::iter::Iterator;
        self.items = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [kind][crate::model::ZoneList::kind].
    pub fn set_kind<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.kind = v.into();
        self
    }

    /// Sets the value of [next_page_token][crate::model::ZoneList::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [self_link][crate::model::ZoneList::self_link].
    pub fn set_self_link<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.self_link = v.into();
        self
    }

    /// Sets the value of [warning][crate::model::ZoneList::warning].
    pub fn set_warning<T>(mut self, v: T) -> Self
    where
        T: std::convert::Into<crate::model::zone_list::Warning>,
    {
        self.warning = std::option::Option::Some(v.into());
        self
    }

    /// Sets or clears the value of [warning][crate::model::ZoneList::warning].
    pub fn set_or_clear_warning<T>(mut self, v: std::option::Option<T>) -> Self
    where
        T: std::convert::Into<crate::model::zone_list::Warning>,
    {
        self.warning = v.map(|x| x.into());
        self
    }
}

impl wkt::message::Message for ZoneList {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.compute.v1.ZoneList"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ZoneList {
    type PageItem = crate::model::Zone;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.items
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Defines additional types related to [ZoneList].
pub mod zone_list {
    #[allow(unused_imports)]
    use super::*;

    /// The message type for the [warning][google.cloud.compute.v1.ZoneList.warning] field.
    ///
    /// [google.cloud.compute.v1.ZoneList.warning]: crate::model::zone_list::Warning
    #[derive(Clone, Default, PartialEq)]
    #[non_exhaustive]
    pub struct Warning {
        /// [Output Only] A warning code, if applicable. For example, Compute Engine returns NO_RESULTS_ON_PAGE if there are no results in the response.
        pub code: crate::model::zone_list::warning::Code,

        /// [Output Only] Metadata about this warning in key: value format. For example: "data": [ { "key": "scope", "value": "zones/us-east1-d" }
        pub data: std::vec::Vec<crate::model::zone_list::warning::Data>,

        /// [Output Only] A human-readable description of the warning code.
        pub message: std::string::String,

        pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Warning {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [code][crate::model::zone_list::Warning::code].
        pub fn set_code<T: std::convert::Into<crate::model::zone_list::warning::Code>>(
            mut self,
            v: T,
        ) -> Self {
            self.code = v.into();
            self
        }

        /// Sets the value of [data][crate::model::zone_list::Warning::data].
        pub fn set_data<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::zone_list::warning::Data>,
        {
            use std::iter::Iterator;
            self.data = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [message][crate::model::zone_list::Warning::message].
        pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.message = v.into();
            self
        }
    }

    impl wkt::message::Message for Warning {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.compute.v1.ZoneList.warning"
        }
    }

    /// Defines additional types related to [Warning].
    pub mod warning {
        #[allow(unused_imports)]
        use super::*;

        /// The message type for the [data][google.cloud.compute.v1.ZoneList.warning.data] field.
        ///
        /// [google.cloud.compute.v1.ZoneList.warning.data]: crate::model::zone_list::warning::Data
        #[derive(Clone, Default, PartialEq)]
        #[non_exhaustive]
        pub struct Data {
            /// [Output Only] A key that provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement, or a warning about invalid network settings (for example, if an instance attempts to perform IP forwarding but is not enabled for IP forwarding).
            pub key: std::string::String,

            /// [Output Only] A warning data value corresponding to the key.
            pub value: std::string::String,

            pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
        }

        impl Data {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [key][crate::model::zone_list::warning::Data::key].
            pub fn set_key<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.key = v.into();
                self
            }

            /// Sets the value of [value][crate::model::zone_list::warning::Data::value].
            pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.value = v.into();
                self
            }
        }

        impl wkt::message::Message for Data {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.compute.v1.ZoneList.warning.data"
            }
        }

        /// The enumerated type for the [code][google.cloud.compute.v1.ZoneList.warning.code] field.
        ///
        /// [google.cloud.compute.v1.ZoneList.warning.code]: crate::model::zone_list::warning::Code
        ///
        /// # Working with unknown values
        ///
        /// This enum is defined as `#[non_exhaustive]` because Google Cloud may add
        /// additional enum variants at any time. Adding new variants is not considered
        /// a breaking change. Applications should write their code in anticipation of:
        ///
        /// - New values appearing in future releases of the client library, **and**
        /// - New values received dynamically, without application changes.
        ///
        /// Please consult the [Working with enums] section in the user guide for some
        /// guidelines.
        ///
        /// [Working with enums]: https://google-cloud-rust.github.io/working_with_enums.html
        #[derive(Clone, Debug, PartialEq)]
        #[non_exhaustive]
        pub enum Code {
            /// Warning about failed cleanup of transient changes made by a failed operation.
            CleanupFailed,
            /// A link to a deprecated resource was created.
            DeprecatedResourceUsed,
            /// When deploying and at least one of the resources has a type marked as deprecated
            DeprecatedTypeUsed,
            /// The user created a boot disk that is larger than image size.
            DiskSizeLargerThanImageSize,
            /// When deploying and at least one of the resources has a type marked as experimental
            ExperimentalTypeUsed,
            /// Warning that is present in an external api call
            ExternalApiWarning,
            /// Warning that value of a field has been overridden. Deprecated unused field.
            FieldValueOverriden,
            /// The operation involved use of an injected kernel, which is deprecated.
            InjectedKernelsDeprecated,
            /// A WEIGHTED_MAGLEV backend service is associated with a health check that is not of type HTTP/HTTPS/HTTP2.
            InvalidHealthCheckForDynamicWieghtedLb,
            /// When deploying a deployment with a exceedingly large number of resources
            LargeDeploymentWarning,
            /// Resource can't be retrieved due to list overhead quota exceed which captures the amount of resources filtered out by user-defined list filter.
            ListOverheadQuotaExceed,
            /// A resource depends on a missing type
            MissingTypeDependency,
            /// The route's nextHopIp address is not assigned to an instance on the network.
            NextHopAddressNotAssigned,
            /// The route's next hop instance cannot ip forward.
            NextHopCannotIpForward,
            /// The route's nextHopInstance URL refers to an instance that does not have an ipv6 interface on the same network as the route.
            NextHopInstanceHasNoIpv6Interface,
            /// The route's nextHopInstance URL refers to an instance that does not exist.
            NextHopInstanceNotFound,
            /// The route's nextHopInstance URL refers to an instance that is not on the same network as the route.
            NextHopInstanceNotOnNetwork,
            /// The route's next hop instance does not have a status of RUNNING.
            NextHopNotRunning,
            /// Error which is not critical. We decided to continue the process despite the mentioned error.
            NotCriticalError,
            /// No results are present on a particular list page.
            NoResultsOnPage,
            /// Success is reported, but some results may be missing due to errors
            PartialSuccess,
            /// Quota information is not available to client requests (e.g: regions.list).
            QuotaInfoUnavailable,
            /// The user attempted to use a resource that requires a TOS they have not accepted.
            RequiredTosAgreement,
            /// Warning that a resource is in use.
            ResourceInUseByOtherResourceWarning,
            /// One or more of the resources set to auto-delete could not be deleted because they were in use.
            ResourceNotDeleted,
            /// When a resource schema validation is ignored.
            SchemaValidationIgnored,
            /// Instance template used in instance group manager is valid as such, but its application does not make a lot of sense, because it allows only single instance in instance group.
            SingleInstancePropertyTemplate,
            /// When undeclared properties in the schema are present
            UndeclaredProperties,
            /// A given scope cannot be reached.
            Unreachable,
            /// If set, the enum was initialized with an unknown value.
            ///
            /// Applications can examine the value using [Code::value] or
            /// [Code::name].
            UnknownValue(code::UnknownValue),
        }

        #[doc(hidden)]
        pub mod code {
            #[allow(unused_imports)]
            use super::*;
            #[derive(Clone, Debug, PartialEq)]
            pub struct UnknownValue(pub(crate) wkt::internal::UnknownEnumValue);
        }

        impl Code {
            /// Gets the enum value.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the string representation of enums.
            pub fn value(&self) -> std::option::Option<i32> {
                match self {
                    Self::CleanupFailed => std::option::Option::Some(0),
                    Self::DeprecatedResourceUsed => std::option::Option::Some(1),
                    Self::DeprecatedTypeUsed => std::option::Option::Some(2),
                    Self::DiskSizeLargerThanImageSize => std::option::Option::Some(3),
                    Self::ExperimentalTypeUsed => std::option::Option::Some(4),
                    Self::ExternalApiWarning => std::option::Option::Some(5),
                    Self::FieldValueOverriden => std::option::Option::Some(6),
                    Self::InjectedKernelsDeprecated => std::option::Option::Some(7),
                    Self::InvalidHealthCheckForDynamicWieghtedLb => std::option::Option::Some(8),
                    Self::LargeDeploymentWarning => std::option::Option::Some(9),
                    Self::ListOverheadQuotaExceed => std::option::Option::Some(10),
                    Self::MissingTypeDependency => std::option::Option::Some(11),
                    Self::NextHopAddressNotAssigned => std::option::Option::Some(12),
                    Self::NextHopCannotIpForward => std::option::Option::Some(13),
                    Self::NextHopInstanceHasNoIpv6Interface => std::option::Option::Some(14),
                    Self::NextHopInstanceNotFound => std::option::Option::Some(15),
                    Self::NextHopInstanceNotOnNetwork => std::option::Option::Some(16),
                    Self::NextHopNotRunning => std::option::Option::Some(17),
                    Self::NotCriticalError => std::option::Option::Some(18),
                    Self::NoResultsOnPage => std::option::Option::Some(19),
                    Self::PartialSuccess => std::option::Option::Some(20),
                    Self::QuotaInfoUnavailable => std::option::Option::Some(21),
                    Self::RequiredTosAgreement => std::option::Option::Some(22),
                    Self::ResourceInUseByOtherResourceWarning => std::option::Option::Some(23),
                    Self::ResourceNotDeleted => std::option::Option::Some(24),
                    Self::SchemaValidationIgnored => std::option::Option::Some(25),
                    Self::SingleInstancePropertyTemplate => std::option::Option::Some(26),
                    Self::UndeclaredProperties => std::option::Option::Some(27),
                    Self::Unreachable => std::option::Option::Some(28),
                    Self::UnknownValue(u) => u.0.value(),
                }
            }

            /// Gets the enum value as a string.
            ///
            /// Returns `None` if the enum contains an unknown value deserialized from
            /// the integer representation of enums.
            pub fn name(&self) -> std::option::Option<&str> {
                match self {
                    Self::CleanupFailed => std::option::Option::Some("CLEANUP_FAILED"),
                    Self::DeprecatedResourceUsed => {
                        std::option::Option::Some("DEPRECATED_RESOURCE_USED")
                    }
                    Self::DeprecatedTypeUsed => std::option::Option::Some("DEPRECATED_TYPE_USED"),
                    Self::DiskSizeLargerThanImageSize => {
                        std::option::Option::Some("DISK_SIZE_LARGER_THAN_IMAGE_SIZE")
                    }
                    Self::ExperimentalTypeUsed => {
                        std::option::Option::Some("EXPERIMENTAL_TYPE_USED")
                    }
                    Self::ExternalApiWarning => std::option::Option::Some("EXTERNAL_API_WARNING"),
                    Self::FieldValueOverriden => std::option::Option::Some("FIELD_VALUE_OVERRIDEN"),
                    Self::InjectedKernelsDeprecated => {
                        std::option::Option::Some("INJECTED_KERNELS_DEPRECATED")
                    }
                    Self::InvalidHealthCheckForDynamicWieghtedLb => {
                        std::option::Option::Some("INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB")
                    }
                    Self::LargeDeploymentWarning => {
                        std::option::Option::Some("LARGE_DEPLOYMENT_WARNING")
                    }
                    Self::ListOverheadQuotaExceed => {
                        std::option::Option::Some("LIST_OVERHEAD_QUOTA_EXCEED")
                    }
                    Self::MissingTypeDependency => {
                        std::option::Option::Some("MISSING_TYPE_DEPENDENCY")
                    }
                    Self::NextHopAddressNotAssigned => {
                        std::option::Option::Some("NEXT_HOP_ADDRESS_NOT_ASSIGNED")
                    }
                    Self::NextHopCannotIpForward => {
                        std::option::Option::Some("NEXT_HOP_CANNOT_IP_FORWARD")
                    }
                    Self::NextHopInstanceHasNoIpv6Interface => {
                        std::option::Option::Some("NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE")
                    }
                    Self::NextHopInstanceNotFound => {
                        std::option::Option::Some("NEXT_HOP_INSTANCE_NOT_FOUND")
                    }
                    Self::NextHopInstanceNotOnNetwork => {
                        std::option::Option::Some("NEXT_HOP_INSTANCE_NOT_ON_NETWORK")
                    }
                    Self::NextHopNotRunning => std::option::Option::Some("NEXT_HOP_NOT_RUNNING"),
                    Self::NotCriticalError => std::option::Option::Some("NOT_CRITICAL_ERROR"),
                    Self::NoResultsOnPage => std::option::Option::Some("NO_RESULTS_ON_PAGE"),
                    Self::PartialSuccess => std::option::Option::Some("PARTIAL_SUCCESS"),
                    Self::QuotaInfoUnavailable => {
                        std::option::Option::Some("QUOTA_INFO_UNAVAILABLE")
                    }
                    Self::RequiredTosAgreement => {
                        std::option::Option::Some("REQUIRED_TOS_AGREEMENT")
                    }
                    Self::ResourceInUseByOtherResourceWarning => {
                        std::option::Option::Some("RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING")
                    }
                    Self::ResourceNotDeleted => std::option::Option::Some("RESOURCE_NOT_DELETED"),
                    Self::SchemaValidationIgnored => {
                        std::option::Option::Some("SCHEMA_VALIDATION_IGNORED")
                    }
                    Self::SingleInstancePropertyTemplate => {
                        std::option::Option::Some("SINGLE_INSTANCE_PROPERTY_TEMPLATE")
                    }
                    Self::UndeclaredProperties => {
                        std::option::Option::Some("UNDECLARED_PROPERTIES")
                    }
                    Self::Unreachable => std::option::Option::Some("UNREACHABLE"),
                    Self::UnknownValue(u) => u.0.name(),
                }
            }
        }

        impl std::default::Default for Code {
            fn default() -> Self {
                use std::convert::From;
                Self::from(0)
            }
        }

        impl std::fmt::Display for Code {
            fn fmt(
                &self,
                f: &mut std::fmt::Formatter<'_>,
            ) -> std::result::Result<(), std::fmt::Error> {
                wkt::internal::display_enum(f, self.name(), self.value())
            }
        }

        impl std::convert::From<i32> for Code {
            fn from(value: i32) -> Self {
                match value {
                    0 => Self::CleanupFailed,
                    1 => Self::DeprecatedResourceUsed,
                    2 => Self::DeprecatedTypeUsed,
                    3 => Self::DiskSizeLargerThanImageSize,
                    4 => Self::ExperimentalTypeUsed,
                    5 => Self::ExternalApiWarning,
                    6 => Self::FieldValueOverriden,
                    7 => Self::InjectedKernelsDeprecated,
                    8 => Self::InvalidHealthCheckForDynamicWieghtedLb,
                    9 => Self::LargeDeploymentWarning,
                    10 => Self::ListOverheadQuotaExceed,
                    11 => Self::MissingTypeDependency,
                    12 => Self::NextHopAddressNotAssigned,
                    13 => Self::NextHopCannotIpForward,
                    14 => Self::NextHopInstanceHasNoIpv6Interface,
                    15 => Self::NextHopInstanceNotFound,
                    16 => Self::NextHopInstanceNotOnNetwork,
                    17 => Self::NextHopNotRunning,
                    18 => Self::NotCriticalError,
                    19 => Self::NoResultsOnPage,
                    20 => Self::PartialSuccess,
                    21 => Self::QuotaInfoUnavailable,
                    22 => Self::RequiredTosAgreement,
                    23 => Self::ResourceInUseByOtherResourceWarning,
                    24 => Self::ResourceNotDeleted,
                    25 => Self::SchemaValidationIgnored,
                    26 => Self::SingleInstancePropertyTemplate,
                    27 => Self::UndeclaredProperties,
                    28 => Self::Unreachable,
                    _ => Self::UnknownValue(code::UnknownValue(
                        wkt::internal::UnknownEnumValue::Integer(value),
                    )),
                }
            }
        }

        impl std::convert::From<&str> for Code {
            fn from(value: &str) -> Self {
                use std::string::ToString;
                match value {
                    "CLEANUP_FAILED" => Self::CleanupFailed,
                    "DEPRECATED_RESOURCE_USED" => Self::DeprecatedResourceUsed,
                    "DEPRECATED_TYPE_USED" => Self::DeprecatedTypeUsed,
                    "DISK_SIZE_LARGER_THAN_IMAGE_SIZE" => Self::DiskSizeLargerThanImageSize,
                    "EXPERIMENTAL_TYPE_USED" => Self::ExperimentalTypeUsed,
                    "EXTERNAL_API_WARNING" => Self::ExternalApiWarning,
                    "FIELD_VALUE_OVERRIDEN" => Self::FieldValueOverriden,
                    "INJECTED_KERNELS_DEPRECATED" => Self::InjectedKernelsDeprecated,
                    "INVALID_HEALTH_CHECK_FOR_DYNAMIC_WIEGHTED_LB" => {
                        Self::InvalidHealthCheckForDynamicWieghtedLb
                    }
                    "LARGE_DEPLOYMENT_WARNING" => Self::LargeDeploymentWarning,
                    "LIST_OVERHEAD_QUOTA_EXCEED" => Self::ListOverheadQuotaExceed,
                    "MISSING_TYPE_DEPENDENCY" => Self::MissingTypeDependency,
                    "NEXT_HOP_ADDRESS_NOT_ASSIGNED" => Self::NextHopAddressNotAssigned,
                    "NEXT_HOP_CANNOT_IP_FORWARD" => Self::NextHopCannotIpForward,
                    "NEXT_HOP_INSTANCE_HAS_NO_IPV6_INTERFACE" => {
                        Self::NextHopInstanceHasNoIpv6Interface
                    }
                    "NEXT_HOP_INSTANCE_NOT_FOUND" => Self::NextHopInstanceNotFound,
                    "NEXT_HOP_INSTANCE_NOT_ON_NETWORK" => Self::NextHopInstanceNotOnNetwork,
                    "NEXT_HOP_NOT_RUNNING" => Self::NextHopNotRunning,
                    "NOT_CRITICAL_ERROR" => Self::NotCriticalError,
                    "NO_RESULTS_ON_PAGE" => Self::NoResultsOnPage,
                    "PARTIAL_SUCCESS" => Self::PartialSuccess,
                    "QUOTA_INFO_UNAVAILABLE" => Self::QuotaInfoUnavailable,
                    "REQUIRED_TOS_AGREEMENT" => Self::RequiredTosAgreement,
                    "RESOURCE_IN_USE_BY_OTHER_RESOURCE_WARNING" => {
                        Self::ResourceInUseByOtherResourceWarning
                    }
                    "RESOURCE_NOT_DELETED" => Self::ResourceNotDeleted,
                    "SCHEMA_VALIDATION_IGNORED" => Self::SchemaValidationIgnored,
                    "SINGLE_INSTANCE_PROPERTY_TEMPLATE" => Self::SingleInstancePropertyTemplate,
                    "UNDECLARED_PROPERTIES" => Self::UndeclaredProperties,
                    "UNREACHABLE" => Self::Unreachable,
                    _ => Self::UnknownValue(code::UnknownValue(
                        wkt::internal::UnknownEnumValue::String(value.to_string()),
                    )),
                }
            }
        }

        impl serde::ser::Serialize for Code {
            fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                match self {
                    Self::CleanupFailed => serializer.serialize_i32(0),
                    Self::DeprecatedResourceUsed => serializer.serialize_i32(1),
                    Self::DeprecatedTypeUsed => serializer.serialize_i32(2),
                    Self::DiskSizeLargerThanImageSize => serializer.serialize_i32(3),
                    Self::ExperimentalTypeUsed => serializer.serialize_i32(4),
                    Self::ExternalApiWarning => serializer.serialize_i32(5),
                    Self::FieldValueOverriden => serializer.serialize_i32(6),
                    Self::InjectedKernelsDeprecated => serializer.serialize_i32(7),
                    Self::InvalidHealthCheckForDynamicWieghtedLb => serializer.serialize_i32(8),
                    Self::LargeDeploymentWarning => serializer.serialize_i32(9),
                    Self::ListOverheadQuotaExceed => serializer.serialize_i32(10),
                    Self::MissingTypeDependency => serializer.serialize_i32(11),
                    Self::NextHopAddressNotAssigned => serializer.serialize_i32(12),
                    Self::NextHopCannotIpForward => serializer.serialize_i32(13),
                    Self::NextHopInstanceHasNoIpv6Interface => serializer.serialize_i32(14),
                    Self::NextHopInstanceNotFound => serializer.serialize_i32(15),
                    Self::NextHopInstanceNotOnNetwork => serializer.serialize_i32(16),
                    Self::NextHopNotRunning => serializer.serialize_i32(17),
                    Self::NotCriticalError => serializer.serialize_i32(18),
                    Self::NoResultsOnPage => serializer.serialize_i32(19),
                    Self::PartialSuccess => serializer.serialize_i32(20),
                    Self::QuotaInfoUnavailable => serializer.serialize_i32(21),
                    Self::RequiredTosAgreement => serializer.serialize_i32(22),
                    Self::ResourceInUseByOtherResourceWarning => serializer.serialize_i32(23),
                    Self::ResourceNotDeleted => serializer.serialize_i32(24),
                    Self::SchemaValidationIgnored => serializer.serialize_i32(25),
                    Self::SingleInstancePropertyTemplate => serializer.serialize_i32(26),
                    Self::UndeclaredProperties => serializer.serialize_i32(27),
                    Self::Unreachable => serializer.serialize_i32(28),
                    Self::UnknownValue(u) => u.0.serialize(serializer),
                }
            }
        }

        impl<'de> serde::de::Deserialize<'de> for Code {
            fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
            where
                D: serde::Deserializer<'de>,
            {
                deserializer.deserialize_any(wkt::internal::EnumVisitor::<Code>::new(
                    ".google.cloud.compute.v1.ZoneList.warning.code",
                ))
            }
        }
    }
}

/// Synthetic messages for the [machineTypes][google.cloud.compute.v1.machineTypes] service
///
/// [google.cloud.compute.v1.machineTypes]: crate::model::MachineTypes
pub mod machine_types {
    #[allow(unused_imports)]
    use super::*;

    /// Synthetic request message for the [aggregatedList()][google.cloud.compute.v1.machineTypes.aggregatedList] method.
    ///
    /// [google.cloud.compute.v1.machineTypes.aggregatedList]: crate::client::MachineTypes::aggregated_list
    #[derive(Clone, Default, PartialEq)]
    #[non_exhaustive]
    pub struct AggregatedListRequest {
        /// A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
        pub filter: std::option::Option<std::string::String>,

        /// Indicates whether every visible scope for each scope type (zone, region, global) should be included in the response. For new resource types added after this field, the flag has no effect as new resource types will always include every visible scope for each scope type in response. For resource types which predate this field, if this flag is omitted or false, only scopes of the scope types where the resource type is expected to be found will be included.
        pub include_all_scopes: std::option::Option<bool>,

        /// The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
        pub max_results: std::option::Option<u32>,

        /// Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
        pub order_by: std::option::Option<std::string::String>,

        /// Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
        pub page_token: std::option::Option<std::string::String>,

        /// Project ID for this request.
        pub project: std::string::String,

        /// Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
        pub return_partial_success: std::option::Option<bool>,

        /// The Shared VPC service project id or service project number for which aggregated list request is invoked for subnetworks list-usable api.
        pub service_project_number: std::option::Option<i64>,

        pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl AggregatedListRequest {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [filter][crate::model::machine_types::AggregatedListRequest::filter].
        pub fn set_filter<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.filter = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [filter][crate::model::machine_types::AggregatedListRequest::filter].
        pub fn set_or_clear_filter<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.filter = v.map(|x| x.into());
            self
        }

        /// Sets the value of [include_all_scopes][crate::model::machine_types::AggregatedListRequest::include_all_scopes].
        pub fn set_include_all_scopes<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<bool>,
        {
            self.include_all_scopes = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [include_all_scopes][crate::model::machine_types::AggregatedListRequest::include_all_scopes].
        pub fn set_or_clear_include_all_scopes<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<bool>,
        {
            self.include_all_scopes = v.map(|x| x.into());
            self
        }

        /// Sets the value of [max_results][crate::model::machine_types::AggregatedListRequest::max_results].
        pub fn set_max_results<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<u32>,
        {
            self.max_results = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [max_results][crate::model::machine_types::AggregatedListRequest::max_results].
        pub fn set_or_clear_max_results<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<u32>,
        {
            self.max_results = v.map(|x| x.into());
            self
        }

        /// Sets the value of [order_by][crate::model::machine_types::AggregatedListRequest::order_by].
        pub fn set_order_by<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.order_by = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [order_by][crate::model::machine_types::AggregatedListRequest::order_by].
        pub fn set_or_clear_order_by<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.order_by = v.map(|x| x.into());
            self
        }

        /// Sets the value of [page_token][crate::model::machine_types::AggregatedListRequest::page_token].
        pub fn set_page_token<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.page_token = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [page_token][crate::model::machine_types::AggregatedListRequest::page_token].
        pub fn set_or_clear_page_token<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.page_token = v.map(|x| x.into());
            self
        }

        /// Sets the value of [project][crate::model::machine_types::AggregatedListRequest::project].
        pub fn set_project<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.project = v.into();
            self
        }

        /// Sets the value of [return_partial_success][crate::model::machine_types::AggregatedListRequest::return_partial_success].
        pub fn set_return_partial_success<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<bool>,
        {
            self.return_partial_success = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [return_partial_success][crate::model::machine_types::AggregatedListRequest::return_partial_success].
        pub fn set_or_clear_return_partial_success<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<bool>,
        {
            self.return_partial_success = v.map(|x| x.into());
            self
        }

        /// Sets the value of [service_project_number][crate::model::machine_types::AggregatedListRequest::service_project_number].
        pub fn set_service_project_number<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<i64>,
        {
            self.service_project_number = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [service_project_number][crate::model::machine_types::AggregatedListRequest::service_project_number].
        pub fn set_or_clear_service_project_number<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<i64>,
        {
            self.service_project_number = v.map(|x| x.into());
            self
        }
    }

    /// Synthetic request message for the [get()][google.cloud.compute.v1.machineTypes.get] method.
    ///
    /// [google.cloud.compute.v1.machineTypes.get]: crate::client::MachineTypes::get
    #[derive(Clone, Default, PartialEq)]
    #[non_exhaustive]
    pub struct GetRequest {
        /// Name of the machine type to return.
        pub machine_type: std::string::String,

        /// Project ID for this request.
        pub project: std::string::String,

        /// The name of the zone for this request.
        pub zone: std::string::String,

        pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl GetRequest {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [machine_type][crate::model::machine_types::GetRequest::machine_type].
        pub fn set_machine_type<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.machine_type = v.into();
            self
        }

        /// Sets the value of [project][crate::model::machine_types::GetRequest::project].
        pub fn set_project<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.project = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::machine_types::GetRequest::zone].
        pub fn set_zone<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.zone = v.into();
            self
        }
    }

    /// Synthetic request message for the [list()][google.cloud.compute.v1.machineTypes.list] method.
    ///
    /// [google.cloud.compute.v1.machineTypes.list]: crate::client::MachineTypes::list
    #[derive(Clone, Default, PartialEq)]
    #[non_exhaustive]
    pub struct ListRequest {
        /// A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
        pub filter: std::option::Option<std::string::String>,

        /// The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
        pub max_results: std::option::Option<u32>,

        /// Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
        pub order_by: std::option::Option<std::string::String>,

        /// Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
        pub page_token: std::option::Option<std::string::String>,

        /// Project ID for this request.
        pub project: std::string::String,

        /// Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
        pub return_partial_success: std::option::Option<bool>,

        /// The name of the zone for this request.
        pub zone: std::string::String,

        pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ListRequest {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [filter][crate::model::machine_types::ListRequest::filter].
        pub fn set_filter<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.filter = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [filter][crate::model::machine_types::ListRequest::filter].
        pub fn set_or_clear_filter<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.filter = v.map(|x| x.into());
            self
        }

        /// Sets the value of [max_results][crate::model::machine_types::ListRequest::max_results].
        pub fn set_max_results<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<u32>,
        {
            self.max_results = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [max_results][crate::model::machine_types::ListRequest::max_results].
        pub fn set_or_clear_max_results<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<u32>,
        {
            self.max_results = v.map(|x| x.into());
            self
        }

        /// Sets the value of [order_by][crate::model::machine_types::ListRequest::order_by].
        pub fn set_order_by<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.order_by = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [order_by][crate::model::machine_types::ListRequest::order_by].
        pub fn set_or_clear_order_by<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.order_by = v.map(|x| x.into());
            self
        }

        /// Sets the value of [page_token][crate::model::machine_types::ListRequest::page_token].
        pub fn set_page_token<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.page_token = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [page_token][crate::model::machine_types::ListRequest::page_token].
        pub fn set_or_clear_page_token<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.page_token = v.map(|x| x.into());
            self
        }

        /// Sets the value of [project][crate::model::machine_types::ListRequest::project].
        pub fn set_project<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.project = v.into();
            self
        }

        /// Sets the value of [return_partial_success][crate::model::machine_types::ListRequest::return_partial_success].
        pub fn set_return_partial_success<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<bool>,
        {
            self.return_partial_success = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [return_partial_success][crate::model::machine_types::ListRequest::return_partial_success].
        pub fn set_or_clear_return_partial_success<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<bool>,
        {
            self.return_partial_success = v.map(|x| x.into());
            self
        }

        /// Sets the value of [zone][crate::model::machine_types::ListRequest::zone].
        pub fn set_zone<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.zone = v.into();
            self
        }
    }
}

/// Synthetic messages for the [zones][google.cloud.compute.v1.zones] service
///
/// [google.cloud.compute.v1.zones]: crate::model::Zones
pub mod zones {
    #[allow(unused_imports)]
    use super::*;

    /// Synthetic request message for the [get()][google.cloud.compute.v1.zones.get] method.
    ///
    /// [google.cloud.compute.v1.zones.get]: crate::client::Zones::get
    #[derive(Clone, Default, PartialEq)]
    #[non_exhaustive]
    pub struct GetRequest {
        /// Project ID for this request.
        pub project: std::string::String,

        /// Name of the zone resource to return.
        pub zone: std::string::String,

        pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl GetRequest {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [project][crate::model::zones::GetRequest::project].
        pub fn set_project<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.project = v.into();
            self
        }

        /// Sets the value of [zone][crate::model::zones::GetRequest::zone].
        pub fn set_zone<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.zone = v.into();
            self
        }
    }

    /// Synthetic request message for the [list()][google.cloud.compute.v1.zones.list] method.
    ///
    /// [google.cloud.compute.v1.zones.list]: crate::client::Zones::list
    #[derive(Clone, Default, PartialEq)]
    #[non_exhaustive]
    pub struct ListRequest {
        /// A filter expression that filters resources listed in the response. Most Compute resources support two types of filter expressions: expressions that support regular expressions and expressions that follow API improvement proposal AIP-160. These two types of filter expressions cannot be mixed in one request. If you want to use AIP-160, your expression must specify the field name, an operator, and the value that you want to use for filtering. The value must be a string, a number, or a boolean. The operator must be either `=`, `!=`, `>`, `<`, `<=`, `>=` or `:`. For example, if you are filtering Compute Engine instances, you can exclude instances named `example-instance` by specifying `name != example-instance`. The `:*` comparison can be used to test whether a key has been defined. For example, to find all objects with `owner` label use: ``` labels.owner:* ``` You can also filter nested fields. For example, you could specify `scheduling.automaticRestart = false` to include instances only if they are not scheduled for automatic restarts. You can use filtering on nested fields to filter based on resource labels. To filter on multiple expressions, provide each separate expression within parentheses. For example: ``` (scheduling.automaticRestart = true) (cpuPlatform = "Intel Skylake") ``` By default, each expression is an `AND` expression. However, you can include `AND` and `OR` expressions explicitly. For example: ``` (cpuPlatform = "Intel Skylake") OR (cpuPlatform = "Intel Broadwell") AND (scheduling.automaticRestart = true) ``` If you want to use a regular expression, use the `eq` (equal) or `ne` (not equal) operator against a single un-parenthesized expression with or without quotes or against multiple parenthesized expressions. Examples: `fieldname eq unquoted literal` `fieldname eq 'single quoted literal'` `fieldname eq "double quoted literal"` `(fieldname1 eq literal) (fieldname2 ne "literal")` The literal value is interpreted as a regular expression using Google RE2 library syntax. The literal value must match the entire field. For example, to filter for instances that do not end with name "instance", you would use `name ne .*instance`. You cannot combine constraints on multiple fields using regular expressions.
        pub filter: std::option::Option<std::string::String>,

        /// The maximum number of results per page that should be returned. If the number of available results is larger than `maxResults`, Compute Engine returns a `nextPageToken` that can be used to get the next page of results in subsequent list requests. Acceptable values are `0` to `500`, inclusive. (Default: `500`)
        pub max_results: std::option::Option<u32>,

        /// Sorts list results by a certain order. By default, results are returned in alphanumerical order based on the resource name. You can also sort results in descending order based on the creation timestamp using `orderBy="creationTimestamp desc"`. This sorts results based on the `creationTimestamp` field in reverse chronological order (newest result first). Use this to sort resources like operations so that the newest operation is returned first. Currently, only sorting by `name` or `creationTimestamp desc` is supported.
        pub order_by: std::option::Option<std::string::String>,

        /// Specifies a page token to use. Set `pageToken` to the `nextPageToken` returned by a previous list request to get the next page of results.
        pub page_token: std::option::Option<std::string::String>,

        /// Project ID for this request.
        pub project: std::string::String,

        /// Opt-in for partial success behavior which provides partial results in case of failure. The default value is false. For example, when partial success behavior is enabled, aggregatedList for a single zone scope either returns all resources in the zone or no resources, with an error code.
        pub return_partial_success: std::option::Option<bool>,

        pub(crate) _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ListRequest {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [filter][crate::model::zones::ListRequest::filter].
        pub fn set_filter<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.filter = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [filter][crate::model::zones::ListRequest::filter].
        pub fn set_or_clear_filter<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.filter = v.map(|x| x.into());
            self
        }

        /// Sets the value of [max_results][crate::model::zones::ListRequest::max_results].
        pub fn set_max_results<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<u32>,
        {
            self.max_results = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [max_results][crate::model::zones::ListRequest::max_results].
        pub fn set_or_clear_max_results<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<u32>,
        {
            self.max_results = v.map(|x| x.into());
            self
        }

        /// Sets the value of [order_by][crate::model::zones::ListRequest::order_by].
        pub fn set_order_by<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.order_by = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [order_by][crate::model::zones::ListRequest::order_by].
        pub fn set_or_clear_order_by<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.order_by = v.map(|x| x.into());
            self
        }

        /// Sets the value of [page_token][crate::model::zones::ListRequest::page_token].
        pub fn set_page_token<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.page_token = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [page_token][crate::model::zones::ListRequest::page_token].
        pub fn set_or_clear_page_token<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<std::string::String>,
        {
            self.page_token = v.map(|x| x.into());
            self
        }

        /// Sets the value of [project][crate::model::zones::ListRequest::project].
        pub fn set_project<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.project = v.into();
            self
        }

        /// Sets the value of [return_partial_success][crate::model::zones::ListRequest::return_partial_success].
        pub fn set_return_partial_success<T>(mut self, v: T) -> Self
        where
            T: std::convert::Into<bool>,
        {
            self.return_partial_success = std::option::Option::Some(v.into());
            self
        }

        /// Sets or clears the value of [return_partial_success][crate::model::zones::ListRequest::return_partial_success].
        pub fn set_or_clear_return_partial_success<T>(mut self, v: std::option::Option<T>) -> Self
        where
            T: std::convert::Into<bool>,
        {
            self.return_partial_success = v.map(|x| x.into());
            self
        }
    }
}
