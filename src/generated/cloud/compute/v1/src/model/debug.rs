// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#[allow(unused_imports)]
use super::*;

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::AWSV4Signature {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AWSV4Signature");
        debug_struct.field("access_key", &self.access_key);
        debug_struct.field("access_key_id", &self.access_key_id);
        debug_struct.field("access_key_version", &self.access_key_version);
        debug_struct.field("origin_region", &self.origin_region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "future-reservations",
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "node-groups",
    feature = "node-templates",
    feature = "region-commitments",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "reservations",
))]
impl std::fmt::Debug for super::AcceleratorConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AcceleratorConfig");
        debug_struct.field("accelerator_count", &self.accelerator_count);
        debug_struct.field("accelerator_type", &self.accelerator_type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "accelerator-types")]
impl std::fmt::Debug for super::AcceleratorType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AcceleratorType");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("deprecated", &self.deprecated);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field(
            "maximum_cards_per_instance",
            &self.maximum_cards_per_instance,
        );
        debug_struct.field("name", &self.name);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "accelerator-types")]
impl std::fmt::Debug for super::AcceleratorTypeAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AcceleratorTypeAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "accelerator-types")]
impl std::fmt::Debug for super::accelerator_type_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "accelerator-types")]
impl std::fmt::Debug for super::accelerator_type_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "accelerator-types")]
impl std::fmt::Debug for super::AcceleratorTypeList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AcceleratorTypeList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "accelerator-types")]
impl std::fmt::Debug for super::accelerator_type_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "accelerator-types")]
impl std::fmt::Debug for super::accelerator_type_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "accelerator-types")]
impl std::fmt::Debug for super::AcceleratorTypesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AcceleratorTypesScopedList");
        debug_struct.field("accelerator_types", &self.accelerator_types);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "accelerator-types")]
impl std::fmt::Debug for super::accelerator_types_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "accelerator-types")]
impl std::fmt::Debug for super::accelerator_types_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::AccessConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AccessConfig");
        debug_struct.field("external_ipv_6", &self.external_ipv_6);
        debug_struct.field(
            "external_ipv_6_prefix_length",
            &self.external_ipv_6_prefix_length,
        );
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("nat_ip", &self.nat_ip);
        debug_struct.field("network_tier", &self.network_tier);
        debug_struct.field("public_ptr_domain_name", &self.public_ptr_domain_name);
        debug_struct.field("security_policy", &self.security_policy);
        debug_struct.field("set_public_ptr", &self.set_public_ptr);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "addresses", feature = "global-addresses",))]
impl std::fmt::Debug for super::Address {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Address");
        debug_struct.field("address", &self.address);
        debug_struct.field("address_type", &self.address_type);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("ip_version", &self.ip_version);
        debug_struct.field("ipv_6_endpoint_type", &self.ipv_6_endpoint_type);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("name", &self.name);
        debug_struct.field("network", &self.network);
        debug_struct.field("network_tier", &self.network_tier);
        debug_struct.field("prefix_length", &self.prefix_length);
        debug_struct.field("purpose", &self.purpose);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("status", &self.status);
        debug_struct.field("subnetwork", &self.subnetwork);
        debug_struct.field("users", &self.users);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "addresses")]
impl std::fmt::Debug for super::AddressAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddressAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "addresses")]
impl std::fmt::Debug for super::address_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "addresses")]
impl std::fmt::Debug for super::address_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "addresses", feature = "global-addresses",))]
impl std::fmt::Debug for super::AddressList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddressList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "addresses", feature = "global-addresses",))]
impl std::fmt::Debug for super::address_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "addresses", feature = "global-addresses",))]
impl std::fmt::Debug for super::address_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "addresses")]
impl std::fmt::Debug for super::AddressesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddressesScopedList");
        debug_struct.field("addresses", &self.addresses);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "addresses")]
impl std::fmt::Debug for super::addresses_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "addresses")]
impl std::fmt::Debug for super::addresses_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::AdvancedMachineFeatures {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AdvancedMachineFeatures");
        debug_struct.field(
            "enable_nested_virtualization",
            &self.enable_nested_virtualization,
        );
        debug_struct.field("enable_uefi_networking", &self.enable_uefi_networking);
        debug_struct.field(
            "performance_monitoring_unit",
            &self.performance_monitoring_unit,
        );
        debug_struct.field("threads_per_core", &self.threads_per_core);
        debug_struct.field("turbo_mode", &self.turbo_mode);
        debug_struct.field("visible_core_count", &self.visible_core_count);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::AliasIpRange {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AliasIpRange");
        debug_struct.field("ip_cidr_range", &self.ip_cidr_range);
        debug_struct.field("subnetwork_range_name", &self.subnetwork_range_name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "future-reservations",
    feature = "region-commitments",
    feature = "reservations",
))]
impl std::fmt::Debug for super::AllocationAggregateReservation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AllocationAggregateReservation");
        debug_struct.field("in_use_resources", &self.in_use_resources);
        debug_struct.field("reserved_resources", &self.reserved_resources);
        debug_struct.field("vm_family", &self.vm_family);
        debug_struct.field("workload_type", &self.workload_type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "future-reservations",
    feature = "region-commitments",
    feature = "reservations",
))]
impl std::fmt::Debug for super::AllocationAggregateReservationReservedResourceInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AllocationAggregateReservationReservedResourceInfo");
        debug_struct.field("accelerator", &self.accelerator);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "future-reservations",
    feature = "region-commitments",
    feature = "reservations",
))]
impl std::fmt::Debug for super::AllocationAggregateReservationReservedResourceInfoAccelerator {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("AllocationAggregateReservationReservedResourceInfoAccelerator");
        debug_struct.field("accelerator_count", &self.accelerator_count);
        debug_struct.field("accelerator_type", &self.accelerator_type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-commitments", feature = "reservations",))]
impl std::fmt::Debug for super::AllocationReservationSharingPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AllocationReservationSharingPolicy");
        debug_struct.field("service_share_type", &self.service_share_type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-commitments", feature = "reservations",))]
impl std::fmt::Debug for super::AllocationResourceStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AllocationResourceStatus");
        debug_struct.field("health_info", &self.health_info);
        debug_struct.field("reservation_block_count", &self.reservation_block_count);
        debug_struct.field("reservation_maintenance", &self.reservation_maintenance);
        debug_struct.field("specific_sku_allocation", &self.specific_sku_allocation);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-commitments", feature = "reservations",))]
impl std::fmt::Debug for super::AllocationResourceStatusHealthInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AllocationResourceStatusHealthInfo");
        debug_struct.field("degraded_block_count", &self.degraded_block_count);
        debug_struct.field("health_status", &self.health_status);
        debug_struct.field("healthy_block_count", &self.healthy_block_count);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-commitments", feature = "reservations",))]
impl std::fmt::Debug for super::AllocationResourceStatusSpecificSKUAllocation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AllocationResourceStatusSpecificSKUAllocation");
        debug_struct.field(
            "source_instance_template_id",
            &self.source_instance_template_id,
        );
        debug_struct.field("utilizations", &self.utilizations);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "future-reservations",
    feature = "region-commitments",
    feature = "reservations",
))]
impl std::fmt::Debug
    for super::AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk
{
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f
            .debug_struct("AllocationSpecificSKUAllocationAllocatedInstancePropertiesReservedDisk");
        debug_struct.field("disk_size_gb", &self.disk_size_gb);
        debug_struct.field("interface", &self.interface);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "future-reservations",
    feature = "region-commitments",
    feature = "reservations",
))]
impl std::fmt::Debug for super::AllocationSpecificSKUAllocationReservedInstanceProperties {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("AllocationSpecificSKUAllocationReservedInstanceProperties");
        debug_struct.field("guest_accelerators", &self.guest_accelerators);
        debug_struct.field("local_ssds", &self.local_ssds);
        debug_struct.field("location_hint", &self.location_hint);
        debug_struct.field("machine_type", &self.machine_type);
        debug_struct.field("min_cpu_platform", &self.min_cpu_platform);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-commitments", feature = "reservations",))]
impl std::fmt::Debug for super::AllocationSpecificSKUReservation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AllocationSpecificSKUReservation");
        debug_struct.field("assured_count", &self.assured_count);
        debug_struct.field("count", &self.count);
        debug_struct.field("in_use_count", &self.in_use_count);
        debug_struct.field("instance_properties", &self.instance_properties);
        debug_struct.field("source_instance_template", &self.source_instance_template);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::AttachedDisk {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AttachedDisk");
        debug_struct.field("architecture", &self.architecture);
        debug_struct.field("auto_delete", &self.auto_delete);
        debug_struct.field("boot", &self.boot);
        debug_struct.field("device_name", &self.device_name);
        debug_struct.field("disk_encryption_key", &self.disk_encryption_key);
        debug_struct.field("disk_size_gb", &self.disk_size_gb);
        debug_struct.field("force_attach", &self.force_attach);
        debug_struct.field("guest_os_features", &self.guest_os_features);
        debug_struct.field("index", &self.index);
        debug_struct.field("initialize_params", &self.initialize_params);
        debug_struct.field("interface", &self.interface);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("licenses", &self.licenses);
        debug_struct.field("mode", &self.mode);
        debug_struct.field("saved_state", &self.saved_state);
        debug_struct.field(
            "shielded_instance_initial_state",
            &self.shielded_instance_initial_state,
        );
        debug_struct.field("source", &self.source);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::AttachedDiskInitializeParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AttachedDiskInitializeParams");
        debug_struct.field("architecture", &self.architecture);
        debug_struct.field("description", &self.description);
        debug_struct.field("disk_name", &self.disk_name);
        debug_struct.field("disk_size_gb", &self.disk_size_gb);
        debug_struct.field("disk_type", &self.disk_type);
        debug_struct.field(
            "enable_confidential_compute",
            &self.enable_confidential_compute,
        );
        debug_struct.field("labels", &self.labels);
        debug_struct.field("licenses", &self.licenses);
        debug_struct.field("on_update_action", &self.on_update_action);
        debug_struct.field("provisioned_iops", &self.provisioned_iops);
        debug_struct.field("provisioned_throughput", &self.provisioned_throughput);
        debug_struct.field("replica_zones", &self.replica_zones);
        debug_struct.field("resource_manager_tags", &self.resource_manager_tags);
        debug_struct.field("resource_policies", &self.resource_policies);
        debug_struct.field("source_image", &self.source_image);
        debug_struct.field(
            "source_image_encryption_key",
            &self.source_image_encryption_key,
        );
        debug_struct.field("source_snapshot", &self.source_snapshot);
        debug_struct.field(
            "source_snapshot_encryption_key",
            &self.source_snapshot_encryption_key,
        );
        debug_struct.field("storage_pool", &self.storage_pool);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "disks",
    feature = "firewall-policies",
    feature = "images",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-groups",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-firewall-policies",
    feature = "node-groups",
    feature = "node-templates",
    feature = "region-backend-services",
    feature = "region-disks",
    feature = "region-instant-snapshots",
    feature = "region-network-firewall-policies",
    feature = "reservations",
    feature = "resource-policies",
    feature = "service-attachments",
    feature = "snapshots",
    feature = "storage-pools",
    feature = "subnetworks",
))]
impl std::fmt::Debug for super::AuditConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AuditConfig");
        debug_struct.field("audit_log_configs", &self.audit_log_configs);
        debug_struct.field("service", &self.service);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "disks",
    feature = "firewall-policies",
    feature = "images",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-groups",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-firewall-policies",
    feature = "node-groups",
    feature = "node-templates",
    feature = "region-backend-services",
    feature = "region-disks",
    feature = "region-instant-snapshots",
    feature = "region-network-firewall-policies",
    feature = "reservations",
    feature = "resource-policies",
    feature = "service-attachments",
    feature = "snapshots",
    feature = "storage-pools",
    feature = "subnetworks",
))]
impl std::fmt::Debug for super::AuditLogConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AuditLogConfig");
        debug_struct.field("exempted_members", &self.exempted_members);
        debug_struct.field("log_type", &self.log_type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "autoscalers", feature = "region-autoscalers",))]
impl std::fmt::Debug for super::Autoscaler {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Autoscaler");
        debug_struct.field("autoscaling_policy", &self.autoscaling_policy);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("recommended_size", &self.recommended_size);
        debug_struct.field("region", &self.region);
        debug_struct.field("scaling_schedule_status", &self.scaling_schedule_status);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("status", &self.status);
        debug_struct.field("status_details", &self.status_details);
        debug_struct.field("target", &self.target);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "autoscalers")]
impl std::fmt::Debug for super::AutoscalerAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutoscalerAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "autoscalers")]
impl std::fmt::Debug for super::autoscaler_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "autoscalers")]
impl std::fmt::Debug for super::autoscaler_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "autoscalers")]
impl std::fmt::Debug for super::AutoscalerList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutoscalerList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "autoscalers")]
impl std::fmt::Debug for super::autoscaler_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "autoscalers")]
impl std::fmt::Debug for super::autoscaler_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "autoscalers", feature = "region-autoscalers",))]
impl std::fmt::Debug for super::AutoscalerStatusDetails {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutoscalerStatusDetails");
        debug_struct.field("message", &self.message);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "autoscalers")]
impl std::fmt::Debug for super::AutoscalersScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutoscalersScopedList");
        debug_struct.field("autoscalers", &self.autoscalers);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "autoscalers")]
impl std::fmt::Debug for super::autoscalers_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "autoscalers")]
impl std::fmt::Debug for super::autoscalers_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "autoscalers", feature = "region-autoscalers",))]
impl std::fmt::Debug for super::AutoscalingPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutoscalingPolicy");
        debug_struct.field("cool_down_period_sec", &self.cool_down_period_sec);
        debug_struct.field("cpu_utilization", &self.cpu_utilization);
        debug_struct.field(
            "custom_metric_utilizations",
            &self.custom_metric_utilizations,
        );
        debug_struct.field(
            "load_balancing_utilization",
            &self.load_balancing_utilization,
        );
        debug_struct.field("max_num_replicas", &self.max_num_replicas);
        debug_struct.field("min_num_replicas", &self.min_num_replicas);
        debug_struct.field("mode", &self.mode);
        debug_struct.field("scale_in_control", &self.scale_in_control);
        debug_struct.field("scaling_schedules", &self.scaling_schedules);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "autoscalers", feature = "region-autoscalers",))]
impl std::fmt::Debug for super::AutoscalingPolicyCpuUtilization {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutoscalingPolicyCpuUtilization");
        debug_struct.field("predictive_method", &self.predictive_method);
        debug_struct.field("utilization_target", &self.utilization_target);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "autoscalers", feature = "region-autoscalers",))]
impl std::fmt::Debug for super::AutoscalingPolicyCustomMetricUtilization {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutoscalingPolicyCustomMetricUtilization");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("metric", &self.metric);
        debug_struct.field(
            "single_instance_assignment",
            &self.single_instance_assignment,
        );
        debug_struct.field("utilization_target", &self.utilization_target);
        debug_struct.field("utilization_target_type", &self.utilization_target_type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "autoscalers", feature = "region-autoscalers",))]
impl std::fmt::Debug for super::AutoscalingPolicyLoadBalancingUtilization {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutoscalingPolicyLoadBalancingUtilization");
        debug_struct.field("utilization_target", &self.utilization_target);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "autoscalers", feature = "region-autoscalers",))]
impl std::fmt::Debug for super::AutoscalingPolicyScaleInControl {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutoscalingPolicyScaleInControl");
        debug_struct.field("max_scaled_in_replicas", &self.max_scaled_in_replicas);
        debug_struct.field("time_window_sec", &self.time_window_sec);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "autoscalers", feature = "region-autoscalers",))]
impl std::fmt::Debug for super::AutoscalingPolicyScalingSchedule {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AutoscalingPolicyScalingSchedule");
        debug_struct.field("description", &self.description);
        debug_struct.field("disabled", &self.disabled);
        debug_struct.field("duration_sec", &self.duration_sec);
        debug_struct.field("min_required_replicas", &self.min_required_replicas);
        debug_struct.field("schedule", &self.schedule);
        debug_struct.field("time_zone", &self.time_zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::Backend {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Backend");
        debug_struct.field("balancing_mode", &self.balancing_mode);
        debug_struct.field("capacity_scaler", &self.capacity_scaler);
        debug_struct.field("custom_metrics", &self.custom_metrics);
        debug_struct.field("description", &self.description);
        debug_struct.field("failover", &self.failover);
        debug_struct.field("group", &self.group);
        debug_struct.field("max_connections", &self.max_connections);
        debug_struct.field(
            "max_connections_per_endpoint",
            &self.max_connections_per_endpoint,
        );
        debug_struct.field(
            "max_connections_per_instance",
            &self.max_connections_per_instance,
        );
        debug_struct.field("max_rate", &self.max_rate);
        debug_struct.field("max_rate_per_endpoint", &self.max_rate_per_endpoint);
        debug_struct.field("max_rate_per_instance", &self.max_rate_per_instance);
        debug_struct.field("max_utilization", &self.max_utilization);
        debug_struct.field("preference", &self.preference);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::BackendBucket {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendBucket");
        debug_struct.field("bucket_name", &self.bucket_name);
        debug_struct.field("cdn_policy", &self.cdn_policy);
        debug_struct.field("compression_mode", &self.compression_mode);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("custom_response_headers", &self.custom_response_headers);
        debug_struct.field("description", &self.description);
        debug_struct.field("edge_security_policy", &self.edge_security_policy);
        debug_struct.field("enable_cdn", &self.enable_cdn);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("load_balancing_scheme", &self.load_balancing_scheme);
        debug_struct.field("name", &self.name);
        debug_struct.field("params", &self.params);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("used_by", &self.used_by);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::BackendBucketCdnPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendBucketCdnPolicy");
        debug_struct.field(
            "bypass_cache_on_request_headers",
            &self.bypass_cache_on_request_headers,
        );
        debug_struct.field("cache_key_policy", &self.cache_key_policy);
        debug_struct.field("cache_mode", &self.cache_mode);
        debug_struct.field("client_ttl", &self.client_ttl);
        debug_struct.field("default_ttl", &self.default_ttl);
        debug_struct.field("max_ttl", &self.max_ttl);
        debug_struct.field("negative_caching", &self.negative_caching);
        debug_struct.field("negative_caching_policy", &self.negative_caching_policy);
        debug_struct.field("request_coalescing", &self.request_coalescing);
        debug_struct.field("serve_while_stale", &self.serve_while_stale);
        debug_struct.field(
            "signed_url_cache_max_age_sec",
            &self.signed_url_cache_max_age_sec,
        );
        debug_struct.field("signed_url_key_names", &self.signed_url_key_names);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::BackendBucketCdnPolicyBypassCacheOnRequestHeader {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendBucketCdnPolicyBypassCacheOnRequestHeader");
        debug_struct.field("header_name", &self.header_name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::BackendBucketCdnPolicyCacheKeyPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendBucketCdnPolicyCacheKeyPolicy");
        debug_struct.field("include_http_headers", &self.include_http_headers);
        debug_struct.field("query_string_whitelist", &self.query_string_whitelist);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::BackendBucketCdnPolicyNegativeCachingPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendBucketCdnPolicyNegativeCachingPolicy");
        debug_struct.field("code", &self.code);
        debug_struct.field("ttl", &self.ttl);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::BackendBucketList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendBucketList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::backend_bucket_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::backend_bucket_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::BackendBucketParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendBucketParams");
        debug_struct.field("resource_manager_tags", &self.resource_manager_tags);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::BackendBucketUsedBy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendBucketUsedBy");
        debug_struct.field("reference", &self.reference);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendCustomMetric {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendCustomMetric");
        debug_struct.field("dry_run", &self.dry_run);
        debug_struct.field("max_utilization", &self.max_utilization);
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendService {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendService");
        debug_struct.field("affinity_cookie_ttl_sec", &self.affinity_cookie_ttl_sec);
        debug_struct.field("backends", &self.backends);
        debug_struct.field("cdn_policy", &self.cdn_policy);
        debug_struct.field("circuit_breakers", &self.circuit_breakers);
        debug_struct.field("compression_mode", &self.compression_mode);
        debug_struct.field("connection_draining", &self.connection_draining);
        debug_struct.field(
            "connection_tracking_policy",
            &self.connection_tracking_policy,
        );
        debug_struct.field("consistent_hash", &self.consistent_hash);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("custom_metrics", &self.custom_metrics);
        debug_struct.field("custom_request_headers", &self.custom_request_headers);
        debug_struct.field("custom_response_headers", &self.custom_response_headers);
        debug_struct.field("description", &self.description);
        debug_struct.field("edge_security_policy", &self.edge_security_policy);
        debug_struct.field("enable_cdn", &self.enable_cdn);
        debug_struct.field(
            "external_managed_migration_state",
            &self.external_managed_migration_state,
        );
        debug_struct.field(
            "external_managed_migration_testing_percentage",
            &self.external_managed_migration_testing_percentage,
        );
        debug_struct.field("failover_policy", &self.failover_policy);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("ha_policy", &self.ha_policy);
        debug_struct.field("health_checks", &self.health_checks);
        debug_struct.field("iap", &self.iap);
        debug_struct.field("id", &self.id);
        debug_struct.field(
            "ip_address_selection_policy",
            &self.ip_address_selection_policy,
        );
        debug_struct.field("kind", &self.kind);
        debug_struct.field("load_balancing_scheme", &self.load_balancing_scheme);
        debug_struct.field("locality_lb_policies", &self.locality_lb_policies);
        debug_struct.field("locality_lb_policy", &self.locality_lb_policy);
        debug_struct.field("log_config", &self.log_config);
        debug_struct.field("max_stream_duration", &self.max_stream_duration);
        debug_struct.field("metadatas", &self.metadatas);
        debug_struct.field("name", &self.name);
        debug_struct.field("network", &self.network);
        debug_struct.field("outlier_detection", &self.outlier_detection);
        debug_struct.field("params", &self.params);
        debug_struct.field("port", &self.port);
        debug_struct.field("port_name", &self.port_name);
        debug_struct.field("protocol", &self.protocol);
        debug_struct.field("region", &self.region);
        debug_struct.field("security_policy", &self.security_policy);
        debug_struct.field("security_settings", &self.security_settings);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("service_bindings", &self.service_bindings);
        debug_struct.field("service_lb_policy", &self.service_lb_policy);
        debug_struct.field("session_affinity", &self.session_affinity);
        debug_struct.field(
            "strong_session_affinity_cookie",
            &self.strong_session_affinity_cookie,
        );
        debug_struct.field("subsetting", &self.subsetting);
        debug_struct.field("timeout_sec", &self.timeout_sec);
        debug_struct.field("tls_settings", &self.tls_settings);
        debug_struct.field("used_by", &self.used_by);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::BackendServiceAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_service_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_service_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceCdnPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceCdnPolicy");
        debug_struct.field(
            "bypass_cache_on_request_headers",
            &self.bypass_cache_on_request_headers,
        );
        debug_struct.field("cache_key_policy", &self.cache_key_policy);
        debug_struct.field("cache_mode", &self.cache_mode);
        debug_struct.field("client_ttl", &self.client_ttl);
        debug_struct.field("default_ttl", &self.default_ttl);
        debug_struct.field("max_ttl", &self.max_ttl);
        debug_struct.field("negative_caching", &self.negative_caching);
        debug_struct.field("negative_caching_policy", &self.negative_caching_policy);
        debug_struct.field("request_coalescing", &self.request_coalescing);
        debug_struct.field("serve_while_stale", &self.serve_while_stale);
        debug_struct.field(
            "signed_url_cache_max_age_sec",
            &self.signed_url_cache_max_age_sec,
        );
        debug_struct.field("signed_url_key_names", &self.signed_url_key_names);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceCdnPolicyBypassCacheOnRequestHeader {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceCdnPolicyBypassCacheOnRequestHeader");
        debug_struct.field("header_name", &self.header_name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceCdnPolicyNegativeCachingPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceCdnPolicyNegativeCachingPolicy");
        debug_struct.field("code", &self.code);
        debug_struct.field("ttl", &self.ttl);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceConnectionTrackingPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceConnectionTrackingPolicy");
        debug_struct.field(
            "connection_persistence_on_unhealthy_backends",
            &self.connection_persistence_on_unhealthy_backends,
        );
        debug_struct.field("enable_strong_affinity", &self.enable_strong_affinity);
        debug_struct.field("idle_timeout_sec", &self.idle_timeout_sec);
        debug_struct.field("tracking_mode", &self.tracking_mode);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceCustomMetric {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceCustomMetric");
        debug_struct.field("dry_run", &self.dry_run);
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceFailoverPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceFailoverPolicy");
        debug_struct.field(
            "disable_connection_drain_on_failover",
            &self.disable_connection_drain_on_failover,
        );
        debug_struct.field("drop_traffic_if_unhealthy", &self.drop_traffic_if_unhealthy);
        debug_struct.field("failover_ratio", &self.failover_ratio);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceGroupHealth {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceGroupHealth");
        debug_struct.field("annotations", &self.annotations);
        debug_struct.field("health_status", &self.health_status);
        debug_struct.field("kind", &self.kind);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceHAPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceHAPolicy");
        debug_struct.field("fast_ip_move", &self.fast_ip_move);
        debug_struct.field("leader", &self.leader);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceHAPolicyLeader {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceHAPolicyLeader");
        debug_struct.field("backend_group", &self.backend_group);
        debug_struct.field("network_endpoint", &self.network_endpoint);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceHAPolicyLeaderNetworkEndpoint {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceHAPolicyLeaderNetworkEndpoint");
        debug_struct.field("instance", &self.instance);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceHttpCookie {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceHttpCookie");
        debug_struct.field("name", &self.name);
        debug_struct.field("path", &self.path);
        debug_struct.field("ttl", &self.ttl);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceIAP {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceIAP");
        debug_struct.field("enabled", &self.enabled);
        debug_struct.field("oauth_2_client_id", &self.oauth_2_client_id);
        debug_struct.field("oauth_2_client_secret", &self.oauth_2_client_secret);
        debug_struct.field(
            "oauth_2_client_secret_sha_256",
            &self.oauth_2_client_secret_sha_256,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::backend_service_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::backend_service_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceListUsable {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceListUsable");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::backend_service_list_usable::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::backend_service_list_usable::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceLocalityLoadBalancingPolicyConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceLocalityLoadBalancingPolicyConfig");
        debug_struct.field("custom_policy", &self.custom_policy);
        debug_struct.field("policy", &self.policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("BackendServiceLocalityLoadBalancingPolicyConfigCustomPolicy");
        debug_struct.field("data", &self.data);
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceLocalityLoadBalancingPolicyConfigPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("BackendServiceLocalityLoadBalancingPolicyConfigPolicy");
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceLogConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceLogConfig");
        debug_struct.field("enable", &self.enable);
        debug_struct.field("optional_fields", &self.optional_fields);
        debug_struct.field("optional_mode", &self.optional_mode);
        debug_struct.field("sample_rate", &self.sample_rate);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceParams");
        debug_struct.field("resource_manager_tags", &self.resource_manager_tags);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
))]
impl std::fmt::Debug for super::BackendServiceReference {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceReference");
        debug_struct.field("backend_service", &self.backend_service);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceTlsSettings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceTlsSettings");
        debug_struct.field("authentication_config", &self.authentication_config);
        debug_struct.field("sni", &self.sni);
        debug_struct.field("subject_alt_names", &self.subject_alt_names);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceTlsSettingsSubjectAltName {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceTlsSettingsSubjectAltName");
        debug_struct.field("dns_name", &self.dns_name);
        debug_struct.field(
            "uniform_resource_identifier",
            &self.uniform_resource_identifier,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::BackendServiceUsedBy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServiceUsedBy");
        debug_struct.field("reference", &self.reference);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::BackendServicesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BackendServicesScopedList");
        debug_struct.field("backend_services", &self.backend_services);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::BfdPacket {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BfdPacket");
        debug_struct.field("authentication_present", &self.authentication_present);
        debug_struct.field("control_plane_independent", &self.control_plane_independent);
        debug_struct.field("demand", &self.demand);
        debug_struct.field("diagnostic", &self.diagnostic);
        debug_struct.field("r#final", &self.r#final);
        debug_struct.field("length", &self.length);
        debug_struct.field("min_echo_rx_interval_ms", &self.min_echo_rx_interval_ms);
        debug_struct.field("min_rx_interval_ms", &self.min_rx_interval_ms);
        debug_struct.field("min_tx_interval_ms", &self.min_tx_interval_ms);
        debug_struct.field("multiplier", &self.multiplier);
        debug_struct.field("multipoint", &self.multipoint);
        debug_struct.field("my_discriminator", &self.my_discriminator);
        debug_struct.field("poll", &self.poll);
        debug_struct.field("state", &self.state);
        debug_struct.field("version", &self.version);
        debug_struct.field("your_discriminator", &self.your_discriminator);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::BfdStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BfdStatus");
        debug_struct.field(
            "bfd_session_initialization_mode",
            &self.bfd_session_initialization_mode,
        );
        debug_struct.field(
            "config_update_timestamp_micros",
            &self.config_update_timestamp_micros,
        );
        debug_struct.field("control_packet_counts", &self.control_packet_counts);
        debug_struct.field("control_packet_intervals", &self.control_packet_intervals);
        debug_struct.field("local_diagnostic", &self.local_diagnostic);
        debug_struct.field("local_state", &self.local_state);
        debug_struct.field(
            "negotiated_local_control_tx_interval_ms",
            &self.negotiated_local_control_tx_interval_ms,
        );
        debug_struct.field("rx_packet", &self.rx_packet);
        debug_struct.field("tx_packet", &self.tx_packet);
        debug_struct.field("uptime_ms", &self.uptime_ms);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::BfdStatusPacketCounts {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BfdStatusPacketCounts");
        debug_struct.field("num_rx", &self.num_rx);
        debug_struct.field("num_rx_rejected", &self.num_rx_rejected);
        debug_struct.field("num_rx_successful", &self.num_rx_successful);
        debug_struct.field("num_tx", &self.num_tx);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::BgpRoute {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BgpRoute");
        debug_struct.field("as_paths", &self.as_paths);
        debug_struct.field("communities", &self.communities);
        debug_struct.field("destination", &self.destination);
        debug_struct.field("med", &self.med);
        debug_struct.field("origin", &self.origin);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::BgpRouteAsPath {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BgpRouteAsPath");
        debug_struct.field("asns", &self.asns);
        debug_struct.field("asns32", &self.asns32);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::BgpRouteNetworkLayerReachabilityInformation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BgpRouteNetworkLayerReachabilityInformation");
        debug_struct.field("path_id", &self.path_id);
        debug_struct.field("prefix", &self.prefix);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "disks",
    feature = "firewall-policies",
    feature = "images",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-groups",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-firewall-policies",
    feature = "node-groups",
    feature = "node-templates",
    feature = "region-backend-services",
    feature = "region-disks",
    feature = "region-instant-snapshots",
    feature = "region-network-firewall-policies",
    feature = "reservations",
    feature = "resource-policies",
    feature = "service-attachments",
    feature = "snapshots",
    feature = "storage-pools",
    feature = "subnetworks",
))]
impl std::fmt::Debug for super::Binding {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Binding");
        debug_struct.field("condition", &self.condition);
        debug_struct.field("members", &self.members);
        debug_struct.field("role", &self.role);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "disks", feature = "region-disks",))]
impl std::fmt::Debug for super::BulkInsertDiskResource {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BulkInsertDiskResource");
        debug_struct.field(
            "source_consistency_group_policy",
            &self.source_consistency_group_policy,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instances", feature = "region-instances",))]
impl std::fmt::Debug for super::BulkInsertInstanceResource {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BulkInsertInstanceResource");
        debug_struct.field("count", &self.count);
        debug_struct.field("instance_properties", &self.instance_properties);
        debug_struct.field("location_policy", &self.location_policy);
        debug_struct.field("min_count", &self.min_count);
        debug_struct.field("name_pattern", &self.name_pattern);
        debug_struct.field("per_instance_properties", &self.per_instance_properties);
        debug_struct.field("source_instance_template", &self.source_instance_template);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instances", feature = "region-instances",))]
impl std::fmt::Debug for super::BulkInsertInstanceResourcePerInstanceProperties {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BulkInsertInstanceResourcePerInstanceProperties");
        debug_struct.field("hostname", &self.hostname);
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "autoscalers",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "cross-site-networks",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "firewalls",
    feature = "forwarding-rules",
    feature = "future-reservations",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "global-network-endpoint-groups",
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "global-public-delegated-prefixes",
    feature = "health-checks",
    feature = "http-health-checks",
    feature = "https-health-checks",
    feature = "images",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "instance-settings",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-attachments",
    feature = "interconnect-groups",
    feature = "interconnects",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-edge-security-services",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "node-groups",
    feature = "node-templates",
    feature = "organization-security-policies",
    feature = "packet-mirrorings",
    feature = "preview-features",
    feature = "projects",
    feature = "public-advertised-prefixes",
    feature = "public-delegated-prefixes",
    feature = "region-autoscalers",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-disks",
    feature = "region-health-check-services",
    feature = "region-health-checks",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-instant-snapshots",
    feature = "region-network-endpoint-groups",
    feature = "region-network-firewall-policies",
    feature = "region-notification-endpoints",
    feature = "region-operations",
    feature = "region-security-policies",
    feature = "region-ssl-certificates",
    feature = "region-ssl-policies",
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "region-target-tcp-proxies",
    feature = "region-url-maps",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
    feature = "resource-policies",
    feature = "routers",
    feature = "routes",
    feature = "security-policies",
    feature = "service-attachments",
    feature = "snapshot-settings",
    feature = "snapshots",
    feature = "ssl-certificates",
    feature = "ssl-policies",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-grpc-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
    feature = "target-instances",
    feature = "target-pools",
    feature = "target-ssl-proxies",
    feature = "target-tcp-proxies",
    feature = "target-vpn-gateways",
    feature = "url-maps",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
    feature = "wire-groups",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::BulkInsertOperationStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BulkInsertOperationStatus");
        debug_struct.field("created_vm_count", &self.created_vm_count);
        debug_struct.field("deleted_vm_count", &self.deleted_vm_count);
        debug_struct.field("failed_to_create_vm_count", &self.failed_to_create_vm_count);
        debug_struct.field("status", &self.status);
        debug_struct.field("target_vm_count", &self.target_vm_count);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::BulkSetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BulkSetLabelsRequest");
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::BulkZoneSetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BulkZoneSetLabelsRequest");
        debug_struct.field("requests", &self.requests);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "url-maps")]
impl std::fmt::Debug for super::CacheInvalidationRule {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CacheInvalidationRule");
        debug_struct.field("cache_tags", &self.cache_tags);
        debug_struct.field("host", &self.host);
        debug_struct.field("path", &self.path);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::CacheKeyPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CacheKeyPolicy");
        debug_struct.field("include_host", &self.include_host);
        debug_struct.field("include_http_headers", &self.include_http_headers);
        debug_struct.field("include_named_cookies", &self.include_named_cookies);
        debug_struct.field("include_protocol", &self.include_protocol);
        debug_struct.field("include_query_string", &self.include_query_string);
        debug_struct.field("query_string_blacklist", &self.query_string_blacklist);
        debug_struct.field("query_string_whitelist", &self.query_string_whitelist);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::CircuitBreakers {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CircuitBreakers");
        debug_struct.field("max_connections", &self.max_connections);
        debug_struct.field("max_pending_requests", &self.max_pending_requests);
        debug_struct.field("max_requests", &self.max_requests);
        debug_struct.field(
            "max_requests_per_connection",
            &self.max_requests_per_connection,
        );
        debug_struct.field("max_retries", &self.max_retries);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::Commitment {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Commitment");
        debug_struct.field("auto_renew", &self.auto_renew);
        debug_struct.field("category", &self.category);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("custom_end_timestamp", &self.custom_end_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("end_timestamp", &self.end_timestamp);
        debug_struct.field("existing_reservations", &self.existing_reservations);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("license_resource", &self.license_resource);
        debug_struct.field("merge_source_commitments", &self.merge_source_commitments);
        debug_struct.field("name", &self.name);
        debug_struct.field("plan", &self.plan);
        debug_struct.field("region", &self.region);
        debug_struct.field("reservations", &self.reservations);
        debug_struct.field("resource_status", &self.resource_status);
        debug_struct.field("resources", &self.resources);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("split_source_commitment", &self.split_source_commitment);
        debug_struct.field("start_timestamp", &self.start_timestamp);
        debug_struct.field("status", &self.status);
        debug_struct.field("status_message", &self.status_message);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::CommitmentAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CommitmentAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::commitment_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::commitment_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::CommitmentList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CommitmentList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::commitment_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::commitment_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::CommitmentResourceStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CommitmentResourceStatus");
        debug_struct.field(
            "custom_term_eligibility_end_timestamp",
            &self.custom_term_eligibility_end_timestamp,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::CommitmentsScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CommitmentsScopedList");
        debug_struct.field("commitments", &self.commitments);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::commitments_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::commitments_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::ConfidentialInstanceConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ConfidentialInstanceConfig");
        debug_struct.field(
            "confidential_instance_type",
            &self.confidential_instance_type,
        );
        debug_struct.field(
            "enable_confidential_compute",
            &self.enable_confidential_compute,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::ConnectionDraining {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ConnectionDraining");
        debug_struct.field("draining_timeout_sec", &self.draining_timeout_sec);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::ConsistentHashLoadBalancerSettings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ConsistentHashLoadBalancerSettings");
        debug_struct.field("http_cookie", &self.http_cookie);
        debug_struct.field("http_header_name", &self.http_header_name);
        debug_struct.field("minimum_ring_size", &self.minimum_ring_size);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::ConsistentHashLoadBalancerSettingsHttpCookie {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ConsistentHashLoadBalancerSettingsHttpCookie");
        debug_struct.field("name", &self.name);
        debug_struct.field("path", &self.path);
        debug_struct.field("ttl", &self.ttl);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::CorsPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CorsPolicy");
        debug_struct.field("allow_credentials", &self.allow_credentials);
        debug_struct.field("allow_headers", &self.allow_headers);
        debug_struct.field("allow_methods", &self.allow_methods);
        debug_struct.field("allow_origin_regexes", &self.allow_origin_regexes);
        debug_struct.field("allow_origins", &self.allow_origins);
        debug_struct.field("disabled", &self.disabled);
        debug_struct.field("expose_headers", &self.expose_headers);
        debug_struct.field("max_age", &self.max_age);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "cross-site-networks")]
impl std::fmt::Debug for super::CrossSiteNetwork {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CrossSiteNetwork");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("self_link", &self.self_link);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "cross-site-networks")]
impl std::fmt::Debug for super::CrossSiteNetworkList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CrossSiteNetworkList");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "cross-site-networks")]
impl std::fmt::Debug for super::cross_site_network_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "cross-site-networks")]
impl std::fmt::Debug for super::cross_site_network_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::CustomErrorResponsePolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CustomErrorResponsePolicy");
        debug_struct.field("error_response_rules", &self.error_response_rules);
        debug_struct.field("error_service", &self.error_service);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::CustomErrorResponsePolicyCustomErrorResponseRule {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CustomErrorResponsePolicyCustomErrorResponseRule");
        debug_struct.field("match_response_codes", &self.match_response_codes);
        debug_struct.field("override_response_code", &self.override_response_code);
        debug_struct.field("path", &self.path);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "disks",
    feature = "image-family-views",
    feature = "images",
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-disks",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "snapshots",
))]
impl std::fmt::Debug for super::CustomerEncryptionKey {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CustomerEncryptionKey");
        debug_struct.field("kms_key_name", &self.kms_key_name);
        debug_struct.field("kms_key_service_account", &self.kms_key_service_account);
        debug_struct.field("raw_key", &self.raw_key);
        debug_struct.field("rsa_encrypted_key", &self.rsa_encrypted_key);
        debug_struct.field("sha256", &self.sha256);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::CustomerEncryptionKeyProtectedDisk {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CustomerEncryptionKeyProtectedDisk");
        debug_struct.field("disk_encryption_key", &self.disk_encryption_key);
        debug_struct.field("source", &self.source);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "preview-features")]
impl std::fmt::Debug for super::Date {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Date");
        debug_struct.field("day", &self.day);
        debug_struct.field("month", &self.month);
        debug_struct.field("year", &self.year);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "accelerator-types",
    feature = "disk-types",
    feature = "image-family-views",
    feature = "images",
    feature = "machine-types",
    feature = "node-types",
    feature = "region-disk-types",
    feature = "region-zones",
    feature = "regions",
    feature = "storage-pool-types",
    feature = "zones",
))]
impl std::fmt::Debug for super::DeprecationStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeprecationStatus");
        debug_struct.field("deleted", &self.deleted);
        debug_struct.field("deprecated", &self.deprecated);
        debug_struct.field("obsolete", &self.obsolete);
        debug_struct.field("replacement", &self.replacement);
        debug_struct.field("state", &self.state);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "disks", feature = "region-disks",))]
impl std::fmt::Debug for super::Disk {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Disk");
        debug_struct.field("access_mode", &self.access_mode);
        debug_struct.field("architecture", &self.architecture);
        debug_struct.field("async_primary_disk", &self.async_primary_disk);
        debug_struct.field("async_secondary_disks", &self.async_secondary_disks);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("disk_encryption_key", &self.disk_encryption_key);
        debug_struct.field(
            "enable_confidential_compute",
            &self.enable_confidential_compute,
        );
        debug_struct.field("guest_os_features", &self.guest_os_features);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("last_attach_timestamp", &self.last_attach_timestamp);
        debug_struct.field("last_detach_timestamp", &self.last_detach_timestamp);
        debug_struct.field("license_codes", &self.license_codes);
        debug_struct.field("licenses", &self.licenses);
        debug_struct.field("location_hint", &self.location_hint);
        debug_struct.field("name", &self.name);
        debug_struct.field("options", &self.options);
        debug_struct.field("params", &self.params);
        debug_struct.field("physical_block_size_bytes", &self.physical_block_size_bytes);
        debug_struct.field("provisioned_iops", &self.provisioned_iops);
        debug_struct.field("provisioned_throughput", &self.provisioned_throughput);
        debug_struct.field("region", &self.region);
        debug_struct.field("replica_zones", &self.replica_zones);
        debug_struct.field("resource_policies", &self.resource_policies);
        debug_struct.field("resource_status", &self.resource_status);
        debug_struct.field("satisfies_pzi", &self.satisfies_pzi);
        debug_struct.field("satisfies_pzs", &self.satisfies_pzs);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("size_gb", &self.size_gb);
        debug_struct.field(
            "source_consistency_group_policy",
            &self.source_consistency_group_policy,
        );
        debug_struct.field(
            "source_consistency_group_policy_id",
            &self.source_consistency_group_policy_id,
        );
        debug_struct.field("source_disk", &self.source_disk);
        debug_struct.field("source_disk_id", &self.source_disk_id);
        debug_struct.field("source_image", &self.source_image);
        debug_struct.field(
            "source_image_encryption_key",
            &self.source_image_encryption_key,
        );
        debug_struct.field("source_image_id", &self.source_image_id);
        debug_struct.field("source_instant_snapshot", &self.source_instant_snapshot);
        debug_struct.field(
            "source_instant_snapshot_id",
            &self.source_instant_snapshot_id,
        );
        debug_struct.field("source_snapshot", &self.source_snapshot);
        debug_struct.field(
            "source_snapshot_encryption_key",
            &self.source_snapshot_encryption_key,
        );
        debug_struct.field("source_snapshot_id", &self.source_snapshot_id);
        debug_struct.field("source_storage_object", &self.source_storage_object);
        debug_struct.field("status", &self.status);
        debug_struct.field("storage_pool", &self.storage_pool);
        debug_struct.field("r#type", &self.r#type);
        debug_struct.field("users", &self.users);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::DiskAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DiskAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disk_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disk_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "disks", feature = "region-disks",))]
impl std::fmt::Debug for super::DiskAsyncReplication {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DiskAsyncReplication");
        debug_struct.field("consistency_group_policy", &self.consistency_group_policy);
        debug_struct.field(
            "consistency_group_policy_id",
            &self.consistency_group_policy_id,
        );
        debug_struct.field("disk", &self.disk);
        debug_struct.field("disk_id", &self.disk_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "disks", feature = "region-disks",))]
impl std::fmt::Debug for super::DiskAsyncReplicationList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DiskAsyncReplicationList");
        debug_struct.field("async_replication_disk", &self.async_replication_disk);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instance-templates", feature = "region-instance-templates",))]
impl std::fmt::Debug for super::DiskInstantiationConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DiskInstantiationConfig");
        debug_struct.field("auto_delete", &self.auto_delete);
        debug_struct.field("custom_image", &self.custom_image);
        debug_struct.field("device_name", &self.device_name);
        debug_struct.field("instantiate_from", &self.instantiate_from);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "disks", feature = "region-disks",))]
impl std::fmt::Debug for super::DiskList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DiskList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "disks", feature = "region-disks",))]
impl std::fmt::Debug for super::disk_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "disks", feature = "region-disks",))]
impl std::fmt::Debug for super::disk_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::DiskMoveRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DiskMoveRequest");
        debug_struct.field("destination_zone", &self.destination_zone);
        debug_struct.field("target_disk", &self.target_disk);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "disks", feature = "region-disks",))]
impl std::fmt::Debug for super::DiskParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DiskParams");
        debug_struct.field("resource_manager_tags", &self.resource_manager_tags);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "disks", feature = "region-disks",))]
impl std::fmt::Debug for super::DiskResourceStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DiskResourceStatus");
        debug_struct.field("async_primary_disk", &self.async_primary_disk);
        debug_struct.field("async_secondary_disks", &self.async_secondary_disks);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "disks", feature = "region-disks",))]
impl std::fmt::Debug for super::DiskResourceStatusAsyncReplicationStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DiskResourceStatusAsyncReplicationStatus");
        debug_struct.field("state", &self.state);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "disk-types", feature = "region-disk-types",))]
impl std::fmt::Debug for super::DiskType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DiskType");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("default_disk_size_gb", &self.default_disk_size_gb);
        debug_struct.field("deprecated", &self.deprecated);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("valid_disk_size", &self.valid_disk_size);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disk-types")]
impl std::fmt::Debug for super::DiskTypeAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DiskTypeAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disk-types")]
impl std::fmt::Debug for super::disk_type_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disk-types")]
impl std::fmt::Debug for super::disk_type_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disk-types")]
impl std::fmt::Debug for super::DiskTypeList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DiskTypeList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disk-types")]
impl std::fmt::Debug for super::disk_type_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disk-types")]
impl std::fmt::Debug for super::disk_type_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disk-types")]
impl std::fmt::Debug for super::DiskTypesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DiskTypesScopedList");
        debug_struct.field("disk_types", &self.disk_types);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disk-types")]
impl std::fmt::Debug for super::disk_types_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disk-types")]
impl std::fmt::Debug for super::disk_types_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::DisksAddResourcePoliciesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DisksAddResourcePoliciesRequest");
        debug_struct.field("resource_policies", &self.resource_policies);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::DisksRemoveResourcePoliciesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DisksRemoveResourcePoliciesRequest");
        debug_struct.field("resource_policies", &self.resource_policies);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::DisksResizeRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DisksResizeRequest");
        debug_struct.field("size_gb", &self.size_gb);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::DisksScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DisksScopedList");
        debug_struct.field("disks", &self.disks);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::DisksStartAsyncReplicationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DisksStartAsyncReplicationRequest");
        debug_struct.field("async_secondary_disk", &self.async_secondary_disk);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "disks", feature = "region-disks",))]
impl std::fmt::Debug for super::DisksStopGroupAsyncReplicationResource {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DisksStopGroupAsyncReplicationResource");
        debug_struct.field("resource_policy", &self.resource_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::DisplayDevice {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DisplayDevice");
        debug_struct.field("enable_display", &self.enable_display);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::DistributionPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DistributionPolicy");
        debug_struct.field("target_shape", &self.target_shape);
        debug_struct.field("zones", &self.zones);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::DistributionPolicyZoneConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DistributionPolicyZoneConfiguration");
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "backend-services",
    feature = "future-reservations",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-templates",
    feature = "instances",
    feature = "licenses",
    feature = "machine-images",
    feature = "node-groups",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-notification-endpoints",
    feature = "region-url-maps",
    feature = "reservations",
    feature = "url-maps",
))]
impl std::fmt::Debug for super::Duration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Duration");
        debug_struct.field("nanos", &self.nanos);
        debug_struct.field("seconds", &self.seconds);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "autoscalers",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "cross-site-networks",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "firewalls",
    feature = "forwarding-rules",
    feature = "future-reservations",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "global-network-endpoint-groups",
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "global-public-delegated-prefixes",
    feature = "health-checks",
    feature = "http-health-checks",
    feature = "https-health-checks",
    feature = "images",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "instance-settings",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-attachments",
    feature = "interconnect-groups",
    feature = "interconnects",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-edge-security-services",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "node-groups",
    feature = "node-templates",
    feature = "organization-security-policies",
    feature = "packet-mirrorings",
    feature = "preview-features",
    feature = "projects",
    feature = "public-advertised-prefixes",
    feature = "public-delegated-prefixes",
    feature = "region-autoscalers",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-disks",
    feature = "region-health-check-services",
    feature = "region-health-checks",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-instant-snapshots",
    feature = "region-network-endpoint-groups",
    feature = "region-network-firewall-policies",
    feature = "region-notification-endpoints",
    feature = "region-operations",
    feature = "region-security-policies",
    feature = "region-ssl-certificates",
    feature = "region-ssl-policies",
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "region-target-tcp-proxies",
    feature = "region-url-maps",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
    feature = "resource-policies",
    feature = "routers",
    feature = "routes",
    feature = "security-policies",
    feature = "service-attachments",
    feature = "snapshot-settings",
    feature = "snapshots",
    feature = "ssl-certificates",
    feature = "ssl-policies",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-grpc-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
    feature = "target-instances",
    feature = "target-pools",
    feature = "target-ssl-proxies",
    feature = "target-tcp-proxies",
    feature = "target-vpn-gateways",
    feature = "url-maps",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
    feature = "wire-groups",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::ErrorInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ErrorInfo");
        debug_struct.field("domain", &self.domain);
        debug_struct.field("metadatas", &self.metadatas);
        debug_struct.field("reason", &self.reason);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::ExchangedPeeringRoute {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ExchangedPeeringRoute");
        debug_struct.field("dest_range", &self.dest_range);
        debug_struct.field("imported", &self.imported);
        debug_struct.field("next_hop_region", &self.next_hop_region);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::ExchangedPeeringRoutesList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ExchangedPeeringRoutesList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::exchanged_peering_routes_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::exchanged_peering_routes_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "disks",
    feature = "firewall-policies",
    feature = "images",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-groups",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-firewall-policies",
    feature = "node-groups",
    feature = "node-templates",
    feature = "organization-security-policies",
    feature = "region-backend-services",
    feature = "region-disks",
    feature = "region-instant-snapshots",
    feature = "region-network-firewall-policies",
    feature = "region-security-policies",
    feature = "reservations",
    feature = "resource-policies",
    feature = "routers",
    feature = "security-policies",
    feature = "service-attachments",
    feature = "snapshots",
    feature = "storage-pools",
    feature = "subnetworks",
))]
impl std::fmt::Debug for super::Expr {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Expr");
        debug_struct.field("description", &self.description);
        debug_struct.field("expression", &self.expression);
        debug_struct.field("location", &self.location);
        debug_struct.field("title", &self.title);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "external-vpn-gateways")]
impl std::fmt::Debug for super::ExternalVpnGateway {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ExternalVpnGateway");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("interfaces", &self.interfaces);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("name", &self.name);
        debug_struct.field("redundancy_type", &self.redundancy_type);
        debug_struct.field("self_link", &self.self_link);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "external-vpn-gateways")]
impl std::fmt::Debug for super::ExternalVpnGatewayInterface {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ExternalVpnGatewayInterface");
        debug_struct.field("id", &self.id);
        debug_struct.field("ip_address", &self.ip_address);
        debug_struct.field("ipv_6_address", &self.ipv_6_address);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "external-vpn-gateways")]
impl std::fmt::Debug for super::ExternalVpnGatewayList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ExternalVpnGatewayList");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "external-vpn-gateways")]
impl std::fmt::Debug for super::external_vpn_gateway_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "external-vpn-gateways")]
impl std::fmt::Debug for super::external_vpn_gateway_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "image-family-views",
    feature = "images",
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::FileContentBuffer {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FileContentBuffer");
        debug_struct.field("content", &self.content);
        debug_struct.field("file_type", &self.file_type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "firewalls",
    feature = "instances",
    feature = "networks",
    feature = "region-network-firewall-policies",
))]
impl std::fmt::Debug for super::Firewall {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Firewall");
        debug_struct.field("allowed", &self.allowed);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("denied", &self.denied);
        debug_struct.field("description", &self.description);
        debug_struct.field("destination_ranges", &self.destination_ranges);
        debug_struct.field("direction", &self.direction);
        debug_struct.field("disabled", &self.disabled);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("log_config", &self.log_config);
        debug_struct.field("name", &self.name);
        debug_struct.field("network", &self.network);
        debug_struct.field("params", &self.params);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("source_ranges", &self.source_ranges);
        debug_struct.field("source_service_accounts", &self.source_service_accounts);
        debug_struct.field("source_tags", &self.source_tags);
        debug_struct.field("target_service_accounts", &self.target_service_accounts);
        debug_struct.field("target_tags", &self.target_tags);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "firewalls",
    feature = "instances",
    feature = "networks",
    feature = "region-network-firewall-policies",
))]
impl std::fmt::Debug for super::firewall::Allowed {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Allowed");
        debug_struct.field("ip_protocol", &self.ip_protocol);
        debug_struct.field("ports", &self.ports);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "firewalls",
    feature = "instances",
    feature = "networks",
    feature = "region-network-firewall-policies",
))]
impl std::fmt::Debug for super::firewall::Denied {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Denied");
        debug_struct.field("ip_protocol", &self.ip_protocol);
        debug_struct.field("ports", &self.ports);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewalls")]
impl std::fmt::Debug for super::FirewallList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FirewallList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewalls")]
impl std::fmt::Debug for super::firewall_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewalls")]
impl std::fmt::Debug for super::firewall_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "firewalls",
    feature = "instances",
    feature = "networks",
    feature = "region-network-firewall-policies",
))]
impl std::fmt::Debug for super::FirewallLogConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FirewallLogConfig");
        debug_struct.field("enable", &self.enable);
        debug_struct.field("metadata", &self.metadata);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "firewalls",
    feature = "instances",
    feature = "networks",
    feature = "region-network-firewall-policies",
))]
impl std::fmt::Debug for super::FirewallParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FirewallParams");
        debug_struct.field("resource_manager_tags", &self.resource_manager_tags);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::FirewallPoliciesListAssociationsResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FirewallPoliciesListAssociationsResponse");
        debug_struct.field("associations", &self.associations);
        debug_struct.field("kind", &self.kind);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::FirewallPoliciesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FirewallPoliciesScopedList");
        debug_struct.field("firewall_policies", &self.firewall_policies);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::firewall_policies_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::firewall_policies_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "firewall-policies",
    feature = "network-firewall-policies",
    feature = "region-network-firewall-policies",
))]
impl std::fmt::Debug for super::FirewallPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FirewallPolicy");
        debug_struct.field("associations", &self.associations);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("display_name", &self.display_name);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("packet_mirroring_rules", &self.packet_mirroring_rules);
        debug_struct.field("parent", &self.parent);
        debug_struct.field("policy_type", &self.policy_type);
        debug_struct.field("region", &self.region);
        debug_struct.field("rule_tuple_count", &self.rule_tuple_count);
        debug_struct.field("rules", &self.rules);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("self_link_with_id", &self.self_link_with_id);
        debug_struct.field("short_name", &self.short_name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "firewall-policies",
    feature = "network-firewall-policies",
    feature = "region-network-firewall-policies",
))]
impl std::fmt::Debug for super::FirewallPolicyAssociation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FirewallPolicyAssociation");
        debug_struct.field("attachment_target", &self.attachment_target);
        debug_struct.field("display_name", &self.display_name);
        debug_struct.field("firewall_policy_id", &self.firewall_policy_id);
        debug_struct.field("name", &self.name);
        debug_struct.field("short_name", &self.short_name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "firewall-policies",
    feature = "network-firewall-policies",
    feature = "region-network-firewall-policies",
))]
impl std::fmt::Debug for super::FirewallPolicyList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FirewallPolicyList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "firewall-policies",
    feature = "network-firewall-policies",
    feature = "region-network-firewall-policies",
))]
impl std::fmt::Debug for super::firewall_policy_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "firewall-policies",
    feature = "network-firewall-policies",
    feature = "region-network-firewall-policies",
))]
impl std::fmt::Debug for super::firewall_policy_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "firewall-policies",
    feature = "instances",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "region-network-firewall-policies",
))]
impl std::fmt::Debug for super::FirewallPolicyRule {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FirewallPolicyRule");
        debug_struct.field("action", &self.action);
        debug_struct.field("description", &self.description);
        debug_struct.field("direction", &self.direction);
        debug_struct.field("disabled", &self.disabled);
        debug_struct.field("enable_logging", &self.enable_logging);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("r#match", &self.r#match);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("rule_name", &self.rule_name);
        debug_struct.field("rule_tuple_count", &self.rule_tuple_count);
        debug_struct.field("security_profile_group", &self.security_profile_group);
        debug_struct.field("target_resources", &self.target_resources);
        debug_struct.field("target_secure_tags", &self.target_secure_tags);
        debug_struct.field("target_service_accounts", &self.target_service_accounts);
        debug_struct.field("tls_inspect", &self.tls_inspect);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "firewall-policies",
    feature = "instances",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "region-network-firewall-policies",
))]
impl std::fmt::Debug for super::FirewallPolicyRuleMatcher {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FirewallPolicyRuleMatcher");
        debug_struct.field("dest_address_groups", &self.dest_address_groups);
        debug_struct.field("dest_fqdns", &self.dest_fqdns);
        debug_struct.field("dest_ip_ranges", &self.dest_ip_ranges);
        debug_struct.field("dest_network_type", &self.dest_network_type);
        debug_struct.field("dest_region_codes", &self.dest_region_codes);
        debug_struct.field("dest_threat_intelligences", &self.dest_threat_intelligences);
        debug_struct.field("layer_4_configs", &self.layer_4_configs);
        debug_struct.field("src_address_groups", &self.src_address_groups);
        debug_struct.field("src_fqdns", &self.src_fqdns);
        debug_struct.field("src_ip_ranges", &self.src_ip_ranges);
        debug_struct.field("src_network_type", &self.src_network_type);
        debug_struct.field("src_networks", &self.src_networks);
        debug_struct.field("src_region_codes", &self.src_region_codes);
        debug_struct.field("src_secure_tags", &self.src_secure_tags);
        debug_struct.field("src_threat_intelligences", &self.src_threat_intelligences);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "firewall-policies",
    feature = "instances",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "region-network-firewall-policies",
))]
impl std::fmt::Debug for super::FirewallPolicyRuleMatcherLayer4Config {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FirewallPolicyRuleMatcherLayer4Config");
        debug_struct.field("ip_protocol", &self.ip_protocol);
        debug_struct.field("ports", &self.ports);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "firewall-policies",
    feature = "instances",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "region-network-firewall-policies",
))]
impl std::fmt::Debug for super::FirewallPolicyRuleSecureTag {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FirewallPolicyRuleSecureTag");
        debug_struct.field("name", &self.name);
        debug_struct.field("state", &self.state);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "autoscalers",
    feature = "instance-group-managers",
    feature = "region-autoscalers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::FixedOrPercent {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FixedOrPercent");
        debug_struct.field("calculated", &self.calculated);
        debug_struct.field("fixed", &self.fixed);
        debug_struct.field("percent", &self.percent);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "forwarding-rules", feature = "global-forwarding-rules",))]
impl std::fmt::Debug for super::ForwardingRule {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ForwardingRule");
        debug_struct.field("ip_address", &self.ip_address);
        debug_struct.field("ip_protocol", &self.ip_protocol);
        debug_struct.field("all_ports", &self.all_ports);
        debug_struct.field("allow_global_access", &self.allow_global_access);
        debug_struct.field("allow_psc_global_access", &self.allow_psc_global_access);
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("base_forwarding_rule", &self.base_forwarding_rule);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field(
            "external_managed_backend_bucket_migration_state",
            &self.external_managed_backend_bucket_migration_state,
        );
        debug_struct.field(
            "external_managed_backend_bucket_migration_testing_percentage",
            &self.external_managed_backend_bucket_migration_testing_percentage,
        );
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("id", &self.id);
        debug_struct.field("ip_collection", &self.ip_collection);
        debug_struct.field("ip_version", &self.ip_version);
        debug_struct.field("is_mirroring_collector", &self.is_mirroring_collector);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("load_balancing_scheme", &self.load_balancing_scheme);
        debug_struct.field("metadata_filters", &self.metadata_filters);
        debug_struct.field("name", &self.name);
        debug_struct.field("network", &self.network);
        debug_struct.field("network_tier", &self.network_tier);
        debug_struct.field("no_automate_dns_zone", &self.no_automate_dns_zone);
        debug_struct.field("port_range", &self.port_range);
        debug_struct.field("ports", &self.ports);
        debug_struct.field("psc_connection_id", &self.psc_connection_id);
        debug_struct.field("psc_connection_status", &self.psc_connection_status);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("self_link_with_id", &self.self_link_with_id);
        debug_struct.field(
            "service_directory_registrations",
            &self.service_directory_registrations,
        );
        debug_struct.field("service_label", &self.service_label);
        debug_struct.field("service_name", &self.service_name);
        debug_struct.field("source_ip_ranges", &self.source_ip_ranges);
        debug_struct.field("subnetwork", &self.subnetwork);
        debug_struct.field("target", &self.target);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "forwarding-rules")]
impl std::fmt::Debug for super::ForwardingRuleAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ForwardingRuleAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "forwarding-rules")]
impl std::fmt::Debug for super::forwarding_rule_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "forwarding-rules")]
impl std::fmt::Debug for super::forwarding_rule_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "forwarding-rules", feature = "global-forwarding-rules",))]
impl std::fmt::Debug for super::ForwardingRuleList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ForwardingRuleList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "forwarding-rules", feature = "global-forwarding-rules",))]
impl std::fmt::Debug for super::forwarding_rule_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "forwarding-rules", feature = "global-forwarding-rules",))]
impl std::fmt::Debug for super::forwarding_rule_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
))]
impl std::fmt::Debug for super::ForwardingRuleReference {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ForwardingRuleReference");
        debug_struct.field("forwarding_rule", &self.forwarding_rule);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "forwarding-rules", feature = "global-forwarding-rules",))]
impl std::fmt::Debug for super::ForwardingRuleServiceDirectoryRegistration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ForwardingRuleServiceDirectoryRegistration");
        debug_struct.field("namespace", &self.namespace);
        debug_struct.field("service", &self.service);
        debug_struct.field("service_directory_region", &self.service_directory_region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "forwarding-rules")]
impl std::fmt::Debug for super::ForwardingRulesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ForwardingRulesScopedList");
        debug_struct.field("forwarding_rules", &self.forwarding_rules);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "forwarding-rules")]
impl std::fmt::Debug for super::forwarding_rules_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "forwarding-rules")]
impl std::fmt::Debug for super::forwarding_rules_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::FutureReservation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FutureReservation");
        debug_struct.field("aggregate_reservation", &self.aggregate_reservation);
        debug_struct.field(
            "auto_created_reservations_delete_time",
            &self.auto_created_reservations_delete_time,
        );
        debug_struct.field(
            "auto_created_reservations_duration",
            &self.auto_created_reservations_duration,
        );
        debug_struct.field(
            "auto_delete_auto_created_reservations",
            &self.auto_delete_auto_created_reservations,
        );
        debug_struct.field("commitment_info", &self.commitment_info);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("deployment_type", &self.deployment_type);
        debug_struct.field("description", &self.description);
        debug_struct.field(
            "enable_emergent_maintenance",
            &self.enable_emergent_maintenance,
        );
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("name_prefix", &self.name_prefix);
        debug_struct.field("planning_status", &self.planning_status);
        debug_struct.field("reservation_name", &self.reservation_name);
        debug_struct.field("scheduling_type", &self.scheduling_type);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("self_link_with_id", &self.self_link_with_id);
        debug_struct.field("share_settings", &self.share_settings);
        debug_struct.field(
            "specific_reservation_required",
            &self.specific_reservation_required,
        );
        debug_struct.field("specific_sku_properties", &self.specific_sku_properties);
        debug_struct.field("status", &self.status);
        debug_struct.field("time_window", &self.time_window);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::FutureReservationCommitmentInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FutureReservationCommitmentInfo");
        debug_struct.field("commitment_name", &self.commitment_name);
        debug_struct.field("commitment_plan", &self.commitment_plan);
        debug_struct.field("previous_commitment_terms", &self.previous_commitment_terms);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::FutureReservationSpecificSKUProperties {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FutureReservationSpecificSKUProperties");
        debug_struct.field("instance_properties", &self.instance_properties);
        debug_struct.field("source_instance_template", &self.source_instance_template);
        debug_struct.field("total_count", &self.total_count);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::FutureReservationStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FutureReservationStatus");
        debug_struct.field("amendment_status", &self.amendment_status);
        debug_struct.field("auto_created_reservations", &self.auto_created_reservations);
        debug_struct.field(
            "existing_matching_usage_info",
            &self.existing_matching_usage_info,
        );
        debug_struct.field("fulfilled_count", &self.fulfilled_count);
        debug_struct.field("last_known_good_state", &self.last_known_good_state);
        debug_struct.field("lock_time", &self.lock_time);
        debug_struct.field("procurement_status", &self.procurement_status);
        debug_struct.field("specific_sku_properties", &self.specific_sku_properties);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::FutureReservationStatusExistingMatchingUsageInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FutureReservationStatusExistingMatchingUsageInfo");
        debug_struct.field("count", &self.count);
        debug_struct.field("timestamp", &self.timestamp);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::FutureReservationStatusLastKnownGoodState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FutureReservationStatusLastKnownGoodState");
        debug_struct.field("description", &self.description);
        debug_struct.field(
            "existing_matching_usage_info",
            &self.existing_matching_usage_info,
        );
        debug_struct.field("future_reservation_specs", &self.future_reservation_specs);
        debug_struct.field("lock_time", &self.lock_time);
        debug_struct.field("name_prefix", &self.name_prefix);
        debug_struct.field("procurement_status", &self.procurement_status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::FutureReservationStatusLastKnownGoodStateFutureReservationSpecs {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("FutureReservationStatusLastKnownGoodStateFutureReservationSpecs");
        debug_struct.field("share_settings", &self.share_settings);
        debug_struct.field("specific_sku_properties", &self.specific_sku_properties);
        debug_struct.field("time_window", &self.time_window);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::FutureReservationStatusSpecificSKUProperties {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FutureReservationStatusSpecificSKUProperties");
        debug_struct.field(
            "source_instance_template_id",
            &self.source_instance_template_id,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::FutureReservationTimeWindow {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FutureReservationTimeWindow");
        debug_struct.field("duration", &self.duration);
        debug_struct.field("end_time", &self.end_time);
        debug_struct.field("start_time", &self.start_time);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::FutureReservationsAggregatedListResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FutureReservationsAggregatedListResponse");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::future_reservations_aggregated_list_response::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::future_reservations_aggregated_list_response::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::FutureReservationsListResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FutureReservationsListResponse");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::future_reservations_list_response::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::future_reservations_list_response::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::FutureReservationsScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("FutureReservationsScopedList");
        debug_struct.field("future_reservations", &self.future_reservations);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::future_reservations_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::future_reservations_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "health-checks", feature = "region-health-checks",))]
impl std::fmt::Debug for super::GRPCHealthCheck {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GRPCHealthCheck");
        debug_struct.field("grpc_service_name", &self.grpc_service_name);
        debug_struct.field("port", &self.port);
        debug_struct.field("port_name", &self.port_name);
        debug_struct.field("port_specification", &self.port_specification);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-addresses")]
impl std::fmt::Debug for super::GlobalAddressesMoveRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GlobalAddressesMoveRequest");
        debug_struct.field("description", &self.description);
        debug_struct.field("destination_address", &self.destination_address);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-network-endpoint-groups")]
impl std::fmt::Debug for super::GlobalNetworkEndpointGroupsAttachEndpointsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GlobalNetworkEndpointGroupsAttachEndpointsRequest");
        debug_struct.field("network_endpoints", &self.network_endpoints);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-network-endpoint-groups")]
impl std::fmt::Debug for super::GlobalNetworkEndpointGroupsDetachEndpointsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GlobalNetworkEndpointGroupsDetachEndpointsRequest");
        debug_struct.field("network_endpoints", &self.network_endpoints);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::GlobalOrganizationSetPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GlobalOrganizationSetPolicyRequest");
        debug_struct.field("bindings", &self.bindings);
        debug_struct.field("etag", &self.etag);
        debug_struct.field("policy", &self.policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "external-vpn-gateways",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "images",
    feature = "interconnects",
    feature = "machine-images",
    feature = "security-policies",
    feature = "snapshots",
))]
impl std::fmt::Debug for super::GlobalSetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GlobalSetLabelsRequest");
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "images",
    feature = "instance-templates",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-groups",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-firewall-policies",
    feature = "snapshots",
))]
impl std::fmt::Debug for super::GlobalSetPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GlobalSetPolicyRequest");
        debug_struct.field("bindings", &self.bindings);
        debug_struct.field("etag", &self.etag);
        debug_struct.field("policy", &self.policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "region-commitments",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
))]
impl std::fmt::Debug for super::GroupMaintenanceInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GroupMaintenanceInfo");
        debug_struct.field(
            "instance_maintenance_ongoing_count",
            &self.instance_maintenance_ongoing_count,
        );
        debug_struct.field(
            "instance_maintenance_pending_count",
            &self.instance_maintenance_pending_count,
        );
        debug_struct.field("maintenance_ongoing_count", &self.maintenance_ongoing_count);
        debug_struct.field("maintenance_pending_count", &self.maintenance_pending_count);
        debug_struct.field("scheduling_type", &self.scheduling_type);
        debug_struct.field(
            "subblock_infra_maintenance_ongoing_count",
            &self.subblock_infra_maintenance_ongoing_count,
        );
        debug_struct.field(
            "subblock_infra_maintenance_pending_count",
            &self.subblock_infra_maintenance_pending_count,
        );
        debug_struct.field(
            "upcoming_group_maintenance",
            &self.upcoming_group_maintenance,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::GuestAttributes {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GuestAttributes");
        debug_struct.field("kind", &self.kind);
        debug_struct.field("query_path", &self.query_path);
        debug_struct.field("query_value", &self.query_value);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("variable_key", &self.variable_key);
        debug_struct.field("variable_value", &self.variable_value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::GuestAttributesEntry {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GuestAttributesEntry");
        debug_struct.field("key", &self.key);
        debug_struct.field("namespace", &self.namespace);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::GuestAttributesValue {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GuestAttributesValue");
        debug_struct.field("items", &self.items);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "disks",
    feature = "image-family-views",
    feature = "images",
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-disks",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "snapshots",
))]
impl std::fmt::Debug for super::GuestOsFeature {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GuestOsFeature");
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "health-checks", feature = "region-health-checks",))]
impl std::fmt::Debug for super::HTTP2HealthCheck {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HTTP2HealthCheck");
        debug_struct.field("host", &self.host);
        debug_struct.field("port", &self.port);
        debug_struct.field("port_name", &self.port_name);
        debug_struct.field("port_specification", &self.port_specification);
        debug_struct.field("proxy_header", &self.proxy_header);
        debug_struct.field("request_path", &self.request_path);
        debug_struct.field("response", &self.response);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "health-checks", feature = "region-health-checks",))]
impl std::fmt::Debug for super::HTTPHealthCheck {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HTTPHealthCheck");
        debug_struct.field("host", &self.host);
        debug_struct.field("port", &self.port);
        debug_struct.field("port_name", &self.port_name);
        debug_struct.field("port_specification", &self.port_specification);
        debug_struct.field("proxy_header", &self.proxy_header);
        debug_struct.field("request_path", &self.request_path);
        debug_struct.field("response", &self.response);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "health-checks", feature = "region-health-checks",))]
impl std::fmt::Debug for super::HTTPSHealthCheck {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HTTPSHealthCheck");
        debug_struct.field("host", &self.host);
        debug_struct.field("port", &self.port);
        debug_struct.field("port_name", &self.port_name);
        debug_struct.field("port_specification", &self.port_specification);
        debug_struct.field("proxy_header", &self.proxy_header);
        debug_struct.field("request_path", &self.request_path);
        debug_struct.field("response", &self.response);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "health-checks", feature = "region-health-checks",))]
impl std::fmt::Debug for super::HealthCheck {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HealthCheck");
        debug_struct.field("check_interval_sec", &self.check_interval_sec);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("grpc_health_check", &self.grpc_health_check);
        debug_struct.field("healthy_threshold", &self.healthy_threshold);
        debug_struct.field("http_2_health_check", &self.http_2_health_check);
        debug_struct.field("http_health_check", &self.http_health_check);
        debug_struct.field("https_health_check", &self.https_health_check);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("log_config", &self.log_config);
        debug_struct.field("name", &self.name);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("source_regions", &self.source_regions);
        debug_struct.field("ssl_health_check", &self.ssl_health_check);
        debug_struct.field("tcp_health_check", &self.tcp_health_check);
        debug_struct.field("timeout_sec", &self.timeout_sec);
        debug_struct.field("r#type", &self.r#type);
        debug_struct.field("unhealthy_threshold", &self.unhealthy_threshold);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "health-checks", feature = "region-health-checks",))]
impl std::fmt::Debug for super::HealthCheckList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HealthCheckList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "health-checks", feature = "region-health-checks",))]
impl std::fmt::Debug for super::health_check_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "health-checks", feature = "region-health-checks",))]
impl std::fmt::Debug for super::health_check_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "health-checks", feature = "region-health-checks",))]
impl std::fmt::Debug for super::HealthCheckLogConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HealthCheckLogConfig");
        debug_struct.field("enable", &self.enable);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
    feature = "target-pools",
))]
impl std::fmt::Debug for super::HealthCheckReference {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HealthCheckReference");
        debug_struct.field("health_check", &self.health_check);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-health-check-services")]
impl std::fmt::Debug for super::HealthCheckService {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HealthCheckService");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("health_checks", &self.health_checks);
        debug_struct.field(
            "health_status_aggregation_policy",
            &self.health_status_aggregation_policy,
        );
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("network_endpoint_groups", &self.network_endpoint_groups);
        debug_struct.field("notification_endpoints", &self.notification_endpoints);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
))]
impl std::fmt::Debug for super::HealthCheckServiceReference {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HealthCheckServiceReference");
        debug_struct.field("health_check_service", &self.health_check_service);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-health-check-services")]
impl std::fmt::Debug for super::HealthCheckServicesList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HealthCheckServicesList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-health-check-services")]
impl std::fmt::Debug for super::health_check_services_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-health-check-services")]
impl std::fmt::Debug for super::health_check_services_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "health-checks")]
impl std::fmt::Debug for super::HealthChecksAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HealthChecksAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "health-checks")]
impl std::fmt::Debug for super::health_checks_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "health-checks")]
impl std::fmt::Debug for super::health_checks_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "health-checks")]
impl std::fmt::Debug for super::HealthChecksScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HealthChecksScopedList");
        debug_struct.field("health_checks", &self.health_checks);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "health-checks")]
impl std::fmt::Debug for super::health_checks_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "health-checks")]
impl std::fmt::Debug for super::health_checks_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "backend-services",
    feature = "region-backend-services",
    feature = "target-pools",
))]
impl std::fmt::Debug for super::HealthStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HealthStatus");
        debug_struct.field("annotations", &self.annotations);
        debug_struct.field("forwarding_rule", &self.forwarding_rule);
        debug_struct.field("forwarding_rule_ip", &self.forwarding_rule_ip);
        debug_struct.field("health_state", &self.health_state);
        debug_struct.field("instance", &self.instance);
        debug_struct.field("ip_address", &self.ip_address);
        debug_struct.field("ipv_6_address", &self.ipv_6_address);
        debug_struct.field("ipv_6_health_state", &self.ipv_6_health_state);
        debug_struct.field("port", &self.port);
        debug_struct.field("weight", &self.weight);
        debug_struct.field("weight_error", &self.weight_error);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
))]
impl std::fmt::Debug for super::HealthStatusForNetworkEndpoint {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HealthStatusForNetworkEndpoint");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("forwarding_rule", &self.forwarding_rule);
        debug_struct.field("health_check", &self.health_check);
        debug_struct.field("health_check_service", &self.health_check_service);
        debug_struct.field("health_state", &self.health_state);
        debug_struct.field("ipv_6_health_state", &self.ipv_6_health_state);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "autoscalers",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "cross-site-networks",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "firewalls",
    feature = "forwarding-rules",
    feature = "future-reservations",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "global-network-endpoint-groups",
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "global-public-delegated-prefixes",
    feature = "health-checks",
    feature = "http-health-checks",
    feature = "https-health-checks",
    feature = "images",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "instance-settings",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-attachments",
    feature = "interconnect-groups",
    feature = "interconnects",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-edge-security-services",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "node-groups",
    feature = "node-templates",
    feature = "organization-security-policies",
    feature = "packet-mirrorings",
    feature = "preview-features",
    feature = "projects",
    feature = "public-advertised-prefixes",
    feature = "public-delegated-prefixes",
    feature = "region-autoscalers",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-disks",
    feature = "region-health-check-services",
    feature = "region-health-checks",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-instant-snapshots",
    feature = "region-network-endpoint-groups",
    feature = "region-network-firewall-policies",
    feature = "region-notification-endpoints",
    feature = "region-operations",
    feature = "region-security-policies",
    feature = "region-ssl-certificates",
    feature = "region-ssl-policies",
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "region-target-tcp-proxies",
    feature = "region-url-maps",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
    feature = "resource-policies",
    feature = "routers",
    feature = "routes",
    feature = "security-policies",
    feature = "service-attachments",
    feature = "snapshot-settings",
    feature = "snapshots",
    feature = "ssl-certificates",
    feature = "ssl-policies",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-grpc-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
    feature = "target-instances",
    feature = "target-pools",
    feature = "target-ssl-proxies",
    feature = "target-tcp-proxies",
    feature = "target-vpn-gateways",
    feature = "url-maps",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
    feature = "wire-groups",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::Help {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Help");
        debug_struct.field("links", &self.links);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "autoscalers",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "cross-site-networks",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "firewalls",
    feature = "forwarding-rules",
    feature = "future-reservations",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "global-network-endpoint-groups",
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "global-public-delegated-prefixes",
    feature = "health-checks",
    feature = "http-health-checks",
    feature = "https-health-checks",
    feature = "images",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "instance-settings",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-attachments",
    feature = "interconnect-groups",
    feature = "interconnects",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-edge-security-services",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "node-groups",
    feature = "node-templates",
    feature = "organization-security-policies",
    feature = "packet-mirrorings",
    feature = "preview-features",
    feature = "projects",
    feature = "public-advertised-prefixes",
    feature = "public-delegated-prefixes",
    feature = "region-autoscalers",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-disks",
    feature = "region-health-check-services",
    feature = "region-health-checks",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-instant-snapshots",
    feature = "region-network-endpoint-groups",
    feature = "region-network-firewall-policies",
    feature = "region-notification-endpoints",
    feature = "region-operations",
    feature = "region-security-policies",
    feature = "region-ssl-certificates",
    feature = "region-ssl-policies",
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "region-target-tcp-proxies",
    feature = "region-url-maps",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
    feature = "resource-policies",
    feature = "routers",
    feature = "routes",
    feature = "security-policies",
    feature = "service-attachments",
    feature = "snapshot-settings",
    feature = "snapshots",
    feature = "ssl-certificates",
    feature = "ssl-policies",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-grpc-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
    feature = "target-instances",
    feature = "target-pools",
    feature = "target-ssl-proxies",
    feature = "target-tcp-proxies",
    feature = "target-vpn-gateways",
    feature = "url-maps",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
    feature = "wire-groups",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::HelpLink {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HelpLink");
        debug_struct.field("description", &self.description);
        debug_struct.field("url", &self.url);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::HostRule {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HostRule");
        debug_struct.field("description", &self.description);
        debug_struct.field("hosts", &self.hosts);
        debug_struct.field("path_matcher", &self.path_matcher);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::HttpFaultAbort {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HttpFaultAbort");
        debug_struct.field("http_status", &self.http_status);
        debug_struct.field("percentage", &self.percentage);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::HttpFaultDelay {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HttpFaultDelay");
        debug_struct.field("fixed_delay", &self.fixed_delay);
        debug_struct.field("percentage", &self.percentage);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::HttpFaultInjection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HttpFaultInjection");
        debug_struct.field("abort", &self.abort);
        debug_struct.field("delay", &self.delay);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::HttpHeaderAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HttpHeaderAction");
        debug_struct.field("request_headers_to_add", &self.request_headers_to_add);
        debug_struct.field("request_headers_to_remove", &self.request_headers_to_remove);
        debug_struct.field("response_headers_to_add", &self.response_headers_to_add);
        debug_struct.field(
            "response_headers_to_remove",
            &self.response_headers_to_remove,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::HttpHeaderMatch {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HttpHeaderMatch");
        debug_struct.field("exact_match", &self.exact_match);
        debug_struct.field("header_name", &self.header_name);
        debug_struct.field("invert_match", &self.invert_match);
        debug_struct.field("prefix_match", &self.prefix_match);
        debug_struct.field("present_match", &self.present_match);
        debug_struct.field("range_match", &self.range_match);
        debug_struct.field("regex_match", &self.regex_match);
        debug_struct.field("suffix_match", &self.suffix_match);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::HttpHeaderOption {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HttpHeaderOption");
        debug_struct.field("header_name", &self.header_name);
        debug_struct.field("header_value", &self.header_value);
        debug_struct.field("replace", &self.replace);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "http-health-checks")]
impl std::fmt::Debug for super::HttpHealthCheck {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HttpHealthCheck");
        debug_struct.field("check_interval_sec", &self.check_interval_sec);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("healthy_threshold", &self.healthy_threshold);
        debug_struct.field("host", &self.host);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("port", &self.port);
        debug_struct.field("request_path", &self.request_path);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("timeout_sec", &self.timeout_sec);
        debug_struct.field("unhealthy_threshold", &self.unhealthy_threshold);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "http-health-checks")]
impl std::fmt::Debug for super::HttpHealthCheckList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HttpHealthCheckList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "http-health-checks")]
impl std::fmt::Debug for super::http_health_check_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "http-health-checks")]
impl std::fmt::Debug for super::http_health_check_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::HttpQueryParameterMatch {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HttpQueryParameterMatch");
        debug_struct.field("exact_match", &self.exact_match);
        debug_struct.field("name", &self.name);
        debug_struct.field("present_match", &self.present_match);
        debug_struct.field("regex_match", &self.regex_match);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::HttpRedirectAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HttpRedirectAction");
        debug_struct.field("host_redirect", &self.host_redirect);
        debug_struct.field("https_redirect", &self.https_redirect);
        debug_struct.field("path_redirect", &self.path_redirect);
        debug_struct.field("prefix_redirect", &self.prefix_redirect);
        debug_struct.field("redirect_response_code", &self.redirect_response_code);
        debug_struct.field("strip_query", &self.strip_query);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::HttpRetryPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HttpRetryPolicy");
        debug_struct.field("num_retries", &self.num_retries);
        debug_struct.field("per_try_timeout", &self.per_try_timeout);
        debug_struct.field("retry_conditions", &self.retry_conditions);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::HttpRouteAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HttpRouteAction");
        debug_struct.field("cors_policy", &self.cors_policy);
        debug_struct.field("fault_injection_policy", &self.fault_injection_policy);
        debug_struct.field("max_stream_duration", &self.max_stream_duration);
        debug_struct.field("request_mirror_policy", &self.request_mirror_policy);
        debug_struct.field("retry_policy", &self.retry_policy);
        debug_struct.field("timeout", &self.timeout);
        debug_struct.field("url_rewrite", &self.url_rewrite);
        debug_struct.field("weighted_backend_services", &self.weighted_backend_services);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::HttpRouteRule {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HttpRouteRule");
        debug_struct.field(
            "custom_error_response_policy",
            &self.custom_error_response_policy,
        );
        debug_struct.field("description", &self.description);
        debug_struct.field("header_action", &self.header_action);
        debug_struct.field("match_rules", &self.match_rules);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("route_action", &self.route_action);
        debug_struct.field("service", &self.service);
        debug_struct.field("url_redirect", &self.url_redirect);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::HttpRouteRuleMatch {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HttpRouteRuleMatch");
        debug_struct.field("full_path_match", &self.full_path_match);
        debug_struct.field("header_matches", &self.header_matches);
        debug_struct.field("ignore_case", &self.ignore_case);
        debug_struct.field("metadata_filters", &self.metadata_filters);
        debug_struct.field("path_template_match", &self.path_template_match);
        debug_struct.field("prefix_match", &self.prefix_match);
        debug_struct.field("query_parameter_matches", &self.query_parameter_matches);
        debug_struct.field("regex_match", &self.regex_match);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "https-health-checks")]
impl std::fmt::Debug for super::HttpsHealthCheck {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HttpsHealthCheck");
        debug_struct.field("check_interval_sec", &self.check_interval_sec);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("healthy_threshold", &self.healthy_threshold);
        debug_struct.field("host", &self.host);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("port", &self.port);
        debug_struct.field("request_path", &self.request_path);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("timeout_sec", &self.timeout_sec);
        debug_struct.field("unhealthy_threshold", &self.unhealthy_threshold);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "https-health-checks")]
impl std::fmt::Debug for super::HttpsHealthCheckList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("HttpsHealthCheckList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "https-health-checks")]
impl std::fmt::Debug for super::https_health_check_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "https-health-checks")]
impl std::fmt::Debug for super::https_health_check_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "image-family-views", feature = "images",))]
impl std::fmt::Debug for super::Image {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Image");
        debug_struct.field("architecture", &self.architecture);
        debug_struct.field("archive_size_bytes", &self.archive_size_bytes);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("deprecated", &self.deprecated);
        debug_struct.field("description", &self.description);
        debug_struct.field("disk_size_gb", &self.disk_size_gb);
        debug_struct.field(
            "enable_confidential_compute",
            &self.enable_confidential_compute,
        );
        debug_struct.field("family", &self.family);
        debug_struct.field("guest_os_features", &self.guest_os_features);
        debug_struct.field("id", &self.id);
        debug_struct.field("image_encryption_key", &self.image_encryption_key);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("license_codes", &self.license_codes);
        debug_struct.field("licenses", &self.licenses);
        debug_struct.field("name", &self.name);
        debug_struct.field("params", &self.params);
        debug_struct.field("raw_disk", &self.raw_disk);
        debug_struct.field("satisfies_pzi", &self.satisfies_pzi);
        debug_struct.field("satisfies_pzs", &self.satisfies_pzs);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field(
            "shielded_instance_initial_state",
            &self.shielded_instance_initial_state,
        );
        debug_struct.field("source_disk", &self.source_disk);
        debug_struct.field(
            "source_disk_encryption_key",
            &self.source_disk_encryption_key,
        );
        debug_struct.field("source_disk_id", &self.source_disk_id);
        debug_struct.field("source_image", &self.source_image);
        debug_struct.field(
            "source_image_encryption_key",
            &self.source_image_encryption_key,
        );
        debug_struct.field("source_image_id", &self.source_image_id);
        debug_struct.field("source_snapshot", &self.source_snapshot);
        debug_struct.field(
            "source_snapshot_encryption_key",
            &self.source_snapshot_encryption_key,
        );
        debug_struct.field("source_snapshot_id", &self.source_snapshot_id);
        debug_struct.field("source_type", &self.source_type);
        debug_struct.field("status", &self.status);
        debug_struct.field("storage_locations", &self.storage_locations);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "image-family-views", feature = "images",))]
impl std::fmt::Debug for super::image::RawDisk {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RawDisk");
        debug_struct.field("container_type", &self.container_type);
        debug_struct.field("sha_1_checksum", &self.sha_1_checksum);
        debug_struct.field("source", &self.source);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "image-family-views")]
impl std::fmt::Debug for super::ImageFamilyView {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ImageFamilyView");
        debug_struct.field("image", &self.image);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "images")]
impl std::fmt::Debug for super::ImageList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ImageList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "images")]
impl std::fmt::Debug for super::image_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "images")]
impl std::fmt::Debug for super::image_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "image-family-views", feature = "images",))]
impl std::fmt::Debug for super::ImageParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ImageParams");
        debug_struct.field("resource_manager_tags", &self.resource_manager_tags);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "image-family-views",
    feature = "images",
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::InitialStateConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InitialStateConfig");
        debug_struct.field("dbs", &self.dbs);
        debug_struct.field("dbxs", &self.dbxs);
        debug_struct.field("keks", &self.keks);
        debug_struct.field("pk", &self.pk);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::Instance {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Instance");
        debug_struct.field("advanced_machine_features", &self.advanced_machine_features);
        debug_struct.field("can_ip_forward", &self.can_ip_forward);
        debug_struct.field(
            "confidential_instance_config",
            &self.confidential_instance_config,
        );
        debug_struct.field("cpu_platform", &self.cpu_platform);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("deletion_protection", &self.deletion_protection);
        debug_struct.field("description", &self.description);
        debug_struct.field("disks", &self.disks);
        debug_struct.field("display_device", &self.display_device);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("guest_accelerators", &self.guest_accelerators);
        debug_struct.field("hostname", &self.hostname);
        debug_struct.field("id", &self.id);
        debug_struct.field("instance_encryption_key", &self.instance_encryption_key);
        debug_struct.field(
            "key_revocation_action_type",
            &self.key_revocation_action_type,
        );
        debug_struct.field("kind", &self.kind);
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("last_start_timestamp", &self.last_start_timestamp);
        debug_struct.field("last_stop_timestamp", &self.last_stop_timestamp);
        debug_struct.field("last_suspended_timestamp", &self.last_suspended_timestamp);
        debug_struct.field("machine_type", &self.machine_type);
        debug_struct.field("metadata", &self.metadata);
        debug_struct.field("min_cpu_platform", &self.min_cpu_platform);
        debug_struct.field("name", &self.name);
        debug_struct.field("network_interfaces", &self.network_interfaces);
        debug_struct.field(
            "network_performance_config",
            &self.network_performance_config,
        );
        debug_struct.field("params", &self.params);
        debug_struct.field(
            "private_ipv_6_google_access",
            &self.private_ipv_6_google_access,
        );
        debug_struct.field("reservation_affinity", &self.reservation_affinity);
        debug_struct.field("resource_policies", &self.resource_policies);
        debug_struct.field("resource_status", &self.resource_status);
        debug_struct.field("satisfies_pzi", &self.satisfies_pzi);
        debug_struct.field("satisfies_pzs", &self.satisfies_pzs);
        debug_struct.field("scheduling", &self.scheduling);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("service_accounts", &self.service_accounts);
        debug_struct.field("shielded_instance_config", &self.shielded_instance_config);
        debug_struct.field(
            "shielded_instance_integrity_policy",
            &self.shielded_instance_integrity_policy,
        );
        debug_struct.field("source_machine_image", &self.source_machine_image);
        debug_struct.field(
            "source_machine_image_encryption_key",
            &self.source_machine_image_encryption_key,
        );
        debug_struct.field("start_restricted", &self.start_restricted);
        debug_struct.field("status", &self.status);
        debug_struct.field("status_message", &self.status_message);
        debug_struct.field("tags", &self.tags);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstanceAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instance_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instance_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::InstanceConsumptionData {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceConsumptionData");
        debug_struct.field("consumption_info", &self.consumption_info);
        debug_struct.field("instance", &self.instance);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::InstanceConsumptionInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceConsumptionInfo");
        debug_struct.field("guest_cpus", &self.guest_cpus);
        debug_struct.field("local_ssd_gb", &self.local_ssd_gb);
        debug_struct.field("memory_mb", &self.memory_mb);
        debug_struct.field("min_node_cpus", &self.min_node_cpus);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instance-groups", feature = "region-instance-groups",))]
impl std::fmt::Debug for super::InstanceGroup {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroup");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("named_ports", &self.named_ports);
        debug_struct.field("network", &self.network);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("size", &self.size);
        debug_struct.field("subnetwork", &self.subnetwork);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::InstanceGroupAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_group_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_group_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::InstanceGroupList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_group_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_group_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceGroupManager {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManager");
        debug_struct.field("all_instances_config", &self.all_instances_config);
        debug_struct.field("auto_healing_policies", &self.auto_healing_policies);
        debug_struct.field("base_instance_name", &self.base_instance_name);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("current_actions", &self.current_actions);
        debug_struct.field("description", &self.description);
        debug_struct.field("distribution_policy", &self.distribution_policy);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("id", &self.id);
        debug_struct.field(
            "instance_flexibility_policy",
            &self.instance_flexibility_policy,
        );
        debug_struct.field("instance_group", &self.instance_group);
        debug_struct.field("instance_lifecycle_policy", &self.instance_lifecycle_policy);
        debug_struct.field("instance_template", &self.instance_template);
        debug_struct.field("kind", &self.kind);
        debug_struct.field(
            "list_managed_instances_results",
            &self.list_managed_instances_results,
        );
        debug_struct.field("name", &self.name);
        debug_struct.field("named_ports", &self.named_ports);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource_policies", &self.resource_policies);
        debug_struct.field("satisfies_pzi", &self.satisfies_pzi);
        debug_struct.field("satisfies_pzs", &self.satisfies_pzs);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("standby_policy", &self.standby_policy);
        debug_struct.field("stateful_policy", &self.stateful_policy);
        debug_struct.field("status", &self.status);
        debug_struct.field("target_pools", &self.target_pools);
        debug_struct.field("target_size", &self.target_size);
        debug_struct.field("target_stopped_size", &self.target_stopped_size);
        debug_struct.field("target_suspended_size", &self.target_suspended_size);
        debug_struct.field("update_policy", &self.update_policy);
        debug_struct.field("versions", &self.versions);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceGroupManagerActionsSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerActionsSummary");
        debug_struct.field("abandoning", &self.abandoning);
        debug_struct.field("creating", &self.creating);
        debug_struct.field("creating_without_retries", &self.creating_without_retries);
        debug_struct.field("deleting", &self.deleting);
        debug_struct.field("none", &self.none);
        debug_struct.field("recreating", &self.recreating);
        debug_struct.field("refreshing", &self.refreshing);
        debug_struct.field("restarting", &self.restarting);
        debug_struct.field("resuming", &self.resuming);
        debug_struct.field("starting", &self.starting);
        debug_struct.field("stopping", &self.stopping);
        debug_struct.field("suspending", &self.suspending);
        debug_struct.field("verifying", &self.verifying);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagerAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_manager_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_manager_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceGroupManagerAllInstancesConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerAllInstancesConfig");
        debug_struct.field("properties", &self.properties);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceGroupManagerAutoHealingPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerAutoHealingPolicy");
        debug_struct.field("health_check", &self.health_check);
        debug_struct.field("initial_delay_sec", &self.initial_delay_sec);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceGroupManagerInstanceFlexibilityPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerInstanceFlexibilityPolicy");
        debug_struct.field("instance_selections", &self.instance_selections);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceGroupManagerInstanceFlexibilityPolicyInstanceSelection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("InstanceGroupManagerInstanceFlexibilityPolicyInstanceSelection");
        debug_struct.field("machine_types", &self.machine_types);
        debug_struct.field("rank", &self.rank);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceGroupManagerInstanceLifecyclePolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerInstanceLifecyclePolicy");
        debug_struct.field("default_action_on_failure", &self.default_action_on_failure);
        debug_struct.field("force_update_on_repair", &self.force_update_on_repair);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagerList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_manager_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_manager_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-manager-resize-requests")]
impl std::fmt::Debug for super::InstanceGroupManagerResizeRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerResizeRequest");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("requested_run_duration", &self.requested_run_duration);
        debug_struct.field("resize_by", &self.resize_by);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("self_link_with_id", &self.self_link_with_id);
        debug_struct.field("state", &self.state);
        debug_struct.field("status", &self.status);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-manager-resize-requests")]
impl std::fmt::Debug for super::InstanceGroupManagerResizeRequestStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerResizeRequestStatus");
        debug_struct.field("error", &self.error);
        debug_struct.field("last_attempt", &self.last_attempt);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-manager-resize-requests")]
impl std::fmt::Debug for super::instance_group_manager_resize_request_status::Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Error");
        debug_struct.field("errors", &self.errors);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-manager-resize-requests")]
impl std::fmt::Debug for super::instance_group_manager_resize_request_status::error::Errors {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Errors");
        debug_struct.field("code", &self.code);
        debug_struct.field("error_details", &self.error_details);
        debug_struct.field("location", &self.location);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-manager-resize-requests")]
impl std::fmt::Debug
    for super::instance_group_manager_resize_request_status::error::errors::ErrorDetails
{
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ErrorDetails");
        debug_struct.field("error_info", &self.error_info);
        debug_struct.field("help", &self.help);
        debug_struct.field("localized_message", &self.localized_message);
        debug_struct.field("quota_info", &self.quota_info);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-manager-resize-requests")]
impl std::fmt::Debug for super::InstanceGroupManagerResizeRequestStatusLastAttempt {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerResizeRequestStatusLastAttempt");
        debug_struct.field("error", &self.error);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-manager-resize-requests")]
impl std::fmt::Debug for super::instance_group_manager_resize_request_status_last_attempt::Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Error");
        debug_struct.field("errors", &self.errors);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-manager-resize-requests")]
impl std::fmt::Debug
    for super::instance_group_manager_resize_request_status_last_attempt::error::Errors
{
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Errors");
        debug_struct.field("code", &self.code);
        debug_struct.field("error_details", &self.error_details);
        debug_struct.field("location", &self.location);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-manager-resize-requests")]
impl std::fmt::Debug for super::instance_group_manager_resize_request_status_last_attempt::error::errors::ErrorDetails {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ErrorDetails");
        debug_struct.field("error_info", &self.error_info);
        debug_struct.field("help", &self.help);
        debug_struct.field("localized_message", &self.localized_message);
        debug_struct.field("quota_info", &self.quota_info);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-manager-resize-requests")]
impl std::fmt::Debug for super::InstanceGroupManagerResizeRequestsListResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerResizeRequestsListResponse");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-manager-resize-requests")]
impl std::fmt::Debug for super::instance_group_manager_resize_requests_list_response::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-manager-resize-requests")]
impl std::fmt::Debug
    for super::instance_group_manager_resize_requests_list_response::warning::Data
{
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceGroupManagerResourcePolicies {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerResourcePolicies");
        debug_struct.field("workload_policy", &self.workload_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceGroupManagerStandbyPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerStandbyPolicy");
        debug_struct.field("initial_delay_sec", &self.initial_delay_sec);
        debug_struct.field("mode", &self.mode);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceGroupManagerStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerStatus");
        debug_struct.field("all_instances_config", &self.all_instances_config);
        debug_struct.field("autoscaler", &self.autoscaler);
        debug_struct.field("is_stable", &self.is_stable);
        debug_struct.field("stateful", &self.stateful);
        debug_struct.field("version_target", &self.version_target);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceGroupManagerStatusAllInstancesConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerStatusAllInstancesConfig");
        debug_struct.field("current_revision", &self.current_revision);
        debug_struct.field("effective", &self.effective);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceGroupManagerStatusStateful {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerStatusStateful");
        debug_struct.field("has_stateful_config", &self.has_stateful_config);
        debug_struct.field("per_instance_configs", &self.per_instance_configs);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceGroupManagerStatusStatefulPerInstanceConfigs {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("InstanceGroupManagerStatusStatefulPerInstanceConfigs");
        debug_struct.field("all_effective", &self.all_effective);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceGroupManagerStatusVersionTarget {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerStatusVersionTarget");
        debug_struct.field("is_reached", &self.is_reached);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceGroupManagerUpdatePolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerUpdatePolicy");
        debug_struct.field(
            "instance_redistribution_type",
            &self.instance_redistribution_type,
        );
        debug_struct.field("max_surge", &self.max_surge);
        debug_struct.field("max_unavailable", &self.max_unavailable);
        debug_struct.field("minimal_action", &self.minimal_action);
        debug_struct.field(
            "most_disruptive_allowed_action",
            &self.most_disruptive_allowed_action,
        );
        debug_struct.field("replacement_method", &self.replacement_method);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceGroupManagerVersion {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagerVersion");
        debug_struct.field("instance_template", &self.instance_template);
        debug_struct.field("name", &self.name);
        debug_struct.field("target_size", &self.target_size);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersAbandonInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersAbandonInstancesRequest");
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersApplyUpdatesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersApplyUpdatesRequest");
        debug_struct.field("all_instances", &self.all_instances);
        debug_struct.field("instances", &self.instances);
        debug_struct.field("minimal_action", &self.minimal_action);
        debug_struct.field(
            "most_disruptive_allowed_action",
            &self.most_disruptive_allowed_action,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersCreateInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersCreateInstancesRequest");
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersDeleteInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersDeleteInstancesRequest");
        debug_struct.field("instances", &self.instances);
        debug_struct.field(
            "skip_instances_on_validation_error",
            &self.skip_instances_on_validation_error,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersDeletePerInstanceConfigsReq {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersDeletePerInstanceConfigsReq");
        debug_struct.field("names", &self.names);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersListErrorsResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersListErrorsResponse");
        debug_struct.field("items", &self.items);
        debug_struct.field("next_page_token", &self.next_page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersListManagedInstancesResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersListManagedInstancesResponse");
        debug_struct.field("managed_instances", &self.managed_instances);
        debug_struct.field("next_page_token", &self.next_page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersListPerInstanceConfigsResp {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersListPerInstanceConfigsResp");
        debug_struct.field("items", &self.items);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers_list_per_instance_configs_resp::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug
    for super::instance_group_managers_list_per_instance_configs_resp::warning::Data
{
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersPatchPerInstanceConfigsReq {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersPatchPerInstanceConfigsReq");
        debug_struct.field("per_instance_configs", &self.per_instance_configs);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersRecreateInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersRecreateInstancesRequest");
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersResumeInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersResumeInstancesRequest");
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersScopedList");
        debug_struct.field("instance_group_managers", &self.instance_group_managers);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersSetInstanceTemplateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersSetInstanceTemplateRequest");
        debug_struct.field("instance_template", &self.instance_template);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersSetTargetPoolsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersSetTargetPoolsRequest");
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("target_pools", &self.target_pools);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersStartInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersStartInstancesRequest");
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersStopInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersStopInstancesRequest");
        debug_struct.field("force_stop", &self.force_stop);
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersSuspendInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersSuspendInstancesRequest");
        debug_struct.field("force_suspend", &self.force_suspend);
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::InstanceGroupManagersUpdatePerInstanceConfigsReq {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupManagersUpdatePerInstanceConfigsReq");
        debug_struct.field("per_instance_configs", &self.per_instance_configs);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::InstanceGroupsAddInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupsAddInstancesRequest");
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::InstanceGroupsListInstances {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupsListInstances");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_groups_list_instances::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_groups_list_instances::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::InstanceGroupsListInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupsListInstancesRequest");
        debug_struct.field("instance_state", &self.instance_state);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::InstanceGroupsRemoveInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupsRemoveInstancesRequest");
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::InstanceGroupsScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupsScopedList");
        debug_struct.field("instance_groups", &self.instance_groups);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_groups_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_groups_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::InstanceGroupsSetNamedPortsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceGroupsSetNamedPortsRequest");
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("named_ports", &self.named_ports);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstanceList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instance_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instance_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstanceListReferrers {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceListReferrers");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instance_list_referrers::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instance_list_referrers::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceManagedByIgmError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceManagedByIgmError");
        debug_struct.field("error", &self.error);
        debug_struct.field("instance_action_details", &self.instance_action_details);
        debug_struct.field("timestamp", &self.timestamp);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceManagedByIgmErrorInstanceActionDetails {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceManagedByIgmErrorInstanceActionDetails");
        debug_struct.field("action", &self.action);
        debug_struct.field("instance", &self.instance);
        debug_struct.field("version", &self.version);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstanceManagedByIgmErrorManagedInstanceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceManagedByIgmErrorManagedInstanceError");
        debug_struct.field("code", &self.code);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::InstanceMoveRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceMoveRequest");
        debug_struct.field("destination_zone", &self.destination_zone);
        debug_struct.field("target_instance", &self.target_instance);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstanceParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceParams");
        debug_struct.field(
            "request_valid_for_duration",
            &self.request_valid_for_duration,
        );
        debug_struct.field("resource_manager_tags", &self.resource_manager_tags);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::InstanceProperties {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceProperties");
        debug_struct.field("advanced_machine_features", &self.advanced_machine_features);
        debug_struct.field("can_ip_forward", &self.can_ip_forward);
        debug_struct.field(
            "confidential_instance_config",
            &self.confidential_instance_config,
        );
        debug_struct.field("description", &self.description);
        debug_struct.field("disks", &self.disks);
        debug_struct.field("guest_accelerators", &self.guest_accelerators);
        debug_struct.field(
            "key_revocation_action_type",
            &self.key_revocation_action_type,
        );
        debug_struct.field("labels", &self.labels);
        debug_struct.field("machine_type", &self.machine_type);
        debug_struct.field("metadata", &self.metadata);
        debug_struct.field("min_cpu_platform", &self.min_cpu_platform);
        debug_struct.field("network_interfaces", &self.network_interfaces);
        debug_struct.field(
            "network_performance_config",
            &self.network_performance_config,
        );
        debug_struct.field(
            "private_ipv_6_google_access",
            &self.private_ipv_6_google_access,
        );
        debug_struct.field("reservation_affinity", &self.reservation_affinity);
        debug_struct.field("resource_manager_tags", &self.resource_manager_tags);
        debug_struct.field("resource_policies", &self.resource_policies);
        debug_struct.field("scheduling", &self.scheduling);
        debug_struct.field("service_accounts", &self.service_accounts);
        debug_struct.field("shielded_instance_config", &self.shielded_instance_config);
        debug_struct.field("tags", &self.tags);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::InstancePropertiesPatch {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstancePropertiesPatch");
        debug_struct.field("labels", &self.labels);
        debug_struct.field("metadata", &self.metadata);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instance-groups", feature = "target-pools",))]
impl std::fmt::Debug for super::InstanceReference {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceReference");
        debug_struct.field("instance", &self.instance);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-settings")]
impl std::fmt::Debug for super::InstanceSettings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceSettings");
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("metadata", &self.metadata);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-settings")]
impl std::fmt::Debug for super::InstanceSettingsMetadata {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceSettingsMetadata");
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instance-templates", feature = "region-instance-templates",))]
impl std::fmt::Debug for super::InstanceTemplate {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceTemplate");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("properties", &self.properties);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("source_instance", &self.source_instance);
        debug_struct.field("source_instance_params", &self.source_instance_params);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-templates")]
impl std::fmt::Debug for super::InstanceTemplateAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceTemplateAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-templates")]
impl std::fmt::Debug for super::instance_template_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-templates")]
impl std::fmt::Debug for super::instance_template_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instance-templates", feature = "region-instance-templates",))]
impl std::fmt::Debug for super::InstanceTemplateList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceTemplateList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instance-templates", feature = "region-instance-templates",))]
impl std::fmt::Debug for super::instance_template_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instance-templates", feature = "region-instance-templates",))]
impl std::fmt::Debug for super::instance_template_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-templates")]
impl std::fmt::Debug for super::InstanceTemplatesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceTemplatesScopedList");
        debug_struct.field("instance_templates", &self.instance_templates);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-templates")]
impl std::fmt::Debug for super::instance_templates_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-templates")]
impl std::fmt::Debug for super::instance_templates_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instance-groups", feature = "region-instance-groups",))]
impl std::fmt::Debug for super::InstanceWithNamedPorts {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstanceWithNamedPorts");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("named_ports", &self.named_ports);
        debug_struct.field("status", &self.status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstancesAddResourcePoliciesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstancesAddResourcePoliciesRequest");
        debug_struct.field("resource_policies", &self.resource_policies);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "autoscalers",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "cross-site-networks",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "firewalls",
    feature = "forwarding-rules",
    feature = "future-reservations",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "global-network-endpoint-groups",
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "global-public-delegated-prefixes",
    feature = "health-checks",
    feature = "http-health-checks",
    feature = "https-health-checks",
    feature = "images",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "instance-settings",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-attachments",
    feature = "interconnect-groups",
    feature = "interconnects",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-edge-security-services",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "node-groups",
    feature = "node-templates",
    feature = "organization-security-policies",
    feature = "packet-mirrorings",
    feature = "preview-features",
    feature = "projects",
    feature = "public-advertised-prefixes",
    feature = "public-delegated-prefixes",
    feature = "region-autoscalers",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-disks",
    feature = "region-health-check-services",
    feature = "region-health-checks",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-instant-snapshots",
    feature = "region-network-endpoint-groups",
    feature = "region-network-firewall-policies",
    feature = "region-notification-endpoints",
    feature = "region-operations",
    feature = "region-security-policies",
    feature = "region-ssl-certificates",
    feature = "region-ssl-policies",
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "region-target-tcp-proxies",
    feature = "region-url-maps",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
    feature = "resource-policies",
    feature = "routers",
    feature = "routes",
    feature = "security-policies",
    feature = "service-attachments",
    feature = "snapshot-settings",
    feature = "snapshots",
    feature = "ssl-certificates",
    feature = "ssl-policies",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-grpc-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
    feature = "target-instances",
    feature = "target-pools",
    feature = "target-ssl-proxies",
    feature = "target-tcp-proxies",
    feature = "target-vpn-gateways",
    feature = "url-maps",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
    feature = "wire-groups",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::InstancesBulkInsertOperationMetadata {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstancesBulkInsertOperationMetadata");
        debug_struct.field("per_location_status", &self.per_location_status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstancesGetEffectiveFirewallsResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstancesGetEffectiveFirewallsResponse");
        debug_struct.field("firewall_policys", &self.firewall_policys);
        debug_struct.field("firewalls", &self.firewalls);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("InstancesGetEffectiveFirewallsResponseEffectiveFirewallPolicy");
        debug_struct.field("display_name", &self.display_name);
        debug_struct.field("name", &self.name);
        debug_struct.field("packet_mirroring_rules", &self.packet_mirroring_rules);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("rules", &self.rules);
        debug_struct.field("short_name", &self.short_name);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstancesRemoveResourcePoliciesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstancesRemoveResourcePoliciesRequest");
        debug_struct.field("resource_policies", &self.resource_policies);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstancesReportHostAsFaultyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstancesReportHostAsFaultyRequest");
        debug_struct.field("disruption_schedule", &self.disruption_schedule);
        debug_struct.field("fault_reasons", &self.fault_reasons);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstancesReportHostAsFaultyRequestFaultReason {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstancesReportHostAsFaultyRequestFaultReason");
        debug_struct.field("behavior", &self.behavior);
        debug_struct.field("description", &self.description);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstancesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstancesScopedList");
        debug_struct.field("instances", &self.instances);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstancesSetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstancesSetLabelsRequest");
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstancesSetMachineResourcesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstancesSetMachineResourcesRequest");
        debug_struct.field("guest_accelerators", &self.guest_accelerators);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstancesSetMachineTypeRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstancesSetMachineTypeRequest");
        debug_struct.field("machine_type", &self.machine_type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstancesSetMinCpuPlatformRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstancesSetMinCpuPlatformRequest");
        debug_struct.field("min_cpu_platform", &self.min_cpu_platform);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstancesSetNameRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstancesSetNameRequest");
        debug_struct.field("current_name", &self.current_name);
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstancesSetSecurityPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstancesSetSecurityPolicyRequest");
        debug_struct.field("network_interfaces", &self.network_interfaces);
        debug_struct.field("security_policy", &self.security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstancesSetServiceAccountRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstancesSetServiceAccountRequest");
        debug_struct.field("email", &self.email);
        debug_struct.field("scopes", &self.scopes);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::InstancesStartWithEncryptionKeyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstancesStartWithEncryptionKeyRequest");
        debug_struct.field("disks", &self.disks);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instant-snapshots", feature = "region-instant-snapshots",))]
impl std::fmt::Debug for super::InstantSnapshot {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstantSnapshot");
        debug_struct.field("architecture", &self.architecture);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("disk_size_gb", &self.disk_size_gb);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("name", &self.name);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource_status", &self.resource_status);
        debug_struct.field("satisfies_pzi", &self.satisfies_pzi);
        debug_struct.field("satisfies_pzs", &self.satisfies_pzs);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("self_link_with_id", &self.self_link_with_id);
        debug_struct.field("source_disk", &self.source_disk);
        debug_struct.field("source_disk_id", &self.source_disk_id);
        debug_struct.field("status", &self.status);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instant-snapshots")]
impl std::fmt::Debug for super::InstantSnapshotAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstantSnapshotAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instant-snapshots")]
impl std::fmt::Debug for super::instant_snapshot_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instant-snapshots")]
impl std::fmt::Debug for super::instant_snapshot_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instant-snapshots", feature = "region-instant-snapshots",))]
impl std::fmt::Debug for super::InstantSnapshotList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstantSnapshotList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instant-snapshots", feature = "region-instant-snapshots",))]
impl std::fmt::Debug for super::instant_snapshot_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instant-snapshots", feature = "region-instant-snapshots",))]
impl std::fmt::Debug for super::instant_snapshot_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instant-snapshots", feature = "region-instant-snapshots",))]
impl std::fmt::Debug for super::InstantSnapshotResourceStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstantSnapshotResourceStatus");
        debug_struct.field("storage_size_bytes", &self.storage_size_bytes);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instant-snapshots")]
impl std::fmt::Debug for super::InstantSnapshotsScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InstantSnapshotsScopedList");
        debug_struct.field("instant_snapshots", &self.instant_snapshots);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instant-snapshots")]
impl std::fmt::Debug for super::instant_snapshots_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instant-snapshots")]
impl std::fmt::Debug for super::instant_snapshots_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::Int64RangeMatch {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Int64RangeMatch");
        debug_struct.field("range_end", &self.range_end);
        debug_struct.field("range_start", &self.range_start);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::Interconnect {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Interconnect");
        debug_struct.field("aai_enabled", &self.aai_enabled);
        debug_struct.field("admin_enabled", &self.admin_enabled);
        debug_struct.field(
            "application_aware_interconnect",
            &self.application_aware_interconnect,
        );
        debug_struct.field("available_features", &self.available_features);
        debug_struct.field("circuit_infos", &self.circuit_infos);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("customer_name", &self.customer_name);
        debug_struct.field("description", &self.description);
        debug_struct.field("expected_outages", &self.expected_outages);
        debug_struct.field("google_ip_address", &self.google_ip_address);
        debug_struct.field("google_reference_id", &self.google_reference_id);
        debug_struct.field("id", &self.id);
        debug_struct.field("interconnect_attachments", &self.interconnect_attachments);
        debug_struct.field("interconnect_groups", &self.interconnect_groups);
        debug_struct.field("interconnect_type", &self.interconnect_type);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("link_type", &self.link_type);
        debug_struct.field("location", &self.location);
        debug_struct.field("macsec", &self.macsec);
        debug_struct.field("macsec_enabled", &self.macsec_enabled);
        debug_struct.field("name", &self.name);
        debug_struct.field("noc_contact_email", &self.noc_contact_email);
        debug_struct.field("operational_status", &self.operational_status);
        debug_struct.field("peer_ip_address", &self.peer_ip_address);
        debug_struct.field("provisioned_link_count", &self.provisioned_link_count);
        debug_struct.field("remote_location", &self.remote_location);
        debug_struct.field("requested_features", &self.requested_features);
        debug_struct.field("requested_link_count", &self.requested_link_count);
        debug_struct.field("satisfies_pzs", &self.satisfies_pzs);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("state", &self.state);
        debug_struct.field("subzone", &self.subzone);
        debug_struct.field("wire_groups", &self.wire_groups);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::InterconnectApplicationAwareInterconnect {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectApplicationAwareInterconnect");
        debug_struct.field(
            "bandwidth_percentage_policy",
            &self.bandwidth_percentage_policy,
        );
        debug_struct.field("profile_description", &self.profile_description);
        debug_struct.field("shape_average_percentages", &self.shape_average_percentages);
        debug_struct.field("strict_priority_policy", &self.strict_priority_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::InterconnectApplicationAwareInterconnectBandwidthPercentage {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("InterconnectApplicationAwareInterconnectBandwidthPercentage");
        debug_struct.field("percentage", &self.percentage);
        debug_struct.field("traffic_class", &self.traffic_class);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::InterconnectApplicationAwareInterconnectBandwidthPercentagePolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("InterconnectApplicationAwareInterconnectBandwidthPercentagePolicy");
        debug_struct.field("bandwidth_percentages", &self.bandwidth_percentages);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::InterconnectApplicationAwareInterconnectStrictPriorityPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("InterconnectApplicationAwareInterconnectStrictPriorityPolicy");
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::InterconnectAttachment {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectAttachment");
        debug_struct.field("admin_enabled", &self.admin_enabled);
        debug_struct.field("attachment_group", &self.attachment_group);
        debug_struct.field("bandwidth", &self.bandwidth);
        debug_struct.field("candidate_ipv_6_subnets", &self.candidate_ipv_6_subnets);
        debug_struct.field("candidate_subnets", &self.candidate_subnets);
        debug_struct.field("cloud_router_ip_address", &self.cloud_router_ip_address);
        debug_struct.field(
            "cloud_router_ipv_6_address",
            &self.cloud_router_ipv_6_address,
        );
        debug_struct.field(
            "cloud_router_ipv_6_interface_id",
            &self.cloud_router_ipv_6_interface_id,
        );
        debug_struct.field("configuration_constraints", &self.configuration_constraints);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field(
            "customer_router_ip_address",
            &self.customer_router_ip_address,
        );
        debug_struct.field(
            "customer_router_ipv_6_address",
            &self.customer_router_ipv_6_address,
        );
        debug_struct.field(
            "customer_router_ipv_6_interface_id",
            &self.customer_router_ipv_6_interface_id,
        );
        debug_struct.field("dataplane_version", &self.dataplane_version);
        debug_struct.field("description", &self.description);
        debug_struct.field("edge_availability_domain", &self.edge_availability_domain);
        debug_struct.field("encryption", &self.encryption);
        debug_struct.field("google_reference_id", &self.google_reference_id);
        debug_struct.field("id", &self.id);
        debug_struct.field("interconnect", &self.interconnect);
        debug_struct.field("ipsec_internal_addresses", &self.ipsec_internal_addresses);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("mtu", &self.mtu);
        debug_struct.field("name", &self.name);
        debug_struct.field("operational_status", &self.operational_status);
        debug_struct.field("pairing_key", &self.pairing_key);
        debug_struct.field("partner_asn", &self.partner_asn);
        debug_struct.field("partner_metadata", &self.partner_metadata);
        debug_struct.field("private_interconnect_info", &self.private_interconnect_info);
        debug_struct.field("region", &self.region);
        debug_struct.field("remote_service", &self.remote_service);
        debug_struct.field("router", &self.router);
        debug_struct.field("satisfies_pzs", &self.satisfies_pzs);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("stack_type", &self.stack_type);
        debug_struct.field("state", &self.state);
        debug_struct.field("subnet_length", &self.subnet_length);
        debug_struct.field("r#type", &self.r#type);
        debug_struct.field("vlan_tag_8021_q", &self.vlan_tag_8021_q);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::InterconnectAttachmentAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectAttachmentAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::interconnect_attachment_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::interconnect_attachment_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "interconnect-attachments",
    feature = "interconnect-remote-locations",
))]
impl std::fmt::Debug for super::InterconnectAttachmentConfigurationConstraints {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectAttachmentConfigurationConstraints");
        debug_struct.field("bgp_md_5", &self.bgp_md_5);
        debug_struct.field("bgp_peer_asn_ranges", &self.bgp_peer_asn_ranges);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "interconnect-attachments",
    feature = "interconnect-remote-locations",
))]
impl std::fmt::Debug for super::InterconnectAttachmentConfigurationConstraintsBgpPeerASNRange {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("InterconnectAttachmentConfigurationConstraintsBgpPeerASNRange");
        debug_struct.field("max", &self.max);
        debug_struct.field("min", &self.min);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::InterconnectAttachmentGroup {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectAttachmentGroup");
        debug_struct.field("attachments", &self.attachments);
        debug_struct.field("configured", &self.configured);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("intent", &self.intent);
        debug_struct.field("interconnect_group", &self.interconnect_group);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("logical_structure", &self.logical_structure);
        debug_struct.field("name", &self.name);
        debug_struct.field("self_link", &self.self_link);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::InterconnectAttachmentGroupAttachment {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectAttachmentGroupAttachment");
        debug_struct.field("attachment", &self.attachment);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::InterconnectAttachmentGroupConfigured {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectAttachmentGroupConfigured");
        debug_struct.field("availability_sla", &self.availability_sla);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::InterconnectAttachmentGroupConfiguredAvailabilitySLA {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("InterconnectAttachmentGroupConfiguredAvailabilitySLA");
        debug_struct.field("effective_sla", &self.effective_sla);
        debug_struct.field("intended_sla_blockers", &self.intended_sla_blockers);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug
    for super::InterconnectAttachmentGroupConfiguredAvailabilitySLAIntendedSlaBlockers
{
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct(
            "InterconnectAttachmentGroupConfiguredAvailabilitySLAIntendedSlaBlockers",
        );
        debug_struct.field("attachments", &self.attachments);
        debug_struct.field("blocker_type", &self.blocker_type);
        debug_struct.field("documentation_link", &self.documentation_link);
        debug_struct.field("explanation", &self.explanation);
        debug_struct.field("metros", &self.metros);
        debug_struct.field("regions", &self.regions);
        debug_struct.field("zones", &self.zones);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::InterconnectAttachmentGroupIntent {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectAttachmentGroupIntent");
        debug_struct.field("availability_sla", &self.availability_sla);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::InterconnectAttachmentGroupLogicalStructure {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectAttachmentGroupLogicalStructure");
        debug_struct.field("regions", &self.regions);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::InterconnectAttachmentGroupLogicalStructureRegion {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectAttachmentGroupLogicalStructureRegion");
        debug_struct.field("metros", &self.metros);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::InterconnectAttachmentGroupLogicalStructureRegionMetro {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("InterconnectAttachmentGroupLogicalStructureRegionMetro");
        debug_struct.field("facilities", &self.facilities);
        debug_struct.field("metro", &self.metro);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::InterconnectAttachmentGroupLogicalStructureRegionMetroFacility {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("InterconnectAttachmentGroupLogicalStructureRegionMetroFacility");
        debug_struct.field("facility", &self.facility);
        debug_struct.field("zones", &self.zones);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::InterconnectAttachmentGroupLogicalStructureRegionMetroFacilityZone {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("InterconnectAttachmentGroupLogicalStructureRegionMetroFacilityZone");
        debug_struct.field("attachments", &self.attachments);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::InterconnectAttachmentGroupsGetOperationalStatusResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("InterconnectAttachmentGroupsGetOperationalStatusResponse");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("result", &self.result);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::InterconnectAttachmentGroupsListResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectAttachmentGroupsListResponse");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::interconnect_attachment_groups_list_response::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::interconnect_attachment_groups_list_response::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::InterconnectAttachmentGroupsOperationalStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectAttachmentGroupsOperationalStatus");
        debug_struct.field("attachment_statuses", &self.attachment_statuses);
        debug_struct.field("configured", &self.configured);
        debug_struct.field("group_status", &self.group_status);
        debug_struct.field("intent", &self.intent);
        debug_struct.field("operational", &self.operational);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::InterconnectAttachmentGroupsOperationalStatusAttachmentStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("InterconnectAttachmentGroupsOperationalStatusAttachmentStatus");
        debug_struct.field("admin_enabled", &self.admin_enabled);
        debug_struct.field("attachment", &self.attachment);
        debug_struct.field("is_active", &self.is_active);
        debug_struct.field("status", &self.status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::InterconnectAttachmentList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectAttachmentList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::interconnect_attachment_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::interconnect_attachment_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::InterconnectAttachmentPartnerMetadata {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectAttachmentPartnerMetadata");
        debug_struct.field("interconnect_name", &self.interconnect_name);
        debug_struct.field("partner_name", &self.partner_name);
        debug_struct.field("portal_url", &self.portal_url);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::InterconnectAttachmentPrivateInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectAttachmentPrivateInfo");
        debug_struct.field("tag8021q", &self.tag8021q);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::InterconnectAttachmentsScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectAttachmentsScopedList");
        debug_struct.field("interconnect_attachments", &self.interconnect_attachments);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::interconnect_attachments_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::interconnect_attachments_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::InterconnectCircuitInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectCircuitInfo");
        debug_struct.field("customer_demarc_id", &self.customer_demarc_id);
        debug_struct.field("google_circuit_id", &self.google_circuit_id);
        debug_struct.field("google_demarc_id", &self.google_demarc_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "interconnect-groups", feature = "interconnects",))]
impl std::fmt::Debug for super::InterconnectDiagnostics {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectDiagnostics");
        debug_struct.field("arp_caches", &self.arp_caches);
        debug_struct.field("bundle_aggregation_type", &self.bundle_aggregation_type);
        debug_struct.field("bundle_operational_status", &self.bundle_operational_status);
        debug_struct.field("links", &self.links);
        debug_struct.field("mac_address", &self.mac_address);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "interconnect-groups", feature = "interconnects",))]
impl std::fmt::Debug for super::InterconnectDiagnosticsARPEntry {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectDiagnosticsARPEntry");
        debug_struct.field("ip_address", &self.ip_address);
        debug_struct.field("mac_address", &self.mac_address);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "interconnect-groups", feature = "interconnects",))]
impl std::fmt::Debug for super::InterconnectDiagnosticsLinkLACPStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectDiagnosticsLinkLACPStatus");
        debug_struct.field("google_system_id", &self.google_system_id);
        debug_struct.field("neighbor_system_id", &self.neighbor_system_id);
        debug_struct.field("state", &self.state);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "interconnect-groups", feature = "interconnects",))]
impl std::fmt::Debug for super::InterconnectDiagnosticsLinkOpticalPower {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectDiagnosticsLinkOpticalPower");
        debug_struct.field("state", &self.state);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "interconnect-groups", feature = "interconnects",))]
impl std::fmt::Debug for super::InterconnectDiagnosticsLinkStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectDiagnosticsLinkStatus");
        debug_struct.field("arp_caches", &self.arp_caches);
        debug_struct.field("circuit_id", &self.circuit_id);
        debug_struct.field("google_demarc", &self.google_demarc);
        debug_struct.field("lacp_status", &self.lacp_status);
        debug_struct.field("macsec", &self.macsec);
        debug_struct.field("operational_status", &self.operational_status);
        debug_struct.field("receiving_optical_power", &self.receiving_optical_power);
        debug_struct.field(
            "transmitting_optical_power",
            &self.transmitting_optical_power,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "interconnect-groups", feature = "interconnects",))]
impl std::fmt::Debug for super::InterconnectDiagnosticsMacsecStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectDiagnosticsMacsecStatus");
        debug_struct.field("ckn", &self.ckn);
        debug_struct.field("operational", &self.operational);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::InterconnectGroup {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectGroup");
        debug_struct.field("configured", &self.configured);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("intent", &self.intent);
        debug_struct.field("interconnects", &self.interconnects);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("physical_structure", &self.physical_structure);
        debug_struct.field("self_link", &self.self_link);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::InterconnectGroupConfigured {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectGroupConfigured");
        debug_struct.field("topology_capability", &self.topology_capability);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::InterconnectGroupConfiguredTopologyCapability {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectGroupConfiguredTopologyCapability");
        debug_struct.field(
            "intended_capability_blockers",
            &self.intended_capability_blockers,
        );
        debug_struct.field("supported_sla", &self.supported_sla);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug
    for super::InterconnectGroupConfiguredTopologyCapabilityIntendedCapabilityBlockers
{
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct(
            "InterconnectGroupConfiguredTopologyCapabilityIntendedCapabilityBlockers",
        );
        debug_struct.field("blocker_type", &self.blocker_type);
        debug_struct.field("documentation_link", &self.documentation_link);
        debug_struct.field("explanation", &self.explanation);
        debug_struct.field("facilities", &self.facilities);
        debug_struct.field("interconnects", &self.interconnects);
        debug_struct.field("metros", &self.metros);
        debug_struct.field("zones", &self.zones);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::InterconnectGroupIntent {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectGroupIntent");
        debug_struct.field("topology_capability", &self.topology_capability);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::InterconnectGroupInterconnect {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectGroupInterconnect");
        debug_struct.field("interconnect", &self.interconnect);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::InterconnectGroupPhysicalStructure {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectGroupPhysicalStructure");
        debug_struct.field("metros", &self.metros);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::InterconnectGroupPhysicalStructureMetros {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectGroupPhysicalStructureMetros");
        debug_struct.field("facilities", &self.facilities);
        debug_struct.field("metro", &self.metro);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::InterconnectGroupPhysicalStructureMetrosFacilities {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectGroupPhysicalStructureMetrosFacilities");
        debug_struct.field("facility", &self.facility);
        debug_struct.field("zones", &self.zones);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::InterconnectGroupPhysicalStructureMetrosFacilitiesZones {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("InterconnectGroupPhysicalStructureMetrosFacilitiesZones");
        debug_struct.field("interconnects", &self.interconnects);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::InterconnectGroupsCreateMembers {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectGroupsCreateMembers");
        debug_struct.field("intent_mismatch_behavior", &self.intent_mismatch_behavior);
        debug_struct.field("interconnects", &self.interconnects);
        debug_struct.field("template_interconnect", &self.template_interconnect);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::InterconnectGroupsCreateMembersInterconnectInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectGroupsCreateMembersInterconnectInput");
        debug_struct.field("admin_enabled", &self.admin_enabled);
        debug_struct.field("customer_name", &self.customer_name);
        debug_struct.field("description", &self.description);
        debug_struct.field("facility", &self.facility);
        debug_struct.field("interconnect_type", &self.interconnect_type);
        debug_struct.field("link_type", &self.link_type);
        debug_struct.field("name", &self.name);
        debug_struct.field("noc_contact_email", &self.noc_contact_email);
        debug_struct.field("remote_location", &self.remote_location);
        debug_struct.field("requested_features", &self.requested_features);
        debug_struct.field("requested_link_count", &self.requested_link_count);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::InterconnectGroupsCreateMembersRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectGroupsCreateMembersRequest");
        debug_struct.field("request", &self.request);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::InterconnectGroupsGetOperationalStatusResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectGroupsGetOperationalStatusResponse");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("result", &self.result);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::InterconnectGroupsListResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectGroupsListResponse");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::interconnect_groups_list_response::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::interconnect_groups_list_response::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::InterconnectGroupsOperationalStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectGroupsOperationalStatus");
        debug_struct.field("configured", &self.configured);
        debug_struct.field("group_status", &self.group_status);
        debug_struct.field("intent", &self.intent);
        debug_struct.field("interconnect_statuses", &self.interconnect_statuses);
        debug_struct.field("operational", &self.operational);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::InterconnectGroupsOperationalStatusInterconnectStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("InterconnectGroupsOperationalStatusInterconnectStatus");
        debug_struct.field("admin_enabled", &self.admin_enabled);
        debug_struct.field("diagnostics", &self.diagnostics);
        debug_struct.field("interconnect", &self.interconnect);
        debug_struct.field("is_active", &self.is_active);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::InterconnectList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::interconnect_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::interconnect_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-locations")]
impl std::fmt::Debug for super::InterconnectLocation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectLocation");
        debug_struct.field("address", &self.address);
        debug_struct.field("availability_zone", &self.availability_zone);
        debug_struct.field("available_features", &self.available_features);
        debug_struct.field("available_link_types", &self.available_link_types);
        debug_struct.field("city", &self.city);
        debug_struct.field("continent", &self.continent);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field(
            "cross_site_interconnect_infos",
            &self.cross_site_interconnect_infos,
        );
        debug_struct.field("description", &self.description);
        debug_struct.field("facility_provider", &self.facility_provider);
        debug_struct.field(
            "facility_provider_facility_id",
            &self.facility_provider_facility_id,
        );
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("peeringdb_facility_id", &self.peeringdb_facility_id);
        debug_struct.field("region_infos", &self.region_infos);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field(
            "single_region_production_critical_peer_locations",
            &self.single_region_production_critical_peer_locations,
        );
        debug_struct.field("status", &self.status);
        debug_struct.field("supports_pzs", &self.supports_pzs);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-locations")]
impl std::fmt::Debug for super::InterconnectLocationCrossSiteInterconnectInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectLocationCrossSiteInterconnectInfo");
        debug_struct.field("city", &self.city);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-locations")]
impl std::fmt::Debug for super::InterconnectLocationList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectLocationList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-locations")]
impl std::fmt::Debug for super::interconnect_location_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-locations")]
impl std::fmt::Debug for super::interconnect_location_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-locations")]
impl std::fmt::Debug for super::InterconnectLocationRegionInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectLocationRegionInfo");
        debug_struct.field("expected_rtt_ms", &self.expected_rtt_ms);
        debug_struct.field("location_presence", &self.location_presence);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::InterconnectMacsec {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectMacsec");
        debug_struct.field("fail_open", &self.fail_open);
        debug_struct.field("pre_shared_keys", &self.pre_shared_keys);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::InterconnectMacsecConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectMacsecConfig");
        debug_struct.field("pre_shared_keys", &self.pre_shared_keys);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::InterconnectMacsecConfigPreSharedKey {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectMacsecConfigPreSharedKey");
        debug_struct.field("cak", &self.cak);
        debug_struct.field("ckn", &self.ckn);
        debug_struct.field("name", &self.name);
        debug_struct.field("start_time", &self.start_time);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::InterconnectMacsecPreSharedKey {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectMacsecPreSharedKey");
        debug_struct.field("name", &self.name);
        debug_struct.field("start_time", &self.start_time);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::InterconnectOutageNotification {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectOutageNotification");
        debug_struct.field("affected_circuits", &self.affected_circuits);
        debug_struct.field("description", &self.description);
        debug_struct.field("end_time", &self.end_time);
        debug_struct.field("issue_type", &self.issue_type);
        debug_struct.field("name", &self.name);
        debug_struct.field("source", &self.source);
        debug_struct.field("start_time", &self.start_time);
        debug_struct.field("state", &self.state);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-remote-locations")]
impl std::fmt::Debug for super::InterconnectRemoteLocation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectRemoteLocation");
        debug_struct.field("address", &self.address);
        debug_struct.field(
            "attachment_configuration_constraints",
            &self.attachment_configuration_constraints,
        );
        debug_struct.field("city", &self.city);
        debug_struct.field("constraints", &self.constraints);
        debug_struct.field("continent", &self.continent);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("facility_provider", &self.facility_provider);
        debug_struct.field(
            "facility_provider_facility_id",
            &self.facility_provider_facility_id,
        );
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("lacp", &self.lacp);
        debug_struct.field("max_lag_size_100_gbps", &self.max_lag_size_100_gbps);
        debug_struct.field("max_lag_size_10_gbps", &self.max_lag_size_10_gbps);
        debug_struct.field("max_lag_size_400_gbps", &self.max_lag_size_400_gbps);
        debug_struct.field("name", &self.name);
        debug_struct.field("peeringdb_facility_id", &self.peeringdb_facility_id);
        debug_struct.field("permitted_connections", &self.permitted_connections);
        debug_struct.field("remote_service", &self.remote_service);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("status", &self.status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-remote-locations")]
impl std::fmt::Debug for super::InterconnectRemoteLocationConstraints {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectRemoteLocationConstraints");
        debug_struct.field("port_pair_remote_location", &self.port_pair_remote_location);
        debug_struct.field("port_pair_vlan", &self.port_pair_vlan);
        debug_struct.field("subnet_length_range", &self.subnet_length_range);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-remote-locations")]
impl std::fmt::Debug for super::InterconnectRemoteLocationConstraintsSubnetLengthRange {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("InterconnectRemoteLocationConstraintsSubnetLengthRange");
        debug_struct.field("max", &self.max);
        debug_struct.field("min", &self.min);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-remote-locations")]
impl std::fmt::Debug for super::InterconnectRemoteLocationList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectRemoteLocationList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-remote-locations")]
impl std::fmt::Debug for super::interconnect_remote_location_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-remote-locations")]
impl std::fmt::Debug for super::interconnect_remote_location_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-remote-locations")]
impl std::fmt::Debug for super::InterconnectRemoteLocationPermittedConnections {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectRemoteLocationPermittedConnections");
        debug_struct.field("interconnect_location", &self.interconnect_location);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::InterconnectsGetDiagnosticsResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectsGetDiagnosticsResponse");
        debug_struct.field("result", &self.result);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::InterconnectsGetMacsecConfigResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InterconnectsGetMacsecConfigResponse");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("result", &self.result);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "licenses")]
impl std::fmt::Debug for super::License {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("License");
        debug_struct.field(
            "allowed_replacement_licenses",
            &self.allowed_replacement_licenses,
        );
        debug_struct.field("appendable_to_disk", &self.appendable_to_disk);
        debug_struct.field("charges_use_fee", &self.charges_use_fee);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("incompatible_licenses", &self.incompatible_licenses);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("license_code", &self.license_code);
        debug_struct.field("minimum_retention", &self.minimum_retention);
        debug_struct.field("multi_tenant_only", &self.multi_tenant_only);
        debug_struct.field("name", &self.name);
        debug_struct.field("os_license", &self.os_license);
        debug_struct.field("removable_from_disk", &self.removable_from_disk);
        debug_struct.field(
            "required_coattached_licenses",
            &self.required_coattached_licenses,
        );
        debug_struct.field("resource_requirements", &self.resource_requirements);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("self_link_with_id", &self.self_link_with_id);
        debug_struct.field("sole_tenant_only", &self.sole_tenant_only);
        debug_struct.field("transferable", &self.transferable);
        debug_struct.field("update_timestamp", &self.update_timestamp);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "license-codes")]
impl std::fmt::Debug for super::LicenseCode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("LicenseCode");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("license_alias", &self.license_alias);
        debug_struct.field("name", &self.name);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("state", &self.state);
        debug_struct.field("transferable", &self.transferable);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "license-codes")]
impl std::fmt::Debug for super::LicenseCodeLicenseAlias {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("LicenseCodeLicenseAlias");
        debug_struct.field("description", &self.description);
        debug_struct.field("self_link", &self.self_link);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::LicenseResourceCommitment {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("LicenseResourceCommitment");
        debug_struct.field("amount", &self.amount);
        debug_struct.field("cores_per_license", &self.cores_per_license);
        debug_struct.field("license", &self.license);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "licenses")]
impl std::fmt::Debug for super::LicenseResourceRequirements {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("LicenseResourceRequirements");
        debug_struct.field("min_guest_cpu_count", &self.min_guest_cpu_count);
        debug_struct.field("min_memory_mb", &self.min_memory_mb);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "licenses")]
impl std::fmt::Debug for super::LicensesListResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("LicensesListResponse");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "licenses")]
impl std::fmt::Debug for super::licenses_list_response::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "licenses")]
impl std::fmt::Debug for super::licenses_list_response::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "node-groups", feature = "node-templates",))]
impl std::fmt::Debug for super::LocalDisk {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("LocalDisk");
        debug_struct.field("disk_count", &self.disk_count);
        debug_struct.field("disk_size_gb", &self.disk_size_gb);
        debug_struct.field("disk_type", &self.disk_type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "autoscalers",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "cross-site-networks",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "firewalls",
    feature = "forwarding-rules",
    feature = "future-reservations",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "global-network-endpoint-groups",
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "global-public-delegated-prefixes",
    feature = "health-checks",
    feature = "http-health-checks",
    feature = "https-health-checks",
    feature = "images",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "instance-settings",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-attachments",
    feature = "interconnect-groups",
    feature = "interconnects",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-edge-security-services",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "node-groups",
    feature = "node-templates",
    feature = "organization-security-policies",
    feature = "packet-mirrorings",
    feature = "preview-features",
    feature = "projects",
    feature = "public-advertised-prefixes",
    feature = "public-delegated-prefixes",
    feature = "region-autoscalers",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-disks",
    feature = "region-health-check-services",
    feature = "region-health-checks",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-instant-snapshots",
    feature = "region-network-endpoint-groups",
    feature = "region-network-firewall-policies",
    feature = "region-notification-endpoints",
    feature = "region-operations",
    feature = "region-security-policies",
    feature = "region-ssl-certificates",
    feature = "region-ssl-policies",
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "region-target-tcp-proxies",
    feature = "region-url-maps",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
    feature = "resource-policies",
    feature = "routers",
    feature = "routes",
    feature = "security-policies",
    feature = "service-attachments",
    feature = "snapshot-settings",
    feature = "snapshots",
    feature = "ssl-certificates",
    feature = "ssl-policies",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-grpc-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
    feature = "target-instances",
    feature = "target-pools",
    feature = "target-ssl-proxies",
    feature = "target-tcp-proxies",
    feature = "target-vpn-gateways",
    feature = "url-maps",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
    feature = "wire-groups",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::LocalizedMessage {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("LocalizedMessage");
        debug_struct.field("locale", &self.locale);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instances", feature = "region-instances",))]
impl std::fmt::Debug for super::LocationPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("LocationPolicy");
        debug_struct.field("locations", &self.locations);
        debug_struct.field("target_shape", &self.target_shape);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instances", feature = "region-instances",))]
impl std::fmt::Debug for super::LocationPolicyLocation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("LocationPolicyLocation");
        debug_struct.field("constraints", &self.constraints);
        debug_struct.field("preference", &self.preference);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instances", feature = "region-instances",))]
impl std::fmt::Debug for super::LocationPolicyLocationConstraints {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("LocationPolicyLocationConstraints");
        debug_struct.field("max_count", &self.max_count);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-images")]
impl std::fmt::Debug for super::MachineImage {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("MachineImage");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("guest_flush", &self.guest_flush);
        debug_struct.field("id", &self.id);
        debug_struct.field("instance_properties", &self.instance_properties);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        debug_struct.field(
            "machine_image_encryption_key",
            &self.machine_image_encryption_key,
        );
        debug_struct.field("name", &self.name);
        debug_struct.field("satisfies_pzi", &self.satisfies_pzi);
        debug_struct.field("satisfies_pzs", &self.satisfies_pzs);
        debug_struct.field("saved_disks", &self.saved_disks);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field(
            "source_disk_encryption_keys",
            &self.source_disk_encryption_keys,
        );
        debug_struct.field("source_instance", &self.source_instance);
        debug_struct.field(
            "source_instance_properties",
            &self.source_instance_properties,
        );
        debug_struct.field("status", &self.status);
        debug_struct.field("storage_locations", &self.storage_locations);
        debug_struct.field("total_storage_bytes", &self.total_storage_bytes);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-images")]
impl std::fmt::Debug for super::MachineImageList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("MachineImageList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-images")]
impl std::fmt::Debug for super::machine_image_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-images")]
impl std::fmt::Debug for super::machine_image_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-types")]
impl std::fmt::Debug for super::MachineType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("MachineType");
        debug_struct.field("accelerators", &self.accelerators);
        debug_struct.field("architecture", &self.architecture);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("deprecated", &self.deprecated);
        debug_struct.field("description", &self.description);
        debug_struct.field("guest_cpus", &self.guest_cpus);
        debug_struct.field("id", &self.id);
        debug_struct.field("image_space_gb", &self.image_space_gb);
        debug_struct.field("is_shared_cpu", &self.is_shared_cpu);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("maximum_persistent_disks", &self.maximum_persistent_disks);
        debug_struct.field(
            "maximum_persistent_disks_size_gb",
            &self.maximum_persistent_disks_size_gb,
        );
        debug_struct.field("memory_mb", &self.memory_mb);
        debug_struct.field("name", &self.name);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-types")]
impl std::fmt::Debug for super::machine_type::Accelerators {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Accelerators");
        debug_struct.field("guest_accelerator_count", &self.guest_accelerator_count);
        debug_struct.field("guest_accelerator_type", &self.guest_accelerator_type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-types")]
impl std::fmt::Debug for super::MachineTypeAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("MachineTypeAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-types")]
impl std::fmt::Debug for super::machine_type_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-types")]
impl std::fmt::Debug for super::machine_type_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-types")]
impl std::fmt::Debug for super::MachineTypeList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("MachineTypeList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-types")]
impl std::fmt::Debug for super::machine_type_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-types")]
impl std::fmt::Debug for super::machine_type_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-types")]
impl std::fmt::Debug for super::MachineTypesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("MachineTypesScopedList");
        debug_struct.field("machine_types", &self.machine_types);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-types")]
impl std::fmt::Debug for super::machine_types_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-types")]
impl std::fmt::Debug for super::machine_types_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::ManagedInstance {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ManagedInstance");
        debug_struct.field("current_action", &self.current_action);
        debug_struct.field("id", &self.id);
        debug_struct.field("instance", &self.instance);
        debug_struct.field("instance_health", &self.instance_health);
        debug_struct.field("instance_status", &self.instance_status);
        debug_struct.field("last_attempt", &self.last_attempt);
        debug_struct.field("name", &self.name);
        debug_struct.field(
            "preserved_state_from_config",
            &self.preserved_state_from_config,
        );
        debug_struct.field(
            "preserved_state_from_policy",
            &self.preserved_state_from_policy,
        );
        debug_struct.field(
            "properties_from_flexibility_policy",
            &self.properties_from_flexibility_policy,
        );
        debug_struct.field("version", &self.version);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::ManagedInstanceInstanceHealth {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ManagedInstanceInstanceHealth");
        debug_struct.field("detailed_health_state", &self.detailed_health_state);
        debug_struct.field("health_check", &self.health_check);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::ManagedInstanceLastAttempt {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ManagedInstanceLastAttempt");
        debug_struct.field("errors", &self.errors);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::managed_instance_last_attempt::Errors {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Errors");
        debug_struct.field("errors", &self.errors);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::managed_instance_last_attempt::errors::Errors {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Errors");
        debug_struct.field("code", &self.code);
        debug_struct.field("error_details", &self.error_details);
        debug_struct.field("location", &self.location);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::managed_instance_last_attempt::errors::errors::ErrorDetails {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ErrorDetails");
        debug_struct.field("error_info", &self.error_info);
        debug_struct.field("help", &self.help);
        debug_struct.field("localized_message", &self.localized_message);
        debug_struct.field("quota_info", &self.quota_info);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::ManagedInstancePropertiesFromFlexibilityPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ManagedInstancePropertiesFromFlexibilityPolicy");
        debug_struct.field("machine_type", &self.machine_type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::ManagedInstanceVersion {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ManagedInstanceVersion");
        debug_struct.field("instance_template", &self.instance_template);
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "projects",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::Metadata {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Metadata");
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "projects",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::metadata::Items {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Items");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "forwarding-rules",
    feature = "global-forwarding-rules",
    feature = "region-url-maps",
    feature = "url-maps",
))]
impl std::fmt::Debug for super::MetadataFilter {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("MetadataFilter");
        debug_struct.field("filter_labels", &self.filter_labels);
        debug_struct.field("filter_match_criteria", &self.filter_match_criteria);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "forwarding-rules",
    feature = "global-forwarding-rules",
    feature = "region-url-maps",
    feature = "url-maps",
))]
impl std::fmt::Debug for super::MetadataFilterLabelMatch {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("MetadataFilterLabelMatch");
        debug_struct.field("name", &self.name);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
))]
impl std::fmt::Debug for super::NamedPort {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NamedPort");
        debug_struct.field("name", &self.name);
        debug_struct.field("port", &self.port);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::NatIpInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NatIpInfo");
        debug_struct.field("nat_ip_info_mappings", &self.nat_ip_info_mappings);
        debug_struct.field("nat_name", &self.nat_name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::NatIpInfoNatIpInfoMapping {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NatIpInfoNatIpInfoMapping");
        debug_struct.field("mode", &self.mode);
        debug_struct.field("nat_ip", &self.nat_ip);
        debug_struct.field("usage", &self.usage);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::NatIpInfoResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NatIpInfoResponse");
        debug_struct.field("result", &self.result);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::Network {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Network");
        debug_struct.field("i_pv_4_range", &self.i_pv_4_range);
        debug_struct.field("auto_create_subnetworks", &self.auto_create_subnetworks);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("enable_ula_internal_ipv_6", &self.enable_ula_internal_ipv_6);
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("gateway_i_pv_4", &self.gateway_i_pv_4);
        debug_struct.field("id", &self.id);
        debug_struct.field("internal_ipv_6_range", &self.internal_ipv_6_range);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("mtu", &self.mtu);
        debug_struct.field("name", &self.name);
        debug_struct.field(
            "network_firewall_policy_enforcement_order",
            &self.network_firewall_policy_enforcement_order,
        );
        debug_struct.field("network_profile", &self.network_profile);
        debug_struct.field("params", &self.params);
        debug_struct.field("peerings", &self.peerings);
        debug_struct.field("routing_config", &self.routing_config);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("self_link_with_id", &self.self_link_with_id);
        debug_struct.field("subnetworks", &self.subnetworks);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::NetworkAttachment {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkAttachment");
        debug_struct.field("connection_endpoints", &self.connection_endpoints);
        debug_struct.field("connection_preference", &self.connection_preference);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("network", &self.network);
        debug_struct.field("producer_accept_lists", &self.producer_accept_lists);
        debug_struct.field("producer_reject_lists", &self.producer_reject_lists);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("self_link_with_id", &self.self_link_with_id);
        debug_struct.field("subnetworks", &self.subnetworks);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::NetworkAttachmentAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkAttachmentAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::network_attachment_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::network_attachment_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::NetworkAttachmentConnectedEndpoint {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkAttachmentConnectedEndpoint");
        debug_struct.field("ip_address", &self.ip_address);
        debug_struct.field("ipv_6_address", &self.ipv_6_address);
        debug_struct.field("project_id_or_num", &self.project_id_or_num);
        debug_struct.field("secondary_ip_cidr_ranges", &self.secondary_ip_cidr_ranges);
        debug_struct.field("status", &self.status);
        debug_struct.field("subnetwork", &self.subnetwork);
        debug_struct.field("subnetwork_cidr_range", &self.subnetwork_cidr_range);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::NetworkAttachmentList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkAttachmentList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::network_attachment_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::network_attachment_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::NetworkAttachmentsScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkAttachmentsScopedList");
        debug_struct.field("network_attachments", &self.network_attachments);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::network_attachments_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::network_attachments_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-edge-security-services")]
impl std::fmt::Debug for super::NetworkEdgeSecurityService {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkEdgeSecurityService");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("region", &self.region);
        debug_struct.field("security_policy", &self.security_policy);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("self_link_with_id", &self.self_link_with_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-edge-security-services")]
impl std::fmt::Debug for super::NetworkEdgeSecurityServiceAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkEdgeSecurityServiceAggregatedList");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-edge-security-services")]
impl std::fmt::Debug for super::network_edge_security_service_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-edge-security-services")]
impl std::fmt::Debug for super::network_edge_security_service_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-edge-security-services")]
impl std::fmt::Debug for super::NetworkEdgeSecurityServicesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkEdgeSecurityServicesScopedList");
        debug_struct.field(
            "network_edge_security_services",
            &self.network_edge_security_services,
        );
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-edge-security-services")]
impl std::fmt::Debug for super::network_edge_security_services_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-edge-security-services")]
impl std::fmt::Debug for super::network_edge_security_services_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
))]
impl std::fmt::Debug for super::NetworkEndpoint {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkEndpoint");
        debug_struct.field("annotations", &self.annotations);
        debug_struct.field("client_destination_port", &self.client_destination_port);
        debug_struct.field("fqdn", &self.fqdn);
        debug_struct.field("instance", &self.instance);
        debug_struct.field("ip_address", &self.ip_address);
        debug_struct.field("ipv_6_address", &self.ipv_6_address);
        debug_struct.field("port", &self.port);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
))]
impl std::fmt::Debug for super::NetworkEndpointGroup {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkEndpointGroup");
        debug_struct.field("annotations", &self.annotations);
        debug_struct.field("app_engine", &self.app_engine);
        debug_struct.field("cloud_function", &self.cloud_function);
        debug_struct.field("cloud_run", &self.cloud_run);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("default_port", &self.default_port);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("network", &self.network);
        debug_struct.field("network_endpoint_type", &self.network_endpoint_type);
        debug_struct.field("psc_data", &self.psc_data);
        debug_struct.field("psc_target_service", &self.psc_target_service);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("size", &self.size);
        debug_struct.field("subnetwork", &self.subnetwork);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::NetworkEndpointGroupAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkEndpointGroupAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::network_endpoint_group_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::network_endpoint_group_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
))]
impl std::fmt::Debug for super::NetworkEndpointGroupAppEngine {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkEndpointGroupAppEngine");
        debug_struct.field("service", &self.service);
        debug_struct.field("url_mask", &self.url_mask);
        debug_struct.field("version", &self.version);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
))]
impl std::fmt::Debug for super::NetworkEndpointGroupCloudFunction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkEndpointGroupCloudFunction");
        debug_struct.field("function", &self.function);
        debug_struct.field("url_mask", &self.url_mask);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
))]
impl std::fmt::Debug for super::NetworkEndpointGroupCloudRun {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkEndpointGroupCloudRun");
        debug_struct.field("service", &self.service);
        debug_struct.field("tag", &self.tag);
        debug_struct.field("url_mask", &self.url_mask);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
))]
impl std::fmt::Debug for super::NetworkEndpointGroupList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkEndpointGroupList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
))]
impl std::fmt::Debug for super::network_endpoint_group_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
))]
impl std::fmt::Debug for super::network_endpoint_group_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
))]
impl std::fmt::Debug for super::NetworkEndpointGroupPscData {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkEndpointGroupPscData");
        debug_struct.field("consumer_psc_address", &self.consumer_psc_address);
        debug_struct.field("producer_port", &self.producer_port);
        debug_struct.field("psc_connection_id", &self.psc_connection_id);
        debug_struct.field("psc_connection_status", &self.psc_connection_status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::NetworkEndpointGroupsAttachEndpointsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkEndpointGroupsAttachEndpointsRequest");
        debug_struct.field("network_endpoints", &self.network_endpoints);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::NetworkEndpointGroupsDetachEndpointsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkEndpointGroupsDetachEndpointsRequest");
        debug_struct.field("network_endpoints", &self.network_endpoints);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::NetworkEndpointGroupsListEndpointsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkEndpointGroupsListEndpointsRequest");
        debug_struct.field("health_status", &self.health_status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
))]
impl std::fmt::Debug for super::NetworkEndpointGroupsListNetworkEndpoints {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkEndpointGroupsListNetworkEndpoints");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
))]
impl std::fmt::Debug for super::network_endpoint_groups_list_network_endpoints::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
))]
impl std::fmt::Debug for super::network_endpoint_groups_list_network_endpoints::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::NetworkEndpointGroupsScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkEndpointGroupsScopedList");
        debug_struct.field("network_endpoint_groups", &self.network_endpoint_groups);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::network_endpoint_groups_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::network_endpoint_groups_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-network-endpoint-groups",
    feature = "network-endpoint-groups",
    feature = "region-network-endpoint-groups",
))]
impl std::fmt::Debug for super::NetworkEndpointWithHealthStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkEndpointWithHealthStatus");
        debug_struct.field("healths", &self.healths);
        debug_struct.field("network_endpoint", &self.network_endpoint);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::NetworkFirewallPolicyAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkFirewallPolicyAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policy_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policy_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::NetworkInterface {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkInterface");
        debug_struct.field("access_configs", &self.access_configs);
        debug_struct.field("alias_ip_ranges", &self.alias_ip_ranges);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field(
            "internal_ipv_6_prefix_length",
            &self.internal_ipv_6_prefix_length,
        );
        debug_struct.field("ipv_6_access_configs", &self.ipv_6_access_configs);
        debug_struct.field("ipv_6_access_type", &self.ipv_6_access_type);
        debug_struct.field("ipv_6_address", &self.ipv_6_address);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("network", &self.network);
        debug_struct.field("network_attachment", &self.network_attachment);
        debug_struct.field("network_ip", &self.network_ip);
        debug_struct.field("nic_type", &self.nic_type);
        debug_struct.field("parent_nic_name", &self.parent_nic_name);
        debug_struct.field("queue_count", &self.queue_count);
        debug_struct.field("stack_type", &self.stack_type);
        debug_struct.field("subnetwork", &self.subnetwork);
        debug_struct.field("vlan", &self.vlan);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::NetworkList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::network_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::network_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::NetworkParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkParams");
        debug_struct.field("resource_manager_tags", &self.resource_manager_tags);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::NetworkPeering {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkPeering");
        debug_struct.field("auto_create_routes", &self.auto_create_routes);
        debug_struct.field("connection_status", &self.connection_status);
        debug_struct.field("exchange_subnet_routes", &self.exchange_subnet_routes);
        debug_struct.field("export_custom_routes", &self.export_custom_routes);
        debug_struct.field(
            "export_subnet_routes_with_public_ip",
            &self.export_subnet_routes_with_public_ip,
        );
        debug_struct.field("import_custom_routes", &self.import_custom_routes);
        debug_struct.field(
            "import_subnet_routes_with_public_ip",
            &self.import_subnet_routes_with_public_ip,
        );
        debug_struct.field("name", &self.name);
        debug_struct.field("network", &self.network);
        debug_struct.field("peer_mtu", &self.peer_mtu);
        debug_struct.field("stack_type", &self.stack_type);
        debug_struct.field("state", &self.state);
        debug_struct.field("state_details", &self.state_details);
        debug_struct.field("update_strategy", &self.update_strategy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::NetworkPeeringConnectionStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkPeeringConnectionStatus");
        debug_struct.field("consensus_state", &self.consensus_state);
        debug_struct.field("traffic_configuration", &self.traffic_configuration);
        debug_struct.field("update_strategy", &self.update_strategy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::NetworkPeeringConnectionStatusConsensusState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkPeeringConnectionStatusConsensusState");
        debug_struct.field("delete_status", &self.delete_status);
        debug_struct.field("update_status", &self.update_status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::NetworkPeeringConnectionStatusTrafficConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkPeeringConnectionStatusTrafficConfiguration");
        debug_struct.field(
            "export_custom_routes_to_peer",
            &self.export_custom_routes_to_peer,
        );
        debug_struct.field(
            "export_subnet_routes_with_public_ip_to_peer",
            &self.export_subnet_routes_with_public_ip_to_peer,
        );
        debug_struct.field(
            "import_custom_routes_from_peer",
            &self.import_custom_routes_from_peer,
        );
        debug_struct.field(
            "import_subnet_routes_with_public_ip_from_peer",
            &self.import_subnet_routes_with_public_ip_from_peer,
        );
        debug_struct.field("stack_type", &self.stack_type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::NetworkPerformanceConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkPerformanceConfig");
        debug_struct.field(
            "total_egress_bandwidth_tier",
            &self.total_egress_bandwidth_tier,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-profiles")]
impl std::fmt::Debug for super::NetworkProfile {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkProfile");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("features", &self.features);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("location", &self.location);
        debug_struct.field("name", &self.name);
        debug_struct.field("profile_type", &self.profile_type);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("self_link_with_id", &self.self_link_with_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-profiles")]
impl std::fmt::Debug for super::NetworkProfileLocation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkProfileLocation");
        debug_struct.field("name", &self.name);
        debug_struct.field("scope", &self.scope);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-profiles")]
impl std::fmt::Debug for super::NetworkProfileNetworkFeatures {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkProfileNetworkFeatures");
        debug_struct.field("address_purposes", &self.address_purposes);
        debug_struct.field("allow_alias_ip_ranges", &self.allow_alias_ip_ranges);
        debug_struct.field("allow_auto_mode_subnet", &self.allow_auto_mode_subnet);
        debug_struct.field("allow_class_d_firewalls", &self.allow_class_d_firewalls);
        debug_struct.field("allow_cloud_nat", &self.allow_cloud_nat);
        debug_struct.field("allow_cloud_router", &self.allow_cloud_router);
        debug_struct.field(
            "allow_default_nic_attachment",
            &self.allow_default_nic_attachment,
        );
        debug_struct.field("allow_external_ip_access", &self.allow_external_ip_access);
        debug_struct.field("allow_interconnect", &self.allow_interconnect);
        debug_struct.field("allow_ip_forwarding", &self.allow_ip_forwarding);
        debug_struct.field("allow_load_balancing", &self.allow_load_balancing);
        debug_struct.field(
            "allow_multi_nic_in_same_network",
            &self.allow_multi_nic_in_same_network,
        );
        debug_struct.field("allow_ncc", &self.allow_ncc);
        debug_struct.field("allow_network_migration", &self.allow_network_migration);
        debug_struct.field("allow_packet_mirroring", &self.allow_packet_mirroring);
        debug_struct.field(
            "allow_private_google_access",
            &self.allow_private_google_access,
        );
        debug_struct.field("allow_psc", &self.allow_psc);
        debug_struct.field(
            "allow_same_network_unicast",
            &self.allow_same_network_unicast,
        );
        debug_struct.field("allow_static_routes", &self.allow_static_routes);
        debug_struct.field("allow_sub_interfaces", &self.allow_sub_interfaces);
        debug_struct.field("allow_vpc_peering", &self.allow_vpc_peering);
        debug_struct.field("allow_vpn", &self.allow_vpn);
        debug_struct.field("interface_types", &self.interface_types);
        debug_struct.field("subnet_purposes", &self.subnet_purposes);
        debug_struct.field("subnet_stack_types", &self.subnet_stack_types);
        debug_struct.field("subnetwork_purposes", &self.subnetwork_purposes);
        debug_struct.field("subnetwork_stack_types", &self.subnetwork_stack_types);
        debug_struct.field("unicast", &self.unicast);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-profiles")]
impl std::fmt::Debug for super::NetworkProfileProfileType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkProfileProfileType");
        debug_struct.field("network_type", &self.network_type);
        debug_struct.field("rdma_subtype", &self.rdma_subtype);
        debug_struct.field("ull_subtype", &self.ull_subtype);
        debug_struct.field("vpc_subtype", &self.vpc_subtype);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-profiles")]
impl std::fmt::Debug for super::NetworkProfilesListResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkProfilesListResponse");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-profiles")]
impl std::fmt::Debug for super::network_profiles_list_response::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-profiles")]
impl std::fmt::Debug for super::network_profiles_list_response::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::NetworkRoutingConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworkRoutingConfig");
        debug_struct.field("bgp_always_compare_med", &self.bgp_always_compare_med);
        debug_struct.field(
            "bgp_best_path_selection_mode",
            &self.bgp_best_path_selection_mode,
        );
        debug_struct.field("bgp_inter_region_cost", &self.bgp_inter_region_cost);
        debug_struct.field(
            "effective_bgp_always_compare_med",
            &self.effective_bgp_always_compare_med,
        );
        debug_struct.field(
            "effective_bgp_inter_region_cost",
            &self.effective_bgp_inter_region_cost,
        );
        debug_struct.field("routing_mode", &self.routing_mode);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::NetworksAddPeeringRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworksAddPeeringRequest");
        debug_struct.field("auto_create_routes", &self.auto_create_routes);
        debug_struct.field("name", &self.name);
        debug_struct.field("network_peering", &self.network_peering);
        debug_struct.field("peer_network", &self.peer_network);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::NetworksGetEffectiveFirewallsResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworksGetEffectiveFirewallsResponse");
        debug_struct.field("firewall_policys", &self.firewall_policys);
        debug_struct.field("firewalls", &self.firewalls);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("NetworksGetEffectiveFirewallsResponseEffectiveFirewallPolicy");
        debug_struct.field("display_name", &self.display_name);
        debug_struct.field("name", &self.name);
        debug_struct.field("packet_mirroring_rules", &self.packet_mirroring_rules);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("rules", &self.rules);
        debug_struct.field("short_name", &self.short_name);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::NetworksRemovePeeringRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworksRemovePeeringRequest");
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::NetworksRequestRemovePeeringRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworksRequestRemovePeeringRequest");
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::NetworksUpdatePeeringRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NetworksUpdatePeeringRequest");
        debug_struct.field("network_peering", &self.network_peering);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::NodeGroup {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeGroup");
        debug_struct.field("autoscaling_policy", &self.autoscaling_policy);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("location_hint", &self.location_hint);
        debug_struct.field("maintenance_interval", &self.maintenance_interval);
        debug_struct.field("maintenance_policy", &self.maintenance_policy);
        debug_struct.field("maintenance_window", &self.maintenance_window);
        debug_struct.field("name", &self.name);
        debug_struct.field("node_template", &self.node_template);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("share_settings", &self.share_settings);
        debug_struct.field("size", &self.size);
        debug_struct.field("status", &self.status);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::NodeGroupAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeGroupAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_group_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_group_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::NodeGroupAutoscalingPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeGroupAutoscalingPolicy");
        debug_struct.field("max_nodes", &self.max_nodes);
        debug_struct.field("min_nodes", &self.min_nodes);
        debug_struct.field("mode", &self.mode);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::NodeGroupList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeGroupList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_group_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_group_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::NodeGroupMaintenanceWindow {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeGroupMaintenanceWindow");
        debug_struct.field("maintenance_duration", &self.maintenance_duration);
        debug_struct.field("start_time", &self.start_time);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::NodeGroupNode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeGroupNode");
        debug_struct.field("accelerators", &self.accelerators);
        debug_struct.field("consumed_resources", &self.consumed_resources);
        debug_struct.field("cpu_overcommit_type", &self.cpu_overcommit_type);
        debug_struct.field("disks", &self.disks);
        debug_struct.field("instance_consumption_data", &self.instance_consumption_data);
        debug_struct.field("instances", &self.instances);
        debug_struct.field("name", &self.name);
        debug_struct.field("node_type", &self.node_type);
        debug_struct.field("satisfies_pzs", &self.satisfies_pzs);
        debug_struct.field("server_binding", &self.server_binding);
        debug_struct.field("server_id", &self.server_id);
        debug_struct.field("status", &self.status);
        debug_struct.field("total_resources", &self.total_resources);
        debug_struct.field("upcoming_maintenance", &self.upcoming_maintenance);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::NodeGroupsAddNodesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeGroupsAddNodesRequest");
        debug_struct.field("additional_node_count", &self.additional_node_count);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::NodeGroupsDeleteNodesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeGroupsDeleteNodesRequest");
        debug_struct.field("nodes", &self.nodes);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::NodeGroupsListNodes {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeGroupsListNodes");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups_list_nodes::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups_list_nodes::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::NodeGroupsPerformMaintenanceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeGroupsPerformMaintenanceRequest");
        debug_struct.field("nodes", &self.nodes);
        debug_struct.field("start_time", &self.start_time);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::NodeGroupsScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeGroupsScopedList");
        debug_struct.field("node_groups", &self.node_groups);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::NodeGroupsSetNodeTemplateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeGroupsSetNodeTemplateRequest");
        debug_struct.field("node_template", &self.node_template);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::NodeGroupsSimulateMaintenanceEventRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeGroupsSimulateMaintenanceEventRequest");
        debug_struct.field("nodes", &self.nodes);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::NodeTemplate {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeTemplate");
        debug_struct.field("accelerators", &self.accelerators);
        debug_struct.field("cpu_overcommit_type", &self.cpu_overcommit_type);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("disks", &self.disks);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("node_affinity_labels", &self.node_affinity_labels);
        debug_struct.field("node_type", &self.node_type);
        debug_struct.field("node_type_flexibility", &self.node_type_flexibility);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("server_binding", &self.server_binding);
        debug_struct.field("status", &self.status);
        debug_struct.field("status_message", &self.status_message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::NodeTemplateAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeTemplateAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::node_template_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::node_template_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::NodeTemplateList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeTemplateList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::node_template_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::node_template_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::NodeTemplateNodeTypeFlexibility {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeTemplateNodeTypeFlexibility");
        debug_struct.field("cpus", &self.cpus);
        debug_struct.field("local_ssd", &self.local_ssd);
        debug_struct.field("memory", &self.memory);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::NodeTemplatesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeTemplatesScopedList");
        debug_struct.field("node_templates", &self.node_templates);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::node_templates_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::node_templates_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-types")]
impl std::fmt::Debug for super::NodeType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeType");
        debug_struct.field("cpu_platform", &self.cpu_platform);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("deprecated", &self.deprecated);
        debug_struct.field("description", &self.description);
        debug_struct.field("guest_cpus", &self.guest_cpus);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("local_ssd_gb", &self.local_ssd_gb);
        debug_struct.field("max_vms", &self.max_vms);
        debug_struct.field("memory_mb", &self.memory_mb);
        debug_struct.field("name", &self.name);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-types")]
impl std::fmt::Debug for super::NodeTypeAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeTypeAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-types")]
impl std::fmt::Debug for super::node_type_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-types")]
impl std::fmt::Debug for super::node_type_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-types")]
impl std::fmt::Debug for super::NodeTypeList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeTypeList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-types")]
impl std::fmt::Debug for super::node_type_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-types")]
impl std::fmt::Debug for super::node_type_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-types")]
impl std::fmt::Debug for super::NodeTypesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NodeTypesScopedList");
        debug_struct.field("node_types", &self.node_types);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-types")]
impl std::fmt::Debug for super::node_types_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-types")]
impl std::fmt::Debug for super::node_types_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-notification-endpoints")]
impl std::fmt::Debug for super::NotificationEndpoint {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NotificationEndpoint");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("grpc_settings", &self.grpc_settings);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-notification-endpoints")]
impl std::fmt::Debug for super::NotificationEndpointGrpcSettings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NotificationEndpointGrpcSettings");
        debug_struct.field("authority", &self.authority);
        debug_struct.field("endpoint", &self.endpoint);
        debug_struct.field("payload_name", &self.payload_name);
        debug_struct.field("resend_interval", &self.resend_interval);
        debug_struct.field("retry_duration_sec", &self.retry_duration_sec);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-notification-endpoints")]
impl std::fmt::Debug for super::NotificationEndpointList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("NotificationEndpointList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-notification-endpoints")]
impl std::fmt::Debug for super::notification_endpoint_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-notification-endpoints")]
impl std::fmt::Debug for super::notification_endpoint_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "autoscalers",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "cross-site-networks",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "firewalls",
    feature = "forwarding-rules",
    feature = "future-reservations",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "global-network-endpoint-groups",
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "global-public-delegated-prefixes",
    feature = "health-checks",
    feature = "http-health-checks",
    feature = "https-health-checks",
    feature = "images",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "instance-settings",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-attachments",
    feature = "interconnect-groups",
    feature = "interconnects",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-edge-security-services",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "node-groups",
    feature = "node-templates",
    feature = "organization-security-policies",
    feature = "packet-mirrorings",
    feature = "preview-features",
    feature = "projects",
    feature = "public-advertised-prefixes",
    feature = "public-delegated-prefixes",
    feature = "region-autoscalers",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-disks",
    feature = "region-health-check-services",
    feature = "region-health-checks",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-instant-snapshots",
    feature = "region-network-endpoint-groups",
    feature = "region-network-firewall-policies",
    feature = "region-notification-endpoints",
    feature = "region-operations",
    feature = "region-security-policies",
    feature = "region-ssl-certificates",
    feature = "region-ssl-policies",
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "region-target-tcp-proxies",
    feature = "region-url-maps",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
    feature = "resource-policies",
    feature = "routers",
    feature = "routes",
    feature = "security-policies",
    feature = "service-attachments",
    feature = "snapshot-settings",
    feature = "snapshots",
    feature = "ssl-certificates",
    feature = "ssl-policies",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-grpc-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
    feature = "target-instances",
    feature = "target-pools",
    feature = "target-ssl-proxies",
    feature = "target-tcp-proxies",
    feature = "target-vpn-gateways",
    feature = "url-maps",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
    feature = "wire-groups",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::Operation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Operation");
        debug_struct.field("client_operation_id", &self.client_operation_id);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("end_time", &self.end_time);
        debug_struct.field("error", &self.error);
        debug_struct.field("http_error_message", &self.http_error_message);
        debug_struct.field("http_error_status_code", &self.http_error_status_code);
        debug_struct.field("id", &self.id);
        debug_struct.field("insert_time", &self.insert_time);
        debug_struct.field(
            "instances_bulk_insert_operation_metadata",
            &self.instances_bulk_insert_operation_metadata,
        );
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("operation_group_id", &self.operation_group_id);
        debug_struct.field("operation_type", &self.operation_type);
        debug_struct.field("progress", &self.progress);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field(
            "set_common_instance_metadata_operation_metadata",
            &self.set_common_instance_metadata_operation_metadata,
        );
        debug_struct.field("start_time", &self.start_time);
        debug_struct.field("status", &self.status);
        debug_struct.field("status_message", &self.status_message);
        debug_struct.field("target_id", &self.target_id);
        debug_struct.field("target_link", &self.target_link);
        debug_struct.field("user", &self.user);
        debug_struct.field("warnings", &self.warnings);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "autoscalers",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "cross-site-networks",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "firewalls",
    feature = "forwarding-rules",
    feature = "future-reservations",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "global-network-endpoint-groups",
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "global-public-delegated-prefixes",
    feature = "health-checks",
    feature = "http-health-checks",
    feature = "https-health-checks",
    feature = "images",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "instance-settings",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-attachments",
    feature = "interconnect-groups",
    feature = "interconnects",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-edge-security-services",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "node-groups",
    feature = "node-templates",
    feature = "organization-security-policies",
    feature = "packet-mirrorings",
    feature = "preview-features",
    feature = "projects",
    feature = "public-advertised-prefixes",
    feature = "public-delegated-prefixes",
    feature = "region-autoscalers",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-disks",
    feature = "region-health-check-services",
    feature = "region-health-checks",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-instant-snapshots",
    feature = "region-network-endpoint-groups",
    feature = "region-network-firewall-policies",
    feature = "region-notification-endpoints",
    feature = "region-operations",
    feature = "region-security-policies",
    feature = "region-ssl-certificates",
    feature = "region-ssl-policies",
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "region-target-tcp-proxies",
    feature = "region-url-maps",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
    feature = "resource-policies",
    feature = "routers",
    feature = "routes",
    feature = "security-policies",
    feature = "service-attachments",
    feature = "snapshot-settings",
    feature = "snapshots",
    feature = "ssl-certificates",
    feature = "ssl-policies",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-grpc-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
    feature = "target-instances",
    feature = "target-pools",
    feature = "target-ssl-proxies",
    feature = "target-tcp-proxies",
    feature = "target-vpn-gateways",
    feature = "url-maps",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
    feature = "wire-groups",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::operation::Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Error");
        debug_struct.field("errors", &self.errors);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "autoscalers",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "cross-site-networks",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "firewalls",
    feature = "forwarding-rules",
    feature = "future-reservations",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "global-network-endpoint-groups",
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "global-public-delegated-prefixes",
    feature = "health-checks",
    feature = "http-health-checks",
    feature = "https-health-checks",
    feature = "images",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "instance-settings",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-attachments",
    feature = "interconnect-groups",
    feature = "interconnects",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-edge-security-services",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "node-groups",
    feature = "node-templates",
    feature = "organization-security-policies",
    feature = "packet-mirrorings",
    feature = "preview-features",
    feature = "projects",
    feature = "public-advertised-prefixes",
    feature = "public-delegated-prefixes",
    feature = "region-autoscalers",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-disks",
    feature = "region-health-check-services",
    feature = "region-health-checks",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-instant-snapshots",
    feature = "region-network-endpoint-groups",
    feature = "region-network-firewall-policies",
    feature = "region-notification-endpoints",
    feature = "region-operations",
    feature = "region-security-policies",
    feature = "region-ssl-certificates",
    feature = "region-ssl-policies",
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "region-target-tcp-proxies",
    feature = "region-url-maps",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
    feature = "resource-policies",
    feature = "routers",
    feature = "routes",
    feature = "security-policies",
    feature = "service-attachments",
    feature = "snapshot-settings",
    feature = "snapshots",
    feature = "ssl-certificates",
    feature = "ssl-policies",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-grpc-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
    feature = "target-instances",
    feature = "target-pools",
    feature = "target-ssl-proxies",
    feature = "target-tcp-proxies",
    feature = "target-vpn-gateways",
    feature = "url-maps",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
    feature = "wire-groups",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::operation::error::Errors {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Errors");
        debug_struct.field("code", &self.code);
        debug_struct.field("error_details", &self.error_details);
        debug_struct.field("location", &self.location);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "autoscalers",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "cross-site-networks",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "firewalls",
    feature = "forwarding-rules",
    feature = "future-reservations",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "global-network-endpoint-groups",
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "global-public-delegated-prefixes",
    feature = "health-checks",
    feature = "http-health-checks",
    feature = "https-health-checks",
    feature = "images",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "instance-settings",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-attachments",
    feature = "interconnect-groups",
    feature = "interconnects",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-edge-security-services",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "node-groups",
    feature = "node-templates",
    feature = "organization-security-policies",
    feature = "packet-mirrorings",
    feature = "preview-features",
    feature = "projects",
    feature = "public-advertised-prefixes",
    feature = "public-delegated-prefixes",
    feature = "region-autoscalers",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-disks",
    feature = "region-health-check-services",
    feature = "region-health-checks",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-instant-snapshots",
    feature = "region-network-endpoint-groups",
    feature = "region-network-firewall-policies",
    feature = "region-notification-endpoints",
    feature = "region-operations",
    feature = "region-security-policies",
    feature = "region-ssl-certificates",
    feature = "region-ssl-policies",
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "region-target-tcp-proxies",
    feature = "region-url-maps",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
    feature = "resource-policies",
    feature = "routers",
    feature = "routes",
    feature = "security-policies",
    feature = "service-attachments",
    feature = "snapshot-settings",
    feature = "snapshots",
    feature = "ssl-certificates",
    feature = "ssl-policies",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-grpc-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
    feature = "target-instances",
    feature = "target-pools",
    feature = "target-ssl-proxies",
    feature = "target-tcp-proxies",
    feature = "target-vpn-gateways",
    feature = "url-maps",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
    feature = "wire-groups",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::operation::error::errors::ErrorDetails {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ErrorDetails");
        debug_struct.field("error_info", &self.error_info);
        debug_struct.field("help", &self.help);
        debug_struct.field("localized_message", &self.localized_message);
        debug_struct.field("quota_info", &self.quota_info);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "autoscalers",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "cross-site-networks",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "firewalls",
    feature = "forwarding-rules",
    feature = "future-reservations",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "global-network-endpoint-groups",
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "global-public-delegated-prefixes",
    feature = "health-checks",
    feature = "http-health-checks",
    feature = "https-health-checks",
    feature = "images",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "instance-settings",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-attachments",
    feature = "interconnect-groups",
    feature = "interconnects",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-edge-security-services",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "node-groups",
    feature = "node-templates",
    feature = "organization-security-policies",
    feature = "packet-mirrorings",
    feature = "preview-features",
    feature = "projects",
    feature = "public-advertised-prefixes",
    feature = "public-delegated-prefixes",
    feature = "region-autoscalers",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-disks",
    feature = "region-health-check-services",
    feature = "region-health-checks",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-instant-snapshots",
    feature = "region-network-endpoint-groups",
    feature = "region-network-firewall-policies",
    feature = "region-notification-endpoints",
    feature = "region-operations",
    feature = "region-security-policies",
    feature = "region-ssl-certificates",
    feature = "region-ssl-policies",
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "region-target-tcp-proxies",
    feature = "region-url-maps",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
    feature = "resource-policies",
    feature = "routers",
    feature = "routes",
    feature = "security-policies",
    feature = "service-attachments",
    feature = "snapshot-settings",
    feature = "snapshots",
    feature = "ssl-certificates",
    feature = "ssl-policies",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-grpc-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
    feature = "target-instances",
    feature = "target-pools",
    feature = "target-ssl-proxies",
    feature = "target-tcp-proxies",
    feature = "target-vpn-gateways",
    feature = "url-maps",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
    feature = "wire-groups",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::operation::Warnings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warnings");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "autoscalers",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "cross-site-networks",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "firewalls",
    feature = "forwarding-rules",
    feature = "future-reservations",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "global-network-endpoint-groups",
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "global-public-delegated-prefixes",
    feature = "health-checks",
    feature = "http-health-checks",
    feature = "https-health-checks",
    feature = "images",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "instance-settings",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-attachments",
    feature = "interconnect-groups",
    feature = "interconnects",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-edge-security-services",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "node-groups",
    feature = "node-templates",
    feature = "organization-security-policies",
    feature = "packet-mirrorings",
    feature = "preview-features",
    feature = "projects",
    feature = "public-advertised-prefixes",
    feature = "public-delegated-prefixes",
    feature = "region-autoscalers",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-disks",
    feature = "region-health-check-services",
    feature = "region-health-checks",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-instant-snapshots",
    feature = "region-network-endpoint-groups",
    feature = "region-network-firewall-policies",
    feature = "region-notification-endpoints",
    feature = "region-operations",
    feature = "region-security-policies",
    feature = "region-ssl-certificates",
    feature = "region-ssl-policies",
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "region-target-tcp-proxies",
    feature = "region-url-maps",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
    feature = "resource-policies",
    feature = "routers",
    feature = "routes",
    feature = "security-policies",
    feature = "service-attachments",
    feature = "snapshot-settings",
    feature = "snapshots",
    feature = "ssl-certificates",
    feature = "ssl-policies",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-grpc-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
    feature = "target-instances",
    feature = "target-pools",
    feature = "target-ssl-proxies",
    feature = "target-tcp-proxies",
    feature = "target-vpn-gateways",
    feature = "url-maps",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
    feature = "wire-groups",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::operation::warnings::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-operations")]
impl std::fmt::Debug for super::OperationAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("OperationAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-operations")]
impl std::fmt::Debug for super::operation_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-operations")]
impl std::fmt::Debug for super::operation_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "region-operations",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::OperationList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("OperationList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "region-operations",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::operation_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "region-operations",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::operation_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-operations")]
impl std::fmt::Debug for super::OperationsScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("OperationsScopedList");
        debug_struct.field("operations", &self.operations);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-operations")]
impl std::fmt::Debug for super::operations_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-operations")]
impl std::fmt::Debug for super::operations_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "organization-security-policies")]
impl std::fmt::Debug for super::OrganizationSecurityPoliciesListAssociationsResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("OrganizationSecurityPoliciesListAssociationsResponse");
        debug_struct.field("associations", &self.associations);
        debug_struct.field("kind", &self.kind);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::OutlierDetection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("OutlierDetection");
        debug_struct.field("base_ejection_time", &self.base_ejection_time);
        debug_struct.field("consecutive_errors", &self.consecutive_errors);
        debug_struct.field(
            "consecutive_gateway_failure",
            &self.consecutive_gateway_failure,
        );
        debug_struct.field(
            "enforcing_consecutive_errors",
            &self.enforcing_consecutive_errors,
        );
        debug_struct.field(
            "enforcing_consecutive_gateway_failure",
            &self.enforcing_consecutive_gateway_failure,
        );
        debug_struct.field("enforcing_success_rate", &self.enforcing_success_rate);
        debug_struct.field("interval", &self.interval);
        debug_struct.field("max_ejection_percent", &self.max_ejection_percent);
        debug_struct.field(
            "success_rate_minimum_hosts",
            &self.success_rate_minimum_hosts,
        );
        debug_struct.field(
            "success_rate_request_volume",
            &self.success_rate_request_volume,
        );
        debug_struct.field("success_rate_stdev_factor", &self.success_rate_stdev_factor);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::PacketIntervals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PacketIntervals");
        debug_struct.field("avg_ms", &self.avg_ms);
        debug_struct.field("duration", &self.duration);
        debug_struct.field("max_ms", &self.max_ms);
        debug_struct.field("min_ms", &self.min_ms);
        debug_struct.field("num_intervals", &self.num_intervals);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::PacketMirroring {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PacketMirroring");
        debug_struct.field("collector_ilb", &self.collector_ilb);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("enable", &self.enable);
        debug_struct.field("filter", &self.filter);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("mirrored_resources", &self.mirrored_resources);
        debug_struct.field("name", &self.name);
        debug_struct.field("network", &self.network);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::PacketMirroringAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PacketMirroringAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::packet_mirroring_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::packet_mirroring_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::PacketMirroringFilter {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PacketMirroringFilter");
        debug_struct.field("ip_protocols", &self.ip_protocols);
        debug_struct.field("cidr_ranges", &self.cidr_ranges);
        debug_struct.field("direction", &self.direction);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::PacketMirroringForwardingRuleInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PacketMirroringForwardingRuleInfo");
        debug_struct.field("canonical_url", &self.canonical_url);
        debug_struct.field("url", &self.url);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::PacketMirroringList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PacketMirroringList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::packet_mirroring_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::packet_mirroring_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::PacketMirroringMirroredResourceInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PacketMirroringMirroredResourceInfo");
        debug_struct.field("instances", &self.instances);
        debug_struct.field("subnetworks", &self.subnetworks);
        debug_struct.field("tags", &self.tags);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::PacketMirroringMirroredResourceInfoInstanceInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PacketMirroringMirroredResourceInfoInstanceInfo");
        debug_struct.field("canonical_url", &self.canonical_url);
        debug_struct.field("url", &self.url);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::PacketMirroringMirroredResourceInfoSubnetInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PacketMirroringMirroredResourceInfoSubnetInfo");
        debug_struct.field("canonical_url", &self.canonical_url);
        debug_struct.field("url", &self.url);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::PacketMirroringNetworkInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PacketMirroringNetworkInfo");
        debug_struct.field("canonical_url", &self.canonical_url);
        debug_struct.field("url", &self.url);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::PacketMirroringsScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PacketMirroringsScopedList");
        debug_struct.field("packet_mirrorings", &self.packet_mirrorings);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::packet_mirrorings_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::packet_mirrorings_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::PathMatcher {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PathMatcher");
        debug_struct.field(
            "default_custom_error_response_policy",
            &self.default_custom_error_response_policy,
        );
        debug_struct.field("default_route_action", &self.default_route_action);
        debug_struct.field("default_service", &self.default_service);
        debug_struct.field("default_url_redirect", &self.default_url_redirect);
        debug_struct.field("description", &self.description);
        debug_struct.field("header_action", &self.header_action);
        debug_struct.field("name", &self.name);
        debug_struct.field("path_rules", &self.path_rules);
        debug_struct.field("route_rules", &self.route_rules);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::PathRule {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PathRule");
        debug_struct.field(
            "custom_error_response_policy",
            &self.custom_error_response_policy,
        );
        debug_struct.field("paths", &self.paths);
        debug_struct.field("route_action", &self.route_action);
        debug_struct.field("service", &self.service);
        debug_struct.field("url_redirect", &self.url_redirect);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::PerInstanceConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PerInstanceConfig");
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("name", &self.name);
        debug_struct.field("preserved_state", &self.preserved_state);
        debug_struct.field("status", &self.status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "disks",
    feature = "firewall-policies",
    feature = "images",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-groups",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-firewall-policies",
    feature = "node-groups",
    feature = "node-templates",
    feature = "region-backend-services",
    feature = "region-disks",
    feature = "region-instant-snapshots",
    feature = "region-network-firewall-policies",
    feature = "reservations",
    feature = "resource-policies",
    feature = "service-attachments",
    feature = "snapshots",
    feature = "storage-pools",
    feature = "subnetworks",
))]
impl std::fmt::Debug for super::Policy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Policy");
        debug_struct.field("audit_configs", &self.audit_configs);
        debug_struct.field("bindings", &self.bindings);
        debug_struct.field("etag", &self.etag);
        debug_struct.field("version", &self.version);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::PreconfiguredWafSet {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PreconfiguredWafSet");
        debug_struct.field("expression_sets", &self.expression_sets);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::PreservedState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PreservedState");
        debug_struct.field("disks", &self.disks);
        debug_struct.field("external_i_ps", &self.external_i_ps);
        debug_struct.field("internal_i_ps", &self.internal_i_ps);
        debug_struct.field("metadata", &self.metadata);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::PreservedStatePreservedDisk {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PreservedStatePreservedDisk");
        debug_struct.field("auto_delete", &self.auto_delete);
        debug_struct.field("mode", &self.mode);
        debug_struct.field("source", &self.source);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::PreservedStatePreservedNetworkIp {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PreservedStatePreservedNetworkIp");
        debug_struct.field("auto_delete", &self.auto_delete);
        debug_struct.field("ip_address", &self.ip_address);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::PreservedStatePreservedNetworkIpIpAddress {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PreservedStatePreservedNetworkIpIpAddress");
        debug_struct.field("address", &self.address);
        debug_struct.field("literal", &self.literal);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "preview-features")]
impl std::fmt::Debug for super::PreviewFeature {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PreviewFeature");
        debug_struct.field("activation_status", &self.activation_status);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("rollout_operation", &self.rollout_operation);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("status", &self.status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "preview-features")]
impl std::fmt::Debug for super::PreviewFeatureList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PreviewFeatureList");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "preview-features")]
impl std::fmt::Debug for super::preview_feature_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "preview-features")]
impl std::fmt::Debug for super::preview_feature_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "preview-features")]
impl std::fmt::Debug for super::PreviewFeatureRolloutOperation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PreviewFeatureRolloutOperation");
        debug_struct.field("rollout_input", &self.rollout_input);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "preview-features")]
impl std::fmt::Debug for super::PreviewFeatureRolloutOperationRolloutInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PreviewFeatureRolloutOperationRolloutInput");
        debug_struct.field("name", &self.name);
        debug_struct.field("predefined_rollout_plan", &self.predefined_rollout_plan);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "preview-features")]
impl std::fmt::Debug for super::PreviewFeatureStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PreviewFeatureStatus");
        debug_struct.field("description", &self.description);
        debug_struct.field("help_link", &self.help_link);
        debug_struct.field("release_status", &self.release_status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "preview-features")]
impl std::fmt::Debug for super::PreviewFeatureStatusReleaseStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PreviewFeatureStatusReleaseStatus");
        debug_struct.field("stage", &self.stage);
        debug_struct.field("update_date", &self.update_date);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::Project {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Project");
        debug_struct.field("cloud_armor_tier", &self.cloud_armor_tier);
        debug_struct.field("common_instance_metadata", &self.common_instance_metadata);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("default_network_tier", &self.default_network_tier);
        debug_struct.field("default_service_account", &self.default_service_account);
        debug_struct.field("description", &self.description);
        debug_struct.field("enabled_features", &self.enabled_features);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("quotas", &self.quotas);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("usage_export_location", &self.usage_export_location);
        debug_struct.field("vm_dns_setting", &self.vm_dns_setting);
        debug_struct.field("xpn_project_status", &self.xpn_project_status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::ProjectsDisableXpnResourceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ProjectsDisableXpnResourceRequest");
        debug_struct.field("xpn_resource", &self.xpn_resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::ProjectsEnableXpnResourceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ProjectsEnableXpnResourceRequest");
        debug_struct.field("xpn_resource", &self.xpn_resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::ProjectsGetXpnResources {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ProjectsGetXpnResources");
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("resources", &self.resources);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::ProjectsListXpnHostsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ProjectsListXpnHostsRequest");
        debug_struct.field("organization", &self.organization);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::ProjectsSetCloudArmorTierRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ProjectsSetCloudArmorTierRequest");
        debug_struct.field("cloud_armor_tier", &self.cloud_armor_tier);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::ProjectsSetDefaultNetworkTierRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ProjectsSetDefaultNetworkTierRequest");
        debug_struct.field("network_tier", &self.network_tier);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-advertised-prefixes")]
impl std::fmt::Debug for super::PublicAdvertisedPrefix {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PublicAdvertisedPrefix");
        debug_struct.field("byoip_api_version", &self.byoip_api_version);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("dns_verification_ip", &self.dns_verification_ip);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("id", &self.id);
        debug_struct.field("ip_cidr_range", &self.ip_cidr_range);
        debug_struct.field("ipv_6_access_type", &self.ipv_6_access_type);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("pdp_scope", &self.pdp_scope);
        debug_struct.field("public_delegated_prefixs", &self.public_delegated_prefixs);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("shared_secret", &self.shared_secret);
        debug_struct.field("status", &self.status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-advertised-prefixes")]
impl std::fmt::Debug for super::PublicAdvertisedPrefixList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PublicAdvertisedPrefixList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-advertised-prefixes")]
impl std::fmt::Debug for super::public_advertised_prefix_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-advertised-prefixes")]
impl std::fmt::Debug for super::public_advertised_prefix_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-advertised-prefixes")]
impl std::fmt::Debug for super::PublicAdvertisedPrefixPublicDelegatedPrefix {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PublicAdvertisedPrefixPublicDelegatedPrefix");
        debug_struct.field("ip_range", &self.ip_range);
        debug_struct.field("name", &self.name);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("status", &self.status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-public-delegated-prefixes",
    feature = "public-delegated-prefixes",
))]
impl std::fmt::Debug for super::PublicDelegatedPrefix {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PublicDelegatedPrefix");
        debug_struct.field("allocatable_prefix_length", &self.allocatable_prefix_length);
        debug_struct.field("byoip_api_version", &self.byoip_api_version);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("id", &self.id);
        debug_struct.field("ip_cidr_range", &self.ip_cidr_range);
        debug_struct.field("ipv_6_access_type", &self.ipv_6_access_type);
        debug_struct.field("is_live_migration", &self.is_live_migration);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("mode", &self.mode);
        debug_struct.field("name", &self.name);
        debug_struct.field("parent_prefix", &self.parent_prefix);
        debug_struct.field(
            "public_delegated_sub_prefixs",
            &self.public_delegated_sub_prefixs,
        );
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("status", &self.status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-delegated-prefixes")]
impl std::fmt::Debug for super::PublicDelegatedPrefixAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PublicDelegatedPrefixAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-delegated-prefixes")]
impl std::fmt::Debug for super::public_delegated_prefix_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-delegated-prefixes")]
impl std::fmt::Debug for super::public_delegated_prefix_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-public-delegated-prefixes",
    feature = "public-delegated-prefixes",
))]
impl std::fmt::Debug for super::PublicDelegatedPrefixList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PublicDelegatedPrefixList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-public-delegated-prefixes",
    feature = "public-delegated-prefixes",
))]
impl std::fmt::Debug for super::public_delegated_prefix_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-public-delegated-prefixes",
    feature = "public-delegated-prefixes",
))]
impl std::fmt::Debug for super::public_delegated_prefix_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "global-public-delegated-prefixes",
    feature = "public-delegated-prefixes",
))]
impl std::fmt::Debug for super::PublicDelegatedPrefixPublicDelegatedSubPrefix {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PublicDelegatedPrefixPublicDelegatedSubPrefix");
        debug_struct.field("allocatable_prefix_length", &self.allocatable_prefix_length);
        debug_struct.field("delegatee_project", &self.delegatee_project);
        debug_struct.field("description", &self.description);
        debug_struct.field("ip_cidr_range", &self.ip_cidr_range);
        debug_struct.field("ipv_6_access_type", &self.ipv_6_access_type);
        debug_struct.field("is_address", &self.is_address);
        debug_struct.field("mode", &self.mode);
        debug_struct.field("name", &self.name);
        debug_struct.field("region", &self.region);
        debug_struct.field("status", &self.status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-delegated-prefixes")]
impl std::fmt::Debug for super::PublicDelegatedPrefixesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PublicDelegatedPrefixesScopedList");
        debug_struct.field("public_delegated_prefixes", &self.public_delegated_prefixes);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-delegated-prefixes")]
impl std::fmt::Debug for super::public_delegated_prefixes_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-delegated-prefixes")]
impl std::fmt::Debug for super::public_delegated_prefixes_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "projects", feature = "regions",))]
impl std::fmt::Debug for super::Quota {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Quota");
        debug_struct.field("limit", &self.limit);
        debug_struct.field("metric", &self.metric);
        debug_struct.field("owner", &self.owner);
        debug_struct.field("usage", &self.usage);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "autoscalers",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "cross-site-networks",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "firewalls",
    feature = "forwarding-rules",
    feature = "future-reservations",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "global-network-endpoint-groups",
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "global-public-delegated-prefixes",
    feature = "health-checks",
    feature = "http-health-checks",
    feature = "https-health-checks",
    feature = "images",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "instance-settings",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-attachments",
    feature = "interconnect-groups",
    feature = "interconnects",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-edge-security-services",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "node-groups",
    feature = "node-templates",
    feature = "organization-security-policies",
    feature = "packet-mirrorings",
    feature = "preview-features",
    feature = "projects",
    feature = "public-advertised-prefixes",
    feature = "public-delegated-prefixes",
    feature = "region-autoscalers",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-disks",
    feature = "region-health-check-services",
    feature = "region-health-checks",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-instant-snapshots",
    feature = "region-network-endpoint-groups",
    feature = "region-network-firewall-policies",
    feature = "region-notification-endpoints",
    feature = "region-operations",
    feature = "region-security-policies",
    feature = "region-ssl-certificates",
    feature = "region-ssl-policies",
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "region-target-tcp-proxies",
    feature = "region-url-maps",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
    feature = "resource-policies",
    feature = "routers",
    feature = "routes",
    feature = "security-policies",
    feature = "service-attachments",
    feature = "snapshot-settings",
    feature = "snapshots",
    feature = "ssl-certificates",
    feature = "ssl-policies",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-grpc-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
    feature = "target-instances",
    feature = "target-pools",
    feature = "target-ssl-proxies",
    feature = "target-tcp-proxies",
    feature = "target-vpn-gateways",
    feature = "url-maps",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
    feature = "wire-groups",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::QuotaExceededInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("QuotaExceededInfo");
        debug_struct.field("dimensions", &self.dimensions);
        debug_struct.field("future_limit", &self.future_limit);
        debug_struct.field("limit", &self.limit);
        debug_struct.field("limit_name", &self.limit_name);
        debug_struct.field("metric_name", &self.metric_name);
        debug_struct.field("rollout_status", &self.rollout_status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::Reference {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Reference");
        debug_struct.field("kind", &self.kind);
        debug_struct.field("reference_type", &self.reference_type);
        debug_struct.field("referrer", &self.referrer);
        debug_struct.field("target", &self.target);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "regions")]
impl std::fmt::Debug for super::Region {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Region");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("deprecated", &self.deprecated);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("quota_status_warning", &self.quota_status_warning);
        debug_struct.field("quotas", &self.quotas);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("status", &self.status);
        debug_struct.field("supports_pzs", &self.supports_pzs);
        debug_struct.field("zones", &self.zones);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "regions")]
impl std::fmt::Debug for super::region::QuotaStatusWarning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("QuotaStatusWarning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "regions")]
impl std::fmt::Debug for super::region::quota_status_warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "addresses")]
impl std::fmt::Debug for super::RegionAddressesMoveRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionAddressesMoveRequest");
        debug_struct.field("description", &self.description);
        debug_struct.field("destination_address", &self.destination_address);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-autoscalers")]
impl std::fmt::Debug for super::RegionAutoscalerList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionAutoscalerList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-autoscalers")]
impl std::fmt::Debug for super::region_autoscaler_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-autoscalers")]
impl std::fmt::Debug for super::region_autoscaler_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disk-types")]
impl std::fmt::Debug for super::RegionDiskTypeList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionDiskTypeList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disk-types")]
impl std::fmt::Debug for super::region_disk_type_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disk-types")]
impl std::fmt::Debug for super::region_disk_type_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::RegionDisksAddResourcePoliciesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionDisksAddResourcePoliciesRequest");
        debug_struct.field("resource_policies", &self.resource_policies);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::RegionDisksRemoveResourcePoliciesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionDisksRemoveResourcePoliciesRequest");
        debug_struct.field("resource_policies", &self.resource_policies);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::RegionDisksResizeRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionDisksResizeRequest");
        debug_struct.field("size_gb", &self.size_gb);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::RegionDisksStartAsyncReplicationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionDisksStartAsyncReplicationRequest");
        debug_struct.field("async_secondary_disk", &self.async_secondary_disk);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-groups")]
impl std::fmt::Debug for super::RegionInstanceGroupList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-groups")]
impl std::fmt::Debug for super::region_instance_group_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-groups")]
impl std::fmt::Debug for super::region_instance_group_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagerDeleteInstanceConfigReq {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagerDeleteInstanceConfigReq");
        debug_struct.field("names", &self.names);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagerList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagerList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_manager_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_manager_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagerPatchInstanceConfigReq {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagerPatchInstanceConfigReq");
        debug_struct.field("per_instance_configs", &self.per_instance_configs);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagerUpdateInstanceConfigReq {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagerUpdateInstanceConfigReq");
        debug_struct.field("per_instance_configs", &self.per_instance_configs);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagersAbandonInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagersAbandonInstancesRequest");
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagersApplyUpdatesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagersApplyUpdatesRequest");
        debug_struct.field("all_instances", &self.all_instances);
        debug_struct.field("instances", &self.instances);
        debug_struct.field("minimal_action", &self.minimal_action);
        debug_struct.field(
            "most_disruptive_allowed_action",
            &self.most_disruptive_allowed_action,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagersCreateInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagersCreateInstancesRequest");
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagersDeleteInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagersDeleteInstancesRequest");
        debug_struct.field("instances", &self.instances);
        debug_struct.field(
            "skip_instances_on_validation_error",
            &self.skip_instances_on_validation_error,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagersListErrorsResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagersListErrorsResponse");
        debug_struct.field("items", &self.items);
        debug_struct.field("next_page_token", &self.next_page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagersListInstanceConfigsResp {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagersListInstanceConfigsResp");
        debug_struct.field("items", &self.items);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers_list_instance_configs_resp::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug
    for super::region_instance_group_managers_list_instance_configs_resp::warning::Data
{
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagersListInstancesResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagersListInstancesResponse");
        debug_struct.field("managed_instances", &self.managed_instances);
        debug_struct.field("next_page_token", &self.next_page_token);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagersRecreateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagersRecreateRequest");
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagersResumeInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagersResumeInstancesRequest");
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagersSetTargetPoolsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagersSetTargetPoolsRequest");
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("target_pools", &self.target_pools);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagersSetTemplateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagersSetTemplateRequest");
        debug_struct.field("instance_template", &self.instance_template);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagersStartInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagersStartInstancesRequest");
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagersStopInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagersStopInstancesRequest");
        debug_struct.field("force_stop", &self.force_stop);
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::RegionInstanceGroupManagersSuspendInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupManagersSuspendInstancesRequest");
        debug_struct.field("force_suspend", &self.force_suspend);
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-groups")]
impl std::fmt::Debug for super::RegionInstanceGroupsListInstances {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupsListInstances");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-groups")]
impl std::fmt::Debug for super::region_instance_groups_list_instances::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-groups")]
impl std::fmt::Debug for super::region_instance_groups_list_instances::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-groups")]
impl std::fmt::Debug for super::RegionInstanceGroupsListInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupsListInstancesRequest");
        debug_struct.field("instance_state", &self.instance_state);
        debug_struct.field("port_name", &self.port_name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-groups")]
impl std::fmt::Debug for super::RegionInstanceGroupsSetNamedPortsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionInstanceGroupsSetNamedPortsRequest");
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("named_ports", &self.named_ports);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "regions")]
impl std::fmt::Debug for super::RegionList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "regions")]
impl std::fmt::Debug for super::region_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "regions")]
impl std::fmt::Debug for super::region_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-endpoint-groups")]
impl std::fmt::Debug for super::RegionNetworkEndpointGroupsAttachEndpointsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionNetworkEndpointGroupsAttachEndpointsRequest");
        debug_struct.field("network_endpoints", &self.network_endpoints);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-endpoint-groups")]
impl std::fmt::Debug for super::RegionNetworkEndpointGroupsDetachEndpointsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionNetworkEndpointGroupsDetachEndpointsRequest");
        debug_struct.field("network_endpoints", &self.network_endpoints);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponse");
        debug_struct.field("firewall_policys", &self.firewall_policys);
        debug_struct.field("firewalls", &self.firewalls);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug
    for super::RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy
{
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct(
            "RegionNetworkFirewallPoliciesGetEffectiveFirewallsResponseEffectiveFirewallPolicy",
        );
        debug_struct.field("display_name", &self.display_name);
        debug_struct.field("name", &self.name);
        debug_struct.field("packet_mirroring_rules", &self.packet_mirroring_rules);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("rules", &self.rules);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "forwarding-rules",
    feature = "interconnect-attachments",
    feature = "region-disks",
    feature = "region-instant-snapshots",
    feature = "region-security-policies",
    feature = "target-vpn-gateways",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
))]
impl std::fmt::Debug for super::RegionSetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionSetLabelsRequest");
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "network-attachments",
    feature = "node-templates",
    feature = "region-backend-services",
    feature = "region-disks",
    feature = "region-instant-snapshots",
    feature = "region-network-firewall-policies",
    feature = "resource-policies",
    feature = "service-attachments",
    feature = "subnetworks",
))]
impl std::fmt::Debug for super::RegionSetPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionSetPolicyRequest");
        debug_struct.field("bindings", &self.bindings);
        debug_struct.field("etag", &self.etag);
        debug_struct.field("policy", &self.policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-target-https-proxies")]
impl std::fmt::Debug for super::RegionTargetHttpsProxiesSetSslCertificatesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionTargetHttpsProxiesSetSslCertificatesRequest");
        debug_struct.field("ssl_certificates", &self.ssl_certificates);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-url-maps")]
impl std::fmt::Debug for super::RegionUrlMapsValidateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RegionUrlMapsValidateRequest");
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::RequestMirrorPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RequestMirrorPolicy");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("mirror_percent", &self.mirror_percent);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-commitments", feature = "reservations",))]
impl std::fmt::Debug for super::Reservation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Reservation");
        debug_struct.field(
            "advanced_deployment_control",
            &self.advanced_deployment_control,
        );
        debug_struct.field("aggregate_reservation", &self.aggregate_reservation);
        debug_struct.field("commitment", &self.commitment);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("delete_after_duration", &self.delete_after_duration);
        debug_struct.field("delete_at_time", &self.delete_at_time);
        debug_struct.field("deployment_type", &self.deployment_type);
        debug_struct.field("description", &self.description);
        debug_struct.field(
            "enable_emergent_maintenance",
            &self.enable_emergent_maintenance,
        );
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("linked_commitments", &self.linked_commitments);
        debug_struct.field("name", &self.name);
        debug_struct.field(
            "reservation_sharing_policy",
            &self.reservation_sharing_policy,
        );
        debug_struct.field("resource_policies", &self.resource_policies);
        debug_struct.field("resource_status", &self.resource_status);
        debug_struct.field("satisfies_pzs", &self.satisfies_pzs);
        debug_struct.field("scheduling_type", &self.scheduling_type);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("share_settings", &self.share_settings);
        debug_struct.field("specific_reservation", &self.specific_reservation);
        debug_struct.field(
            "specific_reservation_required",
            &self.specific_reservation_required,
        );
        debug_struct.field("status", &self.status);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-commitments", feature = "reservations",))]
impl std::fmt::Debug for super::ReservationAdvancedDeploymentControl {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationAdvancedDeploymentControl");
        debug_struct.field(
            "reservation_operational_mode",
            &self.reservation_operational_mode,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::ReservationAffinity {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationAffinity");
        debug_struct.field("consume_reservation_type", &self.consume_reservation_type);
        debug_struct.field("key", &self.key);
        debug_struct.field("values", &self.values);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::ReservationAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::reservation_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::reservation_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-blocks")]
impl std::fmt::Debug for super::ReservationBlock {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationBlock");
        debug_struct.field("count", &self.count);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("health_info", &self.health_info);
        debug_struct.field("id", &self.id);
        debug_struct.field("in_use_count", &self.in_use_count);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("physical_topology", &self.physical_topology);
        debug_struct.field("reservation_maintenance", &self.reservation_maintenance);
        debug_struct.field(
            "reservation_sub_block_count",
            &self.reservation_sub_block_count,
        );
        debug_struct.field(
            "reservation_sub_block_in_use_count",
            &self.reservation_sub_block_in_use_count,
        );
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("self_link_with_id", &self.self_link_with_id);
        debug_struct.field("status", &self.status);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-blocks")]
impl std::fmt::Debug for super::ReservationBlockHealthInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationBlockHealthInfo");
        debug_struct.field("degraded_sub_block_count", &self.degraded_sub_block_count);
        debug_struct.field("health_status", &self.health_status);
        debug_struct.field("healthy_sub_block_count", &self.healthy_sub_block_count);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-blocks")]
impl std::fmt::Debug for super::ReservationBlockPhysicalTopology {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationBlockPhysicalTopology");
        debug_struct.field("block", &self.block);
        debug_struct.field("cluster", &self.cluster);
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-blocks")]
impl std::fmt::Debug for super::ReservationBlockPhysicalTopologyInstance {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationBlockPhysicalTopologyInstance");
        debug_struct.field("instance_id", &self.instance_id);
        debug_struct.field("physical_host_topology", &self.physical_host_topology);
        debug_struct.field("project_id", &self.project_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-blocks")]
impl std::fmt::Debug for super::ReservationBlockPhysicalTopologyInstancePhysicalHostTopology {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("ReservationBlockPhysicalTopologyInstancePhysicalHostTopology");
        debug_struct.field("host", &self.host);
        debug_struct.field("sub_block", &self.sub_block);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-blocks")]
impl std::fmt::Debug for super::ReservationBlocksGetResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationBlocksGetResponse");
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-blocks")]
impl std::fmt::Debug for super::ReservationBlocksListResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationBlocksListResponse");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-blocks")]
impl std::fmt::Debug for super::reservation_blocks_list_response::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-blocks")]
impl std::fmt::Debug for super::reservation_blocks_list_response::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::ReservationList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::reservation_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::reservation_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-sub-blocks")]
impl std::fmt::Debug for super::ReservationSubBlock {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationSubBlock");
        debug_struct.field("count", &self.count);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("health_info", &self.health_info);
        debug_struct.field("id", &self.id);
        debug_struct.field("in_use_count", &self.in_use_count);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("physical_topology", &self.physical_topology);
        debug_struct.field(
            "reservation_sub_block_maintenance",
            &self.reservation_sub_block_maintenance,
        );
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("self_link_with_id", &self.self_link_with_id);
        debug_struct.field("status", &self.status);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-sub-blocks")]
impl std::fmt::Debug for super::ReservationSubBlockHealthInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationSubBlockHealthInfo");
        debug_struct.field("degraded_host_count", &self.degraded_host_count);
        debug_struct.field("degraded_infra_count", &self.degraded_infra_count);
        debug_struct.field("health_status", &self.health_status);
        debug_struct.field("healthy_host_count", &self.healthy_host_count);
        debug_struct.field("healthy_infra_count", &self.healthy_infra_count);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-sub-blocks")]
impl std::fmt::Debug for super::ReservationSubBlockPhysicalTopology {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationSubBlockPhysicalTopology");
        debug_struct.field("block", &self.block);
        debug_struct.field("cluster", &self.cluster);
        debug_struct.field("sub_block", &self.sub_block);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-sub-blocks")]
impl std::fmt::Debug for super::ReservationSubBlocksGetResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationSubBlocksGetResponse");
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-sub-blocks")]
impl std::fmt::Debug for super::ReservationSubBlocksListResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationSubBlocksListResponse");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-sub-blocks")]
impl std::fmt::Debug for super::reservation_sub_blocks_list_response::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-sub-blocks")]
impl std::fmt::Debug for super::reservation_sub_blocks_list_response::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-sub-blocks")]
impl std::fmt::Debug for super::ReservationSubBlocksReportFaultyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationSubBlocksReportFaultyRequest");
        debug_struct.field("disruption_schedule", &self.disruption_schedule);
        debug_struct.field("failure_component", &self.failure_component);
        debug_struct.field("fault_reasons", &self.fault_reasons);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-sub-blocks")]
impl std::fmt::Debug for super::ReservationSubBlocksReportFaultyRequestFaultReason {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationSubBlocksReportFaultyRequestFaultReason");
        debug_struct.field("behavior", &self.behavior);
        debug_struct.field("description", &self.description);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-blocks")]
impl std::fmt::Debug for super::ReservationsBlocksPerformMaintenanceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationsBlocksPerformMaintenanceRequest");
        debug_struct.field("maintenance_scope", &self.maintenance_scope);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::ReservationsPerformMaintenanceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationsPerformMaintenanceRequest");
        debug_struct.field("maintenance_scope", &self.maintenance_scope);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::ReservationsResizeRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationsResizeRequest");
        debug_struct.field("specific_sku_count", &self.specific_sku_count);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::ReservationsScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReservationsScopedList");
        debug_struct.field("reservations", &self.reservations);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::reservations_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::reservations_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::ResourceCommitment {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourceCommitment");
        debug_struct.field("accelerator_type", &self.accelerator_type);
        debug_struct.field("amount", &self.amount);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::ResourceGroupReference {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourceGroupReference");
        debug_struct.field("group", &self.group);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePoliciesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourcePoliciesScopedList");
        debug_struct.field("resource_policies", &self.resource_policies);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::resource_policies_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::resource_policies_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourcePolicy");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field(
            "disk_consistency_group_policy",
            &self.disk_consistency_group_policy,
        );
        debug_struct.field("group_placement_policy", &self.group_placement_policy);
        debug_struct.field("id", &self.id);
        debug_struct.field("instance_schedule_policy", &self.instance_schedule_policy);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource_status", &self.resource_status);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("snapshot_schedule_policy", &self.snapshot_schedule_policy);
        debug_struct.field("status", &self.status);
        debug_struct.field("workload_policy", &self.workload_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicyAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourcePolicyAggregatedList");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::resource_policy_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::resource_policy_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicyDailyCycle {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourcePolicyDailyCycle");
        debug_struct.field("days_in_cycle", &self.days_in_cycle);
        debug_struct.field("duration", &self.duration);
        debug_struct.field("start_time", &self.start_time);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicyDiskConsistencyGroupPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourcePolicyDiskConsistencyGroupPolicy");
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicyGroupPlacementPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourcePolicyGroupPlacementPolicy");
        debug_struct.field("availability_domain_count", &self.availability_domain_count);
        debug_struct.field("collocation", &self.collocation);
        debug_struct.field("gpu_topology", &self.gpu_topology);
        debug_struct.field("vm_count", &self.vm_count);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicyHourlyCycle {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourcePolicyHourlyCycle");
        debug_struct.field("duration", &self.duration);
        debug_struct.field("hours_in_cycle", &self.hours_in_cycle);
        debug_struct.field("start_time", &self.start_time);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicyInstanceSchedulePolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourcePolicyInstanceSchedulePolicy");
        debug_struct.field("expiration_time", &self.expiration_time);
        debug_struct.field("start_time", &self.start_time);
        debug_struct.field("time_zone", &self.time_zone);
        debug_struct.field("vm_start_schedule", &self.vm_start_schedule);
        debug_struct.field("vm_stop_schedule", &self.vm_stop_schedule);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicyInstanceSchedulePolicySchedule {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourcePolicyInstanceSchedulePolicySchedule");
        debug_struct.field("schedule", &self.schedule);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicyList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourcePolicyList");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::resource_policy_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::resource_policy_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicyResourceStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourcePolicyResourceStatus");
        debug_struct.field("instance_schedule_policy", &self.instance_schedule_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicyResourceStatusInstanceSchedulePolicyStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("ResourcePolicyResourceStatusInstanceSchedulePolicyStatus");
        debug_struct.field("last_run_start_time", &self.last_run_start_time);
        debug_struct.field("next_run_start_time", &self.next_run_start_time);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicySnapshotSchedulePolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourcePolicySnapshotSchedulePolicy");
        debug_struct.field("retention_policy", &self.retention_policy);
        debug_struct.field("schedule", &self.schedule);
        debug_struct.field("snapshot_properties", &self.snapshot_properties);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicySnapshotSchedulePolicyRetentionPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("ResourcePolicySnapshotSchedulePolicyRetentionPolicy");
        debug_struct.field("max_retention_days", &self.max_retention_days);
        debug_struct.field("on_source_disk_delete", &self.on_source_disk_delete);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicySnapshotSchedulePolicySchedule {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourcePolicySnapshotSchedulePolicySchedule");
        debug_struct.field("daily_schedule", &self.daily_schedule);
        debug_struct.field("hourly_schedule", &self.hourly_schedule);
        debug_struct.field("weekly_schedule", &self.weekly_schedule);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicySnapshotSchedulePolicySnapshotProperties {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("ResourcePolicySnapshotSchedulePolicySnapshotProperties");
        debug_struct.field("chain_name", &self.chain_name);
        debug_struct.field("guest_flush", &self.guest_flush);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("storage_locations", &self.storage_locations);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicyWeeklyCycle {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourcePolicyWeeklyCycle");
        debug_struct.field("day_of_weeks", &self.day_of_weeks);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicyWeeklyCycleDayOfWeek {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourcePolicyWeeklyCycleDayOfWeek");
        debug_struct.field("day", &self.day);
        debug_struct.field("duration", &self.duration);
        debug_struct.field("start_time", &self.start_time);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::ResourcePolicyWorkloadPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourcePolicyWorkloadPolicy");
        debug_struct.field("accelerator_topology", &self.accelerator_topology);
        debug_struct.field("max_topology_distance", &self.max_topology_distance);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::ResourceStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourceStatus");
        debug_struct.field(
            "effective_instance_metadata",
            &self.effective_instance_metadata,
        );
        debug_struct.field("physical_host", &self.physical_host);
        debug_struct.field("physical_host_topology", &self.physical_host_topology);
        debug_struct.field(
            "reservation_consumption_info",
            &self.reservation_consumption_info,
        );
        debug_struct.field("scheduling", &self.scheduling);
        debug_struct.field("upcoming_maintenance", &self.upcoming_maintenance);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::ResourceStatusEffectiveInstanceMetadata {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourceStatusEffectiveInstanceMetadata");
        debug_struct.field(
            "block_project_ssh_keys_metadata_value",
            &self.block_project_ssh_keys_metadata_value,
        );
        debug_struct.field(
            "enable_guest_attributes_metadata_value",
            &self.enable_guest_attributes_metadata_value,
        );
        debug_struct.field(
            "enable_os_inventory_metadata_value",
            &self.enable_os_inventory_metadata_value,
        );
        debug_struct.field(
            "enable_osconfig_metadata_value",
            &self.enable_osconfig_metadata_value,
        );
        debug_struct.field(
            "enable_oslogin_metadata_value",
            &self.enable_oslogin_metadata_value,
        );
        debug_struct.field(
            "serial_port_enable_metadata_value",
            &self.serial_port_enable_metadata_value,
        );
        debug_struct.field(
            "serial_port_logging_enable_metadata_value",
            &self.serial_port_logging_enable_metadata_value,
        );
        debug_struct.field(
            "vm_dns_setting_metadata_value",
            &self.vm_dns_setting_metadata_value,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::ResourceStatusPhysicalHostTopology {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourceStatusPhysicalHostTopology");
        debug_struct.field("block", &self.block);
        debug_struct.field("cluster", &self.cluster);
        debug_struct.field("host", &self.host);
        debug_struct.field("subblock", &self.subblock);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::ResourceStatusReservationConsumptionInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourceStatusReservationConsumptionInfo");
        debug_struct.field("consumed_reservation", &self.consumed_reservation);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::ResourceStatusScheduling {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResourceStatusScheduling");
        debug_struct.field("availability_domain", &self.availability_domain);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "routers", feature = "routes",))]
impl std::fmt::Debug for super::Route {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Route");
        debug_struct.field("as_paths", &self.as_paths);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("dest_range", &self.dest_range);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("network", &self.network);
        debug_struct.field("next_hop_gateway", &self.next_hop_gateway);
        debug_struct.field("next_hop_hub", &self.next_hop_hub);
        debug_struct.field("next_hop_ilb", &self.next_hop_ilb);
        debug_struct.field("next_hop_instance", &self.next_hop_instance);
        debug_struct.field(
            "next_hop_inter_region_cost",
            &self.next_hop_inter_region_cost,
        );
        debug_struct.field("next_hop_ip", &self.next_hop_ip);
        debug_struct.field("next_hop_med", &self.next_hop_med);
        debug_struct.field("next_hop_network", &self.next_hop_network);
        debug_struct.field("next_hop_origin", &self.next_hop_origin);
        debug_struct.field("next_hop_peering", &self.next_hop_peering);
        debug_struct.field("next_hop_vpn_tunnel", &self.next_hop_vpn_tunnel);
        debug_struct.field("params", &self.params);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("route_status", &self.route_status);
        debug_struct.field("route_type", &self.route_type);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("tags", &self.tags);
        debug_struct.field("warnings", &self.warnings);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "routers", feature = "routes",))]
impl std::fmt::Debug for super::route::Warnings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warnings");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "routers", feature = "routes",))]
impl std::fmt::Debug for super::route::warnings::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "routers", feature = "routes",))]
impl std::fmt::Debug for super::RouteAsPath {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouteAsPath");
        debug_struct.field("as_lists", &self.as_lists);
        debug_struct.field("path_segment_type", &self.path_segment_type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routes")]
impl std::fmt::Debug for super::RouteList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouteList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routes")]
impl std::fmt::Debug for super::route_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routes")]
impl std::fmt::Debug for super::route_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "routers", feature = "routes",))]
impl std::fmt::Debug for super::RouteParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouteParams");
        debug_struct.field("resource_manager_tags", &self.resource_manager_tags);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RoutePolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RoutePolicy");
        debug_struct.field("description", &self.description);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("name", &self.name);
        debug_struct.field("terms", &self.terms);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RoutePolicyPolicyTerm {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RoutePolicyPolicyTerm");
        debug_struct.field("actions", &self.actions);
        debug_struct.field("r#match", &self.r#match);
        debug_struct.field("priority", &self.priority);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::Router {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Router");
        debug_struct.field("bgp", &self.bgp);
        debug_struct.field("bgp_peers", &self.bgp_peers);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field(
            "encrypted_interconnect_router",
            &self.encrypted_interconnect_router,
        );
        debug_struct.field("id", &self.id);
        debug_struct.field("interfaces", &self.interfaces);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("md_5_authentication_keys", &self.md_5_authentication_keys);
        debug_struct.field("name", &self.name);
        debug_struct.field("nats", &self.nats);
        debug_struct.field("network", &self.network);
        debug_struct.field("params", &self.params);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterAdvertisedIpRange {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterAdvertisedIpRange");
        debug_struct.field("description", &self.description);
        debug_struct.field("range", &self.range);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::router_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::router_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterBgp {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterBgp");
        debug_struct.field("advertise_mode", &self.advertise_mode);
        debug_struct.field("advertised_groups", &self.advertised_groups);
        debug_struct.field("advertised_ip_ranges", &self.advertised_ip_ranges);
        debug_struct.field("asn", &self.asn);
        debug_struct.field("identifier_range", &self.identifier_range);
        debug_struct.field("keepalive_interval", &self.keepalive_interval);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterBgpPeer {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterBgpPeer");
        debug_struct.field("advertise_mode", &self.advertise_mode);
        debug_struct.field("advertised_groups", &self.advertised_groups);
        debug_struct.field("advertised_ip_ranges", &self.advertised_ip_ranges);
        debug_struct.field("advertised_route_priority", &self.advertised_route_priority);
        debug_struct.field("bfd", &self.bfd);
        debug_struct.field("custom_learned_ip_ranges", &self.custom_learned_ip_ranges);
        debug_struct.field(
            "custom_learned_route_priority",
            &self.custom_learned_route_priority,
        );
        debug_struct.field("enable", &self.enable);
        debug_struct.field("enable_ipv_4", &self.enable_ipv_4);
        debug_struct.field("enable_ipv_6", &self.enable_ipv_6);
        debug_struct.field("export_policies", &self.export_policies);
        debug_struct.field("import_policies", &self.import_policies);
        debug_struct.field("interface_name", &self.interface_name);
        debug_struct.field("ip_address", &self.ip_address);
        debug_struct.field("ipv_4_nexthop_address", &self.ipv_4_nexthop_address);
        debug_struct.field("ipv_6_nexthop_address", &self.ipv_6_nexthop_address);
        debug_struct.field("management_type", &self.management_type);
        debug_struct.field(
            "md_5_authentication_key_name",
            &self.md_5_authentication_key_name,
        );
        debug_struct.field("name", &self.name);
        debug_struct.field("peer_asn", &self.peer_asn);
        debug_struct.field("peer_ip_address", &self.peer_ip_address);
        debug_struct.field(
            "peer_ipv_4_nexthop_address",
            &self.peer_ipv_4_nexthop_address,
        );
        debug_struct.field(
            "peer_ipv_6_nexthop_address",
            &self.peer_ipv_6_nexthop_address,
        );
        debug_struct.field("router_appliance_instance", &self.router_appliance_instance);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterBgpPeerBfd {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterBgpPeerBfd");
        debug_struct.field("min_receive_interval", &self.min_receive_interval);
        debug_struct.field("min_transmit_interval", &self.min_transmit_interval);
        debug_struct.field("multiplier", &self.multiplier);
        debug_struct.field(
            "session_initialization_mode",
            &self.session_initialization_mode,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterBgpPeerCustomLearnedIpRange {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterBgpPeerCustomLearnedIpRange");
        debug_struct.field("range", &self.range);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterInterface {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterInterface");
        debug_struct.field("ip_range", &self.ip_range);
        debug_struct.field("ip_version", &self.ip_version);
        debug_struct.field(
            "linked_interconnect_attachment",
            &self.linked_interconnect_attachment,
        );
        debug_struct.field("linked_vpn_tunnel", &self.linked_vpn_tunnel);
        debug_struct.field("management_type", &self.management_type);
        debug_struct.field("name", &self.name);
        debug_struct.field("private_ip_address", &self.private_ip_address);
        debug_struct.field("redundant_interface", &self.redundant_interface);
        debug_struct.field("subnetwork", &self.subnetwork);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::router_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::router_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterMd5AuthenticationKey {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterMd5AuthenticationKey");
        debug_struct.field("key", &self.key);
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterNat {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterNat");
        debug_struct.field("auto_network_tier", &self.auto_network_tier);
        debug_struct.field("drain_nat_ips", &self.drain_nat_ips);
        debug_struct.field(
            "enable_dynamic_port_allocation",
            &self.enable_dynamic_port_allocation,
        );
        debug_struct.field(
            "enable_endpoint_independent_mapping",
            &self.enable_endpoint_independent_mapping,
        );
        debug_struct.field("endpoint_types", &self.endpoint_types);
        debug_struct.field("icmp_idle_timeout_sec", &self.icmp_idle_timeout_sec);
        debug_struct.field("log_config", &self.log_config);
        debug_struct.field("max_ports_per_vm", &self.max_ports_per_vm);
        debug_struct.field("min_ports_per_vm", &self.min_ports_per_vm);
        debug_struct.field("name", &self.name);
        debug_struct.field("nat_64_subnetworks", &self.nat_64_subnetworks);
        debug_struct.field("nat_ip_allocate_option", &self.nat_ip_allocate_option);
        debug_struct.field("nat_ips", &self.nat_ips);
        debug_struct.field("rules", &self.rules);
        debug_struct.field(
            "source_subnetwork_ip_ranges_to_nat",
            &self.source_subnetwork_ip_ranges_to_nat,
        );
        debug_struct.field(
            "source_subnetwork_ip_ranges_to_nat_64",
            &self.source_subnetwork_ip_ranges_to_nat_64,
        );
        debug_struct.field("subnetworks", &self.subnetworks);
        debug_struct.field(
            "tcp_established_idle_timeout_sec",
            &self.tcp_established_idle_timeout_sec,
        );
        debug_struct.field("tcp_time_wait_timeout_sec", &self.tcp_time_wait_timeout_sec);
        debug_struct.field(
            "tcp_transitory_idle_timeout_sec",
            &self.tcp_transitory_idle_timeout_sec,
        );
        debug_struct.field("r#type", &self.r#type);
        debug_struct.field("udp_idle_timeout_sec", &self.udp_idle_timeout_sec);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterNatLogConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterNatLogConfig");
        debug_struct.field("enable", &self.enable);
        debug_struct.field("filter", &self.filter);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterNatRule {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterNatRule");
        debug_struct.field("action", &self.action);
        debug_struct.field("description", &self.description);
        debug_struct.field("r#match", &self.r#match);
        debug_struct.field("rule_number", &self.rule_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterNatRuleAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterNatRuleAction");
        debug_struct.field("source_nat_active_ips", &self.source_nat_active_ips);
        debug_struct.field("source_nat_active_ranges", &self.source_nat_active_ranges);
        debug_struct.field("source_nat_drain_ips", &self.source_nat_drain_ips);
        debug_struct.field("source_nat_drain_ranges", &self.source_nat_drain_ranges);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterNatSubnetworkToNat {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterNatSubnetworkToNat");
        debug_struct.field("name", &self.name);
        debug_struct.field("secondary_ip_range_names", &self.secondary_ip_range_names);
        debug_struct.field("source_ip_ranges_to_nat", &self.source_ip_ranges_to_nat);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterNatSubnetworkToNat64 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterNatSubnetworkToNat64");
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterParams");
        debug_struct.field("resource_manager_tags", &self.resource_manager_tags);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterStatus");
        debug_struct.field("best_routes", &self.best_routes);
        debug_struct.field("best_routes_for_router", &self.best_routes_for_router);
        debug_struct.field("bgp_peer_status", &self.bgp_peer_status);
        debug_struct.field("nat_status", &self.nat_status);
        debug_struct.field("network", &self.network);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterStatusBgpPeerStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterStatusBgpPeerStatus");
        debug_struct.field("advertised_routes", &self.advertised_routes);
        debug_struct.field("bfd_status", &self.bfd_status);
        debug_struct.field("enable_ipv_4", &self.enable_ipv_4);
        debug_struct.field("enable_ipv_6", &self.enable_ipv_6);
        debug_struct.field("ip_address", &self.ip_address);
        debug_struct.field("ipv_4_nexthop_address", &self.ipv_4_nexthop_address);
        debug_struct.field("ipv_6_nexthop_address", &self.ipv_6_nexthop_address);
        debug_struct.field("linked_vpn_tunnel", &self.linked_vpn_tunnel);
        debug_struct.field("md_5_auth_enabled", &self.md_5_auth_enabled);
        debug_struct.field("name", &self.name);
        debug_struct.field("num_learned_routes", &self.num_learned_routes);
        debug_struct.field("peer_ip_address", &self.peer_ip_address);
        debug_struct.field(
            "peer_ipv_4_nexthop_address",
            &self.peer_ipv_4_nexthop_address,
        );
        debug_struct.field(
            "peer_ipv_6_nexthop_address",
            &self.peer_ipv_6_nexthop_address,
        );
        debug_struct.field("router_appliance_instance", &self.router_appliance_instance);
        debug_struct.field("state", &self.state);
        debug_struct.field("status", &self.status);
        debug_struct.field("status_reason", &self.status_reason);
        debug_struct.field("uptime", &self.uptime);
        debug_struct.field("uptime_seconds", &self.uptime_seconds);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterStatusNatStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterStatusNatStatus");
        debug_struct.field("auto_allocated_nat_ips", &self.auto_allocated_nat_ips);
        debug_struct.field(
            "drain_auto_allocated_nat_ips",
            &self.drain_auto_allocated_nat_ips,
        );
        debug_struct.field(
            "drain_user_allocated_nat_ips",
            &self.drain_user_allocated_nat_ips,
        );
        debug_struct.field("min_extra_nat_ips_needed", &self.min_extra_nat_ips_needed);
        debug_struct.field("name", &self.name);
        debug_struct.field(
            "num_vm_endpoints_with_nat_mappings",
            &self.num_vm_endpoints_with_nat_mappings,
        );
        debug_struct.field("rule_status", &self.rule_status);
        debug_struct.field(
            "user_allocated_nat_ip_resources",
            &self.user_allocated_nat_ip_resources,
        );
        debug_struct.field("user_allocated_nat_ips", &self.user_allocated_nat_ips);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterStatusNatStatusNatRuleStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterStatusNatStatusNatRuleStatus");
        debug_struct.field("active_nat_ips", &self.active_nat_ips);
        debug_struct.field("drain_nat_ips", &self.drain_nat_ips);
        debug_struct.field("min_extra_ips_needed", &self.min_extra_ips_needed);
        debug_struct.field(
            "num_vm_endpoints_with_nat_mappings",
            &self.num_vm_endpoints_with_nat_mappings,
        );
        debug_struct.field("rule_number", &self.rule_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RouterStatusResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RouterStatusResponse");
        debug_struct.field("kind", &self.kind);
        debug_struct.field("result", &self.result);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RoutersGetRoutePolicyResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RoutersGetRoutePolicyResponse");
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RoutersListBgpRoutes {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RoutersListBgpRoutes");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("result", &self.result);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers_list_bgp_routes::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers_list_bgp_routes::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RoutersListRoutePolicies {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RoutersListRoutePolicies");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("result", &self.result);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers_list_route_policies::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers_list_route_policies::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RoutersPreviewResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RoutersPreviewResponse");
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::RoutersScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RoutersScopedList");
        debug_struct.field("routers", &self.routers);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "health-checks", feature = "region-health-checks",))]
impl std::fmt::Debug for super::SSLHealthCheck {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SSLHealthCheck");
        debug_struct.field("port", &self.port);
        debug_struct.field("port_name", &self.port_name);
        debug_struct.field("port_specification", &self.port_specification);
        debug_struct.field("proxy_header", &self.proxy_header);
        debug_struct.field("request", &self.request);
        debug_struct.field("response", &self.response);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-images")]
impl std::fmt::Debug for super::SavedAttachedDisk {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SavedAttachedDisk");
        debug_struct.field("auto_delete", &self.auto_delete);
        debug_struct.field("boot", &self.boot);
        debug_struct.field("device_name", &self.device_name);
        debug_struct.field("disk_encryption_key", &self.disk_encryption_key);
        debug_struct.field("disk_size_gb", &self.disk_size_gb);
        debug_struct.field("disk_type", &self.disk_type);
        debug_struct.field("guest_os_features", &self.guest_os_features);
        debug_struct.field("index", &self.index);
        debug_struct.field("interface", &self.interface);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("licenses", &self.licenses);
        debug_struct.field("mode", &self.mode);
        debug_struct.field("source", &self.source);
        debug_struct.field("storage_bytes", &self.storage_bytes);
        debug_struct.field("storage_bytes_status", &self.storage_bytes_status);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-images")]
impl std::fmt::Debug for super::SavedDisk {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SavedDisk");
        debug_struct.field("architecture", &self.architecture);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("source_disk", &self.source_disk);
        debug_struct.field("storage_bytes", &self.storage_bytes);
        debug_struct.field("storage_bytes_status", &self.storage_bytes_status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "autoscalers", feature = "region-autoscalers",))]
impl std::fmt::Debug for super::ScalingScheduleStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ScalingScheduleStatus");
        debug_struct.field("last_start_time", &self.last_start_time);
        debug_struct.field("next_start_time", &self.next_start_time);
        debug_struct.field("state", &self.state);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::Scheduling {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Scheduling");
        debug_struct.field("automatic_restart", &self.automatic_restart);
        debug_struct.field("availability_domain", &self.availability_domain);
        debug_struct.field(
            "host_error_timeout_seconds",
            &self.host_error_timeout_seconds,
        );
        debug_struct.field(
            "instance_termination_action",
            &self.instance_termination_action,
        );
        debug_struct.field(
            "local_ssd_recovery_timeout",
            &self.local_ssd_recovery_timeout,
        );
        debug_struct.field("location_hint", &self.location_hint);
        debug_struct.field("max_run_duration", &self.max_run_duration);
        debug_struct.field("min_node_cpus", &self.min_node_cpus);
        debug_struct.field("node_affinities", &self.node_affinities);
        debug_struct.field("on_host_maintenance", &self.on_host_maintenance);
        debug_struct.field("on_instance_stop_action", &self.on_instance_stop_action);
        debug_struct.field("preemptible", &self.preemptible);
        debug_struct.field("provisioning_model", &self.provisioning_model);
        debug_struct.field("skip_guest_os_shutdown", &self.skip_guest_os_shutdown);
        debug_struct.field("termination_time", &self.termination_time);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::SchedulingNodeAffinity {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SchedulingNodeAffinity");
        debug_struct.field("key", &self.key);
        debug_struct.field("operator", &self.operator);
        debug_struct.field("values", &self.values);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::SchedulingOnInstanceStopAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SchedulingOnInstanceStopAction");
        debug_struct.field("discard_local_ssd", &self.discard_local_ssd);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::Screenshot {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Screenshot");
        debug_struct.field("contents", &self.contents);
        debug_struct.field("kind", &self.kind);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::SecurityPoliciesAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPoliciesAggregatedList");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::security_policies_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::security_policies_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPoliciesListPreconfiguredExpressionSetsResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("SecurityPoliciesListPreconfiguredExpressionSetsResponse");
        debug_struct.field(
            "preconfigured_expression_sets",
            &self.preconfigured_expression_sets,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::SecurityPoliciesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPoliciesScopedList");
        debug_struct.field("security_policies", &self.security_policies);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::security_policies_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::security_policies_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPoliciesWafConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPoliciesWafConfig");
        debug_struct.field("waf_rules", &self.waf_rules);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicy");
        debug_struct.field(
            "adaptive_protection_config",
            &self.adaptive_protection_config,
        );
        debug_struct.field("advanced_options_config", &self.advanced_options_config);
        debug_struct.field("associations", &self.associations);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("ddos_protection_config", &self.ddos_protection_config);
        debug_struct.field("description", &self.description);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("name", &self.name);
        debug_struct.field("recaptcha_options_config", &self.recaptcha_options_config);
        debug_struct.field("region", &self.region);
        debug_struct.field("rules", &self.rules);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("short_name", &self.short_name);
        debug_struct.field("r#type", &self.r#type);
        debug_struct.field("user_defined_fields", &self.user_defined_fields);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyAdaptiveProtectionConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyAdaptiveProtectionConfig");
        debug_struct.field(
            "layer_7_ddos_defense_config",
            &self.layer_7_ddos_defense_config,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfig");
        debug_struct.field("enable", &self.enable);
        debug_struct.field("rule_visibility", &self.rule_visibility);
        debug_struct.field("threshold_configs", &self.threshold_configs);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug
    for super::SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfig
{
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct(
            "SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfig",
        );
        debug_struct.field(
            "auto_deploy_confidence_threshold",
            &self.auto_deploy_confidence_threshold,
        );
        debug_struct.field(
            "auto_deploy_expiration_sec",
            &self.auto_deploy_expiration_sec,
        );
        debug_struct.field(
            "auto_deploy_impacted_baseline_threshold",
            &self.auto_deploy_impacted_baseline_threshold,
        );
        debug_struct.field(
            "auto_deploy_load_threshold",
            &self.auto_deploy_load_threshold,
        );
        debug_struct.field("detection_absolute_qps", &self.detection_absolute_qps);
        debug_struct.field("detection_load_threshold", &self.detection_load_threshold);
        debug_struct.field(
            "detection_relative_to_baseline_qps",
            &self.detection_relative_to_baseline_qps,
        );
        debug_struct.field("name", &self.name);
        debug_struct.field(
            "traffic_granularity_configs",
            &self.traffic_granularity_configs,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfigTrafficGranularityConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyAdaptiveProtectionConfigLayer7DdosDefenseConfigThresholdConfigTrafficGranularityConfig");
        debug_struct.field("enable_each_unique_value", &self.enable_each_unique_value);
        debug_struct.field("r#type", &self.r#type);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyAdvancedOptionsConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyAdvancedOptionsConfig");
        debug_struct.field("json_custom_config", &self.json_custom_config);
        debug_struct.field("json_parsing", &self.json_parsing);
        debug_struct.field("log_level", &self.log_level);
        debug_struct.field("user_ip_request_headers", &self.user_ip_request_headers);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyAdvancedOptionsConfigJsonCustomConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("SecurityPolicyAdvancedOptionsConfigJsonCustomConfig");
        debug_struct.field("content_types", &self.content_types);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyAssociation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyAssociation");
        debug_struct.field("attachment_id", &self.attachment_id);
        debug_struct.field("display_name", &self.display_name);
        debug_struct.field("excluded_folders", &self.excluded_folders);
        debug_struct.field("excluded_projects", &self.excluded_projects);
        debug_struct.field("name", &self.name);
        debug_struct.field("security_policy_id", &self.security_policy_id);
        debug_struct.field("short_name", &self.short_name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyDdosProtectionConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyDdosProtectionConfig");
        debug_struct.field("ddos_protection", &self.ddos_protection);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::security_policy_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::security_policy_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyRecaptchaOptionsConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyRecaptchaOptionsConfig");
        debug_struct.field("redirect_site_key", &self.redirect_site_key);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "region-backend-services",
    feature = "target-instances",
    feature = "target-pools",
))]
impl std::fmt::Debug for super::SecurityPolicyReference {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyReference");
        debug_struct.field("security_policy", &self.security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyRule {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyRule");
        debug_struct.field("action", &self.action);
        debug_struct.field("description", &self.description);
        debug_struct.field("header_action", &self.header_action);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("r#match", &self.r#match);
        debug_struct.field("network_match", &self.network_match);
        debug_struct.field("preconfigured_waf_config", &self.preconfigured_waf_config);
        debug_struct.field("preview", &self.preview);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("rate_limit_options", &self.rate_limit_options);
        debug_struct.field("redirect_options", &self.redirect_options);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyRuleHttpHeaderAction {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyRuleHttpHeaderAction");
        debug_struct.field("request_headers_to_adds", &self.request_headers_to_adds);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyRuleHttpHeaderActionHttpHeaderOption {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyRuleHttpHeaderActionHttpHeaderOption");
        debug_struct.field("header_name", &self.header_name);
        debug_struct.field("header_value", &self.header_value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyRuleMatcher {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyRuleMatcher");
        debug_struct.field("config", &self.config);
        debug_struct.field("expr", &self.expr);
        debug_struct.field("expr_options", &self.expr_options);
        debug_struct.field("versioned_expr", &self.versioned_expr);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyRuleMatcherConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyRuleMatcherConfig");
        debug_struct.field("src_ip_ranges", &self.src_ip_ranges);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyRuleMatcherExprOptions {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyRuleMatcherExprOptions");
        debug_struct.field("recaptcha_options", &self.recaptcha_options);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyRuleMatcherExprOptionsRecaptchaOptions {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("SecurityPolicyRuleMatcherExprOptionsRecaptchaOptions");
        debug_struct.field("action_token_site_keys", &self.action_token_site_keys);
        debug_struct.field("session_token_site_keys", &self.session_token_site_keys);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyRuleNetworkMatcher {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyRuleNetworkMatcher");
        debug_struct.field("dest_ip_ranges", &self.dest_ip_ranges);
        debug_struct.field("dest_ports", &self.dest_ports);
        debug_struct.field("ip_protocols", &self.ip_protocols);
        debug_struct.field("src_asns", &self.src_asns);
        debug_struct.field("src_ip_ranges", &self.src_ip_ranges);
        debug_struct.field("src_ports", &self.src_ports);
        debug_struct.field("src_region_codes", &self.src_region_codes);
        debug_struct.field("user_defined_fields", &self.user_defined_fields);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyRuleNetworkMatcherUserDefinedFieldMatch {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("SecurityPolicyRuleNetworkMatcherUserDefinedFieldMatch");
        debug_struct.field("name", &self.name);
        debug_struct.field("values", &self.values);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyRulePreconfiguredWafConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyRulePreconfiguredWafConfig");
        debug_struct.field("exclusions", &self.exclusions);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyRulePreconfiguredWafConfigExclusion {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyRulePreconfiguredWafConfigExclusion");
        debug_struct.field(
            "request_cookies_to_exclude",
            &self.request_cookies_to_exclude,
        );
        debug_struct.field(
            "request_headers_to_exclude",
            &self.request_headers_to_exclude,
        );
        debug_struct.field(
            "request_query_params_to_exclude",
            &self.request_query_params_to_exclude,
        );
        debug_struct.field("request_uris_to_exclude", &self.request_uris_to_exclude);
        debug_struct.field("target_rule_ids", &self.target_rule_ids);
        debug_struct.field("target_rule_set", &self.target_rule_set);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("SecurityPolicyRulePreconfiguredWafConfigExclusionFieldParams");
        debug_struct.field("op", &self.op);
        debug_struct.field("val", &self.val);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyRuleRateLimitOptions {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyRuleRateLimitOptions");
        debug_struct.field("ban_duration_sec", &self.ban_duration_sec);
        debug_struct.field("ban_threshold", &self.ban_threshold);
        debug_struct.field("conform_action", &self.conform_action);
        debug_struct.field("enforce_on_key", &self.enforce_on_key);
        debug_struct.field("enforce_on_key_configs", &self.enforce_on_key_configs);
        debug_struct.field("enforce_on_key_name", &self.enforce_on_key_name);
        debug_struct.field("exceed_action", &self.exceed_action);
        debug_struct.field("exceed_redirect_options", &self.exceed_redirect_options);
        debug_struct.field("rate_limit_threshold", &self.rate_limit_threshold);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("SecurityPolicyRuleRateLimitOptionsEnforceOnKeyConfig");
        debug_struct.field("enforce_on_key_name", &self.enforce_on_key_name);
        debug_struct.field("enforce_on_key_type", &self.enforce_on_key_type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyRuleRateLimitOptionsThreshold {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyRuleRateLimitOptionsThreshold");
        debug_struct.field("count", &self.count);
        debug_struct.field("interval_sec", &self.interval_sec);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyRuleRedirectOptions {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyRuleRedirectOptions");
        debug_struct.field("target", &self.target);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "region-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::SecurityPolicyUserDefinedField {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecurityPolicyUserDefinedField");
        debug_struct.field("base", &self.base);
        debug_struct.field("mask", &self.mask);
        debug_struct.field("name", &self.name);
        debug_struct.field("offset", &self.offset);
        debug_struct.field("size", &self.size);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::SecuritySettings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SecuritySettings");
        debug_struct.field("aws_v_4_authentication", &self.aws_v_4_authentication);
        debug_struct.field("client_tls_policy", &self.client_tls_policy);
        debug_struct.field("subject_alt_names", &self.subject_alt_names);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::SerialPortOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SerialPortOutput");
        debug_struct.field("contents", &self.contents);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next", &self.next);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("start", &self.start);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "node-groups", feature = "node-templates",))]
impl std::fmt::Debug for super::ServerBinding {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ServerBinding");
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::ServiceAccount {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ServiceAccount");
        debug_struct.field("email", &self.email);
        debug_struct.field("scopes", &self.scopes);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::ServiceAttachment {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ServiceAttachment");
        debug_struct.field("connected_endpoints", &self.connected_endpoints);
        debug_struct.field("connection_preference", &self.connection_preference);
        debug_struct.field("consumer_accept_lists", &self.consumer_accept_lists);
        debug_struct.field("consumer_reject_lists", &self.consumer_reject_lists);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("domain_names", &self.domain_names);
        debug_struct.field("enable_proxy_protocol", &self.enable_proxy_protocol);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("metadata", &self.metadata);
        debug_struct.field("name", &self.name);
        debug_struct.field("nat_subnets", &self.nat_subnets);
        debug_struct.field("producer_forwarding_rule", &self.producer_forwarding_rule);
        debug_struct.field(
            "propagated_connection_limit",
            &self.propagated_connection_limit,
        );
        debug_struct.field("psc_service_attachment_id", &self.psc_service_attachment_id);
        debug_struct.field("reconcile_connections", &self.reconcile_connections);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("target_service", &self.target_service);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::ServiceAttachmentAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ServiceAttachmentAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::service_attachment_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::service_attachment_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::ServiceAttachmentConnectedEndpoint {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ServiceAttachmentConnectedEndpoint");
        debug_struct.field("consumer_network", &self.consumer_network);
        debug_struct.field("endpoint", &self.endpoint);
        debug_struct.field("nat_ips", &self.nat_ips);
        debug_struct.field(
            "propagated_connection_count",
            &self.propagated_connection_count,
        );
        debug_struct.field("psc_connection_id", &self.psc_connection_id);
        debug_struct.field("status", &self.status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::ServiceAttachmentConsumerProjectLimit {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ServiceAttachmentConsumerProjectLimit");
        debug_struct.field("connection_limit", &self.connection_limit);
        debug_struct.field("network_url", &self.network_url);
        debug_struct.field("project_id_or_num", &self.project_id_or_num);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::ServiceAttachmentList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ServiceAttachmentList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::service_attachment_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::service_attachment_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::ServiceAttachmentsScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ServiceAttachmentsScopedList");
        debug_struct.field("service_attachments", &self.service_attachments);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::service_attachments_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::service_attachments_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "autoscalers",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "cross-site-networks",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "firewalls",
    feature = "forwarding-rules",
    feature = "future-reservations",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "global-network-endpoint-groups",
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "global-public-delegated-prefixes",
    feature = "health-checks",
    feature = "http-health-checks",
    feature = "https-health-checks",
    feature = "images",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "instance-settings",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-attachments",
    feature = "interconnect-groups",
    feature = "interconnects",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-edge-security-services",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "node-groups",
    feature = "node-templates",
    feature = "organization-security-policies",
    feature = "packet-mirrorings",
    feature = "preview-features",
    feature = "projects",
    feature = "public-advertised-prefixes",
    feature = "public-delegated-prefixes",
    feature = "region-autoscalers",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-disks",
    feature = "region-health-check-services",
    feature = "region-health-checks",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-instant-snapshots",
    feature = "region-network-endpoint-groups",
    feature = "region-network-firewall-policies",
    feature = "region-notification-endpoints",
    feature = "region-operations",
    feature = "region-security-policies",
    feature = "region-ssl-certificates",
    feature = "region-ssl-policies",
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "region-target-tcp-proxies",
    feature = "region-url-maps",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
    feature = "resource-policies",
    feature = "routers",
    feature = "routes",
    feature = "security-policies",
    feature = "service-attachments",
    feature = "snapshot-settings",
    feature = "snapshots",
    feature = "ssl-certificates",
    feature = "ssl-policies",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-grpc-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
    feature = "target-instances",
    feature = "target-pools",
    feature = "target-ssl-proxies",
    feature = "target-tcp-proxies",
    feature = "target-vpn-gateways",
    feature = "url-maps",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
    feature = "wire-groups",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::SetCommonInstanceMetadataOperationMetadata {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetCommonInstanceMetadataOperationMetadata");
        debug_struct.field("client_operation_id", &self.client_operation_id);
        debug_struct.field("per_location_operations", &self.per_location_operations);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "autoscalers",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "cross-site-networks",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "firewalls",
    feature = "forwarding-rules",
    feature = "future-reservations",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "global-network-endpoint-groups",
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "global-public-delegated-prefixes",
    feature = "health-checks",
    feature = "http-health-checks",
    feature = "https-health-checks",
    feature = "images",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "instance-settings",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-attachments",
    feature = "interconnect-groups",
    feature = "interconnects",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-edge-security-services",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "node-groups",
    feature = "node-templates",
    feature = "organization-security-policies",
    feature = "packet-mirrorings",
    feature = "preview-features",
    feature = "projects",
    feature = "public-advertised-prefixes",
    feature = "public-delegated-prefixes",
    feature = "region-autoscalers",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-disks",
    feature = "region-health-check-services",
    feature = "region-health-checks",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-instant-snapshots",
    feature = "region-network-endpoint-groups",
    feature = "region-network-firewall-policies",
    feature = "region-notification-endpoints",
    feature = "region-operations",
    feature = "region-security-policies",
    feature = "region-ssl-certificates",
    feature = "region-ssl-policies",
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "region-target-tcp-proxies",
    feature = "region-url-maps",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
    feature = "resource-policies",
    feature = "routers",
    feature = "routes",
    feature = "security-policies",
    feature = "service-attachments",
    feature = "snapshot-settings",
    feature = "snapshots",
    feature = "ssl-certificates",
    feature = "ssl-policies",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-grpc-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
    feature = "target-instances",
    feature = "target-pools",
    feature = "target-ssl-proxies",
    feature = "target-tcp-proxies",
    feature = "target-vpn-gateways",
    feature = "url-maps",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
    feature = "wire-groups",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfo {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("SetCommonInstanceMetadataOperationMetadataPerLocationOperationInfo");
        debug_struct.field("error", &self.error);
        debug_struct.field("state", &self.state);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "future-reservations",
    feature = "node-groups",
    feature = "region-commitments",
    feature = "reservations",
))]
impl std::fmt::Debug for super::ShareSettings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ShareSettings");
        debug_struct.field("project_map", &self.project_map);
        debug_struct.field("share_type", &self.share_type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "future-reservations",
    feature = "node-groups",
    feature = "region-commitments",
    feature = "reservations",
))]
impl std::fmt::Debug for super::ShareSettingsProjectConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ShareSettingsProjectConfig");
        debug_struct.field("project_id", &self.project_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::ShieldedInstanceConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ShieldedInstanceConfig");
        debug_struct.field(
            "enable_integrity_monitoring",
            &self.enable_integrity_monitoring,
        );
        debug_struct.field("enable_secure_boot", &self.enable_secure_boot);
        debug_struct.field("enable_vtpm", &self.enable_vtpm);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::ShieldedInstanceIdentity {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ShieldedInstanceIdentity");
        debug_struct.field("encryption_key", &self.encryption_key);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("signing_key", &self.signing_key);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::ShieldedInstanceIdentityEntry {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ShieldedInstanceIdentityEntry");
        debug_struct.field("ek_cert", &self.ek_cert);
        debug_struct.field("ek_pub", &self.ek_pub);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::ShieldedInstanceIntegrityPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ShieldedInstanceIntegrityPolicy");
        debug_struct.field("update_auto_learn_policy", &self.update_auto_learn_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-buckets", feature = "backend-services",))]
impl std::fmt::Debug for super::SignedUrlKey {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SignedUrlKey");
        debug_struct.field("key_name", &self.key_name);
        debug_struct.field("key_value", &self.key_value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "disks", feature = "region-disks", feature = "snapshots",))]
impl std::fmt::Debug for super::Snapshot {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Snapshot");
        debug_struct.field("architecture", &self.architecture);
        debug_struct.field("auto_created", &self.auto_created);
        debug_struct.field("chain_name", &self.chain_name);
        debug_struct.field("creation_size_bytes", &self.creation_size_bytes);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("disk_size_gb", &self.disk_size_gb);
        debug_struct.field("download_bytes", &self.download_bytes);
        debug_struct.field(
            "enable_confidential_compute",
            &self.enable_confidential_compute,
        );
        debug_struct.field("guest_flush", &self.guest_flush);
        debug_struct.field("guest_os_features", &self.guest_os_features);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("license_codes", &self.license_codes);
        debug_struct.field("licenses", &self.licenses);
        debug_struct.field("location_hint", &self.location_hint);
        debug_struct.field("name", &self.name);
        debug_struct.field("params", &self.params);
        debug_struct.field("satisfies_pzi", &self.satisfies_pzi);
        debug_struct.field("satisfies_pzs", &self.satisfies_pzs);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("snapshot_encryption_key", &self.snapshot_encryption_key);
        debug_struct.field("snapshot_type", &self.snapshot_type);
        debug_struct.field("source_disk", &self.source_disk);
        debug_struct.field(
            "source_disk_encryption_key",
            &self.source_disk_encryption_key,
        );
        debug_struct.field(
            "source_disk_for_recovery_checkpoint",
            &self.source_disk_for_recovery_checkpoint,
        );
        debug_struct.field("source_disk_id", &self.source_disk_id);
        debug_struct.field("source_instant_snapshot", &self.source_instant_snapshot);
        debug_struct.field(
            "source_instant_snapshot_encryption_key",
            &self.source_instant_snapshot_encryption_key,
        );
        debug_struct.field(
            "source_instant_snapshot_id",
            &self.source_instant_snapshot_id,
        );
        debug_struct.field(
            "source_snapshot_schedule_policy",
            &self.source_snapshot_schedule_policy,
        );
        debug_struct.field(
            "source_snapshot_schedule_policy_id",
            &self.source_snapshot_schedule_policy_id,
        );
        debug_struct.field("status", &self.status);
        debug_struct.field("storage_bytes", &self.storage_bytes);
        debug_struct.field("storage_bytes_status", &self.storage_bytes_status);
        debug_struct.field("storage_locations", &self.storage_locations);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "snapshots")]
impl std::fmt::Debug for super::SnapshotList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SnapshotList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "snapshots")]
impl std::fmt::Debug for super::snapshot_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "snapshots")]
impl std::fmt::Debug for super::snapshot_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "disks", feature = "region-disks", feature = "snapshots",))]
impl std::fmt::Debug for super::SnapshotParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SnapshotParams");
        debug_struct.field("resource_manager_tags", &self.resource_manager_tags);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "snapshot-settings")]
impl std::fmt::Debug for super::SnapshotSettings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SnapshotSettings");
        debug_struct.field("storage_location", &self.storage_location);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "snapshot-settings")]
impl std::fmt::Debug for super::SnapshotSettingsStorageLocationSettings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SnapshotSettingsStorageLocationSettings");
        debug_struct.field("locations", &self.locations);
        debug_struct.field("policy", &self.policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "snapshot-settings")]
impl std::fmt::Debug for super::SnapshotSettingsStorageLocationSettingsStorageLocationPreference {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("SnapshotSettingsStorageLocationSettingsStorageLocationPreference");
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-images")]
impl std::fmt::Debug for super::SourceDiskEncryptionKey {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SourceDiskEncryptionKey");
        debug_struct.field("disk_encryption_key", &self.disk_encryption_key);
        debug_struct.field("source_disk", &self.source_disk);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "instance-templates", feature = "region-instance-templates",))]
impl std::fmt::Debug for super::SourceInstanceParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SourceInstanceParams");
        debug_struct.field("disk_configs", &self.disk_configs);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-images")]
impl std::fmt::Debug for super::SourceInstanceProperties {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SourceInstanceProperties");
        debug_struct.field("can_ip_forward", &self.can_ip_forward);
        debug_struct.field("deletion_protection", &self.deletion_protection);
        debug_struct.field("description", &self.description);
        debug_struct.field("disks", &self.disks);
        debug_struct.field("guest_accelerators", &self.guest_accelerators);
        debug_struct.field(
            "key_revocation_action_type",
            &self.key_revocation_action_type,
        );
        debug_struct.field("labels", &self.labels);
        debug_struct.field("machine_type", &self.machine_type);
        debug_struct.field("metadata", &self.metadata);
        debug_struct.field("min_cpu_platform", &self.min_cpu_platform);
        debug_struct.field("network_interfaces", &self.network_interfaces);
        debug_struct.field("scheduling", &self.scheduling);
        debug_struct.field("service_accounts", &self.service_accounts);
        debug_struct.field("tags", &self.tags);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-ssl-certificates", feature = "ssl-certificates",))]
impl std::fmt::Debug for super::SslCertificate {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SslCertificate");
        debug_struct.field("certificate", &self.certificate);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("expire_time", &self.expire_time);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("managed", &self.managed);
        debug_struct.field("name", &self.name);
        debug_struct.field("private_key", &self.private_key);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("self_managed", &self.self_managed);
        debug_struct.field("subject_alternative_names", &self.subject_alternative_names);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-certificates")]
impl std::fmt::Debug for super::SslCertificateAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SslCertificateAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-certificates")]
impl std::fmt::Debug for super::ssl_certificate_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-certificates")]
impl std::fmt::Debug for super::ssl_certificate_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-ssl-certificates", feature = "ssl-certificates",))]
impl std::fmt::Debug for super::SslCertificateList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SslCertificateList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-ssl-certificates", feature = "ssl-certificates",))]
impl std::fmt::Debug for super::ssl_certificate_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-ssl-certificates", feature = "ssl-certificates",))]
impl std::fmt::Debug for super::ssl_certificate_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-ssl-certificates", feature = "ssl-certificates",))]
impl std::fmt::Debug for super::SslCertificateManagedSslCertificate {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SslCertificateManagedSslCertificate");
        debug_struct.field("domain_status", &self.domain_status);
        debug_struct.field("domains", &self.domains);
        debug_struct.field("status", &self.status);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-ssl-certificates", feature = "ssl-certificates",))]
impl std::fmt::Debug for super::SslCertificateSelfManagedSslCertificate {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SslCertificateSelfManagedSslCertificate");
        debug_struct.field("certificate", &self.certificate);
        debug_struct.field("private_key", &self.private_key);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-certificates")]
impl std::fmt::Debug for super::SslCertificatesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SslCertificatesScopedList");
        debug_struct.field("ssl_certificates", &self.ssl_certificates);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-certificates")]
impl std::fmt::Debug for super::ssl_certificates_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-certificates")]
impl std::fmt::Debug for super::ssl_certificates_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-policies")]
impl std::fmt::Debug for super::SslPoliciesAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SslPoliciesAggregatedList");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-policies")]
impl std::fmt::Debug for super::ssl_policies_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-policies")]
impl std::fmt::Debug for super::ssl_policies_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-ssl-policies", feature = "ssl-policies",))]
impl std::fmt::Debug for super::SslPoliciesList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SslPoliciesList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-ssl-policies", feature = "ssl-policies",))]
impl std::fmt::Debug for super::ssl_policies_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-ssl-policies", feature = "ssl-policies",))]
impl std::fmt::Debug for super::ssl_policies_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-ssl-policies", feature = "ssl-policies",))]
impl std::fmt::Debug for super::SslPoliciesListAvailableFeaturesResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SslPoliciesListAvailableFeaturesResponse");
        debug_struct.field("features", &self.features);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-policies")]
impl std::fmt::Debug for super::SslPoliciesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SslPoliciesScopedList");
        debug_struct.field("ssl_policies", &self.ssl_policies);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-policies")]
impl std::fmt::Debug for super::ssl_policies_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-policies")]
impl std::fmt::Debug for super::ssl_policies_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-ssl-policies", feature = "ssl-policies",))]
impl std::fmt::Debug for super::SslPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SslPolicy");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("custom_features", &self.custom_features);
        debug_struct.field("description", &self.description);
        debug_struct.field("enabled_features", &self.enabled_features);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("min_tls_version", &self.min_tls_version);
        debug_struct.field("name", &self.name);
        debug_struct.field("profile", &self.profile);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warnings", &self.warnings);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-ssl-policies", feature = "ssl-policies",))]
impl std::fmt::Debug for super::ssl_policy::Warnings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warnings");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-ssl-policies", feature = "ssl-policies",))]
impl std::fmt::Debug for super::ssl_policy::warnings::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "target-https-proxies", feature = "target-ssl-proxies",))]
impl std::fmt::Debug for super::SslPolicyReference {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SslPolicyReference");
        debug_struct.field("ssl_policy", &self.ssl_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::StatefulPolicy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StatefulPolicy");
        debug_struct.field("preserved_state", &self.preserved_state);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::StatefulPolicyPreservedState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StatefulPolicyPreservedState");
        debug_struct.field("disks", &self.disks);
        debug_struct.field("external_i_ps", &self.external_i_ps);
        debug_struct.field("internal_i_ps", &self.internal_i_ps);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::StatefulPolicyPreservedStateDiskDevice {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StatefulPolicyPreservedStateDiskDevice");
        debug_struct.field("auto_delete", &self.auto_delete);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-group-managers",
    feature = "region-instance-group-managers",
))]
impl std::fmt::Debug for super::StatefulPolicyPreservedStateNetworkIp {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StatefulPolicyPreservedStateNetworkIp");
        debug_struct.field("auto_delete", &self.auto_delete);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "autoscalers",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "cross-site-networks",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "firewalls",
    feature = "forwarding-rules",
    feature = "future-reservations",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "global-network-endpoint-groups",
    feature = "global-operations",
    feature = "global-organization-operations",
    feature = "global-public-delegated-prefixes",
    feature = "health-checks",
    feature = "http-health-checks",
    feature = "https-health-checks",
    feature = "images",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "instance-settings",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-attachments",
    feature = "interconnect-groups",
    feature = "interconnects",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-edge-security-services",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "node-groups",
    feature = "node-templates",
    feature = "organization-security-policies",
    feature = "packet-mirrorings",
    feature = "preview-features",
    feature = "projects",
    feature = "public-advertised-prefixes",
    feature = "public-delegated-prefixes",
    feature = "region-autoscalers",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-disks",
    feature = "region-health-check-services",
    feature = "region-health-checks",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-instant-snapshots",
    feature = "region-network-endpoint-groups",
    feature = "region-network-firewall-policies",
    feature = "region-notification-endpoints",
    feature = "region-operations",
    feature = "region-security-policies",
    feature = "region-ssl-certificates",
    feature = "region-ssl-policies",
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "region-target-tcp-proxies",
    feature = "region-url-maps",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
    feature = "resource-policies",
    feature = "routers",
    feature = "routes",
    feature = "security-policies",
    feature = "service-attachments",
    feature = "snapshot-settings",
    feature = "snapshots",
    feature = "ssl-certificates",
    feature = "ssl-policies",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-grpc-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
    feature = "target-instances",
    feature = "target-pools",
    feature = "target-ssl-proxies",
    feature = "target-tcp-proxies",
    feature = "target-vpn-gateways",
    feature = "url-maps",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
    feature = "wire-groups",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::Status {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Status");
        debug_struct.field("code", &self.code);
        debug_struct.field("details", &self.details);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::StoragePool {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StoragePool");
        debug_struct.field(
            "capacity_provisioning_type",
            &self.capacity_provisioning_type,
        );
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("name", &self.name);
        debug_struct.field(
            "performance_provisioning_type",
            &self.performance_provisioning_type,
        );
        debug_struct.field(
            "pool_provisioned_capacity_gb",
            &self.pool_provisioned_capacity_gb,
        );
        debug_struct.field("pool_provisioned_iops", &self.pool_provisioned_iops);
        debug_struct.field(
            "pool_provisioned_throughput",
            &self.pool_provisioned_throughput,
        );
        debug_struct.field("resource_status", &self.resource_status);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("self_link_with_id", &self.self_link_with_id);
        debug_struct.field("state", &self.state);
        debug_struct.field("status", &self.status);
        debug_struct.field("storage_pool_type", &self.storage_pool_type);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::StoragePoolAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StoragePoolAggregatedList");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pool_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pool_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::StoragePoolDisk {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StoragePoolDisk");
        debug_struct.field("attached_instances", &self.attached_instances);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("disk", &self.disk);
        debug_struct.field("name", &self.name);
        debug_struct.field("provisioned_iops", &self.provisioned_iops);
        debug_struct.field("provisioned_throughput", &self.provisioned_throughput);
        debug_struct.field("resource_policies", &self.resource_policies);
        debug_struct.field("size_gb", &self.size_gb);
        debug_struct.field("status", &self.status);
        debug_struct.field("r#type", &self.r#type);
        debug_struct.field("used_bytes", &self.used_bytes);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::StoragePoolList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StoragePoolList");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pool_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pool_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::StoragePoolListDisks {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StoragePoolListDisks");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pool_list_disks::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pool_list_disks::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::StoragePoolResourceStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StoragePoolResourceStatus");
        debug_struct.field("disk_count", &self.disk_count);
        debug_struct.field("last_resize_timestamp", &self.last_resize_timestamp);
        debug_struct.field(
            "max_total_provisioned_disk_capacity_gb",
            &self.max_total_provisioned_disk_capacity_gb,
        );
        debug_struct.field("pool_used_capacity_bytes", &self.pool_used_capacity_bytes);
        debug_struct.field("pool_used_iops", &self.pool_used_iops);
        debug_struct.field("pool_used_throughput", &self.pool_used_throughput);
        debug_struct.field("pool_user_written_bytes", &self.pool_user_written_bytes);
        debug_struct.field(
            "total_provisioned_disk_capacity_gb",
            &self.total_provisioned_disk_capacity_gb,
        );
        debug_struct.field(
            "total_provisioned_disk_iops",
            &self.total_provisioned_disk_iops,
        );
        debug_struct.field(
            "total_provisioned_disk_throughput",
            &self.total_provisioned_disk_throughput,
        );
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pool-types")]
impl std::fmt::Debug for super::StoragePoolType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StoragePoolType");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("deprecated", &self.deprecated);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field(
            "max_pool_provisioned_capacity_gb",
            &self.max_pool_provisioned_capacity_gb,
        );
        debug_struct.field("max_pool_provisioned_iops", &self.max_pool_provisioned_iops);
        debug_struct.field(
            "max_pool_provisioned_throughput",
            &self.max_pool_provisioned_throughput,
        );
        debug_struct.field(
            "min_pool_provisioned_capacity_gb",
            &self.min_pool_provisioned_capacity_gb,
        );
        debug_struct.field("min_pool_provisioned_iops", &self.min_pool_provisioned_iops);
        debug_struct.field(
            "min_pool_provisioned_throughput",
            &self.min_pool_provisioned_throughput,
        );
        debug_struct.field("min_size_gb", &self.min_size_gb);
        debug_struct.field("name", &self.name);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("self_link_with_id", &self.self_link_with_id);
        debug_struct.field("supported_disk_types", &self.supported_disk_types);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pool-types")]
impl std::fmt::Debug for super::StoragePoolTypeAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StoragePoolTypeAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pool-types")]
impl std::fmt::Debug for super::storage_pool_type_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pool-types")]
impl std::fmt::Debug for super::storage_pool_type_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pool-types")]
impl std::fmt::Debug for super::StoragePoolTypeList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StoragePoolTypeList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pool-types")]
impl std::fmt::Debug for super::storage_pool_type_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pool-types")]
impl std::fmt::Debug for super::storage_pool_type_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pool-types")]
impl std::fmt::Debug for super::StoragePoolTypesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StoragePoolTypesScopedList");
        debug_struct.field("storage_pool_types", &self.storage_pool_types);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pool-types")]
impl std::fmt::Debug for super::storage_pool_types_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pool-types")]
impl std::fmt::Debug for super::storage_pool_types_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::StoragePoolsScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StoragePoolsScopedList");
        debug_struct.field("storage_pools", &self.storage_pools);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pools_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pools_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::Subnetwork {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Subnetwork");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("enable_flow_logs", &self.enable_flow_logs);
        debug_struct.field("external_ipv_6_prefix", &self.external_ipv_6_prefix);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("gateway_address", &self.gateway_address);
        debug_struct.field("id", &self.id);
        debug_struct.field("internal_ipv_6_prefix", &self.internal_ipv_6_prefix);
        debug_struct.field("ip_cidr_range", &self.ip_cidr_range);
        debug_struct.field("ip_collection", &self.ip_collection);
        debug_struct.field("ipv_6_access_type", &self.ipv_6_access_type);
        debug_struct.field("ipv_6_cidr_range", &self.ipv_6_cidr_range);
        debug_struct.field("ipv_6_gce_endpoint", &self.ipv_6_gce_endpoint);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("log_config", &self.log_config);
        debug_struct.field("name", &self.name);
        debug_struct.field("network", &self.network);
        debug_struct.field("params", &self.params);
        debug_struct.field("private_ip_google_access", &self.private_ip_google_access);
        debug_struct.field(
            "private_ipv_6_google_access",
            &self.private_ipv_6_google_access,
        );
        debug_struct.field("purpose", &self.purpose);
        debug_struct.field("region", &self.region);
        debug_struct.field("reserved_internal_range", &self.reserved_internal_range);
        debug_struct.field("role", &self.role);
        debug_struct.field("secondary_ip_ranges", &self.secondary_ip_ranges);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("stack_type", &self.stack_type);
        debug_struct.field("state", &self.state);
        debug_struct.field(
            "system_reserved_external_ipv_6_ranges",
            &self.system_reserved_external_ipv_6_ranges,
        );
        debug_struct.field(
            "system_reserved_internal_ipv_6_ranges",
            &self.system_reserved_internal_ipv_6_ranges,
        );
        debug_struct.field("utilization_details", &self.utilization_details);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::SubnetworkAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SubnetworkAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetwork_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetwork_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::SubnetworkList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SubnetworkList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetwork_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetwork_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::SubnetworkLogConfig {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SubnetworkLogConfig");
        debug_struct.field("aggregation_interval", &self.aggregation_interval);
        debug_struct.field("enable", &self.enable);
        debug_struct.field("filter_expr", &self.filter_expr);
        debug_struct.field("flow_sampling", &self.flow_sampling);
        debug_struct.field("metadata", &self.metadata);
        debug_struct.field("metadata_fields", &self.metadata_fields);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::SubnetworkParams {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SubnetworkParams");
        debug_struct.field("resource_manager_tags", &self.resource_manager_tags);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::SubnetworkSecondaryRange {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SubnetworkSecondaryRange");
        debug_struct.field("ip_cidr_range", &self.ip_cidr_range);
        debug_struct.field("range_name", &self.range_name);
        debug_struct.field("reserved_internal_range", &self.reserved_internal_range);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::SubnetworkUtilizationDetails {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SubnetworkUtilizationDetails");
        debug_struct.field(
            "external_ipv_6_instance_utilization",
            &self.external_ipv_6_instance_utilization,
        );
        debug_struct.field(
            "external_ipv_6_lb_utilization",
            &self.external_ipv_6_lb_utilization,
        );
        debug_struct.field(
            "internal_ipv_6_utilization",
            &self.internal_ipv_6_utilization,
        );
        debug_struct.field("ipv_4_utilizations", &self.ipv_4_utilizations);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::SubnetworkUtilizationDetailsIPV4Utilization {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SubnetworkUtilizationDetailsIPV4Utilization");
        debug_struct.field("range_name", &self.range_name);
        debug_struct.field("total_allocated_ip", &self.total_allocated_ip);
        debug_struct.field("total_free_ip", &self.total_free_ip);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::SubnetworkUtilizationDetailsIPV6Utilization {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SubnetworkUtilizationDetailsIPV6Utilization");
        debug_struct.field("total_allocated_ip", &self.total_allocated_ip);
        debug_struct.field("total_free_ip", &self.total_free_ip);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::SubnetworksExpandIpCidrRangeRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SubnetworksExpandIpCidrRangeRequest");
        debug_struct.field("ip_cidr_range", &self.ip_cidr_range);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::SubnetworksScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SubnetworksScopedList");
        debug_struct.field("subnetworks", &self.subnetworks);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetworks_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetworks_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::SubnetworksScopedWarning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SubnetworksScopedWarning");
        debug_struct.field("scope_name", &self.scope_name);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetworks_scoped_warning::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetworks_scoped_warning::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::SubnetworksSetPrivateIpGoogleAccessRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SubnetworksSetPrivateIpGoogleAccessRequest");
        debug_struct.field("private_ip_google_access", &self.private_ip_google_access);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "backend-services", feature = "region-backend-services",))]
impl std::fmt::Debug for super::Subsetting {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Subsetting");
        debug_struct.field("policy", &self.policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "health-checks", feature = "region-health-checks",))]
impl std::fmt::Debug for super::TCPHealthCheck {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TCPHealthCheck");
        debug_struct.field("port", &self.port);
        debug_struct.field("port_name", &self.port_name);
        debug_struct.field("port_specification", &self.port_specification);
        debug_struct.field("proxy_header", &self.proxy_header);
        debug_struct.field("request", &self.request);
        debug_struct.field("response", &self.response);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instance-templates",
    feature = "instances",
    feature = "machine-images",
    feature = "region-instance-templates",
    feature = "region-instances",
))]
impl std::fmt::Debug for super::Tags {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Tags");
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("items", &self.items);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-grpc-proxies")]
impl std::fmt::Debug for super::TargetGrpcProxy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetGrpcProxy");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("self_link_with_id", &self.self_link_with_id);
        debug_struct.field("url_map", &self.url_map);
        debug_struct.field("validate_for_proxyless", &self.validate_for_proxyless);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-grpc-proxies")]
impl std::fmt::Debug for super::TargetGrpcProxyList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetGrpcProxyList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-grpc-proxies")]
impl std::fmt::Debug for super::target_grpc_proxy_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-grpc-proxies")]
impl std::fmt::Debug for super::target_grpc_proxy_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-http-proxies")]
impl std::fmt::Debug for super::TargetHttpProxiesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetHttpProxiesScopedList");
        debug_struct.field("target_http_proxies", &self.target_http_proxies);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-http-proxies")]
impl std::fmt::Debug for super::target_http_proxies_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-http-proxies")]
impl std::fmt::Debug for super::target_http_proxies_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "region-target-http-proxies",
    feature = "target-http-proxies",
))]
impl std::fmt::Debug for super::TargetHttpProxy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetHttpProxy");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field(
            "http_keep_alive_timeout_sec",
            &self.http_keep_alive_timeout_sec,
        );
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("proxy_bind", &self.proxy_bind);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("url_map", &self.url_map);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-http-proxies")]
impl std::fmt::Debug for super::TargetHttpProxyAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetHttpProxyAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "region-target-http-proxies",
    feature = "target-http-proxies",
))]
impl std::fmt::Debug for super::TargetHttpProxyList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetHttpProxyList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "region-target-http-proxies",
    feature = "target-http-proxies",
))]
impl std::fmt::Debug for super::target_http_proxy_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "region-target-http-proxies",
    feature = "target-http-proxies",
))]
impl std::fmt::Debug for super::target_http_proxy_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::TargetHttpsProxiesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetHttpsProxiesScopedList");
        debug_struct.field("target_https_proxies", &self.target_https_proxies);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::target_https_proxies_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::target_https_proxies_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::TargetHttpsProxiesSetCertificateMapRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetHttpsProxiesSetCertificateMapRequest");
        debug_struct.field("certificate_map", &self.certificate_map);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::TargetHttpsProxiesSetQuicOverrideRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetHttpsProxiesSetQuicOverrideRequest");
        debug_struct.field("quic_override", &self.quic_override);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::TargetHttpsProxiesSetSslCertificatesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetHttpsProxiesSetSslCertificatesRequest");
        debug_struct.field("ssl_certificates", &self.ssl_certificates);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "region-target-https-proxies",
    feature = "target-https-proxies",
))]
impl std::fmt::Debug for super::TargetHttpsProxy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetHttpsProxy");
        debug_struct.field("authorization_policy", &self.authorization_policy);
        debug_struct.field("certificate_map", &self.certificate_map);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field(
            "http_keep_alive_timeout_sec",
            &self.http_keep_alive_timeout_sec,
        );
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("proxy_bind", &self.proxy_bind);
        debug_struct.field("quic_override", &self.quic_override);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("server_tls_policy", &self.server_tls_policy);
        debug_struct.field("ssl_certificates", &self.ssl_certificates);
        debug_struct.field("ssl_policy", &self.ssl_policy);
        debug_struct.field("tls_early_data", &self.tls_early_data);
        debug_struct.field("url_map", &self.url_map);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::TargetHttpsProxyAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetHttpsProxyAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::target_https_proxy_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::target_https_proxy_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "region-target-https-proxies",
    feature = "target-https-proxies",
))]
impl std::fmt::Debug for super::TargetHttpsProxyList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetHttpsProxyList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "region-target-https-proxies",
    feature = "target-https-proxies",
))]
impl std::fmt::Debug for super::target_https_proxy_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "region-target-https-proxies",
    feature = "target-https-proxies",
))]
impl std::fmt::Debug for super::target_https_proxy_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-instances")]
impl std::fmt::Debug for super::TargetInstance {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetInstance");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("instance", &self.instance);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("nat_policy", &self.nat_policy);
        debug_struct.field("network", &self.network);
        debug_struct.field("security_policy", &self.security_policy);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-instances")]
impl std::fmt::Debug for super::TargetInstanceAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetInstanceAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-instances")]
impl std::fmt::Debug for super::target_instance_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-instances")]
impl std::fmt::Debug for super::target_instance_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-instances")]
impl std::fmt::Debug for super::TargetInstanceList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetInstanceList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-instances")]
impl std::fmt::Debug for super::target_instance_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-instances")]
impl std::fmt::Debug for super::target_instance_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-instances")]
impl std::fmt::Debug for super::TargetInstancesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetInstancesScopedList");
        debug_struct.field("target_instances", &self.target_instances);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-instances")]
impl std::fmt::Debug for super::target_instances_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-instances")]
impl std::fmt::Debug for super::target_instances_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::TargetPool {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetPool");
        debug_struct.field("backup_pool", &self.backup_pool);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("failover_ratio", &self.failover_ratio);
        debug_struct.field("health_checks", &self.health_checks);
        debug_struct.field("id", &self.id);
        debug_struct.field("instances", &self.instances);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("region", &self.region);
        debug_struct.field("security_policy", &self.security_policy);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("session_affinity", &self.session_affinity);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::TargetPoolAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetPoolAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pool_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pool_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::TargetPoolInstanceHealth {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetPoolInstanceHealth");
        debug_struct.field("health_status", &self.health_status);
        debug_struct.field("kind", &self.kind);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::TargetPoolList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetPoolList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pool_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pool_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::TargetPoolsAddHealthCheckRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetPoolsAddHealthCheckRequest");
        debug_struct.field("health_checks", &self.health_checks);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::TargetPoolsAddInstanceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetPoolsAddInstanceRequest");
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::TargetPoolsRemoveHealthCheckRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetPoolsRemoveHealthCheckRequest");
        debug_struct.field("health_checks", &self.health_checks);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::TargetPoolsRemoveInstanceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetPoolsRemoveInstanceRequest");
        debug_struct.field("instances", &self.instances);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::TargetPoolsScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetPoolsScopedList");
        debug_struct.field("target_pools", &self.target_pools);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pools_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pools_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "forwarding-rules",
    feature = "global-forwarding-rules",
    feature = "target-pools",
))]
impl std::fmt::Debug for super::TargetReference {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetReference");
        debug_struct.field("target", &self.target);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-ssl-proxies")]
impl std::fmt::Debug for super::TargetSslProxiesSetBackendServiceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetSslProxiesSetBackendServiceRequest");
        debug_struct.field("service", &self.service);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-ssl-proxies")]
impl std::fmt::Debug for super::TargetSslProxiesSetCertificateMapRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetSslProxiesSetCertificateMapRequest");
        debug_struct.field("certificate_map", &self.certificate_map);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-ssl-proxies")]
impl std::fmt::Debug for super::TargetSslProxiesSetProxyHeaderRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetSslProxiesSetProxyHeaderRequest");
        debug_struct.field("proxy_header", &self.proxy_header);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-ssl-proxies")]
impl std::fmt::Debug for super::TargetSslProxiesSetSslCertificatesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetSslProxiesSetSslCertificatesRequest");
        debug_struct.field("ssl_certificates", &self.ssl_certificates);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-ssl-proxies")]
impl std::fmt::Debug for super::TargetSslProxy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetSslProxy");
        debug_struct.field("certificate_map", &self.certificate_map);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("proxy_header", &self.proxy_header);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("service", &self.service);
        debug_struct.field("ssl_certificates", &self.ssl_certificates);
        debug_struct.field("ssl_policy", &self.ssl_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-ssl-proxies")]
impl std::fmt::Debug for super::TargetSslProxyList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetSslProxyList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-ssl-proxies")]
impl std::fmt::Debug for super::target_ssl_proxy_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-ssl-proxies")]
impl std::fmt::Debug for super::target_ssl_proxy_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-tcp-proxies")]
impl std::fmt::Debug for super::TargetTcpProxiesScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetTcpProxiesScopedList");
        debug_struct.field("target_tcp_proxies", &self.target_tcp_proxies);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-tcp-proxies")]
impl std::fmt::Debug for super::target_tcp_proxies_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-tcp-proxies")]
impl std::fmt::Debug for super::target_tcp_proxies_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-tcp-proxies")]
impl std::fmt::Debug for super::TargetTcpProxiesSetBackendServiceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetTcpProxiesSetBackendServiceRequest");
        debug_struct.field("service", &self.service);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-tcp-proxies")]
impl std::fmt::Debug for super::TargetTcpProxiesSetProxyHeaderRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetTcpProxiesSetProxyHeaderRequest");
        debug_struct.field("proxy_header", &self.proxy_header);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-target-tcp-proxies", feature = "target-tcp-proxies",))]
impl std::fmt::Debug for super::TargetTcpProxy {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetTcpProxy");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("proxy_bind", &self.proxy_bind);
        debug_struct.field("proxy_header", &self.proxy_header);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("service", &self.service);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-tcp-proxies")]
impl std::fmt::Debug for super::TargetTcpProxyAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetTcpProxyAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-tcp-proxies")]
impl std::fmt::Debug for super::target_tcp_proxy_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-tcp-proxies")]
impl std::fmt::Debug for super::target_tcp_proxy_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-target-tcp-proxies", feature = "target-tcp-proxies",))]
impl std::fmt::Debug for super::TargetTcpProxyList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetTcpProxyList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-target-tcp-proxies", feature = "target-tcp-proxies",))]
impl std::fmt::Debug for super::target_tcp_proxy_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-target-tcp-proxies", feature = "target-tcp-proxies",))]
impl std::fmt::Debug for super::target_tcp_proxy_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-vpn-gateways")]
impl std::fmt::Debug for super::TargetVpnGateway {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetVpnGateway");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("forwarding_rules", &self.forwarding_rules);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("name", &self.name);
        debug_struct.field("network", &self.network);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("status", &self.status);
        debug_struct.field("tunnels", &self.tunnels);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-vpn-gateways")]
impl std::fmt::Debug for super::TargetVpnGatewayAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetVpnGatewayAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-vpn-gateways")]
impl std::fmt::Debug for super::target_vpn_gateway_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-vpn-gateways")]
impl std::fmt::Debug for super::target_vpn_gateway_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-vpn-gateways")]
impl std::fmt::Debug for super::TargetVpnGatewayList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetVpnGatewayList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-vpn-gateways")]
impl std::fmt::Debug for super::target_vpn_gateway_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-vpn-gateways")]
impl std::fmt::Debug for super::target_vpn_gateway_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-vpn-gateways")]
impl std::fmt::Debug for super::TargetVpnGatewaysScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TargetVpnGatewaysScopedList");
        debug_struct.field("target_vpn_gateways", &self.target_vpn_gateways);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-vpn-gateways")]
impl std::fmt::Debug for super::target_vpn_gateways_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-vpn-gateways")]
impl std::fmt::Debug for super::target_vpn_gateways_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::TestFailure {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestFailure");
        debug_struct.field("actual_output_url", &self.actual_output_url);
        debug_struct.field(
            "actual_redirect_response_code",
            &self.actual_redirect_response_code,
        );
        debug_struct.field("actual_service", &self.actual_service);
        debug_struct.field("expected_output_url", &self.expected_output_url);
        debug_struct.field(
            "expected_redirect_response_code",
            &self.expected_redirect_response_code,
        );
        debug_struct.field("expected_service", &self.expected_service);
        debug_struct.field("headers", &self.headers);
        debug_struct.field("host", &self.host);
        debug_struct.field("path", &self.path);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "global-addresses",
    feature = "images",
    feature = "instance-groups",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-groups",
    feature = "license-codes",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "node-groups",
    feature = "node-templates",
    feature = "packet-mirrorings",
    feature = "region-backend-services",
    feature = "region-disks",
    feature = "region-instance-groups",
    feature = "region-instant-snapshots",
    feature = "region-network-firewall-policies",
    feature = "reservations",
    feature = "resource-policies",
    feature = "service-attachments",
    feature = "snapshots",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-instances",
    feature = "target-pools",
    feature = "vpn-gateways",
))]
impl std::fmt::Debug for super::TestPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestPermissionsRequest");
        debug_struct.field("permissions", &self.permissions);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "disks",
    feature = "external-vpn-gateways",
    feature = "firewall-policies",
    feature = "global-addresses",
    feature = "images",
    feature = "instance-groups",
    feature = "instance-templates",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-groups",
    feature = "license-codes",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-attachments",
    feature = "network-endpoint-groups",
    feature = "network-firewall-policies",
    feature = "node-groups",
    feature = "node-templates",
    feature = "packet-mirrorings",
    feature = "region-backend-services",
    feature = "region-disks",
    feature = "region-instance-groups",
    feature = "region-instant-snapshots",
    feature = "region-network-firewall-policies",
    feature = "reservations",
    feature = "resource-policies",
    feature = "service-attachments",
    feature = "snapshots",
    feature = "storage-pools",
    feature = "subnetworks",
    feature = "target-instances",
    feature = "target-pools",
    feature = "vpn-gateways",
))]
impl std::fmt::Debug for super::TestPermissionsResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestPermissionsResponse");
        debug_struct.field("permissions", &self.permissions);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "service-attachments", feature = "subnetworks",))]
impl std::fmt::Debug for super::Uint128 {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Uint128");
        debug_struct.field("high", &self.high);
        debug_struct.field("low", &self.low);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "instances",
    feature = "node-groups",
    feature = "region-commitments",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
))]
impl std::fmt::Debug for super::UpcomingMaintenance {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpcomingMaintenance");
        debug_struct.field("can_reschedule", &self.can_reschedule);
        debug_struct.field("latest_window_start_time", &self.latest_window_start_time);
        debug_struct.field("maintenance_on_shutdown", &self.maintenance_on_shutdown);
        debug_struct.field("maintenance_reasons", &self.maintenance_reasons);
        debug_struct.field("maintenance_status", &self.maintenance_status);
        debug_struct.field("r#type", &self.r#type);
        debug_struct.field("window_end_time", &self.window_end_time);
        debug_struct.field("window_start_time", &self.window_start_time);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::UrlMap {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UrlMap");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field(
            "default_custom_error_response_policy",
            &self.default_custom_error_response_policy,
        );
        debug_struct.field("default_route_action", &self.default_route_action);
        debug_struct.field("default_service", &self.default_service);
        debug_struct.field("default_url_redirect", &self.default_url_redirect);
        debug_struct.field("description", &self.description);
        debug_struct.field("fingerprint", &self.fingerprint);
        debug_struct.field("header_action", &self.header_action);
        debug_struct.field("host_rules", &self.host_rules);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("path_matchers", &self.path_matchers);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("tests", &self.tests);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::UrlMapList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UrlMapList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::url_map_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::url_map_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
))]
impl std::fmt::Debug for super::UrlMapReference {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UrlMapReference");
        debug_struct.field("url_map", &self.url_map);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::UrlMapTest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UrlMapTest");
        debug_struct.field("description", &self.description);
        debug_struct.field("expected_output_url", &self.expected_output_url);
        debug_struct.field(
            "expected_redirect_response_code",
            &self.expected_redirect_response_code,
        );
        debug_struct.field("headers", &self.headers);
        debug_struct.field("host", &self.host);
        debug_struct.field("path", &self.path);
        debug_struct.field("service", &self.service);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::UrlMapTestHeader {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UrlMapTestHeader");
        debug_struct.field("name", &self.name);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::UrlMapValidationResult {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UrlMapValidationResult");
        debug_struct.field("load_errors", &self.load_errors);
        debug_struct.field("load_succeeded", &self.load_succeeded);
        debug_struct.field("test_failures", &self.test_failures);
        debug_struct.field("test_passed", &self.test_passed);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "url-maps")]
impl std::fmt::Debug for super::UrlMapsAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UrlMapsAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "url-maps")]
impl std::fmt::Debug for super::url_maps_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "url-maps")]
impl std::fmt::Debug for super::url_maps_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "url-maps")]
impl std::fmt::Debug for super::UrlMapsScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UrlMapsScopedList");
        debug_struct.field("url_maps", &self.url_maps);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "url-maps")]
impl std::fmt::Debug for super::url_maps_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "url-maps")]
impl std::fmt::Debug for super::url_maps_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "url-maps")]
impl std::fmt::Debug for super::UrlMapsValidateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UrlMapsValidateRequest");
        debug_struct.field("load_balancing_schemes", &self.load_balancing_schemes);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::UrlMapsValidateResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UrlMapsValidateResponse");
        debug_struct.field("result", &self.result);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::UrlRewrite {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UrlRewrite");
        debug_struct.field("host_rewrite", &self.host_rewrite);
        debug_struct.field("path_prefix_rewrite", &self.path_prefix_rewrite);
        debug_struct.field("path_template_rewrite", &self.path_template_rewrite);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::UsableSubnetwork {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UsableSubnetwork");
        debug_struct.field("external_ipv_6_prefix", &self.external_ipv_6_prefix);
        debug_struct.field("internal_ipv_6_prefix", &self.internal_ipv_6_prefix);
        debug_struct.field("ip_cidr_range", &self.ip_cidr_range);
        debug_struct.field("ipv_6_access_type", &self.ipv_6_access_type);
        debug_struct.field("network", &self.network);
        debug_struct.field("purpose", &self.purpose);
        debug_struct.field("role", &self.role);
        debug_struct.field("secondary_ip_ranges", &self.secondary_ip_ranges);
        debug_struct.field("stack_type", &self.stack_type);
        debug_struct.field("subnetwork", &self.subnetwork);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::UsableSubnetworkSecondaryRange {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UsableSubnetworkSecondaryRange");
        debug_struct.field("ip_cidr_range", &self.ip_cidr_range);
        debug_struct.field("range_name", &self.range_name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::UsableSubnetworksAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UsableSubnetworksAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("scoped_warnings", &self.scoped_warnings);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::usable_subnetworks_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::usable_subnetworks_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::UsageExportLocation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UsageExportLocation");
        debug_struct.field("bucket_name", &self.bucket_name);
        debug_struct.field("report_name_prefix", &self.report_name_prefix);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::VmEndpointNatMappings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VmEndpointNatMappings");
        debug_struct.field("instance_name", &self.instance_name);
        debug_struct.field("interface_nat_mappings", &self.interface_nat_mappings);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::VmEndpointNatMappingsInterfaceNatMappings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VmEndpointNatMappingsInterfaceNatMappings");
        debug_struct.field("drain_nat_ip_port_ranges", &self.drain_nat_ip_port_ranges);
        debug_struct.field("nat_ip_port_ranges", &self.nat_ip_port_ranges);
        debug_struct.field("num_total_drain_nat_ports", &self.num_total_drain_nat_ports);
        debug_struct.field("num_total_nat_ports", &self.num_total_nat_ports);
        debug_struct.field("rule_mappings", &self.rule_mappings);
        debug_struct.field("source_alias_ip_range", &self.source_alias_ip_range);
        debug_struct.field("source_virtual_ip", &self.source_virtual_ip);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct =
            f.debug_struct("VmEndpointNatMappingsInterfaceNatMappingsNatRuleMappings");
        debug_struct.field("drain_nat_ip_port_ranges", &self.drain_nat_ip_port_ranges);
        debug_struct.field("nat_ip_port_ranges", &self.nat_ip_port_ranges);
        debug_struct.field("num_total_drain_nat_ports", &self.num_total_drain_nat_ports);
        debug_struct.field("num_total_nat_ports", &self.num_total_nat_ports);
        debug_struct.field("rule_number", &self.rule_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::VmEndpointNatMappingsList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VmEndpointNatMappingsList");
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("result", &self.result);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::vm_endpoint_nat_mappings_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::vm_endpoint_nat_mappings_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::VpnGateway {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VpnGateway");
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("gateway_ip_version", &self.gateway_ip_version);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("name", &self.name);
        debug_struct.field("network", &self.network);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("stack_type", &self.stack_type);
        debug_struct.field("vpn_interfaces", &self.vpn_interfaces);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::VpnGatewayAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VpnGatewayAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::vpn_gateway_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::vpn_gateway_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::VpnGatewayList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VpnGatewayList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::vpn_gateway_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::vpn_gateway_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::VpnGatewayStatus {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VpnGatewayStatus");
        debug_struct.field("vpn_connections", &self.vpn_connections);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::VpnGatewayStatusHighAvailabilityRequirementState {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VpnGatewayStatusHighAvailabilityRequirementState");
        debug_struct.field("state", &self.state);
        debug_struct.field("unsatisfied_reason", &self.unsatisfied_reason);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::VpnGatewayStatusTunnel {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VpnGatewayStatusTunnel");
        debug_struct.field("local_gateway_interface", &self.local_gateway_interface);
        debug_struct.field("peer_gateway_interface", &self.peer_gateway_interface);
        debug_struct.field("tunnel_url", &self.tunnel_url);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::VpnGatewayStatusVpnConnection {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VpnGatewayStatusVpnConnection");
        debug_struct.field("peer_external_gateway", &self.peer_external_gateway);
        debug_struct.field("peer_gcp_gateway", &self.peer_gcp_gateway);
        debug_struct.field("state", &self.state);
        debug_struct.field("tunnels", &self.tunnels);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::VpnGatewayVpnGatewayInterface {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VpnGatewayVpnGatewayInterface");
        debug_struct.field("id", &self.id);
        debug_struct.field("interconnect_attachment", &self.interconnect_attachment);
        debug_struct.field("ip_address", &self.ip_address);
        debug_struct.field("ipv_6_address", &self.ipv_6_address);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::VpnGatewaysGetStatusResponse {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VpnGatewaysGetStatusResponse");
        debug_struct.field("result", &self.result);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::VpnGatewaysScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VpnGatewaysScopedList");
        debug_struct.field("vpn_gateways", &self.vpn_gateways);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::vpn_gateways_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::vpn_gateways_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::VpnTunnel {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VpnTunnel");
        debug_struct.field("cipher_suite", &self.cipher_suite);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("detailed_status", &self.detailed_status);
        debug_struct.field("id", &self.id);
        debug_struct.field("ike_version", &self.ike_version);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        debug_struct.field("local_traffic_selector", &self.local_traffic_selector);
        debug_struct.field("name", &self.name);
        debug_struct.field("peer_external_gateway", &self.peer_external_gateway);
        debug_struct.field(
            "peer_external_gateway_interface",
            &self.peer_external_gateway_interface,
        );
        debug_struct.field("peer_gcp_gateway", &self.peer_gcp_gateway);
        debug_struct.field("peer_ip", &self.peer_ip);
        debug_struct.field("region", &self.region);
        debug_struct.field("remote_traffic_selector", &self.remote_traffic_selector);
        debug_struct.field("router", &self.router);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("shared_secret", &self.shared_secret);
        debug_struct.field("shared_secret_hash", &self.shared_secret_hash);
        debug_struct.field("status", &self.status);
        debug_struct.field("target_vpn_gateway", &self.target_vpn_gateway);
        debug_struct.field("vpn_gateway", &self.vpn_gateway);
        debug_struct.field("vpn_gateway_interface", &self.vpn_gateway_interface);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::VpnTunnelAggregatedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VpnTunnelAggregatedList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::vpn_tunnel_aggregated_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::vpn_tunnel_aggregated_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::VpnTunnelCipherSuite {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VpnTunnelCipherSuite");
        debug_struct.field("phase1", &self.phase1);
        debug_struct.field("phase2", &self.phase2);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::VpnTunnelList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VpnTunnelList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::vpn_tunnel_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::vpn_tunnel_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::VpnTunnelPhase1Algorithms {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VpnTunnelPhase1Algorithms");
        debug_struct.field("dh", &self.dh);
        debug_struct.field("encryption", &self.encryption);
        debug_struct.field("integrity", &self.integrity);
        debug_struct.field("prf", &self.prf);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::VpnTunnelPhase2Algorithms {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VpnTunnelPhase2Algorithms");
        debug_struct.field("encryption", &self.encryption);
        debug_struct.field("integrity", &self.integrity);
        debug_struct.field("pfs", &self.pfs);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::VpnTunnelsScopedList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("VpnTunnelsScopedList");
        debug_struct.field("vpn_tunnels", &self.vpn_tunnels);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::vpn_tunnels_scoped_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::vpn_tunnels_scoped_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::WafExpressionSet {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("WafExpressionSet");
        debug_struct.field("aliases", &self.aliases);
        debug_struct.field("expressions", &self.expressions);
        debug_struct.field("id", &self.id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "organization-security-policies",
    feature = "security-policies",
))]
impl std::fmt::Debug for super::WafExpressionSetExpression {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("WafExpressionSetExpression");
        debug_struct.field("id", &self.id);
        debug_struct.field("sensitivity", &self.sensitivity);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-url-maps", feature = "url-maps",))]
impl std::fmt::Debug for super::WeightedBackendService {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("WeightedBackendService");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("header_action", &self.header_action);
        debug_struct.field("weight", &self.weight);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "wire-groups")]
impl std::fmt::Debug for super::Wire {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Wire");
        debug_struct.field("admin_enabled", &self.admin_enabled);
        debug_struct.field("endpoints", &self.endpoints);
        debug_struct.field("label", &self.label);
        debug_struct.field("wire_properties", &self.wire_properties);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "wire-groups")]
impl std::fmt::Debug for super::WireEndpoint {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("WireEndpoint");
        debug_struct.field("interconnect", &self.interconnect);
        debug_struct.field("vlan_tag", &self.vlan_tag);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "wire-groups")]
impl std::fmt::Debug for super::WireGroup {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("WireGroup");
        debug_struct.field("admin_enabled", &self.admin_enabled);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("description", &self.description);
        debug_struct.field("endpoints", &self.endpoints);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("reconciling", &self.reconciling);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("topology", &self.topology);
        debug_struct.field("wire_properties", &self.wire_properties);
        debug_struct.field("wires", &self.wires);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "wire-groups")]
impl std::fmt::Debug for super::WireGroupEndpoint {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("WireGroupEndpoint");
        debug_struct.field("interconnects", &self.interconnects);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "wire-groups")]
impl std::fmt::Debug for super::WireGroupEndpointInterconnect {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("WireGroupEndpointInterconnect");
        debug_struct.field("interconnect", &self.interconnect);
        debug_struct.field("vlan_tags", &self.vlan_tags);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "wire-groups")]
impl std::fmt::Debug for super::WireGroupList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("WireGroupList");
        debug_struct.field("etag", &self.etag);
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("unreachables", &self.unreachables);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "wire-groups")]
impl std::fmt::Debug for super::wire_group_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "wire-groups")]
impl std::fmt::Debug for super::wire_group_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "wire-groups")]
impl std::fmt::Debug for super::WireGroupTopology {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("WireGroupTopology");
        debug_struct.field("endpoints", &self.endpoints);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "wire-groups")]
impl std::fmt::Debug for super::WireGroupTopologyEndpoint {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("WireGroupTopologyEndpoint");
        debug_struct.field("city", &self.city);
        debug_struct.field("label", &self.label);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "wire-groups")]
impl std::fmt::Debug for super::WireProperties {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("WireProperties");
        debug_struct.field("bandwidth_allocation", &self.bandwidth_allocation);
        debug_struct.field("bandwidth_unmetered", &self.bandwidth_unmetered);
        debug_struct.field("fault_response", &self.fault_response);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::XpnHostList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("XpnHostList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::xpn_host_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::xpn_host_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::XpnResourceId {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("XpnResourceId");
        debug_struct.field("id", &self.id);
        debug_struct.field("r#type", &self.r#type);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-zones", feature = "zones",))]
impl std::fmt::Debug for super::Zone {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Zone");
        debug_struct.field("available_cpu_platforms", &self.available_cpu_platforms);
        debug_struct.field("creation_timestamp", &self.creation_timestamp);
        debug_struct.field("deprecated", &self.deprecated);
        debug_struct.field("description", &self.description);
        debug_struct.field("id", &self.id);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("name", &self.name);
        debug_struct.field("region", &self.region);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("status", &self.status);
        debug_struct.field("supports_pzs", &self.supports_pzs);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-zones", feature = "zones",))]
impl std::fmt::Debug for super::ZoneList {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ZoneList");
        debug_struct.field("id", &self.id);
        debug_struct.field("items", &self.items);
        debug_struct.field("kind", &self.kind);
        debug_struct.field("next_page_token", &self.next_page_token);
        debug_struct.field("self_link", &self.self_link);
        debug_struct.field("warning", &self.warning);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-zones", feature = "zones",))]
impl std::fmt::Debug for super::zone_list::Warning {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Warning");
        debug_struct.field("code", &self.code);
        debug_struct.field("data", &self.data);
        debug_struct.field("message", &self.message);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "region-zones", feature = "zones",))]
impl std::fmt::Debug for super::zone_list::warning::Data {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("Data");
        debug_struct.field("key", &self.key);
        debug_struct.field("value", &self.value);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(feature = "disks", feature = "instant-snapshots",))]
impl std::fmt::Debug for super::ZoneSetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ZoneSetLabelsRequest");
        debug_struct.field("label_fingerprint", &self.label_fingerprint);
        debug_struct.field("labels", &self.labels);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "disks",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "node-groups",
    feature = "reservations",
    feature = "storage-pools",
))]
impl std::fmt::Debug for super::ZoneSetPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ZoneSetPolicyRequest");
        debug_struct.field("bindings", &self.bindings);
        debug_struct.field("etag", &self.etag);
        debug_struct.field("policy", &self.policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "accelerator-types")]
impl std::fmt::Debug for super::accelerator_types::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "accelerator-types")]
impl std::fmt::Debug for super::accelerator_types::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("accelerator_type", &self.accelerator_type);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "accelerator-types")]
impl std::fmt::Debug for super::accelerator_types::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "addresses")]
impl std::fmt::Debug for super::addresses::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "addresses")]
impl std::fmt::Debug for super::addresses::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("address", &self.address);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "addresses")]
impl std::fmt::Debug for super::addresses::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("address", &self.address);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "addresses")]
impl std::fmt::Debug for super::addresses::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "addresses")]
impl std::fmt::Debug for super::addresses::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "addresses")]
impl std::fmt::Debug for super::addresses::MoveRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("MoveRequest");
        debug_struct.field("address", &self.address);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "addresses")]
impl std::fmt::Debug for super::addresses::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "addresses")]
impl std::fmt::Debug for super::addresses::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "autoscalers")]
impl std::fmt::Debug for super::autoscalers::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "autoscalers")]
impl std::fmt::Debug for super::autoscalers::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("autoscaler", &self.autoscaler);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "autoscalers")]
impl std::fmt::Debug for super::autoscalers::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("autoscaler", &self.autoscaler);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "autoscalers")]
impl std::fmt::Debug for super::autoscalers::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "autoscalers")]
impl std::fmt::Debug for super::autoscalers::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "autoscalers")]
impl std::fmt::Debug for super::autoscalers::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("autoscaler", &self.autoscaler);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "autoscalers")]
impl std::fmt::Debug for super::autoscalers::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("autoscaler", &self.autoscaler);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::backend_buckets::AddSignedUrlKeyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddSignedUrlKeyRequest");
        debug_struct.field("backend_bucket", &self.backend_bucket);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::backend_buckets::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("backend_bucket", &self.backend_bucket);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::backend_buckets::DeleteSignedUrlKeyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteSignedUrlKeyRequest");
        debug_struct.field("backend_bucket", &self.backend_bucket);
        debug_struct.field("key_name", &self.key_name);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::backend_buckets::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("backend_bucket", &self.backend_bucket);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::backend_buckets::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::backend_buckets::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::backend_buckets::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::backend_buckets::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("backend_bucket", &self.backend_bucket);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::backend_buckets::SetEdgeSecurityPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetEdgeSecurityPolicyRequest");
        debug_struct.field("backend_bucket", &self.backend_bucket);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::backend_buckets::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::backend_buckets::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-buckets")]
impl std::fmt::Debug for super::backend_buckets::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("backend_bucket", &self.backend_bucket);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services::AddSignedUrlKeyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddSignedUrlKeyRequest");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services::DeleteSignedUrlKeyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteSignedUrlKeyRequest");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("key_name", &self.key_name);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services::GetEffectiveSecurityPoliciesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetEffectiveSecurityPoliciesRequest");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services::GetHealthRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetHealthRequest");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("project", &self.project);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services::ListUsableRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListUsableRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services::SetEdgeSecurityPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetEdgeSecurityPolicyRequest");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services::SetSecurityPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetSecurityPolicyRequest");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "backend-services")]
impl std::fmt::Debug for super::backend_services::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "cross-site-networks")]
impl std::fmt::Debug for super::cross_site_networks::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("cross_site_network", &self.cross_site_network);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "cross-site-networks")]
impl std::fmt::Debug for super::cross_site_networks::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("cross_site_network", &self.cross_site_network);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "cross-site-networks")]
impl std::fmt::Debug for super::cross_site_networks::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("validate_only", &self.validate_only);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "cross-site-networks")]
impl std::fmt::Debug for super::cross_site_networks::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "cross-site-networks")]
impl std::fmt::Debug for super::cross_site_networks::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("cross_site_network", &self.cross_site_network);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("validate_only", &self.validate_only);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disk-types")]
impl std::fmt::Debug for super::disk_types::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disk-types")]
impl std::fmt::Debug for super::disk_types::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("disk_type", &self.disk_type);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disk-types")]
impl std::fmt::Debug for super::disk_types::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::AddResourcePoliciesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddResourcePoliciesRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::BulkInsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BulkInsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::BulkSetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BulkSetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::CreateSnapshotRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CreateSnapshotRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("guest_flush", &self.guest_flush);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("source_image", &self.source_image);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::RemoveResourcePoliciesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemoveResourcePoliciesRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::ResizeRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResizeRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::StartAsyncReplicationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StartAsyncReplicationRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::StopAsyncReplicationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StopAsyncReplicationRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::StopGroupAsyncReplicationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StopGroupAsyncReplicationRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "disks")]
impl std::fmt::Debug for super::disks::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("paths", &self.paths);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "external-vpn-gateways")]
impl std::fmt::Debug for super::external_vpn_gateways::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("external_vpn_gateway", &self.external_vpn_gateway);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "external-vpn-gateways")]
impl std::fmt::Debug for super::external_vpn_gateways::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("external_vpn_gateway", &self.external_vpn_gateway);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "external-vpn-gateways")]
impl std::fmt::Debug for super::external_vpn_gateways::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "external-vpn-gateways")]
impl std::fmt::Debug for super::external_vpn_gateways::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "external-vpn-gateways")]
impl std::fmt::Debug for super::external_vpn_gateways::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "external-vpn-gateways")]
impl std::fmt::Debug for super::external_vpn_gateways::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::AddAssociationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddAssociationRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field(
            "replace_existing_association",
            &self.replace_existing_association,
        );
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::AddRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddRuleRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::CloneRulesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CloneRulesRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("source_firewall_policy", &self.source_firewall_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::GetAssociationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetAssociationRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("name", &self.name);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::GetRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRuleRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("priority", &self.priority);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("parent_id", &self.parent_id);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("parent_id", &self.parent_id);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::ListAssociationsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListAssociationsRequest");
        debug_struct.field("target_resource", &self.target_resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::MoveRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("MoveRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("parent_id", &self.parent_id);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::PatchRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRuleRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::RemoveAssociationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemoveAssociationRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("name", &self.name);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::RemoveRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemoveRuleRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewall-policies")]
impl std::fmt::Debug for super::firewall_policies::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewalls")]
impl std::fmt::Debug for super::firewalls::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("firewall", &self.firewall);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewalls")]
impl std::fmt::Debug for super::firewalls::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("firewall", &self.firewall);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewalls")]
impl std::fmt::Debug for super::firewalls::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewalls")]
impl std::fmt::Debug for super::firewalls::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewalls")]
impl std::fmt::Debug for super::firewalls::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("firewall", &self.firewall);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "firewalls")]
impl std::fmt::Debug for super::firewalls::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("firewall", &self.firewall);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "forwarding-rules")]
impl std::fmt::Debug for super::forwarding_rules::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "forwarding-rules")]
impl std::fmt::Debug for super::forwarding_rules::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("forwarding_rule", &self.forwarding_rule);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "forwarding-rules")]
impl std::fmt::Debug for super::forwarding_rules::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("forwarding_rule", &self.forwarding_rule);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "forwarding-rules")]
impl std::fmt::Debug for super::forwarding_rules::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "forwarding-rules")]
impl std::fmt::Debug for super::forwarding_rules::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "forwarding-rules")]
impl std::fmt::Debug for super::forwarding_rules::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("forwarding_rule", &self.forwarding_rule);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "forwarding-rules")]
impl std::fmt::Debug for super::forwarding_rules::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "forwarding-rules")]
impl std::fmt::Debug for super::forwarding_rules::SetTargetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetTargetRequest");
        debug_struct.field("forwarding_rule", &self.forwarding_rule);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::future_reservations::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::future_reservations::CancelRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CancelRequest");
        debug_struct.field("future_reservation", &self.future_reservation);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::future_reservations::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("future_reservation", &self.future_reservation);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::future_reservations::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("future_reservation", &self.future_reservation);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::future_reservations::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::future_reservations::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "future-reservations")]
impl std::fmt::Debug for super::future_reservations::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("future_reservation", &self.future_reservation);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-addresses")]
impl std::fmt::Debug for super::global_addresses::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("address", &self.address);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-addresses")]
impl std::fmt::Debug for super::global_addresses::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("address", &self.address);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-addresses")]
impl std::fmt::Debug for super::global_addresses::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-addresses")]
impl std::fmt::Debug for super::global_addresses::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-addresses")]
impl std::fmt::Debug for super::global_addresses::MoveRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("MoveRequest");
        debug_struct.field("address", &self.address);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-addresses")]
impl std::fmt::Debug for super::global_addresses::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-addresses")]
impl std::fmt::Debug for super::global_addresses::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-forwarding-rules")]
impl std::fmt::Debug for super::global_forwarding_rules::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("forwarding_rule", &self.forwarding_rule);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-forwarding-rules")]
impl std::fmt::Debug for super::global_forwarding_rules::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("forwarding_rule", &self.forwarding_rule);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-forwarding-rules")]
impl std::fmt::Debug for super::global_forwarding_rules::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-forwarding-rules")]
impl std::fmt::Debug for super::global_forwarding_rules::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-forwarding-rules")]
impl std::fmt::Debug for super::global_forwarding_rules::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("forwarding_rule", &self.forwarding_rule);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-forwarding-rules")]
impl std::fmt::Debug for super::global_forwarding_rules::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-forwarding-rules")]
impl std::fmt::Debug for super::global_forwarding_rules::SetTargetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetTargetRequest");
        debug_struct.field("forwarding_rule", &self.forwarding_rule);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-network-endpoint-groups")]
impl std::fmt::Debug for super::global_network_endpoint_groups::AttachNetworkEndpointsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AttachNetworkEndpointsRequest");
        debug_struct.field("network_endpoint_group", &self.network_endpoint_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-network-endpoint-groups")]
impl std::fmt::Debug for super::global_network_endpoint_groups::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("network_endpoint_group", &self.network_endpoint_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-network-endpoint-groups")]
impl std::fmt::Debug for super::global_network_endpoint_groups::DetachNetworkEndpointsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DetachNetworkEndpointsRequest");
        debug_struct.field("network_endpoint_group", &self.network_endpoint_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-network-endpoint-groups")]
impl std::fmt::Debug for super::global_network_endpoint_groups::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("network_endpoint_group", &self.network_endpoint_group);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-network-endpoint-groups")]
impl std::fmt::Debug for super::global_network_endpoint_groups::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-network-endpoint-groups")]
impl std::fmt::Debug for super::global_network_endpoint_groups::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-network-endpoint-groups")]
impl std::fmt::Debug for super::global_network_endpoint_groups::ListNetworkEndpointsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListNetworkEndpointsRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("network_endpoint_group", &self.network_endpoint_group);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-operations")]
impl std::fmt::Debug for super::global_operations::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-operations")]
impl std::fmt::Debug for super::global_operations::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("operation", &self.operation);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "backend-buckets",
    feature = "backend-services",
    feature = "cross-site-networks",
    feature = "external-vpn-gateways",
    feature = "firewalls",
    feature = "global-addresses",
    feature = "global-forwarding-rules",
    feature = "global-network-endpoint-groups",
    feature = "global-operations",
    feature = "global-public-delegated-prefixes",
    feature = "health-checks",
    feature = "http-health-checks",
    feature = "https-health-checks",
    feature = "images",
    feature = "instance-templates",
    feature = "interconnect-attachment-groups",
    feature = "interconnect-groups",
    feature = "interconnects",
    feature = "licenses",
    feature = "machine-images",
    feature = "network-firewall-policies",
    feature = "networks",
    feature = "preview-features",
    feature = "projects",
    feature = "public-advertised-prefixes",
    feature = "routes",
    feature = "security-policies",
    feature = "snapshot-settings",
    feature = "snapshots",
    feature = "ssl-certificates",
    feature = "ssl-policies",
    feature = "target-grpc-proxies",
    feature = "target-http-proxies",
    feature = "target-https-proxies",
    feature = "target-ssl-proxies",
    feature = "target-tcp-proxies",
    feature = "url-maps",
    feature = "wire-groups",
))]
impl std::fmt::Debug for super::global_operations::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("operation", &self.operation);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-operations")]
impl std::fmt::Debug for super::global_operations::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-operations")]
impl std::fmt::Debug for super::global_operations::WaitRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("WaitRequest");
        debug_struct.field("operation", &self.operation);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-organization-operations")]
impl std::fmt::Debug for super::global_organization_operations::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("operation", &self.operation);
        debug_struct.field("parent_id", &self.parent_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "firewall-policies",
    feature = "global-organization-operations",
    feature = "organization-security-policies",
))]
impl std::fmt::Debug for super::global_organization_operations::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("operation", &self.operation);
        debug_struct.field("parent_id", &self.parent_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-organization-operations")]
impl std::fmt::Debug for super::global_organization_operations::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("parent_id", &self.parent_id);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-public-delegated-prefixes")]
impl std::fmt::Debug for super::global_public_delegated_prefixes::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("public_delegated_prefix", &self.public_delegated_prefix);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-public-delegated-prefixes")]
impl std::fmt::Debug for super::global_public_delegated_prefixes::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("public_delegated_prefix", &self.public_delegated_prefix);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-public-delegated-prefixes")]
impl std::fmt::Debug for super::global_public_delegated_prefixes::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-public-delegated-prefixes")]
impl std::fmt::Debug for super::global_public_delegated_prefixes::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "global-public-delegated-prefixes")]
impl std::fmt::Debug for super::global_public_delegated_prefixes::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("public_delegated_prefix", &self.public_delegated_prefix);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "health-checks")]
impl std::fmt::Debug for super::health_checks::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "health-checks")]
impl std::fmt::Debug for super::health_checks::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("health_check", &self.health_check);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "health-checks")]
impl std::fmt::Debug for super::health_checks::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("health_check", &self.health_check);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "health-checks")]
impl std::fmt::Debug for super::health_checks::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "health-checks")]
impl std::fmt::Debug for super::health_checks::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "health-checks")]
impl std::fmt::Debug for super::health_checks::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("health_check", &self.health_check);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "health-checks")]
impl std::fmt::Debug for super::health_checks::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("health_check", &self.health_check);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "http-health-checks")]
impl std::fmt::Debug for super::http_health_checks::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("http_health_check", &self.http_health_check);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "http-health-checks")]
impl std::fmt::Debug for super::http_health_checks::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("http_health_check", &self.http_health_check);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "http-health-checks")]
impl std::fmt::Debug for super::http_health_checks::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "http-health-checks")]
impl std::fmt::Debug for super::http_health_checks::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "http-health-checks")]
impl std::fmt::Debug for super::http_health_checks::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("http_health_check", &self.http_health_check);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "http-health-checks")]
impl std::fmt::Debug for super::http_health_checks::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("http_health_check", &self.http_health_check);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "https-health-checks")]
impl std::fmt::Debug for super::https_health_checks::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("https_health_check", &self.https_health_check);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "https-health-checks")]
impl std::fmt::Debug for super::https_health_checks::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("https_health_check", &self.https_health_check);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "https-health-checks")]
impl std::fmt::Debug for super::https_health_checks::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "https-health-checks")]
impl std::fmt::Debug for super::https_health_checks::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "https-health-checks")]
impl std::fmt::Debug for super::https_health_checks::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("https_health_check", &self.https_health_check);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "https-health-checks")]
impl std::fmt::Debug for super::https_health_checks::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("https_health_check", &self.https_health_check);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "image-family-views")]
impl std::fmt::Debug for super::image_family_views::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("family", &self.family);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "images")]
impl std::fmt::Debug for super::images::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("image", &self.image);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "images")]
impl std::fmt::Debug for super::images::DeprecateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeprecateRequest");
        debug_struct.field("image", &self.image);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "images")]
impl std::fmt::Debug for super::images::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("image", &self.image);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "images")]
impl std::fmt::Debug for super::images::GetFromFamilyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetFromFamilyRequest");
        debug_struct.field("family", &self.family);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "images")]
impl std::fmt::Debug for super::images::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "images")]
impl std::fmt::Debug for super::images::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("force_create", &self.force_create);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "images")]
impl std::fmt::Debug for super::images::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "images")]
impl std::fmt::Debug for super::images::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("image", &self.image);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "images")]
impl std::fmt::Debug for super::images::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "images")]
impl std::fmt::Debug for super::images::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "images")]
impl std::fmt::Debug for super::images::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-manager-resize-requests")]
impl std::fmt::Debug for super::instance_group_manager_resize_requests::CancelRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CancelRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("resize_request", &self.resize_request);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-manager-resize-requests")]
impl std::fmt::Debug for super::instance_group_manager_resize_requests::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("resize_request", &self.resize_request);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-manager-resize-requests")]
impl std::fmt::Debug for super::instance_group_manager_resize_requests::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("resize_request", &self.resize_request);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-manager-resize-requests")]
impl std::fmt::Debug for super::instance_group_manager_resize_requests::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-manager-resize-requests")]
impl std::fmt::Debug for super::instance_group_manager_resize_requests::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::AbandonInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AbandonInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::ApplyUpdatesToInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ApplyUpdatesToInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::CreateInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CreateInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::DeleteInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::DeletePerInstanceConfigsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeletePerInstanceConfigsRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::ListErrorsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListErrorsRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::ListManagedInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListManagedInstancesRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::ListPerInstanceConfigsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListPerInstanceConfigsRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::PatchPerInstanceConfigsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchPerInstanceConfigsRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::RecreateInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RecreateInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::ResizeRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResizeRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("size", &self.size);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::ResumeInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResumeInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::SetInstanceTemplateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetInstanceTemplateRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::SetTargetPoolsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetTargetPoolsRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::StartInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StartInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::StopInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StopInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::SuspendInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SuspendInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-group-managers")]
impl std::fmt::Debug for super::instance_group_managers::UpdatePerInstanceConfigsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdatePerInstanceConfigsRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_groups::AddInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddInstancesRequest");
        debug_struct.field("instance_group", &self.instance_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_groups::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_groups::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("instance_group", &self.instance_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_groups::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("instance_group", &self.instance_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_groups::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_groups::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_groups::ListInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListInstancesRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("instance_group", &self.instance_group);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_groups::RemoveInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemoveInstancesRequest");
        debug_struct.field("instance_group", &self.instance_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_groups::SetNamedPortsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetNamedPortsRequest");
        debug_struct.field("instance_group", &self.instance_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-groups")]
impl std::fmt::Debug for super::instance_groups::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-settings")]
impl std::fmt::Debug for super::instance_settings::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-settings")]
impl std::fmt::Debug for super::instance_settings::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-templates")]
impl std::fmt::Debug for super::instance_templates::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-templates")]
impl std::fmt::Debug for super::instance_templates::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("instance_template", &self.instance_template);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-templates")]
impl std::fmt::Debug for super::instance_templates::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("instance_template", &self.instance_template);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-templates")]
impl std::fmt::Debug for super::instance_templates::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-templates")]
impl std::fmt::Debug for super::instance_templates::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-templates")]
impl std::fmt::Debug for super::instance_templates::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-templates")]
impl std::fmt::Debug for super::instance_templates::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instance-templates")]
impl std::fmt::Debug for super::instance_templates::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::AddAccessConfigRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddAccessConfigRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("network_interface", &self.network_interface);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::AddNetworkInterfaceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddNetworkInterfaceRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::AddResourcePoliciesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddResourcePoliciesRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::AttachDiskRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AttachDiskRequest");
        debug_struct.field("force_attach", &self.force_attach);
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::BulkInsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BulkInsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::DeleteAccessConfigRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteAccessConfigRequest");
        debug_struct.field("access_config", &self.access_config);
        debug_struct.field("instance", &self.instance);
        debug_struct.field("network_interface", &self.network_interface);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::DeleteNetworkInterfaceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteNetworkInterfaceRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("network_interface_name", &self.network_interface_name);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::DetachDiskRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DetachDiskRequest");
        debug_struct.field("device_name", &self.device_name);
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::GetEffectiveFirewallsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetEffectiveFirewallsRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("network_interface", &self.network_interface);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::GetGuestAttributesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetGuestAttributesRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("query_path", &self.query_path);
        debug_struct.field("variable_key", &self.variable_key);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::GetScreenshotRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetScreenshotRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::GetSerialPortOutputRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetSerialPortOutputRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("port", &self.port);
        debug_struct.field("project", &self.project);
        debug_struct.field("start", &self.start);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::GetShieldedInstanceIdentityRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetShieldedInstanceIdentityRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("source_instance_template", &self.source_instance_template);
        debug_struct.field("source_machine_image", &self.source_machine_image);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::ListReferrersRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListReferrersRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("instance", &self.instance);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::PerformMaintenanceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PerformMaintenanceRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::RemoveResourcePoliciesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemoveResourcePoliciesRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::ReportHostAsFaultyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReportHostAsFaultyRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::ResetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResetRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::ResumeRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResumeRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::SendDiagnosticInterruptRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SendDiagnosticInterruptRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::SetDeletionProtectionRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetDeletionProtectionRequest");
        debug_struct.field("deletion_protection", &self.deletion_protection);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::SetDiskAutoDeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetDiskAutoDeleteRequest");
        debug_struct.field("auto_delete", &self.auto_delete);
        debug_struct.field("device_name", &self.device_name);
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::SetMachineResourcesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetMachineResourcesRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::SetMachineTypeRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetMachineTypeRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::SetMetadataRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetMetadataRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::SetMinCpuPlatformRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetMinCpuPlatformRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::SetNameRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetNameRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::SetSchedulingRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetSchedulingRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::SetSecurityPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetSecurityPolicyRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::SetServiceAccountRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetServiceAccountRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::SetShieldedInstanceIntegrityPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetShieldedInstanceIntegrityPolicyRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::SetTagsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetTagsRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::SimulateMaintenanceEventRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SimulateMaintenanceEventRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field(
            "with_extended_notifications",
            &self.with_extended_notifications,
        );
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::StartRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StartRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::StartWithEncryptionKeyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StartWithEncryptionKeyRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::StopRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StopRequest");
        debug_struct.field("discard_local_ssd", &self.discard_local_ssd);
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::SuspendRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SuspendRequest");
        debug_struct.field("discard_local_ssd", &self.discard_local_ssd);
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("minimal_action", &self.minimal_action);
        debug_struct.field(
            "most_disruptive_allowed_action",
            &self.most_disruptive_allowed_action,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::UpdateAccessConfigRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateAccessConfigRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("network_interface", &self.network_interface);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::UpdateDisplayDeviceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateDisplayDeviceRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::UpdateNetworkInterfaceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateNetworkInterfaceRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("network_interface", &self.network_interface);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instances")]
impl std::fmt::Debug for super::instances::UpdateShieldedInstanceConfigRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateShieldedInstanceConfigRequest");
        debug_struct.field("instance", &self.instance);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instant-snapshots")]
impl std::fmt::Debug for super::instant_snapshots::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instant-snapshots")]
impl std::fmt::Debug for super::instant_snapshots::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("instant_snapshot", &self.instant_snapshot);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instant-snapshots")]
impl std::fmt::Debug for super::instant_snapshots::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("instant_snapshot", &self.instant_snapshot);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instant-snapshots")]
impl std::fmt::Debug for super::instant_snapshots::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instant-snapshots")]
impl std::fmt::Debug for super::instant_snapshots::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instant-snapshots")]
impl std::fmt::Debug for super::instant_snapshots::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instant-snapshots")]
impl std::fmt::Debug for super::instant_snapshots::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instant-snapshots")]
impl std::fmt::Debug for super::instant_snapshots::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "instant-snapshots")]
impl std::fmt::Debug for super::instant_snapshots::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::interconnect_attachment_groups::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field(
            "interconnect_attachment_group",
            &self.interconnect_attachment_group,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::interconnect_attachment_groups::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field(
            "interconnect_attachment_group",
            &self.interconnect_attachment_group,
        );
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::interconnect_attachment_groups::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::interconnect_attachment_groups::GetOperationalStatusRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetOperationalStatusRequest");
        debug_struct.field(
            "interconnect_attachment_group",
            &self.interconnect_attachment_group,
        );
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::interconnect_attachment_groups::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::interconnect_attachment_groups::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::interconnect_attachment_groups::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field(
            "interconnect_attachment_group",
            &self.interconnect_attachment_group,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::interconnect_attachment_groups::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachment-groups")]
impl std::fmt::Debug for super::interconnect_attachment_groups::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::interconnect_attachments::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::interconnect_attachments::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("interconnect_attachment", &self.interconnect_attachment);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::interconnect_attachments::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("interconnect_attachment", &self.interconnect_attachment);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::interconnect_attachments::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("validate_only", &self.validate_only);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::interconnect_attachments::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::interconnect_attachments::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("interconnect_attachment", &self.interconnect_attachment);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-attachments")]
impl std::fmt::Debug for super::interconnect_attachments::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::interconnect_groups::CreateMembersRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CreateMembersRequest");
        debug_struct.field("interconnect_group", &self.interconnect_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::interconnect_groups::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("interconnect_group", &self.interconnect_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::interconnect_groups::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("interconnect_group", &self.interconnect_group);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::interconnect_groups::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::interconnect_groups::GetOperationalStatusRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetOperationalStatusRequest");
        debug_struct.field("interconnect_group", &self.interconnect_group);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::interconnect_groups::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::interconnect_groups::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::interconnect_groups::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("interconnect_group", &self.interconnect_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::interconnect_groups::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-groups")]
impl std::fmt::Debug for super::interconnect_groups::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-locations")]
impl std::fmt::Debug for super::interconnect_locations::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("interconnect_location", &self.interconnect_location);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-locations")]
impl std::fmt::Debug for super::interconnect_locations::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-remote-locations")]
impl std::fmt::Debug for super::interconnect_remote_locations::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field(
            "interconnect_remote_location",
            &self.interconnect_remote_location,
        );
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnect-remote-locations")]
impl std::fmt::Debug for super::interconnect_remote_locations::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::interconnects::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("interconnect", &self.interconnect);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::interconnects::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("interconnect", &self.interconnect);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::interconnects::GetDiagnosticsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetDiagnosticsRequest");
        debug_struct.field("interconnect", &self.interconnect);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::interconnects::GetMacsecConfigRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetMacsecConfigRequest");
        debug_struct.field("interconnect", &self.interconnect);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::interconnects::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::interconnects::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::interconnects::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("interconnect", &self.interconnect);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "interconnects")]
impl std::fmt::Debug for super::interconnects::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "license-codes")]
impl std::fmt::Debug for super::license_codes::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("license_code", &self.license_code);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "license-codes")]
impl std::fmt::Debug for super::license_codes::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "licenses")]
impl std::fmt::Debug for super::licenses::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("license", &self.license);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "licenses")]
impl std::fmt::Debug for super::licenses::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("license", &self.license);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "licenses")]
impl std::fmt::Debug for super::licenses::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "licenses")]
impl std::fmt::Debug for super::licenses::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "licenses")]
impl std::fmt::Debug for super::licenses::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "licenses")]
impl std::fmt::Debug for super::licenses::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "licenses")]
impl std::fmt::Debug for super::licenses::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "licenses")]
impl std::fmt::Debug for super::licenses::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("license", &self.license);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-images")]
impl std::fmt::Debug for super::machine_images::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("machine_image", &self.machine_image);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-images")]
impl std::fmt::Debug for super::machine_images::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("machine_image", &self.machine_image);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-images")]
impl std::fmt::Debug for super::machine_images::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-images")]
impl std::fmt::Debug for super::machine_images::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("source_instance", &self.source_instance);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-images")]
impl std::fmt::Debug for super::machine_images::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-images")]
impl std::fmt::Debug for super::machine_images::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-images")]
impl std::fmt::Debug for super::machine_images::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-images")]
impl std::fmt::Debug for super::machine_images::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-types")]
impl std::fmt::Debug for super::machine_types::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-types")]
impl std::fmt::Debug for super::machine_types::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("machine_type", &self.machine_type);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "machine-types")]
impl std::fmt::Debug for super::machine_types::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::network_attachments::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::network_attachments::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("network_attachment", &self.network_attachment);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::network_attachments::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("network_attachment", &self.network_attachment);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::network_attachments::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::network_attachments::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::network_attachments::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::network_attachments::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("network_attachment", &self.network_attachment);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::network_attachments::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-attachments")]
impl std::fmt::Debug for super::network_attachments::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-edge-security-services")]
impl std::fmt::Debug for super::network_edge_security_services::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-edge-security-services")]
impl std::fmt::Debug for super::network_edge_security_services::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field(
            "network_edge_security_service",
            &self.network_edge_security_service,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-edge-security-services")]
impl std::fmt::Debug for super::network_edge_security_services::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field(
            "network_edge_security_service",
            &self.network_edge_security_service,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-edge-security-services")]
impl std::fmt::Debug for super::network_edge_security_services::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("validate_only", &self.validate_only);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-edge-security-services")]
impl std::fmt::Debug for super::network_edge_security_services::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field(
            "network_edge_security_service",
            &self.network_edge_security_service,
        );
        debug_struct.field("paths", &self.paths);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::network_endpoint_groups::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::network_endpoint_groups::AttachNetworkEndpointsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AttachNetworkEndpointsRequest");
        debug_struct.field("network_endpoint_group", &self.network_endpoint_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::network_endpoint_groups::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("network_endpoint_group", &self.network_endpoint_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::network_endpoint_groups::DetachNetworkEndpointsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DetachNetworkEndpointsRequest");
        debug_struct.field("network_endpoint_group", &self.network_endpoint_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::network_endpoint_groups::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("network_endpoint_group", &self.network_endpoint_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::network_endpoint_groups::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::network_endpoint_groups::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::network_endpoint_groups::ListNetworkEndpointsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListNetworkEndpointsRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("network_endpoint_group", &self.network_endpoint_group);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-endpoint-groups")]
impl std::fmt::Debug for super::network_endpoint_groups::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::AddAssociationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddAssociationRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("project", &self.project);
        debug_struct.field(
            "replace_existing_association",
            &self.replace_existing_association,
        );
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::AddPacketMirroringRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddPacketMirroringRuleRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("max_priority", &self.max_priority);
        debug_struct.field("min_priority", &self.min_priority);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::AddRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddRuleRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("max_priority", &self.max_priority);
        debug_struct.field("min_priority", &self.min_priority);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::CloneRulesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CloneRulesRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("source_firewall_policy", &self.source_firewall_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::GetAssociationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetAssociationRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("name", &self.name);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::GetPacketMirroringRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetPacketMirroringRuleRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::GetRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRuleRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::PatchPacketMirroringRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchPacketMirroringRuleRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::PatchRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRuleRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::RemoveAssociationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemoveAssociationRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("name", &self.name);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::RemovePacketMirroringRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemovePacketMirroringRuleRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::RemoveRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemoveRuleRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-firewall-policies")]
impl std::fmt::Debug for super::network_firewall_policies::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-profiles")]
impl std::fmt::Debug for super::network_profiles::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("network_profile", &self.network_profile);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "network-profiles")]
impl std::fmt::Debug for super::network_profiles::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::networks::AddPeeringRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddPeeringRequest");
        debug_struct.field("network", &self.network);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::networks::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("network", &self.network);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::networks::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("network", &self.network);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::networks::GetEffectiveFirewallsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetEffectiveFirewallsRequest");
        debug_struct.field("network", &self.network);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::networks::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::networks::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::networks::ListPeeringRoutesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListPeeringRoutesRequest");
        debug_struct.field("direction", &self.direction);
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("network", &self.network);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("peering_name", &self.peering_name);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::networks::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("network", &self.network);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::networks::RemovePeeringRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemovePeeringRequest");
        debug_struct.field("network", &self.network);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::networks::RequestRemovePeeringRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RequestRemovePeeringRequest");
        debug_struct.field("network", &self.network);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::networks::SwitchToCustomModeRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SwitchToCustomModeRequest");
        debug_struct.field("network", &self.network);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "networks")]
impl std::fmt::Debug for super::networks::UpdatePeeringRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdatePeeringRequest");
        debug_struct.field("network", &self.network);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups::AddNodesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddNodesRequest");
        debug_struct.field("node_group", &self.node_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("node_group", &self.node_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups::DeleteNodesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteNodesRequest");
        debug_struct.field("node_group", &self.node_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("node_group", &self.node_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("initial_node_count", &self.initial_node_count);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups::ListNodesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListNodesRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("node_group", &self.node_group);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("node_group", &self.node_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups::PerformMaintenanceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PerformMaintenanceRequest");
        debug_struct.field("node_group", &self.node_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups::SetNodeTemplateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetNodeTemplateRequest");
        debug_struct.field("node_group", &self.node_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups::SimulateMaintenanceEventRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SimulateMaintenanceEventRequest");
        debug_struct.field("node_group", &self.node_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-groups")]
impl std::fmt::Debug for super::node_groups::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::node_templates::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::node_templates::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("node_template", &self.node_template);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::node_templates::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("node_template", &self.node_template);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::node_templates::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::node_templates::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::node_templates::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::node_templates::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-templates")]
impl std::fmt::Debug for super::node_templates::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-types")]
impl std::fmt::Debug for super::node_types::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-types")]
impl std::fmt::Debug for super::node_types::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("node_type", &self.node_type);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "node-types")]
impl std::fmt::Debug for super::node_types::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "organization-security-policies")]
impl std::fmt::Debug for super::organization_security_policies::AddAssociationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddAssociationRequest");
        debug_struct.field(
            "replace_existing_association",
            &self.replace_existing_association,
        );
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("security_policy", &self.security_policy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "organization-security-policies")]
impl std::fmt::Debug for super::organization_security_policies::AddRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddRuleRequest");
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("security_policy", &self.security_policy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "organization-security-policies")]
impl std::fmt::Debug for super::organization_security_policies::CopyRulesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CopyRulesRequest");
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("security_policy", &self.security_policy);
        debug_struct.field("source_security_policy", &self.source_security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "organization-security-policies")]
impl std::fmt::Debug for super::organization_security_policies::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("security_policy", &self.security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "organization-security-policies")]
impl std::fmt::Debug for super::organization_security_policies::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("security_policy", &self.security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "organization-security-policies")]
impl std::fmt::Debug for super::organization_security_policies::GetAssociationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetAssociationRequest");
        debug_struct.field("name", &self.name);
        debug_struct.field("security_policy", &self.security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "organization-security-policies")]
impl std::fmt::Debug for super::organization_security_policies::GetRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRuleRequest");
        debug_struct.field("priority", &self.priority);
        debug_struct.field("security_policy", &self.security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "organization-security-policies")]
impl std::fmt::Debug for super::organization_security_policies::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("parent_id", &self.parent_id);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "organization-security-policies")]
impl std::fmt::Debug for super::organization_security_policies::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("parent_id", &self.parent_id);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "organization-security-policies")]
impl std::fmt::Debug for super::organization_security_policies::ListAssociationsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListAssociationsRequest");
        debug_struct.field("target_resource", &self.target_resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "organization-security-policies")]
impl std::fmt::Debug
    for super::organization_security_policies::ListPreconfiguredExpressionSetsRequest
{
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListPreconfiguredExpressionSetsRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("parent_id", &self.parent_id);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "organization-security-policies")]
impl std::fmt::Debug for super::organization_security_policies::MoveRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("MoveRequest");
        debug_struct.field("parent_id", &self.parent_id);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("security_policy", &self.security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "organization-security-policies")]
impl std::fmt::Debug for super::organization_security_policies::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("security_policy", &self.security_policy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "organization-security-policies")]
impl std::fmt::Debug for super::organization_security_policies::PatchRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRuleRequest");
        debug_struct.field("priority", &self.priority);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("security_policy", &self.security_policy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "organization-security-policies")]
impl std::fmt::Debug for super::organization_security_policies::RemoveAssociationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemoveAssociationRequest");
        debug_struct.field("name", &self.name);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("security_policy", &self.security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "organization-security-policies")]
impl std::fmt::Debug for super::organization_security_policies::RemoveRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemoveRuleRequest");
        debug_struct.field("priority", &self.priority);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("security_policy", &self.security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::packet_mirrorings::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::packet_mirrorings::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("packet_mirroring", &self.packet_mirroring);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::packet_mirrorings::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("packet_mirroring", &self.packet_mirroring);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::packet_mirrorings::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::packet_mirrorings::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::packet_mirrorings::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("packet_mirroring", &self.packet_mirroring);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "packet-mirrorings")]
impl std::fmt::Debug for super::packet_mirrorings::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "preview-features")]
impl std::fmt::Debug for super::preview_features::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("preview_feature", &self.preview_feature);
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "preview-features")]
impl std::fmt::Debug for super::preview_features::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "preview-features")]
impl std::fmt::Debug for super::preview_features::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("preview_feature", &self.preview_feature);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::projects::DisableXpnHostRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DisableXpnHostRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::projects::DisableXpnResourceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DisableXpnResourceRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::projects::EnableXpnHostRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("EnableXpnHostRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::projects::EnableXpnResourceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("EnableXpnResourceRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::projects::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::projects::GetXpnHostRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetXpnHostRequest");
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::projects::GetXpnResourcesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetXpnResourcesRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::projects::ListXpnHostsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListXpnHostsRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::projects::MoveDiskRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("MoveDiskRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::projects::MoveInstanceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("MoveInstanceRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::projects::SetCloudArmorTierRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetCloudArmorTierRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::projects::SetCommonInstanceMetadataRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetCommonInstanceMetadataRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::projects::SetDefaultNetworkTierRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetDefaultNetworkTierRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "projects")]
impl std::fmt::Debug for super::projects::SetUsageExportBucketRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetUsageExportBucketRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-advertised-prefixes")]
impl std::fmt::Debug for super::public_advertised_prefixes::AnnounceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AnnounceRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("public_advertised_prefix", &self.public_advertised_prefix);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-advertised-prefixes")]
impl std::fmt::Debug for super::public_advertised_prefixes::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("public_advertised_prefix", &self.public_advertised_prefix);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-advertised-prefixes")]
impl std::fmt::Debug for super::public_advertised_prefixes::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("public_advertised_prefix", &self.public_advertised_prefix);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-advertised-prefixes")]
impl std::fmt::Debug for super::public_advertised_prefixes::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-advertised-prefixes")]
impl std::fmt::Debug for super::public_advertised_prefixes::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-advertised-prefixes")]
impl std::fmt::Debug for super::public_advertised_prefixes::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("public_advertised_prefix", &self.public_advertised_prefix);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-advertised-prefixes")]
impl std::fmt::Debug for super::public_advertised_prefixes::WithdrawRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("WithdrawRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("public_advertised_prefix", &self.public_advertised_prefix);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-delegated-prefixes")]
impl std::fmt::Debug for super::public_delegated_prefixes::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-delegated-prefixes")]
impl std::fmt::Debug for super::public_delegated_prefixes::AnnounceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AnnounceRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("public_delegated_prefix", &self.public_delegated_prefix);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-delegated-prefixes")]
impl std::fmt::Debug for super::public_delegated_prefixes::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("public_delegated_prefix", &self.public_delegated_prefix);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-delegated-prefixes")]
impl std::fmt::Debug for super::public_delegated_prefixes::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("public_delegated_prefix", &self.public_delegated_prefix);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-delegated-prefixes")]
impl std::fmt::Debug for super::public_delegated_prefixes::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-delegated-prefixes")]
impl std::fmt::Debug for super::public_delegated_prefixes::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-delegated-prefixes")]
impl std::fmt::Debug for super::public_delegated_prefixes::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("public_delegated_prefix", &self.public_delegated_prefix);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "public-delegated-prefixes")]
impl std::fmt::Debug for super::public_delegated_prefixes::WithdrawRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("WithdrawRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("public_delegated_prefix", &self.public_delegated_prefix);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-autoscalers")]
impl std::fmt::Debug for super::region_autoscalers::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("autoscaler", &self.autoscaler);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-autoscalers")]
impl std::fmt::Debug for super::region_autoscalers::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("autoscaler", &self.autoscaler);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-autoscalers")]
impl std::fmt::Debug for super::region_autoscalers::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-autoscalers")]
impl std::fmt::Debug for super::region_autoscalers::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-autoscalers")]
impl std::fmt::Debug for super::region_autoscalers::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("autoscaler", &self.autoscaler);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-autoscalers")]
impl std::fmt::Debug for super::region_autoscalers::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("autoscaler", &self.autoscaler);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-backend-services")]
impl std::fmt::Debug for super::region_backend_services::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-backend-services")]
impl std::fmt::Debug for super::region_backend_services::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-backend-services")]
impl std::fmt::Debug for super::region_backend_services::GetHealthRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetHealthRequest");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-backend-services")]
impl std::fmt::Debug for super::region_backend_services::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-backend-services")]
impl std::fmt::Debug for super::region_backend_services::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-backend-services")]
impl std::fmt::Debug for super::region_backend_services::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-backend-services")]
impl std::fmt::Debug for super::region_backend_services::ListUsableRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListUsableRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-backend-services")]
impl std::fmt::Debug for super::region_backend_services::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-backend-services")]
impl std::fmt::Debug for super::region_backend_services::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-backend-services")]
impl std::fmt::Debug for super::region_backend_services::SetSecurityPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetSecurityPolicyRequest");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-backend-services")]
impl std::fmt::Debug for super::region_backend_services::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-backend-services")]
impl std::fmt::Debug for super::region_backend_services::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("backend_service", &self.backend_service);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::region_commitments::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::region_commitments::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("commitment", &self.commitment);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::region_commitments::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::region_commitments::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-commitments")]
impl std::fmt::Debug for super::region_commitments::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("commitment", &self.commitment);
        debug_struct.field("paths", &self.paths);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disk-types")]
impl std::fmt::Debug for super::region_disk_types::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("disk_type", &self.disk_type);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disk-types")]
impl std::fmt::Debug for super::region_disk_types::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::region_disks::AddResourcePoliciesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddResourcePoliciesRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::region_disks::BulkInsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BulkInsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::region_disks::CreateSnapshotRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CreateSnapshotRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::region_disks::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::region_disks::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::region_disks::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::region_disks::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("source_image", &self.source_image);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::region_disks::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::region_disks::RemoveResourcePoliciesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemoveResourcePoliciesRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::region_disks::ResizeRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResizeRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::region_disks::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::region_disks::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::region_disks::StartAsyncReplicationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StartAsyncReplicationRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::region_disks::StopAsyncReplicationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StopAsyncReplicationRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::region_disks::StopGroupAsyncReplicationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StopGroupAsyncReplicationRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::region_disks::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-disks")]
impl std::fmt::Debug for super::region_disks::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("disk", &self.disk);
        debug_struct.field("paths", &self.paths);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-health-check-services")]
impl std::fmt::Debug for super::region_health_check_services::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("health_check_service", &self.health_check_service);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-health-check-services")]
impl std::fmt::Debug for super::region_health_check_services::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("health_check_service", &self.health_check_service);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-health-check-services")]
impl std::fmt::Debug for super::region_health_check_services::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-health-check-services")]
impl std::fmt::Debug for super::region_health_check_services::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-health-check-services")]
impl std::fmt::Debug for super::region_health_check_services::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("health_check_service", &self.health_check_service);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-health-checks")]
impl std::fmt::Debug for super::region_health_checks::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("health_check", &self.health_check);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-health-checks")]
impl std::fmt::Debug for super::region_health_checks::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("health_check", &self.health_check);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-health-checks")]
impl std::fmt::Debug for super::region_health_checks::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-health-checks")]
impl std::fmt::Debug for super::region_health_checks::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-health-checks")]
impl std::fmt::Debug for super::region_health_checks::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("health_check", &self.health_check);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-health-checks")]
impl std::fmt::Debug for super::region_health_checks::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("health_check", &self.health_check);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::AbandonInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AbandonInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::ApplyUpdatesToInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ApplyUpdatesToInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::CreateInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CreateInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::DeleteInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::DeletePerInstanceConfigsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeletePerInstanceConfigsRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::ListErrorsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListErrorsRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::ListManagedInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListManagedInstancesRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::ListPerInstanceConfigsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListPerInstanceConfigsRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::PatchPerInstanceConfigsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchPerInstanceConfigsRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::RecreateInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RecreateInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::ResizeRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResizeRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("size", &self.size);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::ResumeInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResumeInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::SetInstanceTemplateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetInstanceTemplateRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::SetTargetPoolsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetTargetPoolsRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::StartInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StartInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::StopInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("StopInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::SuspendInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SuspendInstancesRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-group-managers")]
impl std::fmt::Debug for super::region_instance_group_managers::UpdatePerInstanceConfigsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdatePerInstanceConfigsRequest");
        debug_struct.field("instance_group_manager", &self.instance_group_manager);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-groups")]
impl std::fmt::Debug for super::region_instance_groups::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("instance_group", &self.instance_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-groups")]
impl std::fmt::Debug for super::region_instance_groups::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-groups")]
impl std::fmt::Debug for super::region_instance_groups::ListInstancesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListInstancesRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("instance_group", &self.instance_group);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-groups")]
impl std::fmt::Debug for super::region_instance_groups::SetNamedPortsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetNamedPortsRequest");
        debug_struct.field("instance_group", &self.instance_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-groups")]
impl std::fmt::Debug for super::region_instance_groups::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-templates")]
impl std::fmt::Debug for super::region_instance_templates::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("instance_template", &self.instance_template);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-templates")]
impl std::fmt::Debug for super::region_instance_templates::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("instance_template", &self.instance_template);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-templates")]
impl std::fmt::Debug for super::region_instance_templates::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instance-templates")]
impl std::fmt::Debug for super::region_instance_templates::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instances")]
impl std::fmt::Debug for super::region_instances::BulkInsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("BulkInsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instant-snapshots")]
impl std::fmt::Debug for super::region_instant_snapshots::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("instant_snapshot", &self.instant_snapshot);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instant-snapshots")]
impl std::fmt::Debug for super::region_instant_snapshots::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("instant_snapshot", &self.instant_snapshot);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instant-snapshots")]
impl std::fmt::Debug for super::region_instant_snapshots::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instant-snapshots")]
impl std::fmt::Debug for super::region_instant_snapshots::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instant-snapshots")]
impl std::fmt::Debug for super::region_instant_snapshots::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instant-snapshots")]
impl std::fmt::Debug for super::region_instant_snapshots::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instant-snapshots")]
impl std::fmt::Debug for super::region_instant_snapshots::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-instant-snapshots")]
impl std::fmt::Debug for super::region_instant_snapshots::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-endpoint-groups")]
impl std::fmt::Debug for super::region_network_endpoint_groups::AttachNetworkEndpointsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AttachNetworkEndpointsRequest");
        debug_struct.field("network_endpoint_group", &self.network_endpoint_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-endpoint-groups")]
impl std::fmt::Debug for super::region_network_endpoint_groups::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("network_endpoint_group", &self.network_endpoint_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-endpoint-groups")]
impl std::fmt::Debug for super::region_network_endpoint_groups::DetachNetworkEndpointsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DetachNetworkEndpointsRequest");
        debug_struct.field("network_endpoint_group", &self.network_endpoint_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-endpoint-groups")]
impl std::fmt::Debug for super::region_network_endpoint_groups::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("network_endpoint_group", &self.network_endpoint_group);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-endpoint-groups")]
impl std::fmt::Debug for super::region_network_endpoint_groups::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-endpoint-groups")]
impl std::fmt::Debug for super::region_network_endpoint_groups::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-endpoint-groups")]
impl std::fmt::Debug for super::region_network_endpoint_groups::ListNetworkEndpointsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListNetworkEndpointsRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("network_endpoint_group", &self.network_endpoint_group);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::region_network_firewall_policies::AddAssociationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddAssociationRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field(
            "replace_existing_association",
            &self.replace_existing_association,
        );
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::region_network_firewall_policies::AddRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddRuleRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("max_priority", &self.max_priority);
        debug_struct.field("min_priority", &self.min_priority);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::region_network_firewall_policies::CloneRulesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("CloneRulesRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("source_firewall_policy", &self.source_firewall_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::region_network_firewall_policies::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::region_network_firewall_policies::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::region_network_firewall_policies::GetAssociationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetAssociationRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("name", &self.name);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::region_network_firewall_policies::GetEffectiveFirewallsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetEffectiveFirewallsRequest");
        debug_struct.field("network", &self.network);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::region_network_firewall_policies::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::region_network_firewall_policies::GetRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRuleRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::region_network_firewall_policies::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::region_network_firewall_policies::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::region_network_firewall_policies::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::region_network_firewall_policies::PatchRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRuleRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::region_network_firewall_policies::RemoveAssociationRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemoveAssociationRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("name", &self.name);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::region_network_firewall_policies::RemoveRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemoveRuleRequest");
        debug_struct.field("firewall_policy", &self.firewall_policy);
        debug_struct.field("priority", &self.priority);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::region_network_firewall_policies::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-network-firewall-policies")]
impl std::fmt::Debug for super::region_network_firewall_policies::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-notification-endpoints")]
impl std::fmt::Debug for super::region_notification_endpoints::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("notification_endpoint", &self.notification_endpoint);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-notification-endpoints")]
impl std::fmt::Debug for super::region_notification_endpoints::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("notification_endpoint", &self.notification_endpoint);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-notification-endpoints")]
impl std::fmt::Debug for super::region_notification_endpoints::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-notification-endpoints")]
impl std::fmt::Debug for super::region_notification_endpoints::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-operations")]
impl std::fmt::Debug for super::region_operations::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("operation", &self.operation);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "addresses",
    feature = "forwarding-rules",
    feature = "interconnect-attachments",
    feature = "network-attachments",
    feature = "network-edge-security-services",
    feature = "node-templates",
    feature = "packet-mirrorings",
    feature = "public-delegated-prefixes",
    feature = "region-autoscalers",
    feature = "region-backend-services",
    feature = "region-commitments",
    feature = "region-disks",
    feature = "region-health-check-services",
    feature = "region-health-checks",
    feature = "region-instance-group-managers",
    feature = "region-instance-groups",
    feature = "region-instance-templates",
    feature = "region-instances",
    feature = "region-instant-snapshots",
    feature = "region-network-endpoint-groups",
    feature = "region-network-firewall-policies",
    feature = "region-notification-endpoints",
    feature = "region-operations",
    feature = "region-security-policies",
    feature = "region-ssl-certificates",
    feature = "region-ssl-policies",
    feature = "region-target-http-proxies",
    feature = "region-target-https-proxies",
    feature = "region-target-tcp-proxies",
    feature = "region-url-maps",
    feature = "resource-policies",
    feature = "routers",
    feature = "service-attachments",
    feature = "subnetworks",
    feature = "target-pools",
    feature = "target-vpn-gateways",
    feature = "vpn-gateways",
    feature = "vpn-tunnels",
))]
impl std::fmt::Debug for super::region_operations::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("operation", &self.operation);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-operations")]
impl std::fmt::Debug for super::region_operations::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-operations")]
impl std::fmt::Debug for super::region_operations::WaitRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("WaitRequest");
        debug_struct.field("operation", &self.operation);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-security-policies")]
impl std::fmt::Debug for super::region_security_policies::AddRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddRuleRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("security_policy", &self.security_policy);
        debug_struct.field("validate_only", &self.validate_only);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-security-policies")]
impl std::fmt::Debug for super::region_security_policies::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("security_policy", &self.security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-security-policies")]
impl std::fmt::Debug for super::region_security_policies::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("security_policy", &self.security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-security-policies")]
impl std::fmt::Debug for super::region_security_policies::GetRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRuleRequest");
        debug_struct.field("priority", &self.priority);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("security_policy", &self.security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-security-policies")]
impl std::fmt::Debug for super::region_security_policies::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("validate_only", &self.validate_only);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-security-policies")]
impl std::fmt::Debug for super::region_security_policies::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-security-policies")]
impl std::fmt::Debug for super::region_security_policies::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("security_policy", &self.security_policy);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-security-policies")]
impl std::fmt::Debug for super::region_security_policies::PatchRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRuleRequest");
        debug_struct.field("priority", &self.priority);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("security_policy", &self.security_policy);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("validate_only", &self.validate_only);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-security-policies")]
impl std::fmt::Debug for super::region_security_policies::RemoveRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemoveRuleRequest");
        debug_struct.field("priority", &self.priority);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("security_policy", &self.security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-security-policies")]
impl std::fmt::Debug for super::region_security_policies::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-ssl-certificates")]
impl std::fmt::Debug for super::region_ssl_certificates::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("ssl_certificate", &self.ssl_certificate);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-ssl-certificates")]
impl std::fmt::Debug for super::region_ssl_certificates::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("ssl_certificate", &self.ssl_certificate);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-ssl-certificates")]
impl std::fmt::Debug for super::region_ssl_certificates::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-ssl-certificates")]
impl std::fmt::Debug for super::region_ssl_certificates::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-ssl-policies")]
impl std::fmt::Debug for super::region_ssl_policies::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("ssl_policy", &self.ssl_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-ssl-policies")]
impl std::fmt::Debug for super::region_ssl_policies::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("ssl_policy", &self.ssl_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-ssl-policies")]
impl std::fmt::Debug for super::region_ssl_policies::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-ssl-policies")]
impl std::fmt::Debug for super::region_ssl_policies::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-ssl-policies")]
impl std::fmt::Debug for super::region_ssl_policies::ListAvailableFeaturesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListAvailableFeaturesRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-ssl-policies")]
impl std::fmt::Debug for super::region_ssl_policies::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("ssl_policy", &self.ssl_policy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-target-http-proxies")]
impl std::fmt::Debug for super::region_target_http_proxies::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_http_proxy", &self.target_http_proxy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-target-http-proxies")]
impl std::fmt::Debug for super::region_target_http_proxies::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("target_http_proxy", &self.target_http_proxy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-target-http-proxies")]
impl std::fmt::Debug for super::region_target_http_proxies::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-target-http-proxies")]
impl std::fmt::Debug for super::region_target_http_proxies::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-target-http-proxies")]
impl std::fmt::Debug for super::region_target_http_proxies::SetUrlMapRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetUrlMapRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_http_proxy", &self.target_http_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-target-https-proxies")]
impl std::fmt::Debug for super::region_target_https_proxies::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_https_proxy", &self.target_https_proxy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-target-https-proxies")]
impl std::fmt::Debug for super::region_target_https_proxies::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("target_https_proxy", &self.target_https_proxy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-target-https-proxies")]
impl std::fmt::Debug for super::region_target_https_proxies::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-target-https-proxies")]
impl std::fmt::Debug for super::region_target_https_proxies::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-target-https-proxies")]
impl std::fmt::Debug for super::region_target_https_proxies::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_https_proxy", &self.target_https_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-target-https-proxies")]
impl std::fmt::Debug for super::region_target_https_proxies::SetSslCertificatesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetSslCertificatesRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_https_proxy", &self.target_https_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-target-https-proxies")]
impl std::fmt::Debug for super::region_target_https_proxies::SetUrlMapRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetUrlMapRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_https_proxy", &self.target_https_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-target-tcp-proxies")]
impl std::fmt::Debug for super::region_target_tcp_proxies::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_tcp_proxy", &self.target_tcp_proxy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-target-tcp-proxies")]
impl std::fmt::Debug for super::region_target_tcp_proxies::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("target_tcp_proxy", &self.target_tcp_proxy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-target-tcp-proxies")]
impl std::fmt::Debug for super::region_target_tcp_proxies::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-target-tcp-proxies")]
impl std::fmt::Debug for super::region_target_tcp_proxies::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-url-maps")]
impl std::fmt::Debug for super::region_url_maps::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("url_map", &self.url_map);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-url-maps")]
impl std::fmt::Debug for super::region_url_maps::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("url_map", &self.url_map);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-url-maps")]
impl std::fmt::Debug for super::region_url_maps::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-url-maps")]
impl std::fmt::Debug for super::region_url_maps::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-url-maps")]
impl std::fmt::Debug for super::region_url_maps::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("url_map", &self.url_map);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-url-maps")]
impl std::fmt::Debug for super::region_url_maps::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("url_map", &self.url_map);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-url-maps")]
impl std::fmt::Debug for super::region_url_maps::ValidateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ValidateRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("url_map", &self.url_map);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "region-zones")]
impl std::fmt::Debug for super::region_zones::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "regions")]
impl std::fmt::Debug for super::regions::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "regions")]
impl std::fmt::Debug for super::regions::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-blocks")]
impl std::fmt::Debug for super::reservation_blocks::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("reservation", &self.reservation);
        debug_struct.field("reservation_block", &self.reservation_block);
        debug_struct.field("view", &self.view);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-blocks")]
impl std::fmt::Debug for super::reservation_blocks::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("reservation", &self.reservation);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-blocks")]
impl std::fmt::Debug for super::reservation_blocks::PerformMaintenanceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PerformMaintenanceRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("reservation", &self.reservation);
        debug_struct.field("reservation_block", &self.reservation_block);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-sub-blocks")]
impl std::fmt::Debug for super::reservation_sub_blocks::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("parent_name", &self.parent_name);
        debug_struct.field("project", &self.project);
        debug_struct.field("reservation_sub_block", &self.reservation_sub_block);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-sub-blocks")]
impl std::fmt::Debug for super::reservation_sub_blocks::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("parent_name", &self.parent_name);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-sub-blocks")]
impl std::fmt::Debug for super::reservation_sub_blocks::PerformMaintenanceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PerformMaintenanceRequest");
        debug_struct.field("parent_name", &self.parent_name);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("reservation_sub_block", &self.reservation_sub_block);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservation-sub-blocks")]
impl std::fmt::Debug for super::reservation_sub_blocks::ReportFaultyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ReportFaultyRequest");
        debug_struct.field("parent_name", &self.parent_name);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("reservation_sub_block", &self.reservation_sub_block);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::reservations::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::reservations::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("reservation", &self.reservation);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::reservations::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("reservation", &self.reservation);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::reservations::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::reservations::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::reservations::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::reservations::PerformMaintenanceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PerformMaintenanceRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("reservation", &self.reservation);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::reservations::ResizeRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ResizeRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("reservation", &self.reservation);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::reservations::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::reservations::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "reservations")]
impl std::fmt::Debug for super::reservations::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("paths", &self.paths);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("reservation", &self.reservation);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::resource_policies::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::resource_policies::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("resource_policy", &self.resource_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::resource_policies::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource_policy", &self.resource_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::resource_policies::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::resource_policies::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::resource_policies::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::resource_policies::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("resource_policy", &self.resource_policy);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::resource_policies::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "resource-policies")]
impl std::fmt::Debug for super::resource_policies::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("router", &self.router);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers::DeleteRoutePolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRoutePolicyRequest");
        debug_struct.field("policy", &self.policy);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("router", &self.router);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("router", &self.router);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers::GetNatIpInfoRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetNatIpInfoRequest");
        debug_struct.field("nat_name", &self.nat_name);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("router", &self.router);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers::GetNatMappingInfoRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetNatMappingInfoRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("nat_name", &self.nat_name);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("router", &self.router);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers::GetRoutePolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRoutePolicyRequest");
        debug_struct.field("policy", &self.policy);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("router", &self.router);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers::GetRouterStatusRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRouterStatusRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("router", &self.router);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers::ListBgpRoutesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListBgpRoutesRequest");
        debug_struct.field("address_family", &self.address_family);
        debug_struct.field("destination_prefix", &self.destination_prefix);
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("peer", &self.peer);
        debug_struct.field("policy_applied", &self.policy_applied);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("route_type", &self.route_type);
        debug_struct.field("router", &self.router);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers::ListRoutePoliciesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRoutePoliciesRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("router", &self.router);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("router", &self.router);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers::PatchRoutePolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRoutePolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("router", &self.router);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers::PreviewRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PreviewRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("router", &self.router);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("router", &self.router);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routers")]
impl std::fmt::Debug for super::routers::UpdateRoutePolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRoutePolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("router", &self.router);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routes")]
impl std::fmt::Debug for super::routes::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("route", &self.route);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routes")]
impl std::fmt::Debug for super::routes::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("route", &self.route);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routes")]
impl std::fmt::Debug for super::routes::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "routes")]
impl std::fmt::Debug for super::routes::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::security_policies::AddRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddRuleRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("security_policy", &self.security_policy);
        debug_struct.field("validate_only", &self.validate_only);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::security_policies::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::security_policies::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("security_policy", &self.security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::security_policies::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("security_policy", &self.security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::security_policies::GetRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRuleRequest");
        debug_struct.field("priority", &self.priority);
        debug_struct.field("project", &self.project);
        debug_struct.field("security_policy", &self.security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::security_policies::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("validate_only", &self.validate_only);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::security_policies::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::security_policies::ListPreconfiguredExpressionSetsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListPreconfiguredExpressionSetsRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::security_policies::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("security_policy", &self.security_policy);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::security_policies::PatchRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRuleRequest");
        debug_struct.field("priority", &self.priority);
        debug_struct.field("project", &self.project);
        debug_struct.field("security_policy", &self.security_policy);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("validate_only", &self.validate_only);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::security_policies::RemoveRuleRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemoveRuleRequest");
        debug_struct.field("priority", &self.priority);
        debug_struct.field("project", &self.project);
        debug_struct.field("security_policy", &self.security_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "security-policies")]
impl std::fmt::Debug for super::security_policies::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::service_attachments::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::service_attachments::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("service_attachment", &self.service_attachment);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::service_attachments::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("service_attachment", &self.service_attachment);
        debug_struct.field("show_nat_ips", &self.show_nat_ips);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::service_attachments::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::service_attachments::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::service_attachments::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::service_attachments::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("service_attachment", &self.service_attachment);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::service_attachments::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "service-attachments")]
impl std::fmt::Debug for super::service_attachments::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "snapshot-settings")]
impl std::fmt::Debug for super::snapshot_settings::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "snapshot-settings")]
impl std::fmt::Debug for super::snapshot_settings::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "snapshots")]
impl std::fmt::Debug for super::snapshots::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("snapshot", &self.snapshot);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "snapshots")]
impl std::fmt::Debug for super::snapshots::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("snapshot", &self.snapshot);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "snapshots")]
impl std::fmt::Debug for super::snapshots::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "snapshots")]
impl std::fmt::Debug for super::snapshots::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "snapshots")]
impl std::fmt::Debug for super::snapshots::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "snapshots")]
impl std::fmt::Debug for super::snapshots::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "snapshots")]
impl std::fmt::Debug for super::snapshots::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "snapshots")]
impl std::fmt::Debug for super::snapshots::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-certificates")]
impl std::fmt::Debug for super::ssl_certificates::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-certificates")]
impl std::fmt::Debug for super::ssl_certificates::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("ssl_certificate", &self.ssl_certificate);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-certificates")]
impl std::fmt::Debug for super::ssl_certificates::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("ssl_certificate", &self.ssl_certificate);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-certificates")]
impl std::fmt::Debug for super::ssl_certificates::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-certificates")]
impl std::fmt::Debug for super::ssl_certificates::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-policies")]
impl std::fmt::Debug for super::ssl_policies::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-policies")]
impl std::fmt::Debug for super::ssl_policies::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("ssl_policy", &self.ssl_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-policies")]
impl std::fmt::Debug for super::ssl_policies::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("ssl_policy", &self.ssl_policy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-policies")]
impl std::fmt::Debug for super::ssl_policies::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-policies")]
impl std::fmt::Debug for super::ssl_policies::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-policies")]
impl std::fmt::Debug for super::ssl_policies::ListAvailableFeaturesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListAvailableFeaturesRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "ssl-policies")]
impl std::fmt::Debug for super::ssl_policies::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("ssl_policy", &self.ssl_policy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pool-types")]
impl std::fmt::Debug for super::storage_pool_types::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pool-types")]
impl std::fmt::Debug for super::storage_pool_types::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("storage_pool_type", &self.storage_pool_type);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pool-types")]
impl std::fmt::Debug for super::storage_pool_types::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pools::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pools::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("storage_pool", &self.storage_pool);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pools::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("storage_pool", &self.storage_pool);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pools::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pools::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pools::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pools::ListDisksRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListDisksRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("storage_pool", &self.storage_pool);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pools::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pools::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "storage-pools")]
impl std::fmt::Debug for super::storage_pools::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("storage_pool", &self.storage_pool);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetworks::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetworks::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("subnetwork", &self.subnetwork);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetworks::ExpandIpCidrRangeRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ExpandIpCidrRangeRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("subnetwork", &self.subnetwork);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetworks::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("subnetwork", &self.subnetwork);
        debug_struct.field("views", &self.views);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetworks::GetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetIamPolicyRequest");
        debug_struct.field(
            "options_requested_policy_version",
            &self.options_requested_policy_version,
        );
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetworks::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetworks::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("views", &self.views);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetworks::ListUsableRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListUsableRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project", &self.service_project);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetworks::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("drain_timeout_seconds", &self.drain_timeout_seconds);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("subnetwork", &self.subnetwork);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetworks::SetIamPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetIamPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetworks::SetPrivateIpGoogleAccessRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetPrivateIpGoogleAccessRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("subnetwork", &self.subnetwork);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "subnetworks")]
impl std::fmt::Debug for super::subnetworks::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-grpc-proxies")]
impl std::fmt::Debug for super::target_grpc_proxies::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_grpc_proxy", &self.target_grpc_proxy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-grpc-proxies")]
impl std::fmt::Debug for super::target_grpc_proxies::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("target_grpc_proxy", &self.target_grpc_proxy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-grpc-proxies")]
impl std::fmt::Debug for super::target_grpc_proxies::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-grpc-proxies")]
impl std::fmt::Debug for super::target_grpc_proxies::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-grpc-proxies")]
impl std::fmt::Debug for super::target_grpc_proxies::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_grpc_proxy", &self.target_grpc_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-http-proxies")]
impl std::fmt::Debug for super::target_http_proxies::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-http-proxies")]
impl std::fmt::Debug for super::target_http_proxies::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_http_proxy", &self.target_http_proxy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-http-proxies")]
impl std::fmt::Debug for super::target_http_proxies::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("target_http_proxy", &self.target_http_proxy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-http-proxies")]
impl std::fmt::Debug for super::target_http_proxies::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-http-proxies")]
impl std::fmt::Debug for super::target_http_proxies::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-http-proxies")]
impl std::fmt::Debug for super::target_http_proxies::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_http_proxy", &self.target_http_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-http-proxies")]
impl std::fmt::Debug for super::target_http_proxies::SetUrlMapRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetUrlMapRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_http_proxy", &self.target_http_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::target_https_proxies::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::target_https_proxies::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_https_proxy", &self.target_https_proxy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::target_https_proxies::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("target_https_proxy", &self.target_https_proxy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::target_https_proxies::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::target_https_proxies::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::target_https_proxies::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_https_proxy", &self.target_https_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::target_https_proxies::SetCertificateMapRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetCertificateMapRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_https_proxy", &self.target_https_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::target_https_proxies::SetQuicOverrideRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetQuicOverrideRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_https_proxy", &self.target_https_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::target_https_proxies::SetSslCertificatesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetSslCertificatesRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_https_proxy", &self.target_https_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::target_https_proxies::SetSslPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetSslPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_https_proxy", &self.target_https_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-https-proxies")]
impl std::fmt::Debug for super::target_https_proxies::SetUrlMapRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetUrlMapRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_https_proxy", &self.target_https_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-instances")]
impl std::fmt::Debug for super::target_instances::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-instances")]
impl std::fmt::Debug for super::target_instances::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_instance", &self.target_instance);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-instances")]
impl std::fmt::Debug for super::target_instances::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("target_instance", &self.target_instance);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-instances")]
impl std::fmt::Debug for super::target_instances::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-instances")]
impl std::fmt::Debug for super::target_instances::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-instances")]
impl std::fmt::Debug for super::target_instances::SetSecurityPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetSecurityPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_instance", &self.target_instance);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-instances")]
impl std::fmt::Debug for super::target_instances::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("zone", &self.zone);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pools::AddHealthCheckRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddHealthCheckRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_pool", &self.target_pool);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pools::AddInstanceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AddInstanceRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_pool", &self.target_pool);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pools::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pools::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_pool", &self.target_pool);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pools::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("target_pool", &self.target_pool);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pools::GetHealthRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetHealthRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("target_pool", &self.target_pool);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pools::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pools::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pools::RemoveHealthCheckRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemoveHealthCheckRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_pool", &self.target_pool);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pools::RemoveInstanceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("RemoveInstanceRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_pool", &self.target_pool);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pools::SetBackupRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetBackupRequest");
        debug_struct.field("failover_ratio", &self.failover_ratio);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_pool", &self.target_pool);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pools::SetSecurityPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetSecurityPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_pool", &self.target_pool);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-pools")]
impl std::fmt::Debug for super::target_pools::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-ssl-proxies")]
impl std::fmt::Debug for super::target_ssl_proxies::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_ssl_proxy", &self.target_ssl_proxy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-ssl-proxies")]
impl std::fmt::Debug for super::target_ssl_proxies::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("target_ssl_proxy", &self.target_ssl_proxy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-ssl-proxies")]
impl std::fmt::Debug for super::target_ssl_proxies::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-ssl-proxies")]
impl std::fmt::Debug for super::target_ssl_proxies::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-ssl-proxies")]
impl std::fmt::Debug for super::target_ssl_proxies::SetBackendServiceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetBackendServiceRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_ssl_proxy", &self.target_ssl_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-ssl-proxies")]
impl std::fmt::Debug for super::target_ssl_proxies::SetCertificateMapRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetCertificateMapRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_ssl_proxy", &self.target_ssl_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-ssl-proxies")]
impl std::fmt::Debug for super::target_ssl_proxies::SetProxyHeaderRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetProxyHeaderRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_ssl_proxy", &self.target_ssl_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-ssl-proxies")]
impl std::fmt::Debug for super::target_ssl_proxies::SetSslCertificatesRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetSslCertificatesRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_ssl_proxy", &self.target_ssl_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-ssl-proxies")]
impl std::fmt::Debug for super::target_ssl_proxies::SetSslPolicyRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetSslPolicyRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_ssl_proxy", &self.target_ssl_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-tcp-proxies")]
impl std::fmt::Debug for super::target_tcp_proxies::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-tcp-proxies")]
impl std::fmt::Debug for super::target_tcp_proxies::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_tcp_proxy", &self.target_tcp_proxy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-tcp-proxies")]
impl std::fmt::Debug for super::target_tcp_proxies::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("target_tcp_proxy", &self.target_tcp_proxy);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-tcp-proxies")]
impl std::fmt::Debug for super::target_tcp_proxies::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-tcp-proxies")]
impl std::fmt::Debug for super::target_tcp_proxies::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-tcp-proxies")]
impl std::fmt::Debug for super::target_tcp_proxies::SetBackendServiceRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetBackendServiceRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_tcp_proxy", &self.target_tcp_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-tcp-proxies")]
impl std::fmt::Debug for super::target_tcp_proxies::SetProxyHeaderRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetProxyHeaderRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_tcp_proxy", &self.target_tcp_proxy);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-vpn-gateways")]
impl std::fmt::Debug for super::target_vpn_gateways::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-vpn-gateways")]
impl std::fmt::Debug for super::target_vpn_gateways::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("target_vpn_gateway", &self.target_vpn_gateway);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-vpn-gateways")]
impl std::fmt::Debug for super::target_vpn_gateways::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("target_vpn_gateway", &self.target_vpn_gateway);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-vpn-gateways")]
impl std::fmt::Debug for super::target_vpn_gateways::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-vpn-gateways")]
impl std::fmt::Debug for super::target_vpn_gateways::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "target-vpn-gateways")]
impl std::fmt::Debug for super::target_vpn_gateways::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "url-maps")]
impl std::fmt::Debug for super::url_maps::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "url-maps")]
impl std::fmt::Debug for super::url_maps::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("url_map", &self.url_map);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "url-maps")]
impl std::fmt::Debug for super::url_maps::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("url_map", &self.url_map);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "url-maps")]
impl std::fmt::Debug for super::url_maps::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "url-maps")]
impl std::fmt::Debug for super::url_maps::InvalidateCacheRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InvalidateCacheRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("url_map", &self.url_map);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "url-maps")]
impl std::fmt::Debug for super::url_maps::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "url-maps")]
impl std::fmt::Debug for super::url_maps::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("url_map", &self.url_map);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "url-maps")]
impl std::fmt::Debug for super::url_maps::UpdateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("UpdateRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("url_map", &self.url_map);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "url-maps")]
impl std::fmt::Debug for super::url_maps::ValidateRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ValidateRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("url_map", &self.url_map);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::vpn_gateways::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::vpn_gateways::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("vpn_gateway", &self.vpn_gateway);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::vpn_gateways::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("vpn_gateway", &self.vpn_gateway);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::vpn_gateways::GetStatusRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetStatusRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("vpn_gateway", &self.vpn_gateway);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::vpn_gateways::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::vpn_gateways::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::vpn_gateways::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-gateways")]
impl std::fmt::Debug for super::vpn_gateways::TestIamPermissionsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("TestIamPermissionsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::vpn_tunnels::AggregatedListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("AggregatedListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("include_all_scopes", &self.include_all_scopes);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("service_project_number", &self.service_project_number);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::vpn_tunnels::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("vpn_tunnel", &self.vpn_tunnel);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::vpn_tunnels::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("vpn_tunnel", &self.vpn_tunnel);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::vpn_tunnels::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::vpn_tunnels::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "vpn-tunnels")]
impl std::fmt::Debug for super::vpn_tunnels::SetLabelsRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("SetLabelsRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("region", &self.region);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("resource", &self.resource);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "wire-groups")]
impl std::fmt::Debug for super::wire_groups::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("cross_site_network", &self.cross_site_network);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("wire_group", &self.wire_group);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "wire-groups")]
impl std::fmt::Debug for super::wire_groups::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("cross_site_network", &self.cross_site_network);
        debug_struct.field("project", &self.project);
        debug_struct.field("wire_group", &self.wire_group);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "wire-groups")]
impl std::fmt::Debug for super::wire_groups::InsertRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("InsertRequest");
        debug_struct.field("cross_site_network", &self.cross_site_network);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("validate_only", &self.validate_only);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "wire-groups")]
impl std::fmt::Debug for super::wire_groups::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("cross_site_network", &self.cross_site_network);
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "wire-groups")]
impl std::fmt::Debug for super::wire_groups::PatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("PatchRequest");
        debug_struct.field("cross_site_network", &self.cross_site_network);
        debug_struct.field("project", &self.project);
        debug_struct.field("request_id", &self.request_id);
        debug_struct.field("update_mask", &self.update_mask);
        debug_struct.field("validate_only", &self.validate_only);
        debug_struct.field("wire_group", &self.wire_group);
        debug_struct.field("body", &self.body);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "zone-operations")]
impl std::fmt::Debug for super::zone_operations::DeleteRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("DeleteRequest");
        debug_struct.field("operation", &self.operation);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(any(
    feature = "autoscalers",
    feature = "disks",
    feature = "future-reservations",
    feature = "instance-group-manager-resize-requests",
    feature = "instance-group-managers",
    feature = "instance-groups",
    feature = "instance-settings",
    feature = "instances",
    feature = "instant-snapshots",
    feature = "network-endpoint-groups",
    feature = "node-groups",
    feature = "reservation-blocks",
    feature = "reservation-sub-blocks",
    feature = "reservations",
    feature = "storage-pools",
    feature = "target-instances",
    feature = "zone-operations",
))]
impl std::fmt::Debug for super::zone_operations::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("operation", &self.operation);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "zone-operations")]
impl std::fmt::Debug for super::zone_operations::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "zone-operations")]
impl std::fmt::Debug for super::zone_operations::WaitRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("WaitRequest");
        debug_struct.field("operation", &self.operation);
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "zones")]
impl std::fmt::Debug for super::zones::GetRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("GetRequest");
        debug_struct.field("project", &self.project);
        debug_struct.field("zone", &self.zone);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}

#[cfg(feature = "zones")]
impl std::fmt::Debug for super::zones::ListRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut debug_struct = f.debug_struct("ListRequest");
        debug_struct.field("filter", &self.filter);
        debug_struct.field("max_results", &self.max_results);
        debug_struct.field("order_by", &self.order_by);
        debug_struct.field("page_token", &self.page_token);
        debug_struct.field("project", &self.project);
        debug_struct.field("return_partial_success", &self.return_partial_success);
        if !self._unknown_fields.is_empty() {
            debug_struct.field("_unknown_fields", &self._unknown_fields);
        }
        debug_struct.finish()
    }
}
