// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Controls Partner API.
///
/// # Service Description
///
/// Service describing handlers for resources
///
/// # Configuration
///
/// `CloudControlsPartnerCore` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `CloudControlsPartnerCore` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `CloudControlsPartnerCore` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct CloudControlsPartnerCore {
    inner: Arc<dyn crate::stubs::dynamic::CloudControlsPartnerCore>,
}

impl CloudControlsPartnerCore {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::CloudControlsPartnerCore + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::CloudControlsPartnerCore>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::CloudControlsPartnerCore> {
        crate::transport::CloudControlsPartnerCore::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::CloudControlsPartnerCore> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::CloudControlsPartnerCore::new)
    }

    /// Gets details of a single workload
    pub fn get_workload(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_controls_partner_core::GetWorkload {
        crate::builders::cloud_controls_partner_core::GetWorkload::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists customer workloads for a given customer org id
    pub fn list_workloads(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::cloud_controls_partner_core::ListWorkloads {
        crate::builders::cloud_controls_partner_core::ListWorkloads::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single customer
    pub fn get_customer(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_controls_partner_core::GetCustomer {
        crate::builders::cloud_controls_partner_core::GetCustomer::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists customers of a partner identified by its Google Cloud organization ID
    pub fn list_customers(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::cloud_controls_partner_core::ListCustomers {
        crate::builders::cloud_controls_partner_core::ListCustomers::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets the EKM connections associated with a workload
    pub fn get_ekm_connections(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_controls_partner_core::GetEkmConnections {
        crate::builders::cloud_controls_partner_core::GetEkmConnections::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets the partner permissions granted for a workload
    pub fn get_partner_permissions(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_controls_partner_core::GetPartnerPermissions {
        crate::builders::cloud_controls_partner_core::GetPartnerPermissions::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deprecated: Only returns access approval requests directly associated with
    /// an assured workload folder.
    pub fn list_access_approval_requests(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::cloud_controls_partner_core::ListAccessApprovalRequests {
        crate::builders::cloud_controls_partner_core::ListAccessApprovalRequests::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Get details of a Partner.
    pub fn get_partner(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_controls_partner_core::GetPartner {
        crate::builders::cloud_controls_partner_core::GetPartner::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Cloud Controls Partner API.
///
/// # Service Description
///
/// Service describing handlers for resources
///
/// # Configuration
///
/// `CloudControlsPartnerMonitoring` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `CloudControlsPartnerMonitoring` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `CloudControlsPartnerMonitoring` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct CloudControlsPartnerMonitoring {
    inner: Arc<dyn crate::stubs::dynamic::CloudControlsPartnerMonitoring>,
}

impl CloudControlsPartnerMonitoring {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::CloudControlsPartnerMonitoring + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::CloudControlsPartnerMonitoring>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::CloudControlsPartnerMonitoring> {
        crate::transport::CloudControlsPartnerMonitoring::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::CloudControlsPartnerMonitoring> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::CloudControlsPartnerMonitoring::new)
    }

    /// Lists Violations for a workload
    /// Callers may also choose to read across multiple Customers or for a single
    /// customer as per
    /// [AIP-159](https://google.aip.dev/159) by using '-' (the hyphen or dash
    /// character) as a wildcard character instead of {customer} & {workload}.
    /// Format:
    /// `organizations/{organization}/locations/{location}/customers/{customer}/workloads/{workload}`
    pub fn list_violations(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::cloud_controls_partner_monitoring::ListViolations {
        crate::builders::cloud_controls_partner_monitoring::ListViolations::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single Violation.
    pub fn get_violation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::cloud_controls_partner_monitoring::GetViolation {
        crate::builders::cloud_controls_partner_monitoring::GetViolation::new(self.inner.clone())
            .set_name(name.into())
    }
}
