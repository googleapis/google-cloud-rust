// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

/// A dyn-compatible, crate-private version of [super::CloudControlsPartnerCore].
#[async_trait::async_trait]
pub trait CloudControlsPartnerCore: std::fmt::Debug + Send + Sync {
    async fn get_workload(
        &self,
        req: crate::model::GetWorkloadRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Workload>;

    async fn list_workloads(
        &self,
        req: crate::model::ListWorkloadsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListWorkloadsResponse>;

    async fn get_customer(
        &self,
        req: crate::model::GetCustomerRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Customer>;

    async fn list_customers(
        &self,
        req: crate::model::ListCustomersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCustomersResponse>;

    async fn get_ekm_connections(
        &self,
        req: crate::model::GetEkmConnectionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::EkmConnections>;

    async fn get_partner_permissions(
        &self,
        req: crate::model::GetPartnerPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::PartnerPermissions>;

    async fn list_access_approval_requests(
        &self,
        req: crate::model::ListAccessApprovalRequestsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAccessApprovalRequestsResponse>;

    async fn get_partner(
        &self,
        req: crate::model::GetPartnerRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Partner>;
}

/// All implementations of [super::CloudControlsPartnerCore] also implement [CloudControlsPartnerCore].
#[async_trait::async_trait]
impl<T: super::CloudControlsPartnerCore> CloudControlsPartnerCore for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn get_workload(
        &self,
        req: crate::model::GetWorkloadRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Workload> {
        T::get_workload(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_workloads(
        &self,
        req: crate::model::ListWorkloadsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListWorkloadsResponse> {
        T::list_workloads(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_customer(
        &self,
        req: crate::model::GetCustomerRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Customer> {
        T::get_customer(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_customers(
        &self,
        req: crate::model::ListCustomersRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListCustomersResponse> {
        T::list_customers(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_ekm_connections(
        &self,
        req: crate::model::GetEkmConnectionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::EkmConnections> {
        T::get_ekm_connections(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_partner_permissions(
        &self,
        req: crate::model::GetPartnerPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::PartnerPermissions> {
        T::get_partner_permissions(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_access_approval_requests(
        &self,
        req: crate::model::ListAccessApprovalRequestsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListAccessApprovalRequestsResponse> {
        T::list_access_approval_requests(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_partner(
        &self,
        req: crate::model::GetPartnerRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Partner> {
        T::get_partner(self, req, options).await
    }
}

/// A dyn-compatible, crate-private version of [super::CloudControlsPartnerMonitoring].
#[async_trait::async_trait]
pub trait CloudControlsPartnerMonitoring: std::fmt::Debug + Send + Sync {
    async fn list_violations(
        &self,
        req: crate::model::ListViolationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListViolationsResponse>;

    async fn get_violation(
        &self,
        req: crate::model::GetViolationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Violation>;
}

/// All implementations of [super::CloudControlsPartnerMonitoring] also implement [CloudControlsPartnerMonitoring].
#[async_trait::async_trait]
impl<T: super::CloudControlsPartnerMonitoring> CloudControlsPartnerMonitoring for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn list_violations(
        &self,
        req: crate::model::ListViolationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListViolationsResponse> {
        T::list_violations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_violation(
        &self,
        req: crate::model::GetViolationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Violation> {
        T::get_violation(self, req, options).await
    }
}
