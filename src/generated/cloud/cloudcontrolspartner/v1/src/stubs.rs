// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [crate::client::CloudControlsPartnerCore].
///
/// Application developers may need to implement this trait to mock
/// `client::CloudControlsPartnerCore`.  In other use-cases, application developers only
/// use `client::CloudControlsPartnerCore` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait CloudControlsPartnerCore: std::fmt::Debug + Send + Sync {
    /// Implements [crate::client::CloudControlsPartnerCore::get_workload].
    fn get_workload(
        &self,
        _req: crate::model::GetWorkloadRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Workload>> + Send {
        std::future::ready::<crate::Result<crate::model::Workload>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::CloudControlsPartnerCore::list_workloads].
    fn list_workloads(
        &self,
        _req: crate::model::ListWorkloadsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListWorkloadsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListWorkloadsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::CloudControlsPartnerCore::get_customer].
    fn get_customer(
        &self,
        _req: crate::model::GetCustomerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Customer>> + Send {
        std::future::ready::<crate::Result<crate::model::Customer>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::CloudControlsPartnerCore::list_customers].
    fn list_customers(
        &self,
        _req: crate::model::ListCustomersRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListCustomersResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListCustomersResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::CloudControlsPartnerCore::get_ekm_connections].
    fn get_ekm_connections(
        &self,
        _req: crate::model::GetEkmConnectionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::EkmConnections>> + Send {
        std::future::ready::<crate::Result<crate::model::EkmConnections>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::CloudControlsPartnerCore::get_partner_permissions].
    fn get_partner_permissions(
        &self,
        _req: crate::model::GetPartnerPermissionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::PartnerPermissions>> + Send
    {
        std::future::ready::<crate::Result<crate::model::PartnerPermissions>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::CloudControlsPartnerCore::list_access_approval_requests].
    fn list_access_approval_requests(
        &self,
        _req: crate::model::ListAccessApprovalRequestsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListAccessApprovalRequestsResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListAccessApprovalRequestsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::CloudControlsPartnerCore::get_partner].
    fn get_partner(
        &self,
        _req: crate::model::GetPartnerRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Partner>> + Send {
        std::future::ready::<crate::Result<crate::model::Partner>>(Err(Error::other(
            "unimplemented",
        )))
    }
}

/// Defines the trait used to implement [crate::client::CloudControlsPartnerMonitoring].
///
/// Application developers may need to implement this trait to mock
/// `client::CloudControlsPartnerMonitoring`.  In other use-cases, application developers only
/// use `client::CloudControlsPartnerMonitoring` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait CloudControlsPartnerMonitoring: std::fmt::Debug + Send + Sync {
    /// Implements [crate::client::CloudControlsPartnerMonitoring::list_violations].
    fn list_violations(
        &self,
        _req: crate::model::ListViolationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListViolationsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListViolationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::CloudControlsPartnerMonitoring::get_violation].
    fn get_violation(
        &self,
        _req: crate::model::GetViolationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Violation>> + Send {
        std::future::ready::<crate::Result<crate::model::Violation>>(Err(Error::other(
            "unimplemented",
        )))
    }
}
