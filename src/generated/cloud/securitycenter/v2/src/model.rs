// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate iam_v1;
extern crate lazy_static;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Represents an access event.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Access {
    /// Associated email, such as "foo@google.com".
    ///
    /// The email address of the authenticated user or a service account acting on
    /// behalf of a third party principal making the request. For third party
    /// identity callers, the `principal_subject` field is populated instead of
    /// this field. For privacy reasons, the principal email address is sometimes
    /// redacted. For more information, see [Caller identities in audit
    /// logs](https://cloud.google.com/logging/docs/audit#user-id).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub principal_email: std::string::String,

    /// Caller's IP address, such as "1.1.1.1".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub caller_ip: std::string::String,

    /// The caller IP's geolocation, which identifies where the call came from.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub caller_ip_geo: std::option::Option<crate::model::Geolocation>,

    /// Type of user agent associated with the finding. For example, an operating
    /// system shell or an embedded or standalone application.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub user_agent_family: std::string::String,

    /// The caller's user agent string associated with the finding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub user_agent: std::string::String,

    /// This is the API service that the service account made a call to, e.g.
    /// "iam.googleapis.com"
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_name: std::string::String,

    /// The method that the service account called, e.g. "SetIamPolicy".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub method_name: std::string::String,

    /// A string that represents the principal_subject that is associated with the
    /// identity. Unlike `principal_email`, `principal_subject` supports principals
    /// that aren't associated with email addresses, such as third party
    /// principals. For most identities, the format is
    /// `principal://iam.googleapis.com/{identity pool name}/subject/{subject}`.
    /// Some GKE identities, such as GKE_WORKLOAD, FREEFORM, and GKE_HUB_WORKLOAD,
    /// still use the legacy format `serviceAccount:{identity pool
    /// name}[{subject}]`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub principal_subject: std::string::String,

    /// The name of the service account key that was used to create or exchange
    /// credentials when authenticating the service account that made the request.
    /// This is a scheme-less URI full resource name. For example:
    ///
    /// "//iam.googleapis.com/projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_account_key_name: std::string::String,

    /// The identity delegation history of an authenticated service account that
    /// made the request. The `serviceAccountDelegationInfo[]` object contains
    /// information about the real authorities that try to access Google Cloud
    /// resources by delegating on a service account. When multiple authorities are
    /// present, they are guaranteed to be sorted based on the original ordering of
    /// the identity delegation events.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub service_account_delegation_info: std::vec::Vec<crate::model::ServiceAccountDelegationInfo>,

    /// A string that represents a username. The username provided depends on the
    /// type of the finding and is likely not an IAM principal. For example, this
    /// can be a system username if the finding is related to a virtual machine, or
    /// it can be an application login username.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub user_name: std::string::String,
}

impl Access {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [principal_email][crate::model::Access::principal_email].
    pub fn set_principal_email<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.principal_email = v.into();
        self
    }

    /// Sets the value of [caller_ip][crate::model::Access::caller_ip].
    pub fn set_caller_ip<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.caller_ip = v.into();
        self
    }

    /// Sets the value of [caller_ip_geo][crate::model::Access::caller_ip_geo].
    pub fn set_caller_ip_geo<
        T: std::convert::Into<std::option::Option<crate::model::Geolocation>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.caller_ip_geo = v.into();
        self
    }

    /// Sets the value of [user_agent_family][crate::model::Access::user_agent_family].
    pub fn set_user_agent_family<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.user_agent_family = v.into();
        self
    }

    /// Sets the value of [user_agent][crate::model::Access::user_agent].
    pub fn set_user_agent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.user_agent = v.into();
        self
    }

    /// Sets the value of [service_name][crate::model::Access::service_name].
    pub fn set_service_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service_name = v.into();
        self
    }

    /// Sets the value of [method_name][crate::model::Access::method_name].
    pub fn set_method_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.method_name = v.into();
        self
    }

    /// Sets the value of [principal_subject][crate::model::Access::principal_subject].
    pub fn set_principal_subject<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.principal_subject = v.into();
        self
    }

    /// Sets the value of [service_account_key_name][crate::model::Access::service_account_key_name].
    pub fn set_service_account_key_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.service_account_key_name = v.into();
        self
    }

    /// Sets the value of [user_name][crate::model::Access::user_name].
    pub fn set_user_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.user_name = v.into();
        self
    }

    /// Sets the value of [service_account_delegation_info][crate::model::Access::service_account_delegation_info].
    pub fn set_service_account_delegation_info<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ServiceAccountDelegationInfo>,
    {
        use std::iter::Iterator;
        self.service_account_delegation_info = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Access {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Access"
    }
}

/// Identity delegation history of an authenticated service account.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ServiceAccountDelegationInfo {
    /// The email address of a Google account.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub principal_email: std::string::String,

    /// A string representing the principal_subject associated with the identity.
    /// As compared to `principal_email`, supports principals that aren't
    /// associated with email addresses, such as third party principals. For most
    /// identities, the format will be `principal://iam.googleapis.com/{identity
    /// pool name}/subjects/{subject}` except for some GKE identities
    /// (GKE_WORKLOAD, FREEFORM, GKE_HUB_WORKLOAD) that are still in the legacy
    /// format `serviceAccount:{identity pool name}[{subject}]`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub principal_subject: std::string::String,
}

impl ServiceAccountDelegationInfo {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [principal_email][crate::model::ServiceAccountDelegationInfo::principal_email].
    pub fn set_principal_email<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.principal_email = v.into();
        self
    }

    /// Sets the value of [principal_subject][crate::model::ServiceAccountDelegationInfo::principal_subject].
    pub fn set_principal_subject<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.principal_subject = v.into();
        self
    }
}

impl wkt::message::Message for ServiceAccountDelegationInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ServiceAccountDelegationInfo"
    }
}

/// Represents a geographical location for a given access.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Geolocation {
    /// A CLDR.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub region_code: std::string::String,
}

impl Geolocation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [region_code][crate::model::Geolocation::region_code].
    pub fn set_region_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.region_code = v.into();
        self
    }
}

impl wkt::message::Message for Geolocation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Geolocation"
    }
}

/// Represents an application associated with a finding.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Application {
    /// The base URI that identifies the network location of the application in
    /// which the vulnerability was detected. For example, `<http://example.com>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub base_uri: std::string::String,

    /// The full URI with payload that could be used to reproduce the
    /// vulnerability. For example, `<http://example.com>?p=aMmYgI6H`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub full_uri: std::string::String,
}

impl Application {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [base_uri][crate::model::Application::base_uri].
    pub fn set_base_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.base_uri = v.into();
        self
    }

    /// Sets the value of [full_uri][crate::model::Application::full_uri].
    pub fn set_full_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.full_uri = v.into();
        self
    }
}

impl wkt::message::Message for Application {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Application"
    }
}

/// An attack exposure contains the results of an attack path simulation run.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AttackExposure {
    /// A number between 0 (inclusive) and infinity that represents how important
    /// this finding is to remediate. The higher the score, the more important it
    /// is to remediate.
    pub score: f64,

    /// The most recent time the attack exposure was updated on this finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub latest_calculation_time: std::option::Option<wkt::Timestamp>,

    /// The resource name of the attack path simulation result that contains the
    /// details regarding this attack exposure score.
    /// Example: `organizations/123/simulations/456/attackExposureResults/789`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub attack_exposure_result: std::string::String,

    /// Output only. What state this AttackExposure is in. This captures whether or
    /// not an attack exposure has been calculated or not.
    pub state: crate::model::attack_exposure::State,

    /// The number of high value resources that are exposed as a result of this
    /// finding.
    pub exposed_high_value_resources_count: i32,

    /// The number of medium value resources that are exposed as a result of this
    /// finding.
    pub exposed_medium_value_resources_count: i32,

    /// The number of high value resources that are exposed as a result of this
    /// finding.
    pub exposed_low_value_resources_count: i32,
}

impl AttackExposure {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [score][crate::model::AttackExposure::score].
    pub fn set_score<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.score = v.into();
        self
    }

    /// Sets the value of [latest_calculation_time][crate::model::AttackExposure::latest_calculation_time].
    pub fn set_latest_calculation_time<
        T: std::convert::Into<std::option::Option<wkt::Timestamp>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.latest_calculation_time = v.into();
        self
    }

    /// Sets the value of [attack_exposure_result][crate::model::AttackExposure::attack_exposure_result].
    pub fn set_attack_exposure_result<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.attack_exposure_result = v.into();
        self
    }

    /// Sets the value of [state][crate::model::AttackExposure::state].
    pub fn set_state<T: std::convert::Into<crate::model::attack_exposure::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [exposed_high_value_resources_count][crate::model::AttackExposure::exposed_high_value_resources_count].
    pub fn set_exposed_high_value_resources_count<T: std::convert::Into<i32>>(
        mut self,
        v: T,
    ) -> Self {
        self.exposed_high_value_resources_count = v.into();
        self
    }

    /// Sets the value of [exposed_medium_value_resources_count][crate::model::AttackExposure::exposed_medium_value_resources_count].
    pub fn set_exposed_medium_value_resources_count<T: std::convert::Into<i32>>(
        mut self,
        v: T,
    ) -> Self {
        self.exposed_medium_value_resources_count = v.into();
        self
    }

    /// Sets the value of [exposed_low_value_resources_count][crate::model::AttackExposure::exposed_low_value_resources_count].
    pub fn set_exposed_low_value_resources_count<T: std::convert::Into<i32>>(
        mut self,
        v: T,
    ) -> Self {
        self.exposed_low_value_resources_count = v.into();
        self
    }
}

impl wkt::message::Message for AttackExposure {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.AttackExposure"
    }
}

/// Defines additional types related to AttackExposure
pub mod attack_exposure {
    #[allow(unused_imports)]
    use super::*;

    /// This enum defines the various states an AttackExposure can be in.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(std::borrow::Cow<'static, str>);

    impl State {
        /// Creates a new State instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [State](State)
    pub mod state {
        use super::State;

        /// The state is not specified.
        pub const STATE_UNSPECIFIED: State = State::new("STATE_UNSPECIFIED");

        /// The attack exposure has been calculated.
        pub const CALCULATED: State = State::new("CALCULATED");

        /// The attack exposure has not been calculated.
        pub const NOT_CALCULATED: State = State::new("NOT_CALCULATED");
    }

    impl std::convert::From<std::string::String> for State {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// A path that an attacker could take to reach an exposed resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AttackPath {
    /// The attack path name, for example,
    /// `organizations/12/simulations/34/valuedResources/56/attackPaths/78`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// A list of nodes that exist in this attack path.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub path_nodes: std::vec::Vec<crate::model::attack_path::AttackPathNode>,

    /// A list of the edges between nodes in this attack path.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub edges: std::vec::Vec<crate::model::attack_path::AttackPathEdge>,
}

impl AttackPath {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::AttackPath::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [path_nodes][crate::model::AttackPath::path_nodes].
    pub fn set_path_nodes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::attack_path::AttackPathNode>,
    {
        use std::iter::Iterator;
        self.path_nodes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [edges][crate::model::AttackPath::edges].
    pub fn set_edges<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::attack_path::AttackPathEdge>,
    {
        use std::iter::Iterator;
        self.edges = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for AttackPath {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.AttackPath"
    }
}

/// Defines additional types related to AttackPath
pub mod attack_path {
    #[allow(unused_imports)]
    use super::*;

    /// Represents one point that an attacker passes through in this attack path.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AttackPathNode {
        /// The name of the resource at this point in the attack path.
        /// The format of the name follows the Cloud Asset Inventory [resource
        /// name
        /// format](https://cloud.google.com/asset-inventory/docs/resource-name-format)
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub resource: std::string::String,

        /// The [supported resource
        /// type](https://cloud.google.com/asset-inventory/docs/supported-asset-types)
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub resource_type: std::string::String,

        /// Human-readable name of this resource.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub display_name: std::string::String,

        /// The findings associated with this node in the attack path.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub associated_findings:
            std::vec::Vec<crate::model::attack_path::attack_path_node::PathNodeAssociatedFinding>,

        /// Unique id of the attack path node.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub uuid: std::string::String,

        /// A list of attack step nodes that exist in this attack path node.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub attack_steps:
            std::vec::Vec<crate::model::attack_path::attack_path_node::AttackStepNode>,
    }

    impl AttackPathNode {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [resource][crate::model::attack_path::AttackPathNode::resource].
        pub fn set_resource<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.resource = v.into();
            self
        }

        /// Sets the value of [resource_type][crate::model::attack_path::AttackPathNode::resource_type].
        pub fn set_resource_type<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.resource_type = v.into();
            self
        }

        /// Sets the value of [display_name][crate::model::attack_path::AttackPathNode::display_name].
        pub fn set_display_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.display_name = v.into();
            self
        }

        /// Sets the value of [uuid][crate::model::attack_path::AttackPathNode::uuid].
        pub fn set_uuid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.uuid = v.into();
            self
        }

        /// Sets the value of [associated_findings][crate::model::attack_path::AttackPathNode::associated_findings].
        pub fn set_associated_findings<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<
                crate::model::attack_path::attack_path_node::PathNodeAssociatedFinding,
            >,
        {
            use std::iter::Iterator;
            self.associated_findings = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [attack_steps][crate::model::attack_path::AttackPathNode::attack_steps].
        pub fn set_attack_steps<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::attack_path::attack_path_node::AttackStepNode>,
        {
            use std::iter::Iterator;
            self.attack_steps = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for AttackPathNode {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.AttackPath.AttackPathNode"
        }
    }

    /// Defines additional types related to AttackPathNode
    pub mod attack_path_node {
        #[allow(unused_imports)]
        use super::*;

        /// A finding that is associated with this node in the attack path.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct PathNodeAssociatedFinding {
            /// Canonical name of the associated findings. Example:
            /// `organizations/123/sources/456/findings/789`
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub canonical_finding: std::string::String,

            /// The additional taxonomy group within findings from a given source.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub finding_category: std::string::String,

            /// Full resource name of the finding.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub name: std::string::String,
        }

        impl PathNodeAssociatedFinding {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [canonical_finding][crate::model::attack_path::attack_path_node::PathNodeAssociatedFinding::canonical_finding].
            pub fn set_canonical_finding<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.canonical_finding = v.into();
                self
            }

            /// Sets the value of [finding_category][crate::model::attack_path::attack_path_node::PathNodeAssociatedFinding::finding_category].
            pub fn set_finding_category<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.finding_category = v.into();
                self
            }

            /// Sets the value of [name][crate::model::attack_path::attack_path_node::PathNodeAssociatedFinding::name].
            pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.name = v.into();
                self
            }
        }

        impl wkt::message::Message for PathNodeAssociatedFinding {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.securitycenter.v2.AttackPath.AttackPathNode.PathNodeAssociatedFinding"
            }
        }

        /// Detailed steps the attack can take between path nodes.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct AttackStepNode {
            /// Unique ID for one Node
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub uuid: std::string::String,

            /// Attack step type. Can be either AND, OR or DEFENSE
            #[serde(rename = "type")]
            pub r#type: crate::model::attack_path::attack_path_node::NodeType,

            /// User friendly name of the attack step
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub display_name: std::string::String,

            /// Attack step labels for metadata
            #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
            pub labels: std::collections::HashMap<std::string::String, std::string::String>,

            /// Attack step description
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub description: std::string::String,
        }

        impl AttackStepNode {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [uuid][crate::model::attack_path::attack_path_node::AttackStepNode::uuid].
            pub fn set_uuid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.uuid = v.into();
                self
            }

            /// Sets the value of [r#type][crate::model::attack_path::attack_path_node::AttackStepNode::type].
            pub fn set_type<
                T: std::convert::Into<crate::model::attack_path::attack_path_node::NodeType>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.r#type = v.into();
                self
            }

            /// Sets the value of [display_name][crate::model::attack_path::attack_path_node::AttackStepNode::display_name].
            pub fn set_display_name<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.display_name = v.into();
                self
            }

            /// Sets the value of [description][crate::model::attack_path::attack_path_node::AttackStepNode::description].
            pub fn set_description<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.description = v.into();
                self
            }

            /// Sets the value of [labels][crate::model::attack_path::attack_path_node::AttackStepNode::labels].
            pub fn set_labels<T, K, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = (K, V)>,
                K: std::convert::Into<std::string::String>,
                V: std::convert::Into<std::string::String>,
            {
                use std::iter::Iterator;
                self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
                self
            }
        }

        impl wkt::message::Message for AttackStepNode {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.securitycenter.v2.AttackPath.AttackPathNode.AttackStepNode"
            }
        }

        /// The type of the incoming attack step node.
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct NodeType(std::borrow::Cow<'static, str>);

        impl NodeType {
            /// Creates a new NodeType instance.
            pub const fn new(v: &'static str) -> Self {
                Self(std::borrow::Cow::Borrowed(v))
            }

            /// Gets the enum value.
            pub fn value(&self) -> &str {
                &self.0
            }
        }

        /// Useful constants to work with [NodeType](NodeType)
        pub mod node_type {
            use super::NodeType;

            /// Type not specified
            pub const NODE_TYPE_UNSPECIFIED: NodeType = NodeType::new("NODE_TYPE_UNSPECIFIED");

            /// Incoming edge joined with AND
            pub const NODE_TYPE_AND: NodeType = NodeType::new("NODE_TYPE_AND");

            /// Incoming edge joined with OR
            pub const NODE_TYPE_OR: NodeType = NodeType::new("NODE_TYPE_OR");

            /// Incoming edge is defense
            pub const NODE_TYPE_DEFENSE: NodeType = NodeType::new("NODE_TYPE_DEFENSE");

            /// Incoming edge is attacker
            pub const NODE_TYPE_ATTACKER: NodeType = NodeType::new("NODE_TYPE_ATTACKER");
        }

        impl std::convert::From<std::string::String> for NodeType {
            fn from(value: std::string::String) -> Self {
                Self(std::borrow::Cow::Owned(value))
            }
        }
    }

    /// Represents a connection between a source node and a destination node in
    /// this attack path.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AttackPathEdge {
        /// The attack node uuid of the source node.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub source: std::string::String,

        /// The attack node uuid of the destination node.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub destination: std::string::String,
    }

    impl AttackPathEdge {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [source][crate::model::attack_path::AttackPathEdge::source].
        pub fn set_source<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.source = v.into();
            self
        }

        /// Sets the value of [destination][crate::model::attack_path::AttackPathEdge::destination].
        pub fn set_destination<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.destination = v.into();
            self
        }
    }

    impl wkt::message::Message for AttackPathEdge {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.AttackPath.AttackPathEdge"
        }
    }
}

/// Information related to Google Cloud Backup and DR Service findings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BackupDisasterRecovery {
    /// The name of a Backup and DR template which comprises one or more backup
    /// policies. See the [Backup and DR
    /// documentation](https://cloud.google.com/backup-disaster-recovery/docs/concepts/backup-plan#temp)
    /// for more information. For example, `snap-ov`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub backup_template: std::string::String,

    /// The names of Backup and DR policies that are associated with a template
    /// and that define when to run a backup, how frequently to run a backup, and
    /// how long to retain the backup image. For example, `onvaults`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub policies: std::vec::Vec<std::string::String>,

    /// The name of a Backup and DR host, which is managed by the backup and
    /// recovery appliance and known to the management console. The host can be of
    /// type Generic (for example, Compute Engine, SQL Server, Oracle DB, SMB file
    /// system, etc.), vCenter, or an ESX server. See the [Backup and DR
    /// documentation on
    /// hosts](https://cloud.google.com/backup-disaster-recovery/docs/configuration/manage-hosts-and-their-applications)
    /// for more information. For example, `centos7-01`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub host: std::string::String,

    /// The names of Backup and DR applications. An application is a VM, database,
    /// or file system on a managed host monitored by a backup and recovery
    /// appliance. For example, `centos7-01-vol00`, `centos7-01-vol01`,
    /// `centos7-01-vol02`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub applications: std::vec::Vec<std::string::String>,

    /// The name of the Backup and DR storage pool that the backup and recovery
    /// appliance is storing data in. The storage pool could be of type Cloud,
    /// Primary, Snapshot, or OnVault. See the [Backup and DR documentation on
    /// storage
    /// pools](https://cloud.google.com/backup-disaster-recovery/docs/concepts/storage-pools).
    /// For example, `DiskPoolOne`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub storage_pool: std::string::String,

    /// The names of Backup and DR advanced policy options of a policy applying to
    /// an application. See the [Backup and DR documentation on policy
    /// options](https://cloud.google.com/backup-disaster-recovery/docs/create-plan/policy-settings).
    /// For example, `skipofflineappsincongrp, nounmap`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub policy_options: std::vec::Vec<std::string::String>,

    /// The name of the Backup and DR resource profile that specifies the storage
    /// media for backups of application and VM data. See the [Backup and DR
    /// documentation on
    /// profiles](https://cloud.google.com/backup-disaster-recovery/docs/concepts/backup-plan#profile).
    /// For example, `GCP`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub profile: std::string::String,

    /// The name of the Backup and DR appliance that captures, moves, and manages
    /// the lifecycle of backup data. For example, `backup-server-57137`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub appliance: std::string::String,

    /// The backup type of the Backup and DR image.
    /// For example, `Snapshot`, `Remote Snapshot`, `OnVault`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub backup_type: std::string::String,

    /// The timestamp at which the Backup and DR backup was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub backup_create_time: std::option::Option<wkt::Timestamp>,
}

impl BackupDisasterRecovery {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [backup_template][crate::model::BackupDisasterRecovery::backup_template].
    pub fn set_backup_template<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.backup_template = v.into();
        self
    }

    /// Sets the value of [host][crate::model::BackupDisasterRecovery::host].
    pub fn set_host<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.host = v.into();
        self
    }

    /// Sets the value of [storage_pool][crate::model::BackupDisasterRecovery::storage_pool].
    pub fn set_storage_pool<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.storage_pool = v.into();
        self
    }

    /// Sets the value of [profile][crate::model::BackupDisasterRecovery::profile].
    pub fn set_profile<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.profile = v.into();
        self
    }

    /// Sets the value of [appliance][crate::model::BackupDisasterRecovery::appliance].
    pub fn set_appliance<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.appliance = v.into();
        self
    }

    /// Sets the value of [backup_type][crate::model::BackupDisasterRecovery::backup_type].
    pub fn set_backup_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.backup_type = v.into();
        self
    }

    /// Sets the value of [backup_create_time][crate::model::BackupDisasterRecovery::backup_create_time].
    pub fn set_backup_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.backup_create_time = v.into();
        self
    }

    /// Sets the value of [policies][crate::model::BackupDisasterRecovery::policies].
    pub fn set_policies<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.policies = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [applications][crate::model::BackupDisasterRecovery::applications].
    pub fn set_applications<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.applications = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [policy_options][crate::model::BackupDisasterRecovery::policy_options].
    pub fn set_policy_options<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.policy_options = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BackupDisasterRecovery {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.BackupDisasterRecovery"
    }
}

/// Configures how to deliver Findings to BigQuery Instance.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BigQueryExport {
    /// Identifier. The relative resource name of this export. See:
    /// <https://cloud.google.com/apis/design/resource_names#relative_resource_name>.
    /// The following list shows some examples:
    ///
    ///
    /// `organizations/{organization_id}/locations/{location_id}/bigQueryExports/{export_id}`
    ///
    /// + `folders/{folder_id}/locations/{location_id}/bigQueryExports/{export_id}`
    ///
    /// `projects/{project_id}/locations/{location_id}/bigQueryExports/{export_id}`
    ///
    /// This field is provided in responses, and is ignored when provided in create
    /// requests.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The description of the export (max of 1024 characters).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Expression that defines the filter to apply across create/update events
    /// of findings. The expression is a list of zero or more restrictions combined
    /// via logical operators `AND` and `OR`. Parentheses are supported, and `OR`
    /// has higher precedence than `AND`.
    ///
    /// Restrictions have the form `<field> <operator> <value>` and may have a
    /// `-` character in front of them to indicate negation. The fields map to
    /// those defined in the corresponding resource.
    ///
    /// The supported operators are:
    ///
    /// * `=` for all value types.
    /// * `>`, `<`, `>=`, `<=` for integer values.
    /// * `:`, meaning substring matching, for strings.
    ///
    /// The supported value types are:
    ///
    /// * string literals in quotes.
    /// * integer literals without quotes.
    /// * boolean literals `true` and `false` without quotes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// The dataset to write findings' updates to. Its format is
    /// "projects/[project_id]/datasets/[bigquery_dataset_id]".
    /// BigQuery dataset unique ID  must contain only letters (a-z, A-Z), numbers
    /// (0-9), or underscores (_).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub dataset: std::string::String,

    /// Output only. The time at which the BigQuery export was created.
    /// This field is set by the server and will be ignored if provided on export
    /// on creation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The most recent time at which the BigQuery export was updated.
    /// This field is set by the server and will be ignored if provided on export
    /// creation or update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Email address of the user who last edited the BigQuery export.
    /// This field is set by the server and will be ignored if provided on export
    /// creation or update.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub most_recent_editor: std::string::String,

    /// Output only. The service account that needs permission to create table and
    /// upload data to the BigQuery dataset.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub principal: std::string::String,
}

impl BigQueryExport {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::BigQueryExport::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::BigQueryExport::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::BigQueryExport::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [dataset][crate::model::BigQueryExport::dataset].
    pub fn set_dataset<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.dataset = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::BigQueryExport::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::BigQueryExport::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [most_recent_editor][crate::model::BigQueryExport::most_recent_editor].
    pub fn set_most_recent_editor<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.most_recent_editor = v.into();
        self
    }

    /// Sets the value of [principal][crate::model::BigQueryExport::principal].
    pub fn set_principal<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.principal = v.into();
        self
    }
}

impl wkt::message::Message for BigQueryExport {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.BigQueryExport"
    }
}

/// Fields related to Google Cloud Armor findings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CloudArmor {
    /// Information about the [Google Cloud Armor security
    /// policy](https://cloud.google.com/armor/docs/security-policy-overview)
    /// relevant to the finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub security_policy: std::option::Option<crate::model::SecurityPolicy>,

    /// Information about incoming requests evaluated by [Google Cloud Armor
    /// security
    /// policies](https://cloud.google.com/armor/docs/security-policy-overview).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub requests: std::option::Option<crate::model::Requests>,

    /// Information about potential Layer 7 DDoS attacks identified by [Google
    /// Cloud Armor Adaptive
    /// Protection](https://cloud.google.com/armor/docs/adaptive-protection-overview).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub adaptive_protection: std::option::Option<crate::model::AdaptiveProtection>,

    /// Information about DDoS attack volume and classification.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub attack: std::option::Option<crate::model::Attack>,

    /// Distinguish between volumetric & protocol DDoS attack and
    /// application layer attacks. For example, "L3_4" for Layer 3 and Layer 4 DDoS
    /// attacks, or "L_7" for Layer 7 DDoS attacks.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub threat_vector: std::string::String,

    /// Duration of attack from the start until the current moment (updated every 5
    /// minutes).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub duration: std::option::Option<wkt::Duration>,
}

impl CloudArmor {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [security_policy][crate::model::CloudArmor::security_policy].
    pub fn set_security_policy<
        T: std::convert::Into<std::option::Option<crate::model::SecurityPolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.security_policy = v.into();
        self
    }

    /// Sets the value of [requests][crate::model::CloudArmor::requests].
    pub fn set_requests<T: std::convert::Into<std::option::Option<crate::model::Requests>>>(
        mut self,
        v: T,
    ) -> Self {
        self.requests = v.into();
        self
    }

    /// Sets the value of [adaptive_protection][crate::model::CloudArmor::adaptive_protection].
    pub fn set_adaptive_protection<
        T: std::convert::Into<std::option::Option<crate::model::AdaptiveProtection>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.adaptive_protection = v.into();
        self
    }

    /// Sets the value of [attack][crate::model::CloudArmor::attack].
    pub fn set_attack<T: std::convert::Into<std::option::Option<crate::model::Attack>>>(
        mut self,
        v: T,
    ) -> Self {
        self.attack = v.into();
        self
    }

    /// Sets the value of [threat_vector][crate::model::CloudArmor::threat_vector].
    pub fn set_threat_vector<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.threat_vector = v.into();
        self
    }

    /// Sets the value of [duration][crate::model::CloudArmor::duration].
    pub fn set_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.duration = v.into();
        self
    }
}

impl wkt::message::Message for CloudArmor {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.CloudArmor"
    }
}

/// Information about the [Google Cloud Armor security
/// policy](https://cloud.google.com/armor/docs/security-policy-overview)
/// relevant to the finding.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SecurityPolicy {
    /// The name of the Google Cloud Armor security policy, for example,
    /// "my-security-policy".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The type of Google Cloud Armor security policy for example, 'backend
    /// security policy', 'edge security policy', 'network edge security policy',
    /// or 'always-on DDoS protection'.
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub r#type: std::string::String,

    /// Whether or not the associated rule or policy is in preview mode.
    pub preview: bool,
}

impl SecurityPolicy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::SecurityPolicy::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::SecurityPolicy::type].
    pub fn set_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [preview][crate::model::SecurityPolicy::preview].
    pub fn set_preview<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.preview = v.into();
        self
    }
}

impl wkt::message::Message for SecurityPolicy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.SecurityPolicy"
    }
}

/// Information about the requests relevant to the finding.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Requests {
    /// For 'Increasing deny ratio', the ratio is the denied traffic divided by the
    /// allowed traffic. For 'Allowed traffic spike', the ratio is the allowed
    /// traffic in the short term divided by allowed traffic in the long term.
    pub ratio: f64,

    /// Allowed RPS (requests per second) in the short term.
    pub short_term_allowed: i32,

    /// Allowed RPS (requests per second) over the long term.
    pub long_term_allowed: i32,

    /// Denied RPS (requests per second) over the long term.
    pub long_term_denied: i32,
}

impl Requests {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [ratio][crate::model::Requests::ratio].
    pub fn set_ratio<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.ratio = v.into();
        self
    }

    /// Sets the value of [short_term_allowed][crate::model::Requests::short_term_allowed].
    pub fn set_short_term_allowed<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.short_term_allowed = v.into();
        self
    }

    /// Sets the value of [long_term_allowed][crate::model::Requests::long_term_allowed].
    pub fn set_long_term_allowed<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.long_term_allowed = v.into();
        self
    }

    /// Sets the value of [long_term_denied][crate::model::Requests::long_term_denied].
    pub fn set_long_term_denied<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.long_term_denied = v.into();
        self
    }
}

impl wkt::message::Message for Requests {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Requests"
    }
}

/// Information about [Google Cloud Armor Adaptive
/// Protection](https://cloud.google.com/armor/docs/cloud-armor-overview#google-cloud-armor-adaptive-protection).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AdaptiveProtection {
    /// A score of 0 means that there is low confidence that the detected event is
    /// an actual attack. A score of 1 means that there is high confidence that the
    /// detected event is an attack. See the [Adaptive Protection
    /// documentation](https://cloud.google.com/armor/docs/adaptive-protection-overview#configure-alert-tuning)
    /// for further explanation.
    pub confidence: f64,
}

impl AdaptiveProtection {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [confidence][crate::model::AdaptiveProtection::confidence].
    pub fn set_confidence<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.confidence = v.into();
        self
    }
}

impl wkt::message::Message for AdaptiveProtection {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.AdaptiveProtection"
    }
}

/// Information about DDoS attack volume and classification.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Attack {
    /// Total PPS (packets per second) volume of attack.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub volume_pps_long: i64,

    /// Total BPS (bytes per second) volume of attack.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub volume_bps_long: i64,

    /// Type of attack, for example, 'SYN-flood', 'NTP-udp', or 'CHARGEN-udp'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub classification: std::string::String,

    /// Total PPS (packets per second) volume of attack. Deprecated - refer to
    /// volume_pps_long instead.
    pub volume_pps: i32,

    /// Total BPS (bytes per second) volume of attack. Deprecated - refer to
    /// volume_bps_long instead.
    pub volume_bps: i32,
}

impl Attack {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [volume_pps_long][crate::model::Attack::volume_pps_long].
    pub fn set_volume_pps_long<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.volume_pps_long = v.into();
        self
    }

    /// Sets the value of [volume_bps_long][crate::model::Attack::volume_bps_long].
    pub fn set_volume_bps_long<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.volume_bps_long = v.into();
        self
    }

    /// Sets the value of [classification][crate::model::Attack::classification].
    pub fn set_classification<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.classification = v.into();
        self
    }

    /// Sets the value of [volume_pps][crate::model::Attack::volume_pps].
    pub fn set_volume_pps<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.volume_pps = v.into();
        self
    }

    /// Sets the value of [volume_bps][crate::model::Attack::volume_bps].
    pub fn set_volume_bps<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.volume_bps = v.into();
        self
    }
}

impl wkt::message::Message for Attack {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Attack"
    }
}

/// The [data profile](https://cloud.google.com/dlp/docs/data-profiles)
/// associated with the finding.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CloudDlpDataProfile {
    /// Name of the data profile, for example,
    /// `projects/123/locations/europe/tableProfiles/8383929`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub data_profile: std::string::String,

    /// The resource hierarchy level at which the data profile was generated.
    pub parent_type: crate::model::cloud_dlp_data_profile::ParentType,
}

impl CloudDlpDataProfile {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [data_profile][crate::model::CloudDlpDataProfile::data_profile].
    pub fn set_data_profile<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.data_profile = v.into();
        self
    }

    /// Sets the value of [parent_type][crate::model::CloudDlpDataProfile::parent_type].
    pub fn set_parent_type<
        T: std::convert::Into<crate::model::cloud_dlp_data_profile::ParentType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.parent_type = v.into();
        self
    }
}

impl wkt::message::Message for CloudDlpDataProfile {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.CloudDlpDataProfile"
    }
}

/// Defines additional types related to CloudDlpDataProfile
pub mod cloud_dlp_data_profile {
    #[allow(unused_imports)]
    use super::*;

    /// Parents for configurations that produce data profile findings.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct ParentType(std::borrow::Cow<'static, str>);

    impl ParentType {
        /// Creates a new ParentType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [ParentType](ParentType)
    pub mod parent_type {
        use super::ParentType;

        /// Unspecified parent type.
        pub const PARENT_TYPE_UNSPECIFIED: ParentType = ParentType::new("PARENT_TYPE_UNSPECIFIED");

        /// Organization-level configurations.
        pub const ORGANIZATION: ParentType = ParentType::new("ORGANIZATION");

        /// Project-level configurations.
        pub const PROJECT: ParentType = ParentType::new("PROJECT");
    }

    impl std::convert::From<std::string::String> for ParentType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Details about the Cloud Data Loss Prevention (Cloud DLP) [inspection
/// job](https://cloud.google.com/dlp/docs/concepts-job-triggers) that produced
/// the finding.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CloudDlpInspection {
    /// Name of the inspection job, for example,
    /// `projects/123/locations/europe/dlpJobs/i-8383929`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub inspect_job: std::string::String,

    /// The type of information (or
    /// *[infoType](https://cloud.google.com/dlp/docs/infotypes-reference)*) found,
    /// for example, `EMAIL_ADDRESS` or `STREET_ADDRESS`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub info_type: std::string::String,

    /// The number of times Cloud DLP found this infoType within this job
    /// and resource.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub info_type_count: i64,

    /// Whether Cloud DLP scanned the complete resource or a sampled subset.
    pub full_scan: bool,
}

impl CloudDlpInspection {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [inspect_job][crate::model::CloudDlpInspection::inspect_job].
    pub fn set_inspect_job<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.inspect_job = v.into();
        self
    }

    /// Sets the value of [info_type][crate::model::CloudDlpInspection::info_type].
    pub fn set_info_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.info_type = v.into();
        self
    }

    /// Sets the value of [info_type_count][crate::model::CloudDlpInspection::info_type_count].
    pub fn set_info_type_count<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.info_type_count = v.into();
        self
    }

    /// Sets the value of [full_scan][crate::model::CloudDlpInspection::full_scan].
    pub fn set_full_scan<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.full_scan = v.into();
        self
    }
}

impl wkt::message::Message for CloudDlpInspection {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.CloudDlpInspection"
    }
}

/// Contains compliance information about a security standard indicating unmet
/// recommendations.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Compliance {
    /// Industry-wide compliance standards or benchmarks, such as CIS, PCI, and
    /// OWASP.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub standard: std::string::String,

    /// Version of the standard or benchmark, for example, 1.1
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub version: std::string::String,

    /// Policies within the standard or benchmark, for example, A.12.4.1
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub ids: std::vec::Vec<std::string::String>,
}

impl Compliance {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [standard][crate::model::Compliance::standard].
    pub fn set_standard<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.standard = v.into();
        self
    }

    /// Sets the value of [version][crate::model::Compliance::version].
    pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.version = v.into();
        self
    }

    /// Sets the value of [ids][crate::model::Compliance::ids].
    pub fn set_ids<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.ids = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Compliance {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Compliance"
    }
}

/// Contains information about the IP connection associated with the finding.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Connection {
    /// Destination IP address. Not present for sockets that are listening and not
    /// connected.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub destination_ip: std::string::String,

    /// Destination port. Not present for sockets that are listening and not
    /// connected.
    pub destination_port: i32,

    /// Source IP address.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source_ip: std::string::String,

    /// Source port.
    pub source_port: i32,

    /// IANA Internet Protocol Number such as TCP(6) and UDP(17).
    pub protocol: crate::model::connection::Protocol,
}

impl Connection {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [destination_ip][crate::model::Connection::destination_ip].
    pub fn set_destination_ip<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.destination_ip = v.into();
        self
    }

    /// Sets the value of [destination_port][crate::model::Connection::destination_port].
    pub fn set_destination_port<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.destination_port = v.into();
        self
    }

    /// Sets the value of [source_ip][crate::model::Connection::source_ip].
    pub fn set_source_ip<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source_ip = v.into();
        self
    }

    /// Sets the value of [source_port][crate::model::Connection::source_port].
    pub fn set_source_port<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.source_port = v.into();
        self
    }

    /// Sets the value of [protocol][crate::model::Connection::protocol].
    pub fn set_protocol<T: std::convert::Into<crate::model::connection::Protocol>>(
        mut self,
        v: T,
    ) -> Self {
        self.protocol = v.into();
        self
    }
}

impl wkt::message::Message for Connection {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Connection"
    }
}

/// Defines additional types related to Connection
pub mod connection {
    #[allow(unused_imports)]
    use super::*;

    /// IANA Internet Protocol Number such as TCP(6) and UDP(17).
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Protocol(std::borrow::Cow<'static, str>);

    impl Protocol {
        /// Creates a new Protocol instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [Protocol](Protocol)
    pub mod protocol {
        use super::Protocol;

        /// Unspecified protocol (not HOPOPT).
        pub const PROTOCOL_UNSPECIFIED: Protocol = Protocol::new("PROTOCOL_UNSPECIFIED");

        /// Internet Control Message Protocol.
        pub const ICMP: Protocol = Protocol::new("ICMP");

        /// Transmission Control Protocol.
        pub const TCP: Protocol = Protocol::new("TCP");

        /// User Datagram Protocol.
        pub const UDP: Protocol = Protocol::new("UDP");

        /// Generic Routing Encapsulation.
        pub const GRE: Protocol = Protocol::new("GRE");

        /// Encap Security Payload.
        pub const ESP: Protocol = Protocol::new("ESP");
    }

    impl std::convert::From<std::string::String> for Protocol {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Details about specific contacts
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ContactDetails {
    /// A list of contacts
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub contacts: std::vec::Vec<crate::model::Contact>,
}

impl ContactDetails {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [contacts][crate::model::ContactDetails::contacts].
    pub fn set_contacts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Contact>,
    {
        use std::iter::Iterator;
        self.contacts = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ContactDetails {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ContactDetails"
    }
}

/// The email address of a contact.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Contact {
    /// An email address. For example, "`person123@company.com`".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub email: std::string::String,
}

impl Contact {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [email][crate::model::Contact::email].
    pub fn set_email<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.email = v.into();
        self
    }
}

impl wkt::message::Message for Contact {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Contact"
    }
}

/// Container associated with the finding.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Container {
    /// Name of the container.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Container image URI provided when configuring a pod or container. This
    /// string can identify a container image version using mutable tags.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,

    /// Optional container image ID, if provided by the container runtime. Uniquely
    /// identifies the container image launched using a container image digest.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub image_id: std::string::String,

    /// Container labels, as provided by the container runtime.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub labels: std::vec::Vec<crate::model::Label>,

    /// The time that the container was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,
}

impl Container {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Container::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [uri][crate::model::Container::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }

    /// Sets the value of [image_id][crate::model::Container::image_id].
    pub fn set_image_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.image_id = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Container::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::Container::labels].
    pub fn set_labels<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Label>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Container {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Container"
    }
}

/// Details about a data access attempt made by a principal not authorized under
/// applicable data security policy.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DataAccessEvent {
    /// Unique identifier for data access event.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub event_id: std::string::String,

    /// The email address of the principal that accessed the data. The principal
    /// could be a user account, service account, Google group, or other.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub principal_email: std::string::String,

    /// The operation performed by the principal to access the data.
    pub operation: crate::model::data_access_event::Operation,

    /// Timestamp of data access event.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub event_time: std::option::Option<wkt::Timestamp>,
}

impl DataAccessEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [event_id][crate::model::DataAccessEvent::event_id].
    pub fn set_event_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.event_id = v.into();
        self
    }

    /// Sets the value of [principal_email][crate::model::DataAccessEvent::principal_email].
    pub fn set_principal_email<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.principal_email = v.into();
        self
    }

    /// Sets the value of [operation][crate::model::DataAccessEvent::operation].
    pub fn set_operation<T: std::convert::Into<crate::model::data_access_event::Operation>>(
        mut self,
        v: T,
    ) -> Self {
        self.operation = v.into();
        self
    }

    /// Sets the value of [event_time][crate::model::DataAccessEvent::event_time].
    pub fn set_event_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.event_time = v.into();
        self
    }
}

impl wkt::message::Message for DataAccessEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.DataAccessEvent"
    }
}

/// Defines additional types related to DataAccessEvent
pub mod data_access_event {
    #[allow(unused_imports)]
    use super::*;

    /// The operation of a data access event.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Operation(std::borrow::Cow<'static, str>);

    impl Operation {
        /// Creates a new Operation instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [Operation](Operation)
    pub mod operation {
        use super::Operation;

        /// The operation is unspecified.
        pub const OPERATION_UNSPECIFIED: Operation = Operation::new("OPERATION_UNSPECIFIED");

        /// Represents a read operation.
        pub const READ: Operation = Operation::new("READ");

        /// Represents a move operation.
        pub const MOVE: Operation = Operation::new("MOVE");

        /// Represents a copy operation.
        pub const COPY: Operation = Operation::new("COPY");
    }

    impl std::convert::From<std::string::String> for Operation {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Details about a data flow event, in which either the data is moved to or is
/// accessed from a non-compliant geo-location, as defined in the applicable data
/// security policy.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DataFlowEvent {
    /// Unique identifier for data flow event.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub event_id: std::string::String,

    /// The email address of the principal that initiated the data flow event. The
    /// principal could be a user account, service account, Google group, or other.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub principal_email: std::string::String,

    /// The operation performed by the principal for the data flow event.
    pub operation: crate::model::data_flow_event::Operation,

    /// Non-compliant location of the principal or the data destination.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub violated_location: std::string::String,

    /// Timestamp of data flow event.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub event_time: std::option::Option<wkt::Timestamp>,
}

impl DataFlowEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [event_id][crate::model::DataFlowEvent::event_id].
    pub fn set_event_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.event_id = v.into();
        self
    }

    /// Sets the value of [principal_email][crate::model::DataFlowEvent::principal_email].
    pub fn set_principal_email<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.principal_email = v.into();
        self
    }

    /// Sets the value of [operation][crate::model::DataFlowEvent::operation].
    pub fn set_operation<T: std::convert::Into<crate::model::data_flow_event::Operation>>(
        mut self,
        v: T,
    ) -> Self {
        self.operation = v.into();
        self
    }

    /// Sets the value of [violated_location][crate::model::DataFlowEvent::violated_location].
    pub fn set_violated_location<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.violated_location = v.into();
        self
    }

    /// Sets the value of [event_time][crate::model::DataFlowEvent::event_time].
    pub fn set_event_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.event_time = v.into();
        self
    }
}

impl wkt::message::Message for DataFlowEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.DataFlowEvent"
    }
}

/// Defines additional types related to DataFlowEvent
pub mod data_flow_event {
    #[allow(unused_imports)]
    use super::*;

    /// The operation of a data flow event.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Operation(std::borrow::Cow<'static, str>);

    impl Operation {
        /// Creates a new Operation instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [Operation](Operation)
    pub mod operation {
        use super::Operation;

        /// The operation is unspecified.
        pub const OPERATION_UNSPECIFIED: Operation = Operation::new("OPERATION_UNSPECIFIED");

        /// Represents a read operation.
        pub const READ: Operation = Operation::new("READ");

        /// Represents a move operation.
        pub const MOVE: Operation = Operation::new("MOVE");

        /// Represents a copy operation.
        pub const COPY: Operation = Operation::new("COPY");
    }

    impl std::convert::From<std::string::String> for Operation {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Details about data retention deletion violations, in which the data is
/// non-compliant based on their retention or deletion time, as defined in the
/// applicable data security policy. The Data Retention Deletion (DRD) control is
/// a control of the DSPM (Data Security Posture Management) suite that enables
/// organizations to manage data retention and deletion policies in compliance
/// with regulations, such as GDPR and CRPA. DRD supports two primary policy
/// types: maximum storage length (max TTL) and minimum storage length (min TTL).
/// Both are aimed at helping organizations meet regulatory and data management
/// commitments.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DataRetentionDeletionEvent {
    /// Timestamp indicating when the event was detected.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub event_detection_time: std::option::Option<wkt::Timestamp>,

    /// Number of objects that violated the policy for this resource. If the number
    /// is less than 1,000, then the value of this field is the exact number. If
    /// the number of objects that violated the policy is greater than or equal to
    /// 1,000, then the value of this field is 1000.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub data_object_count: i64,

    /// Maximum duration of retention allowed from the DRD control. This comes
    /// from the DRD control where users set a max TTL for their data. For example,
    /// suppose that a user sets the max TTL for a Cloud Storage bucket to 90 days.
    /// However, an object in that bucket is 100 days old. In this case, a
    /// DataRetentionDeletionEvent will be generated for that Cloud Storage bucket,
    /// and the max_retention_allowed is 90 days.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub max_retention_allowed: std::option::Option<wkt::Duration>,

    /// Type of the DRD event.
    pub event_type: crate::model::data_retention_deletion_event::EventType,
}

impl DataRetentionDeletionEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [event_detection_time][crate::model::DataRetentionDeletionEvent::event_detection_time].
    pub fn set_event_detection_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.event_detection_time = v.into();
        self
    }

    /// Sets the value of [data_object_count][crate::model::DataRetentionDeletionEvent::data_object_count].
    pub fn set_data_object_count<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.data_object_count = v.into();
        self
    }

    /// Sets the value of [max_retention_allowed][crate::model::DataRetentionDeletionEvent::max_retention_allowed].
    pub fn set_max_retention_allowed<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.max_retention_allowed = v.into();
        self
    }

    /// Sets the value of [event_type][crate::model::DataRetentionDeletionEvent::event_type].
    pub fn set_event_type<
        T: std::convert::Into<crate::model::data_retention_deletion_event::EventType>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.event_type = v.into();
        self
    }
}

impl wkt::message::Message for DataRetentionDeletionEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.DataRetentionDeletionEvent"
    }
}

/// Defines additional types related to DataRetentionDeletionEvent
pub mod data_retention_deletion_event {
    #[allow(unused_imports)]
    use super::*;

    /// Type of the DRD event.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct EventType(std::borrow::Cow<'static, str>);

    impl EventType {
        /// Creates a new EventType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [EventType](EventType)
    pub mod event_type {
        use super::EventType;

        /// Unspecified event type.
        pub const EVENT_TYPE_UNSPECIFIED: EventType = EventType::new("EVENT_TYPE_UNSPECIFIED");

        /// The maximum retention time has been exceeded.
        pub const EVENT_TYPE_MAX_TTL_EXCEEDED: EventType =
            EventType::new("EVENT_TYPE_MAX_TTL_EXCEEDED");
    }

    impl std::convert::From<std::string::String> for EventType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Represents database access information, such as queries. A database may be a
/// sub-resource of an instance (as in the case of Cloud SQL instances or Cloud
/// Spanner instances), or the database instance itself. Some database resources
/// might not have the [full resource
/// name](https://google.aip.dev/122#full-resource-names) populated because these
/// resource types, such as Cloud SQL databases, are not yet supported by Cloud
/// Asset Inventory. In these cases only the display name is provided.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Database {
    /// Some database resources may not have the [full resource
    /// name](https://google.aip.dev/122#full-resource-names) populated because
    /// these resource types are not yet supported by Cloud Asset Inventory (e.g.
    /// Cloud SQL databases). In these cases only the display name will be
    /// provided.
    /// The [full resource name](https://google.aip.dev/122#full-resource-names) of
    /// the database that the user connected to, if it is supported by Cloud Asset
    /// Inventory.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The human-readable name of the database that the user connected to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// The username used to connect to the database. The username might not be an
    /// IAM principal and does not have a set format.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub user_name: std::string::String,

    /// The SQL statement that is associated with the database access.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub query: std::string::String,

    /// The target usernames, roles, or groups of an SQL privilege grant, which is
    /// not an IAM policy change.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub grantees: std::vec::Vec<std::string::String>,

    /// The version of the database, for example, POSTGRES_14.
    /// See [the complete
    /// list](https://cloud.google.com/sql/docs/mysql/admin-api/rest/v1/SqlDatabaseVersion).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub version: std::string::String,
}

impl Database {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Database::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Database::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [user_name][crate::model::Database::user_name].
    pub fn set_user_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.user_name = v.into();
        self
    }

    /// Sets the value of [query][crate::model::Database::query].
    pub fn set_query<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query = v.into();
        self
    }

    /// Sets the value of [version][crate::model::Database::version].
    pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.version = v.into();
        self
    }

    /// Sets the value of [grantees][crate::model::Database::grantees].
    pub fn set_grantees<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.grantees = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Database {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Database"
    }
}

/// Contains information about the disk associated with the finding.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Disk {
    /// The name of the disk, for example,
    /// `<https://www.googleapis.com/compute/v1/projects/{project-id}/zones/{zone-id}/disks/{disk-id}>`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl Disk {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Disk::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for Disk {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Disk"
    }
}

/// Exfiltration represents a data exfiltration attempt from one or more sources
/// to one or more targets. The `sources` attribute lists the sources of the
/// exfiltrated data. The `targets` attribute lists the destinations the data was
/// copied to.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Exfiltration {
    /// If there are multiple sources, then the data is considered "joined" between
    /// them. For instance, BigQuery can join multiple tables, and each
    /// table would be considered a source.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub sources: std::vec::Vec<crate::model::ExfilResource>,

    /// If there are multiple targets, each target would get a complete copy of the
    /// "joined" source data.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub targets: std::vec::Vec<crate::model::ExfilResource>,

    /// Total exfiltrated bytes processed for the entire job.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub total_exfiltrated_bytes: i64,
}

impl Exfiltration {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [total_exfiltrated_bytes][crate::model::Exfiltration::total_exfiltrated_bytes].
    pub fn set_total_exfiltrated_bytes<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.total_exfiltrated_bytes = v.into();
        self
    }

    /// Sets the value of [sources][crate::model::Exfiltration::sources].
    pub fn set_sources<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ExfilResource>,
    {
        use std::iter::Iterator;
        self.sources = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [targets][crate::model::Exfiltration::targets].
    pub fn set_targets<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ExfilResource>,
    {
        use std::iter::Iterator;
        self.targets = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Exfiltration {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Exfiltration"
    }
}

/// Resource where data was exfiltrated from or exfiltrated to.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExfilResource {
    /// The resource's [full resource
    /// name](https://cloud.google.com/apis/design/resource_names#full_resource_name).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Subcomponents of the asset that was exfiltrated, like URIs used during
    /// exfiltration, table names, databases, and filenames. For example, multiple
    /// tables might have been exfiltrated from the same Cloud SQL instance, or
    /// multiple files might have been exfiltrated from the same Cloud Storage
    /// bucket.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub components: std::vec::Vec<std::string::String>,
}

impl ExfilResource {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ExfilResource::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [components][crate::model::ExfilResource::components].
    pub fn set_components<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.components = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ExfilResource {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ExfilResource"
    }
}

/// Representation of third party SIEM/SOAR fields within SCC.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExternalSystem {
    /// Full resource name of the external system. The following list
    /// shows some examples:
    ///
    /// + `organizations/1234/sources/5678/findings/123456/externalSystems/jira`
    ///
    /// `organizations/1234/sources/5678/locations/us/findings/123456/externalSystems/jira`
    ///
    /// + `folders/1234/sources/5678/findings/123456/externalSystems/jira`
    ///
    /// `folders/1234/sources/5678/locations/us/findings/123456/externalSystems/jira`
    ///
    /// + `projects/1234/sources/5678/findings/123456/externalSystems/jira`
    ///
    /// `projects/1234/sources/5678/locations/us/findings/123456/externalSystems/jira`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// References primary/secondary etc assignees in the external system.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub assignees: std::vec::Vec<std::string::String>,

    /// The identifier that's used to track the finding's corresponding case in the
    /// external system.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub external_uid: std::string::String,

    /// The most recent status of the finding's corresponding case, as reported by
    /// the external system.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status: std::string::String,

    /// The time when the case was last updated, as reported by the external
    /// system.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub external_system_update_time: std::option::Option<wkt::Timestamp>,

    /// The link to the finding's corresponding case in the external system.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub case_uri: std::string::String,

    /// The priority of the finding's corresponding case in the external system.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub case_priority: std::string::String,

    /// The SLA of the finding's corresponding case in the external system.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub case_sla: std::option::Option<wkt::Timestamp>,

    /// The time when the case was created, as reported by the external system.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub case_create_time: std::option::Option<wkt::Timestamp>,

    /// The time when the case was closed, as reported by the external system.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub case_close_time: std::option::Option<wkt::Timestamp>,

    /// Information about the ticket, if any, that is being used to track the
    /// resolution of the issue that is identified by this finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub ticket_info: std::option::Option<crate::model::external_system::TicketInfo>,
}

impl ExternalSystem {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ExternalSystem::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [external_uid][crate::model::ExternalSystem::external_uid].
    pub fn set_external_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.external_uid = v.into();
        self
    }

    /// Sets the value of [status][crate::model::ExternalSystem::status].
    pub fn set_status<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status = v.into();
        self
    }

    /// Sets the value of [external_system_update_time][crate::model::ExternalSystem::external_system_update_time].
    pub fn set_external_system_update_time<
        T: std::convert::Into<std::option::Option<wkt::Timestamp>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.external_system_update_time = v.into();
        self
    }

    /// Sets the value of [case_uri][crate::model::ExternalSystem::case_uri].
    pub fn set_case_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.case_uri = v.into();
        self
    }

    /// Sets the value of [case_priority][crate::model::ExternalSystem::case_priority].
    pub fn set_case_priority<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.case_priority = v.into();
        self
    }

    /// Sets the value of [case_sla][crate::model::ExternalSystem::case_sla].
    pub fn set_case_sla<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.case_sla = v.into();
        self
    }

    /// Sets the value of [case_create_time][crate::model::ExternalSystem::case_create_time].
    pub fn set_case_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.case_create_time = v.into();
        self
    }

    /// Sets the value of [case_close_time][crate::model::ExternalSystem::case_close_time].
    pub fn set_case_close_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.case_close_time = v.into();
        self
    }

    /// Sets the value of [ticket_info][crate::model::ExternalSystem::ticket_info].
    pub fn set_ticket_info<
        T: std::convert::Into<std::option::Option<crate::model::external_system::TicketInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.ticket_info = v.into();
        self
    }

    /// Sets the value of [assignees][crate::model::ExternalSystem::assignees].
    pub fn set_assignees<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.assignees = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ExternalSystem {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ExternalSystem"
    }
}

/// Defines additional types related to ExternalSystem
pub mod external_system {
    #[allow(unused_imports)]
    use super::*;

    /// Information about the ticket, if any, that is being used to track the
    /// resolution of the issue that is identified by this finding.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct TicketInfo {
        /// The identifier of the ticket in the ticket system.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub id: std::string::String,

        /// The assignee of the ticket in the ticket system.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub assignee: std::string::String,

        /// The description of the ticket in the ticket system.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub description: std::string::String,

        /// The link to the ticket in the ticket system.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub uri: std::string::String,

        /// The latest status of the ticket, as reported by the ticket system.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub status: std::string::String,

        /// The time when the ticket was last updated, as reported by the ticket
        /// system.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub update_time: std::option::Option<wkt::Timestamp>,
    }

    impl TicketInfo {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [id][crate::model::external_system::TicketInfo::id].
        pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.id = v.into();
            self
        }

        /// Sets the value of [assignee][crate::model::external_system::TicketInfo::assignee].
        pub fn set_assignee<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.assignee = v.into();
            self
        }

        /// Sets the value of [description][crate::model::external_system::TicketInfo::description].
        pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.description = v.into();
            self
        }

        /// Sets the value of [uri][crate::model::external_system::TicketInfo::uri].
        pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.uri = v.into();
            self
        }

        /// Sets the value of [status][crate::model::external_system::TicketInfo::status].
        pub fn set_status<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.status = v.into();
            self
        }

        /// Sets the value of [update_time][crate::model::external_system::TicketInfo::update_time].
        pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
            mut self,
            v: T,
        ) -> Self {
            self.update_time = v.into();
            self
        }
    }

    impl wkt::message::Message for TicketInfo {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.ExternalSystem.TicketInfo"
        }
    }
}

/// File information about the related binary/library used by an executable, or
/// the script used by a script interpreter
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct File {
    /// Absolute path of the file as a JSON encoded string.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub path: std::string::String,

    /// Size of the file in bytes.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub size: i64,

    /// SHA256 hash of the first hashed_size bytes of the file encoded as a
    /// hex string.  If hashed_size == size, sha256 represents the SHA256 hash
    /// of the entire file.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub sha256: std::string::String,

    /// The length in bytes of the file prefix that was hashed.  If
    /// hashed_size == size, any hashes reported represent the entire
    /// file.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub hashed_size: i64,

    /// True when the hash covers only a prefix of the file.
    pub partially_hashed: bool,

    /// Prefix of the file contents as a JSON-encoded string.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub contents: std::string::String,

    /// Path of the file in terms of underlying disk/partition identifiers.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub disk_path: std::option::Option<crate::model::file::DiskPath>,
}

impl File {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [path][crate::model::File::path].
    pub fn set_path<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.path = v.into();
        self
    }

    /// Sets the value of [size][crate::model::File::size].
    pub fn set_size<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.size = v.into();
        self
    }

    /// Sets the value of [sha256][crate::model::File::sha256].
    pub fn set_sha256<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.sha256 = v.into();
        self
    }

    /// Sets the value of [hashed_size][crate::model::File::hashed_size].
    pub fn set_hashed_size<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.hashed_size = v.into();
        self
    }

    /// Sets the value of [partially_hashed][crate::model::File::partially_hashed].
    pub fn set_partially_hashed<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.partially_hashed = v.into();
        self
    }

    /// Sets the value of [contents][crate::model::File::contents].
    pub fn set_contents<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.contents = v.into();
        self
    }

    /// Sets the value of [disk_path][crate::model::File::disk_path].
    pub fn set_disk_path<
        T: std::convert::Into<std::option::Option<crate::model::file::DiskPath>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.disk_path = v.into();
        self
    }
}

impl wkt::message::Message for File {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.File"
    }
}

/// Defines additional types related to File
pub mod file {
    #[allow(unused_imports)]
    use super::*;

    /// Path of the file in terms of underlying disk/partition identifiers.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct DiskPath {
        /// UUID of the partition (format
        /// <https://wiki.archlinux.org/title/persistent_block_device_naming#by-uuid>)
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub partition_uuid: std::string::String,

        /// Relative path of the file in the partition as a JSON encoded string.
        /// Example: /home/user1/executable_file.sh
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub relative_path: std::string::String,
    }

    impl DiskPath {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [partition_uuid][crate::model::file::DiskPath::partition_uuid].
        pub fn set_partition_uuid<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.partition_uuid = v.into();
            self
        }

        /// Sets the value of [relative_path][crate::model::file::DiskPath::relative_path].
        pub fn set_relative_path<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.relative_path = v.into();
            self
        }
    }

    impl wkt::message::Message for DiskPath {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.File.DiskPath"
        }
    }
}

/// Security Command Center finding.
///
/// A finding is a record of assessment data like security, risk, health, or
/// privacy, that is ingested into Security Command Center for presentation,
/// notification, analysis, policy testing, and enforcement. For example, a
/// cross-site scripting (XSS) vulnerability in an App Engine application is a
/// finding.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Finding {
    /// The [relative resource
    /// name](https://cloud.google.com/apis/design/resource_names#relative_resource_name)
    /// of the finding. The following list shows some examples:
    ///
    ///
    /// `organizations/{organization_id}/sources/{source_id}/findings/{finding_id}`
    /// +
    /// `organizations/{organization_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
    ///
    /// + `folders/{folder_id}/sources/{source_id}/findings/{finding_id}`
    ///
    /// `folders/{folder_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
    ///
    /// + `projects/{project_id}/sources/{source_id}/findings/{finding_id}`
    ///
    /// `projects/{project_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The canonical name of the finding. The following list shows
    /// some examples:
    ///
    ///
    /// `organizations/{organization_id}/sources/{source_id}/findings/{finding_id}`
    /// +
    /// `organizations/{organization_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
    ///
    /// + `folders/{folder_id}/sources/{source_id}/findings/{finding_id}`
    ///
    /// `folders/{folder_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
    ///
    /// + `projects/{project_id}/sources/{source_id}/findings/{finding_id}`
    ///
    /// `projects/{project_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
    ///
    /// The prefix is the closest CRM ancestor of the resource associated with the
    /// finding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub canonical_name: std::string::String,

    /// The relative resource name of the source and location the finding belongs
    /// to. See:
    /// <https://cloud.google.com/apis/design/resource_names#relative_resource_name>
    /// This field is immutable after creation time. The following list shows some
    /// examples:
    ///
    /// + `organizations/{organization_id}/sources/{source_id}`
    /// + `folders/{folders_id}/sources/{source_id}`
    /// + `projects/{projects_id}/sources/{source_id}`
    ///
    /// `organizations/{organization_id}/sources/{source_id}/locations/{location_id}`
    ///
    /// + `folders/{folders_id}/sources/{source_id}/locations/{location_id}`
    /// + `projects/{projects_id}/sources/{source_id}/locations/{location_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Immutable. For findings on Google Cloud resources, the full resource
    /// name of the Google Cloud resource this finding is for. See:
    /// <https://cloud.google.com/apis/design/resource_names#full_resource_name>
    /// When the finding is for a non-Google Cloud resource, the resourceName can
    /// be a customer or partner defined string.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub resource_name: std::string::String,

    /// Output only. The state of the finding.
    pub state: crate::model::finding::State,

    /// Immutable. The additional taxonomy group within findings from a given
    /// source. Example: "XSS_FLASH_INJECTION"
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub category: std::string::String,

    /// The URI that, if available, points to a web page outside of Security
    /// Command Center where additional information about the finding can be found.
    /// This field is guaranteed to be either empty or a well formed URL.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub external_uri: std::string::String,

    /// Source specific properties. These properties are managed by the source
    /// that writes the finding. The key names in the source_properties map must be
    /// between 1 and 255 characters, and must start with a letter and contain
    /// alphanumeric characters or underscores only.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub source_properties: std::collections::HashMap<std::string::String, wkt::Value>,

    /// Output only. User specified security marks. These marks are entirely
    /// managed by the user and come from the SecurityMarks resource that belongs
    /// to the finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub security_marks: std::option::Option<crate::model::SecurityMarks>,

    /// The time the finding was first detected. If an existing finding is updated,
    /// then this is the time the update occurred.
    /// For example, if the finding represents an open firewall, this property
    /// captures the time the detector believes the firewall became open. The
    /// accuracy is determined by the detector. If the finding is later resolved,
    /// then this time reflects when the finding was resolved. This must not
    /// be set to a value greater than the current timestamp.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub event_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time at which the finding was created in Security Command
    /// Center.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// The severity of the finding. This field is managed by the source that
    /// writes the finding.
    pub severity: crate::model::finding::Severity,

    /// Indicates the mute state of a finding (either muted, unmuted
    /// or undefined). Unlike other attributes of a finding, a finding provider
    /// shouldn't set the value of mute.
    pub mute: crate::model::finding::Mute,

    /// Output only. The mute information regarding this finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub mute_info: std::option::Option<crate::model::finding::MuteInfo>,

    /// The class of the finding.
    pub finding_class: crate::model::finding::FindingClass,

    /// Represents what's commonly known as an *indicator of compromise* (IoC) in
    /// computer forensics. This is an artifact observed on a network or in an
    /// operating system that, with high confidence, indicates a computer
    /// intrusion. For more information, see [Indicator of
    /// compromise](https://en.wikipedia.org/wiki/Indicator_of_compromise).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub indicator: std::option::Option<crate::model::Indicator>,

    /// Represents vulnerability-specific fields like CVE and CVSS scores.
    /// CVE stands for Common Vulnerabilities and Exposures
    /// (<https://cve.mitre.org/about/>)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub vulnerability: std::option::Option<crate::model::Vulnerability>,

    /// Output only. The most recent time this finding was muted or unmuted.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub mute_update_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Third party SIEM/SOAR fields within SCC, contains external
    /// system information and external system finding fields.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub external_systems:
        std::collections::HashMap<std::string::String, crate::model::ExternalSystem>,

    /// MITRE ATT&CK tactics and techniques related to this finding.
    /// See: <https://attack.mitre.org>
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub mitre_attack: std::option::Option<crate::model::MitreAttack>,

    /// Access details associated with the finding, such as more information on the
    /// caller, which method was accessed, and from where.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub access: std::option::Option<crate::model::Access>,

    /// Contains information about the IP connection associated with the finding.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub connections: std::vec::Vec<crate::model::Connection>,

    /// Records additional information about the mute operation, for example, the
    /// [mute
    /// configuration](https://cloud.google.com/security-command-center/docs/how-to-mute-findings)
    /// that muted the finding and the user who muted the finding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub mute_initiator: std::string::String,

    /// Represents operating system processes associated with the Finding.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub processes: std::vec::Vec<crate::model::Process>,

    /// Output only. Map containing the points of contact for the given finding.
    /// The key represents the type of contact, while the value contains a list of
    /// all the contacts that pertain. Please refer to:
    /// <https://cloud.google.com/resource-manager/docs/managing-notification-contacts#notification-categories>
    ///
    /// ```norust
    /// {
    ///   "security": {
    ///     "contacts": [
    ///       {
    ///         "email": "person1@company.com"
    ///       },
    ///       {
    ///         "email": "person2@company.com"
    ///       }
    ///     ]
    ///   }
    /// }
    /// ```
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub contacts: std::collections::HashMap<std::string::String, crate::model::ContactDetails>,

    /// Contains compliance information for security standards associated to the
    /// finding.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub compliances: std::vec::Vec<crate::model::Compliance>,

    /// Output only. The human readable display name of the finding source such as
    /// "Event Threat Detection" or "Security Health Analytics".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent_display_name: std::string::String,

    /// Contains more details about the finding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Represents exfiltrations associated with the finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub exfiltration: std::option::Option<crate::model::Exfiltration>,

    /// Represents IAM bindings associated with the finding.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub iam_bindings: std::vec::Vec<crate::model::IamBinding>,

    /// Steps to address the finding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_steps: std::string::String,

    /// Unique identifier of the module which generated the finding.
    /// Example:
    /// folders/598186756061/securityHealthAnalyticsSettings/customModules/56799441161885
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub module_name: std::string::String,

    /// Containers associated with the finding. This field provides information for
    /// both Kubernetes and non-Kubernetes containers.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub containers: std::vec::Vec<crate::model::Container>,

    /// Kubernetes resources associated with the finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub kubernetes: std::option::Option<crate::model::Kubernetes>,

    /// Database associated with the finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub database: std::option::Option<crate::model::Database>,

    /// The results of an attack path simulation relevant to this finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub attack_exposure: std::option::Option<crate::model::AttackExposure>,

    /// File associated with the finding.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub files: std::vec::Vec<crate::model::File>,

    /// Cloud Data Loss Prevention (Cloud DLP) inspection results that are
    /// associated with the finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cloud_dlp_inspection: std::option::Option<crate::model::CloudDlpInspection>,

    /// Cloud DLP data profile that is associated with the finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cloud_dlp_data_profile: std::option::Option<crate::model::CloudDlpDataProfile>,

    /// Signature of the kernel rootkit.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub kernel_rootkit: std::option::Option<crate::model::KernelRootkit>,

    /// Contains information about the org policies associated with the finding.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub org_policies: std::vec::Vec<crate::model::OrgPolicy>,

    /// Represents an application associated with the finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub application: std::option::Option<crate::model::Application>,

    /// Fields related to Backup and DR findings.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub backup_disaster_recovery: std::option::Option<crate::model::BackupDisasterRecovery>,

    /// The security posture associated with the finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub security_posture: std::option::Option<crate::model::SecurityPosture>,

    /// Log entries that are relevant to the finding.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub log_entries: std::vec::Vec<crate::model::LogEntry>,

    /// The load balancers associated with the finding.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub load_balancers: std::vec::Vec<crate::model::LoadBalancer>,

    /// Fields related to Cloud Armor findings.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cloud_armor: std::option::Option<crate::model::CloudArmor>,

    /// Notebook associated with the finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub notebook: std::option::Option<crate::model::Notebook>,

    /// Contains details about a group of security issues that, when the issues
    /// occur together, represent a greater risk than when the issues occur
    /// independently. A group of such issues is referred to as a toxic
    /// combination.
    /// This field cannot be updated. Its value is ignored in all update requests.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub toxic_combination: std::option::Option<crate::model::ToxicCombination>,

    /// Contains details about groups of which this finding is a member. A group is
    /// a collection of findings that are related in some way.
    /// This field cannot be updated. Its value is ignored in all update requests.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub group_memberships: std::vec::Vec<crate::model::GroupMembership>,

    /// Disk associated with the finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub disk: std::option::Option<crate::model::Disk>,

    /// Data access events associated with the finding.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub data_access_events: std::vec::Vec<crate::model::DataAccessEvent>,

    /// Data flow events associated with the finding.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub data_flow_events: std::vec::Vec<crate::model::DataFlowEvent>,

    /// Data retention deletion events associated with the finding.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub data_retention_deletion_events: std::vec::Vec<crate::model::DataRetentionDeletionEvent>,
}

impl Finding {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Finding::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [canonical_name][crate::model::Finding::canonical_name].
    pub fn set_canonical_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.canonical_name = v.into();
        self
    }

    /// Sets the value of [parent][crate::model::Finding::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [resource_name][crate::model::Finding::resource_name].
    pub fn set_resource_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.resource_name = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Finding::state].
    pub fn set_state<T: std::convert::Into<crate::model::finding::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [category][crate::model::Finding::category].
    pub fn set_category<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.category = v.into();
        self
    }

    /// Sets the value of [external_uri][crate::model::Finding::external_uri].
    pub fn set_external_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.external_uri = v.into();
        self
    }

    /// Sets the value of [security_marks][crate::model::Finding::security_marks].
    pub fn set_security_marks<
        T: std::convert::Into<std::option::Option<crate::model::SecurityMarks>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.security_marks = v.into();
        self
    }

    /// Sets the value of [event_time][crate::model::Finding::event_time].
    pub fn set_event_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.event_time = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Finding::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [severity][crate::model::Finding::severity].
    pub fn set_severity<T: std::convert::Into<crate::model::finding::Severity>>(
        mut self,
        v: T,
    ) -> Self {
        self.severity = v.into();
        self
    }

    /// Sets the value of [mute][crate::model::Finding::mute].
    pub fn set_mute<T: std::convert::Into<crate::model::finding::Mute>>(mut self, v: T) -> Self {
        self.mute = v.into();
        self
    }

    /// Sets the value of [mute_info][crate::model::Finding::mute_info].
    pub fn set_mute_info<
        T: std::convert::Into<std::option::Option<crate::model::finding::MuteInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.mute_info = v.into();
        self
    }

    /// Sets the value of [finding_class][crate::model::Finding::finding_class].
    pub fn set_finding_class<T: std::convert::Into<crate::model::finding::FindingClass>>(
        mut self,
        v: T,
    ) -> Self {
        self.finding_class = v.into();
        self
    }

    /// Sets the value of [indicator][crate::model::Finding::indicator].
    pub fn set_indicator<T: std::convert::Into<std::option::Option<crate::model::Indicator>>>(
        mut self,
        v: T,
    ) -> Self {
        self.indicator = v.into();
        self
    }

    /// Sets the value of [vulnerability][crate::model::Finding::vulnerability].
    pub fn set_vulnerability<
        T: std::convert::Into<std::option::Option<crate::model::Vulnerability>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.vulnerability = v.into();
        self
    }

    /// Sets the value of [mute_update_time][crate::model::Finding::mute_update_time].
    pub fn set_mute_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.mute_update_time = v.into();
        self
    }

    /// Sets the value of [mitre_attack][crate::model::Finding::mitre_attack].
    pub fn set_mitre_attack<
        T: std::convert::Into<std::option::Option<crate::model::MitreAttack>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.mitre_attack = v.into();
        self
    }

    /// Sets the value of [access][crate::model::Finding::access].
    pub fn set_access<T: std::convert::Into<std::option::Option<crate::model::Access>>>(
        mut self,
        v: T,
    ) -> Self {
        self.access = v.into();
        self
    }

    /// Sets the value of [mute_initiator][crate::model::Finding::mute_initiator].
    pub fn set_mute_initiator<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.mute_initiator = v.into();
        self
    }

    /// Sets the value of [parent_display_name][crate::model::Finding::parent_display_name].
    pub fn set_parent_display_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.parent_display_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Finding::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [exfiltration][crate::model::Finding::exfiltration].
    pub fn set_exfiltration<
        T: std::convert::Into<std::option::Option<crate::model::Exfiltration>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.exfiltration = v.into();
        self
    }

    /// Sets the value of [next_steps][crate::model::Finding::next_steps].
    pub fn set_next_steps<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_steps = v.into();
        self
    }

    /// Sets the value of [module_name][crate::model::Finding::module_name].
    pub fn set_module_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.module_name = v.into();
        self
    }

    /// Sets the value of [kubernetes][crate::model::Finding::kubernetes].
    pub fn set_kubernetes<T: std::convert::Into<std::option::Option<crate::model::Kubernetes>>>(
        mut self,
        v: T,
    ) -> Self {
        self.kubernetes = v.into();
        self
    }

    /// Sets the value of [database][crate::model::Finding::database].
    pub fn set_database<T: std::convert::Into<std::option::Option<crate::model::Database>>>(
        mut self,
        v: T,
    ) -> Self {
        self.database = v.into();
        self
    }

    /// Sets the value of [attack_exposure][crate::model::Finding::attack_exposure].
    pub fn set_attack_exposure<
        T: std::convert::Into<std::option::Option<crate::model::AttackExposure>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.attack_exposure = v.into();
        self
    }

    /// Sets the value of [cloud_dlp_inspection][crate::model::Finding::cloud_dlp_inspection].
    pub fn set_cloud_dlp_inspection<
        T: std::convert::Into<std::option::Option<crate::model::CloudDlpInspection>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.cloud_dlp_inspection = v.into();
        self
    }

    /// Sets the value of [cloud_dlp_data_profile][crate::model::Finding::cloud_dlp_data_profile].
    pub fn set_cloud_dlp_data_profile<
        T: std::convert::Into<std::option::Option<crate::model::CloudDlpDataProfile>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.cloud_dlp_data_profile = v.into();
        self
    }

    /// Sets the value of [kernel_rootkit][crate::model::Finding::kernel_rootkit].
    pub fn set_kernel_rootkit<
        T: std::convert::Into<std::option::Option<crate::model::KernelRootkit>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.kernel_rootkit = v.into();
        self
    }

    /// Sets the value of [application][crate::model::Finding::application].
    pub fn set_application<
        T: std::convert::Into<std::option::Option<crate::model::Application>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.application = v.into();
        self
    }

    /// Sets the value of [backup_disaster_recovery][crate::model::Finding::backup_disaster_recovery].
    pub fn set_backup_disaster_recovery<
        T: std::convert::Into<std::option::Option<crate::model::BackupDisasterRecovery>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.backup_disaster_recovery = v.into();
        self
    }

    /// Sets the value of [security_posture][crate::model::Finding::security_posture].
    pub fn set_security_posture<
        T: std::convert::Into<std::option::Option<crate::model::SecurityPosture>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.security_posture = v.into();
        self
    }

    /// Sets the value of [cloud_armor][crate::model::Finding::cloud_armor].
    pub fn set_cloud_armor<T: std::convert::Into<std::option::Option<crate::model::CloudArmor>>>(
        mut self,
        v: T,
    ) -> Self {
        self.cloud_armor = v.into();
        self
    }

    /// Sets the value of [notebook][crate::model::Finding::notebook].
    pub fn set_notebook<T: std::convert::Into<std::option::Option<crate::model::Notebook>>>(
        mut self,
        v: T,
    ) -> Self {
        self.notebook = v.into();
        self
    }

    /// Sets the value of [toxic_combination][crate::model::Finding::toxic_combination].
    pub fn set_toxic_combination<
        T: std::convert::Into<std::option::Option<crate::model::ToxicCombination>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.toxic_combination = v.into();
        self
    }

    /// Sets the value of [disk][crate::model::Finding::disk].
    pub fn set_disk<T: std::convert::Into<std::option::Option<crate::model::Disk>>>(
        mut self,
        v: T,
    ) -> Self {
        self.disk = v.into();
        self
    }

    /// Sets the value of [connections][crate::model::Finding::connections].
    pub fn set_connections<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Connection>,
    {
        use std::iter::Iterator;
        self.connections = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [processes][crate::model::Finding::processes].
    pub fn set_processes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Process>,
    {
        use std::iter::Iterator;
        self.processes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [compliances][crate::model::Finding::compliances].
    pub fn set_compliances<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Compliance>,
    {
        use std::iter::Iterator;
        self.compliances = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [iam_bindings][crate::model::Finding::iam_bindings].
    pub fn set_iam_bindings<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::IamBinding>,
    {
        use std::iter::Iterator;
        self.iam_bindings = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [containers][crate::model::Finding::containers].
    pub fn set_containers<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Container>,
    {
        use std::iter::Iterator;
        self.containers = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [files][crate::model::Finding::files].
    pub fn set_files<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::File>,
    {
        use std::iter::Iterator;
        self.files = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [org_policies][crate::model::Finding::org_policies].
    pub fn set_org_policies<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::OrgPolicy>,
    {
        use std::iter::Iterator;
        self.org_policies = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [log_entries][crate::model::Finding::log_entries].
    pub fn set_log_entries<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::LogEntry>,
    {
        use std::iter::Iterator;
        self.log_entries = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [load_balancers][crate::model::Finding::load_balancers].
    pub fn set_load_balancers<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::LoadBalancer>,
    {
        use std::iter::Iterator;
        self.load_balancers = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [group_memberships][crate::model::Finding::group_memberships].
    pub fn set_group_memberships<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::GroupMembership>,
    {
        use std::iter::Iterator;
        self.group_memberships = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [data_access_events][crate::model::Finding::data_access_events].
    pub fn set_data_access_events<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::DataAccessEvent>,
    {
        use std::iter::Iterator;
        self.data_access_events = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [data_flow_events][crate::model::Finding::data_flow_events].
    pub fn set_data_flow_events<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::DataFlowEvent>,
    {
        use std::iter::Iterator;
        self.data_flow_events = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [data_retention_deletion_events][crate::model::Finding::data_retention_deletion_events].
    pub fn set_data_retention_deletion_events<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::DataRetentionDeletionEvent>,
    {
        use std::iter::Iterator;
        self.data_retention_deletion_events = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [source_properties][crate::model::Finding::source_properties].
    pub fn set_source_properties<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::Value>,
    {
        use std::iter::Iterator;
        self.source_properties = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [external_systems][crate::model::Finding::external_systems].
    pub fn set_external_systems<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::ExternalSystem>,
    {
        use std::iter::Iterator;
        self.external_systems = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [contacts][crate::model::Finding::contacts].
    pub fn set_contacts<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::ContactDetails>,
    {
        use std::iter::Iterator;
        self.contacts = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Finding {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Finding"
    }
}

/// Defines additional types related to Finding
pub mod finding {
    #[allow(unused_imports)]
    use super::*;

    /// Mute information about the finding, including whether the finding has a
    /// static mute or any matching dynamic mute rules.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct MuteInfo {
        /// If set, the static mute applied to this finding. Static mutes override
        /// dynamic mutes. If unset, there is no static mute.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub static_mute: std::option::Option<crate::model::finding::mute_info::StaticMute>,

        /// The list of dynamic mute rules that currently match the finding.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub dynamic_mute_records:
            std::vec::Vec<crate::model::finding::mute_info::DynamicMuteRecord>,
    }

    impl MuteInfo {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [static_mute][crate::model::finding::MuteInfo::static_mute].
        pub fn set_static_mute<
            T: std::convert::Into<std::option::Option<crate::model::finding::mute_info::StaticMute>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.static_mute = v.into();
            self
        }

        /// Sets the value of [dynamic_mute_records][crate::model::finding::MuteInfo::dynamic_mute_records].
        pub fn set_dynamic_mute_records<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::finding::mute_info::DynamicMuteRecord>,
        {
            use std::iter::Iterator;
            self.dynamic_mute_records = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for MuteInfo {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.Finding.MuteInfo"
        }
    }

    /// Defines additional types related to MuteInfo
    pub mod mute_info {
        #[allow(unused_imports)]
        use super::*;

        /// Information about the static mute state. A static mute state overrides
        /// any dynamic mute rules that apply to this finding. The static mute state
        /// can be set by a static mute rule or by muting the finding directly.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct StaticMute {
            /// The static mute state. If the value is `MUTED` or `UNMUTED`, then the
            /// finding's overall mute state will have the same value.
            pub state: crate::model::finding::Mute,

            /// When the static mute was applied.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub apply_time: std::option::Option<wkt::Timestamp>,
        }

        impl StaticMute {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [state][crate::model::finding::mute_info::StaticMute::state].
            pub fn set_state<T: std::convert::Into<crate::model::finding::Mute>>(
                mut self,
                v: T,
            ) -> Self {
                self.state = v.into();
                self
            }

            /// Sets the value of [apply_time][crate::model::finding::mute_info::StaticMute::apply_time].
            pub fn set_apply_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
                mut self,
                v: T,
            ) -> Self {
                self.apply_time = v.into();
                self
            }
        }

        impl wkt::message::Message for StaticMute {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.securitycenter.v2.Finding.MuteInfo.StaticMute"
            }
        }

        /// The record of a dynamic mute rule that matches the finding.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct DynamicMuteRecord {
            /// The relative resource name of the mute rule, represented by a mute
            /// config, that created this record, for example
            /// `organizations/123/muteConfigs/mymuteconfig` or
            /// `organizations/123/locations/global/muteConfigs/mymuteconfig`.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub mute_config: std::string::String,

            /// When the dynamic mute rule first matched the finding.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub match_time: std::option::Option<wkt::Timestamp>,
        }

        impl DynamicMuteRecord {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [mute_config][crate::model::finding::mute_info::DynamicMuteRecord::mute_config].
            pub fn set_mute_config<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.mute_config = v.into();
                self
            }

            /// Sets the value of [match_time][crate::model::finding::mute_info::DynamicMuteRecord::match_time].
            pub fn set_match_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
                mut self,
                v: T,
            ) -> Self {
                self.match_time = v.into();
                self
            }
        }

        impl wkt::message::Message for DynamicMuteRecord {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.securitycenter.v2.Finding.MuteInfo.DynamicMuteRecord"
            }
        }
    }

    /// The state of the finding.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(std::borrow::Cow<'static, str>);

    impl State {
        /// Creates a new State instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [State](State)
    pub mod state {
        use super::State;

        /// Unspecified state.
        pub const STATE_UNSPECIFIED: State = State::new("STATE_UNSPECIFIED");

        /// The finding requires attention and has not been addressed yet.
        pub const ACTIVE: State = State::new("ACTIVE");

        /// The finding has been fixed, triaged as a non-issue or otherwise addressed
        /// and is no longer active.
        pub const INACTIVE: State = State::new("INACTIVE");
    }

    impl std::convert::From<std::string::String> for State {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// The severity of the finding.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Severity(std::borrow::Cow<'static, str>);

    impl Severity {
        /// Creates a new Severity instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [Severity](Severity)
    pub mod severity {
        use super::Severity;

        /// This value is used for findings when a source doesn't write a severity
        /// value.
        pub const SEVERITY_UNSPECIFIED: Severity = Severity::new("SEVERITY_UNSPECIFIED");

        /// Vulnerability:
        /// A critical vulnerability is easily discoverable by an external actor,
        /// exploitable, and results in the direct ability to execute arbitrary code,
        /// exfiltrate data, and otherwise gain additional access and privileges to
        /// cloud resources and workloads. Examples include publicly accessible
        /// unprotected user data and public SSH access with weak or no
        /// passwords.
        ///
        /// Threat:
        /// Indicates a threat that is able to access, modify, or delete data or
        /// execute unauthorized code within existing resources.
        pub const CRITICAL: Severity = Severity::new("CRITICAL");

        /// Vulnerability:
        /// A high risk vulnerability can be easily discovered and exploited in
        /// combination with other vulnerabilities in order to gain direct access and
        /// the ability to execute arbitrary code, exfiltrate data, and otherwise
        /// gain additional access and privileges to cloud resources and workloads.
        /// An example is a database with weak or no passwords that is only
        /// accessible internally. This database could easily be compromised by an
        /// actor that had access to the internal network.
        ///
        /// Threat:
        /// Indicates a threat that is able to create new computational resources in
        /// an environment but not able to access data or execute code in existing
        /// resources.
        pub const HIGH: Severity = Severity::new("HIGH");

        /// Vulnerability:
        /// A medium risk vulnerability could be used by an actor to gain access to
        /// resources or privileges that enable them to eventually (through multiple
        /// steps or a complex exploit) gain access and the ability to execute
        /// arbitrary code or exfiltrate data. An example is a service account with
        /// access to more projects than it should have. If an actor gains access to
        /// the service account, they could potentially use that access to manipulate
        /// a project the service account was not intended to.
        ///
        /// Threat:
        /// Indicates a threat that is able to cause operational impact but may not
        /// access data or execute unauthorized code.
        pub const MEDIUM: Severity = Severity::new("MEDIUM");

        /// Vulnerability:
        /// A low risk vulnerability hampers a security organization's ability to
        /// detect vulnerabilities or active threats in their deployment, or prevents
        /// the root cause investigation of security issues. An example is monitoring
        /// and logs being disabled for resource configurations and access.
        ///
        /// Threat:
        /// Indicates a threat that has obtained minimal access to an environment but
        /// is not able to access data, execute code, or create resources.
        pub const LOW: Severity = Severity::new("LOW");
    }

    impl std::convert::From<std::string::String> for Severity {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// Mute state a finding can be in.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Mute(std::borrow::Cow<'static, str>);

    impl Mute {
        /// Creates a new Mute instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [Mute](Mute)
    pub mod mute {
        use super::Mute;

        /// Unspecified.
        pub const MUTE_UNSPECIFIED: Mute = Mute::new("MUTE_UNSPECIFIED");

        /// Finding has been muted.
        pub const MUTED: Mute = Mute::new("MUTED");

        /// Finding has been unmuted.
        pub const UNMUTED: Mute = Mute::new("UNMUTED");

        /// Finding has never been muted/unmuted.
        pub const UNDEFINED: Mute = Mute::new("UNDEFINED");
    }

    impl std::convert::From<std::string::String> for Mute {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// Represents what kind of Finding it is.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct FindingClass(std::borrow::Cow<'static, str>);

    impl FindingClass {
        /// Creates a new FindingClass instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [FindingClass](FindingClass)
    pub mod finding_class {
        use super::FindingClass;

        /// Unspecified finding class.
        pub const FINDING_CLASS_UNSPECIFIED: FindingClass =
            FindingClass::new("FINDING_CLASS_UNSPECIFIED");

        /// Describes unwanted or malicious activity.
        pub const THREAT: FindingClass = FindingClass::new("THREAT");

        /// Describes a potential weakness in software that increases risk to
        /// Confidentiality & Integrity & Availability.
        pub const VULNERABILITY: FindingClass = FindingClass::new("VULNERABILITY");

        /// Describes a potential weakness in cloud resource/asset configuration that
        /// increases risk.
        pub const MISCONFIGURATION: FindingClass = FindingClass::new("MISCONFIGURATION");

        /// Describes a security observation that is for informational purposes.
        pub const OBSERVATION: FindingClass = FindingClass::new("OBSERVATION");

        /// Describes an error that prevents some SCC functionality.
        pub const SCC_ERROR: FindingClass = FindingClass::new("SCC_ERROR");

        /// Describes a potential security risk due to a change in the security
        /// posture.
        pub const POSTURE_VIOLATION: FindingClass = FindingClass::new("POSTURE_VIOLATION");

        /// Describes a combination of security issues that represent a more severe
        /// security problem when taken together.
        pub const TOXIC_COMBINATION: FindingClass = FindingClass::new("TOXIC_COMBINATION");

        /// Describes a potential security risk to data assets that contain sensitive
        /// data.
        pub const SENSITIVE_DATA_RISK: FindingClass = FindingClass::new("SENSITIVE_DATA_RISK");
    }

    impl std::convert::From<std::string::String> for FindingClass {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Message that contains the resource name and display name of a folder
/// resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Folder {
    /// Full resource name of this folder. See:
    /// <https://cloud.google.com/apis/design/resource_names#full_resource_name>
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub resource_folder: std::string::String,

    /// The user defined display name for this folder.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub resource_folder_display_name: std::string::String,
}

impl Folder {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [resource_folder][crate::model::Folder::resource_folder].
    pub fn set_resource_folder<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.resource_folder = v.into();
        self
    }

    /// Sets the value of [resource_folder_display_name][crate::model::Folder::resource_folder_display_name].
    pub fn set_resource_folder_display_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.resource_folder_display_name = v.into();
        self
    }
}

impl wkt::message::Message for Folder {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Folder"
    }
}

/// Contains details about groups of which this finding is a member. A group is a
/// collection of findings that are related in some way.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GroupMembership {
    /// Type of group.
    pub group_type: crate::model::group_membership::GroupType,

    /// ID of the group.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub group_id: std::string::String,
}

impl GroupMembership {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [group_type][crate::model::GroupMembership::group_type].
    pub fn set_group_type<T: std::convert::Into<crate::model::group_membership::GroupType>>(
        mut self,
        v: T,
    ) -> Self {
        self.group_type = v.into();
        self
    }

    /// Sets the value of [group_id][crate::model::GroupMembership::group_id].
    pub fn set_group_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.group_id = v.into();
        self
    }
}

impl wkt::message::Message for GroupMembership {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.GroupMembership"
    }
}

/// Defines additional types related to GroupMembership
pub mod group_membership {
    #[allow(unused_imports)]
    use super::*;

    /// Possible types of groups.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct GroupType(std::borrow::Cow<'static, str>);

    impl GroupType {
        /// Creates a new GroupType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [GroupType](GroupType)
    pub mod group_type {
        use super::GroupType;

        /// Default value.
        pub const GROUP_TYPE_UNSPECIFIED: GroupType = GroupType::new("GROUP_TYPE_UNSPECIFIED");

        /// Group represents a toxic combination.
        pub const GROUP_TYPE_TOXIC_COMBINATION: GroupType =
            GroupType::new("GROUP_TYPE_TOXIC_COMBINATION");
    }

    impl std::convert::From<std::string::String> for GroupType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Represents a particular IAM binding, which captures a member's role addition,
/// removal, or state.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct IamBinding {
    /// The action that was performed on a Binding.
    pub action: crate::model::iam_binding::Action,

    /// Role that is assigned to "members".
    /// For example, "roles/viewer", "roles/editor", or "roles/owner".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub role: std::string::String,

    /// A single identity requesting access for a Cloud Platform resource, for
    /// example, "foo@google.com".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub member: std::string::String,
}

impl IamBinding {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [action][crate::model::IamBinding::action].
    pub fn set_action<T: std::convert::Into<crate::model::iam_binding::Action>>(
        mut self,
        v: T,
    ) -> Self {
        self.action = v.into();
        self
    }

    /// Sets the value of [role][crate::model::IamBinding::role].
    pub fn set_role<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.role = v.into();
        self
    }

    /// Sets the value of [member][crate::model::IamBinding::member].
    pub fn set_member<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.member = v.into();
        self
    }
}

impl wkt::message::Message for IamBinding {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.IamBinding"
    }
}

/// Defines additional types related to IamBinding
pub mod iam_binding {
    #[allow(unused_imports)]
    use super::*;

    /// The type of action performed on a Binding in a policy.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Action(std::borrow::Cow<'static, str>);

    impl Action {
        /// Creates a new Action instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [Action](Action)
    pub mod action {
        use super::Action;

        /// Unspecified.
        pub const ACTION_UNSPECIFIED: Action = Action::new("ACTION_UNSPECIFIED");

        /// Addition of a Binding.
        pub const ADD: Action = Action::new("ADD");

        /// Removal of a Binding.
        pub const REMOVE: Action = Action::new("REMOVE");
    }

    impl std::convert::From<std::string::String> for Action {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Represents what's commonly known as an _indicator of compromise_ (IoC) in
/// computer forensics. This is an artifact observed on a network or in an
/// operating system that, with high confidence, indicates a computer intrusion.
/// For more information, see [Indicator of
/// compromise](https://en.wikipedia.org/wiki/Indicator_of_compromise).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Indicator {
    /// The list of IP addresses that are associated with the finding.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub ip_addresses: std::vec::Vec<std::string::String>,

    /// List of domains associated to the Finding.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub domains: std::vec::Vec<std::string::String>,

    /// The list of matched signatures indicating that the given
    /// process is present in the environment.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub signatures: std::vec::Vec<crate::model::indicator::ProcessSignature>,

    /// The list of URIs associated to the Findings.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub uris: std::vec::Vec<std::string::String>,
}

impl Indicator {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [ip_addresses][crate::model::Indicator::ip_addresses].
    pub fn set_ip_addresses<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.ip_addresses = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [domains][crate::model::Indicator::domains].
    pub fn set_domains<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.domains = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [signatures][crate::model::Indicator::signatures].
    pub fn set_signatures<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::indicator::ProcessSignature>,
    {
        use std::iter::Iterator;
        self.signatures = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [uris][crate::model::Indicator::uris].
    pub fn set_uris<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.uris = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Indicator {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Indicator"
    }
}

/// Defines additional types related to Indicator
pub mod indicator {
    #[allow(unused_imports)]
    use super::*;

    /// Indicates what signature matched this process.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ProcessSignature {
        /// Describes the type of resource associated with the signature.
        pub signature_type: crate::model::indicator::process_signature::SignatureType,

        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub signature: std::option::Option<crate::model::indicator::process_signature::Signature>,
    }

    impl ProcessSignature {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [signature_type][crate::model::indicator::ProcessSignature::signature_type].
        pub fn set_signature_type<
            T: std::convert::Into<crate::model::indicator::process_signature::SignatureType>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.signature_type = v.into();
            self
        }

        /// Sets the value of `signature`.
        pub fn set_signature<
            T: std::convert::Into<
                std::option::Option<crate::model::indicator::process_signature::Signature>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.signature = v.into();
            self
        }

        /// The value of [signature][crate::model::indicator::ProcessSignature::signature]
        /// if it holds a `MemoryHashSignature`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_memory_hash_signature(
            &self,
        ) -> std::option::Option<
            &std::boxed::Box<crate::model::indicator::process_signature::MemoryHashSignature>,
        > {
            #[allow(unreachable_patterns)]
            self.signature.as_ref().and_then(|v| match v {
                crate::model::indicator::process_signature::Signature::MemoryHashSignature(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// The value of [signature][crate::model::indicator::ProcessSignature::signature]
        /// if it holds a `YaraRuleSignature`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_yara_rule_signature(
            &self,
        ) -> std::option::Option<
            &std::boxed::Box<crate::model::indicator::process_signature::YaraRuleSignature>,
        > {
            #[allow(unreachable_patterns)]
            self.signature.as_ref().and_then(|v| match v {
                crate::model::indicator::process_signature::Signature::YaraRuleSignature(v) => {
                    std::option::Option::Some(v)
                }
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [signature][crate::model::indicator::ProcessSignature::signature]
        /// to hold a `MemoryHashSignature`.
        ///
        /// Note that all the setters affecting `signature` are
        /// mutually exclusive.
        pub fn set_memory_hash_signature<
            T: std::convert::Into<
                std::boxed::Box<crate::model::indicator::process_signature::MemoryHashSignature>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.signature = std::option::Option::Some(
                crate::model::indicator::process_signature::Signature::MemoryHashSignature(
                    v.into(),
                ),
            );
            self
        }

        /// Sets the value of [signature][crate::model::indicator::ProcessSignature::signature]
        /// to hold a `YaraRuleSignature`.
        ///
        /// Note that all the setters affecting `signature` are
        /// mutually exclusive.
        pub fn set_yara_rule_signature<
            T: std::convert::Into<
                std::boxed::Box<crate::model::indicator::process_signature::YaraRuleSignature>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.signature = std::option::Option::Some(
                crate::model::indicator::process_signature::Signature::YaraRuleSignature(v.into()),
            );
            self
        }
    }

    impl wkt::message::Message for ProcessSignature {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.Indicator.ProcessSignature"
        }
    }

    /// Defines additional types related to ProcessSignature
    pub mod process_signature {
        #[allow(unused_imports)]
        use super::*;

        /// A signature corresponding to memory page hashes.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct MemoryHashSignature {
            /// The binary family.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub binary_family: std::string::String,

            /// The list of memory hash detections contributing to the binary family
            /// match.
            #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
            pub detections: std::vec::Vec<
                crate::model::indicator::process_signature::memory_hash_signature::Detection,
            >,
        }

        impl MemoryHashSignature {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [binary_family][crate::model::indicator::process_signature::MemoryHashSignature::binary_family].
            pub fn set_binary_family<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.binary_family = v.into();
                self
            }

            /// Sets the value of [detections][crate::model::indicator::process_signature::MemoryHashSignature::detections].
            pub fn set_detections<T, V>(mut self, v: T) -> Self
            where
                T: std::iter::IntoIterator<Item = V>,
                V: std::convert::Into<
                    crate::model::indicator::process_signature::memory_hash_signature::Detection,
                >,
            {
                use std::iter::Iterator;
                self.detections = v.into_iter().map(|i| i.into()).collect();
                self
            }
        }

        impl wkt::message::Message for MemoryHashSignature {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.securitycenter.v2.Indicator.ProcessSignature.MemoryHashSignature"
            }
        }

        /// Defines additional types related to MemoryHashSignature
        pub mod memory_hash_signature {
            #[allow(unused_imports)]
            use super::*;

            /// Memory hash detection contributing to the binary family match.
            #[serde_with::serde_as]
            #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(default, rename_all = "camelCase")]
            #[non_exhaustive]
            pub struct Detection {
                /// The name of the binary associated with the memory hash
                /// signature detection.
                #[serde(skip_serializing_if = "std::string::String::is_empty")]
                pub binary: std::string::String,

                /// The percentage of memory page hashes in the signature
                /// that were matched.
                pub percent_pages_matched: f64,
            }

            impl Detection {
                pub fn new() -> Self {
                    std::default::Default::default()
                }

                /// Sets the value of [binary][crate::model::indicator::process_signature::memory_hash_signature::Detection::binary].
                pub fn set_binary<T: std::convert::Into<std::string::String>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.binary = v.into();
                    self
                }

                /// Sets the value of [percent_pages_matched][crate::model::indicator::process_signature::memory_hash_signature::Detection::percent_pages_matched].
                pub fn set_percent_pages_matched<T: std::convert::Into<f64>>(
                    mut self,
                    v: T,
                ) -> Self {
                    self.percent_pages_matched = v.into();
                    self
                }
            }

            impl wkt::message::Message for Detection {
                fn typename() -> &'static str {
                    "type.googleapis.com/google.cloud.securitycenter.v2.Indicator.ProcessSignature.MemoryHashSignature.Detection"
                }
            }
        }

        /// A signature corresponding to a YARA rule.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct YaraRuleSignature {
            /// The name of the YARA rule.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub yara_rule: std::string::String,
        }

        impl YaraRuleSignature {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [yara_rule][crate::model::indicator::process_signature::YaraRuleSignature::yara_rule].
            pub fn set_yara_rule<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.yara_rule = v.into();
                self
            }
        }

        impl wkt::message::Message for YaraRuleSignature {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.securitycenter.v2.Indicator.ProcessSignature.YaraRuleSignature"
            }
        }

        /// Possible resource types to be associated with a signature.
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct SignatureType(std::borrow::Cow<'static, str>);

        impl SignatureType {
            /// Creates a new SignatureType instance.
            pub const fn new(v: &'static str) -> Self {
                Self(std::borrow::Cow::Borrowed(v))
            }

            /// Gets the enum value.
            pub fn value(&self) -> &str {
                &self.0
            }
        }

        /// Useful constants to work with [SignatureType](SignatureType)
        pub mod signature_type {
            use super::SignatureType;

            /// The default signature type.
            pub const SIGNATURE_TYPE_UNSPECIFIED: SignatureType =
                SignatureType::new("SIGNATURE_TYPE_UNSPECIFIED");

            /// Used for signatures concerning processes.
            pub const SIGNATURE_TYPE_PROCESS: SignatureType =
                SignatureType::new("SIGNATURE_TYPE_PROCESS");

            /// Used for signatures concerning disks.
            pub const SIGNATURE_TYPE_FILE: SignatureType =
                SignatureType::new("SIGNATURE_TYPE_FILE");
        }

        impl std::convert::From<std::string::String> for SignatureType {
            fn from(value: std::string::String) -> Self {
                Self(std::borrow::Cow::Owned(value))
            }
        }

        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum Signature {
            /// Signature indicating that a binary family was matched.
            MemoryHashSignature(
                std::boxed::Box<crate::model::indicator::process_signature::MemoryHashSignature>,
            ),
            /// Signature indicating that a YARA rule was matched.
            YaraRuleSignature(
                std::boxed::Box<crate::model::indicator::process_signature::YaraRuleSignature>,
            ),
        }
    }
}

/// Kernel mode rootkit signatures.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct KernelRootkit {
    /// Rootkit name, when available.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// True if unexpected modifications of kernel code memory are present.
    pub unexpected_code_modification: bool,

    /// True if unexpected modifications of kernel read-only data memory are
    /// present.
    pub unexpected_read_only_data_modification: bool,

    /// True if `ftrace` points are present with callbacks pointing to regions
    /// that are not in the expected kernel or module code range.
    pub unexpected_ftrace_handler: bool,

    /// True if `kprobe` points are present with callbacks pointing to regions
    /// that are not in the expected kernel or module code range.
    pub unexpected_kprobe_handler: bool,

    /// True if kernel code pages that are not in the expected kernel or module
    /// code regions are present.
    pub unexpected_kernel_code_pages: bool,

    /// True if system call handlers that are are not in the expected kernel or
    /// module code regions are present.
    pub unexpected_system_call_handler: bool,

    /// True if interrupt handlers that are are not in the expected kernel or
    /// module code regions are present.
    pub unexpected_interrupt_handler: bool,

    /// True if unexpected processes in the scheduler run queue are present. Such
    /// processes are in the run queue, but not in the process task list.
    pub unexpected_processes_in_runqueue: bool,
}

impl KernelRootkit {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::KernelRootkit::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [unexpected_code_modification][crate::model::KernelRootkit::unexpected_code_modification].
    pub fn set_unexpected_code_modification<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.unexpected_code_modification = v.into();
        self
    }

    /// Sets the value of [unexpected_read_only_data_modification][crate::model::KernelRootkit::unexpected_read_only_data_modification].
    pub fn set_unexpected_read_only_data_modification<T: std::convert::Into<bool>>(
        mut self,
        v: T,
    ) -> Self {
        self.unexpected_read_only_data_modification = v.into();
        self
    }

    /// Sets the value of [unexpected_ftrace_handler][crate::model::KernelRootkit::unexpected_ftrace_handler].
    pub fn set_unexpected_ftrace_handler<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.unexpected_ftrace_handler = v.into();
        self
    }

    /// Sets the value of [unexpected_kprobe_handler][crate::model::KernelRootkit::unexpected_kprobe_handler].
    pub fn set_unexpected_kprobe_handler<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.unexpected_kprobe_handler = v.into();
        self
    }

    /// Sets the value of [unexpected_kernel_code_pages][crate::model::KernelRootkit::unexpected_kernel_code_pages].
    pub fn set_unexpected_kernel_code_pages<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.unexpected_kernel_code_pages = v.into();
        self
    }

    /// Sets the value of [unexpected_system_call_handler][crate::model::KernelRootkit::unexpected_system_call_handler].
    pub fn set_unexpected_system_call_handler<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.unexpected_system_call_handler = v.into();
        self
    }

    /// Sets the value of [unexpected_interrupt_handler][crate::model::KernelRootkit::unexpected_interrupt_handler].
    pub fn set_unexpected_interrupt_handler<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.unexpected_interrupt_handler = v.into();
        self
    }

    /// Sets the value of [unexpected_processes_in_runqueue][crate::model::KernelRootkit::unexpected_processes_in_runqueue].
    pub fn set_unexpected_processes_in_runqueue<T: std::convert::Into<bool>>(
        mut self,
        v: T,
    ) -> Self {
        self.unexpected_processes_in_runqueue = v.into();
        self
    }
}

impl wkt::message::Message for KernelRootkit {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.KernelRootkit"
    }
}

/// Kubernetes-related attributes.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Kubernetes {
    /// Kubernetes
    /// [Pods](https://cloud.google.com/kubernetes-engine/docs/concepts/pod)
    /// associated with the finding. This field contains Pod records for each
    /// container that is owned by a Pod.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub pods: std::vec::Vec<crate::model::kubernetes::Pod>,

    /// Provides Kubernetes
    /// [node](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture#nodes)
    /// information.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub nodes: std::vec::Vec<crate::model::kubernetes::Node>,

    /// GKE [node
    /// pools](https://cloud.google.com/kubernetes-engine/docs/concepts/node-pools)
    /// associated with the finding. This field contains node pool information for
    /// each node, when it is available.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub node_pools: std::vec::Vec<crate::model::kubernetes::NodePool>,

    /// Provides Kubernetes role information for findings that involve [Roles or
    /// ClusterRoles](https://cloud.google.com/kubernetes-engine/docs/how-to/role-based-access-control).
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub roles: std::vec::Vec<crate::model::kubernetes::Role>,

    /// Provides Kubernetes role binding information for findings that involve
    /// [RoleBindings or
    /// ClusterRoleBindings](https://cloud.google.com/kubernetes-engine/docs/how-to/role-based-access-control).
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub bindings: std::vec::Vec<crate::model::kubernetes::Binding>,

    /// Provides information on any Kubernetes access reviews (privilege checks)
    /// relevant to the finding.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub access_reviews: std::vec::Vec<crate::model::kubernetes::AccessReview>,

    /// Kubernetes objects related to the finding.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub objects: std::vec::Vec<crate::model::kubernetes::Object>,
}

impl Kubernetes {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [pods][crate::model::Kubernetes::pods].
    pub fn set_pods<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::kubernetes::Pod>,
    {
        use std::iter::Iterator;
        self.pods = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [nodes][crate::model::Kubernetes::nodes].
    pub fn set_nodes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::kubernetes::Node>,
    {
        use std::iter::Iterator;
        self.nodes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [node_pools][crate::model::Kubernetes::node_pools].
    pub fn set_node_pools<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::kubernetes::NodePool>,
    {
        use std::iter::Iterator;
        self.node_pools = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [roles][crate::model::Kubernetes::roles].
    pub fn set_roles<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::kubernetes::Role>,
    {
        use std::iter::Iterator;
        self.roles = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [bindings][crate::model::Kubernetes::bindings].
    pub fn set_bindings<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::kubernetes::Binding>,
    {
        use std::iter::Iterator;
        self.bindings = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [access_reviews][crate::model::Kubernetes::access_reviews].
    pub fn set_access_reviews<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::kubernetes::AccessReview>,
    {
        use std::iter::Iterator;
        self.access_reviews = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [objects][crate::model::Kubernetes::objects].
    pub fn set_objects<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::kubernetes::Object>,
    {
        use std::iter::Iterator;
        self.objects = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Kubernetes {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Kubernetes"
    }
}

/// Defines additional types related to Kubernetes
pub mod kubernetes {
    #[allow(unused_imports)]
    use super::*;

    /// A Kubernetes Pod.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Pod {
        /// Kubernetes Pod namespace.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub ns: std::string::String,

        /// Kubernetes Pod name.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,

        /// Pod labels.  For Kubernetes containers, these are applied to the
        /// container.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub labels: std::vec::Vec<crate::model::Label>,

        /// Pod containers associated with this finding, if any.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub containers: std::vec::Vec<crate::model::Container>,
    }

    impl Pod {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [ns][crate::model::kubernetes::Pod::ns].
        pub fn set_ns<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.ns = v.into();
            self
        }

        /// Sets the value of [name][crate::model::kubernetes::Pod::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }

        /// Sets the value of [labels][crate::model::kubernetes::Pod::labels].
        pub fn set_labels<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::Label>,
        {
            use std::iter::Iterator;
            self.labels = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [containers][crate::model::kubernetes::Pod::containers].
        pub fn set_containers<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::Container>,
        {
            use std::iter::Iterator;
            self.containers = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for Pod {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.Kubernetes.Pod"
        }
    }

    /// Kubernetes nodes associated with the finding.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Node {
        /// [Full resource name](https://google.aip.dev/122#full-resource-names) of
        /// the Compute Engine VM running the cluster node.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,
    }

    impl Node {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [name][crate::model::kubernetes::Node::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }
    }

    impl wkt::message::Message for Node {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.Kubernetes.Node"
        }
    }

    /// Provides GKE node pool information.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct NodePool {
        /// Kubernetes node pool name.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,

        /// Nodes associated with the finding.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub nodes: std::vec::Vec<crate::model::kubernetes::Node>,
    }

    impl NodePool {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [name][crate::model::kubernetes::NodePool::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }

        /// Sets the value of [nodes][crate::model::kubernetes::NodePool::nodes].
        pub fn set_nodes<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::kubernetes::Node>,
        {
            use std::iter::Iterator;
            self.nodes = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for NodePool {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.Kubernetes.NodePool"
        }
    }

    /// Kubernetes Role or ClusterRole.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Role {
        /// Role type.
        pub kind: crate::model::kubernetes::role::Kind,

        /// Role namespace.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub ns: std::string::String,

        /// Role name.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,
    }

    impl Role {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [kind][crate::model::kubernetes::Role::kind].
        pub fn set_kind<T: std::convert::Into<crate::model::kubernetes::role::Kind>>(
            mut self,
            v: T,
        ) -> Self {
            self.kind = v.into();
            self
        }

        /// Sets the value of [ns][crate::model::kubernetes::Role::ns].
        pub fn set_ns<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.ns = v.into();
            self
        }

        /// Sets the value of [name][crate::model::kubernetes::Role::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }
    }

    impl wkt::message::Message for Role {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.Kubernetes.Role"
        }
    }

    /// Defines additional types related to Role
    pub mod role {
        #[allow(unused_imports)]
        use super::*;

        /// Types of Kubernetes roles.
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct Kind(std::borrow::Cow<'static, str>);

        impl Kind {
            /// Creates a new Kind instance.
            pub const fn new(v: &'static str) -> Self {
                Self(std::borrow::Cow::Borrowed(v))
            }

            /// Gets the enum value.
            pub fn value(&self) -> &str {
                &self.0
            }
        }

        /// Useful constants to work with [Kind](Kind)
        pub mod kind {
            use super::Kind;

            /// Role type is not specified.
            pub const KIND_UNSPECIFIED: Kind = Kind::new("KIND_UNSPECIFIED");

            /// Kubernetes Role.
            pub const ROLE: Kind = Kind::new("ROLE");

            /// Kubernetes ClusterRole.
            pub const CLUSTER_ROLE: Kind = Kind::new("CLUSTER_ROLE");
        }

        impl std::convert::From<std::string::String> for Kind {
            fn from(value: std::string::String) -> Self {
                Self(std::borrow::Cow::Owned(value))
            }
        }
    }

    /// Represents a Kubernetes RoleBinding or ClusterRoleBinding.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Binding {
        /// Namespace for the binding.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub ns: std::string::String,

        /// Name for the binding.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,

        /// The Role or ClusterRole referenced by the binding.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub role: std::option::Option<crate::model::kubernetes::Role>,

        /// Represents one or more subjects that are bound to the role. Not always
        /// available for PATCH requests.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub subjects: std::vec::Vec<crate::model::kubernetes::Subject>,
    }

    impl Binding {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [ns][crate::model::kubernetes::Binding::ns].
        pub fn set_ns<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.ns = v.into();
            self
        }

        /// Sets the value of [name][crate::model::kubernetes::Binding::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }

        /// Sets the value of [role][crate::model::kubernetes::Binding::role].
        pub fn set_role<
            T: std::convert::Into<std::option::Option<crate::model::kubernetes::Role>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.role = v.into();
            self
        }

        /// Sets the value of [subjects][crate::model::kubernetes::Binding::subjects].
        pub fn set_subjects<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::kubernetes::Subject>,
        {
            use std::iter::Iterator;
            self.subjects = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for Binding {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.Kubernetes.Binding"
        }
    }

    /// Represents a Kubernetes subject.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Subject {
        /// Authentication type for the subject.
        pub kind: crate::model::kubernetes::subject::AuthType,

        /// Namespace for the subject.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub ns: std::string::String,

        /// Name for the subject.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,
    }

    impl Subject {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [kind][crate::model::kubernetes::Subject::kind].
        pub fn set_kind<T: std::convert::Into<crate::model::kubernetes::subject::AuthType>>(
            mut self,
            v: T,
        ) -> Self {
            self.kind = v.into();
            self
        }

        /// Sets the value of [ns][crate::model::kubernetes::Subject::ns].
        pub fn set_ns<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.ns = v.into();
            self
        }

        /// Sets the value of [name][crate::model::kubernetes::Subject::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }
    }

    impl wkt::message::Message for Subject {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.Kubernetes.Subject"
        }
    }

    /// Defines additional types related to Subject
    pub mod subject {
        #[allow(unused_imports)]
        use super::*;

        /// Auth types that can be used for the subject's kind field.
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct AuthType(std::borrow::Cow<'static, str>);

        impl AuthType {
            /// Creates a new AuthType instance.
            pub const fn new(v: &'static str) -> Self {
                Self(std::borrow::Cow::Borrowed(v))
            }

            /// Gets the enum value.
            pub fn value(&self) -> &str {
                &self.0
            }
        }

        /// Useful constants to work with [AuthType](AuthType)
        pub mod auth_type {
            use super::AuthType;

            /// Authentication is not specified.
            pub const AUTH_TYPE_UNSPECIFIED: AuthType = AuthType::new("AUTH_TYPE_UNSPECIFIED");

            /// User with valid certificate.
            pub const USER: AuthType = AuthType::new("USER");

            /// Users managed by Kubernetes API with credentials stored as secrets.
            pub const SERVICEACCOUNT: AuthType = AuthType::new("SERVICEACCOUNT");

            /// Collection of users.
            pub const GROUP: AuthType = AuthType::new("GROUP");
        }

        impl std::convert::From<std::string::String> for AuthType {
            fn from(value: std::string::String) -> Self {
                Self(std::borrow::Cow::Owned(value))
            }
        }
    }

    /// Conveys information about a Kubernetes access review (such as one returned
    /// by a [`kubectl auth
    /// can-i`](https://kubernetes.io/docs/reference/access-authn-authz/authorization/#checking-api-access)
    /// command) that was involved in a finding.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AccessReview {
        /// The API group of the resource. "*" means all.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub group: std::string::String,

        /// Namespace of the action being requested. Currently, there is no
        /// distinction between no namespace and all namespaces.  Both
        /// are represented by "" (empty).
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub ns: std::string::String,

        /// The name of the resource being requested. Empty means all.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,

        /// The optional resource type requested. "*" means all.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub resource: std::string::String,

        /// The optional subresource type.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub subresource: std::string::String,

        /// A Kubernetes resource API verb, like get, list, watch, create, update,
        /// delete, proxy. "*" means all.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub verb: std::string::String,

        /// The API version of the resource. "*" means all.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub version: std::string::String,
    }

    impl AccessReview {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [group][crate::model::kubernetes::AccessReview::group].
        pub fn set_group<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.group = v.into();
            self
        }

        /// Sets the value of [ns][crate::model::kubernetes::AccessReview::ns].
        pub fn set_ns<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.ns = v.into();
            self
        }

        /// Sets the value of [name][crate::model::kubernetes::AccessReview::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }

        /// Sets the value of [resource][crate::model::kubernetes::AccessReview::resource].
        pub fn set_resource<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.resource = v.into();
            self
        }

        /// Sets the value of [subresource][crate::model::kubernetes::AccessReview::subresource].
        pub fn set_subresource<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.subresource = v.into();
            self
        }

        /// Sets the value of [verb][crate::model::kubernetes::AccessReview::verb].
        pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.verb = v.into();
            self
        }

        /// Sets the value of [version][crate::model::kubernetes::AccessReview::version].
        pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.version = v.into();
            self
        }
    }

    impl wkt::message::Message for AccessReview {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.Kubernetes.AccessReview"
        }
    }

    /// Kubernetes object related to the finding, uniquely identified by GKNN.
    /// Used if the object Kind is not one of Pod, Node, NodePool, Binding, or
    /// AccessReview.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Object {
        /// Kubernetes object group, such as "policy.k8s.io/v1".
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub group: std::string::String,

        /// Kubernetes object kind, such as "Namespace".
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub kind: std::string::String,

        /// Kubernetes object namespace. Must be a valid DNS label. Named
        /// "ns" to avoid collision with C++ namespace keyword. For details see
        /// <https://kubernetes.io/docs/tasks/administer-cluster/namespaces/>.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub ns: std::string::String,

        /// Kubernetes object name. For details see
        /// <https://kubernetes.io/docs/concepts/overview/working-with-objects/names/>.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,

        /// Pod containers associated with this finding, if any.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub containers: std::vec::Vec<crate::model::Container>,
    }

    impl Object {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [group][crate::model::kubernetes::Object::group].
        pub fn set_group<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.group = v.into();
            self
        }

        /// Sets the value of [kind][crate::model::kubernetes::Object::kind].
        pub fn set_kind<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.kind = v.into();
            self
        }

        /// Sets the value of [ns][crate::model::kubernetes::Object::ns].
        pub fn set_ns<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.ns = v.into();
            self
        }

        /// Sets the value of [name][crate::model::kubernetes::Object::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }

        /// Sets the value of [containers][crate::model::kubernetes::Object::containers].
        pub fn set_containers<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::Container>,
        {
            use std::iter::Iterator;
            self.containers = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for Object {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.Kubernetes.Object"
        }
    }
}

/// Represents a generic name-value label. A label has separate name and value
/// fields to support filtering with the `contains()` function. For more
/// information, see [Filtering on array-type
/// fields](https://cloud.google.com/security-command-center/docs/how-to-api-list-findings#array-contains-filtering).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Label {
    /// Name of the label.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Value that corresponds to the label's name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub value: std::string::String,
}

impl Label {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Label::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [value][crate::model::Label::value].
    pub fn set_value<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.value = v.into();
        self
    }
}

impl wkt::message::Message for Label {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Label"
    }
}

/// Contains information related to the load balancer associated with the
/// finding.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LoadBalancer {
    /// The name of the load balancer associated with the finding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl LoadBalancer {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::LoadBalancer::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for LoadBalancer {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.LoadBalancer"
    }
}

/// An individual entry in a log.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LogEntry {
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub log_entry: std::option::Option<crate::model::log_entry::LogEntry>,
}

impl LogEntry {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of `log_entry`.
    pub fn set_log_entry<
        T: std::convert::Into<std::option::Option<crate::model::log_entry::LogEntry>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.log_entry = v.into();
        self
    }

    /// The value of [log_entry][crate::model::LogEntry::log_entry]
    /// if it holds a `CloudLoggingEntry`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_cloud_logging_entry(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::CloudLoggingEntry>> {
        #[allow(unreachable_patterns)]
        self.log_entry.as_ref().and_then(|v| match v {
            crate::model::log_entry::LogEntry::CloudLoggingEntry(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [log_entry][crate::model::LogEntry::log_entry]
    /// to hold a `CloudLoggingEntry`.
    ///
    /// Note that all the setters affecting `log_entry` are
    /// mutually exclusive.
    pub fn set_cloud_logging_entry<
        T: std::convert::Into<std::boxed::Box<crate::model::CloudLoggingEntry>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.log_entry = std::option::Option::Some(
            crate::model::log_entry::LogEntry::CloudLoggingEntry(v.into()),
        );
        self
    }
}

impl wkt::message::Message for LogEntry {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.LogEntry"
    }
}

/// Defines additional types related to LogEntry
pub mod log_entry {
    #[allow(unused_imports)]
    use super::*;

    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum LogEntry {
        /// An individual entry in a log stored in Cloud Logging.
        CloudLoggingEntry(std::boxed::Box<crate::model::CloudLoggingEntry>),
    }
}

/// Metadata taken from a [Cloud Logging
/// LogEntry](https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry)
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CloudLoggingEntry {
    /// A unique identifier for the log entry.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub insert_id: std::string::String,

    /// The type of the log (part of `log_name`. `log_name` is the resource name of
    /// the log to which this log entry belongs). For example:
    /// `cloudresourcemanager.googleapis.com/activity` Note that this field is not
    /// URL-encoded, unlike in `LogEntry`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub log_id: std::string::String,

    /// The organization, folder, or project of the monitored resource that
    /// produced this log entry.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub resource_container: std::string::String,

    /// The time the event described by the log entry occurred.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub timestamp: std::option::Option<wkt::Timestamp>,
}

impl CloudLoggingEntry {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [insert_id][crate::model::CloudLoggingEntry::insert_id].
    pub fn set_insert_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.insert_id = v.into();
        self
    }

    /// Sets the value of [log_id][crate::model::CloudLoggingEntry::log_id].
    pub fn set_log_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.log_id = v.into();
        self
    }

    /// Sets the value of [resource_container][crate::model::CloudLoggingEntry::resource_container].
    pub fn set_resource_container<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.resource_container = v.into();
        self
    }

    /// Sets the value of [timestamp][crate::model::CloudLoggingEntry::timestamp].
    pub fn set_timestamp<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.timestamp = v.into();
        self
    }
}

impl wkt::message::Message for CloudLoggingEntry {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.CloudLoggingEntry"
    }
}

/// MITRE ATT&CK tactics and techniques related to this finding.
/// See: <https://attack.mitre.org>
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MitreAttack {
    /// The MITRE ATT&CK tactic most closely represented by this finding, if any.
    pub primary_tactic: crate::model::mitre_attack::Tactic,

    /// The MITRE ATT&CK technique most closely represented by this finding, if
    /// any. primary_techniques is a repeated field because there are multiple
    /// levels of MITRE ATT&CK techniques.  If the technique most closely
    /// represented by this finding is a sub-technique (e.g. `SCANNING_IP_BLOCKS`),
    /// both the sub-technique and its parent technique(s) will be listed (e.g.
    /// `SCANNING_IP_BLOCKS`, `ACTIVE_SCANNING`).
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub primary_techniques: std::vec::Vec<crate::model::mitre_attack::Technique>,

    /// Additional MITRE ATT&CK tactics related to this finding, if any.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub additional_tactics: std::vec::Vec<crate::model::mitre_attack::Tactic>,

    /// Additional MITRE ATT&CK techniques related to this finding, if any, along
    /// with any of their respective parent techniques.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub additional_techniques: std::vec::Vec<crate::model::mitre_attack::Technique>,

    /// The MITRE ATT&CK version referenced by the above fields. E.g. "8".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub version: std::string::String,
}

impl MitreAttack {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [primary_tactic][crate::model::MitreAttack::primary_tactic].
    pub fn set_primary_tactic<T: std::convert::Into<crate::model::mitre_attack::Tactic>>(
        mut self,
        v: T,
    ) -> Self {
        self.primary_tactic = v.into();
        self
    }

    /// Sets the value of [version][crate::model::MitreAttack::version].
    pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.version = v.into();
        self
    }

    /// Sets the value of [primary_techniques][crate::model::MitreAttack::primary_techniques].
    pub fn set_primary_techniques<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::mitre_attack::Technique>,
    {
        use std::iter::Iterator;
        self.primary_techniques = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [additional_tactics][crate::model::MitreAttack::additional_tactics].
    pub fn set_additional_tactics<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::mitre_attack::Tactic>,
    {
        use std::iter::Iterator;
        self.additional_tactics = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [additional_techniques][crate::model::MitreAttack::additional_techniques].
    pub fn set_additional_techniques<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::mitre_attack::Technique>,
    {
        use std::iter::Iterator;
        self.additional_techniques = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for MitreAttack {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.MitreAttack"
    }
}

/// Defines additional types related to MitreAttack
pub mod mitre_attack {
    #[allow(unused_imports)]
    use super::*;

    /// MITRE ATT&CK tactics that can be referenced by SCC findings.
    /// See: <https://attack.mitre.org/tactics/enterprise/>
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Tactic(std::borrow::Cow<'static, str>);

    impl Tactic {
        /// Creates a new Tactic instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [Tactic](Tactic)
    pub mod tactic {
        use super::Tactic;

        /// Unspecified value.
        pub const TACTIC_UNSPECIFIED: Tactic = Tactic::new("TACTIC_UNSPECIFIED");

        /// TA0043
        pub const RECONNAISSANCE: Tactic = Tactic::new("RECONNAISSANCE");

        /// TA0042
        pub const RESOURCE_DEVELOPMENT: Tactic = Tactic::new("RESOURCE_DEVELOPMENT");

        /// TA0001
        pub const INITIAL_ACCESS: Tactic = Tactic::new("INITIAL_ACCESS");

        /// TA0002
        pub const EXECUTION: Tactic = Tactic::new("EXECUTION");

        /// TA0003
        pub const PERSISTENCE: Tactic = Tactic::new("PERSISTENCE");

        /// TA0004
        pub const PRIVILEGE_ESCALATION: Tactic = Tactic::new("PRIVILEGE_ESCALATION");

        /// TA0005
        pub const DEFENSE_EVASION: Tactic = Tactic::new("DEFENSE_EVASION");

        /// TA0006
        pub const CREDENTIAL_ACCESS: Tactic = Tactic::new("CREDENTIAL_ACCESS");

        /// TA0007
        pub const DISCOVERY: Tactic = Tactic::new("DISCOVERY");

        /// TA0008
        pub const LATERAL_MOVEMENT: Tactic = Tactic::new("LATERAL_MOVEMENT");

        /// TA0009
        pub const COLLECTION: Tactic = Tactic::new("COLLECTION");

        /// TA0011
        pub const COMMAND_AND_CONTROL: Tactic = Tactic::new("COMMAND_AND_CONTROL");

        /// TA0010
        pub const EXFILTRATION: Tactic = Tactic::new("EXFILTRATION");

        /// TA0040
        pub const IMPACT: Tactic = Tactic::new("IMPACT");
    }

    impl std::convert::From<std::string::String> for Tactic {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// MITRE ATT&CK techniques that can be referenced by SCC findings.
    /// See: <https://attack.mitre.org/techniques/enterprise/>
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Technique(std::borrow::Cow<'static, str>);

    impl Technique {
        /// Creates a new Technique instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [Technique](Technique)
    pub mod technique {
        use super::Technique;

        /// Unspecified value.
        pub const TECHNIQUE_UNSPECIFIED: Technique = Technique::new("TECHNIQUE_UNSPECIFIED");

        /// T1036
        pub const MASQUERADING: Technique = Technique::new("MASQUERADING");

        /// T1036.005
        pub const MATCH_LEGITIMATE_NAME_OR_LOCATION: Technique =
            Technique::new("MATCH_LEGITIMATE_NAME_OR_LOCATION");

        /// T1037
        pub const BOOT_OR_LOGON_INITIALIZATION_SCRIPTS: Technique =
            Technique::new("BOOT_OR_LOGON_INITIALIZATION_SCRIPTS");

        /// T1037.005
        pub const STARTUP_ITEMS: Technique = Technique::new("STARTUP_ITEMS");

        /// T1046
        pub const NETWORK_SERVICE_DISCOVERY: Technique =
            Technique::new("NETWORK_SERVICE_DISCOVERY");

        /// T1057
        pub const PROCESS_DISCOVERY: Technique = Technique::new("PROCESS_DISCOVERY");

        /// T1059
        pub const COMMAND_AND_SCRIPTING_INTERPRETER: Technique =
            Technique::new("COMMAND_AND_SCRIPTING_INTERPRETER");

        /// T1059.004
        pub const UNIX_SHELL: Technique = Technique::new("UNIX_SHELL");

        /// T1059.006
        pub const PYTHON: Technique = Technique::new("PYTHON");

        /// T1068
        pub const EXPLOITATION_FOR_PRIVILEGE_ESCALATION: Technique =
            Technique::new("EXPLOITATION_FOR_PRIVILEGE_ESCALATION");

        /// T1069
        pub const PERMISSION_GROUPS_DISCOVERY: Technique =
            Technique::new("PERMISSION_GROUPS_DISCOVERY");

        /// T1069.003
        pub const CLOUD_GROUPS: Technique = Technique::new("CLOUD_GROUPS");

        /// T1070.004
        pub const INDICATOR_REMOVAL_FILE_DELETION: Technique =
            Technique::new("INDICATOR_REMOVAL_FILE_DELETION");

        /// T1071
        pub const APPLICATION_LAYER_PROTOCOL: Technique =
            Technique::new("APPLICATION_LAYER_PROTOCOL");

        /// T1071.004
        pub const DNS: Technique = Technique::new("DNS");

        /// T1072
        pub const SOFTWARE_DEPLOYMENT_TOOLS: Technique =
            Technique::new("SOFTWARE_DEPLOYMENT_TOOLS");

        /// T1078
        pub const VALID_ACCOUNTS: Technique = Technique::new("VALID_ACCOUNTS");

        /// T1078.001
        pub const DEFAULT_ACCOUNTS: Technique = Technique::new("DEFAULT_ACCOUNTS");

        /// T1078.003
        pub const LOCAL_ACCOUNTS: Technique = Technique::new("LOCAL_ACCOUNTS");

        /// T1078.004
        pub const CLOUD_ACCOUNTS: Technique = Technique::new("CLOUD_ACCOUNTS");

        /// T1090
        pub const PROXY: Technique = Technique::new("PROXY");

        /// T1090.002
        pub const EXTERNAL_PROXY: Technique = Technique::new("EXTERNAL_PROXY");

        /// T1090.003
        pub const MULTI_HOP_PROXY: Technique = Technique::new("MULTI_HOP_PROXY");

        /// T1098
        pub const ACCOUNT_MANIPULATION: Technique = Technique::new("ACCOUNT_MANIPULATION");

        /// T1098.001
        pub const ADDITIONAL_CLOUD_CREDENTIALS: Technique =
            Technique::new("ADDITIONAL_CLOUD_CREDENTIALS");

        /// T1098.004
        pub const SSH_AUTHORIZED_KEYS: Technique = Technique::new("SSH_AUTHORIZED_KEYS");

        /// T1098.006
        pub const ADDITIONAL_CONTAINER_CLUSTER_ROLES: Technique =
            Technique::new("ADDITIONAL_CONTAINER_CLUSTER_ROLES");

        /// T1105
        pub const INGRESS_TOOL_TRANSFER: Technique = Technique::new("INGRESS_TOOL_TRANSFER");

        /// T1106
        pub const NATIVE_API: Technique = Technique::new("NATIVE_API");

        /// T1110
        pub const BRUTE_FORCE: Technique = Technique::new("BRUTE_FORCE");

        /// T1129
        pub const SHARED_MODULES: Technique = Technique::new("SHARED_MODULES");

        /// T1134
        pub const ACCESS_TOKEN_MANIPULATION: Technique =
            Technique::new("ACCESS_TOKEN_MANIPULATION");

        /// T1134.001
        pub const TOKEN_IMPERSONATION_OR_THEFT: Technique =
            Technique::new("TOKEN_IMPERSONATION_OR_THEFT");

        /// T1190
        pub const EXPLOIT_PUBLIC_FACING_APPLICATION: Technique =
            Technique::new("EXPLOIT_PUBLIC_FACING_APPLICATION");

        /// T1484
        pub const DOMAIN_POLICY_MODIFICATION: Technique =
            Technique::new("DOMAIN_POLICY_MODIFICATION");

        /// T1485
        pub const DATA_DESTRUCTION: Technique = Technique::new("DATA_DESTRUCTION");

        /// T1489
        pub const SERVICE_STOP: Technique = Technique::new("SERVICE_STOP");

        /// T1490
        pub const INHIBIT_SYSTEM_RECOVERY: Technique = Technique::new("INHIBIT_SYSTEM_RECOVERY");

        /// T1496
        pub const RESOURCE_HIJACKING: Technique = Technique::new("RESOURCE_HIJACKING");

        /// T1498
        pub const NETWORK_DENIAL_OF_SERVICE: Technique =
            Technique::new("NETWORK_DENIAL_OF_SERVICE");

        /// T1526
        pub const CLOUD_SERVICE_DISCOVERY: Technique = Technique::new("CLOUD_SERVICE_DISCOVERY");

        /// T1528
        pub const STEAL_APPLICATION_ACCESS_TOKEN: Technique =
            Technique::new("STEAL_APPLICATION_ACCESS_TOKEN");

        /// T1531
        pub const ACCOUNT_ACCESS_REMOVAL: Technique = Technique::new("ACCOUNT_ACCESS_REMOVAL");

        /// T1539
        pub const STEAL_WEB_SESSION_COOKIE: Technique = Technique::new("STEAL_WEB_SESSION_COOKIE");

        /// T1543
        pub const CREATE_OR_MODIFY_SYSTEM_PROCESS: Technique =
            Technique::new("CREATE_OR_MODIFY_SYSTEM_PROCESS");

        /// T1546
        pub const EVENT_TRIGGERED_EXECUTION: Technique =
            Technique::new("EVENT_TRIGGERED_EXECUTION");

        /// T1548
        pub const ABUSE_ELEVATION_CONTROL_MECHANISM: Technique =
            Technique::new("ABUSE_ELEVATION_CONTROL_MECHANISM");

        /// T1552
        pub const UNSECURED_CREDENTIALS: Technique = Technique::new("UNSECURED_CREDENTIALS");

        /// T1556
        pub const MODIFY_AUTHENTICATION_PROCESS: Technique =
            Technique::new("MODIFY_AUTHENTICATION_PROCESS");

        /// T1562
        pub const IMPAIR_DEFENSES: Technique = Technique::new("IMPAIR_DEFENSES");

        /// T1562.001
        pub const DISABLE_OR_MODIFY_TOOLS: Technique = Technique::new("DISABLE_OR_MODIFY_TOOLS");

        /// T1567
        pub const EXFILTRATION_OVER_WEB_SERVICE: Technique =
            Technique::new("EXFILTRATION_OVER_WEB_SERVICE");

        /// T1567.002
        pub const EXFILTRATION_TO_CLOUD_STORAGE: Technique =
            Technique::new("EXFILTRATION_TO_CLOUD_STORAGE");

        /// T1568
        pub const DYNAMIC_RESOLUTION: Technique = Technique::new("DYNAMIC_RESOLUTION");

        /// T1570
        pub const LATERAL_TOOL_TRANSFER: Technique = Technique::new("LATERAL_TOOL_TRANSFER");

        /// T1578
        pub const MODIFY_CLOUD_COMPUTE_INFRASTRUCTURE: Technique =
            Technique::new("MODIFY_CLOUD_COMPUTE_INFRASTRUCTURE");

        /// T1578.001
        pub const CREATE_SNAPSHOT: Technique = Technique::new("CREATE_SNAPSHOT");

        /// T1580
        pub const CLOUD_INFRASTRUCTURE_DISCOVERY: Technique =
            Technique::new("CLOUD_INFRASTRUCTURE_DISCOVERY");

        /// T1588
        pub const OBTAIN_CAPABILITIES: Technique = Technique::new("OBTAIN_CAPABILITIES");

        /// T1595
        pub const ACTIVE_SCANNING: Technique = Technique::new("ACTIVE_SCANNING");

        /// T1595.001
        pub const SCANNING_IP_BLOCKS: Technique = Technique::new("SCANNING_IP_BLOCKS");

        /// T1609
        pub const CONTAINER_ADMINISTRATION_COMMAND: Technique =
            Technique::new("CONTAINER_ADMINISTRATION_COMMAND");

        /// T1610
        pub const DEPLOY_CONTAINER: Technique = Technique::new("DEPLOY_CONTAINER");

        /// T1611
        pub const ESCAPE_TO_HOST: Technique = Technique::new("ESCAPE_TO_HOST");

        /// T1613
        pub const CONTAINER_AND_RESOURCE_DISCOVERY: Technique =
            Technique::new("CONTAINER_AND_RESOURCE_DISCOVERY");

        /// T1649
        pub const STEAL_OR_FORGE_AUTHENTICATION_CERTIFICATES: Technique =
            Technique::new("STEAL_OR_FORGE_AUTHENTICATION_CERTIFICATES");
    }

    impl std::convert::From<std::string::String> for Technique {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// A mute config is a Cloud SCC resource that contains the configuration
/// to mute create/update events of findings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct MuteConfig {
    /// Identifier. This field will be ignored if provided on config creation. The
    /// following list shows some examples of the format:
    ///
    /// + `organizations/{organization}/muteConfigs/{mute_config}`
    ///
    /// `organizations/{organization}locations/{location}//muteConfigs/{mute_config}`
    ///
    /// + `folders/{folder}/muteConfigs/{mute_config}`
    /// + `folders/{folder}/locations/{location}/muteConfigs/{mute_config}`
    /// + `projects/{project}/muteConfigs/{mute_config}`
    /// + `projects/{project}/locations/{location}/muteConfigs/{mute_config}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// A description of the mute config.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Required. An expression that defines the filter to apply across
    /// create/update events of findings. While creating a filter string, be
    /// mindful of the scope in which the mute configuration is being created.
    /// E.g., If a filter contains project = X but is created under the project = Y
    /// scope, it might not match any findings.
    ///
    /// The following field and operator combinations are supported:
    ///
    /// * severity: `=`, `:`
    /// * category: `=`, `:`
    /// * resource.name: `=`, `:`
    /// * resource.project_name: `=`, `:`
    /// * resource.project_display_name: `=`, `:`
    /// * resource.folders.resource_folder: `=`, `:`
    /// * resource.parent_name: `=`, `:`
    /// * resource.parent_display_name: `=`, `:`
    /// * resource.type: `=`, `:`
    /// * finding_class: `=`, `:`
    /// * indicator.ip_addresses: `=`, `:`
    /// * indicator.domains: `=`, `:`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Output only. The time at which the mute config was created.
    /// This field is set by the server and will be ignored if provided on config
    /// creation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The most recent time at which the mute config was updated.
    /// This field is set by the server and will be ignored if provided on config
    /// creation or update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Email address of the user who last edited the mute config.
    /// This field is set by the server and will be ignored if provided on config
    /// creation or update.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub most_recent_editor: std::string::String,

    /// Required. The type of the mute config, which determines what type of mute
    /// state the config affects. Immutable after creation.
    #[serde(rename = "type")]
    pub r#type: crate::model::mute_config::MuteConfigType,

    /// Optional. The expiry of the mute config. Only applicable for dynamic
    /// configs. If the expiry is set, when the config expires, it is removed from
    /// all findings.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub expiry_time: std::option::Option<wkt::Timestamp>,
}

impl MuteConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::MuteConfig::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::MuteConfig::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::MuteConfig::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::MuteConfig::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::MuteConfig::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [most_recent_editor][crate::model::MuteConfig::most_recent_editor].
    pub fn set_most_recent_editor<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.most_recent_editor = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::MuteConfig::type].
    pub fn set_type<T: std::convert::Into<crate::model::mute_config::MuteConfigType>>(
        mut self,
        v: T,
    ) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [expiry_time][crate::model::MuteConfig::expiry_time].
    pub fn set_expiry_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.expiry_time = v.into();
        self
    }
}

impl wkt::message::Message for MuteConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.MuteConfig"
    }
}

/// Defines additional types related to MuteConfig
pub mod mute_config {
    #[allow(unused_imports)]
    use super::*;

    /// The type of MuteConfig.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct MuteConfigType(std::borrow::Cow<'static, str>);

    impl MuteConfigType {
        /// Creates a new MuteConfigType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [MuteConfigType](MuteConfigType)
    pub mod mute_config_type {
        use super::MuteConfigType;

        /// Unused.
        pub const MUTE_CONFIG_TYPE_UNSPECIFIED: MuteConfigType =
            MuteConfigType::new("MUTE_CONFIG_TYPE_UNSPECIFIED");

        /// A static mute config, which sets the static mute state of future matching
        /// findings to muted. Once the static mute state has been set, finding or
        /// config modifications will not affect the state.
        pub const STATIC: MuteConfigType = MuteConfigType::new("STATIC");

        /// A dynamic mute config, which is applied to existing and future matching
        /// findings, setting their dynamic mute state to "muted". If the config is
        /// updated or deleted, or a matching finding is updated, such that the
        /// finding doesn't match the config, the config will be removed from the
        /// finding, and the finding's dynamic mute state may become "unmuted"
        /// (unless other configs still match).
        pub const DYNAMIC: MuteConfigType = MuteConfigType::new("DYNAMIC");
    }

    impl std::convert::From<std::string::String> for MuteConfigType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Represents a Jupyter notebook IPYNB file, such as a [Colab Enterprise
/// notebook](https://cloud.google.com/colab/docs/introduction) file, that is
/// associated with a finding.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Notebook {
    /// The name of the notebook.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The source notebook service, for example, "Colab Enterprise".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service: std::string::String,

    /// The user ID of the latest author to modify the notebook.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub last_author: std::string::String,

    /// The most recent time the notebook was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub notebook_update_time: std::option::Option<wkt::Timestamp>,
}

impl Notebook {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Notebook::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [service][crate::model::Notebook::service].
    pub fn set_service<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service = v.into();
        self
    }

    /// Sets the value of [last_author][crate::model::Notebook::last_author].
    pub fn set_last_author<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.last_author = v.into();
        self
    }

    /// Sets the value of [notebook_update_time][crate::model::Notebook::notebook_update_time].
    pub fn set_notebook_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.notebook_update_time = v.into();
        self
    }
}

impl wkt::message::Message for Notebook {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Notebook"
    }
}

/// Cloud Security Command Center (Cloud SCC) notification configs.
///
/// A notification config is a Cloud SCC resource that contains the configuration
/// to send notifications for create/update events of findings, assets and etc.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct NotificationConfig {
    /// Identifier. The relative resource name of this notification config. See:
    /// <https://cloud.google.com/apis/design/resource_names#relative_resource_name>
    /// The following list shows some examples:
    /// +
    /// `organizations/{organization_id}/locations/{location_id}/notificationConfigs/notify_public_bucket`
    /// +
    /// `folders/{folder_id}/locations/{location_id}/notificationConfigs/notify_public_bucket`
    /// +
    /// `projects/{project_id}/locations/{location_id}/notificationConfigs/notify_public_bucket`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The description of the notification config (max of 1024 characters).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// The Pub/Sub topic to send notifications to. Its format is
    /// "projects/[project_id]/topics/[topic]".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub pubsub_topic: std::string::String,

    /// Output only. The service account that needs "pubsub.topics.publish"
    /// permission to publish to the Pub/Sub topic.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_account: std::string::String,

    /// The config for triggering notifications.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub notify_config: std::option::Option<crate::model::notification_config::NotifyConfig>,
}

impl NotificationConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::NotificationConfig::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::NotificationConfig::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [pubsub_topic][crate::model::NotificationConfig::pubsub_topic].
    pub fn set_pubsub_topic<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.pubsub_topic = v.into();
        self
    }

    /// Sets the value of [service_account][crate::model::NotificationConfig::service_account].
    pub fn set_service_account<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service_account = v.into();
        self
    }

    /// Sets the value of `notify_config`.
    pub fn set_notify_config<
        T: std::convert::Into<std::option::Option<crate::model::notification_config::NotifyConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.notify_config = v.into();
        self
    }

    /// The value of [notify_config][crate::model::NotificationConfig::notify_config]
    /// if it holds a `StreamingConfig`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_streaming_config(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::notification_config::StreamingConfig>>
    {
        #[allow(unreachable_patterns)]
        self.notify_config.as_ref().and_then(|v| match v {
            crate::model::notification_config::NotifyConfig::StreamingConfig(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [notify_config][crate::model::NotificationConfig::notify_config]
    /// to hold a `StreamingConfig`.
    ///
    /// Note that all the setters affecting `notify_config` are
    /// mutually exclusive.
    pub fn set_streaming_config<
        T: std::convert::Into<std::boxed::Box<crate::model::notification_config::StreamingConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.notify_config = std::option::Option::Some(
            crate::model::notification_config::NotifyConfig::StreamingConfig(v.into()),
        );
        self
    }
}

impl wkt::message::Message for NotificationConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.NotificationConfig"
    }
}

/// Defines additional types related to NotificationConfig
pub mod notification_config {
    #[allow(unused_imports)]
    use super::*;

    /// The config for streaming-based notifications, which send each event as soon
    /// as it is detected.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct StreamingConfig {
        /// Expression that defines the filter to apply across create/update events
        /// of assets or findings as specified by the event type. The expression is a
        /// list of zero or more restrictions combined via logical operators `AND`
        /// and `OR`. Parentheses are supported, and `OR` has higher precedence than
        /// `AND`.
        ///
        /// Restrictions have the form `<field> <operator> <value>` and may have a
        /// `-` character in front of them to indicate negation. The fields map to
        /// those defined in the corresponding resource.
        ///
        /// The supported operators are:
        ///
        /// * `=` for all value types.
        /// * `>`, `<`, `>=`, `<=` for integer values.
        /// * `:`, meaning substring matching, for strings.
        ///
        /// The supported value types are:
        ///
        /// * string literals in quotes.
        /// * integer literals without quotes.
        /// * boolean literals `true` and `false` without quotes.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub filter: std::string::String,
    }

    impl StreamingConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [filter][crate::model::notification_config::StreamingConfig::filter].
        pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.filter = v.into();
            self
        }
    }

    impl wkt::message::Message for StreamingConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.NotificationConfig.StreamingConfig"
        }
    }

    /// The config for triggering notifications.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum NotifyConfig {
        /// The config for triggering streaming-based notifications.
        StreamingConfig(std::boxed::Box<crate::model::notification_config::StreamingConfig>),
    }
}

/// Cloud SCC's Notification
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct NotificationMessage {
    /// Name of the notification config that generated current notification.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub notification_config_name: std::string::String,

    /// The Cloud resource tied to this notification's Finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub resource: std::option::Option<crate::model::Resource>,

    /// Notification Event.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub event: std::option::Option<crate::model::notification_message::Event>,
}

impl NotificationMessage {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [notification_config_name][crate::model::NotificationMessage::notification_config_name].
    pub fn set_notification_config_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.notification_config_name = v.into();
        self
    }

    /// Sets the value of [resource][crate::model::NotificationMessage::resource].
    pub fn set_resource<T: std::convert::Into<std::option::Option<crate::model::Resource>>>(
        mut self,
        v: T,
    ) -> Self {
        self.resource = v.into();
        self
    }

    /// Sets the value of `event`.
    pub fn set_event<
        T: std::convert::Into<std::option::Option<crate::model::notification_message::Event>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.event = v.into();
        self
    }

    /// The value of [event][crate::model::NotificationMessage::event]
    /// if it holds a `Finding`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_finding(&self) -> std::option::Option<&std::boxed::Box<crate::model::Finding>> {
        #[allow(unreachable_patterns)]
        self.event.as_ref().and_then(|v| match v {
            crate::model::notification_message::Event::Finding(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [event][crate::model::NotificationMessage::event]
    /// to hold a `Finding`.
    ///
    /// Note that all the setters affecting `event` are
    /// mutually exclusive.
    pub fn set_finding<T: std::convert::Into<std::boxed::Box<crate::model::Finding>>>(
        mut self,
        v: T,
    ) -> Self {
        self.event =
            std::option::Option::Some(crate::model::notification_message::Event::Finding(v.into()));
        self
    }
}

impl wkt::message::Message for NotificationMessage {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.NotificationMessage"
    }
}

/// Defines additional types related to NotificationMessage
pub mod notification_message {
    #[allow(unused_imports)]
    use super::*;

    /// Notification Event.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Event {
        /// If it's a Finding based notification config, this field will be
        /// populated.
        Finding(std::boxed::Box<crate::model::Finding>),
    }
}

/// Contains information about the org policies associated with the finding.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OrgPolicy {
    /// Identifier. The resource name of the org policy.
    /// Example:
    /// "organizations/{organization_id}/policies/{constraint_name}"
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl OrgPolicy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::OrgPolicy::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for OrgPolicy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.OrgPolicy"
    }
}

/// Represents an operating system process.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Process {
    /// The process name, as displayed in utilities like `top` and `ps`. This name
    /// can be accessed through `/proc/[pid]/comm` and changed with
    /// `prctl(PR_SET_NAME)`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// File information for the process executable.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub binary: std::option::Option<crate::model::File>,

    /// File information for libraries loaded by the process.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub libraries: std::vec::Vec<crate::model::File>,

    /// When the process represents the invocation of a script, `binary` provides
    /// information about the interpreter, while `script` provides information
    /// about the script file provided to the interpreter.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub script: std::option::Option<crate::model::File>,

    /// Process arguments as JSON encoded strings.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub args: std::vec::Vec<std::string::String>,

    /// True if `args` is incomplete.
    pub arguments_truncated: bool,

    /// Process environment variables.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub env_variables: std::vec::Vec<crate::model::EnvironmentVariable>,

    /// True if `env_variables` is incomplete.
    pub env_variables_truncated: bool,

    /// The process ID.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub pid: i64,

    /// The parent process ID.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub parent_pid: i64,
}

impl Process {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Process::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [binary][crate::model::Process::binary].
    pub fn set_binary<T: std::convert::Into<std::option::Option<crate::model::File>>>(
        mut self,
        v: T,
    ) -> Self {
        self.binary = v.into();
        self
    }

    /// Sets the value of [script][crate::model::Process::script].
    pub fn set_script<T: std::convert::Into<std::option::Option<crate::model::File>>>(
        mut self,
        v: T,
    ) -> Self {
        self.script = v.into();
        self
    }

    /// Sets the value of [arguments_truncated][crate::model::Process::arguments_truncated].
    pub fn set_arguments_truncated<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.arguments_truncated = v.into();
        self
    }

    /// Sets the value of [env_variables_truncated][crate::model::Process::env_variables_truncated].
    pub fn set_env_variables_truncated<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.env_variables_truncated = v.into();
        self
    }

    /// Sets the value of [pid][crate::model::Process::pid].
    pub fn set_pid<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.pid = v.into();
        self
    }

    /// Sets the value of [parent_pid][crate::model::Process::parent_pid].
    pub fn set_parent_pid<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.parent_pid = v.into();
        self
    }

    /// Sets the value of [libraries][crate::model::Process::libraries].
    pub fn set_libraries<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::File>,
    {
        use std::iter::Iterator;
        self.libraries = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [args][crate::model::Process::args].
    pub fn set_args<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.args = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [env_variables][crate::model::Process::env_variables].
    pub fn set_env_variables<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EnvironmentVariable>,
    {
        use std::iter::Iterator;
        self.env_variables = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Process {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Process"
    }
}

/// A name-value pair representing an environment variable used in an operating
/// system process.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EnvironmentVariable {
    /// Environment variable name as a JSON encoded string.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Environment variable value as a JSON encoded string.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub val: std::string::String,
}

impl EnvironmentVariable {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::EnvironmentVariable::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [val][crate::model::EnvironmentVariable::val].
    pub fn set_val<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.val = v.into();
        self
    }
}

impl wkt::message::Message for EnvironmentVariable {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.EnvironmentVariable"
    }
}

/// Information related to the Google Cloud resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Resource {
    /// The full resource name of the resource. See:
    /// <https://cloud.google.com/apis/design/resource_names#full_resource_name>
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The human readable name of the resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// The full resource type of the resource.
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub r#type: std::string::String,

    /// Indicates which cloud provider the finding is from.
    pub cloud_provider: crate::model::CloudProvider,

    /// The service or resource provider associated with the resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service: std::string::String,

    /// The region or location of the service (if applicable).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub location: std::string::String,

    /// Provides the path to the resource within the resource hierarchy.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub resource_path: std::option::Option<crate::model::ResourcePath>,

    /// A string representation of the resource path.
    /// For Google Cloud, it has the format of
    /// `organizations/{organization_id}/folders/{folder_id}/folders/{folder_id}/projects/{project_id}`
    /// where there can be any number of folders.
    /// For AWS, it has the format of
    /// `org/{organization_id}/ou/{organizational_unit_id}/ou/{organizational_unit_id}/account/{account_id}`
    /// where there can be any number of organizational units.
    /// For Azure, it has the format of
    /// `mg/{management_group_id}/mg/{management_group_id}/subscription/{subscription_id}/rg/{resource_group_name}`
    /// where there can be any number of management groups.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub resource_path_string: std::string::String,

    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub cloud_provider_metadata: std::option::Option<crate::model::resource::CloudProviderMetadata>,
}

impl Resource {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Resource::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Resource::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::Resource::type].
    pub fn set_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [cloud_provider][crate::model::Resource::cloud_provider].
    pub fn set_cloud_provider<T: std::convert::Into<crate::model::CloudProvider>>(
        mut self,
        v: T,
    ) -> Self {
        self.cloud_provider = v.into();
        self
    }

    /// Sets the value of [service][crate::model::Resource::service].
    pub fn set_service<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service = v.into();
        self
    }

    /// Sets the value of [location][crate::model::Resource::location].
    pub fn set_location<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.location = v.into();
        self
    }

    /// Sets the value of [resource_path][crate::model::Resource::resource_path].
    pub fn set_resource_path<
        T: std::convert::Into<std::option::Option<crate::model::ResourcePath>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_path = v.into();
        self
    }

    /// Sets the value of [resource_path_string][crate::model::Resource::resource_path_string].
    pub fn set_resource_path_string<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.resource_path_string = v.into();
        self
    }

    /// Sets the value of `cloud_provider_metadata`.
    pub fn set_cloud_provider_metadata<
        T: std::convert::Into<std::option::Option<crate::model::resource::CloudProviderMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.cloud_provider_metadata = v.into();
        self
    }

    /// The value of [cloud_provider_metadata][crate::model::Resource::cloud_provider_metadata]
    /// if it holds a `GcpMetadata`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_gcp_metadata(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::GcpMetadata>> {
        #[allow(unreachable_patterns)]
        self.cloud_provider_metadata.as_ref().and_then(|v| match v {
            crate::model::resource::CloudProviderMetadata::GcpMetadata(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [cloud_provider_metadata][crate::model::Resource::cloud_provider_metadata]
    /// if it holds a `AwsMetadata`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_aws_metadata(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::AwsMetadata>> {
        #[allow(unreachable_patterns)]
        self.cloud_provider_metadata.as_ref().and_then(|v| match v {
            crate::model::resource::CloudProviderMetadata::AwsMetadata(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [cloud_provider_metadata][crate::model::Resource::cloud_provider_metadata]
    /// if it holds a `AzureMetadata`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_azure_metadata(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::AzureMetadata>> {
        #[allow(unreachable_patterns)]
        self.cloud_provider_metadata.as_ref().and_then(|v| match v {
            crate::model::resource::CloudProviderMetadata::AzureMetadata(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [cloud_provider_metadata][crate::model::Resource::cloud_provider_metadata]
    /// to hold a `GcpMetadata`.
    ///
    /// Note that all the setters affecting `cloud_provider_metadata` are
    /// mutually exclusive.
    pub fn set_gcp_metadata<T: std::convert::Into<std::boxed::Box<crate::model::GcpMetadata>>>(
        mut self,
        v: T,
    ) -> Self {
        self.cloud_provider_metadata = std::option::Option::Some(
            crate::model::resource::CloudProviderMetadata::GcpMetadata(v.into()),
        );
        self
    }

    /// Sets the value of [cloud_provider_metadata][crate::model::Resource::cloud_provider_metadata]
    /// to hold a `AwsMetadata`.
    ///
    /// Note that all the setters affecting `cloud_provider_metadata` are
    /// mutually exclusive.
    pub fn set_aws_metadata<T: std::convert::Into<std::boxed::Box<crate::model::AwsMetadata>>>(
        mut self,
        v: T,
    ) -> Self {
        self.cloud_provider_metadata = std::option::Option::Some(
            crate::model::resource::CloudProviderMetadata::AwsMetadata(v.into()),
        );
        self
    }

    /// Sets the value of [cloud_provider_metadata][crate::model::Resource::cloud_provider_metadata]
    /// to hold a `AzureMetadata`.
    ///
    /// Note that all the setters affecting `cloud_provider_metadata` are
    /// mutually exclusive.
    pub fn set_azure_metadata<
        T: std::convert::Into<std::boxed::Box<crate::model::AzureMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.cloud_provider_metadata = std::option::Option::Some(
            crate::model::resource::CloudProviderMetadata::AzureMetadata(v.into()),
        );
        self
    }
}

impl wkt::message::Message for Resource {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Resource"
    }
}

/// Defines additional types related to Resource
pub mod resource {
    #[allow(unused_imports)]
    use super::*;

    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum CloudProviderMetadata {
        /// The GCP metadata associated with the finding.
        GcpMetadata(std::boxed::Box<crate::model::GcpMetadata>),
        /// The AWS metadata associated with the finding.
        AwsMetadata(std::boxed::Box<crate::model::AwsMetadata>),
        /// The Azure metadata associated with the finding.
        AzureMetadata(std::boxed::Box<crate::model::AzureMetadata>),
    }
}

/// GCP metadata associated with the resource, only applicable if the finding's
/// cloud provider is Google Cloud Platform.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GcpMetadata {
    /// The full resource name of project that the resource belongs to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub project: std::string::String,

    /// The project ID that the resource belongs to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub project_display_name: std::string::String,

    /// The full resource name of resource's parent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The human readable name of resource's parent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent_display_name: std::string::String,

    /// Output only. Contains a Folder message for each folder in the assets
    /// ancestry. The first folder is the deepest nested folder, and the last
    /// folder is the folder directly under the Organization.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub folders: std::vec::Vec<crate::model::Folder>,

    /// The name of the organization that the resource belongs to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub organization: std::string::String,
}

impl GcpMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [project][crate::model::GcpMetadata::project].
    pub fn set_project<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.project = v.into();
        self
    }

    /// Sets the value of [project_display_name][crate::model::GcpMetadata::project_display_name].
    pub fn set_project_display_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.project_display_name = v.into();
        self
    }

    /// Sets the value of [parent][crate::model::GcpMetadata::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [parent_display_name][crate::model::GcpMetadata::parent_display_name].
    pub fn set_parent_display_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.parent_display_name = v.into();
        self
    }

    /// Sets the value of [organization][crate::model::GcpMetadata::organization].
    pub fn set_organization<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.organization = v.into();
        self
    }

    /// Sets the value of [folders][crate::model::GcpMetadata::folders].
    pub fn set_folders<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Folder>,
    {
        use std::iter::Iterator;
        self.folders = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for GcpMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.GcpMetadata"
    }
}

/// AWS metadata associated with the resource, only applicable if the finding's
/// cloud provider is Amazon Web Services.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AwsMetadata {
    /// The AWS organization associated with the resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub organization: std::option::Option<crate::model::aws_metadata::AwsOrganization>,

    /// A list of AWS organizational units associated with the resource, ordered
    /// from lowest level (closest to the account) to highest level.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub organizational_units: std::vec::Vec<crate::model::aws_metadata::AwsOrganizationalUnit>,

    /// The AWS account associated with the resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub account: std::option::Option<crate::model::aws_metadata::AwsAccount>,
}

impl AwsMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [organization][crate::model::AwsMetadata::organization].
    pub fn set_organization<
        T: std::convert::Into<std::option::Option<crate::model::aws_metadata::AwsOrganization>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.organization = v.into();
        self
    }

    /// Sets the value of [account][crate::model::AwsMetadata::account].
    pub fn set_account<
        T: std::convert::Into<std::option::Option<crate::model::aws_metadata::AwsAccount>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.account = v.into();
        self
    }

    /// Sets the value of [organizational_units][crate::model::AwsMetadata::organizational_units].
    pub fn set_organizational_units<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::aws_metadata::AwsOrganizationalUnit>,
    {
        use std::iter::Iterator;
        self.organizational_units = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for AwsMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.AwsMetadata"
    }
}

/// Defines additional types related to AwsMetadata
pub mod aws_metadata {
    #[allow(unused_imports)]
    use super::*;

    /// An organization is a collection of accounts that are centrally managed
    /// together using consolidated billing, organized hierarchically with
    /// organizational units (OUs), and controlled with policies.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AwsOrganization {
        /// The unique identifier (ID) for the organization. The regex pattern for an
        /// organization ID string requires "o-" followed by from 10 to 32 lowercase
        /// letters or digits.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub id: std::string::String,
    }

    impl AwsOrganization {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [id][crate::model::aws_metadata::AwsOrganization::id].
        pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.id = v.into();
            self
        }
    }

    impl wkt::message::Message for AwsOrganization {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.AwsMetadata.AwsOrganization"
        }
    }

    /// An Organizational Unit (OU) is a container of AWS accounts within a root of
    /// an organization. Policies that are attached to an OU apply to all accounts
    /// contained in that OU and in any child OUs.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AwsOrganizationalUnit {
        /// The unique identifier (ID) associated with this OU. The regex pattern for
        /// an organizational unit ID string requires "ou-" followed by from 4 to 32
        /// lowercase letters or digits (the ID of the root that contains the OU).
        /// This string is followed by a second "-" dash and from 8 to 32 additional
        /// lowercase letters or digits. For example, "ou-ab12-cd34ef56".
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub id: std::string::String,

        /// The friendly name of the OU.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,
    }

    impl AwsOrganizationalUnit {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [id][crate::model::aws_metadata::AwsOrganizationalUnit::id].
        pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.id = v.into();
            self
        }

        /// Sets the value of [name][crate::model::aws_metadata::AwsOrganizationalUnit::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }
    }

    impl wkt::message::Message for AwsOrganizationalUnit {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.AwsMetadata.AwsOrganizationalUnit"
        }
    }

    /// An AWS account that is a member of an organization.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AwsAccount {
        /// The unique identifier (ID) of the account, containing exactly 12 digits.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub id: std::string::String,

        /// The friendly name of this account.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,
    }

    impl AwsAccount {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [id][crate::model::aws_metadata::AwsAccount::id].
        pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.id = v.into();
            self
        }

        /// Sets the value of [name][crate::model::aws_metadata::AwsAccount::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }
    }

    impl wkt::message::Message for AwsAccount {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.AwsMetadata.AwsAccount"
        }
    }
}

/// Azure metadata associated with the resource, only applicable if the finding's
/// cloud provider is Microsoft Azure.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AzureMetadata {
    /// A list of Azure management groups associated with the resource, ordered
    /// from lowest level (closest to the subscription) to highest level.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub management_groups: std::vec::Vec<crate::model::azure_metadata::AzureManagementGroup>,

    /// The Azure subscription associated with the resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub subscription: std::option::Option<crate::model::azure_metadata::AzureSubscription>,

    /// The Azure resource group associated with the resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub resource_group: std::option::Option<crate::model::azure_metadata::AzureResourceGroup>,

    /// The Azure Entra tenant associated with the resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub tenant: std::option::Option<crate::model::azure_metadata::AzureTenant>,
}

impl AzureMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [subscription][crate::model::AzureMetadata::subscription].
    pub fn set_subscription<
        T: std::convert::Into<std::option::Option<crate::model::azure_metadata::AzureSubscription>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.subscription = v.into();
        self
    }

    /// Sets the value of [resource_group][crate::model::AzureMetadata::resource_group].
    pub fn set_resource_group<
        T: std::convert::Into<std::option::Option<crate::model::azure_metadata::AzureResourceGroup>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_group = v.into();
        self
    }

    /// Sets the value of [tenant][crate::model::AzureMetadata::tenant].
    pub fn set_tenant<
        T: std::convert::Into<std::option::Option<crate::model::azure_metadata::AzureTenant>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.tenant = v.into();
        self
    }

    /// Sets the value of [management_groups][crate::model::AzureMetadata::management_groups].
    pub fn set_management_groups<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::azure_metadata::AzureManagementGroup>,
    {
        use std::iter::Iterator;
        self.management_groups = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for AzureMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.AzureMetadata"
    }
}

/// Defines additional types related to AzureMetadata
pub mod azure_metadata {
    #[allow(unused_imports)]
    use super::*;

    /// Represents an Azure management group.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AzureManagementGroup {
        /// The UUID of the Azure management group, for example,
        /// `20000000-0001-0000-0000-000000000000`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub id: std::string::String,

        /// The display name of the Azure management group.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub display_name: std::string::String,
    }

    impl AzureManagementGroup {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [id][crate::model::azure_metadata::AzureManagementGroup::id].
        pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.id = v.into();
            self
        }

        /// Sets the value of [display_name][crate::model::azure_metadata::AzureManagementGroup::display_name].
        pub fn set_display_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.display_name = v.into();
            self
        }
    }

    impl wkt::message::Message for AzureManagementGroup {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.AzureMetadata.AzureManagementGroup"
        }
    }

    /// Represents an Azure subscription.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AzureSubscription {
        /// The UUID of the Azure subscription, for example,
        /// `291bba3f-e0a5-47bc-a099-3bdcb2a50a05`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub id: std::string::String,

        /// The display name of the Azure subscription.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub display_name: std::string::String,
    }

    impl AzureSubscription {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [id][crate::model::azure_metadata::AzureSubscription::id].
        pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.id = v.into();
            self
        }

        /// Sets the value of [display_name][crate::model::azure_metadata::AzureSubscription::display_name].
        pub fn set_display_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.display_name = v.into();
            self
        }
    }

    impl wkt::message::Message for AzureSubscription {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.AzureMetadata.AzureSubscription"
        }
    }

    /// Represents an Azure resource group.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AzureResourceGroup {
        /// The ID of the Azure resource group.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub id: std::string::String,

        /// The name of the Azure resource group. This is not a UUID.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub name: std::string::String,
    }

    impl AzureResourceGroup {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [id][crate::model::azure_metadata::AzureResourceGroup::id].
        pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.id = v.into();
            self
        }

        /// Sets the value of [name][crate::model::azure_metadata::AzureResourceGroup::name].
        pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.name = v.into();
            self
        }
    }

    impl wkt::message::Message for AzureResourceGroup {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.AzureMetadata.AzureResourceGroup"
        }
    }

    /// Represents a Microsoft Entra tenant.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct AzureTenant {
        /// The ID of the Microsoft Entra tenant, for example,
        /// "a11aaa11-aa11-1aa1-11aa-1aaa11a".
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub id: std::string::String,

        /// The display name of the Azure tenant.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub display_name: std::string::String,
    }

    impl AzureTenant {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [id][crate::model::azure_metadata::AzureTenant::id].
        pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.id = v.into();
            self
        }

        /// Sets the value of [display_name][crate::model::azure_metadata::AzureTenant::display_name].
        pub fn set_display_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.display_name = v.into();
            self
        }
    }

    impl wkt::message::Message for AzureTenant {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.AzureMetadata.AzureTenant"
        }
    }
}

/// Represents the path of resources leading up to the resource this finding is
/// about.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ResourcePath {
    /// The list of nodes that make the up resource path, ordered from lowest
    /// level to highest level.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub nodes: std::vec::Vec<crate::model::resource_path::ResourcePathNode>,
}

impl ResourcePath {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [nodes][crate::model::ResourcePath::nodes].
    pub fn set_nodes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::resource_path::ResourcePathNode>,
    {
        use std::iter::Iterator;
        self.nodes = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ResourcePath {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ResourcePath"
    }
}

/// Defines additional types related to ResourcePath
pub mod resource_path {
    #[allow(unused_imports)]
    use super::*;

    /// A node within the resource path. Each node represents a resource within the
    /// resource hierarchy.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ResourcePathNode {
        /// The type of resource this node represents.
        pub node_type: crate::model::resource_path::ResourcePathNodeType,

        /// The ID of the resource this node represents.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub id: std::string::String,

        /// The display name of the resource this node represents.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub display_name: std::string::String,
    }

    impl ResourcePathNode {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [node_type][crate::model::resource_path::ResourcePathNode::node_type].
        pub fn set_node_type<
            T: std::convert::Into<crate::model::resource_path::ResourcePathNodeType>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.node_type = v.into();
            self
        }

        /// Sets the value of [id][crate::model::resource_path::ResourcePathNode::id].
        pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.id = v.into();
            self
        }

        /// Sets the value of [display_name][crate::model::resource_path::ResourcePathNode::display_name].
        pub fn set_display_name<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.display_name = v.into();
            self
        }
    }

    impl wkt::message::Message for ResourcePathNode {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.ResourcePath.ResourcePathNode"
        }
    }

    /// The type of resource the node represents.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct ResourcePathNodeType(std::borrow::Cow<'static, str>);

    impl ResourcePathNodeType {
        /// Creates a new ResourcePathNodeType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [ResourcePathNodeType](ResourcePathNodeType)
    pub mod resource_path_node_type {
        use super::ResourcePathNodeType;

        /// Node type is unspecified.
        pub const RESOURCE_PATH_NODE_TYPE_UNSPECIFIED: ResourcePathNodeType =
            ResourcePathNodeType::new("RESOURCE_PATH_NODE_TYPE_UNSPECIFIED");

        /// The node represents a Google Cloud organization.
        pub const GCP_ORGANIZATION: ResourcePathNodeType =
            ResourcePathNodeType::new("GCP_ORGANIZATION");

        /// The node represents a Google Cloud folder.
        pub const GCP_FOLDER: ResourcePathNodeType = ResourcePathNodeType::new("GCP_FOLDER");

        /// The node represents a Google Cloud project.
        pub const GCP_PROJECT: ResourcePathNodeType = ResourcePathNodeType::new("GCP_PROJECT");

        /// The node represents an AWS organization.
        pub const AWS_ORGANIZATION: ResourcePathNodeType =
            ResourcePathNodeType::new("AWS_ORGANIZATION");

        /// The node represents an AWS organizational unit.
        pub const AWS_ORGANIZATIONAL_UNIT: ResourcePathNodeType =
            ResourcePathNodeType::new("AWS_ORGANIZATIONAL_UNIT");

        /// The node represents an AWS account.
        pub const AWS_ACCOUNT: ResourcePathNodeType = ResourcePathNodeType::new("AWS_ACCOUNT");

        /// The node represents an Azure management group.
        pub const AZURE_MANAGEMENT_GROUP: ResourcePathNodeType =
            ResourcePathNodeType::new("AZURE_MANAGEMENT_GROUP");

        /// The node represents an Azure subscription.
        pub const AZURE_SUBSCRIPTION: ResourcePathNodeType =
            ResourcePathNodeType::new("AZURE_SUBSCRIPTION");

        /// The node represents an Azure resource group.
        pub const AZURE_RESOURCE_GROUP: ResourcePathNodeType =
            ResourcePathNodeType::new("AZURE_RESOURCE_GROUP");
    }

    impl std::convert::From<std::string::String> for ResourcePathNodeType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// A resource value configuration (RVC) is a mapping configuration of user's
/// resources to resource values. Used in Attack path simulations.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ResourceValueConfig {
    /// Identifier. Name for the resource value configuration
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Resource value level this expression represents
    /// Only required when there is no Sensitive Data Protection mapping in the
    /// request
    pub resource_value: crate::model::ResourceValue,

    /// Tag values combined with `AND` to check against.
    /// For Google Cloud resources, they are tag value IDs in the form of
    /// "tagValues/123". Example: `[ "tagValues/123", "tagValues/456",
    /// "tagValues/789" ]`
    /// <https://cloud.google.com/resource-manager/docs/tags/tags-creating-and-managing>
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub tag_values: std::vec::Vec<std::string::String>,

    /// Apply resource_value only to resources that match resource_type.
    /// resource_type will be checked with `AND` of other resources.
    /// For example, "storage.googleapis.com/Bucket" with resource_value "HIGH"
    /// will apply "HIGH" value only to "storage.googleapis.com/Bucket" resources.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub resource_type: std::string::String,

    /// Project or folder to scope this configuration to.
    /// For example, "project/456" would apply this configuration only to resources
    /// in "project/456" scope and will be checked with `AND` of other resources.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub scope: std::string::String,

    /// List of resource labels to search for, evaluated with `AND`.
    /// For example, "resource_labels_selector": {"key": "value", "env": "prod"}
    /// will match resources with labels "key": "value" `AND` "env":
    /// "prod"
    /// <https://cloud.google.com/resource-manager/docs/creating-managing-labels>
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub resource_labels_selector:
        std::collections::HashMap<std::string::String, std::string::String>,

    /// Description of the resource value configuration.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. Timestamp this resource value configuration was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Timestamp this resource value configuration was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Cloud provider this configuration applies to
    pub cloud_provider: crate::model::CloudProvider,

    /// A mapping of the sensitivity on Sensitive Data Protection finding to
    /// resource values. This mapping can only be used in combination with a
    /// resource_type that is related to BigQuery, e.g.
    /// "bigquery.googleapis.com/Dataset".
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub sensitive_data_protection_mapping:
        std::option::Option<crate::model::resource_value_config::SensitiveDataProtectionMapping>,
}

impl ResourceValueConfig {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ResourceValueConfig::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [resource_value][crate::model::ResourceValueConfig::resource_value].
    pub fn set_resource_value<T: std::convert::Into<crate::model::ResourceValue>>(
        mut self,
        v: T,
    ) -> Self {
        self.resource_value = v.into();
        self
    }

    /// Sets the value of [resource_type][crate::model::ResourceValueConfig::resource_type].
    pub fn set_resource_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.resource_type = v.into();
        self
    }

    /// Sets the value of [scope][crate::model::ResourceValueConfig::scope].
    pub fn set_scope<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.scope = v.into();
        self
    }

    /// Sets the value of [description][crate::model::ResourceValueConfig::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ResourceValueConfig::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::ResourceValueConfig::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [cloud_provider][crate::model::ResourceValueConfig::cloud_provider].
    pub fn set_cloud_provider<T: std::convert::Into<crate::model::CloudProvider>>(
        mut self,
        v: T,
    ) -> Self {
        self.cloud_provider = v.into();
        self
    }

    /// Sets the value of [sensitive_data_protection_mapping][crate::model::ResourceValueConfig::sensitive_data_protection_mapping].
    pub fn set_sensitive_data_protection_mapping<
        T: std::convert::Into<
            std::option::Option<
                crate::model::resource_value_config::SensitiveDataProtectionMapping,
            >,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.sensitive_data_protection_mapping = v.into();
        self
    }

    /// Sets the value of [tag_values][crate::model::ResourceValueConfig::tag_values].
    pub fn set_tag_values<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.tag_values = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [resource_labels_selector][crate::model::ResourceValueConfig::resource_labels_selector].
    pub fn set_resource_labels_selector<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.resource_labels_selector = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for ResourceValueConfig {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ResourceValueConfig"
    }
}

/// Defines additional types related to ResourceValueConfig
pub mod resource_value_config {
    #[allow(unused_imports)]
    use super::*;

    /// Resource value mapping for Sensitive Data Protection findings
    /// If any of these mappings have a resource value that is not unspecified,
    /// the resource_value field will be ignored when reading this configuration.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SensitiveDataProtectionMapping {
        /// Resource value mapping for high-sensitivity Sensitive Data Protection
        /// findings
        pub high_sensitivity_mapping: crate::model::ResourceValue,

        /// Resource value mapping for medium-sensitivity Sensitive Data Protection
        /// findings
        pub medium_sensitivity_mapping: crate::model::ResourceValue,
    }

    impl SensitiveDataProtectionMapping {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [high_sensitivity_mapping][crate::model::resource_value_config::SensitiveDataProtectionMapping::high_sensitivity_mapping].
        pub fn set_high_sensitivity_mapping<T: std::convert::Into<crate::model::ResourceValue>>(
            mut self,
            v: T,
        ) -> Self {
            self.high_sensitivity_mapping = v.into();
            self
        }

        /// Sets the value of [medium_sensitivity_mapping][crate::model::resource_value_config::SensitiveDataProtectionMapping::medium_sensitivity_mapping].
        pub fn set_medium_sensitivity_mapping<
            T: std::convert::Into<crate::model::ResourceValue>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.medium_sensitivity_mapping = v.into();
            self
        }
    }

    impl wkt::message::Message for SensitiveDataProtectionMapping {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.ResourceValueConfig.SensitiveDataProtectionMapping"
        }
    }
}

/// User specified security marks that are attached to the parent Security
/// Command Center resource. Security marks are scoped within a Security Command
/// Center organization -- they can be modified and viewed by all users who have
/// proper permissions on the organization.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SecurityMarks {
    /// The relative resource name of the SecurityMarks. See:
    /// <https://cloud.google.com/apis/design/resource_names#relative_resource_name>
    /// The following list shows some examples:
    ///
    /// + `organizations/{organization_id}/assets/{asset_id}/securityMarks`
    ///
    /// `organizations/{organization_id}/sources/{source_id}/findings/{finding_id}/securityMarks`
    /// +
    /// `organizations/{organization_id}/sources/{source_id}/locations/{location}/findings/{finding_id}/securityMarks`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Mutable user specified security marks belonging to the parent resource.
    /// Constraints are as follows:
    ///
    /// * Keys and values are treated as case insensitive
    /// * Keys must be between 1 - 256 characters (inclusive)
    /// * Keys must be letters, numbers, underscores, or dashes
    /// * Values have leading and trailing whitespace trimmed, remaining
    ///   characters must be between 1 - 4096 characters (inclusive)
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub marks: std::collections::HashMap<std::string::String, std::string::String>,

    /// The canonical name of the marks. The following list shows some examples:
    ///
    /// + `organizations/{organization_id}/assets/{asset_id}/securityMarks`
    ///
    /// `organizations/{organization_id}/sources/{source_id}/findings/{finding_id}/securityMarks`
    /// +
    /// `organizations/{organization_id}/sources/{source_id}/locations/{location}/findings/{finding_id}/securityMarks`
    ///
    /// + `folders/{folder_id}/assets/{asset_id}/securityMarks`
    ///
    /// `folders/{folder_id}/sources/{source_id}/findings/{finding_id}/securityMarks`
    /// +
    /// `folders/{folder_id}/sources/{source_id}/locations/{location}/findings/{finding_id}/securityMarks`
    ///
    /// + `projects/{project_number}/assets/{asset_id}/securityMarks`
    ///
    /// `projects/{project_number}/sources/{source_id}/findings/{finding_id}/securityMarks`
    /// +
    /// `projects/{project_number}/sources/{source_id}/locations/{location}/findings/{finding_id}/securityMarks`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub canonical_name: std::string::String,
}

impl SecurityMarks {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::SecurityMarks::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [canonical_name][crate::model::SecurityMarks::canonical_name].
    pub fn set_canonical_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.canonical_name = v.into();
        self
    }

    /// Sets the value of [marks][crate::model::SecurityMarks::marks].
    pub fn set_marks<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.marks = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for SecurityMarks {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.SecurityMarks"
    }
}

/// Represents a posture that is deployed on Google Cloud by the
/// Security Command Center Posture Management service.
/// A posture contains one or more policy sets. A policy set is a
/// group of policies that enforce a set of security rules on Google
/// Cloud.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SecurityPosture {
    /// Name of the posture, for example, `CIS-Posture`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The version of the posture, for example, `c7cfa2a8`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub revision_id: std::string::String,

    /// The project, folder, or organization on which the posture is deployed,
    /// for example, `projects/{project_number}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub posture_deployment_resource: std::string::String,

    /// The name of the posture deployment, for example,
    /// `organizations/{org_id}/posturedeployments/{posture_deployment_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub posture_deployment: std::string::String,

    /// The name of the updated policy, for example,
    /// `projects/{project_id}/policies/{constraint_name}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub changed_policy: std::string::String,

    /// The name of the updated policy set, for example, `cis-policyset`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub policy_set: std::string::String,

    /// The ID of the updated policy, for example, `compute-policy-1`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub policy: std::string::String,

    /// The details about a change in an updated policy that violates the deployed
    /// posture.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub policy_drift_details: std::vec::Vec<crate::model::security_posture::PolicyDriftDetails>,
}

impl SecurityPosture {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::SecurityPosture::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [revision_id][crate::model::SecurityPosture::revision_id].
    pub fn set_revision_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.revision_id = v.into();
        self
    }

    /// Sets the value of [posture_deployment_resource][crate::model::SecurityPosture::posture_deployment_resource].
    pub fn set_posture_deployment_resource<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.posture_deployment_resource = v.into();
        self
    }

    /// Sets the value of [posture_deployment][crate::model::SecurityPosture::posture_deployment].
    pub fn set_posture_deployment<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.posture_deployment = v.into();
        self
    }

    /// Sets the value of [changed_policy][crate::model::SecurityPosture::changed_policy].
    pub fn set_changed_policy<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.changed_policy = v.into();
        self
    }

    /// Sets the value of [policy_set][crate::model::SecurityPosture::policy_set].
    pub fn set_policy_set<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.policy_set = v.into();
        self
    }

    /// Sets the value of [policy][crate::model::SecurityPosture::policy].
    pub fn set_policy<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.policy = v.into();
        self
    }

    /// Sets the value of [policy_drift_details][crate::model::SecurityPosture::policy_drift_details].
    pub fn set_policy_drift_details<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::security_posture::PolicyDriftDetails>,
    {
        use std::iter::Iterator;
        self.policy_drift_details = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SecurityPosture {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.SecurityPosture"
    }
}

/// Defines additional types related to SecurityPosture
pub mod security_posture {
    #[allow(unused_imports)]
    use super::*;

    /// The policy field that violates the deployed posture and its expected and
    /// detected values.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct PolicyDriftDetails {
        /// The name of the updated field, for example
        /// constraint.implementation.policy_rules[0].enforce
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub field: std::string::String,

        /// The value of this field that was configured in a posture, for example,
        /// `true` or `allowed_values={"projects/29831892"}`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub expected_value: std::string::String,

        /// The detected value that violates the deployed posture, for example,
        /// `false` or `allowed_values={"projects/22831892"}`.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub detected_value: std::string::String,
    }

    impl PolicyDriftDetails {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [field][crate::model::security_posture::PolicyDriftDetails::field].
        pub fn set_field<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.field = v.into();
            self
        }

        /// Sets the value of [expected_value][crate::model::security_posture::PolicyDriftDetails::expected_value].
        pub fn set_expected_value<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.expected_value = v.into();
            self
        }

        /// Sets the value of [detected_value][crate::model::security_posture::PolicyDriftDetails::detected_value].
        pub fn set_detected_value<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.detected_value = v.into();
            self
        }
    }

    impl wkt::message::Message for PolicyDriftDetails {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.SecurityPosture.PolicyDriftDetails"
        }
    }
}

/// Request message to create multiple resource value configs
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchCreateResourceValueConfigsRequest {
    /// Required. Resource name of the new ResourceValueConfig's parent.
    /// The parent field in the CreateResourceValueConfigRequest
    /// messages must either be empty or match this field.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The resource value configs to be created.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub requests: std::vec::Vec<crate::model::CreateResourceValueConfigRequest>,
}

impl BatchCreateResourceValueConfigsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::BatchCreateResourceValueConfigsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [requests][crate::model::BatchCreateResourceValueConfigsRequest::requests].
    pub fn set_requests<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::CreateResourceValueConfigRequest>,
    {
        use std::iter::Iterator;
        self.requests = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchCreateResourceValueConfigsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.BatchCreateResourceValueConfigsRequest"
    }
}

/// Response message for BatchCreateResourceValueConfigs
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchCreateResourceValueConfigsResponse {
    /// The resource value configs created
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub resource_value_configs: std::vec::Vec<crate::model::ResourceValueConfig>,
}

impl BatchCreateResourceValueConfigsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [resource_value_configs][crate::model::BatchCreateResourceValueConfigsResponse::resource_value_configs].
    pub fn set_resource_value_configs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ResourceValueConfig>,
    {
        use std::iter::Iterator;
        self.resource_value_configs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchCreateResourceValueConfigsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.BatchCreateResourceValueConfigsResponse"
    }
}

/// Request message for bulk findings update.
///
/// Note:
///
/// . If multiple bulk update requests match the same resource, the order in
///   which they get executed is not defined.
/// . Once a bulk operation is started, there is no way to stop it.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BulkMuteFindingsRequest {
    /// Required. The parent, at which bulk action needs to be applied. If no
    /// location is specified, findings are updated in global. The following list
    /// shows some examples:
    ///
    /// + `organizations/[organization_id]`
    /// + `organizations/[organization_id]/locations/[location_id]`
    /// + `folders/[folder_id]`
    /// + `folders/[folder_id]/locations/[location_id]`
    /// + `projects/[project_id]`
    /// + `projects/[project_id]/locations/[location_id]`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Expression that identifies findings that should be updated.
    /// The expression is a list of zero or more restrictions combined
    /// via logical operators `AND` and `OR`. Parentheses are supported, and `OR`
    /// has higher precedence than `AND`.
    ///
    /// Restrictions have the form `<field> <operator> <value>` and may have a
    /// `-` character in front of them to indicate negation. The fields map to
    /// those defined in the corresponding resource.
    ///
    /// The supported operators are:
    ///
    /// * `=` for all value types.
    /// * `>`, `<`, `>=`, `<=` for integer values.
    /// * `:`, meaning substring matching, for strings.
    ///
    /// The supported value types are:
    ///
    /// * string literals in quotes.
    /// * integer literals without quotes.
    /// * boolean literals `true` and `false` without quotes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. All findings matching the given filter will have their mute state
    /// set to this value. The default value is `MUTED`. Setting this to
    /// `UNDEFINED` will clear the mute state on all matching findings.
    pub mute_state: crate::model::bulk_mute_findings_request::MuteState,
}

impl BulkMuteFindingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::BulkMuteFindingsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::BulkMuteFindingsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [mute_state][crate::model::BulkMuteFindingsRequest::mute_state].
    pub fn set_mute_state<
        T: std::convert::Into<crate::model::bulk_mute_findings_request::MuteState>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.mute_state = v.into();
        self
    }
}

impl wkt::message::Message for BulkMuteFindingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.BulkMuteFindingsRequest"
    }
}

/// Defines additional types related to BulkMuteFindingsRequest
pub mod bulk_mute_findings_request {
    #[allow(unused_imports)]
    use super::*;

    /// The mute state.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct MuteState(std::borrow::Cow<'static, str>);

    impl MuteState {
        /// Creates a new MuteState instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [MuteState](MuteState)
    pub mod mute_state {
        use super::MuteState;

        /// Unused.
        pub const MUTE_STATE_UNSPECIFIED: MuteState = MuteState::new("MUTE_STATE_UNSPECIFIED");

        /// Matching findings will be muted (default).
        pub const MUTED: MuteState = MuteState::new("MUTED");

        /// Matching findings will have their mute state cleared.
        pub const UNDEFINED: MuteState = MuteState::new("UNDEFINED");
    }

    impl std::convert::From<std::string::String> for MuteState {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// The response to a BulkMute request. Contains the LRO information.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BulkMuteFindingsResponse {}

impl BulkMuteFindingsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }
}

impl wkt::message::Message for BulkMuteFindingsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.BulkMuteFindingsResponse"
    }
}

/// Request message for creating a BigQuery export.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateBigQueryExportRequest {
    /// Required. The name of the parent resource of the new BigQuery export. Its
    /// format is `organizations/[organization_id]/locations/[location_id]`,
    /// `folders/[folder_id]/locations/[location_id]`, or
    /// `projects/[project_id]/locations/[location_id]`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The BigQuery export being created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub big_query_export: std::option::Option<crate::model::BigQueryExport>,

    /// Required. Unique identifier provided by the client within the parent scope.
    /// It must consist of only lowercase letters, numbers, and hyphens, must start
    /// with a letter, must end with either a letter or a number, and must be 63
    /// characters or less.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub big_query_export_id: std::string::String,
}

impl CreateBigQueryExportRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateBigQueryExportRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [big_query_export][crate::model::CreateBigQueryExportRequest::big_query_export].
    pub fn set_big_query_export<
        T: std::convert::Into<std::option::Option<crate::model::BigQueryExport>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.big_query_export = v.into();
        self
    }

    /// Sets the value of [big_query_export_id][crate::model::CreateBigQueryExportRequest::big_query_export_id].
    pub fn set_big_query_export_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.big_query_export_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateBigQueryExportRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.CreateBigQueryExportRequest"
    }
}

/// Request message for creating a finding.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateFindingRequest {
    /// Required. Resource name of the new finding's parent. The following list
    /// shows some examples of the format:
    /// +
    /// `organizations/[organization_id]/sources/[source_id]`
    /// +
    /// `organizations/[organization_id]/sources/[source_id]/locations/[location_id]`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Unique identifier provided by the client within the parent scope.
    /// It must be alphanumeric and less than or equal to 32 characters and
    /// greater than 0 characters in length.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub finding_id: std::string::String,

    /// Required. The Finding being created. The name and security_marks will be
    /// ignored as they are both output only fields on this resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub finding: std::option::Option<crate::model::Finding>,
}

impl CreateFindingRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateFindingRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [finding_id][crate::model::CreateFindingRequest::finding_id].
    pub fn set_finding_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.finding_id = v.into();
        self
    }

    /// Sets the value of [finding][crate::model::CreateFindingRequest::finding].
    pub fn set_finding<T: std::convert::Into<std::option::Option<crate::model::Finding>>>(
        mut self,
        v: T,
    ) -> Self {
        self.finding = v.into();
        self
    }
}

impl wkt::message::Message for CreateFindingRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.CreateFindingRequest"
    }
}

/// Request message for creating a mute config.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateMuteConfigRequest {
    /// Required. Resource name of the new mute configs's parent. Its format is
    /// `organizations/[organization_id]/locations/[location_id]`,
    /// `folders/[folder_id]/locations/[location_id]`, or
    /// `projects/[project_id]/locations/[location_id]`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The mute config being created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub mute_config: std::option::Option<crate::model::MuteConfig>,

    /// Required. Unique identifier provided by the client within the parent scope.
    /// It must consist of only lowercase letters, numbers, and hyphens, must start
    /// with a letter, must end with either a letter or a number, and must be 63
    /// characters or less.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub mute_config_id: std::string::String,
}

impl CreateMuteConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateMuteConfigRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [mute_config][crate::model::CreateMuteConfigRequest::mute_config].
    pub fn set_mute_config<T: std::convert::Into<std::option::Option<crate::model::MuteConfig>>>(
        mut self,
        v: T,
    ) -> Self {
        self.mute_config = v.into();
        self
    }

    /// Sets the value of [mute_config_id][crate::model::CreateMuteConfigRequest::mute_config_id].
    pub fn set_mute_config_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.mute_config_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateMuteConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.CreateMuteConfigRequest"
    }
}

/// Request message for creating a notification config.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateNotificationConfigRequest {
    /// Required. Resource name of the new notification config's parent. Its format
    /// is `organizations/[organization_id]/locations/[location_id]`,
    /// `folders/[folder_id]/locations/[location_id]`, or
    /// `projects/[project_id]/locations/[location_id]`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required.
    /// Unique identifier provided by the client within the parent scope.
    /// It must be between 1 and 128 characters and contain alphanumeric
    /// characters, underscores, or hyphens only.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub config_id: std::string::String,

    /// Required. The notification config being created. The name and the service
    /// account will be ignored as they are both output only fields on this
    /// resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub notification_config: std::option::Option<crate::model::NotificationConfig>,
}

impl CreateNotificationConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateNotificationConfigRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [config_id][crate::model::CreateNotificationConfigRequest::config_id].
    pub fn set_config_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.config_id = v.into();
        self
    }

    /// Sets the value of [notification_config][crate::model::CreateNotificationConfigRequest::notification_config].
    pub fn set_notification_config<
        T: std::convert::Into<std::option::Option<crate::model::NotificationConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.notification_config = v.into();
        self
    }
}

impl wkt::message::Message for CreateNotificationConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.CreateNotificationConfigRequest"
    }
}

/// Request message to create single resource value config
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateResourceValueConfigRequest {
    /// Required. Resource name of the new ResourceValueConfig's parent.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The resource value config being created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub resource_value_config: std::option::Option<crate::model::ResourceValueConfig>,
}

impl CreateResourceValueConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateResourceValueConfigRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [resource_value_config][crate::model::CreateResourceValueConfigRequest::resource_value_config].
    pub fn set_resource_value_config<
        T: std::convert::Into<std::option::Option<crate::model::ResourceValueConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_value_config = v.into();
        self
    }
}

impl wkt::message::Message for CreateResourceValueConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.CreateResourceValueConfigRequest"
    }
}

/// Request message for creating a source.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateSourceRequest {
    /// Required. Resource name of the new source's parent. Its format should be
    /// `organizations/[organization_id]`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The Source being created, only the display_name and description
    /// will be used. All other fields will be ignored.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub source: std::option::Option<crate::model::Source>,
}

impl CreateSourceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateSourceRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [source][crate::model::CreateSourceRequest::source].
    pub fn set_source<T: std::convert::Into<std::option::Option<crate::model::Source>>>(
        mut self,
        v: T,
    ) -> Self {
        self.source = v.into();
        self
    }
}

impl wkt::message::Message for CreateSourceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.CreateSourceRequest"
    }
}

/// Request message for deleting a BigQuery export.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteBigQueryExportRequest {
    /// Required. The name of the BigQuery export to delete. The following list
    /// shows some examples of the format:
    ///
    ///
    /// `organizations/{organization}/locations/{location}/bigQueryExports/{export_id}`
    ///
    /// + `folders/{folder}/locations/{location}/bigQueryExports/{export_id}`
    /// + `projects/{project}/locations/{location}/bigQueryExports/{export_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteBigQueryExportRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteBigQueryExportRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteBigQueryExportRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.DeleteBigQueryExportRequest"
    }
}

/// Request message for deleting a mute config. If no location is specified,
/// default is global.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteMuteConfigRequest {
    /// Required. Name of the mute config to delete. The following list shows some
    /// examples of the format:
    ///
    /// + `organizations/{organization}/muteConfigs/{config_id}`
    ///
    /// `organizations/{organization}/locations/{location}/muteConfigs/{config_id}`
    ///
    /// + `folders/{folder}/muteConfigs/{config_id}`
    /// + `folders/{folder}/locations/{location}/muteConfigs/{config_id}`
    /// + `projects/{project}/muteConfigs/{config_id}`
    /// + `projects/{project}/locations/{location}/muteConfigs/{config_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteMuteConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteMuteConfigRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteMuteConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.DeleteMuteConfigRequest"
    }
}

/// Request message for deleting a notification config.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteNotificationConfigRequest {
    /// Required. Name of the notification config to delete. The following list
    /// shows some examples of the format:
    ///
    ///
    /// `organizations/[organization_id]/locations/[location_id]/notificationConfigs/[config_id]`
    /// +
    /// `folders/[folder_id]/locations/[location_id]notificationConfigs/[config_id]`
    /// +
    /// `projects/[project_id]/locations/[location_id]notificationConfigs/[config_id]`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteNotificationConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteNotificationConfigRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteNotificationConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.DeleteNotificationConfigRequest"
    }
}

/// Request message to delete resource value config
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteResourceValueConfigRequest {
    /// Required. Name of the ResourceValueConfig to delete
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteResourceValueConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteResourceValueConfigRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteResourceValueConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.DeleteResourceValueConfigRequest"
    }
}

/// Request message for retrieving a BigQuery export.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetBigQueryExportRequest {
    /// Required. Name of the BigQuery export to retrieve. The following list shows
    /// some examples of the format:
    ///
    ///
    /// `organizations/{organization}/locations/{location}/bigQueryExports/{export_id}`
    ///
    /// + `folders/{folder}/locations/{location}/bigQueryExports/{export_id}`
    /// + `projects/{project}locations/{location}//bigQueryExports/{export_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetBigQueryExportRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetBigQueryExportRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetBigQueryExportRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.GetBigQueryExportRequest"
    }
}

/// Request message for retrieving a mute config. If no location is specified,
/// default is global.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetMuteConfigRequest {
    /// Required. Name of the mute config to retrieve. The following list shows
    /// some examples of the format:
    ///
    /// + `organizations/{organization}/muteConfigs/{config_id}`
    ///
    /// `organizations/{organization}/locations/{location}/muteConfigs/{config_id}`
    ///
    /// + `folders/{folder}/muteConfigs/{config_id}`
    /// + `folders/{folder}/locations/{location}/muteConfigs/{config_id}`
    /// + `projects/{project}/muteConfigs/{config_id}`
    /// + `projects/{project}/locations/{location}/muteConfigs/{config_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetMuteConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetMuteConfigRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetMuteConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.GetMuteConfigRequest"
    }
}

/// Request message for getting a notification config.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetNotificationConfigRequest {
    /// Required. Name of the notification config to get. The following list shows
    /// some examples of the format:
    ///
    ///
    /// `organizations/[organization_id]/locations/[location_id]/notificationConfigs/[config_id]`
    /// +
    /// `folders/[folder_id]/locations/[location_id]/notificationConfigs/[config_id]`
    /// +
    /// `projects/[project_id]/locations/[location_id]/notificationConfigs/[config_id]`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetNotificationConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetNotificationConfigRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetNotificationConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.GetNotificationConfigRequest"
    }
}

/// Request message to get resource value config
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetResourceValueConfigRequest {
    /// Required. Name of the resource value config to retrieve. Its format is
    /// organizations/{organization}/resourceValueConfigs/{config_id}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetResourceValueConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetResourceValueConfigRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetResourceValueConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.GetResourceValueConfigRequest"
    }
}

/// Request message for getting a source.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetSourceRequest {
    /// Required. Relative resource name of the source. Its format is
    /// `organizations/[organization_id]/source/[source_id]`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetSourceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetSourceRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetSourceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.GetSourceRequest"
    }
}

/// Request message for grouping by findings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GroupFindingsRequest {
    /// Required. Name of the source to groupBy. If no location is specified,
    /// finding is assumed to be in global.
    /// The following list shows some examples:
    ///
    /// + `organizations/[organization_id]/sources/[source_id]`
    ///
    /// `organizations/[organization_id]/sources/[source_id]/locations/[location_id]`
    ///
    /// + `folders/[folder_id]/sources/[source_id]`
    /// + `folders/[folder_id]/sources/[source_id]/locations/[location_id]`
    /// + `projects/[project_id]/sources/[source_id]`
    /// + `projects/[project_id]/sources/[source_id]/locations/[location_id]`
    ///
    /// To groupBy across all sources provide a source_id of `-`. The following
    /// list shows some examples:
    ///
    /// + `organizations/{organization_id}/sources/-`
    /// + `organizations/{organization_id}/sources/-/locations/[location_id]`
    /// + `folders/{folder_id}/sources/-`
    /// + `folders/{folder_id}/sources/-/locations/[location_id]`
    /// + `projects/{project_id}/sources/-`
    /// + `projects/{project_id}/sources/-/locations/[location_id]`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Expression that defines the filter to apply across findings.
    /// The expression is a list of one or more restrictions combined via logical
    /// operators `AND` and `OR`.
    /// Parentheses are supported, and `OR` has higher precedence than `AND`.
    ///
    /// Restrictions have the form `<field> <operator> <value>` and may have a `-`
    /// character in front of them to indicate negation. Examples include:
    ///
    /// * name
    /// * security_marks.marks.marka
    ///
    /// The supported operators are:
    ///
    /// * `=` for all value types.
    /// * `>`, `<`, `>=`, `<=` for integer values.
    /// * `:`, meaning substring matching, for strings.
    ///
    /// The supported value types are:
    ///
    /// * string literals in quotes.
    /// * integer literals without quotes.
    /// * boolean literals `true` and `false` without quotes.
    ///
    /// The following field and operator combinations are supported:
    ///
    /// * name: `=`
    ///
    /// * parent: `=`, `:`
    ///
    /// * resource_name: `=`, `:`
    ///
    /// * state: `=`, `:`
    ///
    /// * category: `=`, `:`
    ///
    /// * external_uri: `=`, `:`
    ///
    /// * event_time: `=`, `>`, `<`, `>=`, `<=`
    ///
    /// * Usage: This should be milliseconds since epoch or an RFC3339 string.
    ///   Examples:
    ///   `event_time = "2019-06-10T16:07:18-07:00"`
    ///   `event_time = 1560208038000`
    ///
    /// * severity: `=`, `:`
    ///
    /// * security_marks.marks: `=`, `:`
    ///
    /// * resource:
    ///
    ///   * resource.name: `=`, `:`
    ///   * resource.parent_name: `=`, `:`
    ///   * resource.parent_display_name: `=`, `:`
    ///   * resource.project_name: `=`, `:`
    ///   * resource.project_display_name: `=`, `:`
    ///   * resource.type: `=`, `:`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Required. Expression that defines what assets fields to use for grouping.
    /// The string value should follow SQL syntax: comma separated list of fields.
    /// For example: "parent,resource_name".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub group_by: std::string::String,

    /// The value returned by the last `GroupFindingsResponse`; indicates
    /// that this is a continuation of a prior `GroupFindings` call, and
    /// that the system should return the next page of data.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// The maximum number of results to return in a single response. Default is
    /// 10, minimum is 1, maximum is 1000.
    pub page_size: i32,
}

impl GroupFindingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::GroupFindingsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::GroupFindingsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [group_by][crate::model::GroupFindingsRequest::group_by].
    pub fn set_group_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.group_by = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::GroupFindingsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::GroupFindingsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }
}

impl wkt::message::Message for GroupFindingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.GroupFindingsRequest"
    }
}

/// Response message for group by findings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GroupFindingsResponse {
    /// Group results. There exists an element for each existing unique
    /// combination of property/values. The element contains a count for the number
    /// of times those specific property/values appear.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub group_by_results: std::vec::Vec<crate::model::GroupResult>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// The total number of results matching the query.
    pub total_size: i32,
}

impl GroupFindingsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::GroupFindingsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [total_size][crate::model::GroupFindingsResponse::total_size].
    pub fn set_total_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.total_size = v.into();
        self
    }

    /// Sets the value of [group_by_results][crate::model::GroupFindingsResponse::group_by_results].
    pub fn set_group_by_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::GroupResult>,
    {
        use std::iter::Iterator;
        self.group_by_results = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for GroupFindingsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.GroupFindingsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for GroupFindingsResponse {
    type PageItem = crate::model::GroupResult;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.group_by_results
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Result containing the properties and count of a groupBy request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GroupResult {
    /// Properties matching the groupBy fields in the request.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub properties: std::collections::HashMap<std::string::String, wkt::Value>,

    /// Total count of resources for the given properties.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub count: i64,
}

impl GroupResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [count][crate::model::GroupResult::count].
    pub fn set_count<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.count = v.into();
        self
    }

    /// Sets the value of [properties][crate::model::GroupResult::properties].
    pub fn set_properties<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<wkt::Value>,
    {
        use std::iter::Iterator;
        self.properties = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for GroupResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.GroupResult"
    }
}

/// Request message for listing the attack paths for a given simulation or valued
/// resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListAttackPathsRequest {
    /// Required. Name of parent to list attack paths.
    ///
    /// Valid formats:
    /// `organizations/{organization}`,
    /// `organizations/{organization}/simulations/{simulation}`
    /// `organizations/{organization}/simulations/{simulation}/attackExposureResults/{attack_exposure_result_v2}`
    /// `organizations/{organization}/simulations/{simulation}/valuedResources/{valued_resource}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The filter expression that filters the attack path in the response.
    /// Supported fields:
    ///
    /// * `valued_resources` supports =
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// The value returned by the last `ListAttackPathsResponse`; indicates
    /// that this is a continuation of a prior `ListAttackPaths` call, and
    /// that the system should return the next page of data.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// The maximum number of results to return in a single response. Default is
    /// 10, minimum is 1, maximum is 1000.
    pub page_size: i32,
}

impl ListAttackPathsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListAttackPathsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListAttackPathsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListAttackPathsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListAttackPathsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }
}

impl wkt::message::Message for ListAttackPathsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ListAttackPathsRequest"
    }
}

/// Response message for listing the attack paths for a given simulation or
/// valued resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListAttackPathsResponse {
    /// The attack paths that the attack path simulation identified.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub attack_paths: std::vec::Vec<crate::model::AttackPath>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListAttackPathsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListAttackPathsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [attack_paths][crate::model::ListAttackPathsResponse::attack_paths].
    pub fn set_attack_paths<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::AttackPath>,
    {
        use std::iter::Iterator;
        self.attack_paths = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListAttackPathsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ListAttackPathsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListAttackPathsResponse {
    type PageItem = crate::model::AttackPath;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.attack_paths
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for getting simulation.
/// Simulation name can include "latest" to retrieve the latest simulation
/// For example, "organizations/123/simulations/latest"
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetSimulationRequest {
    /// Required. The organization name or simulation name of this simulation
    ///
    /// Valid format:
    /// `organizations/{organization}/simulations/latest`
    /// `organizations/{organization}/simulations/{simulation}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetSimulationRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetSimulationRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetSimulationRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.GetSimulationRequest"
    }
}

/// Request message for getting a valued resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetValuedResourceRequest {
    /// Required. The name of this valued resource
    ///
    /// Valid format:
    /// `organizations/{organization}/simulations/{simulation}/valuedResources/{valued_resource}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetValuedResourceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetValuedResourceRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetValuedResourceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.GetValuedResourceRequest"
    }
}

/// Request message for listing BigQuery exports at a given scope e.g.
/// organization, folder or project.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListBigQueryExportsRequest {
    /// Required. The parent, which owns the collection of BigQuery exports. Its
    /// format is `organizations/[organization_id]/locations/[location_id]`,
    /// `folders/[folder_id]/locations/[location_id]`, or
    /// `projects/[project_id]/locations/[location_id]`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of configs to return. The service may return fewer than
    /// this value.
    /// If unspecified, at most 10 configs will be returned.
    /// The maximum value is 1000; values above 1000 will be coerced to 1000.
    pub page_size: i32,

    /// A page token, received from a previous `ListBigQueryExports` call.
    /// Provide this to retrieve the subsequent page.
    /// When paginating, all other parameters provided to `ListBigQueryExports`
    /// must match the call that provided the page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListBigQueryExportsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListBigQueryExportsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListBigQueryExportsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListBigQueryExportsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListBigQueryExportsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ListBigQueryExportsRequest"
    }
}

/// Response message for listing BigQuery exports.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListBigQueryExportsResponse {
    /// The BigQuery exports from the specified parent.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub big_query_exports: std::vec::Vec<crate::model::BigQueryExport>,

    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListBigQueryExportsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListBigQueryExportsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [big_query_exports][crate::model::ListBigQueryExportsResponse::big_query_exports].
    pub fn set_big_query_exports<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::BigQueryExport>,
    {
        use std::iter::Iterator;
        self.big_query_exports = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListBigQueryExportsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ListBigQueryExportsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListBigQueryExportsResponse {
    type PageItem = crate::model::BigQueryExport;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.big_query_exports
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for listing findings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListFindingsRequest {
    /// Required. Name of the source the findings belong to. If no location is
    /// specified, the default is global. The following list shows some examples:
    ///
    /// + `organizations/[organization_id]/sources/[source_id]`
    ///
    /// `organizations/[organization_id]/sources/[source_id]/locations/[location_id]`
    ///
    /// + `folders/[folder_id]/sources/[source_id]`
    /// + `folders/[folder_id]/sources/[source_id]/locations/[location_id]`
    /// + `projects/[project_id]/sources/[source_id]`
    /// + `projects/[project_id]/sources/[source_id]/locations/[location_id]`
    ///
    /// To list across all sources provide a source_id of `-`. The following
    /// list shows some examples:
    ///
    /// + `organizations/{organization_id}/sources/-`
    /// + `organizations/{organization_id}/sources/-/locations/{location_id}`
    /// + `folders/{folder_id}/sources/-`
    /// + `folders/{folder_id}/sources/-locations/{location_id}`
    /// + `projects/{projects_id}/sources/-`
    /// + `projects/{projects_id}/sources/-/locations/{location_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Expression that defines the filter to apply across findings.
    /// The expression is a list of one or more restrictions combined via logical
    /// operators `AND` and `OR`.
    /// Parentheses are supported, and `OR` has higher precedence than `AND`.
    ///
    /// Restrictions have the form `<field> <operator> <value>` and may have a `-`
    /// character in front of them to indicate negation. Examples include:
    ///
    /// * name
    /// * security_marks.marks.marka
    ///
    /// The supported operators are:
    ///
    /// * `=` for all value types.
    /// * `>`, `<`, `>=`, `<=` for integer values.
    /// * `:`, meaning substring matching, for strings.
    ///
    /// The supported value types are:
    ///
    /// * string literals in quotes.
    /// * integer literals without quotes.
    /// * boolean literals `true` and `false` without quotes.
    ///
    /// The following field and operator combinations are supported:
    ///
    /// * name: `=`
    ///
    /// * parent: `=`, `:`
    ///
    /// * resource_name: `=`, `:`
    ///
    /// * state: `=`, `:`
    ///
    /// * category: `=`, `:`
    ///
    /// * external_uri: `=`, `:`
    ///
    /// * event_time: `=`, `>`, `<`, `>=`, `<=`
    ///
    /// * Usage: This should be milliseconds since epoch or an RFC3339 string.
    ///   Examples:
    ///   `event_time = "2019-06-10T16:07:18-07:00"`
    ///   `event_time = 1560208038000`
    ///
    /// * severity: `=`, `:`
    ///
    /// * security_marks.marks: `=`, `:`
    ///
    /// * resource:
    ///
    ///   * resource.name: `=`, `:`
    ///   * resource.parent_name: `=`, `:`
    ///   * resource.parent_display_name: `=`, `:`
    ///   * resource.project_name: `=`, `:`
    ///   * resource.project_display_name: `=`, `:`
    ///   * resource.type: `=`, `:`
    ///   * resource.folders.resource_folder: `=`, `:`
    ///   * resource.display_name: `=`, `:`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Expression that defines what fields and order to use for sorting. The
    /// string value should follow SQL syntax: comma separated list of fields. For
    /// example: "name,parent". The default sorting order
    /// is ascending. To specify descending order for a field, a suffix " desc"
    /// should be appended to the field name. For example: "name
    /// desc,parent". Redundant space characters in the
    /// syntax are insignificant. "name desc,parent" and "
    /// name     desc  ,   parent  " are equivalent.
    ///
    /// The following fields are supported:
    /// name
    /// parent
    /// state
    /// category
    /// resource_name
    /// event_time
    /// security_marks.marks
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    /// A field mask to specify the Finding fields to be listed in the response.
    /// An empty field mask will list all fields.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub field_mask: std::option::Option<wkt::FieldMask>,

    /// The value returned by the last `ListFindingsResponse`; indicates
    /// that this is a continuation of a prior `ListFindings` call, and
    /// that the system should return the next page of data.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// The maximum number of results to return in a single response. Default is
    /// 10, minimum is 1, maximum is 1000.
    pub page_size: i32,
}

impl ListFindingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListFindingsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListFindingsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListFindingsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }

    /// Sets the value of [field_mask][crate::model::ListFindingsRequest::field_mask].
    pub fn set_field_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.field_mask = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListFindingsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListFindingsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }
}

impl wkt::message::Message for ListFindingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ListFindingsRequest"
    }
}

/// Response message for listing findings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListFindingsResponse {
    /// Findings matching the list request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub list_findings_results:
        std::vec::Vec<crate::model::list_findings_response::ListFindingsResult>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// The total number of findings matching the query.
    pub total_size: i32,
}

impl ListFindingsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListFindingsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [total_size][crate::model::ListFindingsResponse::total_size].
    pub fn set_total_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.total_size = v.into();
        self
    }

    /// Sets the value of [list_findings_results][crate::model::ListFindingsResponse::list_findings_results].
    pub fn set_list_findings_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::list_findings_response::ListFindingsResult>,
    {
        use std::iter::Iterator;
        self.list_findings_results = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListFindingsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ListFindingsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListFindingsResponse {
    type PageItem = crate::model::list_findings_response::ListFindingsResult;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.list_findings_results
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Defines additional types related to ListFindingsResponse
pub mod list_findings_response {
    #[allow(unused_imports)]
    use super::*;

    /// Result containing the Finding.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ListFindingsResult {
        /// Finding matching the search request.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub finding: std::option::Option<crate::model::Finding>,

        /// Output only. Resource that is associated with this finding.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub resource: std::option::Option<
            crate::model::list_findings_response::list_findings_result::Resource,
        >,
    }

    impl ListFindingsResult {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [finding][crate::model::list_findings_response::ListFindingsResult::finding].
        pub fn set_finding<T: std::convert::Into<std::option::Option<crate::model::Finding>>>(
            mut self,
            v: T,
        ) -> Self {
            self.finding = v.into();
            self
        }

        /// Sets the value of [resource][crate::model::list_findings_response::ListFindingsResult::resource].
        pub fn set_resource<
            T: std::convert::Into<
                std::option::Option<
                    crate::model::list_findings_response::list_findings_result::Resource,
                >,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.resource = v.into();
            self
        }
    }

    impl wkt::message::Message for ListFindingsResult {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.securitycenter.v2.ListFindingsResponse.ListFindingsResult"
        }
    }

    /// Defines additional types related to ListFindingsResult
    pub mod list_findings_result {
        #[allow(unused_imports)]
        use super::*;

        /// Information related to the Google Cloud resource that is
        /// associated with this finding.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Resource {

            /// The full resource name of the resource. See:
            /// <https://cloud.google.com/apis/design/resource_names#full_resource_name>
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub name: std::string::String,

            /// The human readable name of the resource.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub display_name: std::string::String,

            /// The full resource type of the resource.
            #[serde(rename = "type")]
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub r#type: std::string::String,

            /// Indicates which cloud provider the finding is from.
            pub cloud_provider: crate::model::CloudProvider,

            /// The service or resource provider associated with the resource.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub service: std::string::String,

            /// The region or location of the service (if applicable).
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub location: std::string::String,

            /// Provides the path to the resource within the resource hierarchy.
            #[serde(skip_serializing_if = "std::option::Option::is_none")]
            pub resource_path: std::option::Option<crate::model::ResourcePath>,

            /// A string representation of the resource path.
            /// For Google Cloud, it has the format of
            /// `organizations/{organization_id}/folders/{folder_id}/folders/{folder_id}/projects/{project_id}`
            /// where there can be any number of folders.
            /// For AWS, it has the format of
            /// `org/{organization_id}/ou/{organizational_unit_id}/ou/{organizational_unit_id}/account/{account_id}`
            /// where there can be any number of organizational units.
            /// For Azure, it has the format of
            /// `mg/{management_group_id}/mg/{management_group_id}/subscription/{subscription_id}/rg/{resource_group_name}`
            /// where there can be any number of management groups.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub resource_path_string: std::string::String,

            #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
            pub cloud_provider_metadata: std::option::Option<crate::model::list_findings_response::list_findings_result::resource::CloudProviderMetadata>,
        }

        impl Resource {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [name][crate::model::list_findings_response::list_findings_result::Resource::name].
            pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.name = v.into();
                self
            }

            /// Sets the value of [display_name][crate::model::list_findings_response::list_findings_result::Resource::display_name].
            pub fn set_display_name<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.display_name = v.into();
                self
            }

            /// Sets the value of [r#type][crate::model::list_findings_response::list_findings_result::Resource::type].
            pub fn set_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.r#type = v.into();
                self
            }

            /// Sets the value of [cloud_provider][crate::model::list_findings_response::list_findings_result::Resource::cloud_provider].
            pub fn set_cloud_provider<T: std::convert::Into<crate::model::CloudProvider>>(
                mut self,
                v: T,
            ) -> Self {
                self.cloud_provider = v.into();
                self
            }

            /// Sets the value of [service][crate::model::list_findings_response::list_findings_result::Resource::service].
            pub fn set_service<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.service = v.into();
                self
            }

            /// Sets the value of [location][crate::model::list_findings_response::list_findings_result::Resource::location].
            pub fn set_location<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.location = v.into();
                self
            }

            /// Sets the value of [resource_path][crate::model::list_findings_response::list_findings_result::Resource::resource_path].
            pub fn set_resource_path<
                T: std::convert::Into<std::option::Option<crate::model::ResourcePath>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.resource_path = v.into();
                self
            }

            /// Sets the value of [resource_path_string][crate::model::list_findings_response::list_findings_result::Resource::resource_path_string].
            pub fn set_resource_path_string<T: std::convert::Into<std::string::String>>(
                mut self,
                v: T,
            ) -> Self {
                self.resource_path_string = v.into();
                self
            }

            /// Sets the value of `cloud_provider_metadata`.
            pub fn set_cloud_provider_metadata<T: std::convert::Into<std::option::Option<crate::model::list_findings_response::list_findings_result::resource::CloudProviderMetadata>>>(mut self, v: T) -> Self
            {
                self.cloud_provider_metadata = v.into();
                self
            }

            /// The value of [cloud_provider_metadata][crate::model::list_findings_response::list_findings_result::Resource::cloud_provider_metadata]
            /// if it holds a `GcpMetadata`, `None` if the field is not set or
            /// holds a different branch.
            pub fn get_gcp_metadata(
                &self,
            ) -> std::option::Option<&std::boxed::Box<crate::model::GcpMetadata>> {
                #[allow(unreachable_patterns)]
                self.cloud_provider_metadata.as_ref().and_then(|v| match v {
                    crate::model::list_findings_response::list_findings_result::resource::CloudProviderMetadata::GcpMetadata(v) => std::option::Option::Some(v),
                    _ => std::option::Option::None,
                })
            }

            /// The value of [cloud_provider_metadata][crate::model::list_findings_response::list_findings_result::Resource::cloud_provider_metadata]
            /// if it holds a `AwsMetadata`, `None` if the field is not set or
            /// holds a different branch.
            pub fn get_aws_metadata(
                &self,
            ) -> std::option::Option<&std::boxed::Box<crate::model::AwsMetadata>> {
                #[allow(unreachable_patterns)]
                self.cloud_provider_metadata.as_ref().and_then(|v| match v {
                    crate::model::list_findings_response::list_findings_result::resource::CloudProviderMetadata::AwsMetadata(v) => std::option::Option::Some(v),
                    _ => std::option::Option::None,
                })
            }

            /// The value of [cloud_provider_metadata][crate::model::list_findings_response::list_findings_result::Resource::cloud_provider_metadata]
            /// if it holds a `AzureMetadata`, `None` if the field is not set or
            /// holds a different branch.
            pub fn get_azure_metadata(
                &self,
            ) -> std::option::Option<&std::boxed::Box<crate::model::AzureMetadata>> {
                #[allow(unreachable_patterns)]
                self.cloud_provider_metadata.as_ref().and_then(|v| match v {
                    crate::model::list_findings_response::list_findings_result::resource::CloudProviderMetadata::AzureMetadata(v) => std::option::Option::Some(v),
                    _ => std::option::Option::None,
                })
            }

            /// Sets the value of [cloud_provider_metadata][crate::model::list_findings_response::list_findings_result::Resource::cloud_provider_metadata]
            /// to hold a `GcpMetadata`.
            ///
            /// Note that all the setters affecting `cloud_provider_metadata` are
            /// mutually exclusive.
            pub fn set_gcp_metadata<
                T: std::convert::Into<std::boxed::Box<crate::model::GcpMetadata>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.cloud_provider_metadata = std::option::Option::Some(
                    crate::model::list_findings_response::list_findings_result::resource::CloudProviderMetadata::GcpMetadata(
                        v.into()
                    )
                );
                self
            }

            /// Sets the value of [cloud_provider_metadata][crate::model::list_findings_response::list_findings_result::Resource::cloud_provider_metadata]
            /// to hold a `AwsMetadata`.
            ///
            /// Note that all the setters affecting `cloud_provider_metadata` are
            /// mutually exclusive.
            pub fn set_aws_metadata<
                T: std::convert::Into<std::boxed::Box<crate::model::AwsMetadata>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.cloud_provider_metadata = std::option::Option::Some(
                    crate::model::list_findings_response::list_findings_result::resource::CloudProviderMetadata::AwsMetadata(
                        v.into()
                    )
                );
                self
            }

            /// Sets the value of [cloud_provider_metadata][crate::model::list_findings_response::list_findings_result::Resource::cloud_provider_metadata]
            /// to hold a `AzureMetadata`.
            ///
            /// Note that all the setters affecting `cloud_provider_metadata` are
            /// mutually exclusive.
            pub fn set_azure_metadata<
                T: std::convert::Into<std::boxed::Box<crate::model::AzureMetadata>>,
            >(
                mut self,
                v: T,
            ) -> Self {
                self.cloud_provider_metadata = std::option::Option::Some(
                    crate::model::list_findings_response::list_findings_result::resource::CloudProviderMetadata::AzureMetadata(
                        v.into()
                    )
                );
                self
            }
        }

        impl wkt::message::Message for Resource {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.securitycenter.v2.ListFindingsResponse.ListFindingsResult.Resource"
            }
        }

        /// Defines additional types related to Resource
        pub mod resource {
            #[allow(unused_imports)]
            use super::*;

            #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
            #[serde(rename_all = "camelCase")]
            #[non_exhaustive]
            pub enum CloudProviderMetadata {
                /// The GCP metadata associated with the finding.
                GcpMetadata(std::boxed::Box<crate::model::GcpMetadata>),
                /// The AWS metadata associated with the finding.
                AwsMetadata(std::boxed::Box<crate::model::AwsMetadata>),
                /// The Azure metadata associated with the finding.
                AzureMetadata(std::boxed::Box<crate::model::AzureMetadata>),
            }
        }
    }
}

/// Request message for listing  mute configs at a given scope e.g. organization,
/// folder or project. If no location is specified, default is
/// global.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListMuteConfigsRequest {
    /// Required. The parent, which owns the collection of mute configs. Its format
    /// is `organizations/[organization_id]", "folders/[folder_id]`,
    /// `projects/[project_id]`,
    /// `organizations/[organization_id]/locations/[location_id]`,
    /// `folders/[folder_id]/locations/[location_id]`,
    /// `projects/[project_id]/locations/[location_id]`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of configs to return. The service may return fewer than
    /// this value.
    /// If unspecified, at most 10 configs will be returned.
    /// The maximum value is 1000; values above 1000 will be coerced to 1000.
    pub page_size: i32,

    /// A page token, received from a previous `ListMuteConfigs` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListMuteConfigs` must
    /// match the call that provided the page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListMuteConfigsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListMuteConfigsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListMuteConfigsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListMuteConfigsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListMuteConfigsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ListMuteConfigsRequest"
    }
}

/// Response message for listing mute configs.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListMuteConfigsResponse {
    /// The mute configs from the specified parent.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub mute_configs: std::vec::Vec<crate::model::MuteConfig>,

    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListMuteConfigsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListMuteConfigsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [mute_configs][crate::model::ListMuteConfigsResponse::mute_configs].
    pub fn set_mute_configs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::MuteConfig>,
    {
        use std::iter::Iterator;
        self.mute_configs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListMuteConfigsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ListMuteConfigsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListMuteConfigsResponse {
    type PageItem = crate::model::MuteConfig;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.mute_configs
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for listing notification configs.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListNotificationConfigsRequest {
    /// Required. The name of the parent in which to list the notification
    /// configurations. Its format is
    /// "organizations/[organization_id]/locations/[location_id]",
    /// "folders/[folder_id]/locations/[location_id]", or
    /// "projects/[project_id]/locations/[location_id]".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The value returned by the last `ListNotificationConfigsResponse`; indicates
    /// that this is a continuation of a prior `ListNotificationConfigs` call, and
    /// that the system should return the next page of data.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// The maximum number of results to return in a single response. Default is
    /// 10, minimum is 1, maximum is 1000.
    pub page_size: i32,
}

impl ListNotificationConfigsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListNotificationConfigsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListNotificationConfigsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListNotificationConfigsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }
}

impl wkt::message::Message for ListNotificationConfigsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ListNotificationConfigsRequest"
    }
}

/// Response message for listing notification configs.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListNotificationConfigsResponse {
    /// Notification configs belonging to the requested parent.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub notification_configs: std::vec::Vec<crate::model::NotificationConfig>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListNotificationConfigsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListNotificationConfigsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [notification_configs][crate::model::ListNotificationConfigsResponse::notification_configs].
    pub fn set_notification_configs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::NotificationConfig>,
    {
        use std::iter::Iterator;
        self.notification_configs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListNotificationConfigsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ListNotificationConfigsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListNotificationConfigsResponse {
    type PageItem = crate::model::NotificationConfig;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.notification_configs
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message to list resource value configs of a parent
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListResourceValueConfigsRequest {
    /// Required. The parent, which owns the collection of resource value configs.
    /// Its format is
    /// `organizations/[organization_id]`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of configs to return. The service may return fewer than
    /// this value.
    /// If unspecified, at most 10 configs will be returned.
    /// The maximum value is 1000; values above 1000 will be coerced to 1000.
    pub page_size: i32,

    /// A page token, received from a previous `ListResourceValueConfigs` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to
    /// `ListResourceValueConfigs` must match the call that provided the
    /// page token.
    ///
    /// page_size can be specified, and the new page_size will be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListResourceValueConfigsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListResourceValueConfigsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListResourceValueConfigsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListResourceValueConfigsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListResourceValueConfigsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ListResourceValueConfigsRequest"
    }
}

/// Response message to list resource value configs
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListResourceValueConfigsResponse {
    /// The resource value configs from the specified parent.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub resource_value_configs: std::vec::Vec<crate::model::ResourceValueConfig>,

    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is empty, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListResourceValueConfigsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListResourceValueConfigsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [resource_value_configs][crate::model::ListResourceValueConfigsResponse::resource_value_configs].
    pub fn set_resource_value_configs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ResourceValueConfig>,
    {
        use std::iter::Iterator;
        self.resource_value_configs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListResourceValueConfigsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ListResourceValueConfigsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListResourceValueConfigsResponse {
    type PageItem = crate::model::ResourceValueConfig;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.resource_value_configs
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for listing sources.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSourcesRequest {
    /// Required. Resource name of the parent of sources to list. Its format should
    /// be `organizations/[organization_id]`, `folders/[folder_id]`, or
    /// `projects/[project_id]`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The value returned by the last `ListSourcesResponse`; indicates
    /// that this is a continuation of a prior `ListSources` call, and
    /// that the system should return the next page of data.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// The maximum number of results to return in a single response. Default is
    /// 10, minimum is 1, maximum is 1000.
    pub page_size: i32,
}

impl ListSourcesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListSourcesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListSourcesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListSourcesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }
}

impl wkt::message::Message for ListSourcesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ListSourcesRequest"
    }
}

/// Response message for listing sources.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSourcesResponse {
    /// Sources belonging to the requested parent.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub sources: std::vec::Vec<crate::model::Source>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListSourcesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListSourcesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [sources][crate::model::ListSourcesResponse::sources].
    pub fn set_sources<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Source>,
    {
        use std::iter::Iterator;
        self.sources = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListSourcesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ListSourcesResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListSourcesResponse {
    type PageItem = crate::model::Source;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.sources
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for listing the valued resources for a given simulation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListValuedResourcesRequest {
    /// Required. Name of parent to list exposed resources.
    ///
    /// Valid formats:
    /// `organizations/{organization}`,
    /// `organizations/{organization}/simulations/{simulation}`
    /// `organizations/{organization}/simulations/{simulation}/attackExposureResults/{attack_exposure_result_v2}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The filter expression that filters the valued resources in the response.
    /// Supported fields:
    ///
    /// * `resource_value` supports =
    /// * `resource_type` supports =
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// The value returned by the last `ListValuedResourcesResponse`; indicates
    /// that this is a continuation of a prior `ListValuedResources` call, and
    /// that the system should return the next page of data.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// The maximum number of results to return in a single response. Default is
    /// 10, minimum is 1, maximum is 1000.
    pub page_size: i32,

    /// Optional. The fields by which to order the valued resources response.
    ///
    /// Supported fields:
    ///
    /// * `exposed_score`
    ///
    /// * `resource_value`
    ///
    /// * `resource_type`
    ///
    ///
    /// Values should be a comma separated list of fields. For example:
    /// `exposed_score,resource_value`.
    ///
    /// The default sorting order is descending. To specify ascending or descending
    /// order for a field, append a " ASC" or a " DESC" suffix, respectively; for
    /// example: `exposed_score DESC`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListValuedResourcesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListValuedResourcesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListValuedResourcesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListValuedResourcesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListValuedResourcesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListValuedResourcesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListValuedResourcesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ListValuedResourcesRequest"
    }
}

/// Response message for listing the valued resources for a given simulation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListValuedResourcesResponse {
    /// The valued resources that the attack path simulation identified.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub valued_resources: std::vec::Vec<crate::model::ValuedResource>,

    /// Token to retrieve the next page of results, or empty if there are no more
    /// results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// The estimated total number of results matching the query.
    pub total_size: i32,
}

impl ListValuedResourcesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListValuedResourcesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [total_size][crate::model::ListValuedResourcesResponse::total_size].
    pub fn set_total_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.total_size = v.into();
        self
    }

    /// Sets the value of [valued_resources][crate::model::ListValuedResourcesResponse::valued_resources].
    pub fn set_valued_resources<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ValuedResource>,
    {
        use std::iter::Iterator;
        self.valued_resources = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListValuedResourcesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ListValuedResourcesResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListValuedResourcesResponse {
    type PageItem = crate::model::ValuedResource;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.valued_resources
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request message for updating a finding's state.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SetFindingStateRequest {
    /// Required. The [relative resource
    /// name](https://cloud.google.com/apis/design/resource_names#relative_resource_name)
    /// of the finding. If no location is specified, finding is assumed to be in
    /// global. The following list shows some examples:
    ///
    ///
    /// `organizations/{organization_id}/sources/{source_id}/findings/{finding_id}`
    /// +
    /// `organizations/{organization_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
    ///
    /// + `folders/{folder_id}/sources/{source_id}/findings/{finding_id}`
    ///
    /// `folders/{folder_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
    ///
    /// + `projects/{project_id}/sources/{source_id}/findings/{finding_id}`
    ///
    /// `projects/{project_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The desired State of the finding.
    pub state: crate::model::finding::State,
}

impl SetFindingStateRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::SetFindingStateRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [state][crate::model::SetFindingStateRequest::state].
    pub fn set_state<T: std::convert::Into<crate::model::finding::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }
}

impl wkt::message::Message for SetFindingStateRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.SetFindingStateRequest"
    }
}

/// Request message for updating a finding's mute status.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SetMuteRequest {
    /// Required. The [relative resource
    /// name](https://cloud.google.com/apis/design/resource_names#relative_resource_name)
    /// of the finding. If no location is specified, finding is assumed to be in
    /// global. The following list shows some examples:
    ///
    ///
    /// `organizations/{organization_id}/sources/{source_id}/findings/{finding_id}`
    /// +
    /// `organizations/{organization_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
    ///
    /// + `folders/{folder_id}/sources/{source_id}/findings/{finding_id}`
    ///
    /// `folders/{folder_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
    ///
    /// + `projects/{project_id}/sources/{source_id}/findings/{finding_id}`
    ///
    /// `projects/{project_id}/sources/{source_id}/locations/{location_id}/findings/{finding_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The desired state of the Mute.
    pub mute: crate::model::finding::Mute,
}

impl SetMuteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::SetMuteRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [mute][crate::model::SetMuteRequest::mute].
    pub fn set_mute<T: std::convert::Into<crate::model::finding::Mute>>(mut self, v: T) -> Self {
        self.mute = v.into();
        self
    }
}

impl wkt::message::Message for SetMuteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.SetMuteRequest"
    }
}

/// Request message for updating a BigQuery export.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateBigQueryExportRequest {
    /// Required. The BigQuery export being updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub big_query_export: std::option::Option<crate::model::BigQueryExport>,

    /// The list of fields to be updated.
    /// If empty all mutable fields will be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateBigQueryExportRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [big_query_export][crate::model::UpdateBigQueryExportRequest::big_query_export].
    pub fn set_big_query_export<
        T: std::convert::Into<std::option::Option<crate::model::BigQueryExport>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.big_query_export = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateBigQueryExportRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateBigQueryExportRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.UpdateBigQueryExportRequest"
    }
}

/// Request message for updating a ExternalSystem resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateExternalSystemRequest {
    /// Required. The external system resource to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub external_system: std::option::Option<crate::model::ExternalSystem>,

    /// The FieldMask to use when updating the external system resource.
    ///
    /// If empty all mutable fields will be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateExternalSystemRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [external_system][crate::model::UpdateExternalSystemRequest::external_system].
    pub fn set_external_system<
        T: std::convert::Into<std::option::Option<crate::model::ExternalSystem>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.external_system = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateExternalSystemRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateExternalSystemRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.UpdateExternalSystemRequest"
    }
}

/// Request message for updating or creating a finding.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateFindingRequest {
    /// Required. The finding resource to update or create if it does not already
    /// exist. parent, security_marks, and update_time will be ignored.
    ///
    /// In the case of creation, the finding id portion of the name must be
    /// alphanumeric and less than or equal to 32 characters and greater than 0
    /// characters in length.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub finding: std::option::Option<crate::model::Finding>,

    /// The FieldMask to use when updating the finding resource. This field should
    /// not be specified when creating a finding.
    ///
    /// When updating a finding, an empty mask is treated as updating all mutable
    /// fields and replacing source_properties.  Individual source_properties can
    /// be added/updated by using "source_properties.\<property key\>" in the field
    /// mask.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateFindingRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [finding][crate::model::UpdateFindingRequest::finding].
    pub fn set_finding<T: std::convert::Into<std::option::Option<crate::model::Finding>>>(
        mut self,
        v: T,
    ) -> Self {
        self.finding = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateFindingRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateFindingRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.UpdateFindingRequest"
    }
}

/// Request message for updating a mute config.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateMuteConfigRequest {
    /// Required. The mute config being updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub mute_config: std::option::Option<crate::model::MuteConfig>,

    /// The list of fields to be updated.
    /// If empty all mutable fields will be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateMuteConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [mute_config][crate::model::UpdateMuteConfigRequest::mute_config].
    pub fn set_mute_config<T: std::convert::Into<std::option::Option<crate::model::MuteConfig>>>(
        mut self,
        v: T,
    ) -> Self {
        self.mute_config = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateMuteConfigRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateMuteConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.UpdateMuteConfigRequest"
    }
}

/// Request message for updating a notification config.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateNotificationConfigRequest {
    /// Required. The notification config to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub notification_config: std::option::Option<crate::model::NotificationConfig>,

    /// The FieldMask to use when updating the notification config.
    ///
    /// If empty all mutable fields will be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateNotificationConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [notification_config][crate::model::UpdateNotificationConfigRequest::notification_config].
    pub fn set_notification_config<
        T: std::convert::Into<std::option::Option<crate::model::NotificationConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.notification_config = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateNotificationConfigRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateNotificationConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.UpdateNotificationConfigRequest"
    }
}

/// Request message to update resource value config
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateResourceValueConfigRequest {
    /// Required. The resource value config being updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub resource_value_config: std::option::Option<crate::model::ResourceValueConfig>,

    /// The list of fields to be updated.
    /// If empty all mutable fields will be updated.
    ///
    /// To update nested fields, include the top level field in the mask
    /// For example, to update gcp_metadata.resource_type, include the
    /// "gcp_metadata" field mask
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateResourceValueConfigRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [resource_value_config][crate::model::UpdateResourceValueConfigRequest::resource_value_config].
    pub fn set_resource_value_config<
        T: std::convert::Into<std::option::Option<crate::model::ResourceValueConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_value_config = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateResourceValueConfigRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateResourceValueConfigRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.UpdateResourceValueConfigRequest"
    }
}

/// Request message for updating a SecurityMarks resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateSecurityMarksRequest {
    /// Required. The security marks resource to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub security_marks: std::option::Option<crate::model::SecurityMarks>,

    /// The FieldMask to use when updating the security marks resource.
    ///
    /// The field mask must not contain duplicate fields.
    /// If empty or set to "marks", all marks will be replaced.  Individual
    /// marks can be updated using "marks.<mark_key>".
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateSecurityMarksRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [security_marks][crate::model::UpdateSecurityMarksRequest::security_marks].
    pub fn set_security_marks<
        T: std::convert::Into<std::option::Option<crate::model::SecurityMarks>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.security_marks = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateSecurityMarksRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateSecurityMarksRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.UpdateSecurityMarksRequest"
    }
}

/// Request message for updating a source.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateSourceRequest {
    /// Required. The source resource to update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub source: std::option::Option<crate::model::Source>,

    /// The FieldMask to use when updating the source resource.
    ///
    /// If empty all mutable fields will be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateSourceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [source][crate::model::UpdateSourceRequest::source].
    pub fn set_source<T: std::convert::Into<std::option::Option<crate::model::Source>>>(
        mut self,
        v: T,
    ) -> Self {
        self.source = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateSourceRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateSourceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.UpdateSourceRequest"
    }
}

/// Attack path simulation
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Simulation {
    /// Full resource name of the Simulation:
    /// `organizations/123/simulations/456`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Time simulation was created
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Resource value configurations' metadata used in this simulation. Maximum of
    /// 100.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub resource_value_configs_metadata: std::vec::Vec<crate::model::ResourceValueConfigMetadata>,

    /// Indicates which cloud provider was used in this simulation.
    pub cloud_provider: crate::model::CloudProvider,
}

impl Simulation {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Simulation::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Simulation::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [cloud_provider][crate::model::Simulation::cloud_provider].
    pub fn set_cloud_provider<T: std::convert::Into<crate::model::CloudProvider>>(
        mut self,
        v: T,
    ) -> Self {
        self.cloud_provider = v.into();
        self
    }

    /// Sets the value of [resource_value_configs_metadata][crate::model::Simulation::resource_value_configs_metadata].
    pub fn set_resource_value_configs_metadata<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ResourceValueConfigMetadata>,
    {
        use std::iter::Iterator;
        self.resource_value_configs_metadata = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Simulation {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Simulation"
    }
}

/// Security Command Center finding source. A finding source
/// is an entity or a mechanism that can produce a finding. A source is like a
/// container of findings that come from the same scanner, logger, monitor, and
/// other tools.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Source {
    /// The relative resource name of this source. See:
    /// <https://cloud.google.com/apis/design/resource_names#relative_resource_name>
    /// Example:
    /// "organizations/{organization_id}/sources/{source_id}"
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The source's display name.
    /// A source's display name must be unique amongst its siblings, for example,
    /// two sources with the same parent can't share the same display name.
    /// The display name must have a length between 1 and 64 characters
    /// (inclusive).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// The description of the source (max of 1024 characters).
    /// Example:
    /// "Web Security Scanner is a web security scanner for common
    /// vulnerabilities in App Engine applications. It can automatically
    /// scan and detect four common vulnerabilities, including cross-site-scripting
    /// (XSS), Flash injection, mixed content (HTTP in HTTPS), and
    /// outdated or insecure libraries."
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// The canonical name of the finding source. It's either
    /// "organizations/{organization_id}/sources/{source_id}",
    /// "folders/{folder_id}/sources/{source_id}", or
    /// "projects/{project_number}/sources/{source_id}",
    /// depending on the closest CRM ancestor of the resource associated with the
    /// finding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub canonical_name: std::string::String,
}

impl Source {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Source::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Source::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Source::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [canonical_name][crate::model::Source::canonical_name].
    pub fn set_canonical_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.canonical_name = v.into();
        self
    }
}

impl wkt::message::Message for Source {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Source"
    }
}

/// Contains details about a group of security issues that, when the issues
/// occur together, represent a greater risk than when the issues occur
/// independently. A group of such issues is referred to as a toxic
/// combination.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ToxicCombination {
    /// The
    /// [Attack exposure
    /// score](https://cloud.google.com/security-command-center/docs/attack-exposure-learn#attack_exposure_scores)
    /// of this toxic combination. The score is a measure of how much this toxic
    /// combination exposes one or more high-value resources to potential attack.
    pub attack_exposure_score: f64,

    /// List of resource names of findings associated with this toxic combination.
    /// For example, `organizations/123/sources/456/findings/789`.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub related_findings: std::vec::Vec<std::string::String>,
}

impl ToxicCombination {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [attack_exposure_score][crate::model::ToxicCombination::attack_exposure_score].
    pub fn set_attack_exposure_score<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.attack_exposure_score = v.into();
        self
    }

    /// Sets the value of [related_findings][crate::model::ToxicCombination::related_findings].
    pub fn set_related_findings<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.related_findings = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ToxicCombination {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ToxicCombination"
    }
}

/// A resource that is determined to have value to a user's system
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ValuedResource {
    /// Valued resource name, for example,
    /// e.g.:
    /// `organizations/123/simulations/456/valuedResources/789`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// The
    /// [full resource
    /// name](https://cloud.google.com/apis/design/resource_names#full_resource_name)
    /// of the valued resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub resource: std::string::String,

    /// The [resource
    /// type](https://cloud.google.com/asset-inventory/docs/supported-asset-types)
    /// of the valued resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub resource_type: std::string::String,

    /// Human-readable name of the valued resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// How valuable this resource is.
    pub resource_value: crate::model::valued_resource::ResourceValue,

    /// Exposed score for this valued resource. A value of 0 means no exposure was
    /// detected exposure.
    pub exposed_score: f64,

    /// List of resource value configurations' metadata used to determine the value
    /// of this resource. Maximum of 100.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub resource_value_configs_used: std::vec::Vec<crate::model::ResourceValueConfigMetadata>,
}

impl ValuedResource {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ValuedResource::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [resource][crate::model::ValuedResource::resource].
    pub fn set_resource<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.resource = v.into();
        self
    }

    /// Sets the value of [resource_type][crate::model::ValuedResource::resource_type].
    pub fn set_resource_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.resource_type = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::ValuedResource::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [resource_value][crate::model::ValuedResource::resource_value].
    pub fn set_resource_value<
        T: std::convert::Into<crate::model::valued_resource::ResourceValue>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_value = v.into();
        self
    }

    /// Sets the value of [exposed_score][crate::model::ValuedResource::exposed_score].
    pub fn set_exposed_score<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.exposed_score = v.into();
        self
    }

    /// Sets the value of [resource_value_configs_used][crate::model::ValuedResource::resource_value_configs_used].
    pub fn set_resource_value_configs_used<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ResourceValueConfigMetadata>,
    {
        use std::iter::Iterator;
        self.resource_value_configs_used = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ValuedResource {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ValuedResource"
    }
}

/// Defines additional types related to ValuedResource
pub mod valued_resource {
    #[allow(unused_imports)]
    use super::*;

    /// How valuable the resource is.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct ResourceValue(std::borrow::Cow<'static, str>);

    impl ResourceValue {
        /// Creates a new ResourceValue instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [ResourceValue](ResourceValue)
    pub mod resource_value {
        use super::ResourceValue;

        /// The resource value isn't specified.
        pub const RESOURCE_VALUE_UNSPECIFIED: ResourceValue =
            ResourceValue::new("RESOURCE_VALUE_UNSPECIFIED");

        /// This is a low-value resource.
        pub const RESOURCE_VALUE_LOW: ResourceValue = ResourceValue::new("RESOURCE_VALUE_LOW");

        /// This is a medium-value resource.
        pub const RESOURCE_VALUE_MEDIUM: ResourceValue =
            ResourceValue::new("RESOURCE_VALUE_MEDIUM");

        /// This is a high-value resource.
        pub const RESOURCE_VALUE_HIGH: ResourceValue = ResourceValue::new("RESOURCE_VALUE_HIGH");
    }

    impl std::convert::From<std::string::String> for ResourceValue {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Metadata about a ResourceValueConfig. For example, id and name.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ResourceValueConfigMetadata {
    /// Resource value config name
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl ResourceValueConfigMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ResourceValueConfigMetadata::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for ResourceValueConfigMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.ResourceValueConfigMetadata"
    }
}

/// Refers to common vulnerability fields e.g. cve, cvss, cwe etc.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Vulnerability {
    /// CVE stands for Common Vulnerabilities and Exposures
    /// (<https://cve.mitre.org/about/>)
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cve: std::option::Option<crate::model::Cve>,

    /// The offending package is relevant to the finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub offending_package: std::option::Option<crate::model::Package>,

    /// The fixed package is relevant to the finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub fixed_package: std::option::Option<crate::model::Package>,

    /// The security bulletin is relevant to this finding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub security_bulletin: std::option::Option<crate::model::SecurityBulletin>,
}

impl Vulnerability {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [cve][crate::model::Vulnerability::cve].
    pub fn set_cve<T: std::convert::Into<std::option::Option<crate::model::Cve>>>(
        mut self,
        v: T,
    ) -> Self {
        self.cve = v.into();
        self
    }

    /// Sets the value of [offending_package][crate::model::Vulnerability::offending_package].
    pub fn set_offending_package<
        T: std::convert::Into<std::option::Option<crate::model::Package>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.offending_package = v.into();
        self
    }

    /// Sets the value of [fixed_package][crate::model::Vulnerability::fixed_package].
    pub fn set_fixed_package<T: std::convert::Into<std::option::Option<crate::model::Package>>>(
        mut self,
        v: T,
    ) -> Self {
        self.fixed_package = v.into();
        self
    }

    /// Sets the value of [security_bulletin][crate::model::Vulnerability::security_bulletin].
    pub fn set_security_bulletin<
        T: std::convert::Into<std::option::Option<crate::model::SecurityBulletin>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.security_bulletin = v.into();
        self
    }
}

impl wkt::message::Message for Vulnerability {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Vulnerability"
    }
}

/// CVE stands for Common Vulnerabilities and Exposures.
/// Information from the [CVE
/// record](https://www.cve.org/ResourcesSupport/Glossary) that describes this
/// vulnerability.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Cve {
    /// The unique identifier for the vulnerability. e.g. CVE-2021-34527
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,

    /// Additional information about the CVE.
    /// e.g. <https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-34527>
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub references: std::vec::Vec<crate::model::Reference>,

    /// Describe Common Vulnerability Scoring System specified at
    /// <https://www.first.org/cvss/v3.1/specification-document>
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cvssv3: std::option::Option<crate::model::Cvssv3>,

    /// Whether upstream fix is available for the CVE.
    pub upstream_fix_available: bool,

    /// The potential impact of the vulnerability if it was to be exploited.
    pub impact: crate::model::cve::RiskRating,

    /// The exploitation activity of the vulnerability in the wild.
    pub exploitation_activity: crate::model::cve::ExploitationActivity,

    /// Whether or not the vulnerability has been observed in the wild.
    pub observed_in_the_wild: bool,

    /// Whether or not the vulnerability was zero day when the finding was
    /// published.
    pub zero_day: bool,

    /// Date the first publicly available exploit or PoC was released.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub exploit_release_date: std::option::Option<wkt::Timestamp>,

    /// Date of the earliest known exploitation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub first_exploitation_date: std::option::Option<wkt::Timestamp>,
}

impl Cve {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [id][crate::model::Cve::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }

    /// Sets the value of [cvssv3][crate::model::Cve::cvssv3].
    pub fn set_cvssv3<T: std::convert::Into<std::option::Option<crate::model::Cvssv3>>>(
        mut self,
        v: T,
    ) -> Self {
        self.cvssv3 = v.into();
        self
    }

    /// Sets the value of [upstream_fix_available][crate::model::Cve::upstream_fix_available].
    pub fn set_upstream_fix_available<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.upstream_fix_available = v.into();
        self
    }

    /// Sets the value of [impact][crate::model::Cve::impact].
    pub fn set_impact<T: std::convert::Into<crate::model::cve::RiskRating>>(
        mut self,
        v: T,
    ) -> Self {
        self.impact = v.into();
        self
    }

    /// Sets the value of [exploitation_activity][crate::model::Cve::exploitation_activity].
    pub fn set_exploitation_activity<
        T: std::convert::Into<crate::model::cve::ExploitationActivity>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.exploitation_activity = v.into();
        self
    }

    /// Sets the value of [observed_in_the_wild][crate::model::Cve::observed_in_the_wild].
    pub fn set_observed_in_the_wild<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.observed_in_the_wild = v.into();
        self
    }

    /// Sets the value of [zero_day][crate::model::Cve::zero_day].
    pub fn set_zero_day<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.zero_day = v.into();
        self
    }

    /// Sets the value of [exploit_release_date][crate::model::Cve::exploit_release_date].
    pub fn set_exploit_release_date<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.exploit_release_date = v.into();
        self
    }

    /// Sets the value of [first_exploitation_date][crate::model::Cve::first_exploitation_date].
    pub fn set_first_exploitation_date<
        T: std::convert::Into<std::option::Option<wkt::Timestamp>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.first_exploitation_date = v.into();
        self
    }

    /// Sets the value of [references][crate::model::Cve::references].
    pub fn set_references<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Reference>,
    {
        use std::iter::Iterator;
        self.references = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Cve {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Cve"
    }
}

/// Defines additional types related to Cve
pub mod cve {
    #[allow(unused_imports)]
    use super::*;

    /// The possible values of impact of the vulnerability if it was to be
    /// exploited.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct RiskRating(std::borrow::Cow<'static, str>);

    impl RiskRating {
        /// Creates a new RiskRating instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [RiskRating](RiskRating)
    pub mod risk_rating {
        use super::RiskRating;

        /// Invalid or empty value.
        pub const RISK_RATING_UNSPECIFIED: RiskRating = RiskRating::new("RISK_RATING_UNSPECIFIED");

        /// Exploitation would have little to no security impact.
        pub const LOW: RiskRating = RiskRating::new("LOW");

        /// Exploitation would enable attackers to perform activities, or could allow
        /// attackers to have a direct impact, but would require additional steps.
        pub const MEDIUM: RiskRating = RiskRating::new("MEDIUM");

        /// Exploitation would enable attackers to have a notable direct impact
        /// without needing to overcome any major mitigating factors.
        pub const HIGH: RiskRating = RiskRating::new("HIGH");

        /// Exploitation would fundamentally undermine the security of affected
        /// systems, enable actors to perform significant attacks with minimal
        /// effort, with little to no mitigating factors to overcome.
        pub const CRITICAL: RiskRating = RiskRating::new("CRITICAL");
    }

    impl std::convert::From<std::string::String> for RiskRating {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// The possible values of exploitation activity of the vulnerability in the
    /// wild.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct ExploitationActivity(std::borrow::Cow<'static, str>);

    impl ExploitationActivity {
        /// Creates a new ExploitationActivity instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [ExploitationActivity](ExploitationActivity)
    pub mod exploitation_activity {
        use super::ExploitationActivity;

        /// Invalid or empty value.
        pub const EXPLOITATION_ACTIVITY_UNSPECIFIED: ExploitationActivity =
            ExploitationActivity::new("EXPLOITATION_ACTIVITY_UNSPECIFIED");

        /// Exploitation has been reported or confirmed to widely occur.
        pub const WIDE: ExploitationActivity = ExploitationActivity::new("WIDE");

        /// Limited reported or confirmed exploitation activities.
        pub const CONFIRMED: ExploitationActivity = ExploitationActivity::new("CONFIRMED");

        /// Exploit is publicly available.
        pub const AVAILABLE: ExploitationActivity = ExploitationActivity::new("AVAILABLE");

        /// No known exploitation activity, but has a high potential for
        /// exploitation.
        pub const ANTICIPATED: ExploitationActivity = ExploitationActivity::new("ANTICIPATED");

        /// No known exploitation activity.
        pub const NO_KNOWN: ExploitationActivity = ExploitationActivity::new("NO_KNOWN");
    }

    impl std::convert::From<std::string::String> for ExploitationActivity {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Additional Links
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Reference {
    /// Source of the reference e.g. NVD
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source: std::string::String,

    /// Uri for the mentioned source e.g.
    /// <https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-34527>.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,
}

impl Reference {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [source][crate::model::Reference::source].
    pub fn set_source<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source = v.into();
        self
    }

    /// Sets the value of [uri][crate::model::Reference::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }
}

impl wkt::message::Message for Reference {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Reference"
    }
}

/// Common Vulnerability Scoring System version 3.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Cvssv3 {
    /// The base score is a function of the base metric scores.
    pub base_score: f64,

    /// Base Metrics
    /// Represents the intrinsic characteristics of a vulnerability that are
    /// constant over time and across user environments.
    /// This metric reflects the context by which vulnerability exploitation is
    /// possible.
    pub attack_vector: crate::model::cvssv_3::AttackVector,

    /// This metric describes the conditions beyond the attacker's control that
    /// must exist in order to exploit the vulnerability.
    pub attack_complexity: crate::model::cvssv_3::AttackComplexity,

    /// This metric describes the level of privileges an attacker must possess
    /// before successfully exploiting the vulnerability.
    pub privileges_required: crate::model::cvssv_3::PrivilegesRequired,

    /// This metric captures the requirement for a human user, other than the
    /// attacker, to participate in the successful compromise of the vulnerable
    /// component.
    pub user_interaction: crate::model::cvssv_3::UserInteraction,

    /// The Scope metric captures whether a vulnerability in one vulnerable
    /// component impacts resources in components beyond its security scope.
    pub scope: crate::model::cvssv_3::Scope,

    /// This metric measures the impact to the confidentiality of the information
    /// resources managed by a software component due to a successfully exploited
    /// vulnerability.
    pub confidentiality_impact: crate::model::cvssv_3::Impact,

    /// This metric measures the impact to integrity of a successfully exploited
    /// vulnerability.
    pub integrity_impact: crate::model::cvssv_3::Impact,

    /// This metric measures the impact to the availability of the impacted
    /// component resulting from a successfully exploited vulnerability.
    pub availability_impact: crate::model::cvssv_3::Impact,
}

impl Cvssv3 {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [base_score][crate::model::Cvssv3::base_score].
    pub fn set_base_score<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.base_score = v.into();
        self
    }

    /// Sets the value of [attack_vector][crate::model::Cvssv3::attack_vector].
    pub fn set_attack_vector<T: std::convert::Into<crate::model::cvssv_3::AttackVector>>(
        mut self,
        v: T,
    ) -> Self {
        self.attack_vector = v.into();
        self
    }

    /// Sets the value of [attack_complexity][crate::model::Cvssv3::attack_complexity].
    pub fn set_attack_complexity<T: std::convert::Into<crate::model::cvssv_3::AttackComplexity>>(
        mut self,
        v: T,
    ) -> Self {
        self.attack_complexity = v.into();
        self
    }

    /// Sets the value of [privileges_required][crate::model::Cvssv3::privileges_required].
    pub fn set_privileges_required<
        T: std::convert::Into<crate::model::cvssv_3::PrivilegesRequired>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.privileges_required = v.into();
        self
    }

    /// Sets the value of [user_interaction][crate::model::Cvssv3::user_interaction].
    pub fn set_user_interaction<T: std::convert::Into<crate::model::cvssv_3::UserInteraction>>(
        mut self,
        v: T,
    ) -> Self {
        self.user_interaction = v.into();
        self
    }

    /// Sets the value of [scope][crate::model::Cvssv3::scope].
    pub fn set_scope<T: std::convert::Into<crate::model::cvssv_3::Scope>>(mut self, v: T) -> Self {
        self.scope = v.into();
        self
    }

    /// Sets the value of [confidentiality_impact][crate::model::Cvssv3::confidentiality_impact].
    pub fn set_confidentiality_impact<T: std::convert::Into<crate::model::cvssv_3::Impact>>(
        mut self,
        v: T,
    ) -> Self {
        self.confidentiality_impact = v.into();
        self
    }

    /// Sets the value of [integrity_impact][crate::model::Cvssv3::integrity_impact].
    pub fn set_integrity_impact<T: std::convert::Into<crate::model::cvssv_3::Impact>>(
        mut self,
        v: T,
    ) -> Self {
        self.integrity_impact = v.into();
        self
    }

    /// Sets the value of [availability_impact][crate::model::Cvssv3::availability_impact].
    pub fn set_availability_impact<T: std::convert::Into<crate::model::cvssv_3::Impact>>(
        mut self,
        v: T,
    ) -> Self {
        self.availability_impact = v.into();
        self
    }
}

impl wkt::message::Message for Cvssv3 {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Cvssv3"
    }
}

/// Defines additional types related to Cvssv3
pub mod cvssv_3 {
    #[allow(unused_imports)]
    use super::*;

    /// This metric reflects the context by which vulnerability exploitation is
    /// possible.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct AttackVector(std::borrow::Cow<'static, str>);

    impl AttackVector {
        /// Creates a new AttackVector instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [AttackVector](AttackVector)
    pub mod attack_vector {
        use super::AttackVector;

        /// Invalid value.
        pub const ATTACK_VECTOR_UNSPECIFIED: AttackVector =
            AttackVector::new("ATTACK_VECTOR_UNSPECIFIED");

        /// The vulnerable component is bound to the network stack and the set of
        /// possible attackers extends beyond the other options listed below, up to
        /// and including the entire Internet.
        pub const ATTACK_VECTOR_NETWORK: AttackVector = AttackVector::new("ATTACK_VECTOR_NETWORK");

        /// The vulnerable component is bound to the network stack, but the attack is
        /// limited at the protocol level to a logically adjacent topology.
        pub const ATTACK_VECTOR_ADJACENT: AttackVector =
            AttackVector::new("ATTACK_VECTOR_ADJACENT");

        /// The vulnerable component is not bound to the network stack and the
        /// attacker's path is via read/write/execute capabilities.
        pub const ATTACK_VECTOR_LOCAL: AttackVector = AttackVector::new("ATTACK_VECTOR_LOCAL");

        /// The attack requires the attacker to physically touch or manipulate the
        /// vulnerable component.
        pub const ATTACK_VECTOR_PHYSICAL: AttackVector =
            AttackVector::new("ATTACK_VECTOR_PHYSICAL");
    }

    impl std::convert::From<std::string::String> for AttackVector {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// This metric describes the conditions beyond the attacker's control that
    /// must exist in order to exploit the vulnerability.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct AttackComplexity(std::borrow::Cow<'static, str>);

    impl AttackComplexity {
        /// Creates a new AttackComplexity instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [AttackComplexity](AttackComplexity)
    pub mod attack_complexity {
        use super::AttackComplexity;

        /// Invalid value.
        pub const ATTACK_COMPLEXITY_UNSPECIFIED: AttackComplexity =
            AttackComplexity::new("ATTACK_COMPLEXITY_UNSPECIFIED");

        /// Specialized access conditions or extenuating circumstances do not exist.
        /// An attacker can expect repeatable success when attacking the vulnerable
        /// component.
        pub const ATTACK_COMPLEXITY_LOW: AttackComplexity =
            AttackComplexity::new("ATTACK_COMPLEXITY_LOW");

        /// A successful attack depends on conditions beyond the attacker's control.
        /// That is, a successful attack cannot be accomplished at will, but requires
        /// the attacker to invest in some measurable amount of effort in preparation
        /// or execution against the vulnerable component before a successful attack
        /// can be expected.
        pub const ATTACK_COMPLEXITY_HIGH: AttackComplexity =
            AttackComplexity::new("ATTACK_COMPLEXITY_HIGH");
    }

    impl std::convert::From<std::string::String> for AttackComplexity {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// This metric describes the level of privileges an attacker must possess
    /// before successfully exploiting the vulnerability.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct PrivilegesRequired(std::borrow::Cow<'static, str>);

    impl PrivilegesRequired {
        /// Creates a new PrivilegesRequired instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [PrivilegesRequired](PrivilegesRequired)
    pub mod privileges_required {
        use super::PrivilegesRequired;

        /// Invalid value.
        pub const PRIVILEGES_REQUIRED_UNSPECIFIED: PrivilegesRequired =
            PrivilegesRequired::new("PRIVILEGES_REQUIRED_UNSPECIFIED");

        /// The attacker is unauthorized prior to attack, and therefore does not
        /// require any access to settings or files of the vulnerable system to
        /// carry out an attack.
        pub const PRIVILEGES_REQUIRED_NONE: PrivilegesRequired =
            PrivilegesRequired::new("PRIVILEGES_REQUIRED_NONE");

        /// The attacker requires privileges that provide basic user capabilities
        /// that could normally affect only settings and files owned by a user.
        /// Alternatively, an attacker with Low privileges has the ability to access
        /// only non-sensitive resources.
        pub const PRIVILEGES_REQUIRED_LOW: PrivilegesRequired =
            PrivilegesRequired::new("PRIVILEGES_REQUIRED_LOW");

        /// The attacker requires privileges that provide significant (e.g.,
        /// administrative) control over the vulnerable component allowing access to
        /// component-wide settings and files.
        pub const PRIVILEGES_REQUIRED_HIGH: PrivilegesRequired =
            PrivilegesRequired::new("PRIVILEGES_REQUIRED_HIGH");
    }

    impl std::convert::From<std::string::String> for PrivilegesRequired {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// This metric captures the requirement for a human user, other than the
    /// attacker, to participate in the successful compromise of the vulnerable
    /// component.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct UserInteraction(std::borrow::Cow<'static, str>);

    impl UserInteraction {
        /// Creates a new UserInteraction instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [UserInteraction](UserInteraction)
    pub mod user_interaction {
        use super::UserInteraction;

        /// Invalid value.
        pub const USER_INTERACTION_UNSPECIFIED: UserInteraction =
            UserInteraction::new("USER_INTERACTION_UNSPECIFIED");

        /// The vulnerable system can be exploited without interaction from any user.
        pub const USER_INTERACTION_NONE: UserInteraction =
            UserInteraction::new("USER_INTERACTION_NONE");

        /// Successful exploitation of this vulnerability requires a user to take
        /// some action before the vulnerability can be exploited.
        pub const USER_INTERACTION_REQUIRED: UserInteraction =
            UserInteraction::new("USER_INTERACTION_REQUIRED");
    }

    impl std::convert::From<std::string::String> for UserInteraction {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// The Scope metric captures whether a vulnerability in one vulnerable
    /// component impacts resources in components beyond its security scope.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Scope(std::borrow::Cow<'static, str>);

    impl Scope {
        /// Creates a new Scope instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [Scope](Scope)
    pub mod scope {
        use super::Scope;

        /// Invalid value.
        pub const SCOPE_UNSPECIFIED: Scope = Scope::new("SCOPE_UNSPECIFIED");

        /// An exploited vulnerability can only affect resources managed by the same
        /// security authority.
        pub const SCOPE_UNCHANGED: Scope = Scope::new("SCOPE_UNCHANGED");

        /// An exploited vulnerability can affect resources beyond the security scope
        /// managed by the security authority of the vulnerable component.
        pub const SCOPE_CHANGED: Scope = Scope::new("SCOPE_CHANGED");
    }

    impl std::convert::From<std::string::String> for Scope {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// The Impact metrics capture the effects of a successfully exploited
    /// vulnerability on the component that suffers the worst outcome that is most
    /// directly and predictably associated with the attack.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Impact(std::borrow::Cow<'static, str>);

    impl Impact {
        /// Creates a new Impact instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [Impact](Impact)
    pub mod impact {
        use super::Impact;

        /// Invalid value.
        pub const IMPACT_UNSPECIFIED: Impact = Impact::new("IMPACT_UNSPECIFIED");

        /// High impact.
        pub const IMPACT_HIGH: Impact = Impact::new("IMPACT_HIGH");

        /// Low impact.
        pub const IMPACT_LOW: Impact = Impact::new("IMPACT_LOW");

        /// No impact.
        pub const IMPACT_NONE: Impact = Impact::new("IMPACT_NONE");
    }

    impl std::convert::From<std::string::String> for Impact {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Package is a generic definition of a package.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Package {
    /// The name of the package where the vulnerability was detected.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub package_name: std::string::String,

    /// The CPE URI where the vulnerability was detected.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub cpe_uri: std::string::String,

    /// Type of package, for example, os, maven, or go.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub package_type: std::string::String,

    /// The version of the package.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub package_version: std::string::String,
}

impl Package {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [package_name][crate::model::Package::package_name].
    pub fn set_package_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.package_name = v.into();
        self
    }

    /// Sets the value of [cpe_uri][crate::model::Package::cpe_uri].
    pub fn set_cpe_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.cpe_uri = v.into();
        self
    }

    /// Sets the value of [package_type][crate::model::Package::package_type].
    pub fn set_package_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.package_type = v.into();
        self
    }

    /// Sets the value of [package_version][crate::model::Package::package_version].
    pub fn set_package_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.package_version = v.into();
        self
    }
}

impl wkt::message::Message for Package {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.Package"
    }
}

/// SecurityBulletin are notifications of vulnerabilities of Google products.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SecurityBulletin {
    /// ID of the bulletin corresponding to the vulnerability.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub bulletin_id: std::string::String,

    /// Submission time of this Security Bulletin.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub submission_time: std::option::Option<wkt::Timestamp>,

    /// This represents a version that the cluster receiving this notification
    /// should be upgraded to, based on its current version. For example, 1.15.0
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub suggested_upgrade_version: std::string::String,
}

impl SecurityBulletin {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [bulletin_id][crate::model::SecurityBulletin::bulletin_id].
    pub fn set_bulletin_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.bulletin_id = v.into();
        self
    }

    /// Sets the value of [submission_time][crate::model::SecurityBulletin::submission_time].
    pub fn set_submission_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.submission_time = v.into();
        self
    }

    /// Sets the value of [suggested_upgrade_version][crate::model::SecurityBulletin::suggested_upgrade_version].
    pub fn set_suggested_upgrade_version<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.suggested_upgrade_version = v.into();
        self
    }
}

impl wkt::message::Message for SecurityBulletin {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.securitycenter.v2.SecurityBulletin"
    }
}

/// The cloud provider the finding pertains to.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct CloudProvider(std::borrow::Cow<'static, str>);

impl CloudProvider {
    /// Creates a new CloudProvider instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [CloudProvider](CloudProvider)
pub mod cloud_provider {
    use super::CloudProvider;

    /// The cloud provider is unspecified.
    pub const CLOUD_PROVIDER_UNSPECIFIED: CloudProvider =
        CloudProvider::new("CLOUD_PROVIDER_UNSPECIFIED");

    /// The cloud provider is Google Cloud Platform.
    pub const GOOGLE_CLOUD_PLATFORM: CloudProvider = CloudProvider::new("GOOGLE_CLOUD_PLATFORM");

    /// The cloud provider is Amazon Web Services.
    pub const AMAZON_WEB_SERVICES: CloudProvider = CloudProvider::new("AMAZON_WEB_SERVICES");

    /// The cloud provider is Microsoft Azure.
    pub const MICROSOFT_AZURE: CloudProvider = CloudProvider::new("MICROSOFT_AZURE");
}

impl std::convert::From<std::string::String> for CloudProvider {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

/// Value enum to map to a resource
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct ResourceValue(std::borrow::Cow<'static, str>);

impl ResourceValue {
    /// Creates a new ResourceValue instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [ResourceValue](ResourceValue)
pub mod resource_value {
    use super::ResourceValue;

    /// Unspecific value
    pub const RESOURCE_VALUE_UNSPECIFIED: ResourceValue =
        ResourceValue::new("RESOURCE_VALUE_UNSPECIFIED");

    /// High resource value
    pub const HIGH: ResourceValue = ResourceValue::new("HIGH");

    /// Medium resource value
    pub const MEDIUM: ResourceValue = ResourceValue::new("MEDIUM");

    /// Low resource value
    pub const LOW: ResourceValue = ResourceValue::new("LOW");

    /// No resource value, e.g. ignore these resources
    pub const NONE: ResourceValue = ResourceValue::new("NONE");
}

impl std::convert::From<std::string::String> for ResourceValue {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}
