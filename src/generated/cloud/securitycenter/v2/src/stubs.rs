// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;
use std::sync::Arc;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::SecurityCenter].
///
/// Application developers may need to implement this trait to mock
/// `client::SecurityCenter`.  In other use-cases, application developers only
/// use `client::SecurityCenter` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait SecurityCenter: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::SecurityCenter::batch_create_resource_value_configs].
    fn batch_create_resource_value_configs(
        &self,
        _req: crate::model::BatchCreateResourceValueConfigsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::BatchCreateResourceValueConfigsResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::BatchCreateResourceValueConfigsResponse>>(
            Err(Error::other("unimplemented")),
        )
    }

    /// Implements [super::client::SecurityCenter::bulk_mute_findings].
    fn bulk_mute_findings(
        &self,
        _req: crate::model::BulkMuteFindingsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::create_big_query_export].
    fn create_big_query_export(
        &self,
        _req: crate::model::CreateBigQueryExportRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BigQueryExport>> + Send {
        std::future::ready::<crate::Result<crate::model::BigQueryExport>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::create_finding].
    fn create_finding(
        &self,
        _req: crate::model::CreateFindingRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Finding>> + Send {
        std::future::ready::<crate::Result<crate::model::Finding>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::create_mute_config].
    fn create_mute_config(
        &self,
        _req: crate::model::CreateMuteConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::MuteConfig>> + Send {
        std::future::ready::<crate::Result<crate::model::MuteConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::create_notification_config].
    fn create_notification_config(
        &self,
        _req: crate::model::CreateNotificationConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::NotificationConfig>> + Send
    {
        std::future::ready::<crate::Result<crate::model::NotificationConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::create_source].
    fn create_source(
        &self,
        _req: crate::model::CreateSourceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Source>> + Send {
        std::future::ready::<crate::Result<crate::model::Source>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::delete_big_query_export].
    fn delete_big_query_export(
        &self,
        _req: crate::model::DeleteBigQueryExportRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::SecurityCenter::delete_mute_config].
    fn delete_mute_config(
        &self,
        _req: crate::model::DeleteMuteConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::SecurityCenter::delete_notification_config].
    fn delete_notification_config(
        &self,
        _req: crate::model::DeleteNotificationConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::SecurityCenter::delete_resource_value_config].
    fn delete_resource_value_config(
        &self,
        _req: crate::model::DeleteResourceValueConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::SecurityCenter::get_big_query_export].
    fn get_big_query_export(
        &self,
        _req: crate::model::GetBigQueryExportRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BigQueryExport>> + Send {
        std::future::ready::<crate::Result<crate::model::BigQueryExport>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::get_simulation].
    fn get_simulation(
        &self,
        _req: crate::model::GetSimulationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Simulation>> + Send {
        std::future::ready::<crate::Result<crate::model::Simulation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::get_valued_resource].
    fn get_valued_resource(
        &self,
        _req: crate::model::GetValuedResourceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ValuedResource>> + Send {
        std::future::ready::<crate::Result<crate::model::ValuedResource>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::get_iam_policy].
    fn get_iam_policy(
        &self,
        _req: iam_v1::model::GetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::Policy>> + Send {
        std::future::ready::<crate::Result<iam_v1::model::Policy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::get_mute_config].
    fn get_mute_config(
        &self,
        _req: crate::model::GetMuteConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::MuteConfig>> + Send {
        std::future::ready::<crate::Result<crate::model::MuteConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::get_notification_config].
    fn get_notification_config(
        &self,
        _req: crate::model::GetNotificationConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::NotificationConfig>> + Send
    {
        std::future::ready::<crate::Result<crate::model::NotificationConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::get_resource_value_config].
    fn get_resource_value_config(
        &self,
        _req: crate::model::GetResourceValueConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ResourceValueConfig>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ResourceValueConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::get_source].
    fn get_source(
        &self,
        _req: crate::model::GetSourceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Source>> + Send {
        std::future::ready::<crate::Result<crate::model::Source>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::group_findings].
    fn group_findings(
        &self,
        _req: crate::model::GroupFindingsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::GroupFindingsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::GroupFindingsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::list_attack_paths].
    fn list_attack_paths(
        &self,
        _req: crate::model::ListAttackPathsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAttackPathsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListAttackPathsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::SecurityCenter::list_big_query_exports].
    fn list_big_query_exports(
        &self,
        _req: crate::model::ListBigQueryExportsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListBigQueryExportsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListBigQueryExportsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::SecurityCenter::list_findings].
    fn list_findings(
        &self,
        _req: crate::model::ListFindingsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListFindingsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListFindingsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::list_mute_configs].
    fn list_mute_configs(
        &self,
        _req: crate::model::ListMuteConfigsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListMuteConfigsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListMuteConfigsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::SecurityCenter::list_notification_configs].
    fn list_notification_configs(
        &self,
        _req: crate::model::ListNotificationConfigsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListNotificationConfigsResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListNotificationConfigsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::SecurityCenter::list_resource_value_configs].
    fn list_resource_value_configs(
        &self,
        _req: crate::model::ListResourceValueConfigsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListResourceValueConfigsResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListResourceValueConfigsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::SecurityCenter::list_sources].
    fn list_sources(
        &self,
        _req: crate::model::ListSourcesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListSourcesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListSourcesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::list_valued_resources].
    fn list_valued_resources(
        &self,
        _req: crate::model::ListValuedResourcesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListValuedResourcesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListValuedResourcesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::SecurityCenter::set_finding_state].
    fn set_finding_state(
        &self,
        _req: crate::model::SetFindingStateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Finding>> + Send {
        std::future::ready::<crate::Result<crate::model::Finding>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::set_iam_policy].
    fn set_iam_policy(
        &self,
        _req: iam_v1::model::SetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::Policy>> + Send {
        std::future::ready::<crate::Result<iam_v1::model::Policy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::set_mute].
    fn set_mute(
        &self,
        _req: crate::model::SetMuteRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Finding>> + Send {
        std::future::ready::<crate::Result<crate::model::Finding>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::test_iam_permissions].
    fn test_iam_permissions(
        &self,
        _req: iam_v1::model::TestIamPermissionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::TestIamPermissionsResponse>> + Send
    {
        std::future::ready::<crate::Result<iam_v1::model::TestIamPermissionsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::SecurityCenter::update_big_query_export].
    fn update_big_query_export(
        &self,
        _req: crate::model::UpdateBigQueryExportRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BigQueryExport>> + Send {
        std::future::ready::<crate::Result<crate::model::BigQueryExport>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::update_external_system].
    fn update_external_system(
        &self,
        _req: crate::model::UpdateExternalSystemRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ExternalSystem>> + Send {
        std::future::ready::<crate::Result<crate::model::ExternalSystem>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::update_finding].
    fn update_finding(
        &self,
        _req: crate::model::UpdateFindingRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Finding>> + Send {
        std::future::ready::<crate::Result<crate::model::Finding>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::update_mute_config].
    fn update_mute_config(
        &self,
        _req: crate::model::UpdateMuteConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::MuteConfig>> + Send {
        std::future::ready::<crate::Result<crate::model::MuteConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::update_notification_config].
    fn update_notification_config(
        &self,
        _req: crate::model::UpdateNotificationConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::NotificationConfig>> + Send
    {
        std::future::ready::<crate::Result<crate::model::NotificationConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::update_resource_value_config].
    fn update_resource_value_config(
        &self,
        _req: crate::model::UpdateResourceValueConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ResourceValueConfig>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ResourceValueConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::update_security_marks].
    fn update_security_marks(
        &self,
        _req: crate::model::UpdateSecurityMarksRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SecurityMarks>> + Send {
        std::future::ready::<crate::Result<crate::model::SecurityMarks>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::update_source].
    fn update_source(
        &self,
        _req: crate::model::UpdateSourceRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Source>> + Send {
        std::future::ready::<crate::Result<crate::model::Source>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::list_operations].
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
           + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::SecurityCenter::get_operation].
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::SecurityCenter::delete_operation].
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::SecurityCenter::cancel_operation].
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Returns the polling policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_policy::PollingPolicy> {
        Arc::new(gax::polling_policy::Aip194Strict)
    }

    /// Returns the polling backoff policy.
    ///
    /// When mocking, this method is typically irrelevant. Do not try to verify
    /// it is called by your mocks.
    fn get_polling_backoff_policy(
        &self,
        _options: &gax::options::RequestOptions,
    ) -> Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        Arc::new(gax::exponential_backoff::ExponentialBackoff::default())
    }
}
