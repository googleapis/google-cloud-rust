// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Security Command Center API.
///
/// # Service Description
///
/// V2 APIs for Security Center service.
///
/// # Configuration
///
/// `SecurityCenter` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `SecurityCenter` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `SecurityCenter` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct SecurityCenter {
    inner: Arc<dyn crate::stubs::dynamic::SecurityCenter>,
}

impl SecurityCenter {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::SecurityCenter + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::SecurityCenter>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::SecurityCenter> {
        crate::transport::SecurityCenter::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::SecurityCenter> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::SecurityCenter::new)
    }

    /// Creates a ResourceValueConfig for an organization. Maps user's tags to
    /// difference resource values for use by the attack path simulation.
    pub fn batch_create_resource_value_configs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_center::BatchCreateResourceValueConfigs {
        crate::builders::security_center::BatchCreateResourceValueConfigs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Kicks off an LRO to bulk mute findings for a parent based on a filter. If
    /// no location is specified, findings are muted in global. The parent
    /// can be either an organization, folder, or project. The findings matched by
    /// the filter will be muted after the LRO is done.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn bulk_mute_findings(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_center::BulkMuteFindings {
        crate::builders::security_center::BulkMuteFindings::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a BigQuery export.
    pub fn create_big_query_export(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_center::CreateBigQueryExport {
        crate::builders::security_center::CreateBigQueryExport::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a finding in a location. The corresponding source must exist for
    /// finding creation to succeed.
    pub fn create_finding(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_center::CreateFinding {
        crate::builders::security_center::CreateFinding::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a mute config.
    pub fn create_mute_config(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_center::CreateMuteConfig {
        crate::builders::security_center::CreateMuteConfig::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a notification config.
    pub fn create_notification_config(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_center::CreateNotificationConfig {
        crate::builders::security_center::CreateNotificationConfig::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a source.
    pub fn create_source(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_center::CreateSource {
        crate::builders::security_center::CreateSource::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes an existing BigQuery export.
    pub fn delete_big_query_export(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_center::DeleteBigQueryExport {
        crate::builders::security_center::DeleteBigQueryExport::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes an existing mute config. If no location is specified, default is
    /// global.
    pub fn delete_mute_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_center::DeleteMuteConfig {
        crate::builders::security_center::DeleteMuteConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes a notification config.
    pub fn delete_notification_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_center::DeleteNotificationConfig {
        crate::builders::security_center::DeleteNotificationConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes a ResourceValueConfig.
    pub fn delete_resource_value_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_center::DeleteResourceValueConfig {
        crate::builders::security_center::DeleteResourceValueConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets a BigQuery export.
    pub fn get_big_query_export(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_center::GetBigQueryExport {
        crate::builders::security_center::GetBigQueryExport::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Get the simulation by name or the latest simulation for the given
    /// organization.
    pub fn get_simulation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_center::GetSimulation {
        crate::builders::security_center::GetSimulation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Get the valued resource by name
    pub fn get_valued_resource(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_center::GetValuedResource {
        crate::builders::security_center::GetValuedResource::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets the access control policy on the specified Source.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::security_center::GetIamPolicy {
        crate::builders::security_center::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets a mute config. If no location is specified, default is
    /// global.
    pub fn get_mute_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_center::GetMuteConfig {
        crate::builders::security_center::GetMuteConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets a notification config.
    pub fn get_notification_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_center::GetNotificationConfig {
        crate::builders::security_center::GetNotificationConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets a ResourceValueConfig.
    pub fn get_resource_value_config(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_center::GetResourceValueConfig {
        crate::builders::security_center::GetResourceValueConfig::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets a source.
    pub fn get_source(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_center::GetSource {
        crate::builders::security_center::GetSource::new(self.inner.clone()).set_name(name.into())
    }

    /// Filters an organization or source's findings and groups them by their
    /// specified properties in a location. If no location is specified, findings
    /// are assumed to be in global
    ///
    /// To group across all sources provide a `-` as the source id.
    /// The following list shows some examples:
    ///
    /// + `/v2/organizations/{organization_id}/sources/-/findings`
    ///
    /// `/v2/organizations/{organization_id}/sources/-/locations/{location_id}/findings`
    ///
    /// + `/v2/folders/{folder_id}/sources/-/findings`
    /// + `/v2/folders/{folder_id}/sources/-/locations/{location_id}/findings`
    /// + `/v2/projects/{project_id}/sources/-/findings`
    /// + `/v2/projects/{project_id}/sources/-/locations/{location_id}/findings`
    pub fn group_findings(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_center::GroupFindings {
        crate::builders::security_center::GroupFindings::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists the attack paths for a set of simulation results or valued resources
    /// and filter.
    pub fn list_attack_paths(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_center::ListAttackPaths {
        crate::builders::security_center::ListAttackPaths::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists BigQuery exports. Note that when requesting BigQuery exports at a
    /// given level all exports under that level are also returned e.g. if
    /// requesting BigQuery exports under a folder, then all BigQuery exports
    /// immediately under the folder plus the ones created under the projects
    /// within the folder are returned.
    pub fn list_big_query_exports(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_center::ListBigQueryExports {
        crate::builders::security_center::ListBigQueryExports::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists an organization or source's findings.
    ///
    /// To list across all sources for a given location provide a `-` as the source
    /// id. If no location is specified, finding are assumed to be in global.
    /// The following list shows some examples:
    ///
    /// + `/v2/organizations/{organization_id}/sources/-/findings`
    ///
    /// `/v2/organizations/{organization_id}/sources/-/locations/{location_id}/findings`
    pub fn list_findings(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_center::ListFindings {
        crate::builders::security_center::ListFindings::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists mute configs. If no location is specified, default is
    /// global.
    pub fn list_mute_configs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_center::ListMuteConfigs {
        crate::builders::security_center::ListMuteConfigs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists notification configs.
    pub fn list_notification_configs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_center::ListNotificationConfigs {
        crate::builders::security_center::ListNotificationConfigs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all ResourceValueConfigs.
    pub fn list_resource_value_configs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_center::ListResourceValueConfigs {
        crate::builders::security_center::ListResourceValueConfigs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all sources belonging to an organization.
    pub fn list_sources(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_center::ListSources {
        crate::builders::security_center::ListSources::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists the valued resources for a set of simulation results and filter.
    pub fn list_valued_resources(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::security_center::ListValuedResources {
        crate::builders::security_center::ListValuedResources::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates the state of a finding. If no location is specified, finding is
    /// assumed to be in global
    pub fn set_finding_state(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_center::SetFindingState {
        crate::builders::security_center::SetFindingState::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified Source.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::security_center::SetIamPolicy {
        crate::builders::security_center::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Updates the mute state of a finding. If no location is specified, finding
    /// is assumed to be in global
    pub fn set_mute(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_center::SetMute {
        crate::builders::security_center::SetMute::new(self.inner.clone()).set_name(name.into())
    }

    /// Returns the permissions that a caller has on the specified source.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::security_center::TestIamPermissions {
        crate::builders::security_center::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Updates a BigQuery export.
    pub fn update_big_query_export(
        &self,
        big_query_export: impl Into<crate::model::BigQueryExport>,
    ) -> crate::builders::security_center::UpdateBigQueryExport {
        crate::builders::security_center::UpdateBigQueryExport::new(self.inner.clone())
            .set_big_query_export(big_query_export.into())
    }

    /// Updates external system. This is for a given finding. If no location is
    /// specified, finding is assumed to be in global
    pub fn update_external_system(
        &self,
        external_system: impl Into<crate::model::ExternalSystem>,
    ) -> crate::builders::security_center::UpdateExternalSystem {
        crate::builders::security_center::UpdateExternalSystem::new(self.inner.clone())
            .set_external_system(external_system.into())
    }

    /// Creates or updates a finding. If no location is specified, finding is
    /// assumed to be in global. The corresponding source must exist for a finding
    /// creation to succeed.
    pub fn update_finding(
        &self,
        finding: impl Into<crate::model::Finding>,
    ) -> crate::builders::security_center::UpdateFinding {
        crate::builders::security_center::UpdateFinding::new(self.inner.clone())
            .set_finding(finding.into())
    }

    /// Updates a mute config. If no location is specified, default is
    /// global.
    pub fn update_mute_config(
        &self,
        mute_config: impl Into<crate::model::MuteConfig>,
    ) -> crate::builders::security_center::UpdateMuteConfig {
        crate::builders::security_center::UpdateMuteConfig::new(self.inner.clone())
            .set_mute_config(mute_config.into())
    }

    /// Updates a notification config. The following update
    /// fields are allowed: description, pubsub_topic, streaming_config.filter
    pub fn update_notification_config(
        &self,
        notification_config: impl Into<crate::model::NotificationConfig>,
    ) -> crate::builders::security_center::UpdateNotificationConfig {
        crate::builders::security_center::UpdateNotificationConfig::new(self.inner.clone())
            .set_notification_config(notification_config.into())
    }

    /// Updates an existing ResourceValueConfigs with new rules.
    pub fn update_resource_value_config(
        &self,
        resource_value_config: impl Into<crate::model::ResourceValueConfig>,
    ) -> crate::builders::security_center::UpdateResourceValueConfig {
        crate::builders::security_center::UpdateResourceValueConfig::new(self.inner.clone())
            .set_resource_value_config(resource_value_config.into())
    }

    /// Updates security marks. For Finding Security marks, if no location is
    /// specified, finding is assumed to be in global. Assets Security Marks can
    /// only be accessed through global endpoint.
    pub fn update_security_marks(
        &self,
        security_marks: impl Into<crate::model::SecurityMarks>,
    ) -> crate::builders::security_center::UpdateSecurityMarks {
        crate::builders::security_center::UpdateSecurityMarks::new(self.inner.clone())
            .set_security_marks(security_marks.into())
    }

    /// Updates a source.
    pub fn update_source(
        &self,
        source: impl Into<crate::model::Source>,
    ) -> crate::builders::security_center::UpdateSource {
        crate::builders::security_center::UpdateSource::new(self.inner.clone())
            .set_source(source.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_center::ListOperations {
        crate::builders::security_center::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_center::GetOperation {
        crate::builders::security_center::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_center::DeleteOperation {
        crate::builders::security_center::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::security_center::CancelOperation {
        crate::builders::security_center::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
