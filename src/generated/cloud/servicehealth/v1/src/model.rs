// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate lazy_static;
extern crate location;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Represents service health events that may affect Google Cloud products.
/// Event resource is a read-only view and does not allow any modifications. All
/// fields are output only.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Event {
    /// Output only. Identifier. Name of the event. Unique name of the event in
    /// this scope including project and location using the form
    /// `projects/{project_id}/locations/{location}/events/{event_id}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Brief description for the event.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub title: std::string::String,

    /// Output only. Free-form, human-readable description.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. The category of the event.
    pub category: crate::model::event::EventCategory,

    /// Output only. The detailed category of the event.
    pub detailed_category: crate::model::event::DetailedCategory,

    /// Output only. The current state of the event.
    pub state: crate::model::event::State,

    /// Output only. The current detailed state of the incident.
    pub detailed_state: crate::model::event::DetailedState,

    /// Google Cloud products and locations impacted by the event.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub event_impacts: std::vec::Vec<crate::model::EventImpact>,

    /// Output only. Communicates why a given event is deemed relevant in the
    /// context of a given project.
    pub relevance: crate::model::event::Relevance,

    /// Output only. Event updates are correspondence from Google.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub updates: std::vec::Vec<crate::model::EventUpdate>,

    /// Output only. When `detailed_state`=`MERGED`, `parent_event` contains the
    /// name of the parent event. All further updates will be published to the
    /// parent event.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent_event: std::string::String,

    /// Output only. The time when the event was last modified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The start time of the event, if applicable.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The end time of the event, if applicable.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time when the next update can be expected.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub next_update_time: std::option::Option<wkt::Timestamp>,
}

impl Event {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Event::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [title][crate::model::Event::title].
    pub fn set_title<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.title = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Event::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [category][crate::model::Event::category].
    pub fn set_category<T: std::convert::Into<crate::model::event::EventCategory>>(
        mut self,
        v: T,
    ) -> Self {
        self.category = v.into();
        self
    }

    /// Sets the value of [detailed_category][crate::model::Event::detailed_category].
    pub fn set_detailed_category<T: std::convert::Into<crate::model::event::DetailedCategory>>(
        mut self,
        v: T,
    ) -> Self {
        self.detailed_category = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Event::state].
    pub fn set_state<T: std::convert::Into<crate::model::event::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [detailed_state][crate::model::Event::detailed_state].
    pub fn set_detailed_state<T: std::convert::Into<crate::model::event::DetailedState>>(
        mut self,
        v: T,
    ) -> Self {
        self.detailed_state = v.into();
        self
    }

    /// Sets the value of [relevance][crate::model::Event::relevance].
    pub fn set_relevance<T: std::convert::Into<crate::model::event::Relevance>>(
        mut self,
        v: T,
    ) -> Self {
        self.relevance = v.into();
        self
    }

    /// Sets the value of [parent_event][crate::model::Event::parent_event].
    pub fn set_parent_event<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent_event = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Event::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [start_time][crate::model::Event::start_time].
    pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::Event::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [next_update_time][crate::model::Event::next_update_time].
    pub fn set_next_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.next_update_time = v.into();
        self
    }

    /// Sets the value of [event_impacts][crate::model::Event::event_impacts].
    pub fn set_event_impacts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EventImpact>,
    {
        use std::iter::Iterator;
        self.event_impacts = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [updates][crate::model::Event::updates].
    pub fn set_updates<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EventUpdate>,
    {
        use std::iter::Iterator;
        self.updates = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Event {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.servicehealth.v1.Event"
    }
}

/// Defines additional types related to Event
pub mod event {
    #[allow(unused_imports)]
    use super::*;

    /// The category of the event. This enum lists all possible categories of
    /// event.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct EventCategory(std::borrow::Cow<'static, str>);

    impl EventCategory {
        /// Creates a new EventCategory instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [EventCategory](EventCategory)
    pub mod event_category {
        use super::EventCategory;

        /// Unspecified category.
        pub const EVENT_CATEGORY_UNSPECIFIED: EventCategory =
            EventCategory::new("EVENT_CATEGORY_UNSPECIFIED");

        /// Event category for service outage or degradation.
        pub const INCIDENT: EventCategory = EventCategory::new("INCIDENT");
    }

    impl std::convert::From<std::string::String> for EventCategory {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// The detailed category of an event. Contains all possible states for all
    /// event categories.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct DetailedCategory(std::borrow::Cow<'static, str>);

    impl DetailedCategory {
        /// Creates a new DetailedCategory instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [DetailedCategory](DetailedCategory)
    pub mod detailed_category {
        use super::DetailedCategory;

        /// Unspecified detailed category.
        pub const DETAILED_CATEGORY_UNSPECIFIED: DetailedCategory =
            DetailedCategory::new("DETAILED_CATEGORY_UNSPECIFIED");

        /// Indicates an event with category INCIDENT has a confirmed impact to at
        /// least one Google Cloud product.
        pub const CONFIRMED_INCIDENT: DetailedCategory =
            DetailedCategory::new("CONFIRMED_INCIDENT");

        /// Indicates an event with category INCIDENT is under investigation to
        /// determine if it has a confirmed impact on any Google Cloud products.
        pub const EMERGING_INCIDENT: DetailedCategory = DetailedCategory::new("EMERGING_INCIDENT");
    }

    impl std::convert::From<std::string::String> for DetailedCategory {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// The state of the event. This enum lists all possible states of event.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(std::borrow::Cow<'static, str>);

    impl State {
        /// Creates a new State instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [State](State)
    pub mod state {
        use super::State;

        /// Unspecified state.
        pub const STATE_UNSPECIFIED: State = State::new("STATE_UNSPECIFIED");

        /// Event is actively affecting a Google Cloud product and will continue to
        /// receive updates.
        pub const ACTIVE: State = State::new("ACTIVE");

        /// Event is no longer affecting the Google Cloud product or has been merged
        /// with another event.
        pub const CLOSED: State = State::new("CLOSED");
    }

    impl std::convert::From<std::string::String> for State {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// The detailed state of the incident. This enum lists all possible detailed
    /// states of an incident.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct DetailedState(std::borrow::Cow<'static, str>);

    impl DetailedState {
        /// Creates a new DetailedState instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [DetailedState](DetailedState)
    pub mod detailed_state {
        use super::DetailedState;

        /// Unspecified detail state.
        pub const DETAILED_STATE_UNSPECIFIED: DetailedState =
            DetailedState::new("DETAILED_STATE_UNSPECIFIED");

        /// Google engineers are actively investigating the event to determine the
        /// impact.
        pub const EMERGING: DetailedState = DetailedState::new("EMERGING");

        /// The incident is confirmed and impacting at least one Google Cloud
        /// product. Ongoing status updates will be provided until it is resolved.
        pub const CONFIRMED: DetailedState = DetailedState::new("CONFIRMED");

        /// The incident is no longer affecting any Google Cloud product, and there
        /// will be no further updates.
        pub const RESOLVED: DetailedState = DetailedState::new("RESOLVED");

        /// The incident was merged into a parent incident. All further updates will
        /// be published to the parent only. The `parent_event` field contains the
        /// name of the parent.
        pub const MERGED: DetailedState = DetailedState::new("MERGED");

        /// The incident was automatically closed because of the following reasons:
        ///
        /// * The impact of the incident could not be confirmed.
        /// * The incident was intermittent or resolved itself.
        ///
        /// The incident does not have a resolution because no action or
        /// investigation happened. If it is intermittent, the incident may reopen.
        pub const AUTO_CLOSED: DetailedState = DetailedState::new("AUTO_CLOSED");

        /// Upon investigation, Google engineers concluded that the incident is not
        /// affecting a Google Cloud product. This state can change if the incident
        /// is reviewed again.
        pub const FALSE_POSITIVE: DetailedState = DetailedState::new("FALSE_POSITIVE");
    }

    impl std::convert::From<std::string::String> for DetailedState {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// Communicates why a given incident is deemed relevant in the context of a
    /// given project. This enum lists all possible detailed states of relevance.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Relevance(std::borrow::Cow<'static, str>);

    impl Relevance {
        /// Creates a new Relevance instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [Relevance](Relevance)
    pub mod relevance {
        use super::Relevance;

        /// Unspecified relevance.
        pub const RELEVANCE_UNSPECIFIED: Relevance = Relevance::new("RELEVANCE_UNSPECIFIED");

        /// The relevance of the incident to the project is unknown.
        pub const UNKNOWN: Relevance = Relevance::new("UNKNOWN");

        /// The incident does not impact the project.
        pub const NOT_IMPACTED: Relevance = Relevance::new("NOT_IMPACTED");

        /// The incident is associated with a Google Cloud product your project uses,
        /// but the incident may not be impacting your project. For example, the
        /// incident may be impacting a Google Cloud product that your project uses,
        /// but in a location that your project does not use.
        pub const PARTIALLY_RELATED: Relevance = Relevance::new("PARTIALLY_RELATED");

        /// The incident has a direct connection with your project and impacts a
        /// Google Cloud product in a location your project uses.
        pub const RELATED: Relevance = Relevance::new("RELATED");

        /// The incident is verified to be impacting your project.
        pub const IMPACTED: Relevance = Relevance::new("IMPACTED");
    }

    impl std::convert::From<std::string::String> for Relevance {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Represents service health events that may affect Google Cloud products used
/// across the organization. It is a read-only view and does not allow any
/// modifications.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OrganizationEvent {
    /// Output only. Identifier. Name of the event. Unique name of the event in
    /// this scope including organization ID and location using the form
    /// `organizations/{organization_id}/locations/{location}/organizationEvents/{event_id}`.
    ///
    /// `organization_id` - see [Getting your organization resource
    /// ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).\<br\>
    /// `location` - The location to get the service health events from.\<br\>
    /// `event_id` - Organization event ID to retrieve.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Brief description for the event.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub title: std::string::String,

    /// Output only. Free-form, human-readable description.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. The category of the event.
    pub category: crate::model::organization_event::EventCategory,

    /// Output only. The detailed category of the event.
    pub detailed_category: crate::model::organization_event::DetailedCategory,

    /// Output only. The current state of the event.
    pub state: crate::model::organization_event::State,

    /// Output only. The current detailed state of the incident.
    pub detailed_state: crate::model::organization_event::DetailedState,

    /// Output only. Represents the Google Cloud products and locations impacted by
    /// the event.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub event_impacts: std::vec::Vec<crate::model::EventImpact>,

    /// Output only. Incident-only field. Event updates are correspondence from
    /// Google.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub updates: std::vec::Vec<crate::model::EventUpdate>,

    /// Output only. When `detailed_state`=`MERGED`, `parent_event` contains the
    /// name of the parent event. All further updates will be published to the
    /// parent event.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent_event: std::string::String,

    /// Output only. The time the update was posted.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The start time of the event, if applicable.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The end time of the event, if applicable.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Incident-only field. The time when the next update can be
    /// expected.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub next_update_time: std::option::Option<wkt::Timestamp>,
}

impl OrganizationEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::OrganizationEvent::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [title][crate::model::OrganizationEvent::title].
    pub fn set_title<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.title = v.into();
        self
    }

    /// Sets the value of [description][crate::model::OrganizationEvent::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [category][crate::model::OrganizationEvent::category].
    pub fn set_category<T: std::convert::Into<crate::model::organization_event::EventCategory>>(
        mut self,
        v: T,
    ) -> Self {
        self.category = v.into();
        self
    }

    /// Sets the value of [detailed_category][crate::model::OrganizationEvent::detailed_category].
    pub fn set_detailed_category<
        T: std::convert::Into<crate::model::organization_event::DetailedCategory>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.detailed_category = v.into();
        self
    }

    /// Sets the value of [state][crate::model::OrganizationEvent::state].
    pub fn set_state<T: std::convert::Into<crate::model::organization_event::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [detailed_state][crate::model::OrganizationEvent::detailed_state].
    pub fn set_detailed_state<
        T: std::convert::Into<crate::model::organization_event::DetailedState>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.detailed_state = v.into();
        self
    }

    /// Sets the value of [parent_event][crate::model::OrganizationEvent::parent_event].
    pub fn set_parent_event<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent_event = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::OrganizationEvent::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [start_time][crate::model::OrganizationEvent::start_time].
    pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::OrganizationEvent::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [next_update_time][crate::model::OrganizationEvent::next_update_time].
    pub fn set_next_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.next_update_time = v.into();
        self
    }

    /// Sets the value of [event_impacts][crate::model::OrganizationEvent::event_impacts].
    pub fn set_event_impacts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EventImpact>,
    {
        use std::iter::Iterator;
        self.event_impacts = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [updates][crate::model::OrganizationEvent::updates].
    pub fn set_updates<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EventUpdate>,
    {
        use std::iter::Iterator;
        self.updates = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for OrganizationEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.servicehealth.v1.OrganizationEvent"
    }
}

/// Defines additional types related to OrganizationEvent
pub mod organization_event {
    #[allow(unused_imports)]
    use super::*;

    /// The category of the event. This enum lists all possible categories of
    /// event.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct EventCategory(std::borrow::Cow<'static, str>);

    impl EventCategory {
        /// Creates a new EventCategory instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [EventCategory](EventCategory)
    pub mod event_category {
        use super::EventCategory;

        /// Unspecified category.
        pub const EVENT_CATEGORY_UNSPECIFIED: EventCategory =
            EventCategory::new("EVENT_CATEGORY_UNSPECIFIED");

        /// Event category for service outage or degradation.
        pub const INCIDENT: EventCategory = EventCategory::new("INCIDENT");
    }

    impl std::convert::From<std::string::String> for EventCategory {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// The detailed category of an event. Contains all possible states for all
    /// event categories.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct DetailedCategory(std::borrow::Cow<'static, str>);

    impl DetailedCategory {
        /// Creates a new DetailedCategory instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [DetailedCategory](DetailedCategory)
    pub mod detailed_category {
        use super::DetailedCategory;

        /// Unspecified detailed category.
        pub const DETAILED_CATEGORY_UNSPECIFIED: DetailedCategory =
            DetailedCategory::new("DETAILED_CATEGORY_UNSPECIFIED");

        /// Indicates an event with category INCIDENT has a confirmed impact to at
        /// least one Google Cloud product.
        pub const CONFIRMED_INCIDENT: DetailedCategory =
            DetailedCategory::new("CONFIRMED_INCIDENT");

        /// Indicates an event with category INCIDENT is under investigation to
        /// determine if it has a confirmed impact on any Google Cloud products.
        pub const EMERGING_INCIDENT: DetailedCategory = DetailedCategory::new("EMERGING_INCIDENT");
    }

    impl std::convert::From<std::string::String> for DetailedCategory {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// The state of the organization event. This enum lists all possible states of
    /// event.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(std::borrow::Cow<'static, str>);

    impl State {
        /// Creates a new State instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [State](State)
    pub mod state {
        use super::State;

        /// Unspecified state.
        pub const STATE_UNSPECIFIED: State = State::new("STATE_UNSPECIFIED");

        /// Event is actively affecting a Google Cloud product and will continue to
        /// receive updates.
        pub const ACTIVE: State = State::new("ACTIVE");

        /// Event is no longer affecting the Google Cloud product or has been merged
        /// with another event.
        pub const CLOSED: State = State::new("CLOSED");
    }

    impl std::convert::From<std::string::String> for State {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// The detailed state of the incident. This enum lists all possible detailed
    /// states of an incident.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct DetailedState(std::borrow::Cow<'static, str>);

    impl DetailedState {
        /// Creates a new DetailedState instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [DetailedState](DetailedState)
    pub mod detailed_state {
        use super::DetailedState;

        /// Unspecified detail state.
        pub const DETAILED_STATE_UNSPECIFIED: DetailedState =
            DetailedState::new("DETAILED_STATE_UNSPECIFIED");

        /// Google engineers are actively investigating the incident to determine the
        /// impact.
        pub const EMERGING: DetailedState = DetailedState::new("EMERGING");

        /// The incident is confirmed and impacting at least one Google Cloud
        /// product. Ongoing status updates will be provided until it is resolved.
        pub const CONFIRMED: DetailedState = DetailedState::new("CONFIRMED");

        /// The incident is no longer affecting any Google Cloud product, and there
        /// will be no further updates.
        pub const RESOLVED: DetailedState = DetailedState::new("RESOLVED");

        /// The incident was merged into a parent event. All further updates will be
        /// published to the parent only. The `parent_event` contains the name of the
        /// parent.
        pub const MERGED: DetailedState = DetailedState::new("MERGED");

        /// The incident was automatically closed because of the following reasons:
        ///
        /// * The impact of the incident could not be confirmed.
        /// * The incident was intermittent or resolved itself.
        ///
        /// The incident does not have a resolution because no action or
        /// investigation happened. If it is intermittent, the incident may reopen.
        pub const AUTO_CLOSED: DetailedState = DetailedState::new("AUTO_CLOSED");

        /// Upon investigation, Google engineers concluded that the incident is not
        /// affecting a Google Cloud product. This state can change if the incident
        /// is reviewed again.
        pub const FALSE_POSITIVE: DetailedState = DetailedState::new("FALSE_POSITIVE");
    }

    impl std::convert::From<std::string::String> for DetailedState {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Records an update made to the event.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EventUpdate {
    /// Output only. The time the update was posted.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Brief title for the event.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub title: std::string::String,

    /// Output only. Free-form, human-readable description.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. Symptoms of the event, if available.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub symptom: std::string::String,

    /// Output only. Workaround steps to remediate the event impact, if available.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub workaround: std::string::String,
}

impl EventUpdate {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_time][crate::model::EventUpdate::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [title][crate::model::EventUpdate::title].
    pub fn set_title<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.title = v.into();
        self
    }

    /// Sets the value of [description][crate::model::EventUpdate::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [symptom][crate::model::EventUpdate::symptom].
    pub fn set_symptom<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.symptom = v.into();
        self
    }

    /// Sets the value of [workaround][crate::model::EventUpdate::workaround].
    pub fn set_workaround<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.workaround = v.into();
        self
    }
}

impl wkt::message::Message for EventUpdate {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.servicehealth.v1.EventUpdate"
    }
}

/// Represents the locations impacted by the event.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Location {
    /// Location impacted by the event. Example: `"us-central1"`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub location_name: std::string::String,
}

impl Location {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [location_name][crate::model::Location::location_name].
    pub fn set_location_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.location_name = v.into();
        self
    }
}

impl wkt::message::Message for Location {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.servicehealth.v1.Location"
    }
}

/// Represents the Google Cloud product impacted by the event.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Product {
    /// Google Cloud product impacted by the event. Example: `"Google Cloud SQL"`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub product_name: std::string::String,

    /// Unique identifier for the product.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,
}

impl Product {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [product_name][crate::model::Product::product_name].
    pub fn set_product_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.product_name = v.into();
        self
    }

    /// Sets the value of [id][crate::model::Product::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }
}

impl wkt::message::Message for Product {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.servicehealth.v1.Product"
    }
}

/// Represents the Google Cloud products and locations impacted by the event.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct EventImpact {
    /// Google Cloud product impacted by the event.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub product: std::option::Option<crate::model::Product>,

    /// Location impacted by the event.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub location: std::option::Option<crate::model::Location>,
}

impl EventImpact {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [product][crate::model::EventImpact::product].
    pub fn set_product<T: std::convert::Into<std::option::Option<crate::model::Product>>>(
        mut self,
        v: T,
    ) -> Self {
        self.product = v.into();
        self
    }

    /// Sets the value of [location][crate::model::EventImpact::location].
    pub fn set_location<T: std::convert::Into<std::option::Option<crate::model::Location>>>(
        mut self,
        v: T,
    ) -> Self {
        self.location = v.into();
        self
    }
}

impl wkt::message::Message for EventImpact {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.servicehealth.v1.EventImpact"
    }
}

/// Represents impact to assets at organizational level. It is a read-only view
/// and does not allow any modifications.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OrganizationImpact {
    /// Output only. Identifier. Unique name of the organization impact in this
    /// scope including organization and location using the form
    /// `organizations/{organization_id}/locations/{location}/organizationImpacts/{organization_impact_id}`.
    ///
    /// `organization_id` - ID (number) of the organization that contains the
    /// event. To get your `organization_id`, see
    /// [Getting your organization resource
    /// ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).\<br\>
    /// `organization_impact_id` - ID of the [OrganizationImpact
    /// resource](/service-health/docs/reference/rest/v1beta/organizations.locations.organizationImpacts#OrganizationImpact).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. A list of event names impacting the asset.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub events: std::vec::Vec<std::string::String>,

    /// Output only. Google Cloud asset possibly impacted by the specified events.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub asset: std::option::Option<crate::model::Asset>,

    /// Output only. The time when the affected project was last modified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,
}

impl OrganizationImpact {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::OrganizationImpact::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [asset][crate::model::OrganizationImpact::asset].
    pub fn set_asset<T: std::convert::Into<std::option::Option<crate::model::Asset>>>(
        mut self,
        v: T,
    ) -> Self {
        self.asset = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::OrganizationImpact::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [events][crate::model::OrganizationImpact::events].
    pub fn set_events<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.events = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for OrganizationImpact {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.servicehealth.v1.OrganizationImpact"
    }
}

/// Represents the asset impacted by the events.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Asset {
    /// Output only. Full name of the resource as defined in
    /// [Resource
    /// Names](https://cloud.google.com/apis/design/resource_names#full_resource_name).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub asset_name: std::string::String,

    /// Output only. Type of the asset. Example:
    /// `"cloudresourcemanager.googleapis.com/Project"`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub asset_type: std::string::String,
}

impl Asset {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [asset_name][crate::model::Asset::asset_name].
    pub fn set_asset_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.asset_name = v.into();
        self
    }

    /// Sets the value of [asset_type][crate::model::Asset::asset_type].
    pub fn set_asset_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.asset_type = v.into();
        self
    }
}

impl wkt::message::Message for Asset {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.servicehealth.v1.Asset"
    }
}

/// Requests list of events.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListEventsRequest {
    /// Required. Parent value using the form
    /// `projects/{project_id}/locations/{location}/events`.
    ///
    /// `project_id` - ID of the project for which to list service health
    /// events.
    /// `location` - The location to get the service health events from.
    /// To retrieve service health events of category = INCIDENT, use `location` =
    /// `global`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of events that should be returned.  Acceptable
    /// values are 1 to 100, inclusive. (The default value is 10.) If more results
    /// are available, the service returns a next_page_token that you can use to
    /// get the next page of results in subsequent list requests. The service may
    /// return fewer events than the requested page_size.
    pub page_size: i32,

    /// Optional. A token identifying a page of results the server should return.
    /// Provide Page token returned by a previous `ListEvents` call to retrieve the
    /// next page of results. When paginating, all other parameters provided to
    /// `ListEvents` must match the call that provided the page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. A filter expression that filters resources listed in the
    /// response. The expression takes the following forms: \<br\>
    ///
    /// * field=value for `category` and `state`\<br\>
    /// * field &lt;, >, &lt;=, or >= value for `update_time` \<br\>
    ///   Examples: `category=INCIDENT`, `update_time>="2000-01-01T11:30:00-04:00"`,
    ///   `event_impacts.product.product_name:"Eventarc"`
    ///   \<br\>
    ///
    /// Multiple filter queries are separated by spaces. Example:
    /// `category=INCIDENT state=ACTIVE`.
    ///
    /// By default, each expression is an AND expression. However, you can include
    /// AND and OR expressions explicitly.
    ///
    /// Filter is supported for the following fields: `category`, `state`,
    /// `update_time`, `event_impacts.product.product_name`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Event fields to include in response.
    pub view: crate::model::EventView,
}

impl ListEventsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListEventsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListEventsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListEventsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListEventsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [view][crate::model::ListEventsRequest::view].
    pub fn set_view<T: std::convert::Into<crate::model::EventView>>(mut self, v: T) -> Self {
        self.view = v.into();
        self
    }
}

impl wkt::message::Message for ListEventsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.servicehealth.v1.ListEventsRequest"
    }
}

/// Response to request for listing events.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListEventsResponse {
    /// Output only. List of events.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub events: std::vec::Vec<crate::model::Event>,

    /// Output only. The continuation token, used to page through large result
    /// sets. Provide this value in a subsequent request as page_token to retrieve
    /// the next page.
    ///
    /// If this field is not present, there are no subsequent results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Output only. Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListEventsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListEventsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [events][crate::model::ListEventsResponse::events].
    pub fn set_events<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Event>,
    {
        use std::iter::Iterator;
        self.events = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListEventsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListEventsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.servicehealth.v1.ListEventsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListEventsResponse {
    type PageItem = crate::model::Event;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.events
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Gets information about a specific event.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetEventRequest {
    /// Required. Unique name of the event in this scope including project
    /// and location using the form
    /// `projects/{project_id}/locations/{location}/events/{event_id}`.
    ///
    /// `project_id` - Project ID of the project that contains the event. \<br\>
    /// `location` - The location to get the service health events from. \<br\>
    /// `event_id` - Event ID to retrieve.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetEventRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetEventRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetEventRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.servicehealth.v1.GetEventRequest"
    }
}

/// Requests list of events that affect an organization.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListOrganizationEventsRequest {
    /// Required. Parent value using the form
    /// `organizations/{organization_id}/locations/{location}/organizationEvents`.
    ///
    /// `organization_id` - ID (number) of the project that contains the event. To
    /// get your `organization_id`, see
    /// [Getting your organization resource
    /// ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).\<br\>
    /// `location` - The location to get the service health events from. To
    /// retrieve service health events of category = INCIDENT, use `location` =
    /// `global`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of events that should be returned.  Acceptable
    /// values are `1` to `100`, inclusive. (The default value is `10`.) If more
    /// results are available, the service returns a `next_page_token` that you can
    /// use to get the next page of results in subsequent list requests. The
    /// service may return fewer events than the requested `page_size`.
    pub page_size: i32,

    /// Optional. A token identifying a page of results the server should return.
    ///
    /// Provide Page token returned by a previous `ListOrganizationEvents` call to
    /// retrieve the next page of results.
    ///
    /// When paginating, all other parameters provided to
    /// `ListOrganizationEvents` must match the call that provided the page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. A filter expression that filters resources listed in the
    /// response. The expression takes the following forms:
    ///
    /// * field=value for `category` and `state`
    /// * field &lt;, >, &lt;=, or >= value for `update_time`
    ///
    /// Examples: `category=INCIDENT`, `update_time>="2000-01-01T11:30:00-04:00"`
    ///
    /// Multiple filter queries are space-separated. Example:
    /// `category=INCIDENT state=ACTIVE`.
    ///
    /// By default, each expression is an AND expression. However, you can include
    /// AND and OR expressions explicitly.
    ///
    /// Filter is supported for the following fields: `category`, `state`,
    /// `update_time`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. OrganizationEvent fields to include in response.
    pub view: crate::model::OrganizationEventView,
}

impl ListOrganizationEventsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListOrganizationEventsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListOrganizationEventsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListOrganizationEventsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListOrganizationEventsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [view][crate::model::ListOrganizationEventsRequest::view].
    pub fn set_view<T: std::convert::Into<crate::model::OrganizationEventView>>(
        mut self,
        v: T,
    ) -> Self {
        self.view = v.into();
        self
    }
}

impl wkt::message::Message for ListOrganizationEventsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.servicehealth.v1.ListOrganizationEventsRequest"
    }
}

/// Response to request for listing organization events.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListOrganizationEventsResponse {
    /// Output only. List of organization events affecting an organization.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub organization_events: std::vec::Vec<crate::model::OrganizationEvent>,

    /// Output only. The continuation token, used to page through large result
    /// sets. Provide this value in a subsequent request as `page_token` to
    /// retrieve the next page.
    ///
    /// If this field is not present, there are no subsequent results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Output only. Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListOrganizationEventsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListOrganizationEventsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [organization_events][crate::model::ListOrganizationEventsResponse::organization_events].
    pub fn set_organization_events<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::OrganizationEvent>,
    {
        use std::iter::Iterator;
        self.organization_events = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListOrganizationEventsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListOrganizationEventsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.servicehealth.v1.ListOrganizationEventsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListOrganizationEventsResponse {
    type PageItem = crate::model::OrganizationEvent;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.organization_events
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Gets information about a specific event affecting an organization.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetOrganizationEventRequest {
    /// Required. Unique name of the event in this scope including organization and
    /// event ID using the form
    /// `organizations/{organization_id}/locations/locations/global/organizationEvents/{event_id}`.
    ///
    /// `organization_id` - ID (number) of the project that contains the event. To
    /// get your `organization_id`, see
    /// [Getting your organization resource
    /// ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).\<br\>
    /// `event_id` - Organization event ID to retrieve.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetOrganizationEventRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetOrganizationEventRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetOrganizationEventRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.servicehealth.v1.GetOrganizationEventRequest"
    }
}

/// Requests list of projects under an organization affected by an event.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListOrganizationImpactsRequest {
    /// Required. Parent value using the form
    /// `organizations/{organization_id}/locations/{location}/organizationImpacts`.
    ///
    /// `organization_id` - ID (number) of the project that contains the event. To
    /// get your `organization_id`, see
    /// [Getting your organization resource
    /// ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The maximum number of events that should be returned. Acceptable
    /// values are `1` to `100`, inclusive. The default value is `10`.
    ///
    /// If more results are available, the service returns a
    /// `next_page_token` that can be used to get the next page of results in
    /// subsequent list requests. The service may return fewer
    /// [impacts](/service-health/docs/reference/rest/v1beta/organizations.locations.organizationImpacts#OrganizationImpact)
    /// than the requested `page_size`.
    pub page_size: i32,

    /// Optional. A token identifying a page of results the server should return.
    ///
    /// Provide `page_token` returned by a previous `ListOrganizationImpacts` call
    /// to retrieve the next page of results.
    ///
    /// When paginating, all other parameters provided to `ListOrganizationImpacts`
    /// must match the call that provided the page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. A filter expression that filters resources listed in the
    /// response. The expression is in the form of `field:value` for checking if a
    /// repeated field contains a value.
    ///
    /// Example:
    /// `events:organizations%2F{organization_id}%2Flocations%2Fglobal%2ForganizationEvents%2Fevent-id`
    ///
    /// To get your `{organization_id}`, see
    /// [Getting your organization resource
    /// ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).
    ///
    /// Multiple filter queries are separated by spaces.
    ///
    /// By default, each expression is an AND expression. However, you can include
    /// AND and OR expressions explicitly.
    /// Filter is supported for the following fields: `events`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,
}

impl ListOrganizationImpactsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListOrganizationImpactsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListOrganizationImpactsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListOrganizationImpactsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListOrganizationImpactsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }
}

impl wkt::message::Message for ListOrganizationImpactsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.servicehealth.v1.ListOrganizationImpactsRequest"
    }
}

/// Response to request for listing projects under an organization affected by an
/// event.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListOrganizationImpactsResponse {
    /// Output only. List of
    /// [impacts](/service-health/docs/reference/rest/v1beta/organizations.locations.organizationImpacts#OrganizationImpact)
    /// for an organization affected by service health events.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub organization_impacts: std::vec::Vec<crate::model::OrganizationImpact>,

    /// Output only. The continuation token, used to page through large result
    /// sets. Provide this value in a subsequent request as `page_token` to
    /// retrieve the next page.
    ///
    /// If this field is not present, there are no subsequent results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Output only. Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListOrganizationImpactsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListOrganizationImpactsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [organization_impacts][crate::model::ListOrganizationImpactsResponse::organization_impacts].
    pub fn set_organization_impacts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::OrganizationImpact>,
    {
        use std::iter::Iterator;
        self.organization_impacts = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListOrganizationImpactsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListOrganizationImpactsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.servicehealth.v1.ListOrganizationImpactsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListOrganizationImpactsResponse {
    type PageItem = crate::model::OrganizationImpact;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.organization_impacts
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Gets information about an event that affects a project under an organization.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetOrganizationImpactRequest {
    /// Required. Name of the resource using the form
    /// `organizations/{organization_id}/locations/global/organizationImpacts/{organization_impact_id}`.
    ///
    /// `organization_id` - ID (number) of the organization that contains the
    /// event. To get your `organization_id`, see
    /// [Getting your organization resource
    /// ID](https://cloud.google.com/resource-manager/docs/creating-managing-organization#retrieving_your_organization_id).\<br\>
    /// `organization_impact_id` - ID of the [OrganizationImpact
    /// resource](/service-health/docs/reference/rest/v1beta/organizations.locations.organizationImpacts#OrganizationImpact).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetOrganizationImpactRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetOrganizationImpactRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetOrganizationImpactRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.servicehealth.v1.GetOrganizationImpactRequest"
    }
}

/// The event fields to include in ListEvents API response. This enum lists all
/// possible event views.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct EventView(std::borrow::Cow<'static, str>);

impl EventView {
    /// Creates a new EventView instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [EventView](EventView)
pub mod event_view {
    use super::EventView;

    /// Unspecified event view. Default to `EVENT_VIEW_BASIC`.
    pub const EVENT_VIEW_UNSPECIFIED: EventView = EventView::new("EVENT_VIEW_UNSPECIFIED");

    /// Includes all fields except `updates`. This view is the default for
    /// ListEvents API.
    pub const EVENT_VIEW_BASIC: EventView = EventView::new("EVENT_VIEW_BASIC");

    /// Includes all event fields.
    pub const EVENT_VIEW_FULL: EventView = EventView::new("EVENT_VIEW_FULL");
}

impl std::convert::From<std::string::String> for EventView {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

/// The organization event fields to include in ListOrganizationEvents API
/// response. This enum lists all possible organization event views.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct OrganizationEventView(std::borrow::Cow<'static, str>);

impl OrganizationEventView {
    /// Creates a new OrganizationEventView instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [OrganizationEventView](OrganizationEventView)
pub mod organization_event_view {
    use super::OrganizationEventView;

    /// Unspecified event view. Default to `ORGANIZATION_EVENT_VIEW_BASIC`.
    pub const ORGANIZATION_EVENT_VIEW_UNSPECIFIED: OrganizationEventView =
        OrganizationEventView::new("ORGANIZATION_EVENT_VIEW_UNSPECIFIED");

    /// Includes all organization event fields except `updates`. This view is the
    /// default for ListOrganizationEvents API.
    pub const ORGANIZATION_EVENT_VIEW_BASIC: OrganizationEventView =
        OrganizationEventView::new("ORGANIZATION_EVENT_VIEW_BASIC");

    /// Includes all organization event fields.
    pub const ORGANIZATION_EVENT_VIEW_FULL: OrganizationEventView =
        OrganizationEventView::new("ORGANIZATION_EVENT_VIEW_FULL");
}

impl std::convert::From<std::string::String> for OrganizationEventView {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}
