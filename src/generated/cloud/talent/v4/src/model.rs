// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gtype;
extern crate lazy_static;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate rpc;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Message representing a period of time between two timestamps.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TimestampRange {
    /// Begin of the period (inclusive).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time: std::option::Option<wkt::Timestamp>,

    /// End of the period (exclusive).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,
}

impl TimestampRange {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [start_time][crate::model::TimestampRange::start_time].
    pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::TimestampRange::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }
}

impl wkt::message::Message for TimestampRange {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.TimestampRange"
    }
}

/// A resource that represents a location with full geographic information.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Location {
    /// The type of a location, which corresponds to the address lines field of
    /// [google.type.PostalAddress][google.type.PostalAddress]. For example,
    /// "Downtown, Atlanta, GA, USA" has a type of
    /// [LocationType.NEIGHBORHOOD][google.cloud.talent.v4.Location.LocationType.NEIGHBORHOOD],
    /// and "Kansas City, KS, USA" has a type of
    /// [LocationType.LOCALITY][google.cloud.talent.v4.Location.LocationType.LOCALITY].
    ///
    /// [google.cloud.talent.v4.Location.LocationType.LOCALITY]: crate::model::location::location_type::LOCALITY
    /// [google.cloud.talent.v4.Location.LocationType.NEIGHBORHOOD]: crate::model::location::location_type::NEIGHBORHOOD
    /// [google.type.PostalAddress]: gtype::model::PostalAddress
    pub location_type: crate::model::location::LocationType,

    /// Postal address of the location that includes human readable information,
    /// such as postal delivery and payments addresses. Given a postal address,
    /// a postal service can deliver items to a premises, P.O. Box, or other
    /// delivery location.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub postal_address: std::option::Option<gtype::model::PostalAddress>,

    /// An object representing a latitude/longitude pair.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub lat_lng: std::option::Option<gtype::model::LatLng>,

    /// Radius in miles of the job location. This value is derived from the
    /// location bounding box in which a circle with the specified radius
    /// centered from [google.type.LatLng][google.type.LatLng] covers the area
    /// associated with the job location. For example, currently, "Mountain View,
    /// CA, USA" has a radius of 6.17 miles.
    ///
    /// [google.type.LatLng]: gtype::model::LatLng
    pub radius_miles: f64,
}

impl Location {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [location_type][crate::model::Location::location_type].
    pub fn set_location_type<T: std::convert::Into<crate::model::location::LocationType>>(
        mut self,
        v: T,
    ) -> Self {
        self.location_type = v.into();
        self
    }

    /// Sets the value of [postal_address][crate::model::Location::postal_address].
    pub fn set_postal_address<
        T: std::convert::Into<std::option::Option<gtype::model::PostalAddress>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.postal_address = v.into();
        self
    }

    /// Sets the value of [lat_lng][crate::model::Location::lat_lng].
    pub fn set_lat_lng<T: std::convert::Into<std::option::Option<gtype::model::LatLng>>>(
        mut self,
        v: T,
    ) -> Self {
        self.lat_lng = v.into();
        self
    }

    /// Sets the value of [radius_miles][crate::model::Location::radius_miles].
    pub fn set_radius_miles<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.radius_miles = v.into();
        self
    }
}

impl wkt::message::Message for Location {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.Location"
    }
}

/// Defines additional types related to Location
pub mod location {
    #[allow(unused_imports)]
    use super::*;

    /// An enum which represents the type of a location.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct LocationType(std::borrow::Cow<'static, str>);

    impl LocationType {
        /// Creates a new LocationType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [LocationType](LocationType)
    pub mod location_type {
        use super::LocationType;

        /// Default value if the type isn't specified.
        pub const LOCATION_TYPE_UNSPECIFIED: LocationType =
            LocationType::new("LOCATION_TYPE_UNSPECIFIED");

        /// A country level location.
        pub const COUNTRY: LocationType = LocationType::new("COUNTRY");

        /// A state or equivalent level location.
        pub const ADMINISTRATIVE_AREA: LocationType = LocationType::new("ADMINISTRATIVE_AREA");

        /// A county or equivalent level location.
        pub const SUB_ADMINISTRATIVE_AREA: LocationType =
            LocationType::new("SUB_ADMINISTRATIVE_AREA");

        /// A city or equivalent level location.
        pub const LOCALITY: LocationType = LocationType::new("LOCALITY");

        /// A postal code level location.
        pub const POSTAL_CODE: LocationType = LocationType::new("POSTAL_CODE");

        /// A sublocality is a subdivision of a locality, for example a city borough,
        /// ward, or arrondissement. Sublocalities are usually recognized by a local
        /// political authority. For example, Manhattan and Brooklyn are recognized
        /// as boroughs by the City of New York, and are therefore modeled as
        /// sublocalities.
        pub const SUB_LOCALITY: LocationType = LocationType::new("SUB_LOCALITY");

        /// A district or equivalent level location.
        pub const SUB_LOCALITY_1: LocationType = LocationType::new("SUB_LOCALITY_1");

        /// A smaller district or equivalent level display.
        pub const SUB_LOCALITY_2: LocationType = LocationType::new("SUB_LOCALITY_2");

        /// A neighborhood level location.
        pub const NEIGHBORHOOD: LocationType = LocationType::new("NEIGHBORHOOD");

        /// A street address level location.
        pub const STREET_ADDRESS: LocationType = LocationType::new("STREET_ADDRESS");
    }

    impl std::convert::From<std::string::String> for LocationType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for LocationType {
        fn default() -> Self {
            location_type::LOCATION_TYPE_UNSPECIFIED
        }
    }
}

/// Meta information related to the job searcher or entity
/// conducting the job search. This information is used to improve the
/// performance of the service.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RequestMetadata {
    /// Required if
    /// [allow_missing_ids][google.cloud.talent.v4.RequestMetadata.allow_missing_ids]
    /// is unset or `false`.
    ///
    /// The client-defined scope or source of the service call, which typically
    /// is the domain on
    /// which the service has been implemented and is currently being run.
    ///
    /// For example, if the service is being run by client \<em\>Foo, Inc.\</em\>, on
    /// job board www.foo.com and career site www.bar.com, then this field is
    /// set to "foo.com" for use on the job board, and "bar.com" for use on the
    /// career site.
    ///
    /// Note that any improvements to the model for a particular tenant site rely
    /// on this field being set correctly to a unique domain.
    ///
    /// The maximum number of allowed characters is 255.
    ///
    /// [google.cloud.talent.v4.RequestMetadata.allow_missing_ids]: crate::model::RequestMetadata::allow_missing_ids
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub domain: std::string::String,

    /// Required if
    /// [allow_missing_ids][google.cloud.talent.v4.RequestMetadata.allow_missing_ids]
    /// is unset or `false`.
    ///
    /// A unique session identification string. A session is defined as the
    /// duration of an end user's interaction with the service over a certain
    /// period.
    /// Obfuscate this field for privacy concerns before
    /// providing it to the service.
    ///
    /// Note that any improvements to the model for a particular tenant site rely
    /// on this field being set correctly to a unique session ID.
    ///
    /// The maximum number of allowed characters is 255.
    ///
    /// [google.cloud.talent.v4.RequestMetadata.allow_missing_ids]: crate::model::RequestMetadata::allow_missing_ids
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub session_id: std::string::String,

    /// Required if
    /// [allow_missing_ids][google.cloud.talent.v4.RequestMetadata.allow_missing_ids]
    /// is unset or `false`.
    ///
    /// A unique user identification string, as determined by the client.
    /// To have the strongest positive impact on search quality
    /// make sure the client-level is unique.
    /// Obfuscate this field for privacy concerns before
    /// providing it to the service.
    ///
    /// Note that any improvements to the model for a particular tenant site rely
    /// on this field being set correctly to a unique user ID.
    ///
    /// The maximum number of allowed characters is 255.
    ///
    /// [google.cloud.talent.v4.RequestMetadata.allow_missing_ids]: crate::model::RequestMetadata::allow_missing_ids
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub user_id: std::string::String,

    /// Only set when any of
    /// [domain][google.cloud.talent.v4.RequestMetadata.domain],
    /// [session_id][google.cloud.talent.v4.RequestMetadata.session_id] and
    /// [user_id][google.cloud.talent.v4.RequestMetadata.user_id] isn't available
    /// for some reason. It is highly recommended not to set this field and provide
    /// accurate [domain][google.cloud.talent.v4.RequestMetadata.domain],
    /// [session_id][google.cloud.talent.v4.RequestMetadata.session_id] and
    /// [user_id][google.cloud.talent.v4.RequestMetadata.user_id] for the best
    /// service experience.
    ///
    /// [google.cloud.talent.v4.RequestMetadata.domain]: crate::model::RequestMetadata::domain
    /// [google.cloud.talent.v4.RequestMetadata.session_id]: crate::model::RequestMetadata::session_id
    /// [google.cloud.talent.v4.RequestMetadata.user_id]: crate::model::RequestMetadata::user_id
    pub allow_missing_ids: bool,

    /// The type of device used by the job seeker at the time of the call to the
    /// service.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub device_info: std::option::Option<crate::model::DeviceInfo>,
}

impl RequestMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [domain][crate::model::RequestMetadata::domain].
    pub fn set_domain<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.domain = v.into();
        self
    }

    /// Sets the value of [session_id][crate::model::RequestMetadata::session_id].
    pub fn set_session_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.session_id = v.into();
        self
    }

    /// Sets the value of [user_id][crate::model::RequestMetadata::user_id].
    pub fn set_user_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.user_id = v.into();
        self
    }

    /// Sets the value of [allow_missing_ids][crate::model::RequestMetadata::allow_missing_ids].
    pub fn set_allow_missing_ids<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_missing_ids = v.into();
        self
    }

    /// Sets the value of [device_info][crate::model::RequestMetadata::device_info].
    pub fn set_device_info<T: std::convert::Into<std::option::Option<crate::model::DeviceInfo>>>(
        mut self,
        v: T,
    ) -> Self {
        self.device_info = v.into();
        self
    }
}

impl wkt::message::Message for RequestMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.RequestMetadata"
    }
}

/// Additional information returned to client, such as debugging information.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ResponseMetadata {
    /// A unique id associated with this call.
    /// This id is logged for tracking purposes.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl ResponseMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [request_id][crate::model::ResponseMetadata::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for ResponseMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.ResponseMetadata"
    }
}

/// Device information collected from the job seeker, candidate, or
/// other entity conducting the job search. Providing this information improves
/// the quality of the search results across devices.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeviceInfo {
    /// Type of the device.
    pub device_type: crate::model::device_info::DeviceType,

    /// A device-specific ID. The ID must be a unique identifier that
    /// distinguishes the device from other devices.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,
}

impl DeviceInfo {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [device_type][crate::model::DeviceInfo::device_type].
    pub fn set_device_type<T: std::convert::Into<crate::model::device_info::DeviceType>>(
        mut self,
        v: T,
    ) -> Self {
        self.device_type = v.into();
        self
    }

    /// Sets the value of [id][crate::model::DeviceInfo::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }
}

impl wkt::message::Message for DeviceInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.DeviceInfo"
    }
}

/// Defines additional types related to DeviceInfo
pub mod device_info {
    #[allow(unused_imports)]
    use super::*;

    /// An enumeration describing an API access portal and exposure mechanism.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct DeviceType(std::borrow::Cow<'static, str>);

    impl DeviceType {
        /// Creates a new DeviceType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [DeviceType](DeviceType)
    pub mod device_type {
        use super::DeviceType;

        /// The device type isn't specified.
        pub const DEVICE_TYPE_UNSPECIFIED: DeviceType = DeviceType::new("DEVICE_TYPE_UNSPECIFIED");

        /// A desktop web browser, such as, Chrome, Firefox, Safari, or Internet
        /// Explorer)
        pub const WEB: DeviceType = DeviceType::new("WEB");

        /// A mobile device web browser, such as a phone or tablet with a Chrome
        /// browser.
        pub const MOBILE_WEB: DeviceType = DeviceType::new("MOBILE_WEB");

        /// An Android device native application.
        pub const ANDROID: DeviceType = DeviceType::new("ANDROID");

        /// An iOS device native application.
        pub const IOS: DeviceType = DeviceType::new("IOS");

        /// A bot, as opposed to a device operated by human beings, such as a web
        /// crawler.
        pub const BOT: DeviceType = DeviceType::new("BOT");

        /// Other devices types.
        pub const OTHER: DeviceType = DeviceType::new("OTHER");
    }

    impl std::convert::From<std::string::String> for DeviceType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for DeviceType {
        fn default() -> Self {
            device_type::DEVICE_TYPE_UNSPECIFIED
        }
    }
}

/// Custom attribute values that are either filterable or non-filterable.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CustomAttribute {
    /// Exactly one of
    /// [string_values][google.cloud.talent.v4.CustomAttribute.string_values] or
    /// [long_values][google.cloud.talent.v4.CustomAttribute.long_values] must be
    /// specified.
    ///
    /// This field is used to perform a string match (`CASE_SENSITIVE_MATCH` or
    /// `CASE_INSENSITIVE_MATCH`) search.
    /// For filterable `string_value`s, a maximum total number of 200 values
    /// is allowed, with each `string_value` has a byte size of no more than
    /// 500B. For unfilterable `string_values`, the maximum total byte size of
    /// unfilterable `string_values` is 50KB.
    ///
    /// Empty string isn't allowed.
    ///
    /// [google.cloud.talent.v4.CustomAttribute.long_values]: crate::model::CustomAttribute::long_values
    /// [google.cloud.talent.v4.CustomAttribute.string_values]: crate::model::CustomAttribute::string_values
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub string_values: std::vec::Vec<std::string::String>,

    /// Exactly one of
    /// [string_values][google.cloud.talent.v4.CustomAttribute.string_values] or
    /// [long_values][google.cloud.talent.v4.CustomAttribute.long_values] must be
    /// specified.
    ///
    /// This field is used to perform number range search.
    /// (`EQ`, `GT`, `GE`, `LE`, `LT`) over filterable `long_value`.
    ///
    /// Currently at most 1
    /// [long_values][google.cloud.talent.v4.CustomAttribute.long_values] is
    /// supported.
    ///
    /// [google.cloud.talent.v4.CustomAttribute.long_values]: crate::model::CustomAttribute::long_values
    /// [google.cloud.talent.v4.CustomAttribute.string_values]: crate::model::CustomAttribute::string_values
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    #[serde_as(as = "std::vec::Vec<serde_with::DisplayFromStr>")]
    pub long_values: std::vec::Vec<i64>,

    /// If the `filterable` flag is true, the custom field values may be used for
    /// custom attribute filters
    /// [JobQuery.custom_attribute_filter][google.cloud.talent.v4.JobQuery.custom_attribute_filter].
    /// If false, these values may not be used for custom attribute filters.
    ///
    /// Default is false.
    ///
    /// [google.cloud.talent.v4.JobQuery.custom_attribute_filter]: crate::model::JobQuery::custom_attribute_filter
    pub filterable: bool,

    /// If the `keyword_searchable` flag is true, the keywords in custom fields are
    /// searchable by keyword match.
    /// If false, the values are not searchable by keyword match.
    ///
    /// Default is false.
    pub keyword_searchable: bool,
}

impl CustomAttribute {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [filterable][crate::model::CustomAttribute::filterable].
    pub fn set_filterable<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.filterable = v.into();
        self
    }

    /// Sets the value of [keyword_searchable][crate::model::CustomAttribute::keyword_searchable].
    pub fn set_keyword_searchable<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.keyword_searchable = v.into();
        self
    }

    /// Sets the value of [string_values][crate::model::CustomAttribute::string_values].
    pub fn set_string_values<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.string_values = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [long_values][crate::model::CustomAttribute::long_values].
    pub fn set_long_values<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<i64>,
    {
        use std::iter::Iterator;
        self.long_values = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CustomAttribute {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.CustomAttribute"
    }
}

/// Spell check result.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SpellingCorrection {
    /// Indicates if the query was corrected by the spell checker.
    pub corrected: bool,

    /// Correction output consisting of the corrected keyword string.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub corrected_text: std::string::String,

    /// Corrected output with html tags to highlight the corrected words.
    /// Corrected words are called out with the "\<b\>\<i\>...\</i\>\</b\>" html tags.
    ///
    /// For example, the user input query is "software enginear", where the second
    /// word, "enginear," is incorrect. It should be "engineer". When spelling
    /// correction is enabled, this value is
    /// "software \<b\>\<i\>engineer\</i\>\</b\>".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub corrected_html: std::string::String,
}

impl SpellingCorrection {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [corrected][crate::model::SpellingCorrection::corrected].
    pub fn set_corrected<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.corrected = v.into();
        self
    }

    /// Sets the value of [corrected_text][crate::model::SpellingCorrection::corrected_text].
    pub fn set_corrected_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.corrected_text = v.into();
        self
    }

    /// Sets the value of [corrected_html][crate::model::SpellingCorrection::corrected_html].
    pub fn set_corrected_html<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.corrected_html = v.into();
        self
    }
}

impl wkt::message::Message for SpellingCorrection {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.SpellingCorrection"
    }
}

/// Job compensation details.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CompensationInfo {
    /// Job compensation information.
    ///
    /// At most one entry can be of type
    /// [CompensationInfo.CompensationType.BASE][google.cloud.talent.v4.CompensationInfo.CompensationType.BASE],
    /// which is referred as **base compensation entry** for the job.
    ///
    /// [google.cloud.talent.v4.CompensationInfo.CompensationType.BASE]: crate::model::compensation_info::compensation_type::BASE
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub entries: std::vec::Vec<crate::model::compensation_info::CompensationEntry>,

    /// Output only. Annualized base compensation range. Computed as base
    /// compensation entry's
    /// [CompensationEntry.amount][google.cloud.talent.v4.CompensationInfo.CompensationEntry.amount]
    /// times
    /// [CompensationEntry.expected_units_per_year][google.cloud.talent.v4.CompensationInfo.CompensationEntry.expected_units_per_year].
    ///
    /// See
    /// [CompensationEntry][google.cloud.talent.v4.CompensationInfo.CompensationEntry]
    /// for explanation on compensation annualization.
    ///
    /// [google.cloud.talent.v4.CompensationInfo.CompensationEntry]: crate::model::compensation_info::CompensationEntry
    /// [google.cloud.talent.v4.CompensationInfo.CompensationEntry.amount]: crate::model::compensation_info::CompensationEntry::compensation_amount
    /// [google.cloud.talent.v4.CompensationInfo.CompensationEntry.expected_units_per_year]: crate::model::compensation_info::CompensationEntry::expected_units_per_year
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub annualized_base_compensation_range:
        std::option::Option<crate::model::compensation_info::CompensationRange>,

    /// Output only. Annualized total compensation range. Computed as all
    /// compensation entries'
    /// [CompensationEntry.amount][google.cloud.talent.v4.CompensationInfo.CompensationEntry.amount]
    /// times
    /// [CompensationEntry.expected_units_per_year][google.cloud.talent.v4.CompensationInfo.CompensationEntry.expected_units_per_year].
    ///
    /// See
    /// [CompensationEntry][google.cloud.talent.v4.CompensationInfo.CompensationEntry]
    /// for explanation on compensation annualization.
    ///
    /// [google.cloud.talent.v4.CompensationInfo.CompensationEntry]: crate::model::compensation_info::CompensationEntry
    /// [google.cloud.talent.v4.CompensationInfo.CompensationEntry.amount]: crate::model::compensation_info::CompensationEntry::compensation_amount
    /// [google.cloud.talent.v4.CompensationInfo.CompensationEntry.expected_units_per_year]: crate::model::compensation_info::CompensationEntry::expected_units_per_year
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub annualized_total_compensation_range:
        std::option::Option<crate::model::compensation_info::CompensationRange>,
}

impl CompensationInfo {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [annualized_base_compensation_range][crate::model::CompensationInfo::annualized_base_compensation_range].
    pub fn set_annualized_base_compensation_range<
        T: std::convert::Into<std::option::Option<crate::model::compensation_info::CompensationRange>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.annualized_base_compensation_range = v.into();
        self
    }

    /// Sets the value of [annualized_total_compensation_range][crate::model::CompensationInfo::annualized_total_compensation_range].
    pub fn set_annualized_total_compensation_range<
        T: std::convert::Into<std::option::Option<crate::model::compensation_info::CompensationRange>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.annualized_total_compensation_range = v.into();
        self
    }

    /// Sets the value of [entries][crate::model::CompensationInfo::entries].
    pub fn set_entries<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::compensation_info::CompensationEntry>,
    {
        use std::iter::Iterator;
        self.entries = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CompensationInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.CompensationInfo"
    }
}

/// Defines additional types related to CompensationInfo
pub mod compensation_info {
    #[allow(unused_imports)]
    use super::*;

    /// A compensation entry that represents one component of compensation, such
    /// as base pay, bonus, or other compensation type.
    ///
    /// Annualization: One compensation entry can be annualized if
    ///
    /// - it contains valid
    ///   [amount][google.cloud.talent.v4.CompensationInfo.CompensationEntry.amount]
    ///   or
    ///   [range][google.cloud.talent.v4.CompensationInfo.CompensationEntry.range].
    /// - and its
    ///   [expected_units_per_year][google.cloud.talent.v4.CompensationInfo.CompensationEntry.expected_units_per_year]
    ///   is set or can be derived. Its annualized range is determined as
    ///   ([amount][google.cloud.talent.v4.CompensationInfo.CompensationEntry.amount]
    ///   or
    ///   [range][google.cloud.talent.v4.CompensationInfo.CompensationEntry.range])
    ///   times
    ///   [expected_units_per_year][google.cloud.talent.v4.CompensationInfo.CompensationEntry.expected_units_per_year].
    ///
    /// [google.cloud.talent.v4.CompensationInfo.CompensationEntry.amount]: crate::model::compensation_info::CompensationEntry::compensation_amount
    /// [google.cloud.talent.v4.CompensationInfo.CompensationEntry.expected_units_per_year]: crate::model::compensation_info::CompensationEntry::expected_units_per_year
    /// [google.cloud.talent.v4.CompensationInfo.CompensationEntry.range]: crate::model::compensation_info::CompensationEntry::compensation_amount
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct CompensationEntry {
        /// Compensation type.
        ///
        /// Default is
        /// [CompensationType.COMPENSATION_TYPE_UNSPECIFIED][google.cloud.talent.v4.CompensationInfo.CompensationType.COMPENSATION_TYPE_UNSPECIFIED].
        ///
        /// [google.cloud.talent.v4.CompensationInfo.CompensationType.COMPENSATION_TYPE_UNSPECIFIED]: crate::model::compensation_info::compensation_type::COMPENSATION_TYPE_UNSPECIFIED
        #[serde(rename = "type")]
        pub r#type: crate::model::compensation_info::CompensationType,

        /// Frequency of the specified amount.
        ///
        /// Default is
        /// [CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED][google.cloud.talent.v4.CompensationInfo.CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED].
        ///
        /// [google.cloud.talent.v4.CompensationInfo.CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED]: crate::model::compensation_info::compensation_unit::COMPENSATION_UNIT_UNSPECIFIED
        pub unit: crate::model::compensation_info::CompensationUnit,

        /// Compensation description.  For example, could
        /// indicate equity terms or provide additional context to an estimated
        /// bonus.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub description: std::string::String,

        /// Expected number of units paid each year. If not specified, when
        /// [Job.employment_types][google.cloud.talent.v4.Job.employment_types] is
        /// FULLTIME, a default value is inferred based on
        /// [unit][google.cloud.talent.v4.CompensationInfo.CompensationEntry.unit].
        /// Default values:
        ///
        /// - HOURLY: 2080
        /// - DAILY: 260
        /// - WEEKLY: 52
        /// - MONTHLY: 12
        /// - ANNUAL: 1
        ///
        /// [google.cloud.talent.v4.CompensationInfo.CompensationEntry.unit]: crate::model::compensation_info::CompensationEntry::unit
        /// [google.cloud.talent.v4.Job.employment_types]: crate::model::Job::employment_types
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub expected_units_per_year: std::option::Option<wkt::DoubleValue>,

        /// Compensation amount. It could be a fixed amount or a floating range.
        #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
        pub compensation_amount: std::option::Option<
            crate::model::compensation_info::compensation_entry::CompensationAmount,
        >,
    }

    impl CompensationEntry {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [r#type][crate::model::compensation_info::CompensationEntry::type].
        pub fn set_type<
            T: std::convert::Into<crate::model::compensation_info::CompensationType>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.r#type = v.into();
            self
        }

        /// Sets the value of [unit][crate::model::compensation_info::CompensationEntry::unit].
        pub fn set_unit<
            T: std::convert::Into<crate::model::compensation_info::CompensationUnit>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.unit = v.into();
            self
        }

        /// Sets the value of [description][crate::model::compensation_info::CompensationEntry::description].
        pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.description = v.into();
            self
        }

        /// Sets the value of [expected_units_per_year][crate::model::compensation_info::CompensationEntry::expected_units_per_year].
        pub fn set_expected_units_per_year<
            T: std::convert::Into<std::option::Option<wkt::DoubleValue>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.expected_units_per_year = v.into();
            self
        }

        /// Sets the value of `compensation_amount`.
        pub fn set_compensation_amount<
            T: std::convert::Into<
                std::option::Option<
                    crate::model::compensation_info::compensation_entry::CompensationAmount,
                >,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.compensation_amount = v.into();
            self
        }

        /// The value of [compensation_amount][crate::model::compensation_info::CompensationEntry::compensation_amount]
        /// if it holds a `Amount`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_amount(&self) -> std::option::Option<&std::boxed::Box<gtype::model::Money>> {
            #[allow(unreachable_patterns)]
            self.compensation_amount.as_ref().and_then(|v| match v {
                crate::model::compensation_info::compensation_entry::CompensationAmount::Amount(
                    v,
                ) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// The value of [compensation_amount][crate::model::compensation_info::CompensationEntry::compensation_amount]
        /// if it holds a `Range`, `None` if the field is not set or
        /// holds a different branch.
        pub fn get_range(
            &self,
        ) -> std::option::Option<&std::boxed::Box<crate::model::compensation_info::CompensationRange>>
        {
            #[allow(unreachable_patterns)]
            self.compensation_amount.as_ref().and_then(|v| match v {
                crate::model::compensation_info::compensation_entry::CompensationAmount::Range(
                    v,
                ) => std::option::Option::Some(v),
                _ => std::option::Option::None,
            })
        }

        /// Sets the value of [compensation_amount][crate::model::compensation_info::CompensationEntry::compensation_amount]
        /// to hold a `Amount`.
        ///
        /// Note that all the setters affecting `compensation_amount` are
        /// mutually exclusive.
        pub fn set_amount<T: std::convert::Into<std::boxed::Box<gtype::model::Money>>>(
            mut self,
            v: T,
        ) -> Self {
            self.compensation_amount = std::option::Option::Some(
                crate::model::compensation_info::compensation_entry::CompensationAmount::Amount(
                    v.into(),
                ),
            );
            self
        }

        /// Sets the value of [compensation_amount][crate::model::compensation_info::CompensationEntry::compensation_amount]
        /// to hold a `Range`.
        ///
        /// Note that all the setters affecting `compensation_amount` are
        /// mutually exclusive.
        pub fn set_range<
            T: std::convert::Into<std::boxed::Box<crate::model::compensation_info::CompensationRange>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.compensation_amount = std::option::Option::Some(
                crate::model::compensation_info::compensation_entry::CompensationAmount::Range(
                    v.into(),
                ),
            );
            self
        }
    }

    impl wkt::message::Message for CompensationEntry {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.talent.v4.CompensationInfo.CompensationEntry"
        }
    }

    /// Defines additional types related to CompensationEntry
    pub mod compensation_entry {
        #[allow(unused_imports)]
        use super::*;

        /// Compensation amount. It could be a fixed amount or a floating range.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(rename_all = "camelCase")]
        #[non_exhaustive]
        pub enum CompensationAmount {
            /// Compensation amount.
            Amount(std::boxed::Box<gtype::model::Money>),
            /// Compensation range.
            Range(std::boxed::Box<crate::model::compensation_info::CompensationRange>),
        }
    }

    /// Compensation range.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct CompensationRange {
        /// The maximum amount of compensation. If left empty, the value is set
        /// to a maximal compensation value and the currency code is set to
        /// match the [currency code][google.type.Money.currency_code] of
        /// min_compensation.
        ///
        /// [google.type.Money.currency_code]: gtype::model::Money::currency_code
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub max_compensation: std::option::Option<gtype::model::Money>,

        /// The minimum amount of compensation. If left empty, the value is set
        /// to zero and the currency code is set to match the
        /// [currency code][google.type.Money.currency_code] of max_compensation.
        ///
        /// [google.type.Money.currency_code]: gtype::model::Money::currency_code
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub min_compensation: std::option::Option<gtype::model::Money>,
    }

    impl CompensationRange {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [max_compensation][crate::model::compensation_info::CompensationRange::max_compensation].
        pub fn set_max_compensation<
            T: std::convert::Into<std::option::Option<gtype::model::Money>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.max_compensation = v.into();
            self
        }

        /// Sets the value of [min_compensation][crate::model::compensation_info::CompensationRange::min_compensation].
        pub fn set_min_compensation<
            T: std::convert::Into<std::option::Option<gtype::model::Money>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.min_compensation = v.into();
            self
        }
    }

    impl wkt::message::Message for CompensationRange {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.talent.v4.CompensationInfo.CompensationRange"
        }
    }

    /// The type of compensation.
    ///
    /// For compensation amounts specified in non-monetary amounts,
    /// describe the compensation scheme in the
    /// [CompensationEntry.description][google.cloud.talent.v4.CompensationInfo.CompensationEntry.description].
    ///
    /// For example, tipping format is described in
    /// [CompensationEntry.description][google.cloud.talent.v4.CompensationInfo.CompensationEntry.description]
    /// (for example, "expect 15-20% tips based on customer bill.") and an estimate
    /// of the tips provided in
    /// [CompensationEntry.amount][google.cloud.talent.v4.CompensationInfo.CompensationEntry.amount]
    /// or
    /// [CompensationEntry.range][google.cloud.talent.v4.CompensationInfo.CompensationEntry.range]
    /// ($10 per hour).
    ///
    /// For example, equity is described in
    /// [CompensationEntry.description][google.cloud.talent.v4.CompensationInfo.CompensationEntry.description]
    /// (for example, "1% - 2% equity vesting over 4 years, 1 year cliff") and
    /// value estimated in
    /// [CompensationEntry.amount][google.cloud.talent.v4.CompensationInfo.CompensationEntry.amount]
    /// or
    /// [CompensationEntry.range][google.cloud.talent.v4.CompensationInfo.CompensationEntry.range].
    /// If no value estimate is possible, units are
    /// [CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED][google.cloud.talent.v4.CompensationInfo.CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED]
    /// and then further clarified in
    /// [CompensationEntry.description][google.cloud.talent.v4.CompensationInfo.CompensationEntry.description]
    /// field.
    ///
    /// [google.cloud.talent.v4.CompensationInfo.CompensationEntry.amount]: crate::model::compensation_info::CompensationEntry::compensation_amount
    /// [google.cloud.talent.v4.CompensationInfo.CompensationEntry.description]: crate::model::compensation_info::CompensationEntry::description
    /// [google.cloud.talent.v4.CompensationInfo.CompensationEntry.range]: crate::model::compensation_info::CompensationEntry::compensation_amount
    /// [google.cloud.talent.v4.CompensationInfo.CompensationUnit.COMPENSATION_UNIT_UNSPECIFIED]: crate::model::compensation_info::compensation_unit::COMPENSATION_UNIT_UNSPECIFIED
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct CompensationType(std::borrow::Cow<'static, str>);

    impl CompensationType {
        /// Creates a new CompensationType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [CompensationType](CompensationType)
    pub mod compensation_type {
        use super::CompensationType;

        /// Default value.
        pub const COMPENSATION_TYPE_UNSPECIFIED: CompensationType =
            CompensationType::new("COMPENSATION_TYPE_UNSPECIFIED");

        /// Base compensation: Refers to the fixed amount of money paid to an
        /// employee by an employer in return for work performed. Base compensation
        /// does not include benefits, bonuses or any other potential compensation
        /// from an employer.
        pub const BASE: CompensationType = CompensationType::new("BASE");

        /// Bonus.
        pub const BONUS: CompensationType = CompensationType::new("BONUS");

        /// Signing bonus.
        pub const SIGNING_BONUS: CompensationType = CompensationType::new("SIGNING_BONUS");

        /// Equity.
        pub const EQUITY: CompensationType = CompensationType::new("EQUITY");

        /// Profit sharing.
        pub const PROFIT_SHARING: CompensationType = CompensationType::new("PROFIT_SHARING");

        /// Commission.
        pub const COMMISSIONS: CompensationType = CompensationType::new("COMMISSIONS");

        /// Tips.
        pub const TIPS: CompensationType = CompensationType::new("TIPS");

        /// Other compensation type.
        pub const OTHER_COMPENSATION_TYPE: CompensationType =
            CompensationType::new("OTHER_COMPENSATION_TYPE");
    }

    impl std::convert::From<std::string::String> for CompensationType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for CompensationType {
        fn default() -> Self {
            compensation_type::COMPENSATION_TYPE_UNSPECIFIED
        }
    }

    /// Pay frequency.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct CompensationUnit(std::borrow::Cow<'static, str>);

    impl CompensationUnit {
        /// Creates a new CompensationUnit instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [CompensationUnit](CompensationUnit)
    pub mod compensation_unit {
        use super::CompensationUnit;

        /// Default value.
        pub const COMPENSATION_UNIT_UNSPECIFIED: CompensationUnit =
            CompensationUnit::new("COMPENSATION_UNIT_UNSPECIFIED");

        /// Hourly.
        pub const HOURLY: CompensationUnit = CompensationUnit::new("HOURLY");

        /// Daily.
        pub const DAILY: CompensationUnit = CompensationUnit::new("DAILY");

        /// Weekly
        pub const WEEKLY: CompensationUnit = CompensationUnit::new("WEEKLY");

        /// Monthly.
        pub const MONTHLY: CompensationUnit = CompensationUnit::new("MONTHLY");

        /// Yearly.
        pub const YEARLY: CompensationUnit = CompensationUnit::new("YEARLY");

        /// One time.
        pub const ONE_TIME: CompensationUnit = CompensationUnit::new("ONE_TIME");

        /// Other compensation units.
        pub const OTHER_COMPENSATION_UNIT: CompensationUnit =
            CompensationUnit::new("OTHER_COMPENSATION_UNIT");
    }

    impl std::convert::From<std::string::String> for CompensationUnit {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for CompensationUnit {
        fn default() -> Self {
            compensation_unit::COMPENSATION_UNIT_UNSPECIFIED
        }
    }
}

/// Metadata used for long running operations returned by CTS batch APIs.
/// It's used to replace
/// [google.longrunning.Operation.metadata][google.longrunning.Operation.metadata].
///
/// [google.longrunning.Operation.metadata]: longrunning::model::Operation::metadata
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchOperationMetadata {
    /// The state of a long running operation.
    pub state: crate::model::batch_operation_metadata::State,

    /// More detailed information about operation state.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub state_description: std::string::String,

    /// Count of successful item(s) inside an operation.
    pub success_count: i32,

    /// Count of failed item(s) inside an operation.
    pub failure_count: i32,

    /// Count of total item(s) inside an operation.
    pub total_count: i32,

    /// The time when the batch operation is created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// The time when the batch operation status is updated. The metadata and the
    /// [update_time][google.cloud.talent.v4.BatchOperationMetadata.update_time] is
    /// refreshed every minute otherwise cached data is returned.
    ///
    /// [google.cloud.talent.v4.BatchOperationMetadata.update_time]: crate::model::BatchOperationMetadata::update_time
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// The time when the batch operation is finished and
    /// [google.longrunning.Operation.done][google.longrunning.Operation.done] is
    /// set to `true`.
    ///
    /// [google.longrunning.Operation.done]: longrunning::model::Operation::done
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,
}

impl BatchOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [state][crate::model::BatchOperationMetadata::state].
    pub fn set_state<T: std::convert::Into<crate::model::batch_operation_metadata::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [state_description][crate::model::BatchOperationMetadata::state_description].
    pub fn set_state_description<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.state_description = v.into();
        self
    }

    /// Sets the value of [success_count][crate::model::BatchOperationMetadata::success_count].
    pub fn set_success_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.success_count = v.into();
        self
    }

    /// Sets the value of [failure_count][crate::model::BatchOperationMetadata::failure_count].
    pub fn set_failure_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.failure_count = v.into();
        self
    }

    /// Sets the value of [total_count][crate::model::BatchOperationMetadata::total_count].
    pub fn set_total_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.total_count = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::BatchOperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::BatchOperationMetadata::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::BatchOperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }
}

impl wkt::message::Message for BatchOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.BatchOperationMetadata"
    }
}

/// Defines additional types related to BatchOperationMetadata
pub mod batch_operation_metadata {
    #[allow(unused_imports)]
    use super::*;

    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(std::borrow::Cow<'static, str>);

    impl State {
        /// Creates a new State instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [State](State)
    pub mod state {
        use super::State;

        /// Default value.
        pub const STATE_UNSPECIFIED: State = State::new("STATE_UNSPECIFIED");

        /// The batch operation is being prepared for processing.
        pub const INITIALIZING: State = State::new("INITIALIZING");

        /// The batch operation is actively being processed.
        pub const PROCESSING: State = State::new("PROCESSING");

        /// The batch operation is processed, and at least one item has been
        /// successfully processed.
        pub const SUCCEEDED: State = State::new("SUCCEEDED");

        /// The batch operation is done and no item has been successfully processed.
        pub const FAILED: State = State::new("FAILED");

        /// The batch operation is in the process of cancelling after
        /// [google.longrunning.Operations.CancelOperation][google.longrunning.Operations.CancelOperation]
        /// is called.
        pub const CANCELLING: State = State::new("CANCELLING");

        /// The batch operation is done after
        /// [google.longrunning.Operations.CancelOperation][google.longrunning.Operations.CancelOperation]
        /// is called. Any items processed before cancelling are returned in the
        /// response.
        pub const CANCELLED: State = State::new("CANCELLED");
    }

    impl std::convert::From<std::string::String> for State {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            state::STATE_UNSPECIFIED
        }
    }
}

/// A Company resource represents a company in the service. A company is the
/// entity that owns job postings, that is, the hiring entity responsible for
/// employing applicants for the job position.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Company {
    /// Required during company update.
    ///
    /// The resource name for a company. This is generated by the service when a
    /// company is created.
    ///
    /// The format is
    /// "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}", for
    /// example, "projects/foo/tenants/bar/companies/baz".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The display name of the company, for example, "Google LLC".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,

    /// Required. Client side company identifier, used to uniquely identify the
    /// company.
    ///
    /// The maximum number of allowed characters is 255.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub external_id: std::string::String,

    /// The employer's company size.
    pub size: crate::model::CompanySize,

    /// The street address of the company's main headquarters, which may be
    /// different from the job location. The service attempts
    /// to geolocate the provided address, and populates a more specific
    /// location wherever possible in
    /// [DerivedInfo.headquarters_location][google.cloud.talent.v4.Company.DerivedInfo.headquarters_location].
    ///
    /// [google.cloud.talent.v4.Company.DerivedInfo.headquarters_location]: crate::model::company::DerivedInfo::headquarters_location
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub headquarters_address: std::string::String,

    /// Set to true if it is the hiring agency that post jobs for other
    /// employers.
    ///
    /// Defaults to false if not provided.
    pub hiring_agency: bool,

    /// Equal Employment Opportunity legal disclaimer text to be
    /// associated with all jobs, and typically to be displayed in all
    /// roles.
    ///
    /// The maximum number of allowed characters is 500.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub eeo_text: std::string::String,

    /// The URI representing the company's primary web site or home page,
    /// for example, `https://www.google.com`.
    ///
    /// The maximum number of allowed characters is 255.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub website_uri: std::string::String,

    /// The URI to employer's career site or careers page on the employer's web
    /// site, for example, `https://careers.google.com`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub career_site_uri: std::string::String,

    /// A URI that hosts the employer's company logo.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub image_uri: std::string::String,

    /// This field is deprecated. Please set the searchability of the custom
    /// attribute in the
    /// [Job.custom_attributes][google.cloud.talent.v4.Job.custom_attributes] going
    /// forward.
    ///
    /// A list of keys of filterable
    /// [Job.custom_attributes][google.cloud.talent.v4.Job.custom_attributes],
    /// whose corresponding `string_values` are used in keyword searches. Jobs with
    /// `string_values` under these specified field keys are returned if any
    /// of the values match the search keyword. Custom field values with
    /// parenthesis, brackets and special symbols are not searchable as-is,
    /// and those keyword queries must be surrounded by quotes.
    ///
    /// [google.cloud.talent.v4.Job.custom_attributes]: crate::model::Job::custom_attributes
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub keyword_searchable_job_custom_attributes: std::vec::Vec<std::string::String>,

    /// Output only. Derived details about the company.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub derived_info: std::option::Option<crate::model::company::DerivedInfo>,

    /// Output only. Indicates whether a company is flagged to be suspended from
    /// public availability by the service when job content appears suspicious,
    /// abusive, or spammy.
    pub suspended: bool,
}

impl Company {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Company::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::Company::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }

    /// Sets the value of [external_id][crate::model::Company::external_id].
    pub fn set_external_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.external_id = v.into();
        self
    }

    /// Sets the value of [size][crate::model::Company::size].
    pub fn set_size<T: std::convert::Into<crate::model::CompanySize>>(mut self, v: T) -> Self {
        self.size = v.into();
        self
    }

    /// Sets the value of [headquarters_address][crate::model::Company::headquarters_address].
    pub fn set_headquarters_address<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.headquarters_address = v.into();
        self
    }

    /// Sets the value of [hiring_agency][crate::model::Company::hiring_agency].
    pub fn set_hiring_agency<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.hiring_agency = v.into();
        self
    }

    /// Sets the value of [eeo_text][crate::model::Company::eeo_text].
    pub fn set_eeo_text<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.eeo_text = v.into();
        self
    }

    /// Sets the value of [website_uri][crate::model::Company::website_uri].
    pub fn set_website_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.website_uri = v.into();
        self
    }

    /// Sets the value of [career_site_uri][crate::model::Company::career_site_uri].
    pub fn set_career_site_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.career_site_uri = v.into();
        self
    }

    /// Sets the value of [image_uri][crate::model::Company::image_uri].
    pub fn set_image_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.image_uri = v.into();
        self
    }

    /// Sets the value of [derived_info][crate::model::Company::derived_info].
    pub fn set_derived_info<
        T: std::convert::Into<std::option::Option<crate::model::company::DerivedInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.derived_info = v.into();
        self
    }

    /// Sets the value of [suspended][crate::model::Company::suspended].
    pub fn set_suspended<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.suspended = v.into();
        self
    }

    /// Sets the value of [keyword_searchable_job_custom_attributes][crate::model::Company::keyword_searchable_job_custom_attributes].
    pub fn set_keyword_searchable_job_custom_attributes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.keyword_searchable_job_custom_attributes = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for Company {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.Company"
    }
}

/// Defines additional types related to Company
pub mod company {
    #[allow(unused_imports)]
    use super::*;

    /// Derived details about the company.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct DerivedInfo {
        /// A structured headquarters location of the company, resolved from
        /// [Company.headquarters_address][google.cloud.talent.v4.Company.headquarters_address]
        /// if provided.
        ///
        /// [google.cloud.talent.v4.Company.headquarters_address]: crate::model::Company::headquarters_address
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub headquarters_location: std::option::Option<crate::model::Location>,
    }

    impl DerivedInfo {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [headquarters_location][crate::model::company::DerivedInfo::headquarters_location].
        pub fn set_headquarters_location<
            T: std::convert::Into<std::option::Option<crate::model::Location>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.headquarters_location = v.into();
            self
        }
    }

    impl wkt::message::Message for DerivedInfo {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.talent.v4.Company.DerivedInfo"
        }
    }
}

/// The Request of the CreateCompany method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateCompanyRequest {
    /// Required. Resource name of the tenant under which the company is created.
    ///
    /// The format is "projects/{project_id}/tenants/{tenant_id}", for example,
    /// "projects/foo/tenants/bar".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The company to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub company: std::option::Option<crate::model::Company>,
}

impl CreateCompanyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateCompanyRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [company][crate::model::CreateCompanyRequest::company].
    pub fn set_company<T: std::convert::Into<std::option::Option<crate::model::Company>>>(
        mut self,
        v: T,
    ) -> Self {
        self.company = v.into();
        self
    }
}

impl wkt::message::Message for CreateCompanyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.CreateCompanyRequest"
    }
}

/// Request for getting a company by name.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetCompanyRequest {
    /// Required. The resource name of the company to be retrieved.
    ///
    /// The format is
    /// "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}", for
    /// example, "projects/api-test-project/tenants/foo/companies/bar".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetCompanyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetCompanyRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetCompanyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.GetCompanyRequest"
    }
}

/// Request for updating a specified company.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateCompanyRequest {
    /// Required. The company resource to replace the current resource in the
    /// system.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub company: std::option::Option<crate::model::Company>,

    /// Strongly recommended for the best service experience.
    ///
    /// If [update_mask][google.cloud.talent.v4.UpdateCompanyRequest.update_mask]
    /// is provided, only the specified fields in
    /// [company][google.cloud.talent.v4.UpdateCompanyRequest.company] are updated.
    /// Otherwise all the fields are updated.
    ///
    /// A field mask to specify the company fields to be updated. Only
    /// top level fields of [Company][google.cloud.talent.v4.Company] are
    /// supported.
    ///
    /// [google.cloud.talent.v4.Company]: crate::model::Company
    /// [google.cloud.talent.v4.UpdateCompanyRequest.company]: crate::model::UpdateCompanyRequest::company
    /// [google.cloud.talent.v4.UpdateCompanyRequest.update_mask]: crate::model::UpdateCompanyRequest::update_mask
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateCompanyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [company][crate::model::UpdateCompanyRequest::company].
    pub fn set_company<T: std::convert::Into<std::option::Option<crate::model::Company>>>(
        mut self,
        v: T,
    ) -> Self {
        self.company = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateCompanyRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateCompanyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.UpdateCompanyRequest"
    }
}

/// Request to delete a company.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteCompanyRequest {
    /// Required. The resource name of the company to be deleted.
    ///
    /// The format is
    /// "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}", for
    /// example, "projects/foo/tenants/bar/companies/baz".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteCompanyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteCompanyRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteCompanyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.DeleteCompanyRequest"
    }
}

/// List companies for which the client has ACL visibility.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListCompaniesRequest {
    /// Required. Resource name of the tenant under which the company is created.
    ///
    /// The format is "projects/{project_id}/tenants/{tenant_id}", for example,
    /// "projects/foo/tenants/bar".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The starting indicator from which to return results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// The maximum number of companies to be returned, at most 100.
    /// Default is 100 if a non-positive number is provided.
    pub page_size: i32,

    /// Set to true if the companies requested must have open jobs.
    ///
    /// Defaults to false.
    ///
    /// If true, at most
    /// [page_size][google.cloud.talent.v4.ListCompaniesRequest.page_size] of
    /// companies are fetched, among which only those with open jobs are returned.
    ///
    /// [google.cloud.talent.v4.ListCompaniesRequest.page_size]: crate::model::ListCompaniesRequest::page_size
    pub require_open_jobs: bool,
}

impl ListCompaniesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListCompaniesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListCompaniesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListCompaniesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [require_open_jobs][crate::model::ListCompaniesRequest::require_open_jobs].
    pub fn set_require_open_jobs<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.require_open_jobs = v.into();
        self
    }
}

impl wkt::message::Message for ListCompaniesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.ListCompaniesRequest"
    }
}

/// The List companies response object.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListCompaniesResponse {
    /// Companies for the current client.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub companies: std::vec::Vec<crate::model::Company>,

    /// A token to retrieve the next page of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Additional information for the API invocation, such as the request
    /// tracking id.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub metadata: std::option::Option<crate::model::ResponseMetadata>,
}

impl ListCompaniesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListCompaniesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [metadata][crate::model::ListCompaniesResponse::metadata].
    pub fn set_metadata<
        T: std::convert::Into<std::option::Option<crate::model::ResponseMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metadata = v.into();
        self
    }

    /// Sets the value of [companies][crate::model::ListCompaniesResponse::companies].
    pub fn set_companies<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Company>,
    {
        use std::iter::Iterator;
        self.companies = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListCompaniesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.ListCompaniesResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListCompaniesResponse {
    type PageItem = crate::model::Company;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.companies
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Auto-complete parameters.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CompleteQueryRequest {
    /// Required. Resource name of tenant the completion is performed within.
    ///
    /// The format is "projects/{project_id}/tenants/{tenant_id}", for example,
    /// "projects/foo/tenants/bar".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub tenant: std::string::String,

    /// Required. The query used to generate suggestions.
    ///
    /// The maximum number of allowed characters is 255.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub query: std::string::String,

    /// The list of languages of the query. This is
    /// the BCP-47 language code, such as "en-US" or "sr-Latn".
    /// For more information, see
    /// [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).
    ///
    /// The maximum number of allowed characters is 255.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub language_codes: std::vec::Vec<std::string::String>,

    /// Required. Completion result count.
    ///
    /// The maximum allowed page size is 10.
    pub page_size: i32,

    /// If provided, restricts completion to specified company.
    ///
    /// The format is
    /// "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}", for
    /// example, "projects/foo/tenants/bar/companies/baz".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub company: std::string::String,

    /// The scope of the completion. The defaults is
    /// [CompletionScope.PUBLIC][google.cloud.talent.v4.CompleteQueryRequest.CompletionScope.PUBLIC].
    ///
    /// [google.cloud.talent.v4.CompleteQueryRequest.CompletionScope.PUBLIC]: crate::model::complete_query_request::completion_scope::PUBLIC
    pub scope: crate::model::complete_query_request::CompletionScope,

    /// The completion topic. The default is
    /// [CompletionType.COMBINED][google.cloud.talent.v4.CompleteQueryRequest.CompletionType.COMBINED].
    ///
    /// [google.cloud.talent.v4.CompleteQueryRequest.CompletionType.COMBINED]: crate::model::complete_query_request::completion_type::COMBINED
    #[serde(rename = "type")]
    pub r#type: crate::model::complete_query_request::CompletionType,
}

impl CompleteQueryRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [tenant][crate::model::CompleteQueryRequest::tenant].
    pub fn set_tenant<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.tenant = v.into();
        self
    }

    /// Sets the value of [query][crate::model::CompleteQueryRequest::query].
    pub fn set_query<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::CompleteQueryRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [company][crate::model::CompleteQueryRequest::company].
    pub fn set_company<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.company = v.into();
        self
    }

    /// Sets the value of [scope][crate::model::CompleteQueryRequest::scope].
    pub fn set_scope<
        T: std::convert::Into<crate::model::complete_query_request::CompletionScope>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.scope = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::CompleteQueryRequest::type].
    pub fn set_type<T: std::convert::Into<crate::model::complete_query_request::CompletionType>>(
        mut self,
        v: T,
    ) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [language_codes][crate::model::CompleteQueryRequest::language_codes].
    pub fn set_language_codes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.language_codes = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CompleteQueryRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.CompleteQueryRequest"
    }
}

/// Defines additional types related to CompleteQueryRequest
pub mod complete_query_request {
    #[allow(unused_imports)]
    use super::*;

    /// Enum to specify the scope of completion.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct CompletionScope(std::borrow::Cow<'static, str>);

    impl CompletionScope {
        /// Creates a new CompletionScope instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [CompletionScope](CompletionScope)
    pub mod completion_scope {
        use super::CompletionScope;

        /// Default value.
        pub const COMPLETION_SCOPE_UNSPECIFIED: CompletionScope =
            CompletionScope::new("COMPLETION_SCOPE_UNSPECIFIED");

        /// Suggestions are based only on the data provided by the client.
        pub const TENANT: CompletionScope = CompletionScope::new("TENANT");

        /// Suggestions are based on all jobs data in the system that's visible to
        /// the client
        pub const PUBLIC: CompletionScope = CompletionScope::new("PUBLIC");
    }

    impl std::convert::From<std::string::String> for CompletionScope {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for CompletionScope {
        fn default() -> Self {
            completion_scope::COMPLETION_SCOPE_UNSPECIFIED
        }
    }

    /// Enum to specify auto-completion topics.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct CompletionType(std::borrow::Cow<'static, str>);

    impl CompletionType {
        /// Creates a new CompletionType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [CompletionType](CompletionType)
    pub mod completion_type {
        use super::CompletionType;

        /// Default value.
        pub const COMPLETION_TYPE_UNSPECIFIED: CompletionType =
            CompletionType::new("COMPLETION_TYPE_UNSPECIFIED");

        /// Suggest job titles for jobs autocomplete.
        ///
        /// For
        /// [CompletionType.JOB_TITLE][google.cloud.talent.v4.CompleteQueryRequest.CompletionType.JOB_TITLE]
        /// type, only open jobs with the same
        /// [language_codes][google.cloud.talent.v4.CompleteQueryRequest.language_codes]
        /// are returned.
        ///
        /// [google.cloud.talent.v4.CompleteQueryRequest.CompletionType.JOB_TITLE]: crate::model::complete_query_request::completion_type::JOB_TITLE
        /// [google.cloud.talent.v4.CompleteQueryRequest.language_codes]: crate::model::CompleteQueryRequest::language_codes
        pub const JOB_TITLE: CompletionType = CompletionType::new("JOB_TITLE");

        /// Suggest company names for jobs autocomplete.
        ///
        /// For
        /// [CompletionType.COMPANY_NAME][google.cloud.talent.v4.CompleteQueryRequest.CompletionType.COMPANY_NAME]
        /// type, only companies having open jobs with the same
        /// [language_codes][google.cloud.talent.v4.CompleteQueryRequest.language_codes]
        /// are returned.
        ///
        /// [google.cloud.talent.v4.CompleteQueryRequest.CompletionType.COMPANY_NAME]: crate::model::complete_query_request::completion_type::COMPANY_NAME
        /// [google.cloud.talent.v4.CompleteQueryRequest.language_codes]: crate::model::CompleteQueryRequest::language_codes
        pub const COMPANY_NAME: CompletionType = CompletionType::new("COMPANY_NAME");

        /// Suggest both job titles and company names for jobs autocomplete.
        ///
        /// For
        /// [CompletionType.COMBINED][google.cloud.talent.v4.CompleteQueryRequest.CompletionType.COMBINED]
        /// type, only open jobs with the same
        /// [language_codes][google.cloud.talent.v4.CompleteQueryRequest.language_codes]
        /// or companies having open jobs with the same
        /// [language_codes][google.cloud.talent.v4.CompleteQueryRequest.language_codes]
        /// are returned.
        ///
        /// [google.cloud.talent.v4.CompleteQueryRequest.CompletionType.COMBINED]: crate::model::complete_query_request::completion_type::COMBINED
        /// [google.cloud.talent.v4.CompleteQueryRequest.language_codes]: crate::model::CompleteQueryRequest::language_codes
        pub const COMBINED: CompletionType = CompletionType::new("COMBINED");
    }

    impl std::convert::From<std::string::String> for CompletionType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for CompletionType {
        fn default() -> Self {
            completion_type::COMPLETION_TYPE_UNSPECIFIED
        }
    }
}

/// Response of auto-complete query.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CompleteQueryResponse {
    /// Results of the matching job/company candidates.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub completion_results: std::vec::Vec<crate::model::complete_query_response::CompletionResult>,

    /// Additional information for the API invocation, such as the request
    /// tracking id.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub metadata: std::option::Option<crate::model::ResponseMetadata>,
}

impl CompleteQueryResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [metadata][crate::model::CompleteQueryResponse::metadata].
    pub fn set_metadata<
        T: std::convert::Into<std::option::Option<crate::model::ResponseMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metadata = v.into();
        self
    }

    /// Sets the value of [completion_results][crate::model::CompleteQueryResponse::completion_results].
    pub fn set_completion_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::complete_query_response::CompletionResult>,
    {
        use std::iter::Iterator;
        self.completion_results = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CompleteQueryResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.CompleteQueryResponse"
    }
}

/// Defines additional types related to CompleteQueryResponse
pub mod complete_query_response {
    #[allow(unused_imports)]
    use super::*;

    /// Resource that represents completion results.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct CompletionResult {
        /// The suggestion for the query.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub suggestion: std::string::String,

        /// The completion topic.
        #[serde(rename = "type")]
        pub r#type: crate::model::complete_query_request::CompletionType,

        /// The URI of the company image for
        /// [COMPANY_NAME][google.cloud.talent.v4.CompleteQueryRequest.CompletionType.COMPANY_NAME].
        ///
        /// [google.cloud.talent.v4.CompleteQueryRequest.CompletionType.COMPANY_NAME]: crate::model::complete_query_request::completion_type::COMPANY_NAME
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub image_uri: std::string::String,
    }

    impl CompletionResult {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [suggestion][crate::model::complete_query_response::CompletionResult::suggestion].
        pub fn set_suggestion<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.suggestion = v.into();
            self
        }

        /// Sets the value of [r#type][crate::model::complete_query_response::CompletionResult::type].
        pub fn set_type<
            T: std::convert::Into<crate::model::complete_query_request::CompletionType>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.r#type = v.into();
            self
        }

        /// Sets the value of [image_uri][crate::model::complete_query_response::CompletionResult::image_uri].
        pub fn set_image_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.image_uri = v.into();
            self
        }
    }

    impl wkt::message::Message for CompletionResult {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.talent.v4.CompleteQueryResponse.CompletionResult"
        }
    }
}

/// An event issued when an end user interacts with the application that
/// implements Cloud Talent Solution. Providing this information improves the
/// quality of results for the API clients, enabling the
/// service to perform optimally. The number of events sent must be consistent
/// with other calls, such as job searches, issued to the service by the client.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ClientEvent {
    /// Strongly recommended for the best service experience.
    ///
    /// A unique ID generated in the API responses. It can be found in
    /// [ResponseMetadata.request_id][google.cloud.talent.v4.ResponseMetadata.request_id].
    ///
    /// [google.cloud.talent.v4.ResponseMetadata.request_id]: crate::model::ResponseMetadata::request_id
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Required. A unique identifier, generated by the client application.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub event_id: std::string::String,

    /// Required. The timestamp of the event.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Notes about the event provided by recruiters or other users, for example,
    /// feedback on why a job was bookmarked.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub event_notes: std::string::String,

    /// Required.
    ///
    /// The detail information of a specific event type.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub event: std::option::Option<crate::model::client_event::Event>,
}

impl ClientEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [request_id][crate::model::ClientEvent::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [event_id][crate::model::ClientEvent::event_id].
    pub fn set_event_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.event_id = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ClientEvent::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [event_notes][crate::model::ClientEvent::event_notes].
    pub fn set_event_notes<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.event_notes = v.into();
        self
    }

    /// Sets the value of `event`.
    pub fn set_event<
        T: std::convert::Into<std::option::Option<crate::model::client_event::Event>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.event = v.into();
        self
    }

    /// The value of [event][crate::model::ClientEvent::event]
    /// if it holds a `JobEvent`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_job_event(&self) -> std::option::Option<&std::boxed::Box<crate::model::JobEvent>> {
        #[allow(unreachable_patterns)]
        self.event.as_ref().and_then(|v| match v {
            crate::model::client_event::Event::JobEvent(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [event][crate::model::ClientEvent::event]
    /// to hold a `JobEvent`.
    ///
    /// Note that all the setters affecting `event` are
    /// mutually exclusive.
    pub fn set_job_event<T: std::convert::Into<std::boxed::Box<crate::model::JobEvent>>>(
        mut self,
        v: T,
    ) -> Self {
        self.event =
            std::option::Option::Some(crate::model::client_event::Event::JobEvent(v.into()));
        self
    }
}

impl wkt::message::Message for ClientEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.ClientEvent"
    }
}

/// Defines additional types related to ClientEvent
pub mod client_event {
    #[allow(unused_imports)]
    use super::*;

    /// Required.
    ///
    /// The detail information of a specific event type.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Event {
        /// An event issued when a job seeker interacts with the application that
        /// implements Cloud Talent Solution.
        JobEvent(std::boxed::Box<crate::model::JobEvent>),
    }
}

/// An event issued when a job seeker interacts with the application that
/// implements Cloud Talent Solution.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct JobEvent {
    /// Required. The type of the event (see
    /// [JobEventType][google.cloud.talent.v4.JobEvent.JobEventType]).
    ///
    /// [google.cloud.talent.v4.JobEvent.JobEventType]: crate::model::job_event::JobEventType
    #[serde(rename = "type")]
    pub r#type: crate::model::job_event::JobEventType,

    /// Required. The [job name(s)][google.cloud.talent.v4.Job.name] associated
    /// with this event. For example, if this is an
    /// [impression][google.cloud.talent.v4.JobEvent.JobEventType.IMPRESSION]
    /// event, this field contains the identifiers of all jobs shown to the job
    /// seeker. If this was a
    /// [view][google.cloud.talent.v4.JobEvent.JobEventType.VIEW] event, this field
    /// contains the identifier of the viewed job.
    ///
    /// The format is
    /// "projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}", for
    /// example, "projects/foo/tenants/bar/jobs/baz".
    ///
    /// [google.cloud.talent.v4.Job.name]: crate::model::Job::name
    /// [google.cloud.talent.v4.JobEvent.JobEventType.IMPRESSION]: crate::model::job_event::job_event_type::IMPRESSION
    /// [google.cloud.talent.v4.JobEvent.JobEventType.VIEW]: crate::model::job_event::job_event_type::VIEW
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub jobs: std::vec::Vec<std::string::String>,
}

impl JobEvent {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [r#type][crate::model::JobEvent::type].
    pub fn set_type<T: std::convert::Into<crate::model::job_event::JobEventType>>(
        mut self,
        v: T,
    ) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [jobs][crate::model::JobEvent::jobs].
    pub fn set_jobs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.jobs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for JobEvent {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.JobEvent"
    }
}

/// Defines additional types related to JobEvent
pub mod job_event {
    #[allow(unused_imports)]
    use super::*;

    /// An enumeration of an event attributed to the behavior of the end user,
    /// such as a job seeker.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct JobEventType(std::borrow::Cow<'static, str>);

    impl JobEventType {
        /// Creates a new JobEventType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [JobEventType](JobEventType)
    pub mod job_event_type {
        use super::JobEventType;

        /// The event is unspecified by other provided values.
        pub const JOB_EVENT_TYPE_UNSPECIFIED: JobEventType =
            JobEventType::new("JOB_EVENT_TYPE_UNSPECIFIED");

        /// The job seeker or other entity interacting with the service has
        /// had a job rendered in their view, such as in a list of search results in
        /// a compressed or clipped format. This event is typically associated with
        /// the viewing of a jobs list on a single page by a job seeker.
        pub const IMPRESSION: JobEventType = JobEventType::new("IMPRESSION");

        /// The job seeker, or other entity interacting with the service, has
        /// viewed the details of a job, including the full description. This
        /// event doesn't apply to the viewing a snippet of a job appearing as a
        /// part of the job search results. Viewing a snippet is associated with an
        /// [impression][google.cloud.talent.v4.JobEvent.JobEventType.IMPRESSION]).
        ///
        /// [google.cloud.talent.v4.JobEvent.JobEventType.IMPRESSION]: crate::model::job_event::job_event_type::IMPRESSION
        pub const VIEW: JobEventType = JobEventType::new("VIEW");

        /// The job seeker or other entity interacting with the service
        /// performed an action to view a job and was redirected to a different
        /// website for job.
        pub const VIEW_REDIRECT: JobEventType = JobEventType::new("VIEW_REDIRECT");

        /// The job seeker or other entity interacting with the service
        /// began the process or demonstrated the intention of applying for a job.
        pub const APPLICATION_START: JobEventType = JobEventType::new("APPLICATION_START");

        /// The job seeker or other entity interacting with the service
        /// submitted an application for a job.
        pub const APPLICATION_FINISH: JobEventType = JobEventType::new("APPLICATION_FINISH");

        /// The job seeker or other entity interacting with the service
        /// submitted an application for a job with a single click without
        /// entering information. If a job seeker performs this action, send only
        /// this event to the service. Do not also send
        /// [JobEventType.APPLICATION_START][google.cloud.talent.v4.JobEvent.JobEventType.APPLICATION_START]
        /// or
        /// [JobEventType.APPLICATION_FINISH][google.cloud.talent.v4.JobEvent.JobEventType.APPLICATION_FINISH]
        /// events.
        ///
        /// [google.cloud.talent.v4.JobEvent.JobEventType.APPLICATION_FINISH]: crate::model::job_event::job_event_type::APPLICATION_FINISH
        /// [google.cloud.talent.v4.JobEvent.JobEventType.APPLICATION_START]: crate::model::job_event::job_event_type::APPLICATION_START
        pub const APPLICATION_QUICK_SUBMISSION: JobEventType =
            JobEventType::new("APPLICATION_QUICK_SUBMISSION");

        /// The job seeker or other entity interacting with the service
        /// performed an action to apply to a job and was redirected to a different
        /// website to complete the application.
        pub const APPLICATION_REDIRECT: JobEventType = JobEventType::new("APPLICATION_REDIRECT");

        /// The job seeker or other entity interacting with the service began the
        /// process or demonstrated the intention of applying for a job from the
        /// search results page without viewing the details of the job posting.
        /// If sending this event, JobEventType.VIEW event shouldn't be sent.
        pub const APPLICATION_START_FROM_SEARCH: JobEventType =
            JobEventType::new("APPLICATION_START_FROM_SEARCH");

        /// The job seeker, or other entity interacting with the service, performs an
        /// action with a single click from the search results page to apply to a job
        /// (without viewing the details of the job posting), and is redirected
        /// to a different website to complete the application. If a candidate
        /// performs this action, send only this event to the service. Do not also
        /// send
        /// [JobEventType.APPLICATION_START][google.cloud.talent.v4.JobEvent.JobEventType.APPLICATION_START],
        /// [JobEventType.APPLICATION_FINISH][google.cloud.talent.v4.JobEvent.JobEventType.APPLICATION_FINISH]
        /// or [JobEventType.VIEW][google.cloud.talent.v4.JobEvent.JobEventType.VIEW]
        /// events.
        ///
        /// [google.cloud.talent.v4.JobEvent.JobEventType.APPLICATION_FINISH]: crate::model::job_event::job_event_type::APPLICATION_FINISH
        /// [google.cloud.talent.v4.JobEvent.JobEventType.APPLICATION_START]: crate::model::job_event::job_event_type::APPLICATION_START
        /// [google.cloud.talent.v4.JobEvent.JobEventType.VIEW]: crate::model::job_event::job_event_type::VIEW
        pub const APPLICATION_REDIRECT_FROM_SEARCH: JobEventType =
            JobEventType::new("APPLICATION_REDIRECT_FROM_SEARCH");

        /// This event should be used when a company submits an application
        /// on behalf of a job seeker. This event is intended for use by staffing
        /// agencies attempting to place candidates.
        pub const APPLICATION_COMPANY_SUBMIT: JobEventType =
            JobEventType::new("APPLICATION_COMPANY_SUBMIT");

        /// The job seeker or other entity interacting with the service demonstrated
        /// an interest in a job by bookmarking or saving it.
        pub const BOOKMARK: JobEventType = JobEventType::new("BOOKMARK");

        /// The job seeker or other entity interacting with the service was
        /// sent a notification, such as an email alert or device notification,
        /// containing one or more jobs listings generated by the service.
        pub const NOTIFICATION: JobEventType = JobEventType::new("NOTIFICATION");

        /// The job seeker or other entity interacting with the service was
        /// employed by the hiring entity (employer). Send this event
        /// only if the job seeker was hired through an application that was
        /// initiated by a search conducted through the Cloud Talent Solution
        /// service.
        pub const HIRED: JobEventType = JobEventType::new("HIRED");

        /// A recruiter or staffing agency submitted an application on behalf of the
        /// candidate after interacting with the service to identify a suitable job
        /// posting.
        pub const SENT_CV: JobEventType = JobEventType::new("SENT_CV");

        /// The entity interacting with the service (for example, the job seeker),
        /// was granted an initial interview by the hiring entity (employer). This
        /// event should only be sent if the job seeker was granted an interview as
        /// part of an application that was initiated by a search conducted through /
        /// recommendation provided by the Cloud Talent Solution service.
        pub const INTERVIEW_GRANTED: JobEventType = JobEventType::new("INTERVIEW_GRANTED");
    }

    impl std::convert::From<std::string::String> for JobEventType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for JobEventType {
        fn default() -> Self {
            job_event_type::JOB_EVENT_TYPE_UNSPECIFIED
        }
    }
}

/// The report event request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateClientEventRequest {
    /// Required. Resource name of the tenant under which the event is created.
    ///
    /// The format is "projects/{project_id}/tenants/{tenant_id}", for example,
    /// "projects/foo/tenants/bar".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Events issued when end user interacts with customer's application
    /// that uses Cloud Talent Solution.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub client_event: std::option::Option<crate::model::ClientEvent>,
}

impl CreateClientEventRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateClientEventRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [client_event][crate::model::CreateClientEventRequest::client_event].
    pub fn set_client_event<
        T: std::convert::Into<std::option::Option<crate::model::ClientEvent>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.client_event = v.into();
        self
    }
}

impl wkt::message::Message for CreateClientEventRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.CreateClientEventRequest"
    }
}

/// The query required to perform a search query.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct JobQuery {
    /// The query string that matches against the job title, description, and
    /// location fields.
    ///
    /// The maximum number of allowed characters is 255.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub query: std::string::String,

    /// The language code of [query][google.cloud.talent.v4.JobQuery.query]. For
    /// example, "en-US". This field helps to better interpret the query.
    ///
    /// If a value isn't specified, the query language code is automatically
    /// detected, which may not be accurate.
    ///
    /// Language code should be in BCP-47 format, such as "en-US" or "sr-Latn".
    /// For more information, see
    /// [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).
    ///
    /// [google.cloud.talent.v4.JobQuery.query]: crate::model::JobQuery::query
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub query_language_code: std::string::String,

    /// This filter specifies the company entities to search against.
    ///
    /// If a value isn't specified, jobs are searched for against all
    /// companies.
    ///
    /// If multiple values are specified, jobs are searched against the
    /// companies specified.
    ///
    /// The format is
    /// "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}". For
    /// example, "projects/foo/tenants/bar/companies/baz".
    ///
    /// At most 20 company filters are allowed.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub companies: std::vec::Vec<std::string::String>,

    /// The location filter specifies geo-regions containing the jobs to
    /// search against. See [LocationFilter][google.cloud.talent.v4.LocationFilter]
    /// for more information.
    ///
    /// If a location value isn't specified, jobs fitting the other search
    /// criteria are retrieved regardless of where they're located.
    ///
    /// If multiple values are specified, jobs are retrieved from any of the
    /// specified locations. If different values are specified for the
    /// [LocationFilter.distance_in_miles][google.cloud.talent.v4.LocationFilter.distance_in_miles]
    /// parameter, the maximum provided distance is used for all locations.
    ///
    /// At most 5 location filters are allowed.
    ///
    /// [google.cloud.talent.v4.LocationFilter]: crate::model::LocationFilter
    /// [google.cloud.talent.v4.LocationFilter.distance_in_miles]: crate::model::LocationFilter::distance_in_miles
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub location_filters: std::vec::Vec<crate::model::LocationFilter>,

    /// The category filter specifies the categories of jobs to search against.
    /// See [JobCategory][google.cloud.talent.v4.JobCategory] for more information.
    ///
    /// If a value isn't specified, jobs from any category are searched against.
    ///
    /// If multiple values are specified, jobs from any of the specified
    /// categories are searched against.
    ///
    /// [google.cloud.talent.v4.JobCategory]: crate::model::JobCategory
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub job_categories: std::vec::Vec<crate::model::JobCategory>,

    /// Allows filtering jobs by commute time with different travel methods (for
    /// example, driving or public transit).
    ///
    /// Note: This only works when you specify a
    /// [CommuteMethod][google.cloud.talent.v4.CommuteMethod]. In this case,
    /// [location_filters][google.cloud.talent.v4.JobQuery.location_filters] is
    /// ignored.
    ///
    /// Currently we don't support sorting by commute time.
    ///
    /// [google.cloud.talent.v4.CommuteMethod]: crate::model::CommuteMethod
    /// [google.cloud.talent.v4.JobQuery.location_filters]: crate::model::JobQuery::location_filters
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub commute_filter: std::option::Option<crate::model::CommuteFilter>,

    /// This filter specifies the company
    /// [Company.display_name][google.cloud.talent.v4.Company.display_name] of the
    /// jobs to search against. The company name must match the value exactly.
    ///
    /// Alternatively, the value being searched for can be wrapped in different
    /// match operators.
    /// `SUBSTRING_MATCH([value])`
    /// The company name must contain a case insensitive substring match of the
    /// value. Using this function may increase latency.
    ///
    /// Sample Value: `SUBSTRING_MATCH(google)`
    ///
    /// `MULTI_WORD_TOKEN_MATCH([value])`
    /// The value will be treated as a multi word token and the company name must
    /// contain a case insensitive match of the value. Using this function may
    /// increase latency.
    ///
    /// Sample Value: `MULTI_WORD_TOKEN_MATCH(google)`
    ///
    /// If a value isn't specified, jobs within the search results are
    /// associated with any company.
    ///
    /// If multiple values are specified, jobs within the search results may be
    /// associated with any of the specified companies.
    ///
    /// At most 20 company display name filters are allowed.
    ///
    /// [google.cloud.talent.v4.Company.display_name]: crate::model::Company::display_name
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub company_display_names: std::vec::Vec<std::string::String>,

    /// This search filter is applied only to
    /// [Job.compensation_info][google.cloud.talent.v4.Job.compensation_info]. For
    /// example, if the filter is specified as "Hourly job with per-hour
    /// compensation > $15", only jobs meeting these criteria are searched. If a
    /// filter isn't defined, all open jobs are searched.
    ///
    /// [google.cloud.talent.v4.Job.compensation_info]: crate::model::Job::compensation_info
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub compensation_filter: std::option::Option<crate::model::CompensationFilter>,

    /// This filter specifies a structured syntax to match against the
    /// [Job.custom_attributes][google.cloud.talent.v4.Job.custom_attributes]
    /// marked as `filterable`.
    ///
    /// The syntax for this expression is a subset of SQL syntax.
    ///
    /// Supported operators are: `=`, `!=`, `<`, `<=`, `>`, and `>=` where the
    /// left of the operator is a custom field key and the right of the operator
    /// is a number or a quoted string. You must escape backslash (\\) and
    /// quote (\") characters.
    ///
    /// Supported functions are `LOWER([field_name])` to
    /// perform a case insensitive match and `EMPTY([field_name])` to filter on the
    /// existence of a key.
    ///
    /// Boolean expressions (AND/OR/NOT) are supported up to 3 levels of
    /// nesting (for example, "((A AND B AND C) OR NOT D) AND E"), a maximum of 100
    /// comparisons or functions are allowed in the expression. The expression
    /// must be < 10000 bytes in length.
    ///
    /// Sample Query:
    /// `(LOWER(driving_license)="class \"a\"" OR EMPTY(driving_license)) AND
    /// driving_years > 10`
    ///
    /// [google.cloud.talent.v4.Job.custom_attributes]: crate::model::Job::custom_attributes
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub custom_attribute_filter: std::string::String,

    /// This flag controls the spell-check feature. If false, the
    /// service attempts to correct a misspelled query,
    /// for example, "enginee" is corrected to "engineer".
    ///
    /// Defaults to false: a spell check is performed.
    pub disable_spell_check: bool,

    /// The employment type filter specifies the employment type of jobs to
    /// search against, such as
    /// [EmploymentType.FULL_TIME][google.cloud.talent.v4.EmploymentType.FULL_TIME].
    ///
    /// If a value isn't specified, jobs in the search results includes any
    /// employment type.
    ///
    /// If multiple values are specified, jobs in the search results include
    /// any of the specified employment types.
    ///
    /// [google.cloud.talent.v4.EmploymentType.FULL_TIME]: crate::model::employment_type::FULL_TIME
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub employment_types: std::vec::Vec<crate::model::EmploymentType>,

    /// This filter specifies the locale of jobs to search against,
    /// for example, "en-US".
    ///
    /// If a value isn't specified, the search results can contain jobs in any
    /// locale.
    ///
    /// Language codes should be in BCP-47 format, such as "en-US" or "sr-Latn".
    /// For more information, see
    /// [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47).
    ///
    /// At most 10 language code filters are allowed.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub language_codes: std::vec::Vec<std::string::String>,

    /// Jobs published within a range specified by this filter are searched
    /// against.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub publish_time_range: std::option::Option<crate::model::TimestampRange>,

    /// This filter specifies a list of job names to be excluded during search.
    ///
    /// At most 400 excluded job names are allowed.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub excluded_jobs: std::vec::Vec<std::string::String>,
}

impl JobQuery {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [query][crate::model::JobQuery::query].
    pub fn set_query<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.query = v.into();
        self
    }

    /// Sets the value of [query_language_code][crate::model::JobQuery::query_language_code].
    pub fn set_query_language_code<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.query_language_code = v.into();
        self
    }

    /// Sets the value of [commute_filter][crate::model::JobQuery::commute_filter].
    pub fn set_commute_filter<
        T: std::convert::Into<std::option::Option<crate::model::CommuteFilter>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.commute_filter = v.into();
        self
    }

    /// Sets the value of [compensation_filter][crate::model::JobQuery::compensation_filter].
    pub fn set_compensation_filter<
        T: std::convert::Into<std::option::Option<crate::model::CompensationFilter>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.compensation_filter = v.into();
        self
    }

    /// Sets the value of [custom_attribute_filter][crate::model::JobQuery::custom_attribute_filter].
    pub fn set_custom_attribute_filter<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.custom_attribute_filter = v.into();
        self
    }

    /// Sets the value of [disable_spell_check][crate::model::JobQuery::disable_spell_check].
    pub fn set_disable_spell_check<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.disable_spell_check = v.into();
        self
    }

    /// Sets the value of [publish_time_range][crate::model::JobQuery::publish_time_range].
    pub fn set_publish_time_range<
        T: std::convert::Into<std::option::Option<crate::model::TimestampRange>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.publish_time_range = v.into();
        self
    }

    /// Sets the value of [companies][crate::model::JobQuery::companies].
    pub fn set_companies<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.companies = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [location_filters][crate::model::JobQuery::location_filters].
    pub fn set_location_filters<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::LocationFilter>,
    {
        use std::iter::Iterator;
        self.location_filters = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [job_categories][crate::model::JobQuery::job_categories].
    pub fn set_job_categories<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::JobCategory>,
    {
        use std::iter::Iterator;
        self.job_categories = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [company_display_names][crate::model::JobQuery::company_display_names].
    pub fn set_company_display_names<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.company_display_names = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [employment_types][crate::model::JobQuery::employment_types].
    pub fn set_employment_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EmploymentType>,
    {
        use std::iter::Iterator;
        self.employment_types = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [language_codes][crate::model::JobQuery::language_codes].
    pub fn set_language_codes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.language_codes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [excluded_jobs][crate::model::JobQuery::excluded_jobs].
    pub fn set_excluded_jobs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.excluded_jobs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for JobQuery {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.JobQuery"
    }
}

/// Geographic region of the search.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LocationFilter {
    /// The address name, such as "Mountain View" or "Bay Area".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub address: std::string::String,

    /// CLDR region code of the country/region. This field may be used in two ways:
    ///
    /// ) If telecommute preference is not set, this field is used address
    ///   ambiguity of the user-input address. For example, "Liverpool" may refer to
    ///   "Liverpool, NY, US" or "Liverpool, UK". This region code biases the
    ///   address resolution toward a specific country or territory. If this field is
    ///   not set, address resolution is biased toward the United States by default.
    ///
    /// ) If telecommute preference is set to TELECOMMUTE_ALLOWED, the
    ///   telecommute location filter will be limited to the region specified in this
    ///   field. If this field is not set, the telecommute job locations will not be
    ///
    ///
    /// See
    /// <https://unicode-org.github.io/cldr-staging/charts/latest/supplemental/territory_information.html>
    /// for details. Example: "CH" for Switzerland.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub region_code: std::string::String,

    /// The latitude and longitude of the geographic center to search from. This
    /// field is ignored if `address` is provided.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub lat_lng: std::option::Option<gtype::model::LatLng>,

    /// The distance_in_miles is applied when the location being searched for is
    /// identified as a city or smaller. This field is ignored if the location
    /// being searched for is a state or larger.
    pub distance_in_miles: f64,

    /// Allows the client to return jobs without a
    /// set location, specifically, telecommuting jobs (telecommuting is considered
    /// by the service as a special location).
    /// [Job.posting_region][google.cloud.talent.v4.Job.posting_region] indicates
    /// if a job permits telecommuting. If this field is set to
    /// [TelecommutePreference.TELECOMMUTE_ALLOWED][google.cloud.talent.v4.LocationFilter.TelecommutePreference.TELECOMMUTE_ALLOWED],
    /// telecommuting jobs are searched, and
    /// [address][google.cloud.talent.v4.LocationFilter.address] and
    /// [lat_lng][google.cloud.talent.v4.LocationFilter.lat_lng] are ignored. If
    /// not set or set to
    /// [TelecommutePreference.TELECOMMUTE_EXCLUDED][google.cloud.talent.v4.LocationFilter.TelecommutePreference.TELECOMMUTE_EXCLUDED],
    /// the telecommute status of the jobs is ignored. Jobs that have
    /// [PostingRegion.TELECOMMUTE][google.cloud.talent.v4.PostingRegion.TELECOMMUTE]
    /// and have additional [Job.addresses][google.cloud.talent.v4.Job.addresses]
    /// may still be matched based on other location filters using
    /// [address][google.cloud.talent.v4.LocationFilter.address] or
    /// [lat_lng][google.cloud.talent.v4.LocationFilter.lat_lng].
    ///
    /// This filter can be used by itself to search exclusively for telecommuting
    /// jobs, or it can be combined with another location
    /// filter to search for a combination of job locations,
    /// such as "Mountain View" or "telecommuting" jobs. However, when used in
    /// combination with other location filters, telecommuting jobs can be
    /// treated as less relevant than other jobs in the search response.
    ///
    /// This field is only used for job search requests.
    ///
    /// [google.cloud.talent.v4.Job.addresses]: crate::model::Job::addresses
    /// [google.cloud.talent.v4.Job.posting_region]: crate::model::Job::posting_region
    /// [google.cloud.talent.v4.LocationFilter.TelecommutePreference.TELECOMMUTE_ALLOWED]: crate::model::location_filter::telecommute_preference::TELECOMMUTE_ALLOWED
    /// [google.cloud.talent.v4.LocationFilter.TelecommutePreference.TELECOMMUTE_EXCLUDED]: crate::model::location_filter::telecommute_preference::TELECOMMUTE_EXCLUDED
    /// [google.cloud.talent.v4.LocationFilter.address]: crate::model::LocationFilter::address
    /// [google.cloud.talent.v4.LocationFilter.lat_lng]: crate::model::LocationFilter::lat_lng
    /// [google.cloud.talent.v4.PostingRegion.TELECOMMUTE]: crate::model::posting_region::TELECOMMUTE
    pub telecommute_preference: crate::model::location_filter::TelecommutePreference,
}

impl LocationFilter {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [address][crate::model::LocationFilter::address].
    pub fn set_address<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.address = v.into();
        self
    }

    /// Sets the value of [region_code][crate::model::LocationFilter::region_code].
    pub fn set_region_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.region_code = v.into();
        self
    }

    /// Sets the value of [lat_lng][crate::model::LocationFilter::lat_lng].
    pub fn set_lat_lng<T: std::convert::Into<std::option::Option<gtype::model::LatLng>>>(
        mut self,
        v: T,
    ) -> Self {
        self.lat_lng = v.into();
        self
    }

    /// Sets the value of [distance_in_miles][crate::model::LocationFilter::distance_in_miles].
    pub fn set_distance_in_miles<T: std::convert::Into<f64>>(mut self, v: T) -> Self {
        self.distance_in_miles = v.into();
        self
    }

    /// Sets the value of [telecommute_preference][crate::model::LocationFilter::telecommute_preference].
    pub fn set_telecommute_preference<
        T: std::convert::Into<crate::model::location_filter::TelecommutePreference>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.telecommute_preference = v.into();
        self
    }
}

impl wkt::message::Message for LocationFilter {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.LocationFilter"
    }
}

/// Defines additional types related to LocationFilter
pub mod location_filter {
    #[allow(unused_imports)]
    use super::*;

    /// Specify whether to include telecommute jobs.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct TelecommutePreference(std::borrow::Cow<'static, str>);

    impl TelecommutePreference {
        /// Creates a new TelecommutePreference instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [TelecommutePreference](TelecommutePreference)
    pub mod telecommute_preference {
        use super::TelecommutePreference;

        /// Default value if the telecommute preference isn't specified.
        pub const TELECOMMUTE_PREFERENCE_UNSPECIFIED: TelecommutePreference =
            TelecommutePreference::new("TELECOMMUTE_PREFERENCE_UNSPECIFIED");

        /// Deprecated: Ignore telecommute status of jobs. Use
        /// TELECOMMUTE_JOBS_EXCLUDED if want to exclude telecommute jobs.
        pub const TELECOMMUTE_EXCLUDED: TelecommutePreference =
            TelecommutePreference::new("TELECOMMUTE_EXCLUDED");

        /// Allow telecommute jobs.
        pub const TELECOMMUTE_ALLOWED: TelecommutePreference =
            TelecommutePreference::new("TELECOMMUTE_ALLOWED");

        /// Exclude telecommute jobs.
        pub const TELECOMMUTE_JOBS_EXCLUDED: TelecommutePreference =
            TelecommutePreference::new("TELECOMMUTE_JOBS_EXCLUDED");
    }

    impl std::convert::From<std::string::String> for TelecommutePreference {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for TelecommutePreference {
        fn default() -> Self {
            telecommute_preference::TELECOMMUTE_PREFERENCE_UNSPECIFIED
        }
    }
}

/// Filter on job compensation type and amount.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CompensationFilter {
    /// Required. Type of filter.
    #[serde(rename = "type")]
    pub r#type: crate::model::compensation_filter::FilterType,

    /// Required. Specify desired `base compensation entry's`
    /// [CompensationInfo.CompensationUnit][google.cloud.talent.v4.CompensationInfo.CompensationUnit].
    ///
    /// [google.cloud.talent.v4.CompensationInfo.CompensationUnit]: crate::model::compensation_info::CompensationUnit
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub units: std::vec::Vec<crate::model::compensation_info::CompensationUnit>,

    /// Compensation range.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub range: std::option::Option<crate::model::compensation_info::CompensationRange>,

    /// If set to true, jobs with unspecified compensation range fields are
    /// included.
    pub include_jobs_with_unspecified_compensation_range: bool,
}

impl CompensationFilter {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [r#type][crate::model::CompensationFilter::type].
    pub fn set_type<T: std::convert::Into<crate::model::compensation_filter::FilterType>>(
        mut self,
        v: T,
    ) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [range][crate::model::CompensationFilter::range].
    pub fn set_range<
        T: std::convert::Into<std::option::Option<crate::model::compensation_info::CompensationRange>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.range = v.into();
        self
    }

    /// Sets the value of [include_jobs_with_unspecified_compensation_range][crate::model::CompensationFilter::include_jobs_with_unspecified_compensation_range].
    pub fn set_include_jobs_with_unspecified_compensation_range<T: std::convert::Into<bool>>(
        mut self,
        v: T,
    ) -> Self {
        self.include_jobs_with_unspecified_compensation_range = v.into();
        self
    }

    /// Sets the value of [units][crate::model::CompensationFilter::units].
    pub fn set_units<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::compensation_info::CompensationUnit>,
    {
        use std::iter::Iterator;
        self.units = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for CompensationFilter {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.CompensationFilter"
    }
}

/// Defines additional types related to CompensationFilter
pub mod compensation_filter {
    #[allow(unused_imports)]
    use super::*;

    /// Specify the type of filtering.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct FilterType(std::borrow::Cow<'static, str>);

    impl FilterType {
        /// Creates a new FilterType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [FilterType](FilterType)
    pub mod filter_type {
        use super::FilterType;

        /// Filter type unspecified. Position holder, INVALID, should never be used.
        pub const FILTER_TYPE_UNSPECIFIED: FilterType = FilterType::new("FILTER_TYPE_UNSPECIFIED");

        /// Filter by `base compensation entry's` unit. A job is a match if and
        /// only if the job contains a base CompensationEntry and the base
        /// CompensationEntry's unit matches provided
        /// [units][google.cloud.talent.v4.CompensationFilter.units]. Populate one or
        /// more [units][google.cloud.talent.v4.CompensationFilter.units].
        ///
        /// See
        /// [CompensationInfo.CompensationEntry][google.cloud.talent.v4.CompensationInfo.CompensationEntry]
        /// for definition of base compensation entry.
        ///
        /// [google.cloud.talent.v4.CompensationFilter.units]: crate::model::CompensationFilter::units
        /// [google.cloud.talent.v4.CompensationInfo.CompensationEntry]: crate::model::compensation_info::CompensationEntry
        pub const UNIT_ONLY: FilterType = FilterType::new("UNIT_ONLY");

        /// Filter by `base compensation entry's` unit and amount / range. A job
        /// is a match if and only if the job contains a base CompensationEntry, and
        /// the base entry's unit matches provided
        /// [CompensationUnit][google.cloud.talent.v4.CompensationInfo.CompensationUnit]
        /// and amount or range overlaps with provided
        /// [CompensationRange][google.cloud.talent.v4.CompensationInfo.CompensationRange].
        ///
        /// See
        /// [CompensationInfo.CompensationEntry][google.cloud.talent.v4.CompensationInfo.CompensationEntry]
        /// for definition of base compensation entry.
        ///
        /// Set exactly one [units][google.cloud.talent.v4.CompensationFilter.units]
        /// and populate [range][google.cloud.talent.v4.CompensationFilter.range].
        ///
        /// [google.cloud.talent.v4.CompensationFilter.range]: crate::model::CompensationFilter::range
        /// [google.cloud.talent.v4.CompensationFilter.units]: crate::model::CompensationFilter::units
        /// [google.cloud.talent.v4.CompensationInfo.CompensationEntry]: crate::model::compensation_info::CompensationEntry
        /// [google.cloud.talent.v4.CompensationInfo.CompensationRange]: crate::model::compensation_info::CompensationRange
        /// [google.cloud.talent.v4.CompensationInfo.CompensationUnit]: crate::model::compensation_info::CompensationUnit
        pub const UNIT_AND_AMOUNT: FilterType = FilterType::new("UNIT_AND_AMOUNT");

        /// Filter by annualized base compensation amount and `base compensation
        /// entry's` unit. Populate
        /// [range][google.cloud.talent.v4.CompensationFilter.range] and zero or more
        /// [units][google.cloud.talent.v4.CompensationFilter.units].
        ///
        /// [google.cloud.talent.v4.CompensationFilter.range]: crate::model::CompensationFilter::range
        /// [google.cloud.talent.v4.CompensationFilter.units]: crate::model::CompensationFilter::units
        pub const ANNUALIZED_BASE_AMOUNT: FilterType = FilterType::new("ANNUALIZED_BASE_AMOUNT");

        /// Filter by annualized total compensation amount and `base compensation
        /// entry's` unit . Populate
        /// [range][google.cloud.talent.v4.CompensationFilter.range] and zero or more
        /// [units][google.cloud.talent.v4.CompensationFilter.units].
        ///
        /// [google.cloud.talent.v4.CompensationFilter.range]: crate::model::CompensationFilter::range
        /// [google.cloud.talent.v4.CompensationFilter.units]: crate::model::CompensationFilter::units
        pub const ANNUALIZED_TOTAL_AMOUNT: FilterType = FilterType::new("ANNUALIZED_TOTAL_AMOUNT");
    }

    impl std::convert::From<std::string::String> for FilterType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for FilterType {
        fn default() -> Self {
            filter_type::FILTER_TYPE_UNSPECIFIED
        }
    }
}

/// Parameters needed for commute search.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CommuteFilter {
    /// Required. The method of transportation to calculate the commute time for.
    pub commute_method: crate::model::CommuteMethod,

    /// Required. The latitude and longitude of the location to calculate the
    /// commute time from.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_coordinates: std::option::Option<gtype::model::LatLng>,

    /// Required. The maximum travel time in seconds. The maximum allowed value is
    /// `3600s` (one hour). Format is `123s`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub travel_duration: std::option::Option<wkt::Duration>,

    /// If `true`, jobs without street level addresses may also be returned.
    /// For city level addresses, the city center is used. For state and coarser
    /// level addresses, text matching is used.
    /// If this field is set to `false` or isn't specified, only jobs that include
    /// street level addresses will be returned by commute search.
    pub allow_imprecise_addresses: bool,

    /// Traffic factor to take into account while searching by commute.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub traffic_option: std::option::Option<crate::model::commute_filter::TrafficOption>,
}

impl CommuteFilter {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [commute_method][crate::model::CommuteFilter::commute_method].
    pub fn set_commute_method<T: std::convert::Into<crate::model::CommuteMethod>>(
        mut self,
        v: T,
    ) -> Self {
        self.commute_method = v.into();
        self
    }

    /// Sets the value of [start_coordinates][crate::model::CommuteFilter::start_coordinates].
    pub fn set_start_coordinates<
        T: std::convert::Into<std::option::Option<gtype::model::LatLng>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.start_coordinates = v.into();
        self
    }

    /// Sets the value of [travel_duration][crate::model::CommuteFilter::travel_duration].
    pub fn set_travel_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.travel_duration = v.into();
        self
    }

    /// Sets the value of [allow_imprecise_addresses][crate::model::CommuteFilter::allow_imprecise_addresses].
    pub fn set_allow_imprecise_addresses<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.allow_imprecise_addresses = v.into();
        self
    }

    /// Sets the value of `traffic_option`.
    pub fn set_traffic_option<
        T: std::convert::Into<std::option::Option<crate::model::commute_filter::TrafficOption>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.traffic_option = v.into();
        self
    }

    /// The value of [traffic_option][crate::model::CommuteFilter::traffic_option]
    /// if it holds a `RoadTraffic`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_road_traffic(
        &self,
    ) -> std::option::Option<&crate::model::commute_filter::RoadTraffic> {
        #[allow(unreachable_patterns)]
        self.traffic_option.as_ref().and_then(|v| match v {
            crate::model::commute_filter::TrafficOption::RoadTraffic(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [traffic_option][crate::model::CommuteFilter::traffic_option]
    /// if it holds a `DepartureTime`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_departure_time(
        &self,
    ) -> std::option::Option<&std::boxed::Box<gtype::model::TimeOfDay>> {
        #[allow(unreachable_patterns)]
        self.traffic_option.as_ref().and_then(|v| match v {
            crate::model::commute_filter::TrafficOption::DepartureTime(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [traffic_option][crate::model::CommuteFilter::traffic_option]
    /// to hold a `RoadTraffic`.
    ///
    /// Note that all the setters affecting `traffic_option` are
    /// mutually exclusive.
    pub fn set_road_traffic<T: std::convert::Into<crate::model::commute_filter::RoadTraffic>>(
        mut self,
        v: T,
    ) -> Self {
        self.traffic_option = std::option::Option::Some(
            crate::model::commute_filter::TrafficOption::RoadTraffic(v.into()),
        );
        self
    }

    /// Sets the value of [traffic_option][crate::model::CommuteFilter::traffic_option]
    /// to hold a `DepartureTime`.
    ///
    /// Note that all the setters affecting `traffic_option` are
    /// mutually exclusive.
    pub fn set_departure_time<T: std::convert::Into<std::boxed::Box<gtype::model::TimeOfDay>>>(
        mut self,
        v: T,
    ) -> Self {
        self.traffic_option = std::option::Option::Some(
            crate::model::commute_filter::TrafficOption::DepartureTime(v.into()),
        );
        self
    }
}

impl wkt::message::Message for CommuteFilter {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.CommuteFilter"
    }
}

/// Defines additional types related to CommuteFilter
pub mod commute_filter {
    #[allow(unused_imports)]
    use super::*;

    /// The traffic density to use when calculating commute time.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct RoadTraffic(std::borrow::Cow<'static, str>);

    impl RoadTraffic {
        /// Creates a new RoadTraffic instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [RoadTraffic](RoadTraffic)
    pub mod road_traffic {
        use super::RoadTraffic;

        /// Road traffic situation isn't specified.
        pub const ROAD_TRAFFIC_UNSPECIFIED: RoadTraffic =
            RoadTraffic::new("ROAD_TRAFFIC_UNSPECIFIED");

        /// Optimal commute time without considering any traffic impact.
        pub const TRAFFIC_FREE: RoadTraffic = RoadTraffic::new("TRAFFIC_FREE");

        /// Commute time calculation takes in account the peak traffic impact.
        pub const BUSY_HOUR: RoadTraffic = RoadTraffic::new("BUSY_HOUR");
    }

    impl std::convert::From<std::string::String> for RoadTraffic {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for RoadTraffic {
        fn default() -> Self {
            road_traffic::ROAD_TRAFFIC_UNSPECIFIED
        }
    }

    /// Traffic factor to take into account while searching by commute.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum TrafficOption {
        /// Specifies the traffic density to use when calculating commute time.
        RoadTraffic(crate::model::commute_filter::RoadTraffic),
        /// The departure time used to calculate traffic impact, represented as
        /// [google.type.TimeOfDay][google.type.TimeOfDay] in local time zone.
        ///
        /// Currently traffic model is restricted to hour level resolution.
        ///
        /// [google.type.TimeOfDay]: gtype::model::TimeOfDay
        DepartureTime(std::boxed::Box<gtype::model::TimeOfDay>),
    }
}

/// The histogram request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct HistogramQuery {
    /// An expression specifies a histogram request against matching jobs for
    /// searches.
    ///
    /// See
    /// [SearchJobsRequest.histogram_queries][google.cloud.talent.v4.SearchJobsRequest.histogram_queries]
    /// for details about syntax.
    ///
    /// [google.cloud.talent.v4.SearchJobsRequest.histogram_queries]: crate::model::SearchJobsRequest::histogram_queries
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub histogram_query: std::string::String,
}

impl HistogramQuery {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [histogram_query][crate::model::HistogramQuery::histogram_query].
    pub fn set_histogram_query<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.histogram_query = v.into();
        self
    }
}

impl wkt::message::Message for HistogramQuery {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.HistogramQuery"
    }
}

/// Histogram result that matches
/// [HistogramQuery][google.cloud.talent.v4.HistogramQuery] specified in
/// searches.
///
/// [google.cloud.talent.v4.HistogramQuery]: crate::model::HistogramQuery
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct HistogramQueryResult {
    /// Requested histogram expression.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub histogram_query: std::string::String,

    /// A map from the values of the facet associated with distinct values to the
    /// number of matching entries with corresponding value.
    ///
    /// The key format is:
    ///
    /// * (for string histogram) string values stored in the field.
    /// * (for named numeric bucket) name specified in `bucket()` function, like
    ///   for `bucket(0, MAX, "non-negative")`, the key will be `non-negative`.
    /// * (for anonymous numeric bucket) range formatted as `<low>-<high>`, for
    ///   example, `0-1000`, `MIN-0`, and `0-MAX`.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    #[serde_as(as = "std::collections::HashMap<_, serde_with::DisplayFromStr>")]
    pub histogram: std::collections::HashMap<std::string::String, i64>,
}

impl HistogramQueryResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [histogram_query][crate::model::HistogramQueryResult::histogram_query].
    pub fn set_histogram_query<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.histogram_query = v.into();
        self
    }

    /// Sets the value of [histogram][crate::model::HistogramQueryResult::histogram].
    pub fn set_histogram<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<i64>,
    {
        use std::iter::Iterator;
        self.histogram = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for HistogramQueryResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.HistogramQueryResult"
    }
}

/// A Job resource represents a job posting (also referred to as a "job listing"
/// or "job requisition"). A job belongs to a
/// [Company][google.cloud.talent.v4.Company], which is the hiring entity
/// responsible for the job.
///
/// [google.cloud.talent.v4.Company]: crate::model::Company
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Job {
    /// Required during job update.
    ///
    /// The resource name for the job. This is generated by the service when a
    /// job is created.
    ///
    /// The format is
    /// "projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}". For
    /// example, "projects/foo/tenants/bar/jobs/baz".
    ///
    /// Use of this field in job queries and API calls is preferred over the use of
    /// [requisition_id][google.cloud.talent.v4.Job.requisition_id] since this
    /// value is unique.
    ///
    /// [google.cloud.talent.v4.Job.requisition_id]: crate::model::Job::requisition_id
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The resource name of the company listing the job.
    ///
    /// The format is
    /// "projects/{project_id}/tenants/{tenant_id}/companies/{company_id}". For
    /// example, "projects/foo/tenants/bar/companies/baz".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub company: std::string::String,

    /// Required. The requisition ID, also referred to as the posting ID, is
    /// assigned by the client to identify a job. This field is intended to be used
    /// by clients for client identification and tracking of postings. A job isn't
    /// allowed to be created if there is another job with the same
    /// [company][google.cloud.talent.v4.Job.name],
    /// [language_code][google.cloud.talent.v4.Job.language_code] and
    /// [requisition_id][google.cloud.talent.v4.Job.requisition_id].
    ///
    /// The maximum number of allowed characters is 255.
    ///
    /// [google.cloud.talent.v4.Job.language_code]: crate::model::Job::language_code
    /// [google.cloud.talent.v4.Job.name]: crate::model::Job::name
    /// [google.cloud.talent.v4.Job.requisition_id]: crate::model::Job::requisition_id
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub requisition_id: std::string::String,

    /// Required. The title of the job, such as "Software Engineer"
    ///
    /// The maximum number of allowed characters is 500.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub title: std::string::String,

    /// Required. The description of the job, which typically includes a
    /// multi-paragraph description of the company and related information.
    /// Separate fields are provided on the job object for
    /// [responsibilities][google.cloud.talent.v4.Job.responsibilities],
    /// [qualifications][google.cloud.talent.v4.Job.qualifications], and other job
    /// characteristics. Use of these separate job fields is recommended.
    ///
    /// This field accepts and sanitizes HTML input, and also accepts
    /// bold, italic, ordered list, and unordered list markup tags.
    ///
    /// The maximum number of allowed characters is 100,000.
    ///
    /// [google.cloud.talent.v4.Job.qualifications]: crate::model::Job::qualifications
    /// [google.cloud.talent.v4.Job.responsibilities]: crate::model::Job::responsibilities
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Strongly recommended for the best service experience.
    ///
    /// Location(s) where the employer is looking to hire for this job posting.
    ///
    /// Specifying the full street address(es) of the hiring location enables
    /// better API results, especially job searches by commute time.
    ///
    /// At most 50 locations are allowed for best search performance. If a job has
    /// more locations, it is suggested to split it into multiple jobs with unique
    /// [requisition_id][google.cloud.talent.v4.Job.requisition_id]s (e.g. 'ReqA'
    /// becomes 'ReqA-1', 'ReqA-2', and so on.) as multiple jobs with the same
    /// [company][google.cloud.talent.v4.Job.company],
    /// [language_code][google.cloud.talent.v4.Job.language_code] and
    /// [requisition_id][google.cloud.talent.v4.Job.requisition_id] are not
    /// allowed. If the original
    /// [requisition_id][google.cloud.talent.v4.Job.requisition_id] must be
    /// preserved, a custom field should be used for storage. It is also suggested
    /// to group the locations that close to each other in the same job for better
    /// search experience.
    ///
    /// Jobs with multiple addresses must have their addresses with the same
    /// [LocationType][google.cloud.talent.v4.Location.LocationType] to allow
    /// location filtering to work properly. (For example, a Job with addresses
    /// "1600 Amphitheatre Parkway, Mountain View, CA, USA" and "London, UK" may
    /// not have location filters applied correctly at search time since the first
    /// is a
    /// [LocationType.STREET_ADDRESS][google.cloud.talent.v4.Location.LocationType.STREET_ADDRESS]
    /// and the second is a
    /// [LocationType.LOCALITY][google.cloud.talent.v4.Location.LocationType.LOCALITY].)
    /// If a job needs to have multiple addresses, it is suggested to split it into
    /// multiple jobs with same LocationTypes.
    ///
    /// The maximum number of allowed characters is 500.
    ///
    /// [google.cloud.talent.v4.Job.company]: crate::model::Job::company
    /// [google.cloud.talent.v4.Job.language_code]: crate::model::Job::language_code
    /// [google.cloud.talent.v4.Job.requisition_id]: crate::model::Job::requisition_id
    /// [google.cloud.talent.v4.Location.LocationType]: crate::model::location::LocationType
    /// [google.cloud.talent.v4.Location.LocationType.LOCALITY]: crate::model::location::location_type::LOCALITY
    /// [google.cloud.talent.v4.Location.LocationType.STREET_ADDRESS]: crate::model::location::location_type::STREET_ADDRESS
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub addresses: std::vec::Vec<std::string::String>,

    /// Job application information.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub application_info: std::option::Option<crate::model::job::ApplicationInfo>,

    /// The benefits included with the job.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub job_benefits: std::vec::Vec<crate::model::JobBenefit>,

    /// Job compensation information (a.k.a. "pay rate") i.e., the compensation
    /// that will paid to the employee.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub compensation_info: std::option::Option<crate::model::CompensationInfo>,

    /// A map of fields to hold both filterable and non-filterable custom job
    /// attributes that are not covered by the provided structured fields.
    ///
    /// The keys of the map are strings up to 64 bytes and must match the
    /// pattern: `[a-zA-Z][a-zA-Z0-9_]*`. For example, key0LikeThis or
    /// KEY_1_LIKE_THIS.
    ///
    /// At most 100 filterable and at most 100 unfilterable keys are supported.
    /// For filterable `string_values`, across all keys at most 200 values are
    /// allowed, with each string no more than 255 characters. For unfilterable
    /// `string_values`, the maximum total size of `string_values` across all keys
    /// is 50KB.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub custom_attributes:
        std::collections::HashMap<std::string::String, crate::model::CustomAttribute>,

    /// The desired education degrees for the job, such as Bachelors, Masters.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub degree_types: std::vec::Vec<crate::model::DegreeType>,

    /// The department or functional area within the company with the open
    /// position.
    ///
    /// The maximum number of allowed characters is 255.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub department: std::string::String,

    /// The employment type(s) of a job, for example,
    /// [full time][google.cloud.talent.v4.EmploymentType.FULL_TIME] or
    /// [part time][google.cloud.talent.v4.EmploymentType.PART_TIME].
    ///
    /// [google.cloud.talent.v4.EmploymentType.FULL_TIME]: crate::model::employment_type::FULL_TIME
    /// [google.cloud.talent.v4.EmploymentType.PART_TIME]: crate::model::employment_type::PART_TIME
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub employment_types: std::vec::Vec<crate::model::EmploymentType>,

    /// A description of bonus, commission, and other compensation
    /// incentives associated with the job not including salary or pay.
    ///
    /// The maximum number of allowed characters is 10,000.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub incentives: std::string::String,

    /// The language of the posting. This field is distinct from
    /// any requirements for fluency that are associated with the job.
    ///
    /// Language codes must be in BCP-47 format, such as "en-US" or "sr-Latn".
    /// For more information, see
    /// [Tags for Identifying Languages](https://tools.ietf.org/html/bcp47){:
    /// class="external" target="_blank" }.
    ///
    /// If this field is unspecified and
    /// [Job.description][google.cloud.talent.v4.Job.description] is present,
    /// detected language code based on
    /// [Job.description][google.cloud.talent.v4.Job.description] is assigned,
    /// otherwise defaults to 'en_US'.
    ///
    /// [google.cloud.talent.v4.Job.description]: crate::model::Job::description
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub language_code: std::string::String,

    /// The experience level associated with the job, such as "Entry Level".
    pub job_level: crate::model::JobLevel,

    /// A promotion value of the job, as determined by the client.
    /// The value determines the sort order of the jobs returned when searching for
    /// jobs using the featured jobs search call, with higher promotional values
    /// being returned first and ties being resolved by relevance sort. Only the
    /// jobs with a promotionValue >0 are returned in a FEATURED_JOB_SEARCH.
    ///
    /// Default value is 0, and negative values are treated as 0.
    pub promotion_value: i32,

    /// A description of the qualifications required to perform the
    /// job. The use of this field is recommended
    /// as an alternative to using the more general
    /// [description][google.cloud.talent.v4.Job.description] field.
    ///
    /// This field accepts and sanitizes HTML input, and also accepts
    /// bold, italic, ordered list, and unordered list markup tags.
    ///
    /// The maximum number of allowed characters is 10,000.
    ///
    /// [google.cloud.talent.v4.Job.description]: crate::model::Job::description
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub qualifications: std::string::String,

    /// A description of job responsibilities. The use of this field is
    /// recommended as an alternative to using the more general
    /// [description][google.cloud.talent.v4.Job.description] field.
    ///
    /// This field accepts and sanitizes HTML input, and also accepts
    /// bold, italic, ordered list, and unordered list markup tags.
    ///
    /// The maximum number of allowed characters is 10,000.
    ///
    /// [google.cloud.talent.v4.Job.description]: crate::model::Job::description
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub responsibilities: std::string::String,

    /// The job [PostingRegion][google.cloud.talent.v4.PostingRegion] (for example,
    /// state, country) throughout which the job is available. If this field is
    /// set, a [LocationFilter][google.cloud.talent.v4.LocationFilter] in a search
    /// query within the job region finds this job posting if an exact location
    /// match isn't specified. If this field is set to
    /// [PostingRegion.NATION][google.cloud.talent.v4.PostingRegion.NATION] or
    /// [PostingRegion.ADMINISTRATIVE_AREA][google.cloud.talent.v4.PostingRegion.ADMINISTRATIVE_AREA],
    /// setting job [Job.addresses][google.cloud.talent.v4.Job.addresses] to the
    /// same location level as this field is strongly recommended.
    ///
    /// [google.cloud.talent.v4.Job.addresses]: crate::model::Job::addresses
    /// [google.cloud.talent.v4.LocationFilter]: crate::model::LocationFilter
    /// [google.cloud.talent.v4.PostingRegion]: crate::model::PostingRegion
    /// [google.cloud.talent.v4.PostingRegion.ADMINISTRATIVE_AREA]: crate::model::posting_region::ADMINISTRATIVE_AREA
    /// [google.cloud.talent.v4.PostingRegion.NATION]: crate::model::posting_region::NATION
    pub posting_region: crate::model::PostingRegion,

    /// Deprecated. The job is only visible to the owner.
    ///
    /// The visibility of the job.
    ///
    /// Defaults to
    /// [Visibility.ACCOUNT_ONLY][google.cloud.talent.v4.Visibility.ACCOUNT_ONLY]
    /// if not specified.
    ///
    /// [google.cloud.talent.v4.Visibility.ACCOUNT_ONLY]: crate::model::visibility::ACCOUNT_ONLY
    pub visibility: crate::model::Visibility,

    /// The start timestamp of the job in UTC time zone. Typically this field
    /// is used for contracting engagements. Invalid timestamps are ignored.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub job_start_time: std::option::Option<wkt::Timestamp>,

    /// The end timestamp of the job. Typically this field is used for contracting
    /// engagements. Invalid timestamps are ignored.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub job_end_time: std::option::Option<wkt::Timestamp>,

    /// The timestamp this job posting was most recently published. The default
    /// value is the time the request arrives at the server. Invalid timestamps are
    /// ignored.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub posting_publish_time: std::option::Option<wkt::Timestamp>,

    /// Strongly recommended for the best service experience.
    ///
    /// The expiration timestamp of the job. After this timestamp, the
    /// job is marked as expired, and it no longer appears in search results. The
    /// expired job can't be listed by the
    /// [ListJobs][google.cloud.talent.v4.JobService.ListJobs] API, but it can be
    /// retrieved with the [GetJob][google.cloud.talent.v4.JobService.GetJob] API
    /// or updated with the
    /// [UpdateJob][google.cloud.talent.v4.JobService.UpdateJob] API or deleted
    /// with the [DeleteJob][google.cloud.talent.v4.JobService.DeleteJob] API. An
    /// expired job can be updated and opened again by using a future expiration
    /// timestamp. Updating an expired job fails if there is another existing open
    /// job with same [company][google.cloud.talent.v4.Job.company],
    /// [language_code][google.cloud.talent.v4.Job.language_code] and
    /// [requisition_id][google.cloud.talent.v4.Job.requisition_id].
    ///
    /// The expired jobs are retained in our system for 90 days. However, the
    /// overall expired job count cannot exceed 3 times the maximum number of
    /// open jobs over previous 7 days. If this threshold is exceeded,
    /// expired jobs are cleaned out in order of earliest expire time.
    /// Expired jobs are no longer accessible after they are cleaned
    /// out.
    ///
    /// Invalid timestamps are ignored, and treated as expire time not provided.
    ///
    /// If the timestamp is before the instant request is made, the job
    /// is treated as expired immediately on creation. This kind of job can
    /// not be updated. And when creating a job with past timestamp, the
    /// [posting_publish_time][google.cloud.talent.v4.Job.posting_publish_time]
    /// must be set before
    /// [posting_expire_time][google.cloud.talent.v4.Job.posting_expire_time]. The
    /// purpose of this feature is to allow other objects, such as
    /// [ApplicationInfo][google.cloud.talent.v4.Job.ApplicationInfo], to refer a
    /// job that didn't exist in the system prior to becoming expired. If you want
    /// to modify a job that was expired on creation, delete it and create a new
    /// one.
    ///
    /// If this value isn't provided at the time of job creation or is invalid,
    /// the job posting expires after 30 days from the job's creation time. For
    /// example, if the job was created on 2017/01/01 13:00AM UTC with an
    /// unspecified expiration date, the job expires after 2017/01/31 13:00AM UTC.
    ///
    /// If this value isn't provided on job update, it depends on the field masks
    /// set by
    /// [UpdateJobRequest.update_mask][google.cloud.talent.v4.UpdateJobRequest.update_mask].
    /// If the field masks include
    /// [job_end_time][google.cloud.talent.v4.Job.job_end_time], or the masks are
    /// empty meaning that every field is updated, the job posting expires after 30
    /// days from the job's last update time. Otherwise the expiration date isn't
    /// updated.
    ///
    /// [google.cloud.talent.v4.Job.ApplicationInfo]: crate::model::job::ApplicationInfo
    /// [google.cloud.talent.v4.Job.company]: crate::model::Job::company
    /// [google.cloud.talent.v4.Job.job_end_time]: crate::model::Job::job_end_time
    /// [google.cloud.talent.v4.Job.language_code]: crate::model::Job::language_code
    /// [google.cloud.talent.v4.Job.posting_expire_time]: crate::model::Job::posting_expire_time
    /// [google.cloud.talent.v4.Job.posting_publish_time]: crate::model::Job::posting_publish_time
    /// [google.cloud.talent.v4.Job.requisition_id]: crate::model::Job::requisition_id
    /// [google.cloud.talent.v4.JobService.DeleteJob]: crate::client::JobService::delete_job
    /// [google.cloud.talent.v4.JobService.GetJob]: crate::client::JobService::get_job
    /// [google.cloud.talent.v4.JobService.ListJobs]: crate::client::JobService::list_jobs
    /// [google.cloud.talent.v4.JobService.UpdateJob]: crate::client::JobService::update_job
    /// [google.cloud.talent.v4.UpdateJobRequest.update_mask]: crate::model::UpdateJobRequest::update_mask
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub posting_expire_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The timestamp when this job posting was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub posting_create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The timestamp when this job posting was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub posting_update_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Display name of the company listing the job.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub company_display_name: std::string::String,

    /// Output only. Derived details about the job posting.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub derived_info: std::option::Option<crate::model::job::DerivedInfo>,

    /// Options for job processing.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub processing_options: std::option::Option<crate::model::job::ProcessingOptions>,
}

impl Job {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Job::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [company][crate::model::Job::company].
    pub fn set_company<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.company = v.into();
        self
    }

    /// Sets the value of [requisition_id][crate::model::Job::requisition_id].
    pub fn set_requisition_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.requisition_id = v.into();
        self
    }

    /// Sets the value of [title][crate::model::Job::title].
    pub fn set_title<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.title = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Job::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [application_info][crate::model::Job::application_info].
    pub fn set_application_info<
        T: std::convert::Into<std::option::Option<crate::model::job::ApplicationInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.application_info = v.into();
        self
    }

    /// Sets the value of [compensation_info][crate::model::Job::compensation_info].
    pub fn set_compensation_info<
        T: std::convert::Into<std::option::Option<crate::model::CompensationInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.compensation_info = v.into();
        self
    }

    /// Sets the value of [department][crate::model::Job::department].
    pub fn set_department<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.department = v.into();
        self
    }

    /// Sets the value of [incentives][crate::model::Job::incentives].
    pub fn set_incentives<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.incentives = v.into();
        self
    }

    /// Sets the value of [language_code][crate::model::Job::language_code].
    pub fn set_language_code<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.language_code = v.into();
        self
    }

    /// Sets the value of [job_level][crate::model::Job::job_level].
    pub fn set_job_level<T: std::convert::Into<crate::model::JobLevel>>(mut self, v: T) -> Self {
        self.job_level = v.into();
        self
    }

    /// Sets the value of [promotion_value][crate::model::Job::promotion_value].
    pub fn set_promotion_value<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.promotion_value = v.into();
        self
    }

    /// Sets the value of [qualifications][crate::model::Job::qualifications].
    pub fn set_qualifications<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.qualifications = v.into();
        self
    }

    /// Sets the value of [responsibilities][crate::model::Job::responsibilities].
    pub fn set_responsibilities<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.responsibilities = v.into();
        self
    }

    /// Sets the value of [posting_region][crate::model::Job::posting_region].
    pub fn set_posting_region<T: std::convert::Into<crate::model::PostingRegion>>(
        mut self,
        v: T,
    ) -> Self {
        self.posting_region = v.into();
        self
    }

    /// Sets the value of [visibility][crate::model::Job::visibility].
    pub fn set_visibility<T: std::convert::Into<crate::model::Visibility>>(mut self, v: T) -> Self {
        self.visibility = v.into();
        self
    }

    /// Sets the value of [job_start_time][crate::model::Job::job_start_time].
    pub fn set_job_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.job_start_time = v.into();
        self
    }

    /// Sets the value of [job_end_time][crate::model::Job::job_end_time].
    pub fn set_job_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.job_end_time = v.into();
        self
    }

    /// Sets the value of [posting_publish_time][crate::model::Job::posting_publish_time].
    pub fn set_posting_publish_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.posting_publish_time = v.into();
        self
    }

    /// Sets the value of [posting_expire_time][crate::model::Job::posting_expire_time].
    pub fn set_posting_expire_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.posting_expire_time = v.into();
        self
    }

    /// Sets the value of [posting_create_time][crate::model::Job::posting_create_time].
    pub fn set_posting_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.posting_create_time = v.into();
        self
    }

    /// Sets the value of [posting_update_time][crate::model::Job::posting_update_time].
    pub fn set_posting_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.posting_update_time = v.into();
        self
    }

    /// Sets the value of [company_display_name][crate::model::Job::company_display_name].
    pub fn set_company_display_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.company_display_name = v.into();
        self
    }

    /// Sets the value of [derived_info][crate::model::Job::derived_info].
    pub fn set_derived_info<
        T: std::convert::Into<std::option::Option<crate::model::job::DerivedInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.derived_info = v.into();
        self
    }

    /// Sets the value of [processing_options][crate::model::Job::processing_options].
    pub fn set_processing_options<
        T: std::convert::Into<std::option::Option<crate::model::job::ProcessingOptions>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.processing_options = v.into();
        self
    }

    /// Sets the value of [addresses][crate::model::Job::addresses].
    pub fn set_addresses<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.addresses = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [job_benefits][crate::model::Job::job_benefits].
    pub fn set_job_benefits<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::JobBenefit>,
    {
        use std::iter::Iterator;
        self.job_benefits = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [degree_types][crate::model::Job::degree_types].
    pub fn set_degree_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::DegreeType>,
    {
        use std::iter::Iterator;
        self.degree_types = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [employment_types][crate::model::Job::employment_types].
    pub fn set_employment_types<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::EmploymentType>,
    {
        use std::iter::Iterator;
        self.employment_types = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [custom_attributes][crate::model::Job::custom_attributes].
    pub fn set_custom_attributes<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::CustomAttribute>,
    {
        use std::iter::Iterator;
        self.custom_attributes = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Job {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.Job"
    }
}

/// Defines additional types related to Job
pub mod job {
    #[allow(unused_imports)]
    use super::*;

    /// Application related details of a job posting.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ApplicationInfo {
        /// Use this field to specify email address(es) to which resumes or
        /// applications can be sent.
        ///
        /// The maximum number of allowed characters for each entry is 255.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub emails: std::vec::Vec<std::string::String>,

        /// Use this field to provide instructions, such as "Mail your application
        /// to ...", that a candidate can follow to apply for the job.
        ///
        /// This field accepts and sanitizes HTML input, and also accepts
        /// bold, italic, ordered list, and unordered list markup tags.
        ///
        /// The maximum number of allowed characters is 3,000.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub instruction: std::string::String,

        /// Use this URI field to direct an applicant to a website, for example to
        /// link to an online application form.
        ///
        /// The maximum number of allowed characters for each entry is 2,000.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub uris: std::vec::Vec<std::string::String>,
    }

    impl ApplicationInfo {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [instruction][crate::model::job::ApplicationInfo::instruction].
        pub fn set_instruction<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.instruction = v.into();
            self
        }

        /// Sets the value of [emails][crate::model::job::ApplicationInfo::emails].
        pub fn set_emails<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.emails = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [uris][crate::model::job::ApplicationInfo::uris].
        pub fn set_uris<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.uris = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for ApplicationInfo {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.talent.v4.Job.ApplicationInfo"
        }
    }

    /// Derived details about the job posting.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct DerivedInfo {
        /// Structured locations of the job, resolved from
        /// [Job.addresses][google.cloud.talent.v4.Job.addresses].
        ///
        /// [locations][google.cloud.talent.v4.Job.DerivedInfo.locations] are exactly
        /// matched to [Job.addresses][google.cloud.talent.v4.Job.addresses] in the
        /// same order.
        ///
        /// [google.cloud.talent.v4.Job.DerivedInfo.locations]: crate::model::job::DerivedInfo::locations
        /// [google.cloud.talent.v4.Job.addresses]: crate::model::Job::addresses
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub locations: std::vec::Vec<crate::model::Location>,

        /// Job categories derived from [Job.title][google.cloud.talent.v4.Job.title]
        /// and [Job.description][google.cloud.talent.v4.Job.description].
        ///
        /// [google.cloud.talent.v4.Job.description]: crate::model::Job::description
        /// [google.cloud.talent.v4.Job.title]: crate::model::Job::title
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub job_categories: std::vec::Vec<crate::model::JobCategory>,
    }

    impl DerivedInfo {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [locations][crate::model::job::DerivedInfo::locations].
        pub fn set_locations<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::Location>,
        {
            use std::iter::Iterator;
            self.locations = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [job_categories][crate::model::job::DerivedInfo::job_categories].
        pub fn set_job_categories<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::JobCategory>,
        {
            use std::iter::Iterator;
            self.job_categories = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for DerivedInfo {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.talent.v4.Job.DerivedInfo"
        }
    }

    /// Options for job processing.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ProcessingOptions {
        /// If set to `true`, the service does not attempt to resolve a
        /// more precise address for the job.
        pub disable_street_address_resolution: bool,

        /// Option for job HTML content sanitization. Applied fields are:
        ///
        /// * description
        /// * applicationInfo.instruction
        /// * incentives
        /// * qualifications
        /// * responsibilities
        ///
        /// HTML tags in these fields may be stripped if sanitiazation isn't
        /// disabled.
        ///
        /// Defaults to
        /// [HtmlSanitization.SIMPLE_FORMATTING_ONLY][google.cloud.talent.v4.HtmlSanitization.SIMPLE_FORMATTING_ONLY].
        ///
        /// [google.cloud.talent.v4.HtmlSanitization.SIMPLE_FORMATTING_ONLY]: crate::model::html_sanitization::SIMPLE_FORMATTING_ONLY
        pub html_sanitization: crate::model::HtmlSanitization,
    }

    impl ProcessingOptions {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [disable_street_address_resolution][crate::model::job::ProcessingOptions::disable_street_address_resolution].
        pub fn set_disable_street_address_resolution<T: std::convert::Into<bool>>(
            mut self,
            v: T,
        ) -> Self {
            self.disable_street_address_resolution = v.into();
            self
        }

        /// Sets the value of [html_sanitization][crate::model::job::ProcessingOptions::html_sanitization].
        pub fn set_html_sanitization<T: std::convert::Into<crate::model::HtmlSanitization>>(
            mut self,
            v: T,
        ) -> Self {
            self.html_sanitization = v.into();
            self
        }
    }

    impl wkt::message::Message for ProcessingOptions {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.talent.v4.Job.ProcessingOptions"
        }
    }
}

/// Create job request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateJobRequest {
    /// Required. The resource name of the tenant under which the job is created.
    ///
    /// The format is "projects/{project_id}/tenants/{tenant_id}". For example,
    /// "projects/foo/tenants/bar".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The Job to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub job: std::option::Option<crate::model::Job>,
}

impl CreateJobRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateJobRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [job][crate::model::CreateJobRequest::job].
    pub fn set_job<T: std::convert::Into<std::option::Option<crate::model::Job>>>(
        mut self,
        v: T,
    ) -> Self {
        self.job = v.into();
        self
    }
}

impl wkt::message::Message for CreateJobRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.CreateJobRequest"
    }
}

/// Get job request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetJobRequest {
    /// Required. The resource name of the job to retrieve.
    ///
    /// The format is
    /// "projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}". For
    /// example, "projects/foo/tenants/bar/jobs/baz".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetJobRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetJobRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetJobRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.GetJobRequest"
    }
}

/// Update job request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateJobRequest {
    /// Required. The Job to be updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub job: std::option::Option<crate::model::Job>,

    /// Strongly recommended for the best service experience.
    ///
    /// If [update_mask][google.cloud.talent.v4.UpdateJobRequest.update_mask] is
    /// provided, only the specified fields in
    /// [job][google.cloud.talent.v4.UpdateJobRequest.job] are updated. Otherwise
    /// all the fields are updated.
    ///
    /// A field mask to restrict the fields that are updated. Only
    /// top level fields of [Job][google.cloud.talent.v4.Job] are supported.
    ///
    /// [google.cloud.talent.v4.Job]: crate::model::Job
    /// [google.cloud.talent.v4.UpdateJobRequest.job]: crate::model::UpdateJobRequest::job
    /// [google.cloud.talent.v4.UpdateJobRequest.update_mask]: crate::model::UpdateJobRequest::update_mask
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateJobRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [job][crate::model::UpdateJobRequest::job].
    pub fn set_job<T: std::convert::Into<std::option::Option<crate::model::Job>>>(
        mut self,
        v: T,
    ) -> Self {
        self.job = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateJobRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateJobRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.UpdateJobRequest"
    }
}

/// Delete job request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteJobRequest {
    /// Required. The resource name of the job to be deleted.
    ///
    /// The format is
    /// "projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}". For
    /// example, "projects/foo/tenants/bar/jobs/baz".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteJobRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteJobRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteJobRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.DeleteJobRequest"
    }
}

/// List jobs request.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListJobsRequest {
    /// Required. The resource name of the tenant under which the job is created.
    ///
    /// The format is "projects/{project_id}/tenants/{tenant_id}". For example,
    /// "projects/foo/tenants/bar".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The filter string specifies the jobs to be enumerated.
    ///
    /// Supported operator: =, AND
    ///
    /// The fields eligible for filtering are:
    ///
    /// * `companyName`
    /// * `requisitionId`
    /// * `status` Available values: OPEN, EXPIRED, ALL. Defaults to
    ///   OPEN if no value is specified.
    ///
    /// At least one of `companyName` and `requisitionId` must present or an
    /// INVALID_ARGUMENT error is thrown.
    ///
    /// Sample Query:
    ///
    /// * companyName = "projects/foo/tenants/bar/companies/baz"
    /// * companyName = "projects/foo/tenants/bar/companies/baz" AND
    ///   requisitionId = "req-1"
    /// * companyName = "projects/foo/tenants/bar/companies/baz" AND
    ///   status = "EXPIRED"
    /// * requisitionId = "req-1"
    /// * requisitionId = "req-1" AND status = "EXPIRED"
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// The starting point of a query result.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// The maximum number of jobs to be returned per page of results.
    ///
    /// If [job_view][google.cloud.talent.v4.ListJobsRequest.job_view] is set to
    /// [JobView.JOB_VIEW_ID_ONLY][google.cloud.talent.v4.JobView.JOB_VIEW_ID_ONLY],
    /// the maximum allowed page size is 1000. Otherwise, the maximum allowed page
    /// size is 100.
    ///
    /// Default is 100 if empty or a number < 1 is specified.
    ///
    /// [google.cloud.talent.v4.JobView.JOB_VIEW_ID_ONLY]: crate::model::job_view::JOB_VIEW_ID_ONLY
    /// [google.cloud.talent.v4.ListJobsRequest.job_view]: crate::model::ListJobsRequest::job_view
    pub page_size: i32,

    /// The desired job attributes returned for jobs in the
    /// search response. Defaults to
    /// [JobView.JOB_VIEW_FULL][google.cloud.talent.v4.JobView.JOB_VIEW_FULL] if no
    /// value is specified.
    ///
    /// [google.cloud.talent.v4.JobView.JOB_VIEW_FULL]: crate::model::job_view::JOB_VIEW_FULL
    pub job_view: crate::model::JobView,
}

impl ListJobsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListJobsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListJobsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListJobsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListJobsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [job_view][crate::model::ListJobsRequest::job_view].
    pub fn set_job_view<T: std::convert::Into<crate::model::JobView>>(mut self, v: T) -> Self {
        self.job_view = v.into();
        self
    }
}

impl wkt::message::Message for ListJobsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.ListJobsRequest"
    }
}

/// List jobs response.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListJobsResponse {
    /// The Jobs for a given company.
    ///
    /// The maximum number of items returned is based on the limit field
    /// provided in the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub jobs: std::vec::Vec<crate::model::Job>,

    /// A token to retrieve the next page of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Additional information for the API invocation, such as the request
    /// tracking id.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub metadata: std::option::Option<crate::model::ResponseMetadata>,
}

impl ListJobsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListJobsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [metadata][crate::model::ListJobsResponse::metadata].
    pub fn set_metadata<
        T: std::convert::Into<std::option::Option<crate::model::ResponseMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metadata = v.into();
        self
    }

    /// Sets the value of [jobs][crate::model::ListJobsResponse::jobs].
    pub fn set_jobs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Job>,
    {
        use std::iter::Iterator;
        self.jobs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListJobsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.ListJobsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListJobsResponse {
    type PageItem = crate::model::Job;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.jobs
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// The Request body of the `SearchJobs` call.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SearchJobsRequest {
    /// Required. The resource name of the tenant to search within.
    ///
    /// The format is "projects/{project_id}/tenants/{tenant_id}". For example,
    /// "projects/foo/tenants/bar".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Mode of a search.
    ///
    /// Defaults to
    /// [SearchMode.JOB_SEARCH][google.cloud.talent.v4.SearchJobsRequest.SearchMode.JOB_SEARCH].
    ///
    /// [google.cloud.talent.v4.SearchJobsRequest.SearchMode.JOB_SEARCH]: crate::model::search_jobs_request::search_mode::JOB_SEARCH
    pub search_mode: crate::model::search_jobs_request::SearchMode,

    /// Required. The meta information collected about the job searcher, used to
    /// improve the search quality of the service. The identifiers (such as
    /// `user_id`) are provided by users, and must be unique and consistent.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub request_metadata: std::option::Option<crate::model::RequestMetadata>,

    /// Query used to search against jobs, such as keyword, location filters, etc.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub job_query: std::option::Option<crate::model::JobQuery>,

    /// Controls whether to broaden the search when it produces sparse results.
    /// Broadened queries append results to the end of the matching results
    /// list.
    ///
    /// Defaults to false.
    pub enable_broadening: bool,

    /// An expression specifies a histogram request against matching jobs.
    ///
    /// Expression syntax is an aggregation function call with histogram facets and
    /// other options.
    ///
    /// Available aggregation function calls are:
    ///
    /// * `count(string_histogram_facet)`: Count the number of matching entities,
    ///   for each distinct attribute value.
    /// * `count(numeric_histogram_facet, list of buckets)`: Count the number of
    ///   matching entities within each bucket.
    ///
    /// A maximum of 200 histogram buckets are supported.
    ///
    /// Data types:
    ///
    /// * Histogram facet: facet names with format `[a-zA-Z][a-zA-Z0-9_]+`.
    /// * String: string like "any string with backslash escape for quote(\")."
    /// * Number: whole number and floating point number like 10, -1 and -0.01.
    /// * List: list of elements with comma(,) separator surrounded by square
    ///   brackets, for example, [1, 2, 3] and ["one", "two", "three"].
    ///
    /// Built-in constants:
    ///
    /// * MIN (minimum number similar to java Double.MIN_VALUE)
    /// * MAX (maximum number similar to java Double.MAX_VALUE)
    ///
    /// Built-in functions:
    ///
    /// * bucket(start, end[, label]): bucket built-in function creates a bucket
    ///   with range of [start, end). Note that the end is exclusive, for example,
    ///   bucket(1, MAX, "positive number") or bucket(1, 10).
    ///
    /// Job histogram facets:
    ///
    /// * company_display_name: histogram by
    ///   [Job.company_display_name][google.cloud.talent.v4.Job.company_display_name].
    /// * employment_type: histogram by
    ///   [Job.employment_types][google.cloud.talent.v4.Job.employment_types], for
    ///   example,
    ///   "FULL_TIME", "PART_TIME".
    /// * company_size (DEPRECATED): histogram by
    ///   [CompanySize][google.cloud.talent.v4.CompanySize], for example, "SMALL",
    ///   "MEDIUM", "BIG".
    /// * publish_time_in_day: histogram by the
    ///   [Job.posting_publish_time][google.cloud.talent.v4.Job.posting_publish_time]
    ///   in days.
    ///   Must specify list of numeric buckets in spec.
    /// * publish_time_in_month: histogram by the
    ///   [Job.posting_publish_time][google.cloud.talent.v4.Job.posting_publish_time]
    ///   in months.
    ///   Must specify list of numeric buckets in spec.
    /// * publish_time_in_year: histogram by the
    ///   [Job.posting_publish_time][google.cloud.talent.v4.Job.posting_publish_time]
    ///   in years.
    ///   Must specify list of numeric buckets in spec.
    /// * degree_types: histogram by the
    ///   [Job.degree_types][google.cloud.talent.v4.Job.degree_types], for example,
    ///   "Bachelors", "Masters".
    /// * job_level: histogram by the
    ///   [Job.job_level][google.cloud.talent.v4.Job.job_level], for example, "Entry
    ///   Level".
    /// * country: histogram by the country code of jobs, for example, "US", "FR".
    /// * admin1: histogram by the admin1 code of jobs, which is a global
    ///   placeholder referring to the state, province, or the particular term a
    ///   country uses to define the geographic structure below the country level,
    ///   for example, "CA", "IL".
    /// * city: histogram by a combination of the "city name, admin1 code". For
    ///   example,  "Mountain View, CA", "New York, NY".
    /// * admin1_country: histogram by a combination of the "admin1 code, country",
    ///   for example, "CA, US", "IL, US".
    /// * city_coordinate: histogram by the city center's GPS coordinates (latitude
    ///   and longitude), for example, 37.4038522,-122.0987765. Since the
    ///   coordinates of a city center can change, customers may need to refresh
    ///   them periodically.
    /// * locale: histogram by the
    ///   [Job.language_code][google.cloud.talent.v4.Job.language_code], for example,
    ///   "en-US",
    ///   "fr-FR".
    /// * language: histogram by the language subtag of the
    ///   [Job.language_code][google.cloud.talent.v4.Job.language_code],
    ///   for example, "en", "fr".
    /// * category: histogram by the
    ///   [JobCategory][google.cloud.talent.v4.JobCategory], for example,
    ///   "COMPUTER_AND_IT", "HEALTHCARE".
    /// * base_compensation_unit: histogram by the
    ///   [CompensationInfo.CompensationUnit][google.cloud.talent.v4.CompensationInfo.CompensationUnit]
    ///   of base salary, for example, "WEEKLY", "MONTHLY".
    /// * base_compensation: histogram by the base salary. Must specify list of
    ///   numeric buckets to group results by.
    /// * annualized_base_compensation: histogram by the base annualized salary.
    ///   Must specify list of numeric buckets to group results by.
    /// * annualized_total_compensation: histogram by the total annualized salary.
    ///   Must specify list of numeric buckets to group results by.
    /// * string_custom_attribute: histogram by string
    ///   [Job.custom_attributes][google.cloud.talent.v4.Job.custom_attributes].
    ///   Values can be accessed via square bracket notations like
    ///   string_custom_attribute["key1"].
    /// * numeric_custom_attribute: histogram by numeric
    ///   [Job.custom_attributes][google.cloud.talent.v4.Job.custom_attributes].
    ///   Values can be accessed via square bracket notations like
    ///   numeric_custom_attribute["key1"]. Must specify list of numeric buckets to
    ///   group results by.
    ///
    /// Example expressions:
    ///
    /// * `count(admin1)`
    /// * `count(base_compensation, [bucket(1000, 10000), bucket(10000, 100000),
    ///   bucket(100000, MAX)])`
    /// * `count(string_custom_attribute["some-string-custom-attribute"])`
    /// * `count(numeric_custom_attribute["some-numeric-custom-attribute"],
    ///   [bucket(MIN, 0, "negative"), bucket(0, MAX, "non-negative")])`
    ///
    /// [google.cloud.talent.v4.CompanySize]: crate::model::CompanySize
    /// [google.cloud.talent.v4.CompensationInfo.CompensationUnit]: crate::model::compensation_info::CompensationUnit
    /// [google.cloud.talent.v4.Job.company_display_name]: crate::model::Job::company_display_name
    /// [google.cloud.talent.v4.Job.custom_attributes]: crate::model::Job::custom_attributes
    /// [google.cloud.talent.v4.Job.degree_types]: crate::model::Job::degree_types
    /// [google.cloud.talent.v4.Job.employment_types]: crate::model::Job::employment_types
    /// [google.cloud.talent.v4.Job.job_level]: crate::model::Job::job_level
    /// [google.cloud.talent.v4.Job.language_code]: crate::model::Job::language_code
    /// [google.cloud.talent.v4.Job.posting_publish_time]: crate::model::Job::posting_publish_time
    /// [google.cloud.talent.v4.JobCategory]: crate::model::JobCategory
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub histogram_queries: std::vec::Vec<crate::model::HistogramQuery>,

    /// The desired job attributes returned for jobs in the search response.
    /// Defaults to
    /// [JobView.JOB_VIEW_SMALL][google.cloud.talent.v4.JobView.JOB_VIEW_SMALL] if
    /// no value is specified.
    ///
    /// [google.cloud.talent.v4.JobView.JOB_VIEW_SMALL]: crate::model::job_view::JOB_VIEW_SMALL
    pub job_view: crate::model::JobView,

    /// An integer that specifies the current offset (that is, starting result
    /// location, amongst the jobs deemed by the API as relevant) in search
    /// results. This field is only considered if
    /// [page_token][google.cloud.talent.v4.SearchJobsRequest.page_token] is unset.
    ///
    /// The maximum allowed value is 5000. Otherwise an error is thrown.
    ///
    /// For example, 0 means to  return results starting from the first matching
    /// job, and 10 means to return from the 11th job. This can be used for
    /// pagination, (for example, pageSize = 10 and offset = 10 means to return
    /// from the second page).
    ///
    /// [google.cloud.talent.v4.SearchJobsRequest.page_token]: crate::model::SearchJobsRequest::page_token
    pub offset: i32,

    /// A limit on the number of jobs returned in the search results.
    /// Increasing this value above the default value of 10 can increase search
    /// response time. The value can be between 1 and 100.
    pub max_page_size: i32,

    /// The token specifying the current offset within
    /// search results. See
    /// [SearchJobsResponse.next_page_token][google.cloud.talent.v4.SearchJobsResponse.next_page_token]
    /// for an explanation of how to obtain the next set of query results.
    ///
    /// [google.cloud.talent.v4.SearchJobsResponse.next_page_token]: crate::model::SearchJobsResponse::next_page_token
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// The criteria determining how search results are sorted. Default is
    /// `"relevance desc"`.
    ///
    /// Supported options are:
    ///
    /// * `"relevance desc"`: By relevance descending, as determined by the API
    ///   algorithms. Relevance thresholding of query results is only available
    ///   with this ordering.
    /// * `"posting_publish_time desc"`: By
    ///   [Job.posting_publish_time][google.cloud.talent.v4.Job.posting_publish_time]
    ///   descending.
    /// * `"posting_update_time desc"`: By
    ///   [Job.posting_update_time][google.cloud.talent.v4.Job.posting_update_time]
    ///   descending.
    /// * `"title"`: By [Job.title][google.cloud.talent.v4.Job.title] ascending.
    /// * `"title desc"`: By [Job.title][google.cloud.talent.v4.Job.title]
    ///   descending.
    /// * `"annualized_base_compensation"`: By job's
    ///   [CompensationInfo.annualized_base_compensation_range][google.cloud.talent.v4.CompensationInfo.annualized_base_compensation_range]
    ///   ascending. Jobs whose annualized base compensation is unspecified are put
    ///   at the end of search results.
    /// * `"annualized_base_compensation desc"`: By job's
    ///   [CompensationInfo.annualized_base_compensation_range][google.cloud.talent.v4.CompensationInfo.annualized_base_compensation_range]
    ///   descending. Jobs whose annualized base compensation is unspecified are
    ///   put at the end of search results.
    /// * `"annualized_total_compensation"`: By job's
    ///   [CompensationInfo.annualized_total_compensation_range][google.cloud.talent.v4.CompensationInfo.annualized_total_compensation_range]
    ///   ascending. Jobs whose annualized base compensation is unspecified are put
    ///   at the end of search results.
    /// * `"annualized_total_compensation desc"`: By job's
    ///   [CompensationInfo.annualized_total_compensation_range][google.cloud.talent.v4.CompensationInfo.annualized_total_compensation_range]
    ///   descending. Jobs whose annualized base compensation is unspecified are
    ///   put at the end of search results.
    /// * `"custom_ranking desc"`: By the relevance score adjusted to the
    ///   [SearchJobsRequest.CustomRankingInfo.ranking_expression][google.cloud.talent.v4.SearchJobsRequest.CustomRankingInfo.ranking_expression]
    ///   with weight factor assigned by
    ///   [SearchJobsRequest.CustomRankingInfo.importance_level][google.cloud.talent.v4.SearchJobsRequest.CustomRankingInfo.importance_level]
    ///   in descending order.
    /// * Location sorting: Use the special syntax to order jobs by distance:\<br\>
    ///   `"distance_from('Hawaii')"`: Order by distance from Hawaii.\<br\>
    ///   `"distance_from(19.89, 155.5)"`: Order by distance from a coordinate.\<br\>
    ///   `"distance_from('Hawaii'), distance_from('Puerto Rico')"`: Order by
    ///   multiple locations. See details below.\<br\>
    ///   `"distance_from('Hawaii'), distance_from(19.89, 155.5)"`: Order by
    ///   multiple locations. See details below.\<br\>
    ///   The string can have a maximum of 256 characters. When multiple distance
    ///   centers are provided, a job that is close to any of the distance centers
    ///   would have a high rank. When a job has multiple locations, the job
    ///   location closest to one of the distance centers will be used. Jobs that
    ///   don't have locations will be ranked at the bottom. Distance is calculated
    ///   with a precision of 11.3 meters (37.4 feet). Diversification strategy is
    ///   still applied unless explicitly disabled in
    ///   [diversification_level][google.cloud.talent.v4.SearchJobsRequest.diversification_level].
    ///
    /// [google.cloud.talent.v4.CompensationInfo.annualized_base_compensation_range]: crate::model::CompensationInfo::annualized_base_compensation_range
    /// [google.cloud.talent.v4.CompensationInfo.annualized_total_compensation_range]: crate::model::CompensationInfo::annualized_total_compensation_range
    /// [google.cloud.talent.v4.Job.posting_publish_time]: crate::model::Job::posting_publish_time
    /// [google.cloud.talent.v4.Job.posting_update_time]: crate::model::Job::posting_update_time
    /// [google.cloud.talent.v4.Job.title]: crate::model::Job::title
    /// [google.cloud.talent.v4.SearchJobsRequest.CustomRankingInfo.importance_level]: crate::model::search_jobs_request::CustomRankingInfo::importance_level
    /// [google.cloud.talent.v4.SearchJobsRequest.CustomRankingInfo.ranking_expression]: crate::model::search_jobs_request::CustomRankingInfo::ranking_expression
    /// [google.cloud.talent.v4.SearchJobsRequest.diversification_level]: crate::model::SearchJobsRequest::diversification_level
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    /// Controls whether highly similar jobs are returned next to each other in
    /// the search results. Jobs are identified as highly similar based on
    /// their titles, job categories, and locations. Highly similar results are
    /// clustered so that only one representative job of the cluster is
    /// displayed to the job seeker higher up in the results, with the other jobs
    /// being displayed lower down in the results.
    ///
    /// Defaults to
    /// [DiversificationLevel.SIMPLE][google.cloud.talent.v4.SearchJobsRequest.DiversificationLevel.SIMPLE]
    /// if no value is specified.
    ///
    /// [google.cloud.talent.v4.SearchJobsRequest.DiversificationLevel.SIMPLE]: crate::model::search_jobs_request::diversification_level::SIMPLE
    pub diversification_level: crate::model::search_jobs_request::DiversificationLevel,

    /// Controls over how job documents get ranked on top of existing relevance
    /// score (determined by API algorithm).
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub custom_ranking_info:
        std::option::Option<crate::model::search_jobs_request::CustomRankingInfo>,

    /// This field is deprecated. Please use
    /// [SearchJobsRequest.keyword_match_mode][google.cloud.talent.v4.SearchJobsRequest.keyword_match_mode]
    /// going forward.
    ///
    /// To migrate, disable_keyword_match set to false maps to
    /// [KeywordMatchMode.KEYWORD_MATCH_ALL][google.cloud.talent.v4.SearchJobsRequest.KeywordMatchMode.KEYWORD_MATCH_ALL],
    /// and disable_keyword_match set to true maps to
    /// [KeywordMatchMode.KEYWORD_MATCH_DISABLED][google.cloud.talent.v4.SearchJobsRequest.KeywordMatchMode.KEYWORD_MATCH_DISABLED].
    /// If
    /// [SearchJobsRequest.keyword_match_mode][google.cloud.talent.v4.SearchJobsRequest.keyword_match_mode]
    /// is set, this field is ignored.
    ///
    /// Controls whether to disable exact keyword match on
    /// [Job.title][google.cloud.talent.v4.Job.title],
    /// [Job.description][google.cloud.talent.v4.Job.description],
    /// [Job.company_display_name][google.cloud.talent.v4.Job.company_display_name],
    /// [Job.addresses][google.cloud.talent.v4.Job.addresses],
    /// [Job.qualifications][google.cloud.talent.v4.Job.qualifications]. When
    /// disable keyword match is turned off, a keyword match returns jobs that do
    /// not match given category filters when there are matching keywords. For
    /// example, for the query "program manager," a result is returned even if the
    /// job posting has the title "software developer," which doesn't fall into
    /// "program manager" ontology, but does have "program manager" appearing in
    /// its description.
    ///
    /// For queries like "cloud" that don't contain title or
    /// location specific ontology, jobs with "cloud" keyword matches are returned
    /// regardless of this flag's value.
    ///
    /// Use
    /// [Company.keyword_searchable_job_custom_attributes][google.cloud.talent.v4.Company.keyword_searchable_job_custom_attributes]
    /// if company-specific globally matched custom field/attribute string values
    /// are needed. Enabling keyword match improves recall of subsequent search
    /// requests.
    ///
    /// Defaults to false.
    ///
    /// [google.cloud.talent.v4.Company.keyword_searchable_job_custom_attributes]: crate::model::Company::keyword_searchable_job_custom_attributes
    /// [google.cloud.talent.v4.Job.addresses]: crate::model::Job::addresses
    /// [google.cloud.talent.v4.Job.company_display_name]: crate::model::Job::company_display_name
    /// [google.cloud.talent.v4.Job.description]: crate::model::Job::description
    /// [google.cloud.talent.v4.Job.qualifications]: crate::model::Job::qualifications
    /// [google.cloud.talent.v4.Job.title]: crate::model::Job::title
    /// [google.cloud.talent.v4.SearchJobsRequest.KeywordMatchMode.KEYWORD_MATCH_ALL]: crate::model::search_jobs_request::keyword_match_mode::KEYWORD_MATCH_ALL
    /// [google.cloud.talent.v4.SearchJobsRequest.KeywordMatchMode.KEYWORD_MATCH_DISABLED]: crate::model::search_jobs_request::keyword_match_mode::KEYWORD_MATCH_DISABLED
    /// [google.cloud.talent.v4.SearchJobsRequest.keyword_match_mode]: crate::model::SearchJobsRequest::keyword_match_mode
    pub disable_keyword_match: bool,

    /// Controls what keyword match options to use. If both keyword_match_mode and
    /// disable_keyword_match are set, keyword_match_mode will take precedence.
    ///
    /// Defaults to
    /// [KeywordMatchMode.KEYWORD_MATCH_ALL][google.cloud.talent.v4.SearchJobsRequest.KeywordMatchMode.KEYWORD_MATCH_ALL]
    /// if no value is specified.
    ///
    /// [google.cloud.talent.v4.SearchJobsRequest.KeywordMatchMode.KEYWORD_MATCH_ALL]: crate::model::search_jobs_request::keyword_match_mode::KEYWORD_MATCH_ALL
    pub keyword_match_mode: crate::model::search_jobs_request::KeywordMatchMode,

    /// Optional. The relevance threshold of the search results.
    ///
    /// Default to Google defined threshold, leveraging a balance of
    /// precision and recall to deliver both highly accurate results and
    /// comprehensive coverage of relevant information.
    pub relevance_threshold: crate::model::search_jobs_request::RelevanceThreshold,
}

impl SearchJobsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::SearchJobsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [search_mode][crate::model::SearchJobsRequest::search_mode].
    pub fn set_search_mode<T: std::convert::Into<crate::model::search_jobs_request::SearchMode>>(
        mut self,
        v: T,
    ) -> Self {
        self.search_mode = v.into();
        self
    }

    /// Sets the value of [request_metadata][crate::model::SearchJobsRequest::request_metadata].
    pub fn set_request_metadata<
        T: std::convert::Into<std::option::Option<crate::model::RequestMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.request_metadata = v.into();
        self
    }

    /// Sets the value of [job_query][crate::model::SearchJobsRequest::job_query].
    pub fn set_job_query<T: std::convert::Into<std::option::Option<crate::model::JobQuery>>>(
        mut self,
        v: T,
    ) -> Self {
        self.job_query = v.into();
        self
    }

    /// Sets the value of [enable_broadening][crate::model::SearchJobsRequest::enable_broadening].
    pub fn set_enable_broadening<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.enable_broadening = v.into();
        self
    }

    /// Sets the value of [job_view][crate::model::SearchJobsRequest::job_view].
    pub fn set_job_view<T: std::convert::Into<crate::model::JobView>>(mut self, v: T) -> Self {
        self.job_view = v.into();
        self
    }

    /// Sets the value of [offset][crate::model::SearchJobsRequest::offset].
    pub fn set_offset<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.offset = v.into();
        self
    }

    /// Sets the value of [max_page_size][crate::model::SearchJobsRequest::max_page_size].
    pub fn set_max_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.max_page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::SearchJobsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::SearchJobsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }

    /// Sets the value of [diversification_level][crate::model::SearchJobsRequest::diversification_level].
    pub fn set_diversification_level<
        T: std::convert::Into<crate::model::search_jobs_request::DiversificationLevel>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.diversification_level = v.into();
        self
    }

    /// Sets the value of [custom_ranking_info][crate::model::SearchJobsRequest::custom_ranking_info].
    pub fn set_custom_ranking_info<
        T: std::convert::Into<
            std::option::Option<crate::model::search_jobs_request::CustomRankingInfo>,
        >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.custom_ranking_info = v.into();
        self
    }

    /// Sets the value of [disable_keyword_match][crate::model::SearchJobsRequest::disable_keyword_match].
    pub fn set_disable_keyword_match<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.disable_keyword_match = v.into();
        self
    }

    /// Sets the value of [keyword_match_mode][crate::model::SearchJobsRequest::keyword_match_mode].
    pub fn set_keyword_match_mode<
        T: std::convert::Into<crate::model::search_jobs_request::KeywordMatchMode>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.keyword_match_mode = v.into();
        self
    }

    /// Sets the value of [relevance_threshold][crate::model::SearchJobsRequest::relevance_threshold].
    pub fn set_relevance_threshold<
        T: std::convert::Into<crate::model::search_jobs_request::RelevanceThreshold>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.relevance_threshold = v.into();
        self
    }

    /// Sets the value of [histogram_queries][crate::model::SearchJobsRequest::histogram_queries].
    pub fn set_histogram_queries<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::HistogramQuery>,
    {
        use std::iter::Iterator;
        self.histogram_queries = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SearchJobsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.SearchJobsRequest"
    }
}

/// Defines additional types related to SearchJobsRequest
pub mod search_jobs_request {
    #[allow(unused_imports)]
    use super::*;

    /// Custom ranking information for
    /// [SearchJobsRequest][google.cloud.talent.v4.SearchJobsRequest].
    ///
    /// [google.cloud.talent.v4.SearchJobsRequest]: crate::model::SearchJobsRequest
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct CustomRankingInfo {
        /// Required. Controls over how important the score of
        /// [CustomRankingInfo.ranking_expression][google.cloud.talent.v4.SearchJobsRequest.CustomRankingInfo.ranking_expression]
        /// gets applied to job's final ranking position.
        ///
        /// An error is thrown if not specified.
        ///
        /// [google.cloud.talent.v4.SearchJobsRequest.CustomRankingInfo.ranking_expression]: crate::model::search_jobs_request::CustomRankingInfo::ranking_expression
        pub importance_level:
            crate::model::search_jobs_request::custom_ranking_info::ImportanceLevel,

        /// Required. Controls over how job documents get ranked on top of existing
        /// relevance score (determined by API algorithm). A combination of the
        /// ranking expression and relevance score is used to determine job's final
        /// ranking position.
        ///
        /// The syntax for this expression is a subset of Google SQL syntax.
        ///
        /// Supported operators are: +, -, *, /, where the left and right side of
        /// the operator is either a numeric
        /// [Job.custom_attributes][google.cloud.talent.v4.Job.custom_attributes]
        /// key, integer/double value or an expression that can be evaluated to a
        /// number.
        ///
        /// Parenthesis are supported to adjust calculation precedence. The
        /// expression must be < 200 characters in length.
        ///
        /// The expression is considered invalid for a job if the expression
        /// references custom attributes that are not populated on the job or if the
        /// expression results in a divide by zero. If an expression is invalid for a
        /// job, that job is demoted to the end of the results.
        ///
        /// Sample ranking expression
        /// (year + 25) * 0.25 - (freshness / 0.5)
        ///
        /// [google.cloud.talent.v4.Job.custom_attributes]: crate::model::Job::custom_attributes
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub ranking_expression: std::string::String,
    }

    impl CustomRankingInfo {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [importance_level][crate::model::search_jobs_request::CustomRankingInfo::importance_level].
        pub fn set_importance_level<
            T: std::convert::Into<
                crate::model::search_jobs_request::custom_ranking_info::ImportanceLevel,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.importance_level = v.into();
            self
        }

        /// Sets the value of [ranking_expression][crate::model::search_jobs_request::CustomRankingInfo::ranking_expression].
        pub fn set_ranking_expression<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.ranking_expression = v.into();
            self
        }
    }

    impl wkt::message::Message for CustomRankingInfo {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.talent.v4.SearchJobsRequest.CustomRankingInfo"
        }
    }

    /// Defines additional types related to CustomRankingInfo
    pub mod custom_ranking_info {
        #[allow(unused_imports)]
        use super::*;

        /// The importance level for
        /// [CustomRankingInfo.ranking_expression][google.cloud.talent.v4.SearchJobsRequest.CustomRankingInfo.ranking_expression].
        ///
        /// [google.cloud.talent.v4.SearchJobsRequest.CustomRankingInfo.ranking_expression]: crate::model::search_jobs_request::CustomRankingInfo::ranking_expression
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct ImportanceLevel(std::borrow::Cow<'static, str>);

        impl ImportanceLevel {
            /// Creates a new ImportanceLevel instance.
            pub const fn new(v: &'static str) -> Self {
                Self(std::borrow::Cow::Borrowed(v))
            }

            /// Gets the enum value.
            pub fn value(&self) -> &str {
                &self.0
            }
        }

        /// Useful constants to work with [ImportanceLevel](ImportanceLevel)
        pub mod importance_level {
            use super::ImportanceLevel;

            /// Default value if the importance level isn't specified.
            pub const IMPORTANCE_LEVEL_UNSPECIFIED: ImportanceLevel =
                ImportanceLevel::new("IMPORTANCE_LEVEL_UNSPECIFIED");

            /// The given ranking expression is of None importance, existing relevance
            /// score (determined by API algorithm) dominates job's final ranking
            /// position.
            pub const NONE: ImportanceLevel = ImportanceLevel::new("NONE");

            /// The given ranking expression is of Low importance in terms of job's
            /// final ranking position compared to existing relevance
            /// score (determined by API algorithm).
            pub const LOW: ImportanceLevel = ImportanceLevel::new("LOW");

            /// The given ranking expression is of Mild importance in terms of job's
            /// final ranking position compared to existing relevance
            /// score (determined by API algorithm).
            pub const MILD: ImportanceLevel = ImportanceLevel::new("MILD");

            /// The given ranking expression is of Medium importance in terms of job's
            /// final ranking position compared to existing relevance
            /// score (determined by API algorithm).
            pub const MEDIUM: ImportanceLevel = ImportanceLevel::new("MEDIUM");

            /// The given ranking expression is of High importance in terms of job's
            /// final ranking position compared to existing relevance
            /// score (determined by API algorithm).
            pub const HIGH: ImportanceLevel = ImportanceLevel::new("HIGH");

            /// The given ranking expression is of Extreme importance, and dominates
            /// job's final ranking position with existing relevance
            /// score (determined by API algorithm) ignored.
            pub const EXTREME: ImportanceLevel = ImportanceLevel::new("EXTREME");
        }

        impl std::convert::From<std::string::String> for ImportanceLevel {
            fn from(value: std::string::String) -> Self {
                Self(std::borrow::Cow::Owned(value))
            }
        }

        impl std::default::Default for ImportanceLevel {
            fn default() -> Self {
                importance_level::IMPORTANCE_LEVEL_UNSPECIFIED
            }
        }
    }

    /// A string-represented enumeration of the job search mode. The service
    /// operate differently for different modes of service.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct SearchMode(std::borrow::Cow<'static, str>);

    impl SearchMode {
        /// Creates a new SearchMode instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [SearchMode](SearchMode)
    pub mod search_mode {
        use super::SearchMode;

        /// The mode of the search method isn't specified. The default search
        /// behavior is identical to JOB_SEARCH search behavior.
        pub const SEARCH_MODE_UNSPECIFIED: SearchMode = SearchMode::new("SEARCH_MODE_UNSPECIFIED");

        /// The job search matches against all jobs, and featured jobs
        /// (jobs with promotionValue > 0) are not specially handled.
        pub const JOB_SEARCH: SearchMode = SearchMode::new("JOB_SEARCH");

        /// The job search matches only against featured jobs (jobs with a
        /// promotionValue > 0). This method doesn't return any jobs having a
        /// promotionValue <= 0. The search results order is determined by the
        /// promotionValue (jobs with a higher promotionValue are returned higher up
        /// in the search results), with relevance being used as a tiebreaker.
        pub const FEATURED_JOB_SEARCH: SearchMode = SearchMode::new("FEATURED_JOB_SEARCH");
    }

    impl std::convert::From<std::string::String> for SearchMode {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for SearchMode {
        fn default() -> Self {
            search_mode::SEARCH_MODE_UNSPECIFIED
        }
    }

    /// Controls whether highly similar jobs are returned next to each other in
    /// the search results. Jobs are identified as highly similar based on
    /// their titles, job categories, and locations. Highly similar results are
    /// clustered so that only one representative job of the cluster is
    /// displayed to the job seeker higher up in the results, with the other jobs
    /// being displayed lower down in the results.
    ///
    /// If you are using pageToken to page through the result set,
    /// latency might be lower but we can't guarantee that all results are
    /// returned. If you are using page offset, latency might be higher but all
    /// results are returned.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct DiversificationLevel(std::borrow::Cow<'static, str>);

    impl DiversificationLevel {
        /// Creates a new DiversificationLevel instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [DiversificationLevel](DiversificationLevel)
    pub mod diversification_level {
        use super::DiversificationLevel;

        /// The diversification level isn't specified.
        pub const DIVERSIFICATION_LEVEL_UNSPECIFIED: DiversificationLevel =
            DiversificationLevel::new("DIVERSIFICATION_LEVEL_UNSPECIFIED");

        /// Disables diversification. Jobs that would normally be pushed to the last
        /// page would not have their positions altered. This may result in highly
        /// similar jobs appearing in sequence in the search results.
        pub const DISABLED: DiversificationLevel = DiversificationLevel::new("DISABLED");

        /// Default diversifying behavior. The result list is ordered so that
        /// highly similar results are pushed to the end of the last page of search
        /// results.
        pub const SIMPLE: DiversificationLevel = DiversificationLevel::new("SIMPLE");

        /// Only one job from the same company will be shown at once, other jobs
        /// under same company are pushed to the end of the last page of search
        /// result.
        pub const ONE_PER_COMPANY: DiversificationLevel =
            DiversificationLevel::new("ONE_PER_COMPANY");

        /// Similar to ONE_PER_COMPANY, but it allows at most two jobs in the
        /// same company to be shown at once, the other jobs under same company are
        /// pushed to the end of the last page of search result.
        pub const TWO_PER_COMPANY: DiversificationLevel =
            DiversificationLevel::new("TWO_PER_COMPANY");

        /// Similar to ONE_PER_COMPANY, but it allows at most three jobs in the
        /// same company to be shown at once, the other jobs under same company are
        /// dropped.
        pub const MAX_THREE_PER_COMPANY: DiversificationLevel =
            DiversificationLevel::new("MAX_THREE_PER_COMPANY");

        /// The result list is ordered such that somewhat similar results are pushed
        /// to the end of the last page of the search results. This option is
        /// recommended if SIMPLE diversification does not diversify enough.
        pub const DIVERSIFY_BY_LOOSER_SIMILARITY: DiversificationLevel =
            DiversificationLevel::new("DIVERSIFY_BY_LOOSER_SIMILARITY");
    }

    impl std::convert::From<std::string::String> for DiversificationLevel {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for DiversificationLevel {
        fn default() -> Self {
            diversification_level::DIVERSIFICATION_LEVEL_UNSPECIFIED
        }
    }

    /// Controls what keyword matching behavior the search has. When keyword
    /// matching is enabled, a keyword match returns jobs that may not match given
    /// category filters when there are matching keywords. For example, for the
    /// query "program manager" with KeywordMatchMode set to KEYWORD_MATCH_ALL, a
    /// job posting with the title "software developer," which doesn't fall into
    /// "program manager" ontology, and "program manager" appearing in its
    /// description will be surfaced.
    ///
    /// For queries like "cloud" that don't contain title or
    /// location specific ontology, jobs with "cloud" keyword matches are returned
    /// regardless of this enum's value.
    ///
    /// Use
    /// [Company.keyword_searchable_job_custom_attributes][google.cloud.talent.v4.Company.keyword_searchable_job_custom_attributes]
    /// if company-specific globally matched custom field/attribute string values
    /// are needed. Enabling keyword match improves recall of subsequent search
    /// requests.
    ///
    /// [google.cloud.talent.v4.Company.keyword_searchable_job_custom_attributes]: crate::model::Company::keyword_searchable_job_custom_attributes
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct KeywordMatchMode(std::borrow::Cow<'static, str>);

    impl KeywordMatchMode {
        /// Creates a new KeywordMatchMode instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [KeywordMatchMode](KeywordMatchMode)
    pub mod keyword_match_mode {
        use super::KeywordMatchMode;

        /// The keyword match option isn't specified. Defaults to
        /// [KeywordMatchMode.KEYWORD_MATCH_ALL][google.cloud.talent.v4.SearchJobsRequest.KeywordMatchMode.KEYWORD_MATCH_ALL]
        /// behavior.
        ///
        /// [google.cloud.talent.v4.SearchJobsRequest.KeywordMatchMode.KEYWORD_MATCH_ALL]: crate::model::search_jobs_request::keyword_match_mode::KEYWORD_MATCH_ALL
        pub const KEYWORD_MATCH_MODE_UNSPECIFIED: KeywordMatchMode =
            KeywordMatchMode::new("KEYWORD_MATCH_MODE_UNSPECIFIED");

        /// Disables keyword matching.
        pub const KEYWORD_MATCH_DISABLED: KeywordMatchMode =
            KeywordMatchMode::new("KEYWORD_MATCH_DISABLED");

        /// Enable keyword matching over
        /// [Job.title][google.cloud.talent.v4.Job.title],
        /// [Job.description][google.cloud.talent.v4.Job.description],
        /// [Job.company_display_name][google.cloud.talent.v4.Job.company_display_name],
        /// [Job.addresses][google.cloud.talent.v4.Job.addresses],
        /// [Job.qualifications][google.cloud.talent.v4.Job.qualifications], and
        /// keyword searchable
        /// [Job.custom_attributes][google.cloud.talent.v4.Job.custom_attributes]
        /// fields.
        ///
        /// [google.cloud.talent.v4.Job.addresses]: crate::model::Job::addresses
        /// [google.cloud.talent.v4.Job.company_display_name]: crate::model::Job::company_display_name
        /// [google.cloud.talent.v4.Job.custom_attributes]: crate::model::Job::custom_attributes
        /// [google.cloud.talent.v4.Job.description]: crate::model::Job::description
        /// [google.cloud.talent.v4.Job.qualifications]: crate::model::Job::qualifications
        /// [google.cloud.talent.v4.Job.title]: crate::model::Job::title
        pub const KEYWORD_MATCH_ALL: KeywordMatchMode = KeywordMatchMode::new("KEYWORD_MATCH_ALL");

        /// Only enable keyword matching over
        /// [Job.title][google.cloud.talent.v4.Job.title].
        ///
        /// [google.cloud.talent.v4.Job.title]: crate::model::Job::title
        pub const KEYWORD_MATCH_TITLE_ONLY: KeywordMatchMode =
            KeywordMatchMode::new("KEYWORD_MATCH_TITLE_ONLY");
    }

    impl std::convert::From<std::string::String> for KeywordMatchMode {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for KeywordMatchMode {
        fn default() -> Self {
            keyword_match_mode::KEYWORD_MATCH_MODE_UNSPECIFIED
        }
    }

    /// The relevance threshold of the search results. The higher relevance
    /// threshold is, the higher relevant results are shown and the less number of
    /// results are returned.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct RelevanceThreshold(std::borrow::Cow<'static, str>);

    impl RelevanceThreshold {
        /// Creates a new RelevanceThreshold instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [RelevanceThreshold](RelevanceThreshold)
    pub mod relevance_threshold {
        use super::RelevanceThreshold;

        /// Default value. In this case, server behavior defaults to Google defined
        /// threshold.
        pub const RELEVANCE_THRESHOLD_UNSPECIFIED: RelevanceThreshold =
            RelevanceThreshold::new("RELEVANCE_THRESHOLD_UNSPECIFIED");

        /// Lowest relevance threshold.
        pub const LOWEST: RelevanceThreshold = RelevanceThreshold::new("LOWEST");

        /// Low relevance threshold.
        pub const LOW: RelevanceThreshold = RelevanceThreshold::new("LOW");

        /// Medium relevance threshold.
        pub const MEDIUM: RelevanceThreshold = RelevanceThreshold::new("MEDIUM");

        /// High relevance threshold.
        pub const HIGH: RelevanceThreshold = RelevanceThreshold::new("HIGH");
    }

    impl std::convert::From<std::string::String> for RelevanceThreshold {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for RelevanceThreshold {
        fn default() -> Self {
            relevance_threshold::RELEVANCE_THRESHOLD_UNSPECIFIED
        }
    }
}

/// Response for SearchJob method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SearchJobsResponse {
    /// The Job entities that match the specified
    /// [SearchJobsRequest][google.cloud.talent.v4.SearchJobsRequest].
    ///
    /// [google.cloud.talent.v4.SearchJobsRequest]: crate::model::SearchJobsRequest
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub matching_jobs: std::vec::Vec<crate::model::search_jobs_response::MatchingJob>,

    /// The histogram results that match with specified
    /// [SearchJobsRequest.histogram_queries][google.cloud.talent.v4.SearchJobsRequest.histogram_queries].
    ///
    /// [google.cloud.talent.v4.SearchJobsRequest.histogram_queries]: crate::model::SearchJobsRequest::histogram_queries
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub histogram_query_results: std::vec::Vec<crate::model::HistogramQueryResult>,

    /// The token that specifies the starting position of the next page of results.
    /// This field is empty if there are no more results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// The location filters that the service applied to the specified query. If
    /// any filters are lat-lng based, the
    /// [Location.location_type][google.cloud.talent.v4.Location.location_type] is
    /// [Location.LocationType.LOCATION_TYPE_UNSPECIFIED][google.cloud.talent.v4.Location.LocationType.LOCATION_TYPE_UNSPECIFIED].
    ///
    /// [google.cloud.talent.v4.Location.LocationType.LOCATION_TYPE_UNSPECIFIED]: crate::model::location::location_type::LOCATION_TYPE_UNSPECIFIED
    /// [google.cloud.talent.v4.Location.location_type]: crate::model::Location::location_type
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub location_filters: std::vec::Vec<crate::model::Location>,

    /// Number of jobs that match the specified query.
    ///
    /// Note: This size is precise only if the total is less than 100,000.
    pub total_size: i32,

    /// Additional information for the API invocation, such as the request
    /// tracking id.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub metadata: std::option::Option<crate::model::ResponseMetadata>,

    /// If query broadening is enabled, we may append additional results from the
    /// broadened query. This number indicates how many of the jobs returned in the
    /// jobs field are from the broadened query. These results are always at the
    /// end of the jobs list. In particular, a value of 0, or if the field isn't
    /// set, all the jobs in the jobs list are from the original
    /// (without broadening) query. If this field is non-zero, subsequent requests
    /// with offset after this result set should contain all broadened results.
    pub broadened_query_jobs_count: i32,

    /// The spell checking result, and correction.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub spell_correction: std::option::Option<crate::model::SpellingCorrection>,
}

impl SearchJobsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::SearchJobsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [total_size][crate::model::SearchJobsResponse::total_size].
    pub fn set_total_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.total_size = v.into();
        self
    }

    /// Sets the value of [metadata][crate::model::SearchJobsResponse::metadata].
    pub fn set_metadata<
        T: std::convert::Into<std::option::Option<crate::model::ResponseMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metadata = v.into();
        self
    }

    /// Sets the value of [broadened_query_jobs_count][crate::model::SearchJobsResponse::broadened_query_jobs_count].
    pub fn set_broadened_query_jobs_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.broadened_query_jobs_count = v.into();
        self
    }

    /// Sets the value of [spell_correction][crate::model::SearchJobsResponse::spell_correction].
    pub fn set_spell_correction<
        T: std::convert::Into<std::option::Option<crate::model::SpellingCorrection>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.spell_correction = v.into();
        self
    }

    /// Sets the value of [matching_jobs][crate::model::SearchJobsResponse::matching_jobs].
    pub fn set_matching_jobs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::search_jobs_response::MatchingJob>,
    {
        use std::iter::Iterator;
        self.matching_jobs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [histogram_query_results][crate::model::SearchJobsResponse::histogram_query_results].
    pub fn set_histogram_query_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::HistogramQueryResult>,
    {
        use std::iter::Iterator;
        self.histogram_query_results = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [location_filters][crate::model::SearchJobsResponse::location_filters].
    pub fn set_location_filters<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Location>,
    {
        use std::iter::Iterator;
        self.location_filters = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SearchJobsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.SearchJobsResponse"
    }
}

/// Defines additional types related to SearchJobsResponse
pub mod search_jobs_response {
    #[allow(unused_imports)]
    use super::*;

    /// Job entry with metadata inside
    /// [SearchJobsResponse][google.cloud.talent.v4.SearchJobsResponse].
    ///
    /// [google.cloud.talent.v4.SearchJobsResponse]: crate::model::SearchJobsResponse
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct MatchingJob {
        /// Job resource that matches the specified
        /// [SearchJobsRequest][google.cloud.talent.v4.SearchJobsRequest].
        ///
        /// [google.cloud.talent.v4.SearchJobsRequest]: crate::model::SearchJobsRequest
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub job: std::option::Option<crate::model::Job>,

        /// A summary of the job with core information that's displayed on the search
        /// results listing page.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub job_summary: std::string::String,

        /// Contains snippets of text from the
        /// [Job.title][google.cloud.talent.v4.Job.title] field most closely matching
        /// a search query's keywords, if available. The matching query keywords are
        /// enclosed in HTML bold tags.
        ///
        /// [google.cloud.talent.v4.Job.title]: crate::model::Job::title
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub job_title_snippet: std::string::String,

        /// Contains snippets of text from the
        /// [Job.description][google.cloud.talent.v4.Job.description] and similar
        /// fields that most closely match a search query's keywords, if available.
        /// All HTML tags in the original fields are stripped when returned in this
        /// field, and matching query keywords are enclosed in HTML bold tags.
        ///
        /// [google.cloud.talent.v4.Job.description]: crate::model::Job::description
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub search_text_snippet: std::string::String,

        /// Commute information which is generated based on specified
        /// [CommuteFilter][google.cloud.talent.v4.CommuteFilter].
        ///
        /// [google.cloud.talent.v4.CommuteFilter]: crate::model::CommuteFilter
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub commute_info: std::option::Option<crate::model::search_jobs_response::CommuteInfo>,
    }

    impl MatchingJob {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [job][crate::model::search_jobs_response::MatchingJob::job].
        pub fn set_job<T: std::convert::Into<std::option::Option<crate::model::Job>>>(
            mut self,
            v: T,
        ) -> Self {
            self.job = v.into();
            self
        }

        /// Sets the value of [job_summary][crate::model::search_jobs_response::MatchingJob::job_summary].
        pub fn set_job_summary<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.job_summary = v.into();
            self
        }

        /// Sets the value of [job_title_snippet][crate::model::search_jobs_response::MatchingJob::job_title_snippet].
        pub fn set_job_title_snippet<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.job_title_snippet = v.into();
            self
        }

        /// Sets the value of [search_text_snippet][crate::model::search_jobs_response::MatchingJob::search_text_snippet].
        pub fn set_search_text_snippet<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.search_text_snippet = v.into();
            self
        }

        /// Sets the value of [commute_info][crate::model::search_jobs_response::MatchingJob::commute_info].
        pub fn set_commute_info<
            T: std::convert::Into<
                std::option::Option<crate::model::search_jobs_response::CommuteInfo>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.commute_info = v.into();
            self
        }
    }

    impl wkt::message::Message for MatchingJob {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.talent.v4.SearchJobsResponse.MatchingJob"
        }
    }

    /// Commute details related to this job.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct CommuteInfo {
        /// Location used as the destination in the commute calculation.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub job_location: std::option::Option<crate::model::Location>,

        /// The number of seconds required to travel to the job location from the
        /// query location. A duration of 0 seconds indicates that the job isn't
        /// reachable within the requested duration, but was returned as part of an
        /// expanded query.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub travel_duration: std::option::Option<wkt::Duration>,
    }

    impl CommuteInfo {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [job_location][crate::model::search_jobs_response::CommuteInfo::job_location].
        pub fn set_job_location<
            T: std::convert::Into<std::option::Option<crate::model::Location>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.job_location = v.into();
            self
        }

        /// Sets the value of [travel_duration][crate::model::search_jobs_response::CommuteInfo::travel_duration].
        pub fn set_travel_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
            mut self,
            v: T,
        ) -> Self {
            self.travel_duration = v.into();
            self
        }
    }

    impl wkt::message::Message for CommuteInfo {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.talent.v4.SearchJobsResponse.CommuteInfo"
        }
    }
}

/// Request to create a batch of jobs.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchCreateJobsRequest {
    /// Required. The resource name of the tenant under which the job is created.
    ///
    /// The format is "projects/{project_id}/tenants/{tenant_id}". For example,
    /// "projects/foo/tenants/bar".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The jobs to be created.
    /// A maximum of 200 jobs can be created in a batch.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub jobs: std::vec::Vec<crate::model::Job>,
}

impl BatchCreateJobsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::BatchCreateJobsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [jobs][crate::model::BatchCreateJobsRequest::jobs].
    pub fn set_jobs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Job>,
    {
        use std::iter::Iterator;
        self.jobs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchCreateJobsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.BatchCreateJobsRequest"
    }
}

/// Request to update a batch of jobs.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchUpdateJobsRequest {
    /// Required. The resource name of the tenant under which the job is created.
    ///
    /// The format is "projects/{project_id}/tenants/{tenant_id}". For example,
    /// "projects/foo/tenants/bar".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The jobs to be updated.
    /// A maximum of 200 jobs can be updated in a batch.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub jobs: std::vec::Vec<crate::model::Job>,

    /// Strongly recommended for the best service experience. Be aware that it will
    /// also increase latency when checking the status of a batch operation.
    ///
    /// If [update_mask][google.cloud.talent.v4.BatchUpdateJobsRequest.update_mask]
    /// is provided, only the specified fields in [Job][google.cloud.talent.v4.Job]
    /// are updated. Otherwise all the fields are updated.
    ///
    /// A field mask to restrict the fields that are updated. Only
    /// top level fields of [Job][google.cloud.talent.v4.Job] are supported.
    ///
    /// If [update_mask][google.cloud.talent.v4.BatchUpdateJobsRequest.update_mask]
    /// is provided, The [Job][google.cloud.talent.v4.Job] inside
    /// [JobResult][google.cloud.talent.v4.JobResult]
    /// will only contains fields that is updated, plus the Id of the Job.
    /// Otherwise,  [Job][google.cloud.talent.v4.Job] will include all fields,
    /// which can yield a very large response.
    ///
    /// [google.cloud.talent.v4.BatchUpdateJobsRequest.update_mask]: crate::model::BatchUpdateJobsRequest::update_mask
    /// [google.cloud.talent.v4.Job]: crate::model::Job
    /// [google.cloud.talent.v4.JobResult]: crate::model::JobResult
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl BatchUpdateJobsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::BatchUpdateJobsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::BatchUpdateJobsRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [jobs][crate::model::BatchUpdateJobsRequest::jobs].
    pub fn set_jobs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Job>,
    {
        use std::iter::Iterator;
        self.jobs = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchUpdateJobsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.BatchUpdateJobsRequest"
    }
}

/// Request to delete a batch of jobs.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchDeleteJobsRequest {
    /// Required. The resource name of the tenant under which the job is created.
    ///
    /// The format is "projects/{project_id}/tenants/{tenant_id}". For example,
    /// "projects/foo/tenants/bar".
    ///
    /// The parent of all of the jobs specified in `names` must match this field.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The names of the jobs to delete.
    ///
    /// The format is "projects/{project_id}/tenants/{tenant_id}/jobs/{job_id}".
    /// For example, "projects/foo/tenants/bar/jobs/baz".
    ///
    /// A maximum of 200 jobs can be deleted in a batch.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub names: std::vec::Vec<std::string::String>,
}

impl BatchDeleteJobsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::BatchDeleteJobsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [names][crate::model::BatchDeleteJobsRequest::names].
    pub fn set_names<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.names = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchDeleteJobsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.BatchDeleteJobsRequest"
    }
}

/// Mutation result of a job from a batch operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct JobResult {
    /// Here [Job][google.cloud.talent.v4.Job] only contains basic information
    /// including [name][google.cloud.talent.v4.Job.name],
    /// [company][google.cloud.talent.v4.Job.company],
    /// [language_code][google.cloud.talent.v4.Job.language_code] and
    /// [requisition_id][google.cloud.talent.v4.Job.requisition_id], use getJob
    /// method to retrieve detailed information of the created/updated job.
    ///
    /// [google.cloud.talent.v4.Job]: crate::model::Job
    /// [google.cloud.talent.v4.Job.company]: crate::model::Job::company
    /// [google.cloud.talent.v4.Job.language_code]: crate::model::Job::language_code
    /// [google.cloud.talent.v4.Job.name]: crate::model::Job::name
    /// [google.cloud.talent.v4.Job.requisition_id]: crate::model::Job::requisition_id
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub job: std::option::Option<crate::model::Job>,

    /// The status of the job processed. This field is populated if the
    /// processing of the [job][google.cloud.talent.v4.JobResult.job] fails.
    ///
    /// [google.cloud.talent.v4.JobResult.job]: crate::model::JobResult::job
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub status: std::option::Option<rpc::model::Status>,
}

impl JobResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [job][crate::model::JobResult::job].
    pub fn set_job<T: std::convert::Into<std::option::Option<crate::model::Job>>>(
        mut self,
        v: T,
    ) -> Self {
        self.job = v.into();
        self
    }

    /// Sets the value of [status][crate::model::JobResult::status].
    pub fn set_status<T: std::convert::Into<std::option::Option<rpc::model::Status>>>(
        mut self,
        v: T,
    ) -> Self {
        self.status = v.into();
        self
    }
}

impl wkt::message::Message for JobResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.JobResult"
    }
}

/// The result of
/// [JobService.BatchCreateJobs][google.cloud.talent.v4.JobService.BatchCreateJobs].
/// It's used to replace
/// [google.longrunning.Operation.response][google.longrunning.Operation.response]
/// in case of success.
///
/// [google.cloud.talent.v4.JobService.BatchCreateJobs]: crate::client::JobService::batch_create_jobs
/// [google.longrunning.Operation.response]: longrunning::model::Operation::result
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchCreateJobsResponse {
    /// List of job mutation results from a batch create operation. It can change
    /// until operation status is FINISHED, FAILED or CANCELLED.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub job_results: std::vec::Vec<crate::model::JobResult>,
}

impl BatchCreateJobsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [job_results][crate::model::BatchCreateJobsResponse::job_results].
    pub fn set_job_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::JobResult>,
    {
        use std::iter::Iterator;
        self.job_results = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchCreateJobsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.BatchCreateJobsResponse"
    }
}

/// The result of
/// [JobService.BatchUpdateJobs][google.cloud.talent.v4.JobService.BatchUpdateJobs].
/// It's used to replace
/// [google.longrunning.Operation.response][google.longrunning.Operation.response]
/// in case of success.
///
/// [google.cloud.talent.v4.JobService.BatchUpdateJobs]: crate::client::JobService::batch_update_jobs
/// [google.longrunning.Operation.response]: longrunning::model::Operation::result
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchUpdateJobsResponse {
    /// List of job mutation results from a batch update operation. It can change
    /// until operation status is FINISHED, FAILED or CANCELLED.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub job_results: std::vec::Vec<crate::model::JobResult>,
}

impl BatchUpdateJobsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [job_results][crate::model::BatchUpdateJobsResponse::job_results].
    pub fn set_job_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::JobResult>,
    {
        use std::iter::Iterator;
        self.job_results = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchUpdateJobsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.BatchUpdateJobsResponse"
    }
}

/// The result of
/// [JobService.BatchDeleteJobs][google.cloud.talent.v4.JobService.BatchDeleteJobs].
/// It's used to replace
/// [google.longrunning.Operation.response][google.longrunning.Operation.response]
/// in case of success.
///
/// [google.cloud.talent.v4.JobService.BatchDeleteJobs]: crate::client::JobService::batch_delete_jobs
/// [google.longrunning.Operation.response]: longrunning::model::Operation::result
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct BatchDeleteJobsResponse {
    /// List of job mutation results from a batch delete operation. It can change
    /// until operation status is FINISHED, FAILED or CANCELLED.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub job_results: std::vec::Vec<crate::model::JobResult>,
}

impl BatchDeleteJobsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [job_results][crate::model::BatchDeleteJobsResponse::job_results].
    pub fn set_job_results<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::JobResult>,
    {
        use std::iter::Iterator;
        self.job_results = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for BatchDeleteJobsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.BatchDeleteJobsResponse"
    }
}

/// A Tenant resource represents a tenant in the service. A tenant is a group or
/// entity that shares common access with specific privileges for resources like
/// jobs. Customer may create multiple tenants to provide data isolation for
/// different groups.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Tenant {
    /// Required during tenant update.
    ///
    /// The resource name for a tenant. This is generated by the service when a
    /// tenant is created.
    ///
    /// The format is "projects/{project_id}/tenants/{tenant_id}", for example,
    /// "projects/foo/tenants/bar".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Client side tenant identifier, used to uniquely identify the
    /// tenant.
    ///
    /// The maximum number of allowed characters is 255.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub external_id: std::string::String,
}

impl Tenant {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Tenant::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [external_id][crate::model::Tenant::external_id].
    pub fn set_external_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.external_id = v.into();
        self
    }
}

impl wkt::message::Message for Tenant {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.Tenant"
    }
}

/// The Request of the CreateTenant method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateTenantRequest {
    /// Required. Resource name of the project under which the tenant is created.
    ///
    /// The format is "projects/{project_id}", for example,
    /// "projects/foo".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The tenant to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub tenant: std::option::Option<crate::model::Tenant>,
}

impl CreateTenantRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateTenantRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [tenant][crate::model::CreateTenantRequest::tenant].
    pub fn set_tenant<T: std::convert::Into<std::option::Option<crate::model::Tenant>>>(
        mut self,
        v: T,
    ) -> Self {
        self.tenant = v.into();
        self
    }
}

impl wkt::message::Message for CreateTenantRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.CreateTenantRequest"
    }
}

/// Request for getting a tenant by name.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetTenantRequest {
    /// Required. The resource name of the tenant to be retrieved.
    ///
    /// The format is "projects/{project_id}/tenants/{tenant_id}", for example,
    /// "projects/foo/tenants/bar".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetTenantRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetTenantRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetTenantRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.GetTenantRequest"
    }
}

/// Request for updating a specified tenant.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateTenantRequest {
    /// Required. The tenant resource to replace the current resource in the
    /// system.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub tenant: std::option::Option<crate::model::Tenant>,

    /// Strongly recommended for the best service experience.
    ///
    /// If [update_mask][google.cloud.talent.v4.UpdateTenantRequest.update_mask] is
    /// provided, only the specified fields in
    /// [tenant][google.cloud.talent.v4.UpdateTenantRequest.tenant] are updated.
    /// Otherwise all the fields are updated.
    ///
    /// A field mask to specify the tenant fields to be updated. Only
    /// top level fields of [Tenant][google.cloud.talent.v4.Tenant] are supported.
    ///
    /// [google.cloud.talent.v4.Tenant]: crate::model::Tenant
    /// [google.cloud.talent.v4.UpdateTenantRequest.tenant]: crate::model::UpdateTenantRequest::tenant
    /// [google.cloud.talent.v4.UpdateTenantRequest.update_mask]: crate::model::UpdateTenantRequest::update_mask
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateTenantRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [tenant][crate::model::UpdateTenantRequest::tenant].
    pub fn set_tenant<T: std::convert::Into<std::option::Option<crate::model::Tenant>>>(
        mut self,
        v: T,
    ) -> Self {
        self.tenant = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateTenantRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateTenantRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.UpdateTenantRequest"
    }
}

/// Request to delete a tenant.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteTenantRequest {
    /// Required. The resource name of the tenant to be deleted.
    ///
    /// The format is "projects/{project_id}/tenants/{tenant_id}", for example,
    /// "projects/foo/tenants/bar".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteTenantRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteTenantRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteTenantRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.DeleteTenantRequest"
    }
}

/// List tenants for which the client has ACL visibility.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTenantsRequest {
    /// Required. Resource name of the project under which the tenant is created.
    ///
    /// The format is "projects/{project_id}", for example,
    /// "projects/foo".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The starting indicator from which to return results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// The maximum number of tenants to be returned, at most 100.
    /// Default is 100 if a non-positive number is provided.
    pub page_size: i32,
}

impl ListTenantsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListTenantsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListTenantsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListTenantsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }
}

impl wkt::message::Message for ListTenantsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.ListTenantsRequest"
    }
}

/// The List tenants response object.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTenantsResponse {
    /// Tenants for the current client.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub tenants: std::vec::Vec<crate::model::Tenant>,

    /// A token to retrieve the next page of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Additional information for the API invocation, such as the request
    /// tracking id.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub metadata: std::option::Option<crate::model::ResponseMetadata>,
}

impl ListTenantsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListTenantsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [metadata][crate::model::ListTenantsResponse::metadata].
    pub fn set_metadata<
        T: std::convert::Into<std::option::Option<crate::model::ResponseMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.metadata = v.into();
        self
    }

    /// Sets the value of [tenants][crate::model::ListTenantsResponse::tenants].
    pub fn set_tenants<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Tenant>,
    {
        use std::iter::Iterator;
        self.tenants = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListTenantsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.talent.v4.ListTenantsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListTenantsResponse {
    type PageItem = crate::model::Tenant;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.tenants
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// An enum that represents the size of the company.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct CompanySize(std::borrow::Cow<'static, str>);

impl CompanySize {
    /// Creates a new CompanySize instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [CompanySize](CompanySize)
pub mod company_size {
    use super::CompanySize;

    /// Default value if the size isn't specified.
    pub const COMPANY_SIZE_UNSPECIFIED: CompanySize = CompanySize::new("COMPANY_SIZE_UNSPECIFIED");

    /// The company has less than 50 employees.
    pub const MINI: CompanySize = CompanySize::new("MINI");

    /// The company has between 50 and 99 employees.
    pub const SMALL: CompanySize = CompanySize::new("SMALL");

    /// The company has between 100 and 499 employees.
    pub const SMEDIUM: CompanySize = CompanySize::new("SMEDIUM");

    /// The company has between 500 and 999 employees.
    pub const MEDIUM: CompanySize = CompanySize::new("MEDIUM");

    /// The company has between 1,000 and 4,999 employees.
    pub const BIG: CompanySize = CompanySize::new("BIG");

    /// The company has between 5,000 and 9,999 employees.
    pub const BIGGER: CompanySize = CompanySize::new("BIGGER");

    /// The company has 10,000 or more employees.
    pub const GIANT: CompanySize = CompanySize::new("GIANT");
}

impl std::convert::From<std::string::String> for CompanySize {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

impl std::default::Default for CompanySize {
    fn default() -> Self {
        company_size::COMPANY_SIZE_UNSPECIFIED
    }
}

/// An enum that represents employee benefits included with the job.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct JobBenefit(std::borrow::Cow<'static, str>);

impl JobBenefit {
    /// Creates a new JobBenefit instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [JobBenefit](JobBenefit)
pub mod job_benefit {
    use super::JobBenefit;

    /// Default value if the type isn't specified.
    pub const JOB_BENEFIT_UNSPECIFIED: JobBenefit = JobBenefit::new("JOB_BENEFIT_UNSPECIFIED");

    /// The job includes access to programs that support child care, such
    /// as daycare.
    pub const CHILD_CARE: JobBenefit = JobBenefit::new("CHILD_CARE");

    /// The job includes dental services covered by a dental
    /// insurance plan.
    pub const DENTAL: JobBenefit = JobBenefit::new("DENTAL");

    /// The job offers specific benefits to domestic partners.
    pub const DOMESTIC_PARTNER: JobBenefit = JobBenefit::new("DOMESTIC_PARTNER");

    /// The job allows for a flexible work schedule.
    pub const FLEXIBLE_HOURS: JobBenefit = JobBenefit::new("FLEXIBLE_HOURS");

    /// The job includes health services covered by a medical insurance plan.
    pub const MEDICAL: JobBenefit = JobBenefit::new("MEDICAL");

    /// The job includes a life insurance plan provided by the employer or
    /// available for purchase by the employee.
    pub const LIFE_INSURANCE: JobBenefit = JobBenefit::new("LIFE_INSURANCE");

    /// The job allows for a leave of absence to a parent to care for a newborn
    /// child.
    pub const PARENTAL_LEAVE: JobBenefit = JobBenefit::new("PARENTAL_LEAVE");

    /// The job includes a workplace retirement plan provided by the
    /// employer or available for purchase by the employee.
    pub const RETIREMENT_PLAN: JobBenefit = JobBenefit::new("RETIREMENT_PLAN");

    /// The job allows for paid time off due to illness.
    pub const SICK_DAYS: JobBenefit = JobBenefit::new("SICK_DAYS");

    /// The job includes paid time off for vacation.
    pub const VACATION: JobBenefit = JobBenefit::new("VACATION");

    /// The job includes vision services covered by a vision
    /// insurance plan.
    pub const VISION: JobBenefit = JobBenefit::new("VISION");
}

impl std::convert::From<std::string::String> for JobBenefit {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

impl std::default::Default for JobBenefit {
    fn default() -> Self {
        job_benefit::JOB_BENEFIT_UNSPECIFIED
    }
}

/// Educational degree level defined in International Standard Classification
/// of Education (ISCED).
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct DegreeType(std::borrow::Cow<'static, str>);

impl DegreeType {
    /// Creates a new DegreeType instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [DegreeType](DegreeType)
pub mod degree_type {
    use super::DegreeType;

    /// Default value. Represents no degree, or early childhood education.
    /// Maps to ISCED code 0.
    /// Ex) Kindergarten
    pub const DEGREE_TYPE_UNSPECIFIED: DegreeType = DegreeType::new("DEGREE_TYPE_UNSPECIFIED");

    /// Primary education which is typically the first stage of compulsory
    /// education. ISCED code 1.
    /// Ex) Elementary school
    pub const PRIMARY_EDUCATION: DegreeType = DegreeType::new("PRIMARY_EDUCATION");

    /// Lower secondary education; First stage of secondary education building on
    /// primary education, typically with a more subject-oriented curriculum.
    /// ISCED code 2.
    /// Ex) Middle school
    pub const LOWER_SECONDARY_EDUCATION: DegreeType = DegreeType::new("LOWER_SECONDARY_EDUCATION");

    /// Middle education; Second/final stage of secondary education preparing for
    /// tertiary education and/or providing skills relevant to employment.
    /// Usually with an increased range of subject options and streams. ISCED
    /// code 3.
    /// Ex) High school
    pub const UPPER_SECONDARY_EDUCATION: DegreeType = DegreeType::new("UPPER_SECONDARY_EDUCATION");

    /// Adult Remedial Education; Programmes providing learning experiences that
    /// build on secondary education and prepare for labour market entry and/or
    /// tertiary education. The content is broader than secondary but not as
    /// complex as tertiary education. ISCED code 4.
    pub const ADULT_REMEDIAL_EDUCATION: DegreeType = DegreeType::new("ADULT_REMEDIAL_EDUCATION");

    /// Associate's or equivalent; Short first tertiary programmes that are
    /// typically practically-based, occupationally-specific and prepare for
    /// labour market entry. These programmes may also provide a pathway to other
    /// tertiary programmes. ISCED code 5.
    pub const ASSOCIATES_OR_EQUIVALENT: DegreeType = DegreeType::new("ASSOCIATES_OR_EQUIVALENT");

    /// Bachelor's or equivalent; Programmes designed to provide intermediate
    /// academic and/or professional knowledge, skills and competencies leading
    /// to a first tertiary degree or equivalent qualification. ISCED code 6.
    pub const BACHELORS_OR_EQUIVALENT: DegreeType = DegreeType::new("BACHELORS_OR_EQUIVALENT");

    /// Master's or equivalent; Programmes designed to provide advanced academic
    /// and/or professional knowledge, skills and competencies leading to a
    /// second tertiary degree or equivalent qualification. ISCED code 7.
    pub const MASTERS_OR_EQUIVALENT: DegreeType = DegreeType::new("MASTERS_OR_EQUIVALENT");

    /// Doctoral or equivalent; Programmes designed primarily to lead to an
    /// advanced research qualification, usually concluding with the submission
    /// and defense of a substantive dissertation of publishable quality based on
    /// original research. ISCED code 8.
    pub const DOCTORAL_OR_EQUIVALENT: DegreeType = DegreeType::new("DOCTORAL_OR_EQUIVALENT");
}

impl std::convert::From<std::string::String> for DegreeType {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

impl std::default::Default for DegreeType {
    fn default() -> Self {
        degree_type::DEGREE_TYPE_UNSPECIFIED
    }
}

/// An enum that represents the employment type of a job.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct EmploymentType(std::borrow::Cow<'static, str>);

impl EmploymentType {
    /// Creates a new EmploymentType instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [EmploymentType](EmploymentType)
pub mod employment_type {
    use super::EmploymentType;

    /// The default value if the employment type isn't specified.
    pub const EMPLOYMENT_TYPE_UNSPECIFIED: EmploymentType =
        EmploymentType::new("EMPLOYMENT_TYPE_UNSPECIFIED");

    /// The job requires working a number of hours that constitute full
    /// time employment, typically 40 or more hours per week.
    pub const FULL_TIME: EmploymentType = EmploymentType::new("FULL_TIME");

    /// The job entails working fewer hours than a full time job,
    /// typically less than 40 hours a week.
    pub const PART_TIME: EmploymentType = EmploymentType::new("PART_TIME");

    /// The job is offered as a contracted, as opposed to a salaried employee,
    /// position.
    pub const CONTRACTOR: EmploymentType = EmploymentType::new("CONTRACTOR");

    /// The job is offered as a contracted position with the understanding
    /// that it's converted into a full-time position at the end of the
    /// contract. Jobs of this type are also returned by a search for
    /// [EmploymentType.CONTRACTOR][google.cloud.talent.v4.EmploymentType.CONTRACTOR]
    /// jobs.
    ///
    /// [google.cloud.talent.v4.EmploymentType.CONTRACTOR]: crate::model::employment_type::CONTRACTOR
    pub const CONTRACT_TO_HIRE: EmploymentType = EmploymentType::new("CONTRACT_TO_HIRE");

    /// The job is offered as a temporary employment opportunity, usually
    /// a short-term engagement.
    pub const TEMPORARY: EmploymentType = EmploymentType::new("TEMPORARY");

    /// The job is a fixed-term opportunity for students or entry-level job
    /// seekers to obtain on-the-job training, typically offered as a summer
    /// position.
    pub const INTERN: EmploymentType = EmploymentType::new("INTERN");

    /// The is an opportunity for an individual to volunteer, where there's no
    /// expectation of compensation for the provided services.
    pub const VOLUNTEER: EmploymentType = EmploymentType::new("VOLUNTEER");

    /// The job requires an employee to work on an as-needed basis with a
    /// flexible schedule.
    pub const PER_DIEM: EmploymentType = EmploymentType::new("PER_DIEM");

    /// The job involves employing people in remote areas and flying them
    /// temporarily to the work site instead of relocating employees and their
    /// families permanently.
    pub const FLY_IN_FLY_OUT: EmploymentType = EmploymentType::new("FLY_IN_FLY_OUT");

    /// The job does not fit any of the other listed types.
    pub const OTHER_EMPLOYMENT_TYPE: EmploymentType = EmploymentType::new("OTHER_EMPLOYMENT_TYPE");
}

impl std::convert::From<std::string::String> for EmploymentType {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

impl std::default::Default for EmploymentType {
    fn default() -> Self {
        employment_type::EMPLOYMENT_TYPE_UNSPECIFIED
    }
}

/// An enum that represents the required experience level required for the job.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct JobLevel(std::borrow::Cow<'static, str>);

impl JobLevel {
    /// Creates a new JobLevel instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [JobLevel](JobLevel)
pub mod job_level {
    use super::JobLevel;

    /// The default value if the level isn't specified.
    pub const JOB_LEVEL_UNSPECIFIED: JobLevel = JobLevel::new("JOB_LEVEL_UNSPECIFIED");

    /// Entry-level individual contributors, typically with less than 2 years of
    /// experience in a similar role. Includes interns.
    pub const ENTRY_LEVEL: JobLevel = JobLevel::new("ENTRY_LEVEL");

    /// Experienced individual contributors, typically with 2+ years of
    /// experience in a similar role.
    pub const EXPERIENCED: JobLevel = JobLevel::new("EXPERIENCED");

    /// Entry- to mid-level managers responsible for managing a team of people.
    pub const MANAGER: JobLevel = JobLevel::new("MANAGER");

    /// Senior-level managers responsible for managing teams of managers.
    pub const DIRECTOR: JobLevel = JobLevel::new("DIRECTOR");

    /// Executive-level managers and above, including C-level positions.
    pub const EXECUTIVE: JobLevel = JobLevel::new("EXECUTIVE");
}

impl std::convert::From<std::string::String> for JobLevel {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

impl std::default::Default for JobLevel {
    fn default() -> Self {
        job_level::JOB_LEVEL_UNSPECIFIED
    }
}

/// An enum that represents the categorization or primary focus of specific
/// role. This value is different than the "industry" associated with a role,
/// which is related to the categorization of the company listing the job.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct JobCategory(std::borrow::Cow<'static, str>);

impl JobCategory {
    /// Creates a new JobCategory instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [JobCategory](JobCategory)
pub mod job_category {
    use super::JobCategory;

    /// The default value if the category isn't specified.
    pub const JOB_CATEGORY_UNSPECIFIED: JobCategory = JobCategory::new("JOB_CATEGORY_UNSPECIFIED");

    /// An accounting and finance job, such as an Accountant.
    pub const ACCOUNTING_AND_FINANCE: JobCategory = JobCategory::new("ACCOUNTING_AND_FINANCE");

    /// An administrative and office job, such as an Administrative Assistant.
    pub const ADMINISTRATIVE_AND_OFFICE: JobCategory =
        JobCategory::new("ADMINISTRATIVE_AND_OFFICE");

    /// An advertising and marketing job, such as Marketing Manager.
    pub const ADVERTISING_AND_MARKETING: JobCategory =
        JobCategory::new("ADVERTISING_AND_MARKETING");

    /// An animal care job, such as Veterinarian.
    pub const ANIMAL_CARE: JobCategory = JobCategory::new("ANIMAL_CARE");

    /// An art, fashion, or design job, such as Designer.
    pub const ART_FASHION_AND_DESIGN: JobCategory = JobCategory::new("ART_FASHION_AND_DESIGN");

    /// A business operations job, such as Business Operations Manager.
    pub const BUSINESS_OPERATIONS: JobCategory = JobCategory::new("BUSINESS_OPERATIONS");

    /// A cleaning and facilities job, such as Custodial Staff.
    pub const CLEANING_AND_FACILITIES: JobCategory = JobCategory::new("CLEANING_AND_FACILITIES");

    /// A computer and IT job, such as Systems Administrator.
    pub const COMPUTER_AND_IT: JobCategory = JobCategory::new("COMPUTER_AND_IT");

    /// A construction job, such as General Laborer.
    pub const CONSTRUCTION: JobCategory = JobCategory::new("CONSTRUCTION");

    /// A customer service job, such s Cashier.
    pub const CUSTOMER_SERVICE: JobCategory = JobCategory::new("CUSTOMER_SERVICE");

    /// An education job, such as School Teacher.
    pub const EDUCATION: JobCategory = JobCategory::new("EDUCATION");

    /// An entertainment and travel job, such as Flight Attendant.
    pub const ENTERTAINMENT_AND_TRAVEL: JobCategory = JobCategory::new("ENTERTAINMENT_AND_TRAVEL");

    /// A farming or outdoor job, such as Park Ranger.
    pub const FARMING_AND_OUTDOORS: JobCategory = JobCategory::new("FARMING_AND_OUTDOORS");

    /// A healthcare job, such as Registered Nurse.
    pub const HEALTHCARE: JobCategory = JobCategory::new("HEALTHCARE");

    /// A human resources job, such as Human Resources Director.
    pub const HUMAN_RESOURCES: JobCategory = JobCategory::new("HUMAN_RESOURCES");

    /// An installation, maintenance, or repair job, such as Electrician.
    pub const INSTALLATION_MAINTENANCE_AND_REPAIR: JobCategory =
        JobCategory::new("INSTALLATION_MAINTENANCE_AND_REPAIR");

    /// A legal job, such as Law Clerk.
    pub const LEGAL: JobCategory = JobCategory::new("LEGAL");

    /// A management job, often used in conjunction with another category,
    /// such as Store Manager.
    pub const MANAGEMENT: JobCategory = JobCategory::new("MANAGEMENT");

    /// A manufacturing or warehouse job, such as Assembly Technician.
    pub const MANUFACTURING_AND_WAREHOUSE: JobCategory =
        JobCategory::new("MANUFACTURING_AND_WAREHOUSE");

    /// A media, communications, or writing job, such as Media Relations.
    pub const MEDIA_COMMUNICATIONS_AND_WRITING: JobCategory =
        JobCategory::new("MEDIA_COMMUNICATIONS_AND_WRITING");

    /// An oil, gas or mining job, such as Offshore Driller.
    pub const OIL_GAS_AND_MINING: JobCategory = JobCategory::new("OIL_GAS_AND_MINING");

    /// A personal care and services job, such as Hair Stylist.
    pub const PERSONAL_CARE_AND_SERVICES: JobCategory =
        JobCategory::new("PERSONAL_CARE_AND_SERVICES");

    /// A protective services job, such as Security Guard.
    pub const PROTECTIVE_SERVICES: JobCategory = JobCategory::new("PROTECTIVE_SERVICES");

    /// A real estate job, such as Buyer's Agent.
    pub const REAL_ESTATE: JobCategory = JobCategory::new("REAL_ESTATE");

    /// A restaurant and hospitality job, such as Restaurant Server.
    pub const RESTAURANT_AND_HOSPITALITY: JobCategory =
        JobCategory::new("RESTAURANT_AND_HOSPITALITY");

    /// A sales and/or retail job, such Sales Associate.
    pub const SALES_AND_RETAIL: JobCategory = JobCategory::new("SALES_AND_RETAIL");

    /// A science and engineering job, such as Lab Technician.
    pub const SCIENCE_AND_ENGINEERING: JobCategory = JobCategory::new("SCIENCE_AND_ENGINEERING");

    /// A social services or non-profit job, such as Case Worker.
    pub const SOCIAL_SERVICES_AND_NON_PROFIT: JobCategory =
        JobCategory::new("SOCIAL_SERVICES_AND_NON_PROFIT");

    /// A sports, fitness, or recreation job, such as Personal Trainer.
    pub const SPORTS_FITNESS_AND_RECREATION: JobCategory =
        JobCategory::new("SPORTS_FITNESS_AND_RECREATION");

    /// A transportation or logistics job, such as Truck Driver.
    pub const TRANSPORTATION_AND_LOGISTICS: JobCategory =
        JobCategory::new("TRANSPORTATION_AND_LOGISTICS");
}

impl std::convert::From<std::string::String> for JobCategory {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

impl std::default::Default for JobCategory {
    fn default() -> Self {
        job_category::JOB_CATEGORY_UNSPECIFIED
    }
}

/// An enum that represents the job posting region. In most cases, job postings
/// don't need to specify a region. If a region is given, jobs are
/// eligible for searches in the specified region.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct PostingRegion(std::borrow::Cow<'static, str>);

impl PostingRegion {
    /// Creates a new PostingRegion instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [PostingRegion](PostingRegion)
pub mod posting_region {
    use super::PostingRegion;

    /// If the region is unspecified, the job is only returned if it
    /// matches the [LocationFilter][google.cloud.talent.v4.LocationFilter].
    ///
    /// [google.cloud.talent.v4.LocationFilter]: crate::model::LocationFilter
    pub const POSTING_REGION_UNSPECIFIED: PostingRegion =
        PostingRegion::new("POSTING_REGION_UNSPECIFIED");

    /// In addition to exact location matching, job posting is returned when the
    /// [LocationFilter][google.cloud.talent.v4.LocationFilter] in the search query
    /// is in the same administrative area as the returned job posting. For
    /// example, if a `ADMINISTRATIVE_AREA` job is posted in "CA, USA", it's
    /// returned if [LocationFilter][google.cloud.talent.v4.LocationFilter] has
    /// "Mountain View".
    ///
    /// Administrative area refers to top-level administrative subdivision of this
    /// country. For example, US state, IT region, UK constituent nation and
    /// JP prefecture.
    ///
    /// [google.cloud.talent.v4.LocationFilter]: crate::model::LocationFilter
    pub const ADMINISTRATIVE_AREA: PostingRegion = PostingRegion::new("ADMINISTRATIVE_AREA");

    /// In addition to exact location matching, job is returned when
    /// [LocationFilter][google.cloud.talent.v4.LocationFilter] in search query is
    /// in the same country as this job. For example, if a `NATION_WIDE` job is
    /// posted in "USA", it's returned if
    /// [LocationFilter][google.cloud.talent.v4.LocationFilter] has 'Mountain
    /// View'.
    ///
    /// [google.cloud.talent.v4.LocationFilter]: crate::model::LocationFilter
    pub const NATION: PostingRegion = PostingRegion::new("NATION");

    /// Job allows employees to work remotely (telecommute).
    /// If locations are provided with this value, the job is
    /// considered as having a location, but telecommuting is allowed.
    pub const TELECOMMUTE: PostingRegion = PostingRegion::new("TELECOMMUTE");
}

impl std::convert::From<std::string::String> for PostingRegion {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

impl std::default::Default for PostingRegion {
    fn default() -> Self {
        posting_region::POSTING_REGION_UNSPECIFIED
    }
}

/// Deprecated. All resources are only visible to the owner.
///
/// An enum that represents who has view access to the resource.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct Visibility(std::borrow::Cow<'static, str>);

impl Visibility {
    /// Creates a new Visibility instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [Visibility](Visibility)
pub mod visibility {
    use super::Visibility;

    /// Default value.
    pub const VISIBILITY_UNSPECIFIED: Visibility = Visibility::new("VISIBILITY_UNSPECIFIED");

    /// The resource is only visible to the GCP account who owns it.
    pub const ACCOUNT_ONLY: Visibility = Visibility::new("ACCOUNT_ONLY");

    /// The resource is visible to the owner and may be visible to other
    /// applications and processes at Google.
    pub const SHARED_WITH_GOOGLE: Visibility = Visibility::new("SHARED_WITH_GOOGLE");

    /// The resource is visible to the owner and may be visible to all other API
    /// clients.
    pub const SHARED_WITH_PUBLIC: Visibility = Visibility::new("SHARED_WITH_PUBLIC");
}

impl std::convert::From<std::string::String> for Visibility {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

impl std::default::Default for Visibility {
    fn default() -> Self {
        visibility::VISIBILITY_UNSPECIFIED
    }
}

/// Option for HTML content sanitization on user input fields, for example, job
/// description. By setting this option, user can determine whether and how
/// sanitization is performed on these fields.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct HtmlSanitization(std::borrow::Cow<'static, str>);

impl HtmlSanitization {
    /// Creates a new HtmlSanitization instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [HtmlSanitization](HtmlSanitization)
pub mod html_sanitization {
    use super::HtmlSanitization;

    /// Default value.
    pub const HTML_SANITIZATION_UNSPECIFIED: HtmlSanitization =
        HtmlSanitization::new("HTML_SANITIZATION_UNSPECIFIED");

    /// Disables sanitization on HTML input.
    pub const HTML_SANITIZATION_DISABLED: HtmlSanitization =
        HtmlSanitization::new("HTML_SANITIZATION_DISABLED");

    /// Sanitizes HTML input, only accepts bold, italic, ordered list, and
    /// unordered list markup tags.
    pub const SIMPLE_FORMATTING_ONLY: HtmlSanitization =
        HtmlSanitization::new("SIMPLE_FORMATTING_ONLY");
}

impl std::convert::From<std::string::String> for HtmlSanitization {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

impl std::default::Default for HtmlSanitization {
    fn default() -> Self {
        html_sanitization::HTML_SANITIZATION_UNSPECIFIED
    }
}

/// Method for commute. Walking, biking and wheelchair accessible transit is
/// still in the Preview stage.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct CommuteMethod(std::borrow::Cow<'static, str>);

impl CommuteMethod {
    /// Creates a new CommuteMethod instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [CommuteMethod](CommuteMethod)
pub mod commute_method {
    use super::CommuteMethod;

    /// Commute method isn't specified.
    pub const COMMUTE_METHOD_UNSPECIFIED: CommuteMethod =
        CommuteMethod::new("COMMUTE_METHOD_UNSPECIFIED");

    /// Commute time is calculated based on driving time.
    pub const DRIVING: CommuteMethod = CommuteMethod::new("DRIVING");

    /// Commute time is calculated based on public transit including bus, metro,
    /// subway, and so on.
    pub const TRANSIT: CommuteMethod = CommuteMethod::new("TRANSIT");

    /// Commute time is calculated based on walking time.
    pub const WALKING: CommuteMethod = CommuteMethod::new("WALKING");

    /// Commute time is calculated based on biking time.
    pub const CYCLING: CommuteMethod = CommuteMethod::new("CYCLING");

    /// Commute time is calculated based on public transit that is wheelchair
    /// accessible.
    pub const TRANSIT_ACCESSIBLE: CommuteMethod = CommuteMethod::new("TRANSIT_ACCESSIBLE");
}

impl std::convert::From<std::string::String> for CommuteMethod {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

impl std::default::Default for CommuteMethod {
    fn default() -> Self {
        commute_method::COMMUTE_METHOD_UNSPECIFIED
    }
}

/// An enum that specifies the job attributes that are returned in the
/// [MatchingJob.job][google.cloud.talent.v4.SearchJobsResponse.MatchingJob.job]
/// or [ListJobsResponse.jobs][google.cloud.talent.v4.ListJobsResponse.jobs]
/// fields.
///
/// [google.cloud.talent.v4.ListJobsResponse.jobs]: crate::model::ListJobsResponse::jobs
/// [google.cloud.talent.v4.SearchJobsResponse.MatchingJob.job]: crate::model::search_jobs_response::MatchingJob::job
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct JobView(std::borrow::Cow<'static, str>);

impl JobView {
    /// Creates a new JobView instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [JobView](JobView)
pub mod job_view {
    use super::JobView;

    /// Default value.
    pub const JOB_VIEW_UNSPECIFIED: JobView = JobView::new("JOB_VIEW_UNSPECIFIED");

    /// A ID only view of job, with following attributes:
    /// [Job.name][google.cloud.talent.v4.Job.name],
    /// [Job.requisition_id][google.cloud.talent.v4.Job.requisition_id],
    /// [Job.language_code][google.cloud.talent.v4.Job.language_code].
    ///
    /// [google.cloud.talent.v4.Job.language_code]: crate::model::Job::language_code
    /// [google.cloud.talent.v4.Job.name]: crate::model::Job::name
    /// [google.cloud.talent.v4.Job.requisition_id]: crate::model::Job::requisition_id
    pub const JOB_VIEW_ID_ONLY: JobView = JobView::new("JOB_VIEW_ID_ONLY");

    /// A minimal view of the job, with the following attributes:
    /// [Job.name][google.cloud.talent.v4.Job.name],
    /// [Job.requisition_id][google.cloud.talent.v4.Job.requisition_id],
    /// [Job.title][google.cloud.talent.v4.Job.title],
    /// [Job.company][google.cloud.talent.v4.Job.company],
    /// [Job.DerivedInfo.locations][google.cloud.talent.v4.Job.DerivedInfo.locations],
    /// [Job.language_code][google.cloud.talent.v4.Job.language_code].
    ///
    /// [google.cloud.talent.v4.Job.DerivedInfo.locations]: crate::model::job::DerivedInfo::locations
    /// [google.cloud.talent.v4.Job.company]: crate::model::Job::company
    /// [google.cloud.talent.v4.Job.language_code]: crate::model::Job::language_code
    /// [google.cloud.talent.v4.Job.name]: crate::model::Job::name
    /// [google.cloud.talent.v4.Job.requisition_id]: crate::model::Job::requisition_id
    /// [google.cloud.talent.v4.Job.title]: crate::model::Job::title
    pub const JOB_VIEW_MINIMAL: JobView = JobView::new("JOB_VIEW_MINIMAL");

    /// A small view of the job, with the following attributes in the search
    /// results: [Job.name][google.cloud.talent.v4.Job.name],
    /// [Job.requisition_id][google.cloud.talent.v4.Job.requisition_id],
    /// [Job.title][google.cloud.talent.v4.Job.title],
    /// [Job.company][google.cloud.talent.v4.Job.company],
    /// [Job.DerivedInfo.locations][google.cloud.talent.v4.Job.DerivedInfo.locations],
    /// [Job.visibility][google.cloud.talent.v4.Job.visibility],
    /// [Job.language_code][google.cloud.talent.v4.Job.language_code],
    /// [Job.description][google.cloud.talent.v4.Job.description].
    ///
    /// [google.cloud.talent.v4.Job.DerivedInfo.locations]: crate::model::job::DerivedInfo::locations
    /// [google.cloud.talent.v4.Job.company]: crate::model::Job::company
    /// [google.cloud.talent.v4.Job.description]: crate::model::Job::description
    /// [google.cloud.talent.v4.Job.language_code]: crate::model::Job::language_code
    /// [google.cloud.talent.v4.Job.name]: crate::model::Job::name
    /// [google.cloud.talent.v4.Job.requisition_id]: crate::model::Job::requisition_id
    /// [google.cloud.talent.v4.Job.title]: crate::model::Job::title
    /// [google.cloud.talent.v4.Job.visibility]: crate::model::Job::visibility
    pub const JOB_VIEW_SMALL: JobView = JobView::new("JOB_VIEW_SMALL");

    /// All available attributes are included in the search results.
    pub const JOB_VIEW_FULL: JobView = JobView::new("JOB_VIEW_FULL");
}

impl std::convert::From<std::string::String> for JobView {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}

impl std::default::Default for JobView {
    fn default() -> Self {
        job_view::JOB_VIEW_UNSPECIFIED
    }
}
