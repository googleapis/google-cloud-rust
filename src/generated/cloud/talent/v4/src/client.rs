// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Talent Solution API.
///
/// # Service Description
///
/// A service that handles company management, including CRUD and enumeration.
///
/// # Configuration
///
/// `CompanyService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `CompanyService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `CompanyService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct CompanyService {
    inner: Arc<dyn crate::stubs::dynamic::CompanyService>,
}

impl CompanyService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::CompanyService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::CompanyService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::CompanyService> {
        crate::transport::CompanyService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::CompanyService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::CompanyService::new)
    }

    /// Creates a new company entity.
    pub fn create_company(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::company_service::CreateCompany {
        crate::builders::company_service::CreateCompany::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves specified company.
    pub fn get_company(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::company_service::GetCompany {
        crate::builders::company_service::GetCompany::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates specified company.
    pub fn update_company(
        &self,
        company: impl Into<crate::model::Company>,
    ) -> crate::builders::company_service::UpdateCompany {
        crate::builders::company_service::UpdateCompany::new(self.inner.clone())
            .set_company(company.into())
    }

    /// Deletes specified company.
    /// Prerequisite: The company has no jobs associated with it.
    pub fn delete_company(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::company_service::DeleteCompany {
        crate::builders::company_service::DeleteCompany::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all companies associated with the project.
    pub fn list_companies(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::company_service::ListCompanies {
        crate::builders::company_service::ListCompanies::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::company_service::GetOperation {
        crate::builders::company_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}

/// Implements a client for the Cloud Talent Solution API.
///
/// # Service Description
///
/// A service handles auto completion.
///
/// # Configuration
///
/// `Completion` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `Completion` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Completion` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct Completion {
    inner: Arc<dyn crate::stubs::dynamic::Completion>,
}

impl Completion {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::Completion + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::Completion>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Completion> {
        crate::transport::Completion::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::Completion> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::Completion::new)
    }

    /// Completes the specified prefix with keyword suggestions.
    /// Intended for use by a job search auto-complete search box.
    pub fn complete_query(
        &self,
        tenant: impl Into<std::string::String>,
    ) -> crate::builders::completion::CompleteQuery {
        crate::builders::completion::CompleteQuery::new(self.inner.clone())
            .set_tenant(tenant.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::completion::GetOperation {
        crate::builders::completion::GetOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Cloud Talent Solution API.
///
/// # Service Description
///
/// A service handles client event report.
///
/// # Configuration
///
/// `EventService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `EventService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `EventService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct EventService {
    inner: Arc<dyn crate::stubs::dynamic::EventService>,
}

impl EventService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::EventService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::EventService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::EventService> {
        crate::transport::EventService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::EventService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::EventService::new)
    }

    /// Report events issued when end user interacts with customer's application
    /// that uses Cloud Talent Solution. You may inspect the created events in
    /// [self service
    /// tools](https://console.cloud.google.com/talent-solution/overview).
    /// [Learn
    /// more](https://cloud.google.com/talent-solution/docs/management-tools)
    /// about self service tools.
    pub fn create_client_event(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::event_service::CreateClientEvent {
        crate::builders::event_service::CreateClientEvent::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::event_service::GetOperation {
        crate::builders::event_service::GetOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Cloud Talent Solution API.
///
/// # Service Description
///
/// A service handles job management, including job CRUD, enumeration and search.
///
/// # Configuration
///
/// `JobService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `JobService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `JobService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct JobService {
    inner: Arc<dyn crate::stubs::dynamic::JobService>,
}

impl JobService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::JobService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::JobService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::JobService> {
        crate::transport::JobService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::JobService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::JobService::new)
    }

    /// Creates a new job.
    ///
    /// Typically, the job becomes searchable within 10 seconds, but it may take
    /// up to 5 minutes.
    pub fn create_job(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::CreateJob {
        crate::builders::job_service::CreateJob::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Begins executing a batch create jobs operation.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_create_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::BatchCreateJobs {
        crate::builders::job_service::BatchCreateJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves the specified job, whose status is OPEN or recently EXPIRED
    /// within the last 90 days.
    pub fn get_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::GetJob {
        crate::builders::job_service::GetJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates specified job.
    ///
    /// Typically, updated contents become visible in search results within 10
    /// seconds, but it may take up to 5 minutes.
    pub fn update_job(
        &self,
        job: impl Into<crate::model::Job>,
    ) -> crate::builders::job_service::UpdateJob {
        crate::builders::job_service::UpdateJob::new(self.inner.clone()).set_job(job.into())
    }

    /// Begins executing a batch update jobs operation.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_update_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::BatchUpdateJobs {
        crate::builders::job_service::BatchUpdateJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes the specified job.
    ///
    /// Typically, the job becomes unsearchable within 10 seconds, but it may take
    /// up to 5 minutes.
    pub fn delete_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::DeleteJob {
        crate::builders::job_service::DeleteJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Begins executing a batch delete jobs operation.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_delete_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::BatchDeleteJobs {
        crate::builders::job_service::BatchDeleteJobs::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists jobs by filter.
    pub fn list_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::ListJobs {
        crate::builders::job_service::ListJobs::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Searches for jobs using the provided
    /// [SearchJobsRequest][google.cloud.talent.v4.SearchJobsRequest].
    ///
    /// This call constrains the
    /// [visibility][google.cloud.talent.v4.Job.visibility] of jobs present in the
    /// database, and only returns jobs that the caller has permission to search
    /// against.
    ///
    /// [google.cloud.talent.v4.Job.visibility]: crate::model::Job::visibility
    /// [google.cloud.talent.v4.SearchJobsRequest]: crate::model::SearchJobsRequest
    pub fn search_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::SearchJobs {
        crate::builders::job_service::SearchJobs::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Searches for jobs using the provided
    /// [SearchJobsRequest][google.cloud.talent.v4.SearchJobsRequest].
    ///
    /// This API call is intended for the use case of targeting passive job
    /// seekers (for example, job seekers who have signed up to receive email
    /// alerts about potential job opportunities), it has different algorithmic
    /// adjustments that are designed to specifically target passive job seekers.
    ///
    /// This call constrains the
    /// [visibility][google.cloud.talent.v4.Job.visibility] of jobs present in the
    /// database, and only returns jobs the caller has permission to search
    /// against.
    ///
    /// [google.cloud.talent.v4.Job.visibility]: crate::model::Job::visibility
    /// [google.cloud.talent.v4.SearchJobsRequest]: crate::model::SearchJobsRequest
    pub fn search_jobs_for_alert(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::job_service::SearchJobsForAlert {
        crate::builders::job_service::SearchJobsForAlert::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::job_service::GetOperation {
        crate::builders::job_service::GetOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Cloud Talent Solution API.
///
/// # Service Description
///
/// A service that handles tenant management, including CRUD and enumeration.
///
/// # Configuration
///
/// `TenantService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `TenantService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `TenantService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct TenantService {
    inner: Arc<dyn crate::stubs::dynamic::TenantService>,
}

impl TenantService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::TenantService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::TenantService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::TenantService> {
        crate::transport::TenantService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::TenantService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::TenantService::new)
    }

    /// Creates a new tenant entity.
    pub fn create_tenant(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::tenant_service::CreateTenant {
        crate::builders::tenant_service::CreateTenant::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves specified tenant.
    pub fn get_tenant(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tenant_service::GetTenant {
        crate::builders::tenant_service::GetTenant::new(self.inner.clone()).set_name(name.into())
    }

    /// Updates specified tenant.
    pub fn update_tenant(
        &self,
        tenant: impl Into<crate::model::Tenant>,
    ) -> crate::builders::tenant_service::UpdateTenant {
        crate::builders::tenant_service::UpdateTenant::new(self.inner.clone())
            .set_tenant(tenant.into())
    }

    /// Deletes specified tenant.
    pub fn delete_tenant(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tenant_service::DeleteTenant {
        crate::builders::tenant_service::DeleteTenant::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists all tenants associated with the project.
    pub fn list_tenants(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::tenant_service::ListTenants {
        crate::builders::tenant_service::ListTenants::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::tenant_service::GetOperation {
        crate::builders::tenant_service::GetOperation::new(self.inner.clone()).set_name(name.into())
    }
}
