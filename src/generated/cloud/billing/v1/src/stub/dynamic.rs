// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

/// A dyn-compatible, crate-private version of [super::CloudBilling].
#[async_trait::async_trait]
pub trait CloudBilling: std::fmt::Debug + Send + Sync {
    async fn get_billing_account(
        &self,
        req: crate::model::GetBillingAccountRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::BillingAccount>>;

    async fn list_billing_accounts(
        &self,
        req: crate::model::ListBillingAccountsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListBillingAccountsResponse>>;

    async fn update_billing_account(
        &self,
        req: crate::model::UpdateBillingAccountRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::BillingAccount>>;

    async fn create_billing_account(
        &self,
        req: crate::model::CreateBillingAccountRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::BillingAccount>>;

    async fn list_project_billing_info(
        &self,
        req: crate::model::ListProjectBillingInfoRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListProjectBillingInfoResponse>>;

    async fn get_project_billing_info(
        &self,
        req: crate::model::GetProjectBillingInfoRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ProjectBillingInfo>>;

    async fn update_project_billing_info(
        &self,
        req: crate::model::UpdateProjectBillingInfoRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ProjectBillingInfo>>;

    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<iam_v1::model::Policy>>;

    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<iam_v1::model::Policy>>;

    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>>;

    async fn move_billing_account(
        &self,
        req: crate::model::MoveBillingAccountRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::BillingAccount>>;
}

/// All implementations of [super::CloudBilling] also implement [CloudBilling].
#[async_trait::async_trait]
impl<T: super::CloudBilling> CloudBilling for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn get_billing_account(
        &self,
        req: crate::model::GetBillingAccountRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::BillingAccount>> {
        T::get_billing_account(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_billing_accounts(
        &self,
        req: crate::model::ListBillingAccountsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListBillingAccountsResponse>> {
        T::list_billing_accounts(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_billing_account(
        &self,
        req: crate::model::UpdateBillingAccountRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::BillingAccount>> {
        T::update_billing_account(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_billing_account(
        &self,
        req: crate::model::CreateBillingAccountRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::BillingAccount>> {
        T::create_billing_account(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_project_billing_info(
        &self,
        req: crate::model::ListProjectBillingInfoRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListProjectBillingInfoResponse>> {
        T::list_project_billing_info(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_project_billing_info(
        &self,
        req: crate::model::GetProjectBillingInfoRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ProjectBillingInfo>> {
        T::get_project_billing_info(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_project_billing_info(
        &self,
        req: crate::model::UpdateProjectBillingInfoRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ProjectBillingInfo>> {
        T::update_project_billing_info(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<iam_v1::model::Policy>> {
        T::get_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<iam_v1::model::Policy>> {
        T::set_iam_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>> {
        T::test_iam_permissions(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn move_billing_account(
        &self,
        req: crate::model::MoveBillingAccountRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::BillingAccount>> {
        T::move_billing_account(self, req, options).await
    }
}

/// A dyn-compatible, crate-private version of [super::CloudCatalog].
#[async_trait::async_trait]
pub trait CloudCatalog: std::fmt::Debug + Send + Sync {
    async fn list_services(
        &self,
        req: crate::model::ListServicesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListServicesResponse>>;

    async fn list_skus(
        &self,
        req: crate::model::ListSkusRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListSkusResponse>>;
}

/// All implementations of [super::CloudCatalog] also implement [CloudCatalog].
#[async_trait::async_trait]
impl<T: super::CloudCatalog> CloudCatalog for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn list_services(
        &self,
        req: crate::model::ListServicesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListServicesResponse>> {
        T::list_services(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_skus(
        &self,
        req: crate::model::ListSkusRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<gax::response::Response<crate::model::ListSkusResponse>> {
        T::list_skus(self, req, options).await
    }
}
