// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::CloudBilling].
///
/// Application developers may need to implement this trait to mock
/// `client::CloudBilling`.  In other use-cases, application developers only
/// use `client::CloudBilling` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait CloudBilling: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::CloudBilling::get_billing_account].
    fn get_billing_account(
        &self,
        _req: crate::model::GetBillingAccountRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BillingAccount>> + Send {
        std::future::ready::<crate::Result<crate::model::BillingAccount>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBilling::list_billing_accounts].
    fn list_billing_accounts(
        &self,
        _req: crate::model::ListBillingAccountsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListBillingAccountsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListBillingAccountsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudBilling::update_billing_account].
    fn update_billing_account(
        &self,
        _req: crate::model::UpdateBillingAccountRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BillingAccount>> + Send {
        std::future::ready::<crate::Result<crate::model::BillingAccount>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBilling::create_billing_account].
    fn create_billing_account(
        &self,
        _req: crate::model::CreateBillingAccountRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BillingAccount>> + Send {
        std::future::ready::<crate::Result<crate::model::BillingAccount>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBilling::list_project_billing_info].
    fn list_project_billing_info(
        &self,
        _req: crate::model::ListProjectBillingInfoRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListProjectBillingInfoResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListProjectBillingInfoResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudBilling::get_project_billing_info].
    fn get_project_billing_info(
        &self,
        _req: crate::model::GetProjectBillingInfoRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ProjectBillingInfo>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ProjectBillingInfo>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBilling::update_project_billing_info].
    fn update_project_billing_info(
        &self,
        _req: crate::model::UpdateProjectBillingInfoRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ProjectBillingInfo>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ProjectBillingInfo>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBilling::get_iam_policy].
    fn get_iam_policy(
        &self,
        _req: iam_v1::model::GetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::Policy>> + Send {
        std::future::ready::<crate::Result<iam_v1::model::Policy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBilling::set_iam_policy].
    fn set_iam_policy(
        &self,
        _req: iam_v1::model::SetIamPolicyRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::Policy>> + Send {
        std::future::ready::<crate::Result<iam_v1::model::Policy>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudBilling::test_iam_permissions].
    fn test_iam_permissions(
        &self,
        _req: iam_v1::model::TestIamPermissionsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<iam_v1::model::TestIamPermissionsResponse>> + Send
    {
        std::future::ready::<crate::Result<iam_v1::model::TestIamPermissionsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::CloudBilling::move_billing_account].
    fn move_billing_account(
        &self,
        _req: crate::model::MoveBillingAccountRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::BillingAccount>> + Send {
        std::future::ready::<crate::Result<crate::model::BillingAccount>>(Err(Error::other(
            "unimplemented",
        )))
    }
}

/// Defines the trait used to implement [super::client::CloudCatalog].
///
/// Application developers may need to implement this trait to mock
/// `client::CloudCatalog`.  In other use-cases, application developers only
/// use `client::CloudCatalog` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait CloudCatalog: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::CloudCatalog::list_services].
    fn list_services(
        &self,
        _req: crate::model::ListServicesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListServicesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListServicesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CloudCatalog::list_skus].
    fn list_skus(
        &self,
        _req: crate::model::ListSkusRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListSkusResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListSkusResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }
}
