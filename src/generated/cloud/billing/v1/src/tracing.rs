// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [CloudBilling](super::stub::CloudBilling) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct CloudBilling<T>
where
    T: super::stub::CloudBilling + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> CloudBilling<T>
where
    T: super::stub::CloudBilling + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stub::CloudBilling for CloudBilling<T>
where
    T: super::stub::CloudBilling + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn get_billing_account(
        &self,
        req: crate::model::GetBillingAccountRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::BillingAccount>> {
        self.inner.get_billing_account(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_billing_accounts(
        &self,
        req: crate::model::ListBillingAccountsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListBillingAccountsResponse>> {
        self.inner.list_billing_accounts(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_billing_account(
        &self,
        req: crate::model::UpdateBillingAccountRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::BillingAccount>> {
        self.inner.update_billing_account(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_billing_account(
        &self,
        req: crate::model::CreateBillingAccountRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::BillingAccount>> {
        self.inner.create_billing_account(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_project_billing_info(
        &self,
        req: crate::model::ListProjectBillingInfoRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListProjectBillingInfoResponse>> {
        self.inner.list_project_billing_info(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_project_billing_info(
        &self,
        req: crate::model::GetProjectBillingInfoRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ProjectBillingInfo>> {
        self.inner.get_project_billing_info(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_project_billing_info(
        &self,
        req: crate::model::UpdateProjectBillingInfoRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ProjectBillingInfo>> {
        self.inner.update_project_billing_info(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        self.inner.get_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        self.inner.set_iam_policy(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>> {
        self.inner.test_iam_permissions(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn move_billing_account(
        &self,
        req: crate::model::MoveBillingAccountRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::BillingAccount>> {
        self.inner.move_billing_account(req, options).await
    }
}

/// Implements a [CloudCatalog](super::stub::CloudCatalog) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct CloudCatalog<T>
where
    T: super::stub::CloudCatalog + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> CloudCatalog<T>
where
    T: super::stub::CloudCatalog + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> super::stub::CloudCatalog for CloudCatalog<T>
where
    T: super::stub::CloudCatalog + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn list_services(
        &self,
        req: crate::model::ListServicesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListServicesResponse>> {
        self.inner.list_services(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_skus(
        &self,
        req: crate::model::ListSkusRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListSkusResponse>> {
        self.inner.list_skus(req, options).await
    }
}
