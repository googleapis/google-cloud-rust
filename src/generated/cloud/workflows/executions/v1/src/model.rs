// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate lazy_static;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// A running instance of a
/// [Workflow](/workflows/docs/reference/rest/v1/projects.locations.workflows).
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Execution {
    /// Output only. The resource name of the execution.
    /// Format:
    /// projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Marks the beginning of execution.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub start_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Marks the end of execution, successful or not.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Measures the duration of the execution.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub duration: std::option::Option<wkt::Duration>,

    /// Output only. Current state of the execution.
    pub state: crate::model::execution::State,

    /// Input parameters of the execution represented as a JSON string.
    /// The size limit is 32KB.
    ///
    /// *Note*: If you are using the REST API directly to run your workflow, you
    /// must escape any JSON string value of `argument`. Example:
    /// `'{"argument":"{\"firstName\":\"FIRST\",\"lastName\":\"LAST\"}"}'`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub argument: std::string::String,

    /// Output only. Output of the execution represented as a JSON string. The
    /// value can only be present if the execution's state is `SUCCEEDED`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub result: std::string::String,

    /// Output only. The error which caused the execution to finish prematurely.
    /// The value is only present if the execution's state is `FAILED`
    /// or `CANCELLED`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub error: std::option::Option<crate::model::execution::Error>,

    /// Output only. Revision of the workflow this execution is using.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub workflow_revision_id: std::string::String,

    /// The call logging level associated to this execution.
    pub call_log_level: crate::model::execution::CallLogLevel,

    /// Output only. Status tracks the current steps and progress data of this
    /// execution.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub status: std::option::Option<crate::model::execution::Status>,

    /// Labels associated with this execution.
    /// Labels can contain at most 64 entries. Keys and values can be no longer
    /// than 63 characters and can only contain lowercase letters, numeric
    /// characters, underscores, and dashes. Label keys must start with a letter.
    /// International characters are allowed.
    /// By default, labels are inherited from the workflow but are overridden by
    /// any labels associated with the execution.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Output only. Error regarding the state of the Execution resource. For
    /// example, this field will have error details if the execution data is
    /// unavailable due to revoked KMS key permissions.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub state_error: std::option::Option<crate::model::execution::StateError>,
}

impl Execution {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Execution::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [start_time][crate::model::Execution::start_time].
    pub fn set_start_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.start_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::Execution::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [duration][crate::model::Execution::duration].
    pub fn set_duration<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.duration = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Execution::state].
    pub fn set_state<T: std::convert::Into<crate::model::execution::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [argument][crate::model::Execution::argument].
    pub fn set_argument<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.argument = v.into();
        self
    }

    /// Sets the value of [result][crate::model::Execution::result].
    pub fn set_result<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.result = v.into();
        self
    }

    /// Sets the value of [error][crate::model::Execution::error].
    pub fn set_error<T: std::convert::Into<std::option::Option<crate::model::execution::Error>>>(
        mut self,
        v: T,
    ) -> Self {
        self.error = v.into();
        self
    }

    /// Sets the value of [workflow_revision_id][crate::model::Execution::workflow_revision_id].
    pub fn set_workflow_revision_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.workflow_revision_id = v.into();
        self
    }

    /// Sets the value of [call_log_level][crate::model::Execution::call_log_level].
    pub fn set_call_log_level<T: std::convert::Into<crate::model::execution::CallLogLevel>>(
        mut self,
        v: T,
    ) -> Self {
        self.call_log_level = v.into();
        self
    }

    /// Sets the value of [status][crate::model::Execution::status].
    pub fn set_status<
        T: std::convert::Into<std::option::Option<crate::model::execution::Status>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.status = v.into();
        self
    }

    /// Sets the value of [state_error][crate::model::Execution::state_error].
    pub fn set_state_error<
        T: std::convert::Into<std::option::Option<crate::model::execution::StateError>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.state_error = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::Execution::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Execution {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.workflows.executions.v1.Execution"
    }
}

/// Defines additional types related to Execution
pub mod execution {
    #[allow(unused_imports)]
    use super::*;

    /// A single stack element (frame) where an error occurred.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct StackTraceElement {
        /// The step the error occurred at.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub step: std::string::String,

        /// The routine where the error occurred.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub routine: std::string::String,

        /// The source position information of the stack trace element.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub position: std::option::Option<crate::model::execution::stack_trace_element::Position>,
    }

    impl StackTraceElement {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [step][crate::model::execution::StackTraceElement::step].
        pub fn set_step<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.step = v.into();
            self
        }

        /// Sets the value of [routine][crate::model::execution::StackTraceElement::routine].
        pub fn set_routine<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.routine = v.into();
            self
        }

        /// Sets the value of [position][crate::model::execution::StackTraceElement::position].
        pub fn set_position<
            T: std::convert::Into<
                std::option::Option<crate::model::execution::stack_trace_element::Position>,
            >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.position = v.into();
            self
        }
    }

    impl wkt::message::Message for StackTraceElement {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.workflows.executions.v1.Execution.StackTraceElement"
        }
    }

    /// Defines additional types related to StackTraceElement
    pub mod stack_trace_element {
        #[allow(unused_imports)]
        use super::*;

        /// Position contains source position information about the stack trace
        /// element such as line number, column number and length of the code block
        /// in bytes.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Position {
            /// The source code line number the current instruction was generated from.
            #[serde_as(as = "serde_with::DisplayFromStr")]
            pub line: i64,

            /// The source code column position (of the line) the current instruction
            /// was generated from.
            #[serde_as(as = "serde_with::DisplayFromStr")]
            pub column: i64,

            /// The number of bytes of source code making up this stack trace element.
            #[serde_as(as = "serde_with::DisplayFromStr")]
            pub length: i64,
        }

        impl Position {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [line][crate::model::execution::stack_trace_element::Position::line].
            pub fn set_line<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
                self.line = v.into();
                self
            }

            /// Sets the value of [column][crate::model::execution::stack_trace_element::Position::column].
            pub fn set_column<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
                self.column = v.into();
                self
            }

            /// Sets the value of [length][crate::model::execution::stack_trace_element::Position::length].
            pub fn set_length<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
                self.length = v.into();
                self
            }
        }

        impl wkt::message::Message for Position {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.workflows.executions.v1.Execution.StackTraceElement.Position"
            }
        }
    }

    /// A collection of stack elements (frames) where an error occurred.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct StackTrace {
        /// An array of stack elements.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub elements: std::vec::Vec<crate::model::execution::StackTraceElement>,
    }

    impl StackTrace {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [elements][crate::model::execution::StackTrace::elements].
        pub fn set_elements<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::execution::StackTraceElement>,
        {
            use std::iter::Iterator;
            self.elements = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for StackTrace {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.workflows.executions.v1.Execution.StackTrace"
        }
    }

    /// Error describes why the execution was abnormally terminated.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Error {
        /// Error message and data returned represented as a JSON string.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub payload: std::string::String,

        /// Human-readable stack trace string.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub context: std::string::String,

        /// Stack trace with detailed information of where error was generated.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub stack_trace: std::option::Option<crate::model::execution::StackTrace>,
    }

    impl Error {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [payload][crate::model::execution::Error::payload].
        pub fn set_payload<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.payload = v.into();
            self
        }

        /// Sets the value of [context][crate::model::execution::Error::context].
        pub fn set_context<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.context = v.into();
            self
        }

        /// Sets the value of [stack_trace][crate::model::execution::Error::stack_trace].
        pub fn set_stack_trace<
            T: std::convert::Into<std::option::Option<crate::model::execution::StackTrace>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.stack_trace = v.into();
            self
        }
    }

    impl wkt::message::Message for Error {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.workflows.executions.v1.Execution.Error"
        }
    }

    /// Represents the current status of this execution.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Status {
        /// A list of currently executing or last executed step names for the
        /// workflow execution currently running. If the workflow has succeeded or
        /// failed, this is the last attempted or executed step. Presently, if the
        /// current step is inside a subworkflow, the list only includes that step.
        /// In the future, the list will contain items for each step in the call
        /// stack, starting with the outermost step in the `main` subworkflow, and
        /// ending with the most deeply nested step.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub current_steps: std::vec::Vec<crate::model::execution::status::Step>,
    }

    impl Status {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [current_steps][crate::model::execution::Status::current_steps].
        pub fn set_current_steps<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::execution::status::Step>,
        {
            use std::iter::Iterator;
            self.current_steps = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for Status {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.workflows.executions.v1.Execution.Status"
        }
    }

    /// Defines additional types related to Status
    pub mod status {
        #[allow(unused_imports)]
        use super::*;

        /// Represents a step of the workflow this execution is running.
        #[serde_with::serde_as]
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        #[serde(default, rename_all = "camelCase")]
        #[non_exhaustive]
        pub struct Step {
            /// Name of a routine within the workflow.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub routine: std::string::String,

            /// Name of a step within the routine.
            #[serde(skip_serializing_if = "std::string::String::is_empty")]
            pub step: std::string::String,
        }

        impl Step {
            pub fn new() -> Self {
                std::default::Default::default()
            }

            /// Sets the value of [routine][crate::model::execution::status::Step::routine].
            pub fn set_routine<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.routine = v.into();
                self
            }

            /// Sets the value of [step][crate::model::execution::status::Step::step].
            pub fn set_step<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
                self.step = v.into();
                self
            }
        }

        impl wkt::message::Message for Step {
            fn typename() -> &'static str {
                "type.googleapis.com/google.cloud.workflows.executions.v1.Execution.Status.Step"
            }
        }
    }

    /// Describes an error related to the current state of the Execution resource.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct StateError {
        /// Provides specifics about the error.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub details: std::string::String,

        /// The type of this state error.
        #[serde(rename = "type")]
        pub r#type: crate::model::execution::state_error::Type,
    }

    impl StateError {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [details][crate::model::execution::StateError::details].
        pub fn set_details<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.details = v.into();
            self
        }

        /// Sets the value of [r#type][crate::model::execution::StateError::type].
        pub fn set_type<T: std::convert::Into<crate::model::execution::state_error::Type>>(
            mut self,
            v: T,
        ) -> Self {
            self.r#type = v.into();
            self
        }
    }

    impl wkt::message::Message for StateError {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.workflows.executions.v1.Execution.StateError"
        }
    }

    /// Defines additional types related to StateError
    pub mod state_error {
        #[allow(unused_imports)]
        use super::*;

        /// Describes the possible types of a state error.
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct Type(std::borrow::Cow<'static, str>);

        impl Type {
            /// Creates a new Type instance.
            pub const fn new(v: &'static str) -> Self {
                Self(std::borrow::Cow::Borrowed(v))
            }

            /// Gets the enum value.
            pub fn value(&self) -> &str {
                &self.0
            }
        }

        /// Useful constants to work with [Type](Type)
        pub mod r#type {
            use super::Type;

            /// No type specified.
            pub const TYPE_UNSPECIFIED: Type = Type::new("TYPE_UNSPECIFIED");

            /// Caused by an issue with KMS.
            pub const KMS_ERROR: Type = Type::new("KMS_ERROR");
        }

        impl std::convert::From<std::string::String> for Type {
            fn from(value: std::string::String) -> Self {
                Self(std::borrow::Cow::Owned(value))
            }
        }
    }

    /// Describes the current state of the execution. More states might be added
    /// in the future.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(std::borrow::Cow<'static, str>);

    impl State {
        /// Creates a new State instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [State](State)
    pub mod state {
        use super::State;

        /// Invalid state.
        pub const STATE_UNSPECIFIED: State = State::new("STATE_UNSPECIFIED");

        /// The execution is in progress.
        pub const ACTIVE: State = State::new("ACTIVE");

        /// The execution finished successfully.
        pub const SUCCEEDED: State = State::new("SUCCEEDED");

        /// The execution failed with an error.
        pub const FAILED: State = State::new("FAILED");

        /// The execution was stopped intentionally.
        pub const CANCELLED: State = State::new("CANCELLED");

        /// Execution data is unavailable. See the `state_error` field.
        pub const UNAVAILABLE: State = State::new("UNAVAILABLE");

        /// Request has been placed in the backlog for processing at a later time.
        pub const QUEUED: State = State::new("QUEUED");
    }

    impl std::convert::From<std::string::String> for State {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    /// Describes the level of platform logging to apply to calls and call
    /// responses during workflow executions.
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct CallLogLevel(std::borrow::Cow<'static, str>);

    impl CallLogLevel {
        /// Creates a new CallLogLevel instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [CallLogLevel](CallLogLevel)
    pub mod call_log_level {
        use super::CallLogLevel;

        /// No call logging level specified.
        pub const CALL_LOG_LEVEL_UNSPECIFIED: CallLogLevel =
            CallLogLevel::new("CALL_LOG_LEVEL_UNSPECIFIED");

        /// Log all call steps within workflows, all call returns, and all exceptions
        /// raised.
        pub const LOG_ALL_CALLS: CallLogLevel = CallLogLevel::new("LOG_ALL_CALLS");

        /// Log only exceptions that are raised from call steps within workflows.
        pub const LOG_ERRORS_ONLY: CallLogLevel = CallLogLevel::new("LOG_ERRORS_ONLY");

        /// Explicitly log nothing.
        pub const LOG_NONE: CallLogLevel = CallLogLevel::new("LOG_NONE");
    }

    impl std::convert::From<std::string::String> for CallLogLevel {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }
}

/// Request for the
/// [ListExecutions][]
/// method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListExecutionsRequest {
    /// Required. Name of the workflow for which the executions should be listed.
    /// Format: projects/{project}/locations/{location}/workflows/{workflow}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Maximum number of executions to return per call.
    /// Max supported value depends on the selected Execution view: it's 1000 for
    /// BASIC and 100 for FULL. The default value used if the field is not
    /// specified is 100, regardless of the selected view. Values greater than
    /// the max value will be coerced down to it.
    pub page_size: i32,

    /// A page token, received from a previous `ListExecutions` call.
    /// Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to `ListExecutions` must
    /// match the call that provided the page token.
    ///
    /// Note that pagination is applied to dynamic data. The list of executions
    /// returned can change between page requests.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. A view defining which fields should be filled in the returned
    /// executions. The API will default to the BASIC view.
    pub view: crate::model::ExecutionView,

    /// Optional. Filters applied to the [Executions.ListExecutions] results.
    /// The following fields are supported for filtering:
    /// executionID, state, startTime, endTime, duration, workflowRevisionID,
    /// stepName, and label.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. The ordering applied to the [Executions.ListExecutions] results.
    /// By default the ordering is based on descending start time.
    /// The following fields are supported for order by:
    /// executionID, startTime, endTime, duration, state, and workflowRevisionID.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListExecutionsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListExecutionsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListExecutionsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListExecutionsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [view][crate::model::ListExecutionsRequest::view].
    pub fn set_view<T: std::convert::Into<crate::model::ExecutionView>>(mut self, v: T) -> Self {
        self.view = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListExecutionsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListExecutionsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListExecutionsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.workflows.executions.v1.ListExecutionsRequest"
    }
}

/// Response for the
/// [ListExecutions][google.cloud.workflows.executions.v1.Executions.ListExecutions]
/// method.
///
/// [google.cloud.workflows.executions.v1.Executions.ListExecutions]: crate::client::Executions::list_executions
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListExecutionsResponse {
    /// The executions which match the request.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub executions: std::vec::Vec<crate::model::Execution>,

    /// A token, which can be sent as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListExecutionsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListExecutionsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [executions][crate::model::ListExecutionsResponse::executions].
    pub fn set_executions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Execution>,
    {
        use std::iter::Iterator;
        self.executions = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListExecutionsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.workflows.executions.v1.ListExecutionsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListExecutionsResponse {
    type PageItem = crate::model::Execution;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.executions
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// Request for the
/// [CreateExecution][google.cloud.workflows.executions.v1.Executions.CreateExecution]
/// method.
///
/// [google.cloud.workflows.executions.v1.Executions.CreateExecution]: crate::client::Executions::create_execution
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateExecutionRequest {
    /// Required. Name of the workflow for which an execution should be created.
    /// Format: projects/{project}/locations/{location}/workflows/{workflow}
    /// The latest revision of the workflow will be used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Execution to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub execution: std::option::Option<crate::model::Execution>,
}

impl CreateExecutionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateExecutionRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [execution][crate::model::CreateExecutionRequest::execution].
    pub fn set_execution<T: std::convert::Into<std::option::Option<crate::model::Execution>>>(
        mut self,
        v: T,
    ) -> Self {
        self.execution = v.into();
        self
    }
}

impl wkt::message::Message for CreateExecutionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.workflows.executions.v1.CreateExecutionRequest"
    }
}

/// Request for the
/// [GetExecution][google.cloud.workflows.executions.v1.Executions.GetExecution]
/// method.
///
/// [google.cloud.workflows.executions.v1.Executions.GetExecution]: crate::client::Executions::get_execution
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetExecutionRequest {
    /// Required. Name of the execution to be retrieved.
    /// Format:
    /// projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. A view defining which fields should be filled in the returned
    /// execution. The API will default to the FULL view.
    pub view: crate::model::ExecutionView,
}

impl GetExecutionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetExecutionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [view][crate::model::GetExecutionRequest::view].
    pub fn set_view<T: std::convert::Into<crate::model::ExecutionView>>(mut self, v: T) -> Self {
        self.view = v.into();
        self
    }
}

impl wkt::message::Message for GetExecutionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.workflows.executions.v1.GetExecutionRequest"
    }
}

/// Request for the
/// [CancelExecution][google.cloud.workflows.executions.v1.Executions.CancelExecution]
/// method.
///
/// [google.cloud.workflows.executions.v1.Executions.CancelExecution]: crate::client::Executions::cancel_execution
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CancelExecutionRequest {
    /// Required. Name of the execution to be cancelled.
    /// Format:
    /// projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl CancelExecutionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::CancelExecutionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for CancelExecutionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.workflows.executions.v1.CancelExecutionRequest"
    }
}

/// Defines possible views for execution resource.
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct ExecutionView(std::borrow::Cow<'static, str>);

impl ExecutionView {
    /// Creates a new ExecutionView instance.
    pub const fn new(v: &'static str) -> Self {
        Self(std::borrow::Cow::Borrowed(v))
    }

    /// Gets the enum value.
    pub fn value(&self) -> &str {
        &self.0
    }
}

/// Useful constants to work with [ExecutionView](ExecutionView)
pub mod execution_view {
    use super::ExecutionView;

    /// The default / unset value.
    pub const EXECUTION_VIEW_UNSPECIFIED: ExecutionView =
        ExecutionView::new("EXECUTION_VIEW_UNSPECIFIED");

    /// Includes only basic metadata about the execution.
    /// The following fields are returned: name, start_time, end_time, duration,
    /// state, and workflow_revision_id.
    pub const BASIC: ExecutionView = ExecutionView::new("BASIC");

    /// Includes all data.
    pub const FULL: ExecutionView = ExecutionView::new("FULL");
}

impl std::convert::From<std::string::String> for ExecutionView {
    fn from(value: std::string::String) -> Self {
        Self(std::borrow::Cow::Owned(value))
    }
}
