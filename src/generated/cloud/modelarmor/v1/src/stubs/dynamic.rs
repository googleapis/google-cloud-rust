// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

/// A dyn-compatible, crate-private version of [super::ModelArmor].
#[async_trait::async_trait]
pub trait ModelArmor: std::fmt::Debug + Send + Sync {
    async fn list_templates(
        &self,
        req: crate::model::ListTemplatesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListTemplatesResponse>;

    async fn get_template(
        &self,
        req: crate::model::GetTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Template>;

    async fn create_template(
        &self,
        req: crate::model::CreateTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Template>;

    async fn update_template(
        &self,
        req: crate::model::UpdateTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Template>;

    async fn delete_template(
        &self,
        req: crate::model::DeleteTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    async fn get_floor_setting(
        &self,
        req: crate::model::GetFloorSettingRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::FloorSetting>;

    async fn update_floor_setting(
        &self,
        req: crate::model::UpdateFloorSettingRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::FloorSetting>;

    async fn sanitize_user_prompt(
        &self,
        req: crate::model::SanitizeUserPromptRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::SanitizeUserPromptResponse>;

    async fn sanitize_model_response(
        &self,
        req: crate::model::SanitizeModelResponseRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::SanitizeModelResponseResponse>;

    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse>;

    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location>;
}

/// All implementations of [crate::stubs::ModelArmor] also implement [ModelArmor].
#[async_trait::async_trait]
impl<T: crate::stubs::ModelArmor> ModelArmor for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn list_templates(
        &self,
        req: crate::model::ListTemplatesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListTemplatesResponse> {
        T::list_templates(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_template(
        &self,
        req: crate::model::GetTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Template> {
        T::get_template(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_template(
        &self,
        req: crate::model::CreateTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Template> {
        T::create_template(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_template(
        &self,
        req: crate::model::UpdateTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Template> {
        T::update_template(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_template(
        &self,
        req: crate::model::DeleteTemplateRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::delete_template(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_floor_setting(
        &self,
        req: crate::model::GetFloorSettingRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::FloorSetting> {
        T::get_floor_setting(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_floor_setting(
        &self,
        req: crate::model::UpdateFloorSettingRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::FloorSetting> {
        T::update_floor_setting(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn sanitize_user_prompt(
        &self,
        req: crate::model::SanitizeUserPromptRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::SanitizeUserPromptResponse> {
        T::sanitize_user_prompt(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn sanitize_model_response(
        &self,
        req: crate::model::SanitizeModelResponseRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::SanitizeModelResponseResponse> {
        T::sanitize_model_response(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::ListLocationsResponse> {
        T::list_locations(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<location::model::Location> {
        T::get_location(self, req, options).await
    }
}
