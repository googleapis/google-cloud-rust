// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

pub mod model_armor {
    use crate::Result;
    use std::sync::Arc;

    /// Common implementation for [crate::client::ModelArmor] request builders.
    #[derive(Clone, Debug)]
    pub struct RequestBuilder<R: std::default::Default> {
        stub: Arc<dyn crate::stubs::dynamic::ModelArmor>,
        request: R,
        options: gax::options::RequestOptions,
    }

    impl<R> RequestBuilder<R>
    where
        R: std::default::Default,
    {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ModelArmor>) -> Self {
            Self {
                stub,
                request: R::default(),
                options: gax::options::RequestOptions::default(),
            }
        }
    }

    /// The request builder for a ModelArmor::list_templates call.
    #[derive(Clone, Debug)]
    pub struct ListTemplates(RequestBuilder<crate::model::ListTemplatesRequest>);

    impl ListTemplates {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ModelArmor>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListTemplatesRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListTemplatesResponse> {
            (*self.0.stub)
                .list_templates(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        #[cfg(feature = "unstable-stream")]
        pub async fn stream(
            self,
        ) -> gax::paginator::Paginator<crate::model::ListTemplatesResponse, gax::error::Error>
        {
            let token = gax::paginator::extract_token(&self.0.request.page_token);
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListTemplatesRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListTemplatesRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListTemplatesRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }

        /// Sets the value of [filter][crate::model::ListTemplatesRequest::filter].
        pub fn set_filter<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }

        /// Sets the value of [order_by][crate::model::ListTemplatesRequest::order_by].
        pub fn set_order_by<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.order_by = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListTemplates {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ModelArmor::get_template call.
    #[derive(Clone, Debug)]
    pub struct GetTemplate(RequestBuilder<crate::model::GetTemplateRequest>);

    impl GetTemplate {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ModelArmor>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetTemplateRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Template> {
            (*self.0.stub)
                .get_template(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::GetTemplateRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetTemplate {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ModelArmor::create_template call.
    #[derive(Clone, Debug)]
    pub struct CreateTemplate(RequestBuilder<crate::model::CreateTemplateRequest>);

    impl CreateTemplate {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ModelArmor>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateTemplateRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Template> {
            (*self.0.stub)
                .create_template(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [parent][crate::model::CreateTemplateRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [template_id][crate::model::CreateTemplateRequest::template_id].
        pub fn set_template_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.template_id = v.into();
            self
        }

        /// Sets the value of [template][crate::model::CreateTemplateRequest::template].
        pub fn set_template<T: Into<std::option::Option<crate::model::Template>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.template = v.into();
            self
        }

        /// Sets the value of [request_id][crate::model::CreateTemplateRequest::request_id].
        pub fn set_request_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.request_id = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for CreateTemplate {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ModelArmor::update_template call.
    #[derive(Clone, Debug)]
    pub struct UpdateTemplate(RequestBuilder<crate::model::UpdateTemplateRequest>);

    impl UpdateTemplate {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ModelArmor>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateTemplateRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Template> {
            (*self.0.stub)
                .update_template(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [update_mask][crate::model::UpdateTemplateRequest::update_mask].
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update_mask = v.into();
            self
        }

        /// Sets the value of [template][crate::model::UpdateTemplateRequest::template].
        pub fn set_template<T: Into<std::option::Option<crate::model::Template>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.template = v.into();
            self
        }

        /// Sets the value of [request_id][crate::model::UpdateTemplateRequest::request_id].
        pub fn set_request_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.request_id = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for UpdateTemplate {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ModelArmor::delete_template call.
    #[derive(Clone, Debug)]
    pub struct DeleteTemplate(RequestBuilder<crate::model::DeleteTemplateRequest>);

    impl DeleteTemplate {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ModelArmor>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteTemplateRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<wkt::Empty> {
            (*self.0.stub)
                .delete_template(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::DeleteTemplateRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [request_id][crate::model::DeleteTemplateRequest::request_id].
        pub fn set_request_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.request_id = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for DeleteTemplate {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ModelArmor::get_floor_setting call.
    #[derive(Clone, Debug)]
    pub struct GetFloorSetting(RequestBuilder<crate::model::GetFloorSettingRequest>);

    impl GetFloorSetting {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ModelArmor>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetFloorSettingRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::FloorSetting> {
            (*self.0.stub)
                .get_floor_setting(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::GetFloorSettingRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetFloorSetting {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ModelArmor::update_floor_setting call.
    #[derive(Clone, Debug)]
    pub struct UpdateFloorSetting(RequestBuilder<crate::model::UpdateFloorSettingRequest>);

    impl UpdateFloorSetting {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ModelArmor>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateFloorSettingRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::FloorSetting> {
            (*self.0.stub)
                .update_floor_setting(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [floor_setting][crate::model::UpdateFloorSettingRequest::floor_setting].
        pub fn set_floor_setting<T: Into<std::option::Option<crate::model::FloorSetting>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.floor_setting = v.into();
            self
        }

        /// Sets the value of [update_mask][crate::model::UpdateFloorSettingRequest::update_mask].
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update_mask = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for UpdateFloorSetting {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ModelArmor::sanitize_user_prompt call.
    #[derive(Clone, Debug)]
    pub struct SanitizeUserPrompt(RequestBuilder<crate::model::SanitizeUserPromptRequest>);

    impl SanitizeUserPrompt {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ModelArmor>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SanitizeUserPromptRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SanitizeUserPromptResponse> {
            (*self.0.stub)
                .sanitize_user_prompt(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::SanitizeUserPromptRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [user_prompt_data][crate::model::SanitizeUserPromptRequest::user_prompt_data].
        pub fn set_user_prompt_data<T: Into<std::option::Option<crate::model::DataItem>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.user_prompt_data = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SanitizeUserPrompt {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ModelArmor::sanitize_model_response call.
    #[derive(Clone, Debug)]
    pub struct SanitizeModelResponse(RequestBuilder<crate::model::SanitizeModelResponseRequest>);

    impl SanitizeModelResponse {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ModelArmor>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SanitizeModelResponseRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::SanitizeModelResponseResponse> {
            (*self.0.stub)
                .sanitize_model_response(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::SanitizeModelResponseRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [model_response_data][crate::model::SanitizeModelResponseRequest::model_response_data].
        pub fn set_model_response_data<T: Into<std::option::Option<crate::model::DataItem>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.model_response_data = v.into();
            self
        }

        /// Sets the value of [user_prompt][crate::model::SanitizeModelResponseRequest::user_prompt].
        pub fn set_user_prompt<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.user_prompt = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for SanitizeModelResponse {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ModelArmor::list_locations call.
    #[derive(Clone, Debug)]
    pub struct ListLocations(RequestBuilder<location::model::ListLocationsRequest>);

    impl ListLocations {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ModelArmor>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<location::model::ListLocationsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<location::model::ListLocationsResponse> {
            (*self.0.stub)
                .list_locations(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        #[cfg(feature = "unstable-stream")]
        pub async fn stream(
            self,
        ) -> gax::paginator::Paginator<location::model::ListLocationsResponse, gax::error::Error>
        {
            let token = gax::paginator::extract_token(&self.0.request.page_token);
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [name][location::model::ListLocationsRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [filter][location::model::ListLocationsRequest::filter].
        pub fn set_filter<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.filter = v.into();
            self
        }

        /// Sets the value of [page_size][location::model::ListLocationsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][location::model::ListLocationsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for ListLocations {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a ModelArmor::get_location call.
    #[derive(Clone, Debug)]
    pub struct GetLocation(RequestBuilder<location::model::GetLocationRequest>);

    impl GetLocation {
        pub(crate) fn new(stub: Arc<dyn crate::stubs::dynamic::ModelArmor>) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<location::model::GetLocationRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<location::model::Location> {
            (*self.0.stub)
                .get_location(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][location::model::GetLocationRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    impl gax::options::RequestBuilder for GetLocation {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }
}
