// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [crate::client::ModelArmor].
///
/// Application developers may need to implement this trait to mock
/// `client::ModelArmor`.  In other use-cases, application developers only
/// use `client::ModelArmor` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait ModelArmor: std::fmt::Debug + Send + Sync {
    /// Implements [crate::client::ModelArmor::list_templates].
    fn list_templates(
        &self,
        _req: crate::model::ListTemplatesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListTemplatesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListTemplatesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ModelArmor::get_template].
    fn get_template(
        &self,
        _req: crate::model::GetTemplateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Template>> + Send {
        std::future::ready::<crate::Result<crate::model::Template>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ModelArmor::create_template].
    fn create_template(
        &self,
        _req: crate::model::CreateTemplateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Template>> + Send {
        std::future::ready::<crate::Result<crate::model::Template>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ModelArmor::update_template].
    fn update_template(
        &self,
        _req: crate::model::UpdateTemplateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Template>> + Send {
        std::future::ready::<crate::Result<crate::model::Template>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ModelArmor::delete_template].
    fn delete_template(
        &self,
        _req: crate::model::DeleteTemplateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Implements [crate::client::ModelArmor::get_floor_setting].
    fn get_floor_setting(
        &self,
        _req: crate::model::GetFloorSettingRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::FloorSetting>> + Send {
        std::future::ready::<crate::Result<crate::model::FloorSetting>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ModelArmor::update_floor_setting].
    fn update_floor_setting(
        &self,
        _req: crate::model::UpdateFloorSettingRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::FloorSetting>> + Send {
        std::future::ready::<crate::Result<crate::model::FloorSetting>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [crate::client::ModelArmor::sanitize_user_prompt].
    fn sanitize_user_prompt(
        &self,
        _req: crate::model::SanitizeUserPromptRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SanitizeUserPromptResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::SanitizeUserPromptResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ModelArmor::sanitize_model_response].
    fn sanitize_model_response(
        &self,
        _req: crate::model::SanitizeModelResponseRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SanitizeModelResponseResponse>>
           + Send {
        std::future::ready::<crate::Result<crate::model::SanitizeModelResponseResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ModelArmor::list_locations].
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [crate::client::ModelArmor::get_location].
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }
}
