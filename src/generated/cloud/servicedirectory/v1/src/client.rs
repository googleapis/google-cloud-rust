// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Service Directory API.
///
/// # Service Description
///
/// Service Directory API for looking up service data at runtime.
///
/// # Configuration
///
/// `LookupService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `LookupService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `LookupService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct LookupService {
    inner: Arc<dyn crate::stubs::dynamic::LookupService>,
}

impl LookupService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::LookupService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::LookupService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::LookupService> {
        crate::transport::LookupService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::LookupService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::LookupService::new)
    }

    /// Returns a [service][google.cloud.servicedirectory.v1.Service] and its
    /// associated endpoints.
    /// Resolving a service is not considered an active developer method.
    ///
    /// [google.cloud.servicedirectory.v1.Service]: crate::model::Service
    pub fn resolve_service(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::lookup_service::ResolveService {
        crate::builders::lookup_service::ResolveService::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::lookup_service::ListLocations {
        crate::builders::lookup_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::lookup_service::GetLocation {
        crate::builders::lookup_service::GetLocation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Service Directory API.
///
/// # Service Description
///
/// Service Directory API for registering services. It defines the following
/// resource model:
///
/// - The API has a collection of
///   [Namespace][google.cloud.servicedirectory.v1.Namespace]
///   resources, named `projects/*/locations/*/namespaces/*`.
///
/// - Each Namespace has a collection of
///   [Service][google.cloud.servicedirectory.v1.Service] resources, named
///   `projects/*/locations/*/namespaces/*/services/*`.
///
/// - Each Service has a collection of
///   [Endpoint][google.cloud.servicedirectory.v1.Endpoint]
///   resources, named
///   `projects/*/locations/*/namespaces/*/services/*/endpoints/*`.
///
///
/// [google.cloud.servicedirectory.v1.Endpoint]: crate::model::Endpoint
/// [google.cloud.servicedirectory.v1.Namespace]: crate::model::Namespace
/// [google.cloud.servicedirectory.v1.Service]: crate::model::Service
///
/// # Configuration
///
/// `RegistrationService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `RegistrationService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `RegistrationService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct RegistrationService {
    inner: Arc<dyn crate::stubs::dynamic::RegistrationService>,
}

impl RegistrationService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::RegistrationService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::RegistrationService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::RegistrationService> {
        crate::transport::RegistrationService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::RegistrationService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::RegistrationService::new)
    }

    /// Creates a namespace, and returns the new namespace.
    pub fn create_namespace(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::registration_service::CreateNamespace {
        crate::builders::registration_service::CreateNamespace::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all namespaces.
    pub fn list_namespaces(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::registration_service::ListNamespaces {
        crate::builders::registration_service::ListNamespaces::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a namespace.
    pub fn get_namespace(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::registration_service::GetNamespace {
        crate::builders::registration_service::GetNamespace::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a namespace.
    pub fn update_namespace(
        &self,
        namespace: impl Into<crate::model::Namespace>,
    ) -> crate::builders::registration_service::UpdateNamespace {
        crate::builders::registration_service::UpdateNamespace::new(self.inner.clone())
            .set_namespace(namespace.into())
    }

    /// Deletes a namespace. This also deletes all services and endpoints in
    /// the namespace.
    pub fn delete_namespace(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::registration_service::DeleteNamespace {
        crate::builders::registration_service::DeleteNamespace::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a service, and returns the new service.
    pub fn create_service(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::registration_service::CreateService {
        crate::builders::registration_service::CreateService::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all services belonging to a namespace.
    pub fn list_services(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::registration_service::ListServices {
        crate::builders::registration_service::ListServices::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a service.
    pub fn get_service(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::registration_service::GetService {
        crate::builders::registration_service::GetService::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates a service.
    pub fn update_service(
        &self,
        service: impl Into<crate::model::Service>,
    ) -> crate::builders::registration_service::UpdateService {
        crate::builders::registration_service::UpdateService::new(self.inner.clone())
            .set_service(service.into())
    }

    /// Deletes a service. This also deletes all endpoints associated with
    /// the service.
    pub fn delete_service(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::registration_service::DeleteService {
        crate::builders::registration_service::DeleteService::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates an endpoint, and returns the new endpoint.
    pub fn create_endpoint(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::registration_service::CreateEndpoint {
        crate::builders::registration_service::CreateEndpoint::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all endpoints.
    pub fn list_endpoints(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::registration_service::ListEndpoints {
        crate::builders::registration_service::ListEndpoints::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets an endpoint.
    pub fn get_endpoint(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::registration_service::GetEndpoint {
        crate::builders::registration_service::GetEndpoint::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates an endpoint.
    pub fn update_endpoint(
        &self,
        endpoint: impl Into<crate::model::Endpoint>,
    ) -> crate::builders::registration_service::UpdateEndpoint {
        crate::builders::registration_service::UpdateEndpoint::new(self.inner.clone())
            .set_endpoint(endpoint.into())
    }

    /// Deletes an endpoint.
    pub fn delete_endpoint(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::registration_service::DeleteEndpoint {
        crate::builders::registration_service::DeleteEndpoint::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets the IAM Policy for a resource (namespace or service only).
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::registration_service::GetIamPolicy {
        crate::builders::registration_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Sets the IAM Policy for a resource (namespace or service only).
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::registration_service::SetIamPolicy {
        crate::builders::registration_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Tests IAM permissions for a resource (namespace or service only).
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::registration_service::TestIamPermissions {
        crate::builders::registration_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::registration_service::ListLocations {
        crate::builders::registration_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::registration_service::GetLocation {
        crate::builders::registration_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }
}
