// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use gax::error::Error;

pub(crate) mod dyntraits;

/// Provides natural language translation operations.
///
/// # Mocking
///
/// Application developers may use this trait to mock the translate clients.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation for each method. These implementations return an error.
pub trait TranslationService: std::fmt::Debug + Send + Sync {
    /// Translates input text and returns translated text.
    fn translate_text(
        &self,
        _req: crate::model::TranslateTextRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::TranslateTextResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::TranslateTextResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Romanize input text written in non-Latin scripts to Latin text.
    fn romanize_text(
        &self,
        _req: crate::model::RomanizeTextRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::RomanizeTextResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::RomanizeTextResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Detects the language of text within a request.
    fn detect_language(
        &self,
        _req: crate::model::DetectLanguageRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::DetectLanguageResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::DetectLanguageResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Returns a list of supported languages for translation.
    fn get_supported_languages(
        &self,
        _req: crate::model::GetSupportedLanguagesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SupportedLanguages>> + Send
    {
        std::future::ready::<crate::Result<crate::model::SupportedLanguages>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Translates documents in synchronous mode.
    fn translate_document(
        &self,
        _req: crate::model::TranslateDocumentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::TranslateDocumentResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::TranslateDocumentResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Translates a large volume of text in asynchronous batch mode.
    /// This function provides real-time output as the inputs are being processed.
    /// If caller cancels a request, the partial results (for an input file, it's
    /// all or nothing) may still be available on the specified output location.
    ///
    /// This call returns immediately and you can
    /// use google.longrunning.Operation.name to poll the status of the call.
    fn batch_translate_text(
        &self,
        _req: crate::model::BatchTranslateTextRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Translates a large volume of document in asynchronous batch mode.
    /// This function provides real-time output as the inputs are being processed.
    /// If caller cancels a request, the partial results (for an input file, it's
    /// all or nothing) may still be available on the specified output location.
    ///
    /// This call returns immediately and you can use
    /// google.longrunning.Operation.name to poll the status of the call.
    fn batch_translate_document(
        &self,
        _req: crate::model::BatchTranslateDocumentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Creates a glossary and returns the long-running operation. Returns
    /// NOT_FOUND, if the project doesn't exist.
    fn create_glossary(
        &self,
        _req: crate::model::CreateGlossaryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Updates a glossary. A LRO is used since the update can be async if the
    /// glossary's entry file is updated.
    fn update_glossary(
        &self,
        _req: crate::model::UpdateGlossaryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't
    /// exist.
    fn list_glossaries(
        &self,
        _req: crate::model::ListGlossariesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListGlossariesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListGlossariesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Gets a glossary. Returns NOT_FOUND, if the glossary doesn't
    /// exist.
    fn get_glossary(
        &self,
        _req: crate::model::GetGlossaryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Glossary>> + Send {
        std::future::ready::<crate::Result<crate::model::Glossary>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Deletes a glossary, or cancels glossary construction
    /// if the glossary isn't created yet.
    /// Returns NOT_FOUND, if the glossary doesn't exist.
    fn delete_glossary(
        &self,
        _req: crate::model::DeleteGlossaryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Gets a single glossary entry by the given id.
    fn get_glossary_entry(
        &self,
        _req: crate::model::GetGlossaryEntryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::GlossaryEntry>> + Send {
        std::future::ready::<crate::Result<crate::model::GlossaryEntry>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// List the entries for the glossary.
    fn list_glossary_entries(
        &self,
        _req: crate::model::ListGlossaryEntriesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListGlossaryEntriesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListGlossaryEntriesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Creates a glossary entry.
    fn create_glossary_entry(
        &self,
        _req: crate::model::CreateGlossaryEntryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::GlossaryEntry>> + Send {
        std::future::ready::<crate::Result<crate::model::GlossaryEntry>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Updates a glossary entry.
    fn update_glossary_entry(
        &self,
        _req: crate::model::UpdateGlossaryEntryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::GlossaryEntry>> + Send {
        std::future::ready::<crate::Result<crate::model::GlossaryEntry>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Deletes a single entry from the glossary
    fn delete_glossary_entry(
        &self,
        _req: crate::model::DeleteGlossaryEntryRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Creates a Dataset.
    fn create_dataset(
        &self,
        _req: crate::model::CreateDatasetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Gets a Dataset.
    fn get_dataset(
        &self,
        _req: crate::model::GetDatasetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Dataset>> + Send {
        std::future::ready::<crate::Result<crate::model::Dataset>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Lists datasets.
    fn list_datasets(
        &self,
        _req: crate::model::ListDatasetsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListDatasetsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListDatasetsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Deletes a dataset and all of its contents.
    fn delete_dataset(
        &self,
        _req: crate::model::DeleteDatasetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Creates an Adaptive MT dataset.
    fn create_adaptive_mt_dataset(
        &self,
        _req: crate::model::CreateAdaptiveMtDatasetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AdaptiveMtDataset>> + Send
    {
        std::future::ready::<crate::Result<crate::model::AdaptiveMtDataset>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Deletes an Adaptive MT dataset, including all its entries and associated
    /// metadata.
    fn delete_adaptive_mt_dataset(
        &self,
        _req: crate::model::DeleteAdaptiveMtDatasetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Gets the Adaptive MT dataset.
    fn get_adaptive_mt_dataset(
        &self,
        _req: crate::model::GetAdaptiveMtDatasetRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AdaptiveMtDataset>> + Send
    {
        std::future::ready::<crate::Result<crate::model::AdaptiveMtDataset>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Lists all Adaptive MT datasets for which the caller has read permission.
    fn list_adaptive_mt_datasets(
        &self,
        _req: crate::model::ListAdaptiveMtDatasetsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAdaptiveMtDatasetsResponse>>
           + Send {
        std::future::ready::<crate::Result<crate::model::ListAdaptiveMtDatasetsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Translate text using Adaptive MT.
    fn adaptive_mt_translate(
        &self,
        _req: crate::model::AdaptiveMtTranslateRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AdaptiveMtTranslateResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::AdaptiveMtTranslateResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Gets and AdaptiveMtFile
    fn get_adaptive_mt_file(
        &self,
        _req: crate::model::GetAdaptiveMtFileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::AdaptiveMtFile>> + Send {
        std::future::ready::<crate::Result<crate::model::AdaptiveMtFile>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Deletes an AdaptiveMtFile along with its sentences.
    fn delete_adaptive_mt_file(
        &self,
        _req: crate::model::DeleteAdaptiveMtFileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Imports an AdaptiveMtFile and adds all of its sentences into the
    /// AdaptiveMtDataset.
    fn import_adaptive_mt_file(
        &self,
        _req: crate::model::ImportAdaptiveMtFileRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ImportAdaptiveMtFileResponse>>
           + Send {
        std::future::ready::<crate::Result<crate::model::ImportAdaptiveMtFileResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Lists all AdaptiveMtFiles associated to an AdaptiveMtDataset.
    fn list_adaptive_mt_files(
        &self,
        _req: crate::model::ListAdaptiveMtFilesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAdaptiveMtFilesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListAdaptiveMtFilesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Lists all AdaptiveMtSentences under a given file/dataset.
    fn list_adaptive_mt_sentences(
        &self,
        _req: crate::model::ListAdaptiveMtSentencesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::ListAdaptiveMtSentencesResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::ListAdaptiveMtSentencesResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Import sentence pairs into translation Dataset.
    fn import_data(
        &self,
        _req: crate::model::ImportDataRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Exports dataset's data to the provided output location.
    fn export_data(
        &self,
        _req: crate::model::ExportDataRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Lists sentence pairs in the dataset.
    fn list_examples(
        &self,
        _req: crate::model::ListExamplesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListExamplesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListExamplesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Creates a Model.
    fn create_model(
        &self,
        _req: crate::model::CreateModelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Lists models.
    fn list_models(
        &self,
        _req: crate::model::ListModelsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListModelsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListModelsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Gets a model.
    fn get_model(
        &self,
        _req: crate::model::GetModelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Model>> + Send {
        std::future::ready::<crate::Result<crate::model::Model>>(Err(Error::other("unimplemented")))
    }

    /// Deletes a model.
    fn delete_model(
        &self,
        _req: crate::model::DeleteModelRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Lists information about the supported locations for this service.
    fn list_locations(
        &self,
        _req: location::model::ListLocationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::ListLocationsResponse>> + Send
    {
        std::future::ready::<crate::Result<location::model::ListLocationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Gets information about a location.
    fn get_location(
        &self,
        _req: location::model::GetLocationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<location::model::Location>> + Send {
        std::future::ready::<crate::Result<location::model::Location>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    fn list_operations(
        &self,
        _req: longrunning::model::ListOperationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::ListOperationsResponse>>
           + Send {
        std::future::ready::<crate::Result<longrunning::model::ListOperationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    fn get_operation(
        &self,
        _req: longrunning::model::GetOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    fn delete_operation(
        &self,
        _req: longrunning::model::DeleteOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    fn cancel_operation(
        &self,
        _req: longrunning::model::CancelOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<wkt::Empty>> + Send {
        std::future::ready::<crate::Result<wkt::Empty>>(Err(Error::other("unimplemented")))
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    fn wait_operation(
        &self,
        _req: longrunning::model::WaitOperationRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<longrunning::model::Operation>> + Send
    {
        std::future::ready::<crate::Result<longrunning::model::Operation>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Returns the polling policy.
    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_policy::PollingPolicy>;

    /// Returns the polling backoff policy.
    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy>;
}
