// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Translation API.
///
/// # Service Description
///
/// Provides natural language translation operations.
///
/// # Configuration
///
/// `TranslationService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `TranslationService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `TranslationService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct TranslationService {
    inner: Arc<dyn crate::stubs::dynamic::TranslationService>,
}

impl TranslationService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::TranslationService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::TranslationService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::TranslationService> {
        crate::transport::TranslationService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::TranslationService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::TranslationService::new)
    }

    /// Translates input text and returns translated text.
    pub fn translate_text(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::TranslateText {
        crate::builders::translation_service::TranslateText::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Romanize input text written in non-Latin scripts to Latin text.
    pub fn romanize_text(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::RomanizeText {
        crate::builders::translation_service::RomanizeText::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Detects the language of text within a request.
    pub fn detect_language(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::DetectLanguage {
        crate::builders::translation_service::DetectLanguage::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns a list of supported languages for translation.
    pub fn get_supported_languages(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetSupportedLanguages {
        crate::builders::translation_service::GetSupportedLanguages::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Translates documents in synchronous mode.
    pub fn translate_document(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::TranslateDocument {
        crate::builders::translation_service::TranslateDocument::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Translates a large volume of text in asynchronous batch mode.
    /// This function provides real-time output as the inputs are being processed.
    /// If caller cancels a request, the partial results (for an input file, it's
    /// all or nothing) may still be available on the specified output location.
    ///
    /// This call returns immediately and you can
    /// use google.longrunning.Operation.name to poll the status of the call.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_translate_text(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::BatchTranslateText {
        crate::builders::translation_service::BatchTranslateText::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Translates a large volume of document in asynchronous batch mode.
    /// This function provides real-time output as the inputs are being processed.
    /// If caller cancels a request, the partial results (for an input file, it's
    /// all or nothing) may still be available on the specified output location.
    ///
    /// This call returns immediately and you can use
    /// google.longrunning.Operation.name to poll the status of the call.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn batch_translate_document(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::BatchTranslateDocument {
        crate::builders::translation_service::BatchTranslateDocument::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a glossary and returns the long-running operation. Returns
    /// NOT_FOUND, if the project doesn't exist.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_glossary(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::CreateGlossary {
        crate::builders::translation_service::CreateGlossary::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a glossary. A LRO is used since the update can be async if the
    /// glossary's entry file is updated.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_glossary(
        &self,
        glossary: impl Into<crate::model::Glossary>,
    ) -> crate::builders::translation_service::UpdateGlossary {
        crate::builders::translation_service::UpdateGlossary::new(self.inner.clone())
            .set_glossary(glossary.into())
    }

    /// Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't
    /// exist.
    pub fn list_glossaries(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListGlossaries {
        crate::builders::translation_service::ListGlossaries::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a glossary. Returns NOT_FOUND, if the glossary doesn't
    /// exist.
    pub fn get_glossary(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetGlossary {
        crate::builders::translation_service::GetGlossary::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes a glossary, or cancels glossary construction
    /// if the glossary isn't created yet.
    /// Returns NOT_FOUND, if the glossary doesn't exist.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_glossary(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::DeleteGlossary {
        crate::builders::translation_service::DeleteGlossary::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets a single glossary entry by the given id.
    pub fn get_glossary_entry(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetGlossaryEntry {
        crate::builders::translation_service::GetGlossaryEntry::new(self.inner.clone())
            .set_name(name.into())
    }

    /// List the entries for the glossary.
    pub fn list_glossary_entries(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListGlossaryEntries {
        crate::builders::translation_service::ListGlossaryEntries::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a glossary entry.
    pub fn create_glossary_entry(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::CreateGlossaryEntry {
        crate::builders::translation_service::CreateGlossaryEntry::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a glossary entry.
    pub fn update_glossary_entry(
        &self,
        glossary_entry: impl Into<crate::model::GlossaryEntry>,
    ) -> crate::builders::translation_service::UpdateGlossaryEntry {
        crate::builders::translation_service::UpdateGlossaryEntry::new(self.inner.clone())
            .set_glossary_entry(glossary_entry.into())
    }

    /// Deletes a single entry from the glossary
    pub fn delete_glossary_entry(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::DeleteGlossaryEntry {
        crate::builders::translation_service::DeleteGlossaryEntry::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a Dataset.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_dataset(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::CreateDataset {
        crate::builders::translation_service::CreateDataset::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a Dataset.
    pub fn get_dataset(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetDataset {
        crate::builders::translation_service::GetDataset::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists datasets.
    pub fn list_datasets(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListDatasets {
        crate::builders::translation_service::ListDatasets::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a dataset and all of its contents.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_dataset(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::DeleteDataset {
        crate::builders::translation_service::DeleteDataset::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates an Adaptive MT dataset.
    pub fn create_adaptive_mt_dataset(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::CreateAdaptiveMtDataset {
        crate::builders::translation_service::CreateAdaptiveMtDataset::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes an Adaptive MT dataset, including all its entries and associated
    /// metadata.
    pub fn delete_adaptive_mt_dataset(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::DeleteAdaptiveMtDataset {
        crate::builders::translation_service::DeleteAdaptiveMtDataset::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets the Adaptive MT dataset.
    pub fn get_adaptive_mt_dataset(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetAdaptiveMtDataset {
        crate::builders::translation_service::GetAdaptiveMtDataset::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all Adaptive MT datasets for which the caller has read permission.
    pub fn list_adaptive_mt_datasets(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListAdaptiveMtDatasets {
        crate::builders::translation_service::ListAdaptiveMtDatasets::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Translate text using Adaptive MT.
    pub fn adaptive_mt_translate(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::AdaptiveMtTranslate {
        crate::builders::translation_service::AdaptiveMtTranslate::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets and AdaptiveMtFile
    pub fn get_adaptive_mt_file(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetAdaptiveMtFile {
        crate::builders::translation_service::GetAdaptiveMtFile::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes an AdaptiveMtFile along with its sentences.
    pub fn delete_adaptive_mt_file(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::DeleteAdaptiveMtFile {
        crate::builders::translation_service::DeleteAdaptiveMtFile::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Imports an AdaptiveMtFile and adds all of its sentences into the
    /// AdaptiveMtDataset.
    pub fn import_adaptive_mt_file(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ImportAdaptiveMtFile {
        crate::builders::translation_service::ImportAdaptiveMtFile::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all AdaptiveMtFiles associated to an AdaptiveMtDataset.
    pub fn list_adaptive_mt_files(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListAdaptiveMtFiles {
        crate::builders::translation_service::ListAdaptiveMtFiles::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all AdaptiveMtSentences under a given file/dataset.
    pub fn list_adaptive_mt_sentences(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListAdaptiveMtSentences {
        crate::builders::translation_service::ListAdaptiveMtSentences::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Import sentence pairs into translation Dataset.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn import_data(
        &self,
        dataset: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ImportData {
        crate::builders::translation_service::ImportData::new(self.inner.clone())
            .set_dataset(dataset.into())
    }

    /// Exports dataset's data to the provided output location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn export_data(
        &self,
        dataset: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ExportData {
        crate::builders::translation_service::ExportData::new(self.inner.clone())
            .set_dataset(dataset.into())
    }

    /// Lists sentence pairs in the dataset.
    pub fn list_examples(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListExamples {
        crate::builders::translation_service::ListExamples::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a Model.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_model(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::CreateModel {
        crate::builders::translation_service::CreateModel::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists models.
    pub fn list_models(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListModels {
        crate::builders::translation_service::ListModels::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a model.
    pub fn get_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetModel {
        crate::builders::translation_service::GetModel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes a model.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::DeleteModel {
        crate::builders::translation_service::DeleteModel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListLocations {
        crate::builders::translation_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetLocation {
        crate::builders::translation_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListOperations {
        crate::builders::translation_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetOperation {
        crate::builders::translation_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::DeleteOperation {
        crate::builders::translation_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::CancelOperation {
        crate::builders::translation_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::WaitOperation {
        crate::builders::translation_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
