// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use crate::Result;
use std::sync::Arc;

/// An implementation of [crate::traits::TranslationService] to make requests with.
///
/// `TranslationService` has various configuration parameters, but the defaults
/// are set to work with most applications.
///
/// `TranslationService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `TranslationService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
///
/// Provides natural language translation operations.
#[derive(Clone, Debug)]
pub struct TranslationService {
    inner: Arc<dyn crate::traits::dyntraits::TranslationService>,
}

impl TranslationService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::traits::TranslationService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::traits::dyntraits::TranslationService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::traits::TranslationService> {
        crate::transport::TranslationService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::traits::TranslationService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::TranslationService::new)
    }

    /// Translates input text and returns translated text.
    pub fn translate_text(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::TranslateText {
        crate::builders::translation_service::TranslateText::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Romanize input text written in non-Latin scripts to Latin text.
    pub fn romanize_text(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::RomanizeText {
        crate::builders::translation_service::RomanizeText::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Detects the language of text within a request.
    pub fn detect_language(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::DetectLanguage {
        crate::builders::translation_service::DetectLanguage::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns a list of supported languages for translation.
    pub fn get_supported_languages(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetSupportedLanguages {
        crate::builders::translation_service::GetSupportedLanguages::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Translates documents in synchronous mode.
    pub fn translate_document(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::TranslateDocument {
        crate::builders::translation_service::TranslateDocument::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Translates a large volume of text in asynchronous batch mode.
    /// This function provides real-time output as the inputs are being processed.
    /// If caller cancels a request, the partial results (for an input file, it's
    /// all or nothing) may still be available on the specified output location.
    ///
    /// This call returns immediately and you can
    /// use google.longrunning.Operation.name to poll the status of the call.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::BatchTranslateResponse, model::BatchTranslateMetadata>
    /// ) -> Result<model::BatchTranslateResponse> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::BatchTranslateResponse, model::BatchTranslateMetadata>
    /// ) -> Result<model::BatchTranslateResponse> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [crate::model::BatchTranslateResponse] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::BatchTranslateMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::translation_service::BatchTranslateText::send
    /// [poller()]: crate::builders::translation_service::BatchTranslateText::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn batch_translate_text(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::BatchTranslateText {
        crate::builders::translation_service::BatchTranslateText::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Translates a large volume of document in asynchronous batch mode.
    /// This function provides real-time output as the inputs are being processed.
    /// If caller cancels a request, the partial results (for an input file, it's
    /// all or nothing) may still be available on the specified output location.
    ///
    /// This call returns immediately and you can use
    /// google.longrunning.Operation.name to poll the status of the call.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::BatchTranslateDocumentResponse, model::BatchTranslateDocumentMetadata>
    /// ) -> Result<model::BatchTranslateDocumentResponse> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::BatchTranslateDocumentResponse, model::BatchTranslateDocumentMetadata>
    /// ) -> Result<model::BatchTranslateDocumentResponse> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [crate::model::BatchTranslateDocumentResponse] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::BatchTranslateDocumentMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::translation_service::BatchTranslateDocument::send
    /// [poller()]: crate::builders::translation_service::BatchTranslateDocument::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn batch_translate_document(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::BatchTranslateDocument {
        crate::builders::translation_service::BatchTranslateDocument::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a glossary and returns the long-running operation. Returns
    /// NOT_FOUND, if the project doesn't exist.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::Glossary, model::CreateGlossaryMetadata>
    /// ) -> Result<model::Glossary> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::Glossary, model::CreateGlossaryMetadata>
    /// ) -> Result<model::Glossary> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [crate::model::Glossary] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::CreateGlossaryMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::translation_service::CreateGlossary::send
    /// [poller()]: crate::builders::translation_service::CreateGlossary::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn create_glossary(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::CreateGlossary {
        crate::builders::translation_service::CreateGlossary::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a glossary. A LRO is used since the update can be async if the
    /// glossary's entry file is updated.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::Glossary, model::UpdateGlossaryMetadata>
    /// ) -> Result<model::Glossary> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::Glossary, model::UpdateGlossaryMetadata>
    /// ) -> Result<model::Glossary> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [crate::model::Glossary] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::UpdateGlossaryMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::translation_service::UpdateGlossary::send
    /// [poller()]: crate::builders::translation_service::UpdateGlossary::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn update_glossary(
        &self,
        glossary: impl Into<crate::model::Glossary>,
    ) -> crate::builders::translation_service::UpdateGlossary {
        crate::builders::translation_service::UpdateGlossary::new(self.inner.clone())
            .set_glossary(glossary.into())
    }

    /// Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't
    /// exist.
    pub fn list_glossaries(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListGlossaries {
        crate::builders::translation_service::ListGlossaries::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a glossary. Returns NOT_FOUND, if the glossary doesn't
    /// exist.
    pub fn get_glossary(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetGlossary {
        crate::builders::translation_service::GetGlossary::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes a glossary, or cancels glossary construction
    /// if the glossary isn't created yet.
    /// Returns NOT_FOUND, if the glossary doesn't exist.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::DeleteGlossaryResponse, model::DeleteGlossaryMetadata>
    /// ) -> Result<model::DeleteGlossaryResponse> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::DeleteGlossaryResponse, model::DeleteGlossaryMetadata>
    /// ) -> Result<model::DeleteGlossaryResponse> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [crate::model::DeleteGlossaryResponse] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::DeleteGlossaryMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::translation_service::DeleteGlossary::send
    /// [poller()]: crate::builders::translation_service::DeleteGlossary::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn delete_glossary(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::DeleteGlossary {
        crate::builders::translation_service::DeleteGlossary::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets a single glossary entry by the given id.
    pub fn get_glossary_entry(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetGlossaryEntry {
        crate::builders::translation_service::GetGlossaryEntry::new(self.inner.clone())
            .set_name(name.into())
    }

    /// List the entries for the glossary.
    pub fn list_glossary_entries(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListGlossaryEntries {
        crate::builders::translation_service::ListGlossaryEntries::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a glossary entry.
    pub fn create_glossary_entry(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::CreateGlossaryEntry {
        crate::builders::translation_service::CreateGlossaryEntry::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a glossary entry.
    pub fn update_glossary_entry(
        &self,
        glossary_entry: impl Into<crate::model::GlossaryEntry>,
    ) -> crate::builders::translation_service::UpdateGlossaryEntry {
        crate::builders::translation_service::UpdateGlossaryEntry::new(self.inner.clone())
            .set_glossary_entry(glossary_entry.into())
    }

    /// Deletes a single entry from the glossary
    pub fn delete_glossary_entry(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::DeleteGlossaryEntry {
        crate::builders::translation_service::DeleteGlossaryEntry::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a Dataset.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::Dataset, model::CreateDatasetMetadata>
    /// ) -> Result<model::Dataset> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::Dataset, model::CreateDatasetMetadata>
    /// ) -> Result<model::Dataset> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [crate::model::Dataset] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::CreateDatasetMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::translation_service::CreateDataset::send
    /// [poller()]: crate::builders::translation_service::CreateDataset::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn create_dataset(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::CreateDataset {
        crate::builders::translation_service::CreateDataset::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a Dataset.
    pub fn get_dataset(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetDataset {
        crate::builders::translation_service::GetDataset::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists datasets.
    pub fn list_datasets(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListDatasets {
        crate::builders::translation_service::ListDatasets::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes a dataset and all of its contents.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<wkt::Empty, model::DeleteDatasetMetadata>
    /// ) -> Result<wkt::Empty> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<wkt::Empty, model::DeleteDatasetMetadata>
    /// ) -> Result<wkt::Empty> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [wkt::Empty] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::DeleteDatasetMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::translation_service::DeleteDataset::send
    /// [poller()]: crate::builders::translation_service::DeleteDataset::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn delete_dataset(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::DeleteDataset {
        crate::builders::translation_service::DeleteDataset::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates an Adaptive MT dataset.
    pub fn create_adaptive_mt_dataset(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::CreateAdaptiveMtDataset {
        crate::builders::translation_service::CreateAdaptiveMtDataset::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Deletes an Adaptive MT dataset, including all its entries and associated
    /// metadata.
    pub fn delete_adaptive_mt_dataset(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::DeleteAdaptiveMtDataset {
        crate::builders::translation_service::DeleteAdaptiveMtDataset::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets the Adaptive MT dataset.
    pub fn get_adaptive_mt_dataset(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetAdaptiveMtDataset {
        crate::builders::translation_service::GetAdaptiveMtDataset::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all Adaptive MT datasets for which the caller has read permission.
    pub fn list_adaptive_mt_datasets(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListAdaptiveMtDatasets {
        crate::builders::translation_service::ListAdaptiveMtDatasets::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Translate text using Adaptive MT.
    pub fn adaptive_mt_translate(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::AdaptiveMtTranslate {
        crate::builders::translation_service::AdaptiveMtTranslate::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets and AdaptiveMtFile
    pub fn get_adaptive_mt_file(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetAdaptiveMtFile {
        crate::builders::translation_service::GetAdaptiveMtFile::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes an AdaptiveMtFile along with its sentences.
    pub fn delete_adaptive_mt_file(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::DeleteAdaptiveMtFile {
        crate::builders::translation_service::DeleteAdaptiveMtFile::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Imports an AdaptiveMtFile and adds all of its sentences into the
    /// AdaptiveMtDataset.
    pub fn import_adaptive_mt_file(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ImportAdaptiveMtFile {
        crate::builders::translation_service::ImportAdaptiveMtFile::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all AdaptiveMtFiles associated to an AdaptiveMtDataset.
    pub fn list_adaptive_mt_files(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListAdaptiveMtFiles {
        crate::builders::translation_service::ListAdaptiveMtFiles::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists all AdaptiveMtSentences under a given file/dataset.
    pub fn list_adaptive_mt_sentences(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListAdaptiveMtSentences {
        crate::builders::translation_service::ListAdaptiveMtSentences::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Import sentence pairs into translation Dataset.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<wkt::Empty, model::ImportDataMetadata>
    /// ) -> Result<wkt::Empty> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<wkt::Empty, model::ImportDataMetadata>
    /// ) -> Result<wkt::Empty> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [wkt::Empty] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::ImportDataMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::translation_service::ImportData::send
    /// [poller()]: crate::builders::translation_service::ImportData::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn import_data(
        &self,
        dataset: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ImportData {
        crate::builders::translation_service::ImportData::new(self.inner.clone())
            .set_dataset(dataset.into())
    }

    /// Exports dataset's data to the provided output location.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<wkt::Empty, model::ExportDataMetadata>
    /// ) -> Result<wkt::Empty> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<wkt::Empty, model::ExportDataMetadata>
    /// ) -> Result<wkt::Empty> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [wkt::Empty] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::ExportDataMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::translation_service::ExportData::send
    /// [poller()]: crate::builders::translation_service::ExportData::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn export_data(
        &self,
        dataset: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ExportData {
        crate::builders::translation_service::ExportData::new(self.inner.clone())
            .set_dataset(dataset.into())
    }

    /// Lists sentence pairs in the dataset.
    pub fn list_examples(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListExamples {
        crate::builders::translation_service::ListExamples::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Creates a Model.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::Model, model::CreateModelMetadata>
    /// ) -> Result<model::Model> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<model::Model, model::CreateModelMetadata>
    /// ) -> Result<model::Model> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [crate::model::Model] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::CreateModelMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::translation_service::CreateModel::send
    /// [poller()]: crate::builders::translation_service::CreateModel::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn create_model(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::CreateModel {
        crate::builders::translation_service::CreateModel::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Lists models.
    pub fn list_models(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListModels {
        crate::builders::translation_service::ListModels::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets a model.
    pub fn get_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetModel {
        crate::builders::translation_service::GetModel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Deletes a model.
    ///
    /// # Long running operations
    ///
    /// Calling [poller()] on the resulting builder returns an implementation of
    /// the [lro::Poller] trait. You need to call `Poller::poll` on this
    /// `Poller` at least once to start the LRO. You may periodically poll this
    /// object to find the status of the operation. The poller automatically
    /// extract the final response value and any intermediate metadata values.
    ///
    /// Calling [send()] on the resulting builder starts a LRO (long-Running
    /// Operation). LROs run in the background, and the application may poll
    /// them periodically to find out if they have succeeded, or failed. See
    /// below for instructions on how to manually use the resulting [Operation].
    /// We recommend `poller()` in favor of `send()`.
    ///
    /// ## Polling until completion
    ///
    /// Applications that do not care about intermediate results in a
    /// long-running operation may use the [until_done()] function:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<wkt::Empty, model::DeleteModelMetadata>
    /// ) -> Result<wkt::Empty> {
    ///     poller.until_done().await
    /// }
    /// ```
    ///
    /// This will wait until the LRO completes (successfully or with an error).
    /// Applications can set the [PollingPolicy] and [PollingBackoffPolicy] to
    /// control for how long the function runs.
    ///
    /// ## Polling with detailed metadata updates
    ///
    /// Using the result of [poller()] follows a common pattern:
    ///
    /// ```
    /// # use gax::Result;
    /// # use gcp_sdk_translation_v3::model;
    /// async fn wait(
    ///     mut poller: impl lro::Poller<wkt::Empty, model::DeleteModelMetadata>
    /// ) -> Result<wkt::Empty> {
    ///     while let Some(p) = poller.poll().await {
    ///         match p {
    ///             lro::PollingResult::Completed(r) => { return r; },
    ///             lro::PollingResult::InProgress(m) => { println!("in progress {m:?}"); },
    ///             lro::PollingResult::PollingError(_) => { /* ignored */ },
    ///         }
    ///         tokio::time::sleep(std::time::Duration::from_secs(1)).await;
    ///     }
    ///     Err(gax::error::Error::other("LRO never completed"))
    /// }
    /// ```
    ///
    /// ## Manually polling long-running operations
    ///
    /// If you call [send()], you need to examine the contents of the resulting
    /// [Operation][longrunning::model::Operation] to determine the result of
    /// the operation.
    ///
    /// If the `done` field is `true`, the operation has completed. The `result`
    /// field contains the final response, this will be a [wkt::Empty] (as
    /// an [Any]), or the error (as a `Status`).
    ///
    /// If the `done` field is `false`, the operation has not completed.  The
    /// operation may also include a [crate::model::DeleteModelMetadata] value in the `metadata`
    /// field. This value would also be encoded as an [Any]. The metadata may
    /// include information about how much progress the LRO has made.
    ///
    /// To find out if the operation has completed, use the [get_operation]
    /// method and repeat the steps outlined above.
    ///
    /// Note that most errors on [get_operation] do not indicate that the
    /// long-running operation failed. Long-running operation failures return
    /// the error status in the [result] field.
    ///
    /// [send()]: crate::builders::translation_service::DeleteModel::send
    /// [poller()]: crate::builders::translation_service::DeleteModel::poller
    /// [until_done()]: lro::Poller::until_done
    /// [PollingPolicy]: gax::polling_policy::PollingPolicy
    /// [PollingBackoffPolicy]: gax::polling_backoff_policy::PollingBackoffPolicy
    /// [get_operation]: Self::get_operation
    /// [metadata]: longrunning::model::Operation::result
    /// [name]: longrunning::model::Operation::name
    /// [Operation]: longrunning::model::Operation
    /// [result]: longrunning::model::Operation::result
    /// [Any]: wkt::Any
    pub fn delete_model(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::DeleteModel {
        crate::builders::translation_service::DeleteModel::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListLocations {
        crate::builders::translation_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetLocation {
        crate::builders::translation_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::ListOperations {
        crate::builders::translation_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::GetOperation {
        crate::builders::translation_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::DeleteOperation {
        crate::builders::translation_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::CancelOperation {
        crate::builders::translation_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn wait_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::translation_service::WaitOperation {
        crate::builders::translation_service::WaitOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
