// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate iam_v1;
extern crate lazy_static;
extern crate reqwest;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// The request to ListTunnelDestGroups.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTunnelDestGroupsRequest {
    /// Required. Google Cloud Project ID and location.
    /// In the following format:
    /// `projects/{project_number/id}/iap_tunnel/locations/{location}`.
    /// A `-` can be used for the location to group across all locations.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of groups to return. The service might return fewer than
    /// this value.
    /// If unspecified, at most 100 groups are returned.
    /// The maximum value is 1000; values above 1000 are coerced to 1000.
    pub page_size: i32,

    /// A page token, received from a previous `ListTunnelDestGroups`
    /// call. Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to
    /// `ListTunnelDestGroups` must match the call that provided the page
    /// token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListTunnelDestGroupsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListTunnelDestGroupsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListTunnelDestGroupsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListTunnelDestGroupsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListTunnelDestGroupsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.ListTunnelDestGroupsRequest"
    }
}

/// The response from ListTunnelDestGroups.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTunnelDestGroupsResponse {
    /// TunnelDestGroup existing in the project.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub tunnel_dest_groups: std::vec::Vec<crate::model::TunnelDestGroup>,

    /// A token that you can send as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListTunnelDestGroupsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListTunnelDestGroupsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [tunnel_dest_groups][crate::model::ListTunnelDestGroupsResponse::tunnel_dest_groups].
    pub fn set_tunnel_dest_groups<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TunnelDestGroup>,
    {
        use std::iter::Iterator;
        self.tunnel_dest_groups = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListTunnelDestGroupsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.ListTunnelDestGroupsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListTunnelDestGroupsResponse {
    type PageItem = crate::model::TunnelDestGroup;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.tunnel_dest_groups
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// The request to CreateTunnelDestGroup.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateTunnelDestGroupRequest {
    /// Required. Google Cloud Project ID and location.
    /// In the following format:
    /// `projects/{project_number/id}/iap_tunnel/locations/{location}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The TunnelDestGroup to create.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub tunnel_dest_group: std::option::Option<crate::model::TunnelDestGroup>,

    /// Required. The ID to use for the TunnelDestGroup, which becomes the final
    /// component of the resource name.
    ///
    /// This value must be 4-63 characters, and valid characters
    /// are `[a-z]-`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub tunnel_dest_group_id: std::string::String,
}

impl CreateTunnelDestGroupRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateTunnelDestGroupRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [tunnel_dest_group][crate::model::CreateTunnelDestGroupRequest::tunnel_dest_group].
    pub fn set_tunnel_dest_group<
        T: std::convert::Into<std::option::Option<crate::model::TunnelDestGroup>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.tunnel_dest_group = v.into();
        self
    }

    /// Sets the value of [tunnel_dest_group_id][crate::model::CreateTunnelDestGroupRequest::tunnel_dest_group_id].
    pub fn set_tunnel_dest_group_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.tunnel_dest_group_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateTunnelDestGroupRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.CreateTunnelDestGroupRequest"
    }
}

/// The request to GetTunnelDestGroup.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetTunnelDestGroupRequest {
    /// Required. Name of the TunnelDestGroup to be fetched.
    /// In the following format:
    /// `projects/{project_number/id}/iap_tunnel/locations/{location}/destGroups/{dest_group}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetTunnelDestGroupRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetTunnelDestGroupRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetTunnelDestGroupRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.GetTunnelDestGroupRequest"
    }
}

/// The request to DeleteTunnelDestGroup.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteTunnelDestGroupRequest {
    /// Required. Name of the TunnelDestGroup to delete.
    /// In the following format:
    /// `projects/{project_number/id}/iap_tunnel/locations/{location}/destGroups/{dest_group}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteTunnelDestGroupRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteTunnelDestGroupRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteTunnelDestGroupRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.DeleteTunnelDestGroupRequest"
    }
}

/// The request to UpdateTunnelDestGroup.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateTunnelDestGroupRequest {
    /// Required. The new values for the TunnelDestGroup.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub tunnel_dest_group: std::option::Option<crate::model::TunnelDestGroup>,

    /// A field mask that specifies which IAP settings to update.
    /// If omitted, then all of the settings are updated. See
    /// <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask>
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateTunnelDestGroupRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [tunnel_dest_group][crate::model::UpdateTunnelDestGroupRequest::tunnel_dest_group].
    pub fn set_tunnel_dest_group<
        T: std::convert::Into<std::option::Option<crate::model::TunnelDestGroup>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.tunnel_dest_group = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateTunnelDestGroupRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateTunnelDestGroupRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.UpdateTunnelDestGroupRequest"
    }
}

/// A TunnelDestGroup.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TunnelDestGroup {
    /// Required. Immutable. Identifier for the TunnelDestGroup. Must be unique
    /// within the project and contain only lower case letters (a-z) and dashes
    /// (-).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Unordered list. List of CIDRs that this group applies to.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub cidrs: std::vec::Vec<std::string::String>,

    /// Unordered list. List of FQDNs that this group applies to.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub fqdns: std::vec::Vec<std::string::String>,
}

impl TunnelDestGroup {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::TunnelDestGroup::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [cidrs][crate::model::TunnelDestGroup::cidrs].
    pub fn set_cidrs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.cidrs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [fqdns][crate::model::TunnelDestGroup::fqdns].
    pub fn set_fqdns<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.fqdns = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for TunnelDestGroup {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.TunnelDestGroup"
    }
}

/// The request sent to GetIapSettings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetIapSettingsRequest {
    /// Required. The resource name for which to retrieve the settings.
    /// Authorization: Requires the `getSettings` permission for the associated
    /// resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetIapSettingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetIapSettingsRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetIapSettingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.GetIapSettingsRequest"
    }
}

/// The request sent to UpdateIapSettings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateIapSettingsRequest {
    /// Required. The new values for the IAP settings to be updated.
    /// Authorization: Requires the `updateSettings` permission for the associated
    /// resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub iap_settings: std::option::Option<crate::model::IapSettings>,

    /// The field mask specifying which IAP settings should be updated.
    /// If omitted, then all of the settings are updated. See
    /// <https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask>.
    ///
    /// Note: All IAP reauth settings must always be set together, using the
    /// field mask: `iapSettings.accessSettings.reauthSettings`.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,
}

impl UpdateIapSettingsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [iap_settings][crate::model::UpdateIapSettingsRequest::iap_settings].
    pub fn set_iap_settings<
        T: std::convert::Into<std::option::Option<crate::model::IapSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.iap_settings = v.into();
        self
    }

    /// Sets the value of [update_mask][crate::model::UpdateIapSettingsRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }
}

impl wkt::message::Message for UpdateIapSettingsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.UpdateIapSettingsRequest"
    }
}

/// The IAP configurable settings.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct IapSettings {
    /// Required. The resource name of the IAP protected resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Top level wrapper for all access related setting in IAP
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub access_settings: std::option::Option<crate::model::AccessSettings>,

    /// Top level wrapper for all application related settings in IAP
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub application_settings: std::option::Option<crate::model::ApplicationSettings>,
}

impl IapSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::IapSettings::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [access_settings][crate::model::IapSettings::access_settings].
    pub fn set_access_settings<
        T: std::convert::Into<std::option::Option<crate::model::AccessSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.access_settings = v.into();
        self
    }

    /// Sets the value of [application_settings][crate::model::IapSettings::application_settings].
    pub fn set_application_settings<
        T: std::convert::Into<std::option::Option<crate::model::ApplicationSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.application_settings = v.into();
        self
    }
}

impl wkt::message::Message for IapSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.IapSettings"
    }
}

/// Access related settings for IAP protected apps.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AccessSettings {
    /// GCIP claims and endpoint configurations for 3p identity providers.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub gcip_settings: std::option::Option<crate::model::GcipSettings>,

    /// Configuration to allow cross-origin requests via IAP.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cors_settings: std::option::Option<crate::model::CorsSettings>,

    /// Settings to configure IAP's OAuth behavior.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub oauth_settings: std::option::Option<crate::model::OAuthSettings>,

    /// Settings to configure reauthentication policies in IAP.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub reauth_settings: std::option::Option<crate::model::ReauthSettings>,

    /// Settings to configure and enable allowed domains.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub allowed_domains_settings: std::option::Option<crate::model::AllowedDomainsSettings>,
}

impl AccessSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [gcip_settings][crate::model::AccessSettings::gcip_settings].
    pub fn set_gcip_settings<
        T: std::convert::Into<std::option::Option<crate::model::GcipSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.gcip_settings = v.into();
        self
    }

    /// Sets the value of [cors_settings][crate::model::AccessSettings::cors_settings].
    pub fn set_cors_settings<
        T: std::convert::Into<std::option::Option<crate::model::CorsSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.cors_settings = v.into();
        self
    }

    /// Sets the value of [oauth_settings][crate::model::AccessSettings::oauth_settings].
    pub fn set_oauth_settings<
        T: std::convert::Into<std::option::Option<crate::model::OAuthSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.oauth_settings = v.into();
        self
    }

    /// Sets the value of [reauth_settings][crate::model::AccessSettings::reauth_settings].
    pub fn set_reauth_settings<
        T: std::convert::Into<std::option::Option<crate::model::ReauthSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.reauth_settings = v.into();
        self
    }

    /// Sets the value of [allowed_domains_settings][crate::model::AccessSettings::allowed_domains_settings].
    pub fn set_allowed_domains_settings<
        T: std::convert::Into<std::option::Option<crate::model::AllowedDomainsSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.allowed_domains_settings = v.into();
        self
    }
}

impl wkt::message::Message for AccessSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.AccessSettings"
    }
}

/// Allows customers to configure tenant_id for GCIP instance per-app.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GcipSettings {
    /// GCIP tenant ids that are linked to the IAP resource.
    /// tenant_ids could be a string beginning with a number character to indicate
    /// authenticating with GCIP tenant flow, or in the format of _\<ProjectNumber\>
    /// to indicate authenticating with GCIP agent flow.
    /// If agent flow is used, tenant_ids should only contain one single element,
    /// while for tenant flow, tenant_ids can contain multiple elements.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub tenant_ids: std::vec::Vec<std::string::String>,

    /// Login page URI associated with the GCIP tenants.
    /// Typically, all resources within the same project share the same login page,
    /// though it could be overridden at the sub resource level.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub login_page_uri: std::option::Option<wkt::StringValue>,
}

impl GcipSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [login_page_uri][crate::model::GcipSettings::login_page_uri].
    pub fn set_login_page_uri<T: std::convert::Into<std::option::Option<wkt::StringValue>>>(
        mut self,
        v: T,
    ) -> Self {
        self.login_page_uri = v.into();
        self
    }

    /// Sets the value of [tenant_ids][crate::model::GcipSettings::tenant_ids].
    pub fn set_tenant_ids<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.tenant_ids = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for GcipSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.GcipSettings"
    }
}

/// Allows customers to configure HTTP request paths that'll allow HTTP OPTIONS
/// call to bypass authentication and authorization.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CorsSettings {
    /// Configuration to allow HTTP OPTIONS calls to skip authorization. If
    /// undefined, IAP will not apply any special logic to OPTIONS requests.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub allow_http_options: std::option::Option<wkt::BoolValue>,
}

impl CorsSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [allow_http_options][crate::model::CorsSettings::allow_http_options].
    pub fn set_allow_http_options<T: std::convert::Into<std::option::Option<wkt::BoolValue>>>(
        mut self,
        v: T,
    ) -> Self {
        self.allow_http_options = v.into();
        self
    }
}

impl wkt::message::Message for CorsSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.CorsSettings"
    }
}

/// Configuration for OAuth login&consent flow behavior as well as for OAuth
/// Credentials.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OAuthSettings {
    /// Domain hint to send as hd=? parameter in OAuth request flow. Enables
    /// redirect to primary IDP by skipping Google's login screen.
    /// <https://developers.google.com/identity/protocols/OpenIDConnect#hd-param>
    /// Note: IAP does not verify that the id token's hd claim matches this value
    /// since access behavior is managed by IAM policies.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub login_hint: std::option::Option<wkt::StringValue>,

    /// List of OAuth client IDs allowed to programmatically authenticate with IAP.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub programmatic_clients: std::vec::Vec<std::string::String>,
}

impl OAuthSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [login_hint][crate::model::OAuthSettings::login_hint].
    pub fn set_login_hint<T: std::convert::Into<std::option::Option<wkt::StringValue>>>(
        mut self,
        v: T,
    ) -> Self {
        self.login_hint = v.into();
        self
    }

    /// Sets the value of [programmatic_clients][crate::model::OAuthSettings::programmatic_clients].
    pub fn set_programmatic_clients<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.programmatic_clients = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for OAuthSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.OAuthSettings"
    }
}

/// Configuration for IAP reauthentication policies.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ReauthSettings {
    /// Reauth method requested.
    pub method: crate::model::reauth_settings::Method,

    /// Reauth session lifetime, how long before a user has to reauthenticate
    /// again.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub max_age: std::option::Option<wkt::Duration>,

    /// How IAP determines the effective policy in cases of hierarchial policies.
    /// Policies are merged from higher in the hierarchy to lower in the hierarchy.
    pub policy_type: crate::model::reauth_settings::PolicyType,
}

impl ReauthSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [method][crate::model::ReauthSettings::method].
    pub fn set_method<T: std::convert::Into<crate::model::reauth_settings::Method>>(
        mut self,
        v: T,
    ) -> Self {
        self.method = v.into();
        self
    }

    /// Sets the value of [max_age][crate::model::ReauthSettings::max_age].
    pub fn set_max_age<T: std::convert::Into<std::option::Option<wkt::Duration>>>(
        mut self,
        v: T,
    ) -> Self {
        self.max_age = v.into();
        self
    }

    /// Sets the value of [policy_type][crate::model::ReauthSettings::policy_type].
    pub fn set_policy_type<T: std::convert::Into<crate::model::reauth_settings::PolicyType>>(
        mut self,
        v: T,
    ) -> Self {
        self.policy_type = v.into();
        self
    }
}

impl wkt::message::Message for ReauthSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.ReauthSettings"
    }
}

/// Defines additional types related to ReauthSettings
pub mod reauth_settings {
    #[allow(unused_imports)]
    use super::*;

    /// Types of reauthentication methods supported by IAP.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Method(std::borrow::Cow<'static, str>);

    impl Method {
        /// Creates a new Method instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [Method](Method)
    pub mod method {
        use super::Method;

        /// Reauthentication disabled.
        pub const METHOD_UNSPECIFIED: Method = Method::new("METHOD_UNSPECIFIED");

        /// Prompts the user to log in again.
        pub const LOGIN: Method = Method::new("LOGIN");

        pub const PASSWORD: Method = Method::new("PASSWORD");

        /// User must use their secure key 2nd factor device.
        pub const SECURE_KEY: Method = Method::new("SECURE_KEY");

        /// User can use any enabled 2nd factor.
        pub const ENROLLED_SECOND_FACTORS: Method = Method::new("ENROLLED_SECOND_FACTORS");
    }

    impl std::convert::From<std::string::String> for Method {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for Method {
        fn default() -> Self {
            method::METHOD_UNSPECIFIED
        }
    }

    /// Type of policy in the case of hierarchial policies.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct PolicyType(std::borrow::Cow<'static, str>);

    impl PolicyType {
        /// Creates a new PolicyType instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [PolicyType](PolicyType)
    pub mod policy_type {
        use super::PolicyType;

        /// Default value. This value is unused.
        pub const POLICY_TYPE_UNSPECIFIED: PolicyType = PolicyType::new("POLICY_TYPE_UNSPECIFIED");

        /// This policy acts as a minimum to other policies, lower in the hierarchy.
        /// Effective policy may only be the same or stricter.
        pub const MINIMUM: PolicyType = PolicyType::new("MINIMUM");

        /// This policy acts as a default if no other reauth policy is set.
        pub const DEFAULT: PolicyType = PolicyType::new("DEFAULT");
    }

    impl std::convert::From<std::string::String> for PolicyType {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for PolicyType {
        fn default() -> Self {
            policy_type::POLICY_TYPE_UNSPECIFIED
        }
    }
}

/// Configuration for IAP allowed domains. Lets you to restrict access to an app
/// and allow access to only the domains that you list.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AllowedDomainsSettings {
    /// Configuration for customers to opt in for the feature.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub enable: std::option::Option<bool>,

    /// List of trusted domains.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub domains: std::vec::Vec<std::string::String>,
}

impl AllowedDomainsSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [enable][crate::model::AllowedDomainsSettings::enable].
    pub fn set_enable<T: std::convert::Into<std::option::Option<bool>>>(mut self, v: T) -> Self {
        self.enable = v.into();
        self
    }

    /// Sets the value of [domains][crate::model::AllowedDomainsSettings::domains].
    pub fn set_domains<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.domains = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for AllowedDomainsSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.AllowedDomainsSettings"
    }
}

/// Wrapper over application specific settings for IAP.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ApplicationSettings {
    /// Settings to configure IAP's behavior for a service mesh.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub csm_settings: std::option::Option<crate::model::CsmSettings>,

    /// Customization for Access Denied page.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub access_denied_page_settings: std::option::Option<crate::model::AccessDeniedPageSettings>,

    /// The Domain value to set for cookies generated by IAP. This value is not
    /// validated by the API, but will be ignored at runtime if invalid.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub cookie_domain: std::option::Option<wkt::StringValue>,

    /// Settings to configure attribute propagation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub attribute_propagation_settings:
        std::option::Option<crate::model::AttributePropagationSettings>,
}

impl ApplicationSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [csm_settings][crate::model::ApplicationSettings::csm_settings].
    pub fn set_csm_settings<
        T: std::convert::Into<std::option::Option<crate::model::CsmSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.csm_settings = v.into();
        self
    }

    /// Sets the value of [access_denied_page_settings][crate::model::ApplicationSettings::access_denied_page_settings].
    pub fn set_access_denied_page_settings<
        T: std::convert::Into<std::option::Option<crate::model::AccessDeniedPageSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.access_denied_page_settings = v.into();
        self
    }

    /// Sets the value of [cookie_domain][crate::model::ApplicationSettings::cookie_domain].
    pub fn set_cookie_domain<T: std::convert::Into<std::option::Option<wkt::StringValue>>>(
        mut self,
        v: T,
    ) -> Self {
        self.cookie_domain = v.into();
        self
    }

    /// Sets the value of [attribute_propagation_settings][crate::model::ApplicationSettings::attribute_propagation_settings].
    pub fn set_attribute_propagation_settings<
        T: std::convert::Into<std::option::Option<crate::model::AttributePropagationSettings>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.attribute_propagation_settings = v.into();
        self
    }
}

impl wkt::message::Message for ApplicationSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.ApplicationSettings"
    }
}

/// Configuration for RCToken generated for service mesh workloads protected by
/// IAP. RCToken are IAP generated JWTs that can be verified at the application.
/// The RCToken is primarily used for service mesh deployments, and can be scoped
/// to a single mesh by configuring the audience field accordingly.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CsmSettings {
    /// Audience claim set in the generated RCToken. This value is not validated by
    /// IAP.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub rctoken_aud: std::option::Option<wkt::StringValue>,
}

impl CsmSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [rctoken_aud][crate::model::CsmSettings::rctoken_aud].
    pub fn set_rctoken_aud<T: std::convert::Into<std::option::Option<wkt::StringValue>>>(
        mut self,
        v: T,
    ) -> Self {
        self.rctoken_aud = v.into();
        self
    }
}

impl wkt::message::Message for CsmSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.CsmSettings"
    }
}

/// Custom content configuration for access denied page.
/// IAP allows customers to define a custom URI to use as the error page when
/// access is denied to users. If IAP prevents access to this page, the default
/// IAP error page will be displayed instead.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AccessDeniedPageSettings {
    /// The URI to be redirected to when access is denied.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub access_denied_page_uri: std::option::Option<wkt::StringValue>,

    /// Whether to generate a troubleshooting URL on access denied events to this
    /// application.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub generate_troubleshooting_uri: std::option::Option<wkt::BoolValue>,

    /// Whether to generate remediation token on access denied events to this
    /// application.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub remediation_token_generation_enabled: std::option::Option<wkt::BoolValue>,
}

impl AccessDeniedPageSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [access_denied_page_uri][crate::model::AccessDeniedPageSettings::access_denied_page_uri].
    pub fn set_access_denied_page_uri<
        T: std::convert::Into<std::option::Option<wkt::StringValue>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.access_denied_page_uri = v.into();
        self
    }

    /// Sets the value of [generate_troubleshooting_uri][crate::model::AccessDeniedPageSettings::generate_troubleshooting_uri].
    pub fn set_generate_troubleshooting_uri<
        T: std::convert::Into<std::option::Option<wkt::BoolValue>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.generate_troubleshooting_uri = v.into();
        self
    }

    /// Sets the value of [remediation_token_generation_enabled][crate::model::AccessDeniedPageSettings::remediation_token_generation_enabled].
    pub fn set_remediation_token_generation_enabled<
        T: std::convert::Into<std::option::Option<wkt::BoolValue>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.remediation_token_generation_enabled = v.into();
        self
    }
}

impl wkt::message::Message for AccessDeniedPageSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.AccessDeniedPageSettings"
    }
}

/// Configuration for propagating attributes to applications protected
/// by IAP.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AttributePropagationSettings {
    /// Raw string CEL expression. Must return a list of attributes. A maximum of
    /// 45 attributes can be selected. Expressions can select different attribute
    /// types from `attributes`: `attributes.saml_attributes`,
    /// `attributes.iap_attributes`. The following functions are supported:
    ///
    /// - filter `<list>.filter(<iter_var>, <predicate>)`: Returns a subset of
    ///   `<list>` where `<predicate>` is true for every item.
    ///
    /// - in `<var> in <list>`: Returns true if `<list>` contains `<var>`.
    ///
    /// - selectByName `<list>.selectByName(<string>)`: Returns the attribute
    ///   in
    ///   `<list>` with the given `<string>` name, otherwise returns empty.
    ///
    /// - emitAs `<attribute>.emitAs(<string>)`: Sets the `<attribute>` name
    ///   field to the given `<string>` for propagation in selected output
    ///   credentials.
    ///
    /// - strict `<attribute>.strict()`: Ignores the `x-goog-iap-attr-` prefix
    ///   for the provided `<attribute>` when propagating with the `HEADER` output
    ///   credential, such as request headers.
    ///
    /// - append `<target_list>.append(<attribute>)` OR
    ///   `<target_list>.append(<list>)`: Appends the provided `<attribute>` or
    ///   `<list>` to the end of `<target_list>`.
    ///
    ///
    /// Example expression: `attributes.saml_attributes.filter(x, x.name in
    /// ['test']).append(attributes.iap_attributes.selectByName('exact').emitAs('custom').strict())`
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub expression: std::option::Option<std::string::String>,

    /// Which output credentials attributes selected by the CEL expression should
    /// be propagated in. All attributes will be fully duplicated in each selected
    /// output credential.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub output_credentials:
        std::vec::Vec<crate::model::attribute_propagation_settings::OutputCredentials>,

    /// Whether the provided attribute propagation settings should be evaluated on
    /// user requests. If set to true, attributes returned from the expression will
    /// be propagated in the set output credentials.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub enable: std::option::Option<bool>,
}

impl AttributePropagationSettings {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [expression][crate::model::AttributePropagationSettings::expression].
    pub fn set_expression<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.expression = v.into();
        self
    }

    /// Sets the value of [enable][crate::model::AttributePropagationSettings::enable].
    pub fn set_enable<T: std::convert::Into<std::option::Option<bool>>>(mut self, v: T) -> Self {
        self.enable = v.into();
        self
    }

    /// Sets the value of [output_credentials][crate::model::AttributePropagationSettings::output_credentials].
    pub fn set_output_credentials<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::attribute_propagation_settings::OutputCredentials>,
    {
        use std::iter::Iterator;
        self.output_credentials = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for AttributePropagationSettings {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.AttributePropagationSettings"
    }
}

/// Defines additional types related to AttributePropagationSettings
pub mod attribute_propagation_settings {
    #[allow(unused_imports)]
    use super::*;

    /// Supported output credentials for attribute propagation. Each output
    /// credential maps to a "field" in the response. For example, selecting JWT
    /// will propagate all attributes in the IAP JWT, header in the headers, etc.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct OutputCredentials(std::borrow::Cow<'static, str>);

    impl OutputCredentials {
        /// Creates a new OutputCredentials instance.
        pub const fn new(v: &'static str) -> Self {
            Self(std::borrow::Cow::Borrowed(v))
        }

        /// Gets the enum value.
        pub fn value(&self) -> &str {
            &self.0
        }
    }

    /// Useful constants to work with [OutputCredentials](OutputCredentials)
    pub mod output_credentials {
        use super::OutputCredentials;

        /// An output credential is required.
        pub const OUTPUT_CREDENTIALS_UNSPECIFIED: OutputCredentials =
            OutputCredentials::new("OUTPUT_CREDENTIALS_UNSPECIFIED");

        /// Propagate attributes in the headers with "x-goog-iap-attr-" prefix.
        pub const HEADER: OutputCredentials = OutputCredentials::new("HEADER");

        /// Propagate attributes in the JWT of the form: `"additional_claims": {
        /// "my_attribute": ["value1", "value2"] }`
        pub const JWT: OutputCredentials = OutputCredentials::new("JWT");

        /// Propagate attributes in the RCToken of the form: `"additional_claims": {
        /// "my_attribute": ["value1", "value2"] }`
        pub const RCTOKEN: OutputCredentials = OutputCredentials::new("RCTOKEN");
    }

    impl std::convert::From<std::string::String> for OutputCredentials {
        fn from(value: std::string::String) -> Self {
            Self(std::borrow::Cow::Owned(value))
        }
    }

    impl std::default::Default for OutputCredentials {
        fn default() -> Self {
            output_credentials::OUTPUT_CREDENTIALS_UNSPECIFIED
        }
    }
}

/// The request sent to ListBrands.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListBrandsRequest {
    /// Required. GCP Project number/id.
    /// In the following format: projects/{project_number/id}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,
}

impl ListBrandsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListBrandsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }
}

impl wkt::message::Message for ListBrandsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.ListBrandsRequest"
    }
}

/// Response message for ListBrands.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListBrandsResponse {
    /// Brands existing in the project.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub brands: std::vec::Vec<crate::model::Brand>,
}

impl ListBrandsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [brands][crate::model::ListBrandsResponse::brands].
    pub fn set_brands<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Brand>,
    {
        use std::iter::Iterator;
        self.brands = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListBrandsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.ListBrandsResponse"
    }
}

/// The request sent to CreateBrand.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateBrandRequest {
    /// Required. GCP Project number/id under which the brand is to be created.
    /// In the following format: projects/{project_number/id}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The brand to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub brand: std::option::Option<crate::model::Brand>,
}

impl CreateBrandRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateBrandRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [brand][crate::model::CreateBrandRequest::brand].
    pub fn set_brand<T: std::convert::Into<std::option::Option<crate::model::Brand>>>(
        mut self,
        v: T,
    ) -> Self {
        self.brand = v.into();
        self
    }
}

impl wkt::message::Message for CreateBrandRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.CreateBrandRequest"
    }
}

/// The request sent to GetBrand.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetBrandRequest {
    /// Required. Name of the brand to be fetched.
    /// In the following format: projects/{project_number/id}/brands/{brand}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetBrandRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetBrandRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetBrandRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.GetBrandRequest"
    }
}

/// The request sent to ListIdentityAwareProxyClients.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListIdentityAwareProxyClientsRequest {
    /// Required. Full brand path.
    /// In the following format: projects/{project_number/id}/brands/{brand}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of clients to return. The service may return fewer than
    /// this value.
    /// If unspecified, at most 100 clients will be returned.
    /// The maximum value is 1000; values above 1000 will be coerced to 1000.
    pub page_size: i32,

    /// A page token, received from a previous `ListIdentityAwareProxyClients`
    /// call. Provide this to retrieve the subsequent page.
    ///
    /// When paginating, all other parameters provided to
    /// `ListIdentityAwareProxyClients` must match the call that provided the page
    /// token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,
}

impl ListIdentityAwareProxyClientsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListIdentityAwareProxyClientsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListIdentityAwareProxyClientsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListIdentityAwareProxyClientsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }
}

impl wkt::message::Message for ListIdentityAwareProxyClientsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.ListIdentityAwareProxyClientsRequest"
    }
}

/// Response message for ListIdentityAwareProxyClients.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListIdentityAwareProxyClientsResponse {
    /// Clients existing in the brand.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub identity_aware_proxy_clients: std::vec::Vec<crate::model::IdentityAwareProxyClient>,

    /// A token, which can be send as `page_token` to retrieve the next page.
    /// If this field is omitted, there are no subsequent pages.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,
}

impl ListIdentityAwareProxyClientsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListIdentityAwareProxyClientsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [identity_aware_proxy_clients][crate::model::ListIdentityAwareProxyClientsResponse::identity_aware_proxy_clients].
    pub fn set_identity_aware_proxy_clients<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::IdentityAwareProxyClient>,
    {
        use std::iter::Iterator;
        self.identity_aware_proxy_clients = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListIdentityAwareProxyClientsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.ListIdentityAwareProxyClientsResponse"
    }
}

#[cfg(feature = "unstable-stream")]
impl gax::paginator::PageableResponse for ListIdentityAwareProxyClientsResponse {
    type PageItem = crate::model::IdentityAwareProxyClient;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.identity_aware_proxy_clients
    }

    fn next_page_token(&self) -> std::string::String {
        gax::paginator::extract_token(&self.next_page_token)
    }
}

/// The request sent to CreateIdentityAwareProxyClient.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateIdentityAwareProxyClientRequest {
    /// Required. Path to create the client in.
    /// In the following format:
    /// projects/{project_number/id}/brands/{brand}.
    /// The project must belong to a G Suite account.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Identity Aware Proxy Client to be created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub identity_aware_proxy_client: std::option::Option<crate::model::IdentityAwareProxyClient>,
}

impl CreateIdentityAwareProxyClientRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateIdentityAwareProxyClientRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [identity_aware_proxy_client][crate::model::CreateIdentityAwareProxyClientRequest::identity_aware_proxy_client].
    pub fn set_identity_aware_proxy_client<
        T: std::convert::Into<std::option::Option<crate::model::IdentityAwareProxyClient>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.identity_aware_proxy_client = v.into();
        self
    }
}

impl wkt::message::Message for CreateIdentityAwareProxyClientRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.CreateIdentityAwareProxyClientRequest"
    }
}

/// The request sent to GetIdentityAwareProxyClient.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetIdentityAwareProxyClientRequest {
    /// Required. Name of the Identity Aware Proxy client to be fetched.
    /// In the following format:
    /// projects/{project_number/id}/brands/{brand}/identityAwareProxyClients/{client_id}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetIdentityAwareProxyClientRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetIdentityAwareProxyClientRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetIdentityAwareProxyClientRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.GetIdentityAwareProxyClientRequest"
    }
}

/// The request sent to ResetIdentityAwareProxyClientSecret.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ResetIdentityAwareProxyClientSecretRequest {
    /// Required. Name of the Identity Aware Proxy client to that will have its
    /// secret reset. In the following format:
    /// projects/{project_number/id}/brands/{brand}/identityAwareProxyClients/{client_id}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl ResetIdentityAwareProxyClientSecretRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ResetIdentityAwareProxyClientSecretRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for ResetIdentityAwareProxyClientSecretRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.ResetIdentityAwareProxyClientSecretRequest"
    }
}

/// The request sent to DeleteIdentityAwareProxyClient.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteIdentityAwareProxyClientRequest {
    /// Required. Name of the Identity Aware Proxy client to be deleted.
    /// In the following format:
    /// projects/{project_number/id}/brands/{brand}/identityAwareProxyClients/{client_id}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl DeleteIdentityAwareProxyClientRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteIdentityAwareProxyClientRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for DeleteIdentityAwareProxyClientRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.DeleteIdentityAwareProxyClientRequest"
    }
}

/// OAuth brand data.
/// NOTE: Only contains a portion of the data that describes a brand.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Brand {
    /// Output only. Identifier of the brand.
    /// NOTE: GCP project number achieves the same brand identification purpose as
    /// only one brand per project can be created.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Support email displayed on the OAuth consent screen.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub support_email: std::string::String,

    /// Application name displayed on OAuth consent screen.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub application_title: std::string::String,

    /// Output only. Whether the brand is only intended for usage inside the
    /// G Suite organization only.
    pub org_internal_only: bool,
}

impl Brand {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Brand::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [support_email][crate::model::Brand::support_email].
    pub fn set_support_email<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.support_email = v.into();
        self
    }

    /// Sets the value of [application_title][crate::model::Brand::application_title].
    pub fn set_application_title<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.application_title = v.into();
        self
    }

    /// Sets the value of [org_internal_only][crate::model::Brand::org_internal_only].
    pub fn set_org_internal_only<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.org_internal_only = v.into();
        self
    }
}

impl wkt::message::Message for Brand {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.Brand"
    }
}

/// Contains the data that describes an Identity Aware Proxy owned client.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct IdentityAwareProxyClient {
    /// Output only. Unique identifier of the OAuth client.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Client secret of the OAuth client.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub secret: std::string::String,

    /// Human-friendly name given to the OAuth client.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub display_name: std::string::String,
}

impl IdentityAwareProxyClient {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::IdentityAwareProxyClient::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [secret][crate::model::IdentityAwareProxyClient::secret].
    pub fn set_secret<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.secret = v.into();
        self
    }

    /// Sets the value of [display_name][crate::model::IdentityAwareProxyClient::display_name].
    pub fn set_display_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.display_name = v.into();
        self
    }
}

impl wkt::message::Message for IdentityAwareProxyClient {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.iap.v1.IdentityAwareProxyClient"
    }
}
