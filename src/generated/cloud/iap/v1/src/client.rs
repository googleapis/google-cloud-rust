// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Cloud Identity-Aware Proxy API.
///
/// # Service Description
///
/// APIs for Identity-Aware Proxy Admin configurations.
///
/// # Configuration
///
/// `IdentityAwareProxyAdminService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `IdentityAwareProxyAdminService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `IdentityAwareProxyAdminService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct IdentityAwareProxyAdminService {
    inner: Arc<dyn crate::stubs::dynamic::IdentityAwareProxyAdminService>,
}

impl IdentityAwareProxyAdminService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::IdentityAwareProxyAdminService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::IdentityAwareProxyAdminService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::IdentityAwareProxyAdminService> {
        crate::transport::IdentityAwareProxyAdminService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::IdentityAwareProxyAdminService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::IdentityAwareProxyAdminService::new)
    }

    /// Sets the access control policy for an Identity-Aware Proxy protected
    /// resource. Replaces any existing policy.
    /// More information about managing access via IAP can be found at:
    /// <https://cloud.google.com/iap/docs/managing-access#managing_access_via_the_api>
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::identity_aware_proxy_admin_service::SetIamPolicy {
        crate::builders::identity_aware_proxy_admin_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for an Identity-Aware Proxy protected
    /// resource.
    /// More information about managing access via IAP can be found at:
    /// <https://cloud.google.com/iap/docs/managing-access#managing_access_via_the_api>
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::identity_aware_proxy_admin_service::GetIamPolicy {
        crate::builders::identity_aware_proxy_admin_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the Identity-Aware Proxy protected
    /// resource.
    /// More information about managing access via IAP can be found at:
    /// <https://cloud.google.com/iap/docs/managing-access#managing_access_via_the_api>
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> crate::builders::identity_aware_proxy_admin_service::TestIamPermissions {
        crate::builders::identity_aware_proxy_admin_service::TestIamPermissions::new(
            self.inner.clone(),
        )
        .set_resource(resource.into())
    }

    /// Gets the IAP settings on a particular IAP protected resource.
    pub fn get_iap_settings(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::identity_aware_proxy_admin_service::GetIapSettings {
        crate::builders::identity_aware_proxy_admin_service::GetIapSettings::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates the IAP settings on a particular IAP protected resource. It
    /// replaces all fields unless the `update_mask` is set.
    pub fn update_iap_settings(
        &self,
        iap_settings: impl Into<crate::model::IapSettings>,
    ) -> crate::builders::identity_aware_proxy_admin_service::UpdateIapSettings {
        crate::builders::identity_aware_proxy_admin_service::UpdateIapSettings::new(
            self.inner.clone(),
        )
        .set_iap_settings(iap_settings.into())
    }

    /// Lists the existing TunnelDestGroups. To group across all locations, use a
    /// `-` as the location ID. For example:
    /// `/v1/projects/123/iap_tunnel/locations/-/destGroups`
    pub fn list_tunnel_dest_groups(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::identity_aware_proxy_admin_service::ListTunnelDestGroups {
        crate::builders::identity_aware_proxy_admin_service::ListTunnelDestGroups::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Creates a new TunnelDestGroup.
    pub fn create_tunnel_dest_group(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::identity_aware_proxy_admin_service::CreateTunnelDestGroup {
        crate::builders::identity_aware_proxy_admin_service::CreateTunnelDestGroup::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Retrieves an existing TunnelDestGroup.
    pub fn get_tunnel_dest_group(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::identity_aware_proxy_admin_service::GetTunnelDestGroup {
        crate::builders::identity_aware_proxy_admin_service::GetTunnelDestGroup::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Deletes a TunnelDestGroup.
    pub fn delete_tunnel_dest_group(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::identity_aware_proxy_admin_service::DeleteTunnelDestGroup {
        crate::builders::identity_aware_proxy_admin_service::DeleteTunnelDestGroup::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Updates a TunnelDestGroup.
    pub fn update_tunnel_dest_group(
        &self,
        tunnel_dest_group: impl Into<crate::model::TunnelDestGroup>,
    ) -> crate::builders::identity_aware_proxy_admin_service::UpdateTunnelDestGroup {
        crate::builders::identity_aware_proxy_admin_service::UpdateTunnelDestGroup::new(
            self.inner.clone(),
        )
        .set_tunnel_dest_group(tunnel_dest_group.into())
    }
}

/// Implements a client for the Cloud Identity-Aware Proxy API.
///
/// # Service Description
///
/// API to programmatically create, list and retrieve Identity Aware Proxy (IAP)
/// OAuth brands; and create, retrieve, delete and reset-secret of IAP OAuth
/// clients.
///
/// # Configuration
///
/// `IdentityAwareProxyOAuthService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `IdentityAwareProxyOAuthService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `IdentityAwareProxyOAuthService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct IdentityAwareProxyOAuthService {
    inner: Arc<dyn crate::stubs::dynamic::IdentityAwareProxyOAuthService>,
}

impl IdentityAwareProxyOAuthService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::IdentityAwareProxyOAuthService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::IdentityAwareProxyOAuthService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::IdentityAwareProxyOAuthService> {
        crate::transport::IdentityAwareProxyOAuthService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::IdentityAwareProxyOAuthService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::IdentityAwareProxyOAuthService::new)
    }

    /// Lists the existing brands for the project.
    pub fn list_brands(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::identity_aware_proxy_o_auth_service::ListBrands {
        crate::builders::identity_aware_proxy_o_auth_service::ListBrands::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Constructs a new OAuth brand for the project if one does not exist.
    /// The created brand is "internal only", meaning that OAuth clients created
    /// under it only accept requests from users who belong to the same Google
    /// Workspace organization as the project. The brand is created in an
    /// un-reviewed status. NOTE: The "internal only" status can be manually
    /// changed in the Google Cloud Console. Requires that a brand does not already
    /// exist for the project, and that the specified support email is owned by the
    /// caller.
    pub fn create_brand(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::identity_aware_proxy_o_auth_service::CreateBrand {
        crate::builders::identity_aware_proxy_o_auth_service::CreateBrand::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Retrieves the OAuth brand of the project.
    pub fn get_brand(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::identity_aware_proxy_o_auth_service::GetBrand {
        crate::builders::identity_aware_proxy_o_auth_service::GetBrand::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates an Identity Aware Proxy (IAP) OAuth client. The client is owned
    /// by IAP. Requires that the brand for the project exists and that it is
    /// set for internal-only use.
    pub fn create_identity_aware_proxy_client(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::identity_aware_proxy_o_auth_service::CreateIdentityAwareProxyClient {
        crate::builders::identity_aware_proxy_o_auth_service::CreateIdentityAwareProxyClient::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Lists the existing clients for the brand.
    pub fn list_identity_aware_proxy_clients(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::identity_aware_proxy_o_auth_service::ListIdentityAwareProxyClients {
        crate::builders::identity_aware_proxy_o_auth_service::ListIdentityAwareProxyClients::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Retrieves an Identity Aware Proxy (IAP) OAuth client.
    /// Requires that the client is owned by IAP.
    pub fn get_identity_aware_proxy_client(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::identity_aware_proxy_o_auth_service::GetIdentityAwareProxyClient {
        crate::builders::identity_aware_proxy_o_auth_service::GetIdentityAwareProxyClient::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Resets an Identity Aware Proxy (IAP) OAuth client secret. Useful if the
    /// secret was compromised. Requires that the client is owned by IAP.
    pub fn reset_identity_aware_proxy_client_secret(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::identity_aware_proxy_o_auth_service::ResetIdentityAwareProxyClientSecret
    {
        crate::builders::identity_aware_proxy_o_auth_service::ResetIdentityAwareProxyClientSecret::new(self.inner.clone())
            .set_name ( name.into() )
    }

    /// Deletes an Identity Aware Proxy (IAP) OAuth client. Useful for removing
    /// obsolete clients, managing the number of clients in a given project, and
    /// cleaning up after tests. Requires that the client is owned by IAP.
    pub fn delete_identity_aware_proxy_client(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::identity_aware_proxy_o_auth_service::DeleteIdentityAwareProxyClient {
        crate::builders::identity_aware_proxy_o_auth_service::DeleteIdentityAwareProxyClient::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }
}
