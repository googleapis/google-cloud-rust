// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

/// Implements a client for the Infrastructure Manager API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_config_v1::client::Config;
/// let client = Config::builder().build().await?;
/// // use `client` to make requests to the Infrastructure Manager API.
/// # gax::client_builder::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// Infrastructure Manager is a managed service that automates the deployment and
/// management of Google Cloud infrastructure resources.
///
/// # Configuration
///
/// To configure `Config` use the `with_*` methods in the type returned
/// by [builder()][Config::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://config.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::config::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::config::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `Config` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `Config` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct Config {
    inner: std::sync::Arc<dyn super::stub::dynamic::Config>,
}

impl Config {
    /// Returns a builder for [Config].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_config_v1::client::Config;
    /// let client = Config::builder().build().await?;
    /// # gax::client_builder::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::config::ClientBuilder {
        gax::client_builder::internal::new_builder(super::builder::config::client::Factory)
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::Config + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(
        config: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<std::sync::Arc<dyn super::stub::dynamic::Config>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<impl super::stub::Config> {
        super::transport::Config::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> gax::client_builder::Result<impl super::stub::Config> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::Config::new)
    }

    /// Lists [Deployment][google.cloud.config.v1.Deployment]s in a given project
    /// and location.
    ///
    /// [google.cloud.config.v1.Deployment]: crate::model::Deployment
    pub fn list_deployments(&self) -> super::builder::config::ListDeployments {
        super::builder::config::ListDeployments::new(self.inner.clone())
    }

    /// Gets details about a [Deployment][google.cloud.config.v1.Deployment].
    ///
    /// [google.cloud.config.v1.Deployment]: crate::model::Deployment
    pub fn get_deployment(&self) -> super::builder::config::GetDeployment {
        super::builder::config::GetDeployment::new(self.inner.clone())
    }

    /// Creates a [Deployment][google.cloud.config.v1.Deployment].
    ///
    /// [google.cloud.config.v1.Deployment]: crate::model::Deployment
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_deployment(&self) -> super::builder::config::CreateDeployment {
        super::builder::config::CreateDeployment::new(self.inner.clone())
    }

    /// Updates a [Deployment][google.cloud.config.v1.Deployment].
    ///
    /// [google.cloud.config.v1.Deployment]: crate::model::Deployment
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_deployment(&self) -> super::builder::config::UpdateDeployment {
        super::builder::config::UpdateDeployment::new(self.inner.clone())
    }

    /// Deletes a [Deployment][google.cloud.config.v1.Deployment].
    ///
    /// [google.cloud.config.v1.Deployment]: crate::model::Deployment
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_deployment(&self) -> super::builder::config::DeleteDeployment {
        super::builder::config::DeleteDeployment::new(self.inner.clone())
    }

    /// Lists [Revision][google.cloud.config.v1.Revision]s of a deployment.
    ///
    /// [google.cloud.config.v1.Revision]: crate::model::Revision
    pub fn list_revisions(&self) -> super::builder::config::ListRevisions {
        super::builder::config::ListRevisions::new(self.inner.clone())
    }

    /// Gets details about a [Revision][google.cloud.config.v1.Revision].
    ///
    /// [google.cloud.config.v1.Revision]: crate::model::Revision
    pub fn get_revision(&self) -> super::builder::config::GetRevision {
        super::builder::config::GetRevision::new(self.inner.clone())
    }

    /// Gets details about a [Resource][google.cloud.config.v1.Resource] deployed
    /// by Infra Manager.
    ///
    /// [google.cloud.config.v1.Resource]: crate::model::Resource
    pub fn get_resource(&self) -> super::builder::config::GetResource {
        super::builder::config::GetResource::new(self.inner.clone())
    }

    /// Lists [Resources][google.cloud.config.v1.Resource] in a given revision.
    ///
    /// [google.cloud.config.v1.Resource]: crate::model::Resource
    pub fn list_resources(&self) -> super::builder::config::ListResources {
        super::builder::config::ListResources::new(self.inner.clone())
    }

    /// Exports Terraform state file from a given deployment.
    pub fn export_deployment_statefile(&self) -> super::builder::config::ExportDeploymentStatefile {
        super::builder::config::ExportDeploymentStatefile::new(self.inner.clone())
    }

    /// Exports Terraform state file from a given revision.
    pub fn export_revision_statefile(&self) -> super::builder::config::ExportRevisionStatefile {
        super::builder::config::ExportRevisionStatefile::new(self.inner.clone())
    }

    /// Imports Terraform state file in a given deployment. The state file does not
    /// take effect until the Deployment has been unlocked.
    pub fn import_statefile(&self) -> super::builder::config::ImportStatefile {
        super::builder::config::ImportStatefile::new(self.inner.clone())
    }

    /// Deletes Terraform state file in a given deployment.
    pub fn delete_statefile(&self) -> super::builder::config::DeleteStatefile {
        super::builder::config::DeleteStatefile::new(self.inner.clone())
    }

    /// Locks a deployment.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn lock_deployment(&self) -> super::builder::config::LockDeployment {
        super::builder::config::LockDeployment::new(self.inner.clone())
    }

    /// Unlocks a locked deployment.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn unlock_deployment(&self) -> super::builder::config::UnlockDeployment {
        super::builder::config::UnlockDeployment::new(self.inner.clone())
    }

    /// Exports the lock info on a locked deployment.
    pub fn export_lock_info(&self) -> super::builder::config::ExportLockInfo {
        super::builder::config::ExportLockInfo::new(self.inner.clone())
    }

    /// Creates a [Preview][google.cloud.config.v1.Preview].
    ///
    /// [google.cloud.config.v1.Preview]: crate::model::Preview
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_preview(&self) -> super::builder::config::CreatePreview {
        super::builder::config::CreatePreview::new(self.inner.clone())
    }

    /// Gets details about a [Preview][google.cloud.config.v1.Preview].
    ///
    /// [google.cloud.config.v1.Preview]: crate::model::Preview
    pub fn get_preview(&self) -> super::builder::config::GetPreview {
        super::builder::config::GetPreview::new(self.inner.clone())
    }

    /// Lists [Preview][google.cloud.config.v1.Preview]s in a given project and
    /// location.
    ///
    /// [google.cloud.config.v1.Preview]: crate::model::Preview
    pub fn list_previews(&self) -> super::builder::config::ListPreviews {
        super::builder::config::ListPreviews::new(self.inner.clone())
    }

    /// Deletes a [Preview][google.cloud.config.v1.Preview].
    ///
    /// [google.cloud.config.v1.Preview]: crate::model::Preview
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_preview(&self) -> super::builder::config::DeletePreview {
        super::builder::config::DeletePreview::new(self.inner.clone())
    }

    /// Export [Preview][google.cloud.config.v1.Preview] results.
    ///
    /// [google.cloud.config.v1.Preview]: crate::model::Preview
    pub fn export_preview_result(&self) -> super::builder::config::ExportPreviewResult {
        super::builder::config::ExportPreviewResult::new(self.inner.clone())
    }

    /// Lists [TerraformVersion][google.cloud.config.v1.TerraformVersion]s in a
    /// given project and location.
    ///
    /// [google.cloud.config.v1.TerraformVersion]: crate::model::TerraformVersion
    pub fn list_terraform_versions(&self) -> super::builder::config::ListTerraformVersions {
        super::builder::config::ListTerraformVersions::new(self.inner.clone())
    }

    /// Gets details about a
    /// [TerraformVersion][google.cloud.config.v1.TerraformVersion].
    ///
    /// [google.cloud.config.v1.TerraformVersion]: crate::model::TerraformVersion
    pub fn get_terraform_version(&self) -> super::builder::config::GetTerraformVersion {
        super::builder::config::GetTerraformVersion::new(self.inner.clone())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(&self) -> super::builder::config::ListLocations {
        super::builder::config::ListLocations::new(self.inner.clone())
    }

    /// Gets information about a location.
    pub fn get_location(&self) -> super::builder::config::GetLocation {
        super::builder::config::GetLocation::new(self.inner.clone())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(&self) -> super::builder::config::SetIamPolicy {
        super::builder::config::SetIamPolicy::new(self.inner.clone())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(&self) -> super::builder::config::GetIamPolicy {
        super::builder::config::GetIamPolicy::new(self.inner.clone())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(&self) -> super::builder::config::TestIamPermissions {
        super::builder::config::TestIamPermissions::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(&self) -> super::builder::config::ListOperations {
        super::builder::config::ListOperations::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(&self) -> super::builder::config::GetOperation {
        super::builder::config::GetOperation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(&self) -> super::builder::config::DeleteOperation {
        super::builder::config::DeleteOperation::new(self.inner.clone())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(&self) -> super::builder::config::CancelOperation {
        super::builder::config::CancelOperation::new(self.inner.clone())
    }
}
