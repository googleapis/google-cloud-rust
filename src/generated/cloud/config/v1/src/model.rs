// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gaxi;
extern crate iam_v1;
extern crate lazy_static;
extern crate location;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate rpc;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// A Deployment is a group of resources and configs managed and provisioned by
/// Infra Manager.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Deployment {
    /// Resource name of the deployment.
    /// Format: `projects/{project}/locations/{location}/deployments/{deployment}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Time when the deployment was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time when the deployment was last modified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// User-defined metadata for the deployment.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Output only. Current state of the deployment.
    pub state: crate::model::deployment::State,

    /// Output only. Revision name that was most recently applied.
    /// Format: `projects/{project}/locations/{location}/deployments/{deployment}/
    /// revisions/{revision}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub latest_revision: std::string::String,

    /// Output only. Additional information regarding the current state.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub state_detail: std::string::String,

    /// Output only. Error code describing errors that may have occurred.
    pub error_code: crate::model::deployment::ErrorCode,

    /// Output only. Location of artifacts from a DeleteDeployment operation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub delete_results: std::option::Option<crate::model::ApplyResults>,

    /// Output only. Cloud Build instance UUID associated with deleting this
    /// deployment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub delete_build: std::string::String,

    /// Output only. Location of Cloud Build logs in Google Cloud Storage,
    /// populated when deleting this deployment. Format: `gs://{bucket}/{object}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub delete_logs: std::string::String,

    /// Output only. Errors encountered when deleting this deployment.
    /// Errors are truncated to 10 entries, see `delete_results` and `error_logs`
    /// for full details.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub tf_errors: std::vec::Vec<crate::model::TerraformError>,

    /// Output only. Location of Terraform error logs in Google Cloud Storage.
    /// Format: `gs://{bucket}/{object}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub error_logs: std::string::String,

    /// Optional. User-defined location of Cloud Build logs and artifacts in Google
    /// Cloud Storage. Format: `gs://{bucket}/{folder}`
    ///
    /// A default bucket will be bootstrapped if the field is not set or empty.
    /// Default bucket format: `gs://<project number>-<region>-blueprint-config`
    /// Constraints:
    ///
    /// - The bucket needs to be in the same project as the deployment
    /// - The path cannot be within the path of `gcs_source`
    /// - The field cannot be updated, including changing its presence
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub artifacts_gcs_bucket: std::option::Option<std::string::String>,

    /// Required. User-specified Service Account (SA) credentials to be used when
    /// actuating resources.
    /// Format: `projects/{projectID}/serviceAccounts/{serviceAccount}`
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub service_account: std::option::Option<std::string::String>,

    /// By default, Infra Manager will return a failure when
    /// Terraform encounters a 409 code (resource conflict error) during actuation.
    /// If this flag is set to true, Infra Manager will instead
    /// attempt to automatically import the resource into the Terraform state (for
    /// supported resource types) and continue actuation.
    ///
    /// Not all resource types are supported, refer to documentation.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub import_existing_resources: std::option::Option<bool>,

    /// Optional. The user-specified Cloud Build worker pool resource in which the
    /// Cloud Build job will execute. Format:
    /// `projects/{project}/locations/{location}/workerPools/{workerPoolId}`.
    /// If this field is unspecified, the default Cloud Build worker pool will be
    /// used.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub worker_pool: std::option::Option<std::string::String>,

    /// Output only. Current lock state of the deployment.
    pub lock_state: crate::model::deployment::LockState,

    /// Optional. The user-specified Terraform version constraint.
    /// Example: "=1.3.10".
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub tf_version_constraint: std::option::Option<std::string::String>,

    /// Output only. The current Terraform version set on the deployment.
    /// It is in the format of "Major.Minor.Patch", for example, "1.3.10".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub tf_version: std::string::String,

    /// Optional. Input to control quota checks for resources in terraform
    /// configuration files. There are limited resources on which quota validation
    /// applies.
    pub quota_validation: crate::model::QuotaValidation,

    /// Optional. Arbitrary key-value metadata storage e.g. to help client tools
    /// identify deployments during automation. See
    /// <https://google.aip.dev/148#annotations> for details on format and size
    /// limitations.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub annotations: std::collections::HashMap<std::string::String, std::string::String>,

    /// Blueprint to deploy.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub blueprint: std::option::Option<crate::model::deployment::Blueprint>,
}

impl Deployment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Deployment::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Deployment::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Deployment::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Deployment::state].
    pub fn set_state<T: std::convert::Into<crate::model::deployment::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [latest_revision][crate::model::Deployment::latest_revision].
    pub fn set_latest_revision<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.latest_revision = v.into();
        self
    }

    /// Sets the value of [state_detail][crate::model::Deployment::state_detail].
    pub fn set_state_detail<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.state_detail = v.into();
        self
    }

    /// Sets the value of [error_code][crate::model::Deployment::error_code].
    pub fn set_error_code<T: std::convert::Into<crate::model::deployment::ErrorCode>>(
        mut self,
        v: T,
    ) -> Self {
        self.error_code = v.into();
        self
    }

    /// Sets the value of [delete_results][crate::model::Deployment::delete_results].
    pub fn set_delete_results<
        T: std::convert::Into<std::option::Option<crate::model::ApplyResults>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.delete_results = v.into();
        self
    }

    /// Sets the value of [delete_build][crate::model::Deployment::delete_build].
    pub fn set_delete_build<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.delete_build = v.into();
        self
    }

    /// Sets the value of [delete_logs][crate::model::Deployment::delete_logs].
    pub fn set_delete_logs<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.delete_logs = v.into();
        self
    }

    /// Sets the value of [error_logs][crate::model::Deployment::error_logs].
    pub fn set_error_logs<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.error_logs = v.into();
        self
    }

    /// Sets the value of [artifacts_gcs_bucket][crate::model::Deployment::artifacts_gcs_bucket].
    pub fn set_artifacts_gcs_bucket<
        T: std::convert::Into<std::option::Option<std::string::String>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.artifacts_gcs_bucket = v.into();
        self
    }

    /// Sets the value of [service_account][crate::model::Deployment::service_account].
    pub fn set_service_account<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.service_account = v.into();
        self
    }

    /// Sets the value of [import_existing_resources][crate::model::Deployment::import_existing_resources].
    pub fn set_import_existing_resources<T: std::convert::Into<std::option::Option<bool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.import_existing_resources = v.into();
        self
    }

    /// Sets the value of [worker_pool][crate::model::Deployment::worker_pool].
    pub fn set_worker_pool<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.worker_pool = v.into();
        self
    }

    /// Sets the value of [lock_state][crate::model::Deployment::lock_state].
    pub fn set_lock_state<T: std::convert::Into<crate::model::deployment::LockState>>(
        mut self,
        v: T,
    ) -> Self {
        self.lock_state = v.into();
        self
    }

    /// Sets the value of [tf_version_constraint][crate::model::Deployment::tf_version_constraint].
    pub fn set_tf_version_constraint<
        T: std::convert::Into<std::option::Option<std::string::String>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.tf_version_constraint = v.into();
        self
    }

    /// Sets the value of [tf_version][crate::model::Deployment::tf_version].
    pub fn set_tf_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.tf_version = v.into();
        self
    }

    /// Sets the value of [quota_validation][crate::model::Deployment::quota_validation].
    pub fn set_quota_validation<T: std::convert::Into<crate::model::QuotaValidation>>(
        mut self,
        v: T,
    ) -> Self {
        self.quota_validation = v.into();
        self
    }

    /// Sets the value of [tf_errors][crate::model::Deployment::tf_errors].
    pub fn set_tf_errors<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TerraformError>,
    {
        use std::iter::Iterator;
        self.tf_errors = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::Deployment::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [annotations][crate::model::Deployment::annotations].
    pub fn set_annotations<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.annotations = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of `blueprint`.
    pub fn set_blueprint<
        T: std::convert::Into<std::option::Option<crate::model::deployment::Blueprint>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.blueprint = v.into();
        self
    }

    /// The value of [blueprint][crate::model::Deployment::blueprint]
    /// if it holds a `TerraformBlueprint`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_terraform_blueprint(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::TerraformBlueprint>> {
        #[allow(unreachable_patterns)]
        self.blueprint.as_ref().and_then(|v| match v {
            crate::model::deployment::Blueprint::TerraformBlueprint(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [blueprint][crate::model::Deployment::blueprint]
    /// to hold a `TerraformBlueprint`.
    ///
    /// Note that all the setters affecting `blueprint` are
    /// mutually exclusive.
    pub fn set_terraform_blueprint<
        T: std::convert::Into<std::boxed::Box<crate::model::TerraformBlueprint>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.blueprint = std::option::Option::Some(
            crate::model::deployment::Blueprint::TerraformBlueprint(v.into()),
        );
        self
    }
}

impl wkt::message::Message for Deployment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.Deployment"
    }
}

/// Defines additional types related to [Deployment].
pub mod deployment {
    #[allow(unused_imports)]
    use super::*;

    /// Possible states of a deployment.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// The default value. This value is used if the state is omitted.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// The deployment is being created.
        pub const CREATING: State = State::new(1);

        /// The deployment is healthy.
        pub const ACTIVE: State = State::new(2);

        /// The deployment is being updated.
        pub const UPDATING: State = State::new(3);

        /// The deployment is being deleted.
        pub const DELETING: State = State::new(4);

        /// The deployment has encountered an unexpected error.
        pub const FAILED: State = State::new(5);

        /// The deployment is no longer being actively reconciled.
        /// This may be the result of recovering the project after deletion.
        pub const SUSPENDED: State = State::new(6);

        /// The deployment has been deleted.
        pub const DELETED: State = State::new(7);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATING"),
                2 => std::borrow::Cow::Borrowed("ACTIVE"),
                3 => std::borrow::Cow::Borrowed("UPDATING"),
                4 => std::borrow::Cow::Borrowed("DELETING"),
                5 => std::borrow::Cow::Borrowed("FAILED"),
                6 => std::borrow::Cow::Borrowed("SUSPENDED"),
                7 => std::borrow::Cow::Borrowed("DELETED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "ACTIVE" => std::option::Option::Some(Self::ACTIVE),
                "UPDATING" => std::option::Option::Some(Self::UPDATING),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "FAILED" => std::option::Option::Some(Self::FAILED),
                "SUSPENDED" => std::option::Option::Some(Self::SUSPENDED),
                "DELETED" => std::option::Option::Some(Self::DELETED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Possible errors that can occur with deployments.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct ErrorCode(i32);

    impl ErrorCode {
        /// No error code was specified.
        pub const ERROR_CODE_UNSPECIFIED: ErrorCode = ErrorCode::new(0);

        /// The revision failed. See Revision for more details.
        pub const REVISION_FAILED: ErrorCode = ErrorCode::new(1);

        /// Cloud Build failed due to a permission issue.
        pub const CLOUD_BUILD_PERMISSION_DENIED: ErrorCode = ErrorCode::new(3);

        /// Cloud Build job associated with a deployment deletion could not be
        /// started.
        pub const DELETE_BUILD_API_FAILED: ErrorCode = ErrorCode::new(5);

        /// Cloud Build job associated with a deployment deletion was started but
        /// failed.
        pub const DELETE_BUILD_RUN_FAILED: ErrorCode = ErrorCode::new(6);

        /// Cloud Storage bucket creation failed due to a permission issue.
        pub const BUCKET_CREATION_PERMISSION_DENIED: ErrorCode = ErrorCode::new(7);

        /// Cloud Storage bucket creation failed due to an issue unrelated to
        /// permissions.
        pub const BUCKET_CREATION_FAILED: ErrorCode = ErrorCode::new(8);

        /// Creates a new ErrorCode instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("ERROR_CODE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("REVISION_FAILED"),
                3 => std::borrow::Cow::Borrowed("CLOUD_BUILD_PERMISSION_DENIED"),
                5 => std::borrow::Cow::Borrowed("DELETE_BUILD_API_FAILED"),
                6 => std::borrow::Cow::Borrowed("DELETE_BUILD_RUN_FAILED"),
                7 => std::borrow::Cow::Borrowed("BUCKET_CREATION_PERMISSION_DENIED"),
                8 => std::borrow::Cow::Borrowed("BUCKET_CREATION_FAILED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "ERROR_CODE_UNSPECIFIED" => std::option::Option::Some(Self::ERROR_CODE_UNSPECIFIED),
                "REVISION_FAILED" => std::option::Option::Some(Self::REVISION_FAILED),
                "CLOUD_BUILD_PERMISSION_DENIED" => {
                    std::option::Option::Some(Self::CLOUD_BUILD_PERMISSION_DENIED)
                }
                "DELETE_BUILD_API_FAILED" => {
                    std::option::Option::Some(Self::DELETE_BUILD_API_FAILED)
                }
                "DELETE_BUILD_RUN_FAILED" => {
                    std::option::Option::Some(Self::DELETE_BUILD_RUN_FAILED)
                }
                "BUCKET_CREATION_PERMISSION_DENIED" => {
                    std::option::Option::Some(Self::BUCKET_CREATION_PERMISSION_DENIED)
                }
                "BUCKET_CREATION_FAILED" => std::option::Option::Some(Self::BUCKET_CREATION_FAILED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for ErrorCode {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for ErrorCode {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Possible lock states of a deployment.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct LockState(i32);

    impl LockState {
        /// The default value. This value is used if the lock state is omitted.
        pub const LOCK_STATE_UNSPECIFIED: LockState = LockState::new(0);

        /// The deployment is locked.
        pub const LOCKED: LockState = LockState::new(1);

        /// The deployment is unlocked.
        pub const UNLOCKED: LockState = LockState::new(2);

        /// The deployment is being locked.
        pub const LOCKING: LockState = LockState::new(3);

        /// The deployment is being unlocked.
        pub const UNLOCKING: LockState = LockState::new(4);

        /// The deployment has failed to lock.
        pub const LOCK_FAILED: LockState = LockState::new(5);

        /// The deployment has failed to unlock.
        pub const UNLOCK_FAILED: LockState = LockState::new(6);

        /// Creates a new LockState instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("LOCK_STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("LOCKED"),
                2 => std::borrow::Cow::Borrowed("UNLOCKED"),
                3 => std::borrow::Cow::Borrowed("LOCKING"),
                4 => std::borrow::Cow::Borrowed("UNLOCKING"),
                5 => std::borrow::Cow::Borrowed("LOCK_FAILED"),
                6 => std::borrow::Cow::Borrowed("UNLOCK_FAILED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "LOCK_STATE_UNSPECIFIED" => std::option::Option::Some(Self::LOCK_STATE_UNSPECIFIED),
                "LOCKED" => std::option::Option::Some(Self::LOCKED),
                "UNLOCKED" => std::option::Option::Some(Self::UNLOCKED),
                "LOCKING" => std::option::Option::Some(Self::LOCKING),
                "UNLOCKING" => std::option::Option::Some(Self::UNLOCKING),
                "LOCK_FAILED" => std::option::Option::Some(Self::LOCK_FAILED),
                "UNLOCK_FAILED" => std::option::Option::Some(Self::UNLOCK_FAILED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for LockState {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for LockState {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Blueprint to deploy.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Blueprint {
        /// A blueprint described using Terraform's HashiCorp Configuration Language
        /// as a root module.
        TerraformBlueprint(std::boxed::Box<crate::model::TerraformBlueprint>),
    }
}

/// TerraformBlueprint describes the source of a Terraform root module which
/// describes the resources and configs to be deployed.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TerraformBlueprint {
    /// Input variable values for the Terraform blueprint.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub input_values:
        std::collections::HashMap<std::string::String, crate::model::TerraformVariable>,

    /// Location of the source configs.
    /// Required.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub source: std::option::Option<crate::model::terraform_blueprint::Source>,
}

impl TerraformBlueprint {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [input_values][crate::model::TerraformBlueprint::input_values].
    pub fn set_input_values<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::TerraformVariable>,
    {
        use std::iter::Iterator;
        self.input_values = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of `source`.
    pub fn set_source<
        T: std::convert::Into<std::option::Option<crate::model::terraform_blueprint::Source>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.source = v.into();
        self
    }

    /// The value of [source][crate::model::TerraformBlueprint::source]
    /// if it holds a `GcsSource`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_gcs_source(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::terraform_blueprint::Source::GcsSource(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// The value of [source][crate::model::TerraformBlueprint::source]
    /// if it holds a `GitSource`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_git_source(&self) -> std::option::Option<&std::boxed::Box<crate::model::GitSource>> {
        #[allow(unreachable_patterns)]
        self.source.as_ref().and_then(|v| match v {
            crate::model::terraform_blueprint::Source::GitSource(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [source][crate::model::TerraformBlueprint::source]
    /// to hold a `GcsSource`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_gcs_source<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source = std::option::Option::Some(
            crate::model::terraform_blueprint::Source::GcsSource(v.into()),
        );
        self
    }

    /// Sets the value of [source][crate::model::TerraformBlueprint::source]
    /// to hold a `GitSource`.
    ///
    /// Note that all the setters affecting `source` are
    /// mutually exclusive.
    pub fn set_git_source<T: std::convert::Into<std::boxed::Box<crate::model::GitSource>>>(
        mut self,
        v: T,
    ) -> Self {
        self.source = std::option::Option::Some(
            crate::model::terraform_blueprint::Source::GitSource(v.into()),
        );
        self
    }
}

impl wkt::message::Message for TerraformBlueprint {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.TerraformBlueprint"
    }
}

/// Defines additional types related to [TerraformBlueprint].
pub mod terraform_blueprint {
    #[allow(unused_imports)]
    use super::*;

    /// Location of the source configs.
    /// Required.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Source {
        /// URI of an object in Google Cloud Storage.
        /// Format: `gs://{bucket}/{object}`
        ///
        /// URI may also specify an object version for zipped objects.
        /// Format: `gs://{bucket}/{object}#{version}`
        GcsSource(std::string::String),
        /// URI of a public Git repo.
        GitSource(std::boxed::Box<crate::model::GitSource>),
    }
}

/// A Terraform input variable.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TerraformVariable {
    /// Input variable value.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub input_value: std::option::Option<wkt::Value>,
}

impl TerraformVariable {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [input_value][crate::model::TerraformVariable::input_value].
    pub fn set_input_value<T: std::convert::Into<std::option::Option<wkt::Value>>>(
        mut self,
        v: T,
    ) -> Self {
        self.input_value = v.into();
        self
    }
}

impl wkt::message::Message for TerraformVariable {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.TerraformVariable"
    }
}

/// Outputs and artifacts from applying a deployment.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ApplyResults {
    /// Location of a blueprint copy and other manifests in Google Cloud Storage.
    /// Format: `gs://{bucket}/{object}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub content: std::string::String,

    /// Location of artifacts (e.g. logs) in Google Cloud Storage.
    /// Format: `gs://{bucket}/{object}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub artifacts: std::string::String,

    /// Map of output name to output info.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub outputs: std::collections::HashMap<std::string::String, crate::model::TerraformOutput>,
}

impl ApplyResults {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [content][crate::model::ApplyResults::content].
    pub fn set_content<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.content = v.into();
        self
    }

    /// Sets the value of [artifacts][crate::model::ApplyResults::artifacts].
    pub fn set_artifacts<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.artifacts = v.into();
        self
    }

    /// Sets the value of [outputs][crate::model::ApplyResults::outputs].
    pub fn set_outputs<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::TerraformOutput>,
    {
        use std::iter::Iterator;
        self.outputs = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for ApplyResults {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ApplyResults"
    }
}

/// Describes a Terraform output.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TerraformOutput {
    /// Identifies whether Terraform has set this output as a potential
    /// sensitive value.
    pub sensitive: bool,

    /// Value of output.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub value: std::option::Option<wkt::Value>,
}

impl TerraformOutput {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [sensitive][crate::model::TerraformOutput::sensitive].
    pub fn set_sensitive<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.sensitive = v.into();
        self
    }

    /// Sets the value of [value][crate::model::TerraformOutput::value].
    pub fn set_value<T: std::convert::Into<std::option::Option<wkt::Value>>>(
        mut self,
        v: T,
    ) -> Self {
        self.value = v.into();
        self
    }
}

impl wkt::message::Message for TerraformOutput {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.TerraformOutput"
    }
}

#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListDeploymentsRequest {
    /// Required. The parent in whose context the Deployments are listed. The
    /// parent value is in the format:
    /// 'projects/{project_id}/locations/{location}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// When requesting a page of resources, 'page_size' specifies number of
    /// resources to return. If unspecified, at most 500 will be returned. The
    /// maximum value is 1000.
    pub page_size: i32,

    /// Token returned by previous call to 'ListDeployments' which specifies the
    /// position in the list from where to continue listing the resources.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Lists the Deployments that match the filter expression. A filter
    /// expression filters the resources listed in the response. The expression
    /// must be of the form '{field} {operator} {value}' where operators: '<', '>',
    /// '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a HAS
    /// operator which is roughly synonymous with equality). {field} can refer to a
    /// proto or JSON field, or a synthetic field. Field names can be camelCase or
    /// snake_case.
    ///
    /// Examples:
    ///
    /// - Filter by name:
    ///   name = "projects/foo/locations/us-central1/deployments/bar
    ///
    /// - Filter by labels:
    ///
    ///   - Resources that have a key called 'foo'
    ///     labels.foo:*
    ///   - Resources that have a key called 'foo' whose value is 'bar'
    ///     labels.foo = bar
    /// - Filter by state:
    ///
    ///   - Deployments in CREATING state.
    ///     state=CREATING
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Field to use to sort the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListDeploymentsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListDeploymentsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListDeploymentsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListDeploymentsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListDeploymentsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListDeploymentsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListDeploymentsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ListDeploymentsRequest"
    }
}

#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListDeploymentsResponse {
    /// List of [Deployment][google.cloud.config.v1.Deployment]s.
    ///
    /// [google.cloud.config.v1.Deployment]: crate::model::Deployment
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub deployments: std::vec::Vec<crate::model::Deployment>,

    /// Token to be supplied to the next ListDeployments request via `page_token`
    /// to obtain the next set of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListDeploymentsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListDeploymentsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [deployments][crate::model::ListDeploymentsResponse::deployments].
    pub fn set_deployments<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Deployment>,
    {
        use std::iter::Iterator;
        self.deployments = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListDeploymentsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListDeploymentsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ListDeploymentsResponse"
    }
}

impl gax::paginator::PageableResponse for ListDeploymentsResponse {
    type PageItem = crate::model::Deployment;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.deployments
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetDeploymentRequest {
    /// Required. The name of the deployment. Format:
    /// 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetDeploymentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetDeploymentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetDeploymentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.GetDeploymentRequest"
    }
}

/// A request to list Revisions passed to a 'ListRevisions' call.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListRevisionsRequest {
    /// Required. The parent in whose context the Revisions are listed. The parent
    /// value is in the format:
    /// 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// When requesting a page of resources, `page_size` specifies number of
    /// resources to return. If unspecified, at most 500 will be returned. The
    /// maximum value is 1000.
    pub page_size: i32,

    /// Token returned by previous call to 'ListRevisions' which specifies the
    /// position in the list from where to continue listing the resources.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Lists the Revisions that match the filter expression. A filter
    /// expression filters the resources listed in the response. The expression
    /// must be of the form '{field} {operator} {value}' where operators: '<', '>',
    /// '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a HAS
    /// operator which is roughly synonymous with equality). {field} can refer to a
    /// proto or JSON field, or a synthetic field. Field names can be camelCase or
    /// snake_case.
    ///
    /// Examples:
    ///
    /// - Filter by name:
    ///   name = "projects/foo/locations/us-central1/deployments/dep/revisions/bar
    ///
    /// - Filter by labels:
    ///
    ///   - Resources that have a key called 'foo'
    ///     labels.foo:*
    ///   - Resources that have a key called 'foo' whose value is 'bar'
    ///     labels.foo = bar
    /// - Filter by state:
    ///
    ///   - Revisions in CREATING state.
    ///     state=CREATING
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Field to use to sort the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListRevisionsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListRevisionsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListRevisionsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListRevisionsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListRevisionsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListRevisionsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListRevisionsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ListRevisionsRequest"
    }
}

/// A response to a 'ListRevisions' call. Contains a list of Revisions.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListRevisionsResponse {
    /// List of [Revision][google.cloud.config.v1.Revision]s.
    ///
    /// [google.cloud.config.v1.Revision]: crate::model::Revision
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub revisions: std::vec::Vec<crate::model::Revision>,

    /// A token to request the next page of resources from the 'ListRevisions'
    /// method. The value of an empty string means that there are no more resources
    /// to return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListRevisionsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListRevisionsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [revisions][crate::model::ListRevisionsResponse::revisions].
    pub fn set_revisions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Revision>,
    {
        use std::iter::Iterator;
        self.revisions = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListRevisionsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListRevisionsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ListRevisionsResponse"
    }
}

impl gax::paginator::PageableResponse for ListRevisionsResponse {
    type PageItem = crate::model::Revision;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.revisions
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// A request to get a Revision from a 'GetRevision' call.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetRevisionRequest {
    /// Required. The name of the Revision in the format:
    /// 'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetRevisionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetRevisionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetRevisionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.GetRevisionRequest"
    }
}

#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateDeploymentRequest {
    /// Required. The parent in whose context the Deployment is created. The parent
    /// value is in the format: 'projects/{project_id}/locations/{location}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. The Deployment ID.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub deployment_id: std::string::String,

    /// Required. [Deployment][google.cloud.config.v1.Deployment] resource to be
    /// created.
    ///
    /// [google.cloud.config.v1.Deployment]: crate::model::Deployment
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub deployment: std::option::Option<crate::model::Deployment>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreateDeploymentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateDeploymentRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [deployment_id][crate::model::CreateDeploymentRequest::deployment_id].
    pub fn set_deployment_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.deployment_id = v.into();
        self
    }

    /// Sets the value of [deployment][crate::model::CreateDeploymentRequest::deployment].
    pub fn set_deployment<T: std::convert::Into<std::option::Option<crate::model::Deployment>>>(
        mut self,
        v: T,
    ) -> Self {
        self.deployment = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateDeploymentRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateDeploymentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.CreateDeploymentRequest"
    }
}

#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateDeploymentRequest {
    /// Optional. Field mask used to specify the fields to be overwritten in the
    /// Deployment resource by the update.
    ///
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. [Deployment][google.cloud.config.v1.Deployment] to update.
    ///
    /// The deployment's `name` field is used to identify the resource to be
    /// updated. Format:
    /// `projects/{project}/locations/{location}/deployments/{deployment}`
    ///
    /// [google.cloud.config.v1.Deployment]: crate::model::Deployment
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub deployment: std::option::Option<crate::model::Deployment>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl UpdateDeploymentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateDeploymentRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [deployment][crate::model::UpdateDeploymentRequest::deployment].
    pub fn set_deployment<T: std::convert::Into<std::option::Option<crate::model::Deployment>>>(
        mut self,
        v: T,
    ) -> Self {
        self.deployment = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateDeploymentRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateDeploymentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.UpdateDeploymentRequest"
    }
}

#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteDeploymentRequest {
    /// Required. The name of the Deployment in the format:
    /// 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. If set to true, any revisions for this deployment will also be
    /// deleted. (Otherwise, the request will only work if the deployment has no
    /// revisions.)
    pub force: bool,

    /// Optional. Policy on how resources actuated by the deployment should be
    /// deleted. If unspecified, the default behavior is to delete the underlying
    /// resources.
    pub delete_policy: crate::model::delete_deployment_request::DeletePolicy,
}

impl DeleteDeploymentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteDeploymentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteDeploymentRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [force][crate::model::DeleteDeploymentRequest::force].
    pub fn set_force<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.force = v.into();
        self
    }

    /// Sets the value of [delete_policy][crate::model::DeleteDeploymentRequest::delete_policy].
    pub fn set_delete_policy<
        T: std::convert::Into<crate::model::delete_deployment_request::DeletePolicy>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.delete_policy = v.into();
        self
    }
}

impl wkt::message::Message for DeleteDeploymentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.DeleteDeploymentRequest"
    }
}

/// Defines additional types related to [DeleteDeploymentRequest].
pub mod delete_deployment_request {
    #[allow(unused_imports)]
    use super::*;

    /// Policy on how resources actuated by the deployment should be deleted.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct DeletePolicy(i32);

    impl DeletePolicy {
        /// Unspecified policy, resources will be deleted.
        pub const DELETE_POLICY_UNSPECIFIED: DeletePolicy = DeletePolicy::new(0);

        /// Deletes resources actuated by the deployment.
        pub const DELETE: DeletePolicy = DeletePolicy::new(1);

        /// Abandons resources and only deletes the deployment and its metadata.
        pub const ABANDON: DeletePolicy = DeletePolicy::new(2);

        /// Creates a new DeletePolicy instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("DELETE_POLICY_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("DELETE"),
                2 => std::borrow::Cow::Borrowed("ABANDON"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "DELETE_POLICY_UNSPECIFIED" => {
                    std::option::Option::Some(Self::DELETE_POLICY_UNSPECIFIED)
                }
                "DELETE" => std::option::Option::Some(Self::DELETE),
                "ABANDON" => std::option::Option::Some(Self::ABANDON),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for DeletePolicy {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for DeletePolicy {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Represents the metadata of the long-running operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OperationMetadata {
    /// Output only. Time when the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time when the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Output only. Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Output only. Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_message: std::string::String,

    /// Output only. Identifies whether the user has requested cancellation of the
    /// operation. Operations that have successfully been cancelled have
    /// [google.longrunning.Operation.error][google.longrunning.Operation.error]
    /// value with a [google.rpc.Status.code][google.rpc.Status.code] of `1`,
    /// corresponding to `Code.CANCELLED`.
    ///
    /// [google.longrunning.Operation.error]: longrunning::model::Operation::result
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub requested_cancellation: bool,

    /// Output only. API version used to start the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,

    /// Ephemeral metadata about the state of an operation for a particular
    /// resource.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub resource_metadata: std::option::Option<crate::model::operation_metadata::ResourceMetadata>,
}

impl OperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::OperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::OperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::OperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_message][crate::model::OperationMetadata::status_message].
    pub fn set_status_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_message = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::OperationMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::OperationMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }

    /// Sets the value of `resource_metadata`.
    pub fn set_resource_metadata<
        T: std::convert::Into<std::option::Option<crate::model::operation_metadata::ResourceMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_metadata = v.into();
        self
    }

    /// The value of [resource_metadata][crate::model::OperationMetadata::resource_metadata]
    /// if it holds a `DeploymentMetadata`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_deployment_metadata(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::DeploymentOperationMetadata>> {
        #[allow(unreachable_patterns)]
        self.resource_metadata.as_ref().and_then(|v| match v {
            crate::model::operation_metadata::ResourceMetadata::DeploymentMetadata(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [resource_metadata][crate::model::OperationMetadata::resource_metadata]
    /// if it holds a `PreviewMetadata`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_preview_metadata(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::PreviewOperationMetadata>> {
        #[allow(unreachable_patterns)]
        self.resource_metadata.as_ref().and_then(|v| match v {
            crate::model::operation_metadata::ResourceMetadata::PreviewMetadata(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [resource_metadata][crate::model::OperationMetadata::resource_metadata]
    /// to hold a `DeploymentMetadata`.
    ///
    /// Note that all the setters affecting `resource_metadata` are
    /// mutually exclusive.
    pub fn set_deployment_metadata<
        T: std::convert::Into<std::boxed::Box<crate::model::DeploymentOperationMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_metadata = std::option::Option::Some(
            crate::model::operation_metadata::ResourceMetadata::DeploymentMetadata(v.into()),
        );
        self
    }

    /// Sets the value of [resource_metadata][crate::model::OperationMetadata::resource_metadata]
    /// to hold a `PreviewMetadata`.
    ///
    /// Note that all the setters affecting `resource_metadata` are
    /// mutually exclusive.
    pub fn set_preview_metadata<
        T: std::convert::Into<std::boxed::Box<crate::model::PreviewOperationMetadata>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.resource_metadata = std::option::Option::Some(
            crate::model::operation_metadata::ResourceMetadata::PreviewMetadata(v.into()),
        );
        self
    }
}

impl wkt::message::Message for OperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.OperationMetadata"
    }
}

/// Defines additional types related to [OperationMetadata].
pub mod operation_metadata {
    #[allow(unused_imports)]
    use super::*;

    /// Ephemeral metadata about the state of an operation for a particular
    /// resource.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum ResourceMetadata {
        /// Output only. Metadata about the deployment operation state.
        DeploymentMetadata(std::boxed::Box<crate::model::DeploymentOperationMetadata>),
        /// Output only. Metadata about the preview operation state.
        PreviewMetadata(std::boxed::Box<crate::model::PreviewOperationMetadata>),
    }
}

/// A child resource of a Deployment generated by a 'CreateDeployment' or
/// 'UpdateDeployment' call. Each Revision contains metadata pertaining to a
/// snapshot of a particular Deployment.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Revision {
    /// Revision name. Format:
    /// `projects/{project}/locations/{location}/deployments/{deployment}/
    /// revisions/{revision}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Time when the revision was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time when the revision was last modified.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The action which created this revision
    pub action: crate::model::revision::Action,

    /// Output only. Current state of the revision.
    pub state: crate::model::revision::State,

    /// Output only. Outputs and artifacts from applying a deployment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub apply_results: std::option::Option<crate::model::ApplyResults>,

    /// Output only. Additional info regarding the current state.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub state_detail: std::string::String,

    /// Output only. Code describing any errors that may have occurred.
    pub error_code: crate::model::revision::ErrorCode,

    /// Output only. Cloud Build instance UUID associated with this revision.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub build: std::string::String,

    /// Output only. Location of Revision operation logs in
    /// `gs://{bucket}/{object}` format.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub logs: std::string::String,

    /// Output only. Errors encountered when creating or updating this deployment.
    /// Errors are truncated to 10 entries, see `delete_results` and `error_logs`
    /// for full details.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub tf_errors: std::vec::Vec<crate::model::TerraformError>,

    /// Output only. Location of Terraform error logs in Google Cloud Storage.
    /// Format: `gs://{bucket}/{object}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub error_logs: std::string::String,

    /// Output only. User-specified Service Account (SA) to be used as credential
    /// to manage resources. Format:
    /// `projects/{projectID}/serviceAccounts/{serviceAccount}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_account: std::string::String,

    /// Output only. By default, Infra Manager will return a failure when
    /// Terraform encounters a 409 code (resource conflict error) during actuation.
    /// If this flag is set to true, Infra Manager will instead
    /// attempt to automatically import the resource into the Terraform state (for
    /// supported resource types) and continue actuation.
    ///
    /// Not all resource types are supported, refer to documentation.
    pub import_existing_resources: bool,

    /// Output only. The user-specified Cloud Build worker pool resource in which
    /// the Cloud Build job will execute. Format:
    /// `projects/{project}/locations/{location}/workerPools/{workerPoolId}`.
    /// If this field is unspecified, the default Cloud Build worker pool will be
    /// used.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub worker_pool: std::string::String,

    /// Output only. The user-specified Terraform version constraint.
    /// Example: "=1.3.10".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub tf_version_constraint: std::string::String,

    /// Output only. The version of Terraform used to create the Revision.
    /// It is in the format of "Major.Minor.Patch", for example, "1.3.10".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub tf_version: std::string::String,

    /// Output only. Cloud Storage path containing quota validation results. This
    /// field is set when a user sets Deployment.quota_validation field to ENABLED
    /// or ENFORCED. Format: `gs://{bucket}/{object}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub quota_validation_results: std::string::String,

    /// Optional. Input to control quota checks for resources in terraform
    /// configuration files. There are limited resources on which quota validation
    /// applies.
    pub quota_validation: crate::model::QuotaValidation,

    /// Blueprint that was deployed.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub blueprint: std::option::Option<crate::model::revision::Blueprint>,
}

impl Revision {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Revision::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Revision::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Revision::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [action][crate::model::Revision::action].
    pub fn set_action<T: std::convert::Into<crate::model::revision::Action>>(
        mut self,
        v: T,
    ) -> Self {
        self.action = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Revision::state].
    pub fn set_state<T: std::convert::Into<crate::model::revision::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [apply_results][crate::model::Revision::apply_results].
    pub fn set_apply_results<
        T: std::convert::Into<std::option::Option<crate::model::ApplyResults>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.apply_results = v.into();
        self
    }

    /// Sets the value of [state_detail][crate::model::Revision::state_detail].
    pub fn set_state_detail<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.state_detail = v.into();
        self
    }

    /// Sets the value of [error_code][crate::model::Revision::error_code].
    pub fn set_error_code<T: std::convert::Into<crate::model::revision::ErrorCode>>(
        mut self,
        v: T,
    ) -> Self {
        self.error_code = v.into();
        self
    }

    /// Sets the value of [build][crate::model::Revision::build].
    pub fn set_build<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.build = v.into();
        self
    }

    /// Sets the value of [logs][crate::model::Revision::logs].
    pub fn set_logs<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.logs = v.into();
        self
    }

    /// Sets the value of [error_logs][crate::model::Revision::error_logs].
    pub fn set_error_logs<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.error_logs = v.into();
        self
    }

    /// Sets the value of [service_account][crate::model::Revision::service_account].
    pub fn set_service_account<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service_account = v.into();
        self
    }

    /// Sets the value of [import_existing_resources][crate::model::Revision::import_existing_resources].
    pub fn set_import_existing_resources<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.import_existing_resources = v.into();
        self
    }

    /// Sets the value of [worker_pool][crate::model::Revision::worker_pool].
    pub fn set_worker_pool<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.worker_pool = v.into();
        self
    }

    /// Sets the value of [tf_version_constraint][crate::model::Revision::tf_version_constraint].
    pub fn set_tf_version_constraint<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.tf_version_constraint = v.into();
        self
    }

    /// Sets the value of [tf_version][crate::model::Revision::tf_version].
    pub fn set_tf_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.tf_version = v.into();
        self
    }

    /// Sets the value of [quota_validation_results][crate::model::Revision::quota_validation_results].
    pub fn set_quota_validation_results<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.quota_validation_results = v.into();
        self
    }

    /// Sets the value of [quota_validation][crate::model::Revision::quota_validation].
    pub fn set_quota_validation<T: std::convert::Into<crate::model::QuotaValidation>>(
        mut self,
        v: T,
    ) -> Self {
        self.quota_validation = v.into();
        self
    }

    /// Sets the value of [tf_errors][crate::model::Revision::tf_errors].
    pub fn set_tf_errors<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TerraformError>,
    {
        use std::iter::Iterator;
        self.tf_errors = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of `blueprint`.
    pub fn set_blueprint<
        T: std::convert::Into<std::option::Option<crate::model::revision::Blueprint>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.blueprint = v.into();
        self
    }

    /// The value of [blueprint][crate::model::Revision::blueprint]
    /// if it holds a `TerraformBlueprint`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_terraform_blueprint(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::TerraformBlueprint>> {
        #[allow(unreachable_patterns)]
        self.blueprint.as_ref().and_then(|v| match v {
            crate::model::revision::Blueprint::TerraformBlueprint(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [blueprint][crate::model::Revision::blueprint]
    /// to hold a `TerraformBlueprint`.
    ///
    /// Note that all the setters affecting `blueprint` are
    /// mutually exclusive.
    pub fn set_terraform_blueprint<
        T: std::convert::Into<std::boxed::Box<crate::model::TerraformBlueprint>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.blueprint = std::option::Option::Some(
            crate::model::revision::Blueprint::TerraformBlueprint(v.into()),
        );
        self
    }
}

impl wkt::message::Message for Revision {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.Revision"
    }
}

/// Defines additional types related to [Revision].
pub mod revision {
    #[allow(unused_imports)]
    use super::*;

    /// Actions that generate a revision.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Action(i32);

    impl Action {
        /// The default value. This value is used if the action is omitted.
        pub const ACTION_UNSPECIFIED: Action = Action::new(0);

        /// The revision was generated by creating a deployment.
        pub const CREATE: Action = Action::new(1);

        /// The revision was generated by updating a deployment.
        pub const UPDATE: Action = Action::new(2);

        /// The revision was deleted.
        pub const DELETE: Action = Action::new(3);

        /// Creates a new Action instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("ACTION_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATE"),
                2 => std::borrow::Cow::Borrowed("UPDATE"),
                3 => std::borrow::Cow::Borrowed("DELETE"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "ACTION_UNSPECIFIED" => std::option::Option::Some(Self::ACTION_UNSPECIFIED),
                "CREATE" => std::option::Option::Some(Self::CREATE),
                "UPDATE" => std::option::Option::Some(Self::UPDATE),
                "DELETE" => std::option::Option::Some(Self::DELETE),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for Action {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for Action {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Possible states of a revision.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// The default value. This value is used if the state is omitted.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// The revision is being applied.
        pub const APPLYING: State = State::new(1);

        /// The revision was applied successfully.
        pub const APPLIED: State = State::new(2);

        /// The revision could not be applied successfully.
        pub const FAILED: State = State::new(3);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("APPLYING"),
                2 => std::borrow::Cow::Borrowed("APPLIED"),
                3 => std::borrow::Cow::Borrowed("FAILED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "APPLYING" => std::option::Option::Some(Self::APPLYING),
                "APPLIED" => std::option::Option::Some(Self::APPLIED),
                "FAILED" => std::option::Option::Some(Self::FAILED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Possible errors if Revision could not be created or updated successfully.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct ErrorCode(i32);

    impl ErrorCode {
        /// No error code was specified.
        pub const ERROR_CODE_UNSPECIFIED: ErrorCode = ErrorCode::new(0);

        /// Cloud Build failed due to a permission issue.
        pub const CLOUD_BUILD_PERMISSION_DENIED: ErrorCode = ErrorCode::new(1);

        /// Cloud Build job associated with creating or updating a deployment could
        /// not be started.
        pub const APPLY_BUILD_API_FAILED: ErrorCode = ErrorCode::new(4);

        /// Cloud Build job associated with creating or updating a deployment was
        /// started but failed.
        pub const APPLY_BUILD_RUN_FAILED: ErrorCode = ErrorCode::new(5);

        /// quota validation failed for one or more resources in terraform
        /// configuration files.
        pub const QUOTA_VALIDATION_FAILED: ErrorCode = ErrorCode::new(7);

        /// Creates a new ErrorCode instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("ERROR_CODE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CLOUD_BUILD_PERMISSION_DENIED"),
                4 => std::borrow::Cow::Borrowed("APPLY_BUILD_API_FAILED"),
                5 => std::borrow::Cow::Borrowed("APPLY_BUILD_RUN_FAILED"),
                7 => std::borrow::Cow::Borrowed("QUOTA_VALIDATION_FAILED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "ERROR_CODE_UNSPECIFIED" => std::option::Option::Some(Self::ERROR_CODE_UNSPECIFIED),
                "CLOUD_BUILD_PERMISSION_DENIED" => {
                    std::option::Option::Some(Self::CLOUD_BUILD_PERMISSION_DENIED)
                }
                "APPLY_BUILD_API_FAILED" => std::option::Option::Some(Self::APPLY_BUILD_API_FAILED),
                "APPLY_BUILD_RUN_FAILED" => std::option::Option::Some(Self::APPLY_BUILD_RUN_FAILED),
                "QUOTA_VALIDATION_FAILED" => {
                    std::option::Option::Some(Self::QUOTA_VALIDATION_FAILED)
                }
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for ErrorCode {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for ErrorCode {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Blueprint that was deployed.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Blueprint {
        /// Output only. A blueprint described using Terraform's HashiCorp
        /// Configuration Language as a root module.
        TerraformBlueprint(std::boxed::Box<crate::model::TerraformBlueprint>),
    }
}

/// Errors encountered during actuation using Terraform
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TerraformError {
    /// Address of the resource associated with the error,
    /// e.g. `google_compute_network.vpc_network`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub resource_address: std::string::String,

    /// HTTP response code returned from Google Cloud Platform APIs when Terraform
    /// fails to provision the resource. If unset or 0, no HTTP response code was
    /// returned by Terraform.
    pub http_response_code: i32,

    /// A human-readable error description.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub error_description: std::string::String,

    /// Original error response from underlying Google API, if available.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub error: std::option::Option<rpc::model::Status>,
}

impl TerraformError {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [resource_address][crate::model::TerraformError::resource_address].
    pub fn set_resource_address<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.resource_address = v.into();
        self
    }

    /// Sets the value of [http_response_code][crate::model::TerraformError::http_response_code].
    pub fn set_http_response_code<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.http_response_code = v.into();
        self
    }

    /// Sets the value of [error_description][crate::model::TerraformError::error_description].
    pub fn set_error_description<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.error_description = v.into();
        self
    }

    /// Sets the value of [error][crate::model::TerraformError::error].
    pub fn set_error<T: std::convert::Into<std::option::Option<rpc::model::Status>>>(
        mut self,
        v: T,
    ) -> Self {
        self.error = v.into();
        self
    }
}

impl wkt::message::Message for TerraformError {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.TerraformError"
    }
}

/// A set of files in a Git repository.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GitSource {
    /// Optional. Repository URL.
    /// Example: '<https://github.com/kubernetes/examples.git>'
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub repo: std::option::Option<std::string::String>,

    /// Optional. Subdirectory inside the repository.
    /// Example: 'staging/my-package'
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub directory: std::option::Option<std::string::String>,

    /// Optional. Git reference (e.g. branch or tag).
    #[serde(rename = "ref")]
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub r#ref: std::option::Option<std::string::String>,
}

impl GitSource {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [repo][crate::model::GitSource::repo].
    pub fn set_repo<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.repo = v.into();
        self
    }

    /// Sets the value of [directory][crate::model::GitSource::directory].
    pub fn set_directory<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.directory = v.into();
        self
    }

    /// Sets the value of [r#ref][crate::model::GitSource::ref].
    pub fn set_ref<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.r#ref = v.into();
        self
    }
}

impl wkt::message::Message for GitSource {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.GitSource"
    }
}

/// Ephemeral metadata content describing the state of a deployment operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeploymentOperationMetadata {
    /// The current step the deployment operation is running.
    pub step: crate::model::deployment_operation_metadata::DeploymentStep,

    /// Outputs and artifacts from applying a deployment.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub apply_results: std::option::Option<crate::model::ApplyResults>,

    /// Output only. Cloud Build instance UUID associated with this operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub build: std::string::String,

    /// Output only. Location of Deployment operations logs in
    /// `gs://{bucket}/{object}` format.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub logs: std::string::String,
}

impl DeploymentOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [step][crate::model::DeploymentOperationMetadata::step].
    pub fn set_step<
        T: std::convert::Into<crate::model::deployment_operation_metadata::DeploymentStep>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.step = v.into();
        self
    }

    /// Sets the value of [apply_results][crate::model::DeploymentOperationMetadata::apply_results].
    pub fn set_apply_results<
        T: std::convert::Into<std::option::Option<crate::model::ApplyResults>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.apply_results = v.into();
        self
    }

    /// Sets the value of [build][crate::model::DeploymentOperationMetadata::build].
    pub fn set_build<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.build = v.into();
        self
    }

    /// Sets the value of [logs][crate::model::DeploymentOperationMetadata::logs].
    pub fn set_logs<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.logs = v.into();
        self
    }
}

impl wkt::message::Message for DeploymentOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.DeploymentOperationMetadata"
    }
}

/// Defines additional types related to [DeploymentOperationMetadata].
pub mod deployment_operation_metadata {
    #[allow(unused_imports)]
    use super::*;

    /// The possible steps a deployment may be running.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct DeploymentStep(i32);

    impl DeploymentStep {
        /// Unspecified deployment step
        pub const DEPLOYMENT_STEP_UNSPECIFIED: DeploymentStep = DeploymentStep::new(0);

        /// Infra Manager is creating a Google Cloud Storage bucket to store
        /// artifacts and metadata about the deployment and revision
        pub const PREPARING_STORAGE_BUCKET: DeploymentStep = DeploymentStep::new(1);

        /// Downloading the blueprint onto the Google Cloud Storage bucket
        pub const DOWNLOADING_BLUEPRINT: DeploymentStep = DeploymentStep::new(2);

        /// Initializing Terraform using `terraform init`
        pub const RUNNING_TF_INIT: DeploymentStep = DeploymentStep::new(3);

        /// Running `terraform plan`
        pub const RUNNING_TF_PLAN: DeploymentStep = DeploymentStep::new(4);

        /// Actuating resources using Terraform using `terraform apply`
        pub const RUNNING_TF_APPLY: DeploymentStep = DeploymentStep::new(5);

        /// Destroying resources using Terraform using `terraform destroy`
        pub const RUNNING_TF_DESTROY: DeploymentStep = DeploymentStep::new(6);

        /// Validating the uploaded TF state file when unlocking a deployment
        pub const RUNNING_TF_VALIDATE: DeploymentStep = DeploymentStep::new(7);

        /// Unlocking a deployment
        pub const UNLOCKING_DEPLOYMENT: DeploymentStep = DeploymentStep::new(8);

        /// Operation was successful
        pub const SUCCEEDED: DeploymentStep = DeploymentStep::new(9);

        /// Operation failed
        pub const FAILED: DeploymentStep = DeploymentStep::new(10);

        /// Validating the provided repository.
        pub const VALIDATING_REPOSITORY: DeploymentStep = DeploymentStep::new(11);

        /// Running quota validation
        pub const RUNNING_QUOTA_VALIDATION: DeploymentStep = DeploymentStep::new(12);

        /// Creates a new DeploymentStep instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("DEPLOYMENT_STEP_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("PREPARING_STORAGE_BUCKET"),
                2 => std::borrow::Cow::Borrowed("DOWNLOADING_BLUEPRINT"),
                3 => std::borrow::Cow::Borrowed("RUNNING_TF_INIT"),
                4 => std::borrow::Cow::Borrowed("RUNNING_TF_PLAN"),
                5 => std::borrow::Cow::Borrowed("RUNNING_TF_APPLY"),
                6 => std::borrow::Cow::Borrowed("RUNNING_TF_DESTROY"),
                7 => std::borrow::Cow::Borrowed("RUNNING_TF_VALIDATE"),
                8 => std::borrow::Cow::Borrowed("UNLOCKING_DEPLOYMENT"),
                9 => std::borrow::Cow::Borrowed("SUCCEEDED"),
                10 => std::borrow::Cow::Borrowed("FAILED"),
                11 => std::borrow::Cow::Borrowed("VALIDATING_REPOSITORY"),
                12 => std::borrow::Cow::Borrowed("RUNNING_QUOTA_VALIDATION"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "DEPLOYMENT_STEP_UNSPECIFIED" => {
                    std::option::Option::Some(Self::DEPLOYMENT_STEP_UNSPECIFIED)
                }
                "PREPARING_STORAGE_BUCKET" => {
                    std::option::Option::Some(Self::PREPARING_STORAGE_BUCKET)
                }
                "DOWNLOADING_BLUEPRINT" => std::option::Option::Some(Self::DOWNLOADING_BLUEPRINT),
                "RUNNING_TF_INIT" => std::option::Option::Some(Self::RUNNING_TF_INIT),
                "RUNNING_TF_PLAN" => std::option::Option::Some(Self::RUNNING_TF_PLAN),
                "RUNNING_TF_APPLY" => std::option::Option::Some(Self::RUNNING_TF_APPLY),
                "RUNNING_TF_DESTROY" => std::option::Option::Some(Self::RUNNING_TF_DESTROY),
                "RUNNING_TF_VALIDATE" => std::option::Option::Some(Self::RUNNING_TF_VALIDATE),
                "UNLOCKING_DEPLOYMENT" => std::option::Option::Some(Self::UNLOCKING_DEPLOYMENT),
                "SUCCEEDED" => std::option::Option::Some(Self::SUCCEEDED),
                "FAILED" => std::option::Option::Some(Self::FAILED),
                "VALIDATING_REPOSITORY" => std::option::Option::Some(Self::VALIDATING_REPOSITORY),
                "RUNNING_QUOTA_VALIDATION" => {
                    std::option::Option::Some(Self::RUNNING_QUOTA_VALIDATION)
                }
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for DeploymentStep {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for DeploymentStep {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Resource represents a Google Cloud Platform resource actuated by IM.
/// Resources are child resources of Revisions.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Resource {
    /// Output only. Resource name.
    /// Format:
    /// `projects/{project}/locations/{location}/deployments/{deployment}/revisions/{revision}/resources/{resource}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Terraform-specific info if this resource was created using
    /// Terraform.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub terraform_info: std::option::Option<crate::model::ResourceTerraformInfo>,

    /// Output only. Map of Cloud Asset Inventory (CAI) type to CAI info (e.g. CAI
    /// ID). CAI type format follows
    /// <https://cloud.google.com/asset-inventory/docs/supported-asset-types>
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub cai_assets: std::collections::HashMap<std::string::String, crate::model::ResourceCAIInfo>,

    /// Output only. Intent of the resource.
    pub intent: crate::model::resource::Intent,

    /// Output only. Current state of the resource.
    pub state: crate::model::resource::State,
}

impl Resource {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Resource::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [terraform_info][crate::model::Resource::terraform_info].
    pub fn set_terraform_info<
        T: std::convert::Into<std::option::Option<crate::model::ResourceTerraformInfo>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.terraform_info = v.into();
        self
    }

    /// Sets the value of [intent][crate::model::Resource::intent].
    pub fn set_intent<T: std::convert::Into<crate::model::resource::Intent>>(
        mut self,
        v: T,
    ) -> Self {
        self.intent = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Resource::state].
    pub fn set_state<T: std::convert::Into<crate::model::resource::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [cai_assets][crate::model::Resource::cai_assets].
    pub fn set_cai_assets<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<crate::model::ResourceCAIInfo>,
    {
        use std::iter::Iterator;
        self.cai_assets = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Resource {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.Resource"
    }
}

/// Defines additional types related to [Resource].
pub mod resource {
    #[allow(unused_imports)]
    use super::*;

    /// Possible intent of the resource.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Intent(i32);

    impl Intent {
        /// The default value. This value is used if the intent is omitted.
        pub const INTENT_UNSPECIFIED: Intent = Intent::new(0);

        /// Infra Manager will create this Resource.
        pub const CREATE: Intent = Intent::new(1);

        /// Infra Manager will update this Resource.
        pub const UPDATE: Intent = Intent::new(2);

        /// Infra Manager will delete this Resource.
        pub const DELETE: Intent = Intent::new(3);

        /// Infra Manager will destroy and recreate this Resource.
        pub const RECREATE: Intent = Intent::new(4);

        /// Infra Manager will leave this Resource untouched.
        pub const UNCHANGED: Intent = Intent::new(5);

        /// Creates a new Intent instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("INTENT_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATE"),
                2 => std::borrow::Cow::Borrowed("UPDATE"),
                3 => std::borrow::Cow::Borrowed("DELETE"),
                4 => std::borrow::Cow::Borrowed("RECREATE"),
                5 => std::borrow::Cow::Borrowed("UNCHANGED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "INTENT_UNSPECIFIED" => std::option::Option::Some(Self::INTENT_UNSPECIFIED),
                "CREATE" => std::option::Option::Some(Self::CREATE),
                "UPDATE" => std::option::Option::Some(Self::UPDATE),
                "DELETE" => std::option::Option::Some(Self::DELETE),
                "RECREATE" => std::option::Option::Some(Self::RECREATE),
                "UNCHANGED" => std::option::Option::Some(Self::UNCHANGED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for Intent {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for Intent {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Possible states of a resource.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// The default value. This value is used if the state is omitted.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// Resource has been planned for reconcile.
        pub const PLANNED: State = State::new(1);

        /// Resource is actively reconciling into the intended state.
        pub const IN_PROGRESS: State = State::new(2);

        /// Resource has reconciled to intended state.
        pub const RECONCILED: State = State::new(3);

        /// Resource failed to reconcile.
        pub const FAILED: State = State::new(4);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("PLANNED"),
                2 => std::borrow::Cow::Borrowed("IN_PROGRESS"),
                3 => std::borrow::Cow::Borrowed("RECONCILED"),
                4 => std::borrow::Cow::Borrowed("FAILED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "PLANNED" => std::option::Option::Some(Self::PLANNED),
                "IN_PROGRESS" => std::option::Option::Some(Self::IN_PROGRESS),
                "RECONCILED" => std::option::Option::Some(Self::RECONCILED),
                "FAILED" => std::option::Option::Some(Self::FAILED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Terraform info of a Resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ResourceTerraformInfo {
    /// TF resource address that uniquely identifies this resource within this
    /// deployment.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub address: std::string::String,

    /// TF resource type
    #[serde(rename = "type")]
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub r#type: std::string::String,

    /// ID attribute of the TF resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub id: std::string::String,
}

impl ResourceTerraformInfo {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [address][crate::model::ResourceTerraformInfo::address].
    pub fn set_address<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.address = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::ResourceTerraformInfo::type].
    pub fn set_type<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [id][crate::model::ResourceTerraformInfo::id].
    pub fn set_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.id = v.into();
        self
    }
}

impl wkt::message::Message for ResourceTerraformInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ResourceTerraformInfo"
    }
}

/// CAI info of a Resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ResourceCAIInfo {
    /// CAI resource name in the format following
    /// <https://cloud.google.com/apis/design/resource_names#full_resource_name>
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub full_resource_name: std::string::String,
}

impl ResourceCAIInfo {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [full_resource_name][crate::model::ResourceCAIInfo::full_resource_name].
    pub fn set_full_resource_name<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.full_resource_name = v.into();
        self
    }
}

impl wkt::message::Message for ResourceCAIInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ResourceCAIInfo"
    }
}

/// A request to get a Resource from a 'GetResource' call.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetResourceRequest {
    /// Required. The name of the Resource in the format:
    /// 'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}/resource/{resource}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetResourceRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetResourceRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetResourceRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.GetResourceRequest"
    }
}

/// A request to list Resources passed to a 'ListResources' call.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListResourcesRequest {
    /// Required. The parent in whose context the Resources are listed. The parent
    /// value is in the format:
    /// 'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// When requesting a page of resources, 'page_size' specifies number of
    /// resources to return. If unspecified, at most 500 will be returned. The
    /// maximum value is 1000.
    pub page_size: i32,

    /// Token returned by previous call to 'ListResources' which specifies the
    /// position in the list from where to continue listing the resources.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Lists the Resources that match the filter expression. A filter
    /// expression filters the resources listed in the response. The expression
    /// must be of the form '{field} {operator} {value}' where operators: '<', '>',
    /// '<=',
    /// '>=',
    /// '!=', '=', ':' are supported (colon ':' represents a HAS operator which is
    /// roughly synonymous with equality). {field} can refer to a proto or JSON
    /// field, or a synthetic field. Field names can be camelCase or snake_case.
    ///
    /// Examples:
    ///
    /// - Filter by name:
    ///   name =
    ///   "projects/foo/locations/us-central1/deployments/dep/revisions/bar/resources/baz
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Field to use to sort the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListResourcesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListResourcesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListResourcesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListResourcesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListResourcesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListResourcesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListResourcesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ListResourcesRequest"
    }
}

/// A response to a 'ListResources' call. Contains a list of Resources.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListResourcesResponse {
    /// List of [Resources][google.cloud.config.v1.Resource].
    ///
    /// [google.cloud.config.v1.Resource]: crate::model::Resource
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub resources: std::vec::Vec<crate::model::Resource>,

    /// A token to request the next page of resources from the 'ListResources'
    /// method. The value of an empty string means that there are no more resources
    /// to return.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListResourcesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListResourcesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [resources][crate::model::ListResourcesResponse::resources].
    pub fn set_resources<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Resource>,
    {
        use std::iter::Iterator;
        self.resources = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListResourcesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListResourcesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ListResourcesResponse"
    }
}

impl gax::paginator::PageableResponse for ListResourcesResponse {
    type PageItem = crate::model::Resource;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.resources
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Contains info about a Terraform state file
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Statefile {
    /// Output only. Cloud Storage signed URI used for downloading or uploading the
    /// state file.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub signed_uri: std::string::String,
}

impl Statefile {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [signed_uri][crate::model::Statefile::signed_uri].
    pub fn set_signed_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.signed_uri = v.into();
        self
    }
}

impl wkt::message::Message for Statefile {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.Statefile"
    }
}

/// A request to export a state file passed to a 'ExportDeploymentStatefile'
/// call.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportDeploymentStatefileRequest {
    /// Required. The parent in whose context the statefile is listed. The parent
    /// value is in the format:
    /// 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. If this flag is set to true, the exported deployment state file
    /// will be the draft state. This will enable the draft file to be validated
    /// before copying it over to the working state on unlock.
    pub draft: bool,
}

impl ExportDeploymentStatefileRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ExportDeploymentStatefileRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [draft][crate::model::ExportDeploymentStatefileRequest::draft].
    pub fn set_draft<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.draft = v.into();
        self
    }
}

impl wkt::message::Message for ExportDeploymentStatefileRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ExportDeploymentStatefileRequest"
    }
}

/// A request to export a state file passed to a 'ExportRevisionStatefile'
/// call.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportRevisionStatefileRequest {
    /// Required. The parent in whose context the statefile is listed. The parent
    /// value is in the format:
    /// 'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,
}

impl ExportRevisionStatefileRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ExportRevisionStatefileRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }
}

impl wkt::message::Message for ExportRevisionStatefileRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ExportRevisionStatefileRequest"
    }
}

/// A request to import a state file passed to a 'ImportStatefile' call.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ImportStatefileRequest {
    /// Required. The parent in whose context the statefile is listed. The parent
    /// value is in the format:
    /// 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Lock ID of the lock file to verify that the user who is importing
    /// the state file previously locked the Deployment.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub lock_id: i64,

    /// Optional.
    pub skip_draft: bool,
}

impl ImportStatefileRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ImportStatefileRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [lock_id][crate::model::ImportStatefileRequest::lock_id].
    pub fn set_lock_id<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.lock_id = v.into();
        self
    }

    /// Sets the value of [skip_draft][crate::model::ImportStatefileRequest::skip_draft].
    pub fn set_skip_draft<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.skip_draft = v.into();
        self
    }
}

impl wkt::message::Message for ImportStatefileRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ImportStatefileRequest"
    }
}

/// A request to delete a state file passed to a 'DeleteStatefile' call.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteStatefileRequest {
    /// Required. The name of the deployment in the format:
    /// 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Lock ID of the lock file to verify that the user who is deleting
    /// the state file previously locked the Deployment.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub lock_id: i64,
}

impl DeleteStatefileRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteStatefileRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [lock_id][crate::model::DeleteStatefileRequest::lock_id].
    pub fn set_lock_id<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.lock_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteStatefileRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.DeleteStatefileRequest"
    }
}

/// A request to lock a deployment passed to a 'LockDeployment' call.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LockDeploymentRequest {
    /// Required. The name of the deployment in the format:
    /// 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl LockDeploymentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::LockDeploymentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for LockDeploymentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.LockDeploymentRequest"
    }
}

/// A request to unlock a state file passed to a 'UnlockDeployment' call.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UnlockDeploymentRequest {
    /// Required. The name of the deployment in the format:
    /// 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. Lock ID of the lock file to be unlocked.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub lock_id: i64,
}

impl UnlockDeploymentRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::UnlockDeploymentRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [lock_id][crate::model::UnlockDeploymentRequest::lock_id].
    pub fn set_lock_id<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.lock_id = v.into();
        self
    }
}

impl wkt::message::Message for UnlockDeploymentRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.UnlockDeploymentRequest"
    }
}

/// A request to get a state file lock info passed to a 'ExportLockInfo' call.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportLockInfoRequest {
    /// Required. The name of the deployment in the format:
    /// 'projects/{project_id}/locations/{location}/deployments/{deployment}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl ExportLockInfoRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ExportLockInfoRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for ExportLockInfoRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ExportLockInfoRequest"
    }
}

/// Details about the lock which locked the deployment.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LockInfo {
    /// Unique ID for the lock to be overridden with generation ID in the backend.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub lock_id: i64,

    /// Terraform operation, provided by the caller.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub operation: std::string::String,

    /// Extra information to store with the lock, provided by the caller.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub info: std::string::String,

    /// user@hostname when available
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub who: std::string::String,

    /// Terraform version
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub version: std::string::String,

    /// Time that the lock was taken.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,
}

impl LockInfo {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [lock_id][crate::model::LockInfo::lock_id].
    pub fn set_lock_id<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.lock_id = v.into();
        self
    }

    /// Sets the value of [operation][crate::model::LockInfo::operation].
    pub fn set_operation<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.operation = v.into();
        self
    }

    /// Sets the value of [info][crate::model::LockInfo::info].
    pub fn set_info<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.info = v.into();
        self
    }

    /// Sets the value of [who][crate::model::LockInfo::who].
    pub fn set_who<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.who = v.into();
        self
    }

    /// Sets the value of [version][crate::model::LockInfo::version].
    pub fn set_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.version = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::LockInfo::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }
}

impl wkt::message::Message for LockInfo {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.LockInfo"
    }
}

/// A preview represents a set of actions Infra Manager would perform
/// to move the resources towards the desired state as specified in the
/// configuration.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Preview {
    /// Identifier. Resource name of the preview. Resource name can be user
    /// provided or server generated ID if unspecified. Format:
    /// `projects/{project}/locations/{location}/previews/{preview}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Time the preview was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Optional. User-defined labels for the preview.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Output only. Current state of the preview.
    pub state: crate::model::preview::State,

    /// Optional. Optional deployment reference. If specified, the preview will be
    /// performed using the provided deployment's current state and use any
    /// relevant fields from the deployment unless explicitly specified in the
    /// preview create request.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub deployment: std::string::String,

    /// Optional. Current mode of preview.
    pub preview_mode: crate::model::preview::PreviewMode,

    /// Required. User-specified Service Account (SA) credentials to be used when
    /// previewing resources.
    /// Format: `projects/{projectID}/serviceAccounts/{serviceAccount}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_account: std::string::String,

    /// Optional. User-defined location of Cloud Build logs, artifacts, and
    /// in Google Cloud Storage.
    /// Format: `gs://{bucket}/{folder}`
    /// A default bucket will be bootstrapped if the field is not set or empty
    /// Default Bucket Format: `gs://<project number>-<region>-blueprint-config`
    /// Constraints:
    ///
    /// - The bucket needs to be in the same project as the deployment
    /// - The path cannot be within the path of `gcs_source`
    ///   If omitted and deployment resource ref provided has artifacts_gcs_bucket
    ///   defined, that artifact bucket is used.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub artifacts_gcs_bucket: std::option::Option<std::string::String>,

    /// Optional. The user-specified Worker Pool resource in which the Cloud Build
    /// job will execute. Format
    /// projects/{project}/locations/{location}/workerPools/{workerPoolId} If this
    /// field is unspecified, the default Cloud Build worker pool will be used. If
    /// omitted and deployment resource ref provided has worker_pool defined, that
    /// worker pool is used.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub worker_pool: std::option::Option<std::string::String>,

    /// Output only. Code describing any errors that may have occurred.
    pub error_code: crate::model::preview::ErrorCode,

    /// Output only. Additional information regarding the current state.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub error_status: std::option::Option<rpc::model::Status>,

    /// Output only. Cloud Build instance UUID associated with this preview.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub build: std::string::String,

    /// Output only. Summary of errors encountered during Terraform preview.
    /// It has a size limit of 10, i.e. only top 10 errors will be summarized here.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub tf_errors: std::vec::Vec<crate::model::TerraformError>,

    /// Output only. Link to tf-error.ndjson file, which contains the full list of
    /// the errors encountered during a Terraform preview.
    /// Format: `gs://{bucket}/{object}`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub error_logs: std::string::String,

    /// Output only. Artifacts from preview.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub preview_artifacts: std::option::Option<crate::model::PreviewArtifacts>,

    /// Output only. Location of preview logs in `gs://{bucket}/{object}` format.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub logs: std::string::String,

    /// Output only. The current Terraform version set on the preview.
    /// It is in the format of "Major.Minor.Patch", for example, "1.3.10".
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub tf_version: std::string::String,

    /// Optional. The user-specified Terraform version constraint.
    /// Example: "=1.3.10".
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub tf_version_constraint: std::option::Option<std::string::String>,

    /// Optional. Arbitrary key-value metadata storage e.g. to help client tools
    /// identifiy preview during automation. See
    /// <https://google.aip.dev/148#annotations> for details on format and size
    /// limitations.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub annotations: std::collections::HashMap<std::string::String, std::string::String>,

    /// Blueprint to preview.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub blueprint: std::option::Option<crate::model::preview::Blueprint>,
}

impl Preview {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Preview::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Preview::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Preview::state].
    pub fn set_state<T: std::convert::Into<crate::model::preview::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [deployment][crate::model::Preview::deployment].
    pub fn set_deployment<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.deployment = v.into();
        self
    }

    /// Sets the value of [preview_mode][crate::model::Preview::preview_mode].
    pub fn set_preview_mode<T: std::convert::Into<crate::model::preview::PreviewMode>>(
        mut self,
        v: T,
    ) -> Self {
        self.preview_mode = v.into();
        self
    }

    /// Sets the value of [service_account][crate::model::Preview::service_account].
    pub fn set_service_account<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service_account = v.into();
        self
    }

    /// Sets the value of [artifacts_gcs_bucket][crate::model::Preview::artifacts_gcs_bucket].
    pub fn set_artifacts_gcs_bucket<
        T: std::convert::Into<std::option::Option<std::string::String>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.artifacts_gcs_bucket = v.into();
        self
    }

    /// Sets the value of [worker_pool][crate::model::Preview::worker_pool].
    pub fn set_worker_pool<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.worker_pool = v.into();
        self
    }

    /// Sets the value of [error_code][crate::model::Preview::error_code].
    pub fn set_error_code<T: std::convert::Into<crate::model::preview::ErrorCode>>(
        mut self,
        v: T,
    ) -> Self {
        self.error_code = v.into();
        self
    }

    /// Sets the value of [error_status][crate::model::Preview::error_status].
    pub fn set_error_status<T: std::convert::Into<std::option::Option<rpc::model::Status>>>(
        mut self,
        v: T,
    ) -> Self {
        self.error_status = v.into();
        self
    }

    /// Sets the value of [build][crate::model::Preview::build].
    pub fn set_build<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.build = v.into();
        self
    }

    /// Sets the value of [error_logs][crate::model::Preview::error_logs].
    pub fn set_error_logs<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.error_logs = v.into();
        self
    }

    /// Sets the value of [preview_artifacts][crate::model::Preview::preview_artifacts].
    pub fn set_preview_artifacts<
        T: std::convert::Into<std::option::Option<crate::model::PreviewArtifacts>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.preview_artifacts = v.into();
        self
    }

    /// Sets the value of [logs][crate::model::Preview::logs].
    pub fn set_logs<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.logs = v.into();
        self
    }

    /// Sets the value of [tf_version][crate::model::Preview::tf_version].
    pub fn set_tf_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.tf_version = v.into();
        self
    }

    /// Sets the value of [tf_version_constraint][crate::model::Preview::tf_version_constraint].
    pub fn set_tf_version_constraint<
        T: std::convert::Into<std::option::Option<std::string::String>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.tf_version_constraint = v.into();
        self
    }

    /// Sets the value of [tf_errors][crate::model::Preview::tf_errors].
    pub fn set_tf_errors<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TerraformError>,
    {
        use std::iter::Iterator;
        self.tf_errors = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::Preview::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of [annotations][crate::model::Preview::annotations].
    pub fn set_annotations<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.annotations = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of `blueprint`.
    pub fn set_blueprint<
        T: std::convert::Into<std::option::Option<crate::model::preview::Blueprint>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.blueprint = v.into();
        self
    }

    /// The value of [blueprint][crate::model::Preview::blueprint]
    /// if it holds a `TerraformBlueprint`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_terraform_blueprint(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::TerraformBlueprint>> {
        #[allow(unreachable_patterns)]
        self.blueprint.as_ref().and_then(|v| match v {
            crate::model::preview::Blueprint::TerraformBlueprint(v) => std::option::Option::Some(v),
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [blueprint][crate::model::Preview::blueprint]
    /// to hold a `TerraformBlueprint`.
    ///
    /// Note that all the setters affecting `blueprint` are
    /// mutually exclusive.
    pub fn set_terraform_blueprint<
        T: std::convert::Into<std::boxed::Box<crate::model::TerraformBlueprint>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.blueprint = std::option::Option::Some(
            crate::model::preview::Blueprint::TerraformBlueprint(v.into()),
        );
        self
    }
}

impl wkt::message::Message for Preview {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.Preview"
    }
}

/// Defines additional types related to [Preview].
pub mod preview {
    #[allow(unused_imports)]
    use super::*;

    /// Possible states of a preview.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// The default value. This value is used if the state is unknown.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// The preview is being created.
        pub const CREATING: State = State::new(1);

        /// The preview has succeeded.
        pub const SUCCEEDED: State = State::new(2);

        /// The preview is being applied.
        pub const APPLYING: State = State::new(3);

        /// The preview is stale. A preview can become stale if a revision has been
        /// applied after this preview was created.
        pub const STALE: State = State::new(4);

        /// The preview is being deleted.
        pub const DELETING: State = State::new(5);

        /// The preview has encountered an unexpected error.
        pub const FAILED: State = State::new(6);

        /// The preview has been deleted.
        pub const DELETED: State = State::new(7);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CREATING"),
                2 => std::borrow::Cow::Borrowed("SUCCEEDED"),
                3 => std::borrow::Cow::Borrowed("APPLYING"),
                4 => std::borrow::Cow::Borrowed("STALE"),
                5 => std::borrow::Cow::Borrowed("DELETING"),
                6 => std::borrow::Cow::Borrowed("FAILED"),
                7 => std::borrow::Cow::Borrowed("DELETED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "SUCCEEDED" => std::option::Option::Some(Self::SUCCEEDED),
                "APPLYING" => std::option::Option::Some(Self::APPLYING),
                "STALE" => std::option::Option::Some(Self::STALE),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "FAILED" => std::option::Option::Some(Self::FAILED),
                "DELETED" => std::option::Option::Some(Self::DELETED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Preview mode provides options for customizing preview operations.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct PreviewMode(i32);

    impl PreviewMode {
        /// Unspecified policy, default mode will be used.
        pub const PREVIEW_MODE_UNSPECIFIED: PreviewMode = PreviewMode::new(0);

        /// DEFAULT mode generates an execution plan for reconciling current resource
        /// state into expected resource state.
        pub const DEFAULT: PreviewMode = PreviewMode::new(1);

        /// DELETE mode generates as execution plan for destroying current resources.
        pub const DELETE: PreviewMode = PreviewMode::new(2);

        /// Creates a new PreviewMode instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("PREVIEW_MODE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("DEFAULT"),
                2 => std::borrow::Cow::Borrowed("DELETE"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "PREVIEW_MODE_UNSPECIFIED" => {
                    std::option::Option::Some(Self::PREVIEW_MODE_UNSPECIFIED)
                }
                "DEFAULT" => std::option::Option::Some(Self::DEFAULT),
                "DELETE" => std::option::Option::Some(Self::DELETE),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for PreviewMode {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for PreviewMode {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Possible errors that can occur with previews.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct ErrorCode(i32);

    impl ErrorCode {
        /// No error code was specified.
        pub const ERROR_CODE_UNSPECIFIED: ErrorCode = ErrorCode::new(0);

        /// Cloud Build failed due to a permissions issue.
        pub const CLOUD_BUILD_PERMISSION_DENIED: ErrorCode = ErrorCode::new(1);

        /// Cloud Storage bucket failed to create due to a permissions issue.
        pub const BUCKET_CREATION_PERMISSION_DENIED: ErrorCode = ErrorCode::new(2);

        /// Cloud Storage bucket failed for a non-permissions-related issue.
        pub const BUCKET_CREATION_FAILED: ErrorCode = ErrorCode::new(3);

        /// Acquiring lock on provided deployment reference failed.
        pub const DEPLOYMENT_LOCK_ACQUIRE_FAILED: ErrorCode = ErrorCode::new(4);

        /// Preview encountered an error when trying to access Cloud Build API.
        pub const PREVIEW_BUILD_API_FAILED: ErrorCode = ErrorCode::new(5);

        /// Preview created a build but build failed and logs were generated.
        pub const PREVIEW_BUILD_RUN_FAILED: ErrorCode = ErrorCode::new(6);

        /// Creates a new ErrorCode instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("ERROR_CODE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("CLOUD_BUILD_PERMISSION_DENIED"),
                2 => std::borrow::Cow::Borrowed("BUCKET_CREATION_PERMISSION_DENIED"),
                3 => std::borrow::Cow::Borrowed("BUCKET_CREATION_FAILED"),
                4 => std::borrow::Cow::Borrowed("DEPLOYMENT_LOCK_ACQUIRE_FAILED"),
                5 => std::borrow::Cow::Borrowed("PREVIEW_BUILD_API_FAILED"),
                6 => std::borrow::Cow::Borrowed("PREVIEW_BUILD_RUN_FAILED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "ERROR_CODE_UNSPECIFIED" => std::option::Option::Some(Self::ERROR_CODE_UNSPECIFIED),
                "CLOUD_BUILD_PERMISSION_DENIED" => {
                    std::option::Option::Some(Self::CLOUD_BUILD_PERMISSION_DENIED)
                }
                "BUCKET_CREATION_PERMISSION_DENIED" => {
                    std::option::Option::Some(Self::BUCKET_CREATION_PERMISSION_DENIED)
                }
                "BUCKET_CREATION_FAILED" => std::option::Option::Some(Self::BUCKET_CREATION_FAILED),
                "DEPLOYMENT_LOCK_ACQUIRE_FAILED" => {
                    std::option::Option::Some(Self::DEPLOYMENT_LOCK_ACQUIRE_FAILED)
                }
                "PREVIEW_BUILD_API_FAILED" => {
                    std::option::Option::Some(Self::PREVIEW_BUILD_API_FAILED)
                }
                "PREVIEW_BUILD_RUN_FAILED" => {
                    std::option::Option::Some(Self::PREVIEW_BUILD_RUN_FAILED)
                }
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for ErrorCode {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for ErrorCode {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Blueprint to preview.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Blueprint {
        /// The terraform blueprint to preview.
        TerraformBlueprint(std::boxed::Box<crate::model::TerraformBlueprint>),
    }
}

/// Ephemeral metadata content describing the state of a preview operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PreviewOperationMetadata {
    /// The current step the preview operation is running.
    pub step: crate::model::preview_operation_metadata::PreviewStep,

    /// Artifacts from preview.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub preview_artifacts: std::option::Option<crate::model::PreviewArtifacts>,

    /// Output only. Location of preview logs in `gs://{bucket}/{object}` format.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub logs: std::string::String,

    /// Output only. Cloud Build instance UUID associated with this preview.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub build: std::string::String,
}

impl PreviewOperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [step][crate::model::PreviewOperationMetadata::step].
    pub fn set_step<
        T: std::convert::Into<crate::model::preview_operation_metadata::PreviewStep>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.step = v.into();
        self
    }

    /// Sets the value of [preview_artifacts][crate::model::PreviewOperationMetadata::preview_artifacts].
    pub fn set_preview_artifacts<
        T: std::convert::Into<std::option::Option<crate::model::PreviewArtifacts>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.preview_artifacts = v.into();
        self
    }

    /// Sets the value of [logs][crate::model::PreviewOperationMetadata::logs].
    pub fn set_logs<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.logs = v.into();
        self
    }

    /// Sets the value of [build][crate::model::PreviewOperationMetadata::build].
    pub fn set_build<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.build = v.into();
        self
    }
}

impl wkt::message::Message for PreviewOperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.PreviewOperationMetadata"
    }
}

/// Defines additional types related to [PreviewOperationMetadata].
pub mod preview_operation_metadata {
    #[allow(unused_imports)]
    use super::*;

    /// The possible steps a preview may be running.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct PreviewStep(i32);

    impl PreviewStep {
        /// Unspecified preview step.
        pub const PREVIEW_STEP_UNSPECIFIED: PreviewStep = PreviewStep::new(0);

        /// Infra Manager is creating a Google Cloud Storage bucket to store
        /// artifacts and metadata about the preview.
        pub const PREPARING_STORAGE_BUCKET: PreviewStep = PreviewStep::new(1);

        /// Downloading the blueprint onto the Google Cloud Storage bucket.
        pub const DOWNLOADING_BLUEPRINT: PreviewStep = PreviewStep::new(2);

        /// Initializing Terraform using `terraform init`.
        pub const RUNNING_TF_INIT: PreviewStep = PreviewStep::new(3);

        /// Running `terraform plan`.
        pub const RUNNING_TF_PLAN: PreviewStep = PreviewStep::new(4);

        /// Fetching a deployment.
        pub const FETCHING_DEPLOYMENT: PreviewStep = PreviewStep::new(5);

        /// Locking a deployment.
        pub const LOCKING_DEPLOYMENT: PreviewStep = PreviewStep::new(6);

        /// Unlocking a deployment.
        pub const UNLOCKING_DEPLOYMENT: PreviewStep = PreviewStep::new(7);

        /// Operation was successful.
        pub const SUCCEEDED: PreviewStep = PreviewStep::new(8);

        /// Operation failed.
        pub const FAILED: PreviewStep = PreviewStep::new(9);

        /// Validating the provided repository.
        pub const VALIDATING_REPOSITORY: PreviewStep = PreviewStep::new(10);

        /// Creates a new PreviewStep instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("PREVIEW_STEP_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("PREPARING_STORAGE_BUCKET"),
                2 => std::borrow::Cow::Borrowed("DOWNLOADING_BLUEPRINT"),
                3 => std::borrow::Cow::Borrowed("RUNNING_TF_INIT"),
                4 => std::borrow::Cow::Borrowed("RUNNING_TF_PLAN"),
                5 => std::borrow::Cow::Borrowed("FETCHING_DEPLOYMENT"),
                6 => std::borrow::Cow::Borrowed("LOCKING_DEPLOYMENT"),
                7 => std::borrow::Cow::Borrowed("UNLOCKING_DEPLOYMENT"),
                8 => std::borrow::Cow::Borrowed("SUCCEEDED"),
                9 => std::borrow::Cow::Borrowed("FAILED"),
                10 => std::borrow::Cow::Borrowed("VALIDATING_REPOSITORY"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "PREVIEW_STEP_UNSPECIFIED" => {
                    std::option::Option::Some(Self::PREVIEW_STEP_UNSPECIFIED)
                }
                "PREPARING_STORAGE_BUCKET" => {
                    std::option::Option::Some(Self::PREPARING_STORAGE_BUCKET)
                }
                "DOWNLOADING_BLUEPRINT" => std::option::Option::Some(Self::DOWNLOADING_BLUEPRINT),
                "RUNNING_TF_INIT" => std::option::Option::Some(Self::RUNNING_TF_INIT),
                "RUNNING_TF_PLAN" => std::option::Option::Some(Self::RUNNING_TF_PLAN),
                "FETCHING_DEPLOYMENT" => std::option::Option::Some(Self::FETCHING_DEPLOYMENT),
                "LOCKING_DEPLOYMENT" => std::option::Option::Some(Self::LOCKING_DEPLOYMENT),
                "UNLOCKING_DEPLOYMENT" => std::option::Option::Some(Self::UNLOCKING_DEPLOYMENT),
                "SUCCEEDED" => std::option::Option::Some(Self::SUCCEEDED),
                "FAILED" => std::option::Option::Some(Self::FAILED),
                "VALIDATING_REPOSITORY" => std::option::Option::Some(Self::VALIDATING_REPOSITORY),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for PreviewStep {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for PreviewStep {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Artifacts created by preview.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PreviewArtifacts {
    /// Output only. Location of a blueprint copy and other content in Google Cloud
    /// Storage. Format: `gs://{bucket}/{object}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub content: std::string::String,

    /// Output only. Location of artifacts in Google Cloud Storage.
    /// Format: `gs://{bucket}/{object}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub artifacts: std::string::String,
}

impl PreviewArtifacts {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [content][crate::model::PreviewArtifacts::content].
    pub fn set_content<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.content = v.into();
        self
    }

    /// Sets the value of [artifacts][crate::model::PreviewArtifacts::artifacts].
    pub fn set_artifacts<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.artifacts = v.into();
        self
    }
}

impl wkt::message::Message for PreviewArtifacts {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.PreviewArtifacts"
    }
}

/// A request to create a preview.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreatePreviewRequest {
    /// Required. The parent in whose context the Preview is created. The parent
    /// value is in the format: 'projects/{project_id}/locations/{location}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. The preview ID.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub preview_id: std::string::String,

    /// Required. [Preview][google.cloud.config.v1.Preview] resource to be created.
    ///
    /// [google.cloud.config.v1.Preview]: crate::model::Preview
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub preview: std::option::Option<crate::model::Preview>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl CreatePreviewRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreatePreviewRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [preview_id][crate::model::CreatePreviewRequest::preview_id].
    pub fn set_preview_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.preview_id = v.into();
        self
    }

    /// Sets the value of [preview][crate::model::CreatePreviewRequest::preview].
    pub fn set_preview<T: std::convert::Into<std::option::Option<crate::model::Preview>>>(
        mut self,
        v: T,
    ) -> Self {
        self.preview = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreatePreviewRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreatePreviewRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.CreatePreviewRequest"
    }
}

/// A request to get details about a preview.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetPreviewRequest {
    /// Required. The name of the preview. Format:
    /// 'projects/{project_id}/locations/{location}/previews/{preview}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetPreviewRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetPreviewRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetPreviewRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.GetPreviewRequest"
    }
}

/// A request to list all previews for a given project and location.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListPreviewsRequest {
    /// Required. The parent in whose context the Previews are listed. The parent
    /// value is in the format: 'projects/{project_id}/locations/{location}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. When requesting a page of resources, 'page_size' specifies number
    /// of resources to return. If unspecified, at most 500 will be returned. The
    /// maximum value is 1000.
    pub page_size: i32,

    /// Optional. Token returned by previous call to 'ListDeployments' which
    /// specifies the position in the list from where to continue listing the
    /// resources.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Lists the Deployments that match the filter expression. A filter
    /// expression filters the resources listed in the response. The expression
    /// must be of the form '{field} {operator} {value}' where operators: '<', '>',
    /// '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a HAS
    /// operator which is roughly synonymous with equality). {field} can refer to a
    /// proto or JSON field, or a synthetic field. Field names can be camelCase or
    /// snake_case.
    ///
    /// Examples:
    ///
    /// - Filter by name:
    ///   name = "projects/foo/locations/us-central1/deployments/bar
    ///
    /// - Filter by labels:
    ///
    ///   - Resources that have a key called 'foo'
    ///     labels.foo:*
    ///   - Resources that have a key called 'foo' whose value is 'bar'
    ///     labels.foo = bar
    /// - Filter by state:
    ///
    ///   - Deployments in CREATING state.
    ///     state=CREATING
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Field to use to sort the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListPreviewsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListPreviewsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListPreviewsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListPreviewsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListPreviewsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListPreviewsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListPreviewsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ListPreviewsRequest"
    }
}

/// A response to a `ListPreviews` call. Contains a list of Previews.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListPreviewsResponse {
    /// List of [Previews][google.cloud.config.v1.Preview].
    ///
    /// [google.cloud.config.v1.Preview]: crate::model::Preview
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub previews: std::vec::Vec<crate::model::Preview>,

    /// Token to be supplied to the next ListPreviews request via `page_token`
    /// to obtain the next set of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListPreviewsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListPreviewsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [previews][crate::model::ListPreviewsResponse::previews].
    pub fn set_previews<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Preview>,
    {
        use std::iter::Iterator;
        self.previews = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListPreviewsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListPreviewsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ListPreviewsResponse"
    }
}

impl gax::paginator::PageableResponse for ListPreviewsResponse {
    type PageItem = crate::model::Preview;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.previews
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// A request to delete a preview.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeletePreviewRequest {
    /// Required. The name of the Preview in the format:
    /// 'projects/{project_id}/locations/{location}/previews/{preview}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and the
    /// request times out. If you make the request again with the same request ID,
    /// the server can check if original operation with the same request ID was
    /// received, and if so, will ignore the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,
}

impl DeletePreviewRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeletePreviewRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeletePreviewRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeletePreviewRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.DeletePreviewRequest"
    }
}

/// A request to export preview results.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportPreviewResultRequest {
    /// Required. The preview whose results should be exported. The preview value
    /// is in the format:
    /// 'projects/{project_id}/locations/{location}/previews/{preview}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,
}

impl ExportPreviewResultRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ExportPreviewResultRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }
}

impl wkt::message::Message for ExportPreviewResultRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ExportPreviewResultRequest"
    }
}

/// A response to `ExportPreviewResult` call. Contains preview results.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ExportPreviewResultResponse {
    /// Output only. Signed URLs for accessing the plan files.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub result: std::option::Option<crate::model::PreviewResult>,
}

impl ExportPreviewResultResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [result][crate::model::ExportPreviewResultResponse::result].
    pub fn set_result<T: std::convert::Into<std::option::Option<crate::model::PreviewResult>>>(
        mut self,
        v: T,
    ) -> Self {
        self.result = v.into();
        self
    }
}

impl wkt::message::Message for ExportPreviewResultResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ExportPreviewResultResponse"
    }
}

/// Contains a signed Cloud Storage URLs.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PreviewResult {
    /// Output only. Plan binary signed URL
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub binary_signed_uri: std::string::String,

    /// Output only. Plan JSON signed URL
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub json_signed_uri: std::string::String,
}

impl PreviewResult {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [binary_signed_uri][crate::model::PreviewResult::binary_signed_uri].
    pub fn set_binary_signed_uri<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.binary_signed_uri = v.into();
        self
    }

    /// Sets the value of [json_signed_uri][crate::model::PreviewResult::json_signed_uri].
    pub fn set_json_signed_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.json_signed_uri = v.into();
        self
    }
}

impl wkt::message::Message for PreviewResult {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.PreviewResult"
    }
}

/// The request message for the GetTerraformVersion method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetTerraformVersionRequest {
    /// Required. The name of the TerraformVersion. Format:
    /// 'projects/{project_id}/locations/{location}/terraformVersions/{terraform_version}'
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,
}

impl GetTerraformVersionRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetTerraformVersionRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetTerraformVersionRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.GetTerraformVersionRequest"
    }
}

/// The request message for the ListTerraformVersions method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTerraformVersionsRequest {
    /// Required. The parent in whose context the TerraformVersions are listed. The
    /// parent value is in the format:
    /// 'projects/{project_id}/locations/{location}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. When requesting a page of resources, 'page_size' specifies number
    /// of resources to return. If unspecified, at most 500 will be returned. The
    /// maximum value is 1000.
    pub page_size: i32,

    /// Optional. Token returned by previous call to 'ListTerraformVersions' which
    /// specifies the position in the list from where to continue listing the
    /// resources.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. Lists the TerraformVersions that match the filter expression. A
    /// filter expression filters the resources listed in the response. The
    /// expression must be of the form '{field} {operator} {value}' where
    /// operators: '<', '>',
    /// '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a HAS
    /// operator which is roughly synonymous with equality). {field} can refer to a
    /// proto or JSON field, or a synthetic field. Field names can be camelCase or
    /// snake_case.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Field to use to sort the list.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,
}

impl ListTerraformVersionsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListTerraformVersionsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListTerraformVersionsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListTerraformVersionsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListTerraformVersionsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListTerraformVersionsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListTerraformVersionsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ListTerraformVersionsRequest"
    }
}

/// The response message for the `ListTerraformVersions` method.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListTerraformVersionsResponse {
    /// List of [TerraformVersion][google.cloud.config.v1.TerraformVersion]s.
    ///
    /// [google.cloud.config.v1.TerraformVersion]: crate::model::TerraformVersion
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub terraform_versions: std::vec::Vec<crate::model::TerraformVersion>,

    /// Token to be supplied to the next ListTerraformVersions request via
    /// `page_token` to obtain the next set of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Unreachable resources, if any.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,
}

impl ListTerraformVersionsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListTerraformVersionsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [terraform_versions][crate::model::ListTerraformVersionsResponse::terraform_versions].
    pub fn set_terraform_versions<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::TerraformVersion>,
    {
        use std::iter::Iterator;
        self.terraform_versions = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListTerraformVersionsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListTerraformVersionsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.ListTerraformVersionsResponse"
    }
}

impl gax::paginator::PageableResponse for ListTerraformVersionsResponse {
    type PageItem = crate::model::TerraformVersion;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.terraform_versions
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// A TerraformVersion represents the support state the corresponding
/// Terraform version.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct TerraformVersion {
    /// Identifier. The version name is in the format:
    /// 'projects/{project_id}/locations/{location}/terraformVersions/{terraform_version}'.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The state of the version, ACTIVE, DEPRECATED or OBSOLETE.
    pub state: crate::model::terraform_version::State,

    /// Output only. When the version is supported.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub support_time: std::option::Option<wkt::Timestamp>,

    /// Output only. When the version is deprecated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub deprecate_time: std::option::Option<wkt::Timestamp>,

    /// Output only. When the version is obsolete.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub obsolete_time: std::option::Option<wkt::Timestamp>,
}

impl TerraformVersion {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::TerraformVersion::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [state][crate::model::TerraformVersion::state].
    pub fn set_state<T: std::convert::Into<crate::model::terraform_version::State>>(
        mut self,
        v: T,
    ) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [support_time][crate::model::TerraformVersion::support_time].
    pub fn set_support_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.support_time = v.into();
        self
    }

    /// Sets the value of [deprecate_time][crate::model::TerraformVersion::deprecate_time].
    pub fn set_deprecate_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.deprecate_time = v.into();
        self
    }

    /// Sets the value of [obsolete_time][crate::model::TerraformVersion::obsolete_time].
    pub fn set_obsolete_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.obsolete_time = v.into();
        self
    }
}

impl wkt::message::Message for TerraformVersion {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.config.v1.TerraformVersion"
    }
}

/// Defines additional types related to [TerraformVersion].
pub mod terraform_version {
    #[allow(unused_imports)]
    use super::*;

    /// Possible states of a TerraformVersion.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// The default value. This value is used if the state is omitted.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// The version is actively supported.
        pub const ACTIVE: State = State::new(1);

        /// The version is deprecated.
        pub const DEPRECATED: State = State::new(2);

        /// The version is obsolete.
        pub const OBSOLETE: State = State::new(3);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("ACTIVE"),
                2 => std::borrow::Cow::Borrowed("DEPRECATED"),
                3 => std::borrow::Cow::Borrowed("OBSOLETE"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "ACTIVE" => std::option::Option::Some(Self::ACTIVE),
                "DEPRECATED" => std::option::Option::Some(Self::DEPRECATED),
                "OBSOLETE" => std::option::Option::Some(Self::OBSOLETE),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Enum values to control quota checks for resources in terraform
/// configuration files.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct QuotaValidation(i32);

impl QuotaValidation {
    /// The default value.
    /// QuotaValidation on terraform configuration files will be disabled in
    /// this case.
    pub const QUOTA_VALIDATION_UNSPECIFIED: QuotaValidation = QuotaValidation::new(0);

    /// Enable computing quotas for resources in terraform configuration files to
    /// get visibility on resources with insufficient quotas.
    pub const ENABLED: QuotaValidation = QuotaValidation::new(1);

    /// Enforce quota checks so deployment fails if there isn't sufficient quotas
    /// available to deploy resources in terraform configuration files.
    pub const ENFORCED: QuotaValidation = QuotaValidation::new(2);

    /// Creates a new QuotaValidation instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("QUOTA_VALIDATION_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("ENABLED"),
            2 => std::borrow::Cow::Borrowed("ENFORCED"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "QUOTA_VALIDATION_UNSPECIFIED" => {
                std::option::Option::Some(Self::QUOTA_VALIDATION_UNSPECIFIED)
            }
            "ENABLED" => std::option::Option::Some(Self::ENABLED),
            "ENFORCED" => std::option::Option::Some(Self::ENFORCED),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for QuotaValidation {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for QuotaValidation {
    fn default() -> Self {
        Self::new(0)
    }
}
