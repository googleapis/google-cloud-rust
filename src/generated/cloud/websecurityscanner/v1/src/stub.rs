// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::WebSecurityScanner].
///
/// Application developers may need to implement this trait to mock
/// `client::WebSecurityScanner`.  In other use-cases, application developers only
/// use `client::WebSecurityScanner` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait WebSecurityScanner: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::WebSecurityScanner::create_scan_config].
    fn create_scan_config(
        &self,
        _req: crate::model::CreateScanConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ScanConfig>> + Send {
        std::future::ready::<crate::Result<crate::model::ScanConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::WebSecurityScanner::delete_scan_config].
    fn delete_scan_config(
        &self,
        _req: crate::model::DeleteScanConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<()>> + Send {
        std::future::ready::<crate::Result<()>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::WebSecurityScanner::get_scan_config].
    fn get_scan_config(
        &self,
        _req: crate::model::GetScanConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ScanConfig>> + Send {
        std::future::ready::<crate::Result<crate::model::ScanConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::WebSecurityScanner::list_scan_configs].
    fn list_scan_configs(
        &self,
        _req: crate::model::ListScanConfigsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListScanConfigsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListScanConfigsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::WebSecurityScanner::update_scan_config].
    fn update_scan_config(
        &self,
        _req: crate::model::UpdateScanConfigRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ScanConfig>> + Send {
        std::future::ready::<crate::Result<crate::model::ScanConfig>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::WebSecurityScanner::start_scan_run].
    fn start_scan_run(
        &self,
        _req: crate::model::StartScanRunRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ScanRun>> + Send {
        std::future::ready::<crate::Result<crate::model::ScanRun>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::WebSecurityScanner::get_scan_run].
    fn get_scan_run(
        &self,
        _req: crate::model::GetScanRunRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ScanRun>> + Send {
        std::future::ready::<crate::Result<crate::model::ScanRun>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::WebSecurityScanner::list_scan_runs].
    fn list_scan_runs(
        &self,
        _req: crate::model::ListScanRunsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListScanRunsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListScanRunsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::WebSecurityScanner::stop_scan_run].
    fn stop_scan_run(
        &self,
        _req: crate::model::StopScanRunRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ScanRun>> + Send {
        std::future::ready::<crate::Result<crate::model::ScanRun>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::WebSecurityScanner::list_crawled_urls].
    fn list_crawled_urls(
        &self,
        _req: crate::model::ListCrawledUrlsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListCrawledUrlsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListCrawledUrlsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }

    /// Implements [super::client::WebSecurityScanner::get_finding].
    fn get_finding(
        &self,
        _req: crate::model::GetFindingRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Finding>> + Send {
        std::future::ready::<crate::Result<crate::model::Finding>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::WebSecurityScanner::list_findings].
    fn list_findings(
        &self,
        _req: crate::model::ListFindingsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListFindingsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListFindingsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::WebSecurityScanner::list_finding_type_stats].
    fn list_finding_type_stats(
        &self,
        _req: crate::model::ListFindingTypeStatsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListFindingTypeStatsResponse>>
    + Send {
        std::future::ready::<crate::Result<crate::model::ListFindingTypeStatsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }
}
