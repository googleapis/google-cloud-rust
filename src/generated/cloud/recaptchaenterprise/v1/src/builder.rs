// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

pub mod recaptcha_enterprise_service {
    use crate::Result;
    use std::sync::Arc;

    /// A builder for [RecaptchaEnterpriseService][super::super::client::RecaptchaEnterpriseService].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_recaptchaenterprise_v1::*;
    /// # use builder::recaptcha_enterprise_service::ClientBuilder;
    /// # use client::RecaptchaEnterpriseService;
    /// let builder : ClientBuilder = RecaptchaEnterpriseService::builder();
    /// let client = builder
    ///     .with_endpoint("https://recaptchaenterprise.googleapis.com")
    ///     .build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub type ClientBuilder =
        gax::client_builder::ClientBuilder<client::Factory, gaxi::options::Credentials>;

    pub(crate) mod client {
        use super::super::super::client::RecaptchaEnterpriseService;
        pub struct Factory;
        impl gax::client_builder::internal::ClientFactory for Factory {
            type Client = RecaptchaEnterpriseService;
            type Credentials = gaxi::options::Credentials;
            async fn build(self, config: gaxi::options::ClientConfig) -> gax::Result<Self::Client> {
                Self::Client::new(config).await
            }
        }
    }

    /// Common implementation for [super::super::client::RecaptchaEnterpriseService] request builders.
    #[derive(Clone, Debug)]
    pub(crate) struct RequestBuilder<R: std::default::Default> {
        stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        request: R,
        options: gax::options::RequestOptions,
    }

    impl<R> RequestBuilder<R>
    where
        R: std::default::Default,
    {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self {
                stub,
                request: R::default(),
                options: gax::options::RequestOptions::default(),
            }
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::create_assessment call.
    #[derive(Clone, Debug)]
    pub struct CreateAssessment(RequestBuilder<crate::model::CreateAssessmentRequest>);

    impl CreateAssessment {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateAssessmentRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Assessment> {
            (*self.0.stub)
                .create_assessment(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [parent][crate::model::CreateAssessmentRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [assessment][crate::model::CreateAssessmentRequest::assessment].
        pub fn set_assessment<T: Into<std::option::Option<crate::model::Assessment>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.assessment = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for CreateAssessment {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::annotate_assessment call.
    #[derive(Clone, Debug)]
    pub struct AnnotateAssessment(RequestBuilder<crate::model::AnnotateAssessmentRequest>);

    impl AnnotateAssessment {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::AnnotateAssessmentRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::AnnotateAssessmentResponse> {
            (*self.0.stub)
                .annotate_assessment(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::AnnotateAssessmentRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [annotation][crate::model::AnnotateAssessmentRequest::annotation].
        pub fn set_annotation<T: Into<crate::model::annotate_assessment_request::Annotation>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.annotation = v.into();
            self
        }

        /// Sets the value of [account_id][crate::model::AnnotateAssessmentRequest::account_id].
        pub fn set_account_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.account_id = v.into();
            self
        }

        /// Sets the value of [hashed_account_id][crate::model::AnnotateAssessmentRequest::hashed_account_id].
        pub fn set_hashed_account_id<T: Into<::bytes::Bytes>>(mut self, v: T) -> Self {
            self.0.request.hashed_account_id = v.into();
            self
        }

        /// Sets the value of [transaction_event][crate::model::AnnotateAssessmentRequest::transaction_event].
        pub fn set_transaction_event<
            T: Into<std::option::Option<crate::model::TransactionEvent>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.transaction_event = v.into();
            self
        }

        /// Sets the value of [reasons][crate::model::AnnotateAssessmentRequest::reasons].
        pub fn set_reasons<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<crate::model::annotate_assessment_request::Reason>,
        {
            use std::iter::Iterator;
            self.0.request.reasons = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for AnnotateAssessment {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::create_key call.
    #[derive(Clone, Debug)]
    pub struct CreateKey(RequestBuilder<crate::model::CreateKeyRequest>);

    impl CreateKey {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateKeyRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Key> {
            (*self.0.stub)
                .create_key(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [parent][crate::model::CreateKeyRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [key][crate::model::CreateKeyRequest::key].
        pub fn set_key<T: Into<std::option::Option<crate::model::Key>>>(mut self, v: T) -> Self {
            self.0.request.key = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for CreateKey {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::list_keys call.
    #[derive(Clone, Debug)]
    pub struct ListKeys(RequestBuilder<crate::model::ListKeysRequest>);

    impl ListKeys {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListKeysRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListKeysResponse> {
            (*self.0.stub)
                .list_keys(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<crate::model::ListKeysResponse, gax::error::Error> {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListKeysRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListKeysRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListKeysRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for ListKeys {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::retrieve_legacy_secret_key call.
    #[derive(Clone, Debug)]
    pub struct RetrieveLegacySecretKey(
        RequestBuilder<crate::model::RetrieveLegacySecretKeyRequest>,
    );

    impl RetrieveLegacySecretKey {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::RetrieveLegacySecretKeyRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::RetrieveLegacySecretKeyResponse> {
            (*self.0.stub)
                .retrieve_legacy_secret_key(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [key][crate::model::RetrieveLegacySecretKeyRequest::key].
        pub fn set_key<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.key = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for RetrieveLegacySecretKey {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::get_key call.
    #[derive(Clone, Debug)]
    pub struct GetKey(RequestBuilder<crate::model::GetKeyRequest>);

    impl GetKey {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetKeyRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Key> {
            (*self.0.stub).get_key(self.0.request, self.0.options).await
        }

        /// Sets the value of [name][crate::model::GetKeyRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for GetKey {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::update_key call.
    #[derive(Clone, Debug)]
    pub struct UpdateKey(RequestBuilder<crate::model::UpdateKeyRequest>);

    impl UpdateKey {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateKeyRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Key> {
            (*self.0.stub)
                .update_key(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [key][crate::model::UpdateKeyRequest::key].
        pub fn set_key<T: Into<std::option::Option<crate::model::Key>>>(mut self, v: T) -> Self {
            self.0.request.key = v.into();
            self
        }

        /// Sets the value of [update_mask][crate::model::UpdateKeyRequest::update_mask].
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update_mask = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for UpdateKey {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::delete_key call.
    #[derive(Clone, Debug)]
    pub struct DeleteKey(RequestBuilder<crate::model::DeleteKeyRequest>);

    impl DeleteKey {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteKeyRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<()> {
            (*self.0.stub)
                .delete_key(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::DeleteKeyRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for DeleteKey {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::migrate_key call.
    #[derive(Clone, Debug)]
    pub struct MigrateKey(RequestBuilder<crate::model::MigrateKeyRequest>);

    impl MigrateKey {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::MigrateKeyRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Key> {
            (*self.0.stub)
                .migrate_key(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::MigrateKeyRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [skip_billing_check][crate::model::MigrateKeyRequest::skip_billing_check].
        pub fn set_skip_billing_check<T: Into<bool>>(mut self, v: T) -> Self {
            self.0.request.skip_billing_check = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for MigrateKey {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::add_ip_override call.
    #[derive(Clone, Debug)]
    pub struct AddIpOverride(RequestBuilder<crate::model::AddIpOverrideRequest>);

    impl AddIpOverride {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::AddIpOverrideRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::AddIpOverrideResponse> {
            (*self.0.stub)
                .add_ip_override(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::AddIpOverrideRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [ip_override_data][crate::model::AddIpOverrideRequest::ip_override_data].
        pub fn set_ip_override_data<T: Into<std::option::Option<crate::model::IpOverrideData>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.ip_override_data = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for AddIpOverride {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::remove_ip_override call.
    #[derive(Clone, Debug)]
    pub struct RemoveIpOverride(RequestBuilder<crate::model::RemoveIpOverrideRequest>);

    impl RemoveIpOverride {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::RemoveIpOverrideRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::RemoveIpOverrideResponse> {
            (*self.0.stub)
                .remove_ip_override(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::RemoveIpOverrideRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }

        /// Sets the value of [ip_override_data][crate::model::RemoveIpOverrideRequest::ip_override_data].
        pub fn set_ip_override_data<T: Into<std::option::Option<crate::model::IpOverrideData>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.ip_override_data = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for RemoveIpOverride {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::list_ip_overrides call.
    #[derive(Clone, Debug)]
    pub struct ListIpOverrides(RequestBuilder<crate::model::ListIpOverridesRequest>);

    impl ListIpOverrides {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListIpOverridesRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListIpOverridesResponse> {
            (*self.0.stub)
                .list_ip_overrides(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<crate::model::ListIpOverridesResponse, gax::error::Error>
        {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListIpOverridesRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListIpOverridesRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListIpOverridesRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for ListIpOverrides {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::get_metrics call.
    #[derive(Clone, Debug)]
    pub struct GetMetrics(RequestBuilder<crate::model::GetMetricsRequest>);

    impl GetMetrics {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetMetricsRequest>>(mut self, v: V) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::Metrics> {
            (*self.0.stub)
                .get_metrics(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::GetMetricsRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for GetMetrics {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::create_firewall_policy call.
    #[derive(Clone, Debug)]
    pub struct CreateFirewallPolicy(RequestBuilder<crate::model::CreateFirewallPolicyRequest>);

    impl CreateFirewallPolicy {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::CreateFirewallPolicyRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::FirewallPolicy> {
            (*self.0.stub)
                .create_firewall_policy(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [parent][crate::model::CreateFirewallPolicyRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [firewall_policy][crate::model::CreateFirewallPolicyRequest::firewall_policy].
        pub fn set_firewall_policy<T: Into<std::option::Option<crate::model::FirewallPolicy>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.firewall_policy = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for CreateFirewallPolicy {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::list_firewall_policies call.
    #[derive(Clone, Debug)]
    pub struct ListFirewallPolicies(RequestBuilder<crate::model::ListFirewallPoliciesRequest>);

    impl ListFirewallPolicies {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListFirewallPoliciesRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListFirewallPoliciesResponse> {
            (*self.0.stub)
                .list_firewall_policies(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<crate::model::ListFirewallPoliciesResponse, gax::error::Error>
        {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListFirewallPoliciesRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListFirewallPoliciesRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListFirewallPoliciesRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for ListFirewallPolicies {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::get_firewall_policy call.
    #[derive(Clone, Debug)]
    pub struct GetFirewallPolicy(RequestBuilder<crate::model::GetFirewallPolicyRequest>);

    impl GetFirewallPolicy {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::GetFirewallPolicyRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::FirewallPolicy> {
            (*self.0.stub)
                .get_firewall_policy(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::GetFirewallPolicyRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for GetFirewallPolicy {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::update_firewall_policy call.
    #[derive(Clone, Debug)]
    pub struct UpdateFirewallPolicy(RequestBuilder<crate::model::UpdateFirewallPolicyRequest>);

    impl UpdateFirewallPolicy {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::UpdateFirewallPolicyRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::FirewallPolicy> {
            (*self.0.stub)
                .update_firewall_policy(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [firewall_policy][crate::model::UpdateFirewallPolicyRequest::firewall_policy].
        pub fn set_firewall_policy<T: Into<std::option::Option<crate::model::FirewallPolicy>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.firewall_policy = v.into();
            self
        }

        /// Sets the value of [update_mask][crate::model::UpdateFirewallPolicyRequest::update_mask].
        pub fn set_update_mask<T: Into<std::option::Option<wkt::FieldMask>>>(
            mut self,
            v: T,
        ) -> Self {
            self.0.request.update_mask = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for UpdateFirewallPolicy {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::delete_firewall_policy call.
    #[derive(Clone, Debug)]
    pub struct DeleteFirewallPolicy(RequestBuilder<crate::model::DeleteFirewallPolicyRequest>);

    impl DeleteFirewallPolicy {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::DeleteFirewallPolicyRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<()> {
            (*self.0.stub)
                .delete_firewall_policy(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [name][crate::model::DeleteFirewallPolicyRequest::name].
        pub fn set_name<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.name = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for DeleteFirewallPolicy {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::reorder_firewall_policies call.
    #[derive(Clone, Debug)]
    pub struct ReorderFirewallPolicies(
        RequestBuilder<crate::model::ReorderFirewallPoliciesRequest>,
    );

    impl ReorderFirewallPolicies {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ReorderFirewallPoliciesRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ReorderFirewallPoliciesResponse> {
            (*self.0.stub)
                .reorder_firewall_policies(self.0.request, self.0.options)
                .await
        }

        /// Sets the value of [parent][crate::model::ReorderFirewallPoliciesRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [names][crate::model::ReorderFirewallPoliciesRequest::names].
        pub fn set_names<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.0.request.names = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for ReorderFirewallPolicies {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::list_related_account_groups call.
    #[derive(Clone, Debug)]
    pub struct ListRelatedAccountGroups(
        RequestBuilder<crate::model::ListRelatedAccountGroupsRequest>,
    );

    impl ListRelatedAccountGroups {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListRelatedAccountGroupsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(self) -> Result<crate::model::ListRelatedAccountGroupsResponse> {
            (*self.0.stub)
                .list_related_account_groups(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<
            crate::model::ListRelatedAccountGroupsResponse,
            gax::error::Error,
        > {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListRelatedAccountGroupsRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListRelatedAccountGroupsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListRelatedAccountGroupsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for ListRelatedAccountGroups {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::list_related_account_group_memberships call.
    #[derive(Clone, Debug)]
    pub struct ListRelatedAccountGroupMemberships(
        RequestBuilder<crate::model::ListRelatedAccountGroupMembershipsRequest>,
    );

    impl ListRelatedAccountGroupMemberships {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::ListRelatedAccountGroupMembershipsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(
            self,
        ) -> Result<crate::model::ListRelatedAccountGroupMembershipsResponse> {
            (*self.0.stub)
                .list_related_account_group_memberships(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<
            crate::model::ListRelatedAccountGroupMembershipsResponse,
            gax::error::Error,
        > {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [parent][crate::model::ListRelatedAccountGroupMembershipsRequest::parent].
        pub fn set_parent<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.parent = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::ListRelatedAccountGroupMembershipsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::ListRelatedAccountGroupMembershipsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for ListRelatedAccountGroupMemberships {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }

    /// The request builder for a RecaptchaEnterpriseService::search_related_account_group_memberships call.
    #[derive(Clone, Debug)]
    pub struct SearchRelatedAccountGroupMemberships(
        RequestBuilder<crate::model::SearchRelatedAccountGroupMembershipsRequest>,
    );

    impl SearchRelatedAccountGroupMemberships {
        pub(crate) fn new(
            stub: Arc<dyn super::super::stub::dynamic::RecaptchaEnterpriseService>,
        ) -> Self {
            Self(RequestBuilder::new(stub))
        }

        /// Sets the full request, replacing any prior values.
        pub fn with_request<V: Into<crate::model::SearchRelatedAccountGroupMembershipsRequest>>(
            mut self,
            v: V,
        ) -> Self {
            self.0.request = v.into();
            self
        }

        /// Sets all the options, replacing any prior values.
        pub fn with_options<V: Into<gax::options::RequestOptions>>(mut self, v: V) -> Self {
            self.0.options = v.into();
            self
        }

        /// Sends the request.
        pub async fn send(
            self,
        ) -> Result<crate::model::SearchRelatedAccountGroupMembershipsResponse> {
            (*self.0.stub)
                .search_related_account_group_memberships(self.0.request, self.0.options)
                .await
        }

        /// Streams the responses back.
        pub async fn paginator(
            self,
        ) -> gax::paginator::Paginator<
            crate::model::SearchRelatedAccountGroupMembershipsResponse,
            gax::error::Error,
        > {
            use std::clone::Clone;
            let token = self.0.request.page_token.clone();
            let execute = move |token: String| {
                let mut builder = self.clone();
                builder.0.request = builder.0.request.set_page_token(token);
                builder.send()
            };
            gax::paginator::Paginator::new(token, execute)
        }

        /// Sets the value of [project][crate::model::SearchRelatedAccountGroupMembershipsRequest::project].
        pub fn set_project<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.project = v.into();
            self
        }

        /// Sets the value of [account_id][crate::model::SearchRelatedAccountGroupMembershipsRequest::account_id].
        pub fn set_account_id<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.account_id = v.into();
            self
        }

        /// Sets the value of [hashed_account_id][crate::model::SearchRelatedAccountGroupMembershipsRequest::hashed_account_id].
        pub fn set_hashed_account_id<T: Into<::bytes::Bytes>>(mut self, v: T) -> Self {
            self.0.request.hashed_account_id = v.into();
            self
        }

        /// Sets the value of [page_size][crate::model::SearchRelatedAccountGroupMembershipsRequest::page_size].
        pub fn set_page_size<T: Into<i32>>(mut self, v: T) -> Self {
            self.0.request.page_size = v.into();
            self
        }

        /// Sets the value of [page_token][crate::model::SearchRelatedAccountGroupMembershipsRequest::page_token].
        pub fn set_page_token<T: Into<std::string::String>>(mut self, v: T) -> Self {
            self.0.request.page_token = v.into();
            self
        }
    }

    #[doc(hidden)]
    impl gax::options::internal::RequestBuilder for SearchRelatedAccountGroupMemberships {
        fn request_options(&mut self) -> &mut gax::options::RequestOptions {
            &mut self.0.options
        }
    }
}
