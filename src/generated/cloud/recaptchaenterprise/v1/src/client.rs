// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the reCAPTCHA Enterprise API.
///
/// # Service Description
///
/// Service to determine the likelihood an event is legitimate.
///
/// # Configuration
///
/// `RecaptchaEnterpriseService` has various configuration parameters, the defaults should
/// work with most applications.
///
/// # Pooling and Cloning
///
/// `RecaptchaEnterpriseService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `RecaptchaEnterpriseService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct RecaptchaEnterpriseService {
    inner: Arc<dyn crate::stubs::dynamic::RecaptchaEnterpriseService>,
}

impl RecaptchaEnterpriseService {
    /// Creates a new client with the default configuration.
    pub async fn new() -> Result<Self> {
        Self::new_with_config(gax::options::ClientConfig::default()).await
    }

    /// Creates a new client with the specified configuration.
    pub async fn new_with_config(conf: gax::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(conf).await?;
        Ok(Self { inner })
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is when mocking the
    /// client.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: crate::stubs::RecaptchaEnterpriseService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn crate::stubs::dynamic::RecaptchaEnterpriseService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::RecaptchaEnterpriseService> {
        crate::transport::RecaptchaEnterpriseService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl crate::stubs::RecaptchaEnterpriseService> {
        Self::build_transport(conf)
            .await
            .map(crate::tracing::RecaptchaEnterpriseService::new)
    }

    /// Creates an Assessment of the likelihood an event is legitimate.
    pub fn create_assessment(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::CreateAssessment {
        crate::builders::recaptcha_enterprise_service::CreateAssessment::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Annotates a previously created Assessment to provide additional information
    /// on whether the event turned out to be authentic or fraudulent.
    pub fn annotate_assessment(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::AnnotateAssessment {
        crate::builders::recaptcha_enterprise_service::AnnotateAssessment::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new reCAPTCHA Enterprise key.
    pub fn create_key(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::CreateKey {
        crate::builders::recaptcha_enterprise_service::CreateKey::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the list of all keys that belong to a project.
    pub fn list_keys(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::ListKeys {
        crate::builders::recaptcha_enterprise_service::ListKeys::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the secret key related to the specified public key.
    /// You must use the legacy secret key only in a 3rd party integration with
    /// legacy reCAPTCHA.
    pub fn retrieve_legacy_secret_key(
        &self,
        key: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::RetrieveLegacySecretKey {
        crate::builders::recaptcha_enterprise_service::RetrieveLegacySecretKey::new(
            self.inner.clone(),
        )
        .set_key(key.into())
    }

    /// Returns the specified key.
    pub fn get_key(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::GetKey {
        crate::builders::recaptcha_enterprise_service::GetKey::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates the specified key.
    pub fn update_key(
        &self,
        key: impl Into<crate::model::Key>,
    ) -> crate::builders::recaptcha_enterprise_service::UpdateKey {
        crate::builders::recaptcha_enterprise_service::UpdateKey::new(self.inner.clone())
            .set_key(key.into())
    }

    /// Deletes the specified key.
    pub fn delete_key(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::DeleteKey {
        crate::builders::recaptcha_enterprise_service::DeleteKey::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Migrates an existing key from reCAPTCHA to reCAPTCHA Enterprise.
    /// Once a key is migrated, it can be used from either product. SiteVerify
    /// requests are billed as CreateAssessment calls. You must be
    /// authenticated as one of the current owners of the reCAPTCHA Key, and
    /// your user must have the reCAPTCHA Enterprise Admin IAM role in the
    /// destination project.
    pub fn migrate_key(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::MigrateKey {
        crate::builders::recaptcha_enterprise_service::MigrateKey::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Adds an IP override to a key. The following restrictions hold:
    ///
    /// * The maximum number of IP overrides per key is 100.
    /// * For any conflict (such as IP already exists or IP part of an existing
    ///   IP range), an error is returned.
    pub fn add_ip_override(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::AddIpOverride {
        crate::builders::recaptcha_enterprise_service::AddIpOverride::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Removes an IP override from a key. The following restrictions hold:
    ///
    /// * If the IP isn't found in an existing IP override, a `NOT_FOUND` error
    ///   is returned.
    /// * If the IP is found in an existing IP override, but the
    ///   override type does not match, a `NOT_FOUND` error is returned.
    pub fn remove_ip_override(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::RemoveIpOverride {
        crate::builders::recaptcha_enterprise_service::RemoveIpOverride::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Lists all IP overrides for a key.
    pub fn list_ip_overrides(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::ListIpOverrides {
        crate::builders::recaptcha_enterprise_service::ListIpOverrides::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Get some aggregated metrics for a Key. This data can be used to build
    /// dashboards.
    pub fn get_metrics(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::GetMetrics {
        crate::builders::recaptcha_enterprise_service::GetMetrics::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new FirewallPolicy, specifying conditions at which reCAPTCHA
    /// Enterprise actions can be executed.
    /// A project may have a maximum of 1000 policies.
    pub fn create_firewall_policy(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::CreateFirewallPolicy {
        crate::builders::recaptcha_enterprise_service::CreateFirewallPolicy::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the list of all firewall policies that belong to a project.
    pub fn list_firewall_policies(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::ListFirewallPolicies {
        crate::builders::recaptcha_enterprise_service::ListFirewallPolicies::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Returns the specified firewall policy.
    pub fn get_firewall_policy(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::GetFirewallPolicy {
        crate::builders::recaptcha_enterprise_service::GetFirewallPolicy::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Updates the specified firewall policy.
    pub fn update_firewall_policy(
        &self,
        firewall_policy: impl Into<crate::model::FirewallPolicy>,
    ) -> crate::builders::recaptcha_enterprise_service::UpdateFirewallPolicy {
        crate::builders::recaptcha_enterprise_service::UpdateFirewallPolicy::new(self.inner.clone())
            .set_firewall_policy(firewall_policy.into())
    }

    /// Deletes the specified firewall policy.
    pub fn delete_firewall_policy(
        &self,
        name: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::DeleteFirewallPolicy {
        crate::builders::recaptcha_enterprise_service::DeleteFirewallPolicy::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Reorders all firewall policies.
    pub fn reorder_firewall_policies(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::ReorderFirewallPolicies {
        crate::builders::recaptcha_enterprise_service::ReorderFirewallPolicies::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// List groups of related accounts.
    pub fn list_related_account_groups(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::ListRelatedAccountGroups {
        crate::builders::recaptcha_enterprise_service::ListRelatedAccountGroups::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Get memberships in a group of related accounts.
    pub fn list_related_account_group_memberships(
        &self,
        parent: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::ListRelatedAccountGroupMemberships {
        crate::builders::recaptcha_enterprise_service::ListRelatedAccountGroupMemberships::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Search group memberships related to a given account.
    pub fn search_related_account_group_memberships(
        &self,
        project: impl Into<std::string::String>,
    ) -> crate::builders::recaptcha_enterprise_service::SearchRelatedAccountGroupMemberships {
        crate::builders::recaptcha_enterprise_service::SearchRelatedAccountGroupMemberships::new(
            self.inner.clone(),
        )
        .set_project(project.into())
    }
}
