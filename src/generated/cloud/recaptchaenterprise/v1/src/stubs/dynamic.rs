// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

/// A dyn-compatible, crate-private version of [super::RecaptchaEnterpriseService].
#[async_trait::async_trait]
pub trait RecaptchaEnterpriseService: std::fmt::Debug + Send + Sync {
    async fn create_assessment(
        &self,
        req: crate::model::CreateAssessmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Assessment>;

    async fn annotate_assessment(
        &self,
        req: crate::model::AnnotateAssessmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AnnotateAssessmentResponse>;

    async fn create_key(
        &self,
        req: crate::model::CreateKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Key>;

    async fn list_keys(
        &self,
        req: crate::model::ListKeysRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListKeysResponse>;

    async fn retrieve_legacy_secret_key(
        &self,
        req: crate::model::RetrieveLegacySecretKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::RetrieveLegacySecretKeyResponse>;

    async fn get_key(
        &self,
        req: crate::model::GetKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Key>;

    async fn update_key(
        &self,
        req: crate::model::UpdateKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Key>;

    async fn delete_key(
        &self,
        req: crate::model::DeleteKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    async fn migrate_key(
        &self,
        req: crate::model::MigrateKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Key>;

    async fn add_ip_override(
        &self,
        req: crate::model::AddIpOverrideRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AddIpOverrideResponse>;

    async fn remove_ip_override(
        &self,
        req: crate::model::RemoveIpOverrideRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::RemoveIpOverrideResponse>;

    async fn list_ip_overrides(
        &self,
        req: crate::model::ListIpOverridesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListIpOverridesResponse>;

    async fn get_metrics(
        &self,
        req: crate::model::GetMetricsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Metrics>;

    async fn create_firewall_policy(
        &self,
        req: crate::model::CreateFirewallPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::FirewallPolicy>;

    async fn list_firewall_policies(
        &self,
        req: crate::model::ListFirewallPoliciesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListFirewallPoliciesResponse>;

    async fn get_firewall_policy(
        &self,
        req: crate::model::GetFirewallPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::FirewallPolicy>;

    async fn update_firewall_policy(
        &self,
        req: crate::model::UpdateFirewallPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::FirewallPolicy>;

    async fn delete_firewall_policy(
        &self,
        req: crate::model::DeleteFirewallPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty>;

    async fn reorder_firewall_policies(
        &self,
        req: crate::model::ReorderFirewallPoliciesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ReorderFirewallPoliciesResponse>;

    async fn list_related_account_groups(
        &self,
        req: crate::model::ListRelatedAccountGroupsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListRelatedAccountGroupsResponse>;

    async fn list_related_account_group_memberships(
        &self,
        req: crate::model::ListRelatedAccountGroupMembershipsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListRelatedAccountGroupMembershipsResponse>;

    async fn search_related_account_group_memberships(
        &self,
        req: crate::model::SearchRelatedAccountGroupMembershipsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::SearchRelatedAccountGroupMembershipsResponse>;
}

/// All implementations of [super::RecaptchaEnterpriseService] also implement [RecaptchaEnterpriseService].
#[async_trait::async_trait]
impl<T: super::RecaptchaEnterpriseService> RecaptchaEnterpriseService for T {
    /// Forwards the call to the implementation provided by `T`.
    async fn create_assessment(
        &self,
        req: crate::model::CreateAssessmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Assessment> {
        T::create_assessment(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn annotate_assessment(
        &self,
        req: crate::model::AnnotateAssessmentRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AnnotateAssessmentResponse> {
        T::annotate_assessment(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_key(
        &self,
        req: crate::model::CreateKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Key> {
        T::create_key(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_keys(
        &self,
        req: crate::model::ListKeysRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListKeysResponse> {
        T::list_keys(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn retrieve_legacy_secret_key(
        &self,
        req: crate::model::RetrieveLegacySecretKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::RetrieveLegacySecretKeyResponse> {
        T::retrieve_legacy_secret_key(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_key(
        &self,
        req: crate::model::GetKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Key> {
        T::get_key(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_key(
        &self,
        req: crate::model::UpdateKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Key> {
        T::update_key(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_key(
        &self,
        req: crate::model::DeleteKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::delete_key(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn migrate_key(
        &self,
        req: crate::model::MigrateKeyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Key> {
        T::migrate_key(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn add_ip_override(
        &self,
        req: crate::model::AddIpOverrideRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::AddIpOverrideResponse> {
        T::add_ip_override(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn remove_ip_override(
        &self,
        req: crate::model::RemoveIpOverrideRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::RemoveIpOverrideResponse> {
        T::remove_ip_override(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_ip_overrides(
        &self,
        req: crate::model::ListIpOverridesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListIpOverridesResponse> {
        T::list_ip_overrides(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_metrics(
        &self,
        req: crate::model::GetMetricsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::Metrics> {
        T::get_metrics(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn create_firewall_policy(
        &self,
        req: crate::model::CreateFirewallPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::FirewallPolicy> {
        T::create_firewall_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_firewall_policies(
        &self,
        req: crate::model::ListFirewallPoliciesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListFirewallPoliciesResponse> {
        T::list_firewall_policies(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn get_firewall_policy(
        &self,
        req: crate::model::GetFirewallPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::FirewallPolicy> {
        T::get_firewall_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn update_firewall_policy(
        &self,
        req: crate::model::UpdateFirewallPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::FirewallPolicy> {
        T::update_firewall_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn delete_firewall_policy(
        &self,
        req: crate::model::DeleteFirewallPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<wkt::Empty> {
        T::delete_firewall_policy(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn reorder_firewall_policies(
        &self,
        req: crate::model::ReorderFirewallPoliciesRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ReorderFirewallPoliciesResponse> {
        T::reorder_firewall_policies(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_related_account_groups(
        &self,
        req: crate::model::ListRelatedAccountGroupsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListRelatedAccountGroupsResponse> {
        T::list_related_account_groups(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn list_related_account_group_memberships(
        &self,
        req: crate::model::ListRelatedAccountGroupMembershipsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::ListRelatedAccountGroupMembershipsResponse> {
        T::list_related_account_group_memberships(self, req, options).await
    }

    /// Forwards the call to the implementation provided by `T`.
    async fn search_related_account_group_memberships(
        &self,
        req: crate::model::SearchRelatedAccountGroupMembershipsRequest,
        options: gax::options::RequestOptions,
    ) -> crate::Result<crate::model::SearchRelatedAccountGroupMembershipsResponse> {
        T::search_related_account_group_memberships(self, req, options).await
    }
}
