// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]
#![no_implicit_prelude]
extern crate async_trait;
extern crate bytes;
extern crate gax;
extern crate gaxi;
extern crate iam_v1;
extern crate lazy_static;
extern crate location;
extern crate longrunning;
extern crate lro;
extern crate reqwest;
extern crate rpc;
extern crate serde;
extern crate serde_json;
extern crate serde_with;
extern crate std;
extern crate tracing;
extern crate wkt;

/// Represents the metadata of the long-running operation.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct OperationMetadata {
    /// Output only. The time the operation was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the operation finished running.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub end_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Server-defined resource path for the target of the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target: std::string::String,

    /// Output only. Name of the verb executed by the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub verb: std::string::String,

    /// Output only. Human-readable status of the operation, if any.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub status_message: std::string::String,

    /// Output only. Identifies whether the user has requested cancellation
    /// of the operation. Operations that have been cancelled successfully
    /// have
    /// [google.longrunning.Operation.error][google.longrunning.Operation.error]
    /// value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
    /// corresponding to `Code.CANCELLED`.
    ///
    /// [google.longrunning.Operation.error]: longrunning::model::Operation::result
    /// [google.rpc.Status.code]: rpc::model::Status::code
    pub requested_cancellation: bool,

    /// Output only. API version used to start the operation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub api_version: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl OperationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [create_time][crate::model::OperationMetadata::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [end_time][crate::model::OperationMetadata::end_time].
    pub fn set_end_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.end_time = v.into();
        self
    }

    /// Sets the value of [target][crate::model::OperationMetadata::target].
    pub fn set_target<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target = v.into();
        self
    }

    /// Sets the value of [verb][crate::model::OperationMetadata::verb].
    pub fn set_verb<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.verb = v.into();
        self
    }

    /// Sets the value of [status_message][crate::model::OperationMetadata::status_message].
    pub fn set_status_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.status_message = v.into();
        self
    }

    /// Sets the value of [requested_cancellation][crate::model::OperationMetadata::requested_cancellation].
    pub fn set_requested_cancellation<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.requested_cancellation = v.into();
        self
    }

    /// Sets the value of [api_version][crate::model::OperationMetadata::api_version].
    pub fn set_api_version<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.api_version = v.into();
        self
    }
}

impl wkt::message::Message for OperationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.OperationMetadata"
    }
}

/// The ServiceConnectionMap resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ServiceConnectionMap {
    /// Immutable. The name of a ServiceConnectionMap.
    /// Format:
    /// projects/{project}/locations/{location}/serviceConnectionMaps/{service_connection_map}
    /// See: <https://google.aip.dev/122#fields-representing-resource-names>
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Time when the ServiceConnectionMap was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time when the ServiceConnectionMap was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// User-defined labels.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// A description of this resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// The service class identifier this ServiceConnectionMap is for.
    /// The user of ServiceConnectionMap create API needs to have
    /// networkconnecitivty.serviceclasses.use iam permission for the service
    /// class.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_class: std::string::String,

    /// Output only. The service class uri this ServiceConnectionMap is for.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_class_uri: std::string::String,

    /// Output only. The infrastructure used for connections between
    /// consumers/producers.
    pub infrastructure: crate::model::Infrastructure,

    /// The PSC configurations on producer side.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub producer_psc_configs:
        std::vec::Vec<crate::model::service_connection_map::ProducerPscConfig>,

    /// The PSC configurations on consumer side.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub consumer_psc_configs:
        std::vec::Vec<crate::model::service_connection_map::ConsumerPscConfig>,

    /// Output only. PSC connection details on consumer side.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub consumer_psc_connections:
        std::vec::Vec<crate::model::service_connection_map::ConsumerPscConnection>,

    /// The token provided by the consumer. This token authenticates that the
    /// consumer can create a connection within the specified project and network.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub token: std::string::String,

    /// Optional. The etag is computed by the server, and may be sent on update and
    /// delete requests to ensure the client has an up-to-date value before
    /// proceeding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub etag: std::option::Option<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ServiceConnectionMap {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ServiceConnectionMap::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ServiceConnectionMap::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::ServiceConnectionMap::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::ServiceConnectionMap::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [service_class][crate::model::ServiceConnectionMap::service_class].
    pub fn set_service_class<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service_class = v.into();
        self
    }

    /// Sets the value of [service_class_uri][crate::model::ServiceConnectionMap::service_class_uri].
    pub fn set_service_class_uri<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.service_class_uri = v.into();
        self
    }

    /// Sets the value of [infrastructure][crate::model::ServiceConnectionMap::infrastructure].
    pub fn set_infrastructure<T: std::convert::Into<crate::model::Infrastructure>>(
        mut self,
        v: T,
    ) -> Self {
        self.infrastructure = v.into();
        self
    }

    /// Sets the value of [token][crate::model::ServiceConnectionMap::token].
    pub fn set_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.token = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::ServiceConnectionMap::etag].
    pub fn set_etag<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of [producer_psc_configs][crate::model::ServiceConnectionMap::producer_psc_configs].
    pub fn set_producer_psc_configs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::service_connection_map::ProducerPscConfig>,
    {
        use std::iter::Iterator;
        self.producer_psc_configs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [consumer_psc_configs][crate::model::ServiceConnectionMap::consumer_psc_configs].
    pub fn set_consumer_psc_configs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::service_connection_map::ConsumerPscConfig>,
    {
        use std::iter::Iterator;
        self.consumer_psc_configs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [consumer_psc_connections][crate::model::ServiceConnectionMap::consumer_psc_connections].
    pub fn set_consumer_psc_connections<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::service_connection_map::ConsumerPscConnection>,
    {
        use std::iter::Iterator;
        self.consumer_psc_connections = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::ServiceConnectionMap::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for ServiceConnectionMap {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ServiceConnectionMap"
    }
}

/// Defines additional types related to [ServiceConnectionMap].
pub mod service_connection_map {
    #[allow(unused_imports)]
    use super::*;

    /// The PSC configurations on producer side.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ProducerPscConfig {
        /// The resource path of a service attachment.
        /// Example:
        /// projects/{projectNumOrId}/regions/{region}/serviceAttachments/{resourceId}.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub service_attachment_uri: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ProducerPscConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [service_attachment_uri][crate::model::service_connection_map::ProducerPscConfig::service_attachment_uri].
        pub fn set_service_attachment_uri<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.service_attachment_uri = v.into();
            self
        }
    }

    impl wkt::message::Message for ProducerPscConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkconnectivity.v1.ServiceConnectionMap.ProducerPscConfig"
        }
    }

    /// Allow the producer to specify which consumers can connect to it.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ConsumerPscConfig {
        /// The consumer project where PSC connections are allowed to be created in.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub project: std::string::String,

        /// The resource path of the consumer network where PSC connections are
        /// allowed to be created in. Note, this network does not need be in the
        /// ConsumerPscConfig.project in the case of SharedVPC.
        /// Example:
        /// projects/{projectNumOrId}/global/networks/{networkId}.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub network: std::string::String,

        /// This is used in PSC consumer ForwardingRule to control whether the PSC
        /// endpoint can be accessed from another region.
        pub disable_global_access: bool,

        /// Output only. Overall state of PSC Connections management for this
        /// consumer psc config.
        pub state: crate::model::service_connection_map::consumer_psc_config::State,

        /// Immutable. Deprecated. Use producer_instance_metadata instead.
        /// An immutable identifier for the producer instance.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub producer_instance_id: std::string::String,

        /// Output only. A map to store mapping between customer vip and target
        /// service attachment. Only service attachment with producer specified ip
        /// addresses are stored here.
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub service_attachment_ip_address_map:
            std::collections::HashMap<std::string::String, std::string::String>,

        /// Required. The project ID or project number of the consumer project. This
        /// project is the one that the consumer uses to interact with the producer
        /// instance. From the perspective of a consumer who's created a producer
        /// instance, this is the project of the producer instance. Format:
        /// 'projects/<project_id_or_number>' Eg. 'projects/consumer-project' or
        /// 'projects/1234'
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub consumer_instance_project: std::string::String,

        /// Immutable. An immutable map for the producer instance metadata.
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub producer_instance_metadata:
            std::collections::HashMap<std::string::String, std::string::String>,

        /// The requested IP version for the PSC connection.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub ip_version: std::option::Option<crate::model::IPVersion>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ConsumerPscConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [project][crate::model::service_connection_map::ConsumerPscConfig::project].
        pub fn set_project<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.project = v.into();
            self
        }

        /// Sets the value of [network][crate::model::service_connection_map::ConsumerPscConfig::network].
        pub fn set_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.network = v.into();
            self
        }

        /// Sets the value of [disable_global_access][crate::model::service_connection_map::ConsumerPscConfig::disable_global_access].
        pub fn set_disable_global_access<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
            self.disable_global_access = v.into();
            self
        }

        /// Sets the value of [state][crate::model::service_connection_map::ConsumerPscConfig::state].
        pub fn set_state<
            T: std::convert::Into<crate::model::service_connection_map::consumer_psc_config::State>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.state = v.into();
            self
        }

        /// Sets the value of [producer_instance_id][crate::model::service_connection_map::ConsumerPscConfig::producer_instance_id].
        pub fn set_producer_instance_id<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.producer_instance_id = v.into();
            self
        }

        /// Sets the value of [consumer_instance_project][crate::model::service_connection_map::ConsumerPscConfig::consumer_instance_project].
        pub fn set_consumer_instance_project<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.consumer_instance_project = v.into();
            self
        }

        /// Sets the value of [ip_version][crate::model::service_connection_map::ConsumerPscConfig::ip_version].
        pub fn set_ip_version<
            T: std::convert::Into<std::option::Option<crate::model::IPVersion>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.ip_version = v.into();
            self
        }

        /// Sets the value of [service_attachment_ip_address_map][crate::model::service_connection_map::ConsumerPscConfig::service_attachment_ip_address_map].
        pub fn set_service_attachment_ip_address_map<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.service_attachment_ip_address_map =
                v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }

        /// Sets the value of [producer_instance_metadata][crate::model::service_connection_map::ConsumerPscConfig::producer_instance_metadata].
        pub fn set_producer_instance_metadata<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.producer_instance_metadata =
                v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl wkt::message::Message for ConsumerPscConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkconnectivity.v1.ServiceConnectionMap.ConsumerPscConfig"
        }
    }

    /// Defines additional types related to [ConsumerPscConfig].
    pub mod consumer_psc_config {
        #[allow(unused_imports)]
        use super::*;

        /// PSC Consumer Config State.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct State(i32);

        impl State {
            /// Default state, when Connection Map is created initially.
            pub const STATE_UNSPECIFIED: State = State::new(0);

            /// Set when policy and map configuration is valid,
            /// and their matching can lead to allowing creation of PSC Connections
            /// subject to other constraints like connections limit.
            pub const VALID: State = State::new(1);

            /// No Service Connection Policy found for this network and Service
            /// Class
            pub const CONNECTION_POLICY_MISSING: State = State::new(2);

            /// Service Connection Policy limit reached for this network and Service
            /// Class
            pub const POLICY_LIMIT_REACHED: State = State::new(3);

            /// The consumer instance project is not in
            /// AllowedGoogleProducersResourceHierarchyLevels of the matching
            /// ServiceConnectionPolicy.
            pub const CONSUMER_INSTANCE_PROJECT_NOT_ALLOWLISTED: State = State::new(4);

            /// Creates a new State instance.
            pub(crate) const fn new(value: i32) -> Self {
                Self(value)
            }

            /// Gets the enum value.
            pub fn value(&self) -> i32 {
                self.0
            }

            /// Gets the enum value as a string.
            pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
                match self.0 {
                    0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                    1 => std::borrow::Cow::Borrowed("VALID"),
                    2 => std::borrow::Cow::Borrowed("CONNECTION_POLICY_MISSING"),
                    3 => std::borrow::Cow::Borrowed("POLICY_LIMIT_REACHED"),
                    4 => std::borrow::Cow::Borrowed("CONSUMER_INSTANCE_PROJECT_NOT_ALLOWLISTED"),
                    _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
                }
            }

            /// Creates an enum value from the value name.
            pub fn from_str_name(name: &str) -> std::option::Option<Self> {
                match name {
                    "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                    "VALID" => std::option::Option::Some(Self::VALID),
                    "CONNECTION_POLICY_MISSING" => {
                        std::option::Option::Some(Self::CONNECTION_POLICY_MISSING)
                    }
                    "POLICY_LIMIT_REACHED" => std::option::Option::Some(Self::POLICY_LIMIT_REACHED),
                    "CONSUMER_INSTANCE_PROJECT_NOT_ALLOWLISTED" => {
                        std::option::Option::Some(Self::CONSUMER_INSTANCE_PROJECT_NOT_ALLOWLISTED)
                    }
                    _ => std::option::Option::None,
                }
            }
        }

        impl std::convert::From<i32> for State {
            fn from(value: i32) -> Self {
                Self::new(value)
            }
        }

        impl std::default::Default for State {
            fn default() -> Self {
                Self::new(0)
            }
        }
    }

    /// PSC connection details on consumer side.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct ConsumerPscConnection {
        /// The URI of a service attachment which is the target of the PSC
        /// connection.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub service_attachment_uri: std::string::String,

        /// The state of the PSC connection.
        pub state: crate::model::service_connection_map::consumer_psc_connection::State,

        /// The consumer project whose PSC forwarding rule is connected to the
        /// service attachments in this service connection map.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub project: std::string::String,

        /// The consumer network whose PSC forwarding rule is connected to the
        /// service attachments in this service connection map.
        /// Note that the network could be on a different project (shared VPC).
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub network: std::string::String,

        /// The PSC connection id of the PSC forwarding rule connected
        /// to the service attachments in this service connection map.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub psc_connection_id: std::string::String,

        /// The IP literal allocated on the consumer network for the PSC forwarding
        /// rule that is created to connect to the producer service attachment in
        /// this service connection map.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub ip: std::string::String,

        /// The error type indicates whether the error is consumer facing, producer
        /// facing or system internal.
        pub error_type: crate::model::ConnectionErrorType,

        /// The most recent error during operating this connection.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub error: std::option::Option<rpc::model::Status>,

        /// The last Compute Engine operation to setup PSC connection.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub gce_operation: std::string::String,

        /// The URI of the consumer forwarding rule created.
        /// Example:
        /// projects/{projectNumOrId}/regions/us-east1/networks/{resourceId}.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub forwarding_rule: std::string::String,

        /// Output only. The error info for the latest error during operating this
        /// connection.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub error_info: std::option::Option<rpc::model::ErrorInfo>,

        /// Output only. The URI of the selected subnetwork selected to allocate IP
        /// address for this connection.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub selected_subnetwork: std::string::String,

        /// Immutable. Deprecated. Use producer_instance_metadata instead.
        /// An immutable identifier for the producer instance.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub producer_instance_id: std::string::String,

        /// Immutable. An immutable map for the producer instance metadata.
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub producer_instance_metadata:
            std::collections::HashMap<std::string::String, std::string::String>,

        /// The requested IP version for the PSC connection.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub ip_version: std::option::Option<crate::model::IPVersion>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl ConsumerPscConnection {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [service_attachment_uri][crate::model::service_connection_map::ConsumerPscConnection::service_attachment_uri].
        pub fn set_service_attachment_uri<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.service_attachment_uri = v.into();
            self
        }

        /// Sets the value of [state][crate::model::service_connection_map::ConsumerPscConnection::state].
        pub fn set_state<
            T: std::convert::Into<
                    crate::model::service_connection_map::consumer_psc_connection::State,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.state = v.into();
            self
        }

        /// Sets the value of [project][crate::model::service_connection_map::ConsumerPscConnection::project].
        pub fn set_project<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.project = v.into();
            self
        }

        /// Sets the value of [network][crate::model::service_connection_map::ConsumerPscConnection::network].
        pub fn set_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.network = v.into();
            self
        }

        /// Sets the value of [psc_connection_id][crate::model::service_connection_map::ConsumerPscConnection::psc_connection_id].
        pub fn set_psc_connection_id<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.psc_connection_id = v.into();
            self
        }

        /// Sets the value of [ip][crate::model::service_connection_map::ConsumerPscConnection::ip].
        pub fn set_ip<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.ip = v.into();
            self
        }

        /// Sets the value of [error_type][crate::model::service_connection_map::ConsumerPscConnection::error_type].
        pub fn set_error_type<T: std::convert::Into<crate::model::ConnectionErrorType>>(
            mut self,
            v: T,
        ) -> Self {
            self.error_type = v.into();
            self
        }

        /// Sets the value of [error][crate::model::service_connection_map::ConsumerPscConnection::error].
        pub fn set_error<T: std::convert::Into<std::option::Option<rpc::model::Status>>>(
            mut self,
            v: T,
        ) -> Self {
            self.error = v.into();
            self
        }

        /// Sets the value of [gce_operation][crate::model::service_connection_map::ConsumerPscConnection::gce_operation].
        pub fn set_gce_operation<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.gce_operation = v.into();
            self
        }

        /// Sets the value of [forwarding_rule][crate::model::service_connection_map::ConsumerPscConnection::forwarding_rule].
        pub fn set_forwarding_rule<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.forwarding_rule = v.into();
            self
        }

        /// Sets the value of [error_info][crate::model::service_connection_map::ConsumerPscConnection::error_info].
        pub fn set_error_info<T: std::convert::Into<std::option::Option<rpc::model::ErrorInfo>>>(
            mut self,
            v: T,
        ) -> Self {
            self.error_info = v.into();
            self
        }

        /// Sets the value of [selected_subnetwork][crate::model::service_connection_map::ConsumerPscConnection::selected_subnetwork].
        pub fn set_selected_subnetwork<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.selected_subnetwork = v.into();
            self
        }

        /// Sets the value of [producer_instance_id][crate::model::service_connection_map::ConsumerPscConnection::producer_instance_id].
        pub fn set_producer_instance_id<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.producer_instance_id = v.into();
            self
        }

        /// Sets the value of [ip_version][crate::model::service_connection_map::ConsumerPscConnection::ip_version].
        pub fn set_ip_version<
            T: std::convert::Into<std::option::Option<crate::model::IPVersion>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.ip_version = v.into();
            self
        }

        /// Sets the value of [producer_instance_metadata][crate::model::service_connection_map::ConsumerPscConnection::producer_instance_metadata].
        pub fn set_producer_instance_metadata<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.producer_instance_metadata =
                v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl wkt::message::Message for ConsumerPscConnection {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkconnectivity.v1.ServiceConnectionMap.ConsumerPscConnection"
        }
    }

    /// Defines additional types related to [ConsumerPscConnection].
    pub mod consumer_psc_connection {
        #[allow(unused_imports)]
        use super::*;

        /// The state of the PSC connection.
        /// We reserve the right to add more states without notice in the future.
        /// Users should not use exhaustive switch statements on this enum.
        /// See <https://google.aip.dev/216>.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct State(i32);

        impl State {
            /// An invalid state as the default case.
            pub const STATE_UNSPECIFIED: State = State::new(0);

            /// The connection has been created successfully. However, for the
            /// up-to-date connection status, please use the service attachment's
            /// "ConnectedEndpoint.status" as the source of truth.
            pub const ACTIVE: State = State::new(1);

            /// The connection is not functional since some resources on the connection
            /// fail to be created.
            pub const FAILED: State = State::new(2);

            /// The connection is being created.
            pub const CREATING: State = State::new(3);

            /// The connection is being deleted.
            pub const DELETING: State = State::new(4);

            /// The connection is being repaired to complete creation.
            pub const CREATE_REPAIRING: State = State::new(5);

            /// The connection is being repaired to complete deletion.
            pub const DELETE_REPAIRING: State = State::new(6);

            /// Creates a new State instance.
            pub(crate) const fn new(value: i32) -> Self {
                Self(value)
            }

            /// Gets the enum value.
            pub fn value(&self) -> i32 {
                self.0
            }

            /// Gets the enum value as a string.
            pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
                match self.0 {
                    0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                    1 => std::borrow::Cow::Borrowed("ACTIVE"),
                    2 => std::borrow::Cow::Borrowed("FAILED"),
                    3 => std::borrow::Cow::Borrowed("CREATING"),
                    4 => std::borrow::Cow::Borrowed("DELETING"),
                    5 => std::borrow::Cow::Borrowed("CREATE_REPAIRING"),
                    6 => std::borrow::Cow::Borrowed("DELETE_REPAIRING"),
                    _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
                }
            }

            /// Creates an enum value from the value name.
            pub fn from_str_name(name: &str) -> std::option::Option<Self> {
                match name {
                    "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                    "ACTIVE" => std::option::Option::Some(Self::ACTIVE),
                    "FAILED" => std::option::Option::Some(Self::FAILED),
                    "CREATING" => std::option::Option::Some(Self::CREATING),
                    "DELETING" => std::option::Option::Some(Self::DELETING),
                    "CREATE_REPAIRING" => std::option::Option::Some(Self::CREATE_REPAIRING),
                    "DELETE_REPAIRING" => std::option::Option::Some(Self::DELETE_REPAIRING),
                    _ => std::option::Option::None,
                }
            }
        }

        impl std::convert::From<i32> for State {
            fn from(value: i32) -> Self {
                Self::new(value)
            }
        }

        impl std::default::Default for State {
            fn default() -> Self {
                Self::new(0)
            }
        }
    }
}

/// Request for ListServiceConnectionMaps.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListServiceConnectionMapsRequest {
    /// Required. The parent resource's name. ex. projects/123/locations/us-east1
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of results per page that should be returned.
    pub page_size: i32,

    /// The page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// A filter expression that filters the results listed in the response.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Sort the results by a certain order.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListServiceConnectionMapsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListServiceConnectionMapsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListServiceConnectionMapsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListServiceConnectionMapsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListServiceConnectionMapsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListServiceConnectionMapsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListServiceConnectionMapsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListServiceConnectionMapsRequest"
    }
}

/// Response for ListServiceConnectionMaps.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListServiceConnectionMapsResponse {
    /// ServiceConnectionMaps to be returned.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub service_connection_maps: std::vec::Vec<crate::model::ServiceConnectionMap>,

    /// The next pagination token in the List response. It should be used as
    /// page_token for the following request. An empty value means no more result.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListServiceConnectionMapsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListServiceConnectionMapsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [service_connection_maps][crate::model::ListServiceConnectionMapsResponse::service_connection_maps].
    pub fn set_service_connection_maps<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ServiceConnectionMap>,
    {
        use std::iter::Iterator;
        self.service_connection_maps = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListServiceConnectionMapsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListServiceConnectionMapsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListServiceConnectionMapsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListServiceConnectionMapsResponse {
    type PageItem = crate::model::ServiceConnectionMap;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.service_connection_maps
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request for GetServiceConnectionMap.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetServiceConnectionMapRequest {
    /// Required. Name of the ServiceConnectionMap to get.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetServiceConnectionMapRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetServiceConnectionMapRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetServiceConnectionMapRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.GetServiceConnectionMapRequest"
    }
}

/// Request for CreateServiceConnectionMap.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateServiceConnectionMapRequest {
    /// Required. The parent resource's name of the ServiceConnectionMap. ex.
    /// projects/123/locations/us-east1
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Resource ID
    /// (i.e. 'foo' in '[...]/projects/p/locations/l/serviceConnectionMaps/foo')
    /// See <https://google.aip.dev/122#resource-id-segments>
    /// Unique per location.
    /// If one is not provided, one will be generated.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_connection_map_id: std::string::String,

    /// Required. Initial values for a new ServiceConnectionMaps
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub service_connection_map: std::option::Option<crate::model::ServiceConnectionMap>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateServiceConnectionMapRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateServiceConnectionMapRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [service_connection_map_id][crate::model::CreateServiceConnectionMapRequest::service_connection_map_id].
    pub fn set_service_connection_map_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.service_connection_map_id = v.into();
        self
    }

    /// Sets the value of [service_connection_map][crate::model::CreateServiceConnectionMapRequest::service_connection_map].
    pub fn set_service_connection_map<
        T: std::convert::Into<std::option::Option<crate::model::ServiceConnectionMap>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.service_connection_map = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateServiceConnectionMapRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateServiceConnectionMapRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.CreateServiceConnectionMapRequest"
    }
}

/// Request for UpdateServiceConnectionMap.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateServiceConnectionMapRequest {
    /// Optional. Field mask is used to specify the fields to be overwritten in the
    /// ServiceConnectionMap resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. New values to be patched into the resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub service_connection_map: std::option::Option<crate::model::ServiceConnectionMap>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateServiceConnectionMapRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateServiceConnectionMapRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [service_connection_map][crate::model::UpdateServiceConnectionMapRequest::service_connection_map].
    pub fn set_service_connection_map<
        T: std::convert::Into<std::option::Option<crate::model::ServiceConnectionMap>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.service_connection_map = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateServiceConnectionMapRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateServiceConnectionMapRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.UpdateServiceConnectionMapRequest"
    }
}

/// Request for DeleteServiceConnectionMap.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteServiceConnectionMapRequest {
    /// Required. The name of the ServiceConnectionMap to delete.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. The etag is computed by the server, and may be sent on update and
    /// delete requests to ensure the client has an up-to-date value before
    /// proceeding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub etag: std::option::Option<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteServiceConnectionMapRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteServiceConnectionMapRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteServiceConnectionMapRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::DeleteServiceConnectionMapRequest::etag].
    pub fn set_etag<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.etag = v.into();
        self
    }
}

impl wkt::message::Message for DeleteServiceConnectionMapRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.DeleteServiceConnectionMapRequest"
    }
}

/// The ServiceConnectionPolicy resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ServiceConnectionPolicy {
    /// Immutable. The name of a ServiceConnectionPolicy.
    /// Format:
    /// projects/{project}/locations/{location}/serviceConnectionPolicies/{service_connection_policy}
    /// See: <https://google.aip.dev/122#fields-representing-resource-names>
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Time when the ServiceConnectionPolicy was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time when the ServiceConnectionPolicy was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// User-defined labels.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// A description of this resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// The resource path of the consumer network.
    /// Example:
    ///
    /// - projects/{projectNumOrId}/global/networks/{resourceId}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub network: std::string::String,

    /// The service class identifier for which this ServiceConnectionPolicy is for.
    /// The service class identifier is a unique, symbolic representation of a
    /// ServiceClass. It is provided by the Service Producer. Google services have
    /// a prefix of gcp or google-cloud. For example, gcp-memorystore-redis or
    /// google-cloud-sql. 3rd party services do not. For example,
    /// test-service-a3dfcx.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_class: std::string::String,

    /// Output only. The type of underlying resources used to create the
    /// connection.
    pub infrastructure: crate::model::Infrastructure,

    /// Configuration used for Private Service Connect connections. Used when
    /// Infrastructure is PSC.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub psc_config: std::option::Option<crate::model::service_connection_policy::PscConfig>,

    /// Output only. [Output only] Information about each Private Service Connect
    /// connection.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub psc_connections: std::vec::Vec<crate::model::service_connection_policy::PscConnection>,

    /// Optional. The etag is computed by the server, and may be sent on update and
    /// delete requests to ensure the client has an up-to-date value before
    /// proceeding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub etag: std::option::Option<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ServiceConnectionPolicy {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ServiceConnectionPolicy::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ServiceConnectionPolicy::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::ServiceConnectionPolicy::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::ServiceConnectionPolicy::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [network][crate::model::ServiceConnectionPolicy::network].
    pub fn set_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.network = v.into();
        self
    }

    /// Sets the value of [service_class][crate::model::ServiceConnectionPolicy::service_class].
    pub fn set_service_class<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service_class = v.into();
        self
    }

    /// Sets the value of [infrastructure][crate::model::ServiceConnectionPolicy::infrastructure].
    pub fn set_infrastructure<T: std::convert::Into<crate::model::Infrastructure>>(
        mut self,
        v: T,
    ) -> Self {
        self.infrastructure = v.into();
        self
    }

    /// Sets the value of [psc_config][crate::model::ServiceConnectionPolicy::psc_config].
    pub fn set_psc_config<
        T: std::convert::Into<std::option::Option<crate::model::service_connection_policy::PscConfig>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.psc_config = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::ServiceConnectionPolicy::etag].
    pub fn set_etag<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of [psc_connections][crate::model::ServiceConnectionPolicy::psc_connections].
    pub fn set_psc_connections<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::service_connection_policy::PscConnection>,
    {
        use std::iter::Iterator;
        self.psc_connections = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::ServiceConnectionPolicy::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for ServiceConnectionPolicy {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ServiceConnectionPolicy"
    }
}

/// Defines additional types related to [ServiceConnectionPolicy].
pub mod service_connection_policy {
    #[allow(unused_imports)]
    use super::*;

    /// Configuration used for Private Service Connect connections. Used when
    /// Infrastructure is PSC.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct PscConfig {
        /// The resource paths of subnetworks to use for IP address management.
        /// Example:
        /// projects/{projectNumOrId}/regions/{region}/subnetworks/{resourceId}.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub subnetworks: std::vec::Vec<std::string::String>,

        /// Optional. Max number of PSC connections for this policy.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        #[serde_as(as = "std::option::Option<serde_with::DisplayFromStr>")]
        pub limit: std::option::Option<i64>,

        /// Required. ProducerInstanceLocation is used to specify which authorization
        /// mechanism to use to determine which projects the Producer instance can be
        /// within.
        pub producer_instance_location:
            crate::model::service_connection_policy::psc_config::ProducerInstanceLocation,

        /// Optional. List of Projects, Folders, or Organizations from where the
        /// Producer instance can be within. For example, a network administrator can
        /// provide both 'organizations/foo' and 'projects/bar' as
        /// allowed_google_producers_resource_hierarchy_levels. This allowlists this
        /// network to connect with any Producer instance within the 'foo'
        /// organization or the 'bar' project. By default,
        /// allowed_google_producers_resource_hierarchy_level is empty. The format
        /// for each allowed_google_producers_resource_hierarchy_level is \<resource
        /// type\>/\<id\> where <resource type\> is one of 'projects', 'folders', or
        /// 'organizations' and \<id\> is either the ID or the number of the resource
        /// type. Format for each allowed_google_producers_resource_hierarchy_level
        /// value: 'projects/<project_id_or_number>' or 'folders/<folder_id>' or
        /// 'organizations/<organization_id>'
        /// Eg. [projects/my-project-id, projects/567, folders/891,
        /// organizations/123]
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub allowed_google_producers_resource_hierarchy_level: std::vec::Vec<std::string::String>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl PscConfig {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [limit][crate::model::service_connection_policy::PscConfig::limit].
        pub fn set_limit<T: std::convert::Into<std::option::Option<i64>>>(mut self, v: T) -> Self {
            self.limit = v.into();
            self
        }

        /// Sets the value of [producer_instance_location][crate::model::service_connection_policy::PscConfig::producer_instance_location].
        pub fn set_producer_instance_location<
            T: std::convert::Into<
                    crate::model::service_connection_policy::psc_config::ProducerInstanceLocation,
                >,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.producer_instance_location = v.into();
            self
        }

        /// Sets the value of [subnetworks][crate::model::service_connection_policy::PscConfig::subnetworks].
        pub fn set_subnetworks<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.subnetworks = v.into_iter().map(|i| i.into()).collect();
            self
        }

        /// Sets the value of [allowed_google_producers_resource_hierarchy_level][crate::model::service_connection_policy::PscConfig::allowed_google_producers_resource_hierarchy_level].
        pub fn set_allowed_google_producers_resource_hierarchy_level<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.allowed_google_producers_resource_hierarchy_level =
                v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for PscConfig {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkconnectivity.v1.ServiceConnectionPolicy.PscConfig"
        }
    }

    /// Defines additional types related to [PscConfig].
    pub mod psc_config {
        #[allow(unused_imports)]
        use super::*;

        /// ProducerInstanceLocation is used to specify which authorization mechanism
        /// to use to determine which projects the Producer instance can be within.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct ProducerInstanceLocation(i32);

        impl ProducerInstanceLocation {
            /// Producer instance location is not specified. When this option is
            /// chosen, then the PSC connections created by this
            /// ServiceConnectionPolicy must be within the same project as the Producer
            /// instance. This is the default ProducerInstanceLocation value.
            /// To allow for PSC connections from this network to other networks, use
            /// the CUSTOM_RESOURCE_HIERARCHY_LEVELS option.
            pub const PRODUCER_INSTANCE_LOCATION_UNSPECIFIED: ProducerInstanceLocation =
                ProducerInstanceLocation::new(0);

            /// Producer instance must be within one of the values provided in
            /// allowed_google_producers_resource_hierarchy_level.
            pub const CUSTOM_RESOURCE_HIERARCHY_LEVELS: ProducerInstanceLocation =
                ProducerInstanceLocation::new(1);

            /// Creates a new ProducerInstanceLocation instance.
            pub(crate) const fn new(value: i32) -> Self {
                Self(value)
            }

            /// Gets the enum value.
            pub fn value(&self) -> i32 {
                self.0
            }

            /// Gets the enum value as a string.
            pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
                match self.0 {
                    0 => std::borrow::Cow::Borrowed("PRODUCER_INSTANCE_LOCATION_UNSPECIFIED"),
                    1 => std::borrow::Cow::Borrowed("CUSTOM_RESOURCE_HIERARCHY_LEVELS"),
                    _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
                }
            }

            /// Creates an enum value from the value name.
            pub fn from_str_name(name: &str) -> std::option::Option<Self> {
                match name {
                    "PRODUCER_INSTANCE_LOCATION_UNSPECIFIED" => {
                        std::option::Option::Some(Self::PRODUCER_INSTANCE_LOCATION_UNSPECIFIED)
                    }
                    "CUSTOM_RESOURCE_HIERARCHY_LEVELS" => {
                        std::option::Option::Some(Self::CUSTOM_RESOURCE_HIERARCHY_LEVELS)
                    }
                    _ => std::option::Option::None,
                }
            }
        }

        impl std::convert::From<i32> for ProducerInstanceLocation {
            fn from(value: i32) -> Self {
                Self::new(value)
            }
        }

        impl std::default::Default for ProducerInstanceLocation {
            fn default() -> Self {
                Self::new(0)
            }
        }
    }

    /// Information about a specific Private Service Connect connection.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct PscConnection {
        /// State of the PSC Connection
        pub state: crate::model::service_connection_policy::State,

        /// The resource reference of the PSC Forwarding Rule within the consumer
        /// VPC.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub consumer_forwarding_rule: std::string::String,

        /// The resource reference of the consumer address.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub consumer_address: std::string::String,

        /// The error type indicates whether the error is consumer facing, producer
        /// facing or system internal.
        pub error_type: crate::model::ConnectionErrorType,

        /// The most recent error during operating this connection.
        /// Deprecated, please use error_info instead.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub error: std::option::Option<rpc::model::Status>,

        /// The last Compute Engine operation to setup PSC connection.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub gce_operation: std::string::String,

        /// The project where the PSC connection is created.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub consumer_target_project: std::string::String,

        /// The PSC connection id of the PSC forwarding rule.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub psc_connection_id: std::string::String,

        /// Output only. The error info for the latest error during operating this
        /// connection.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub error_info: std::option::Option<rpc::model::ErrorInfo>,

        /// Output only. The URI of the subnetwork selected to allocate IP address
        /// for this connection.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub selected_subnetwork: std::string::String,

        /// Immutable. Deprecated. Use producer_instance_metadata instead.
        /// An immutable identifier for the producer instance.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub producer_instance_id: std::string::String,

        /// Immutable. An immutable map for the producer instance metadata.
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub producer_instance_metadata:
            std::collections::HashMap<std::string::String, std::string::String>,

        /// Output only. [Output only] The service class associated with this PSC
        /// Connection. The value is derived from the SCPolicy and matches the
        /// service class name provided by the customer.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub service_class: std::string::String,

        /// The requested IP version for the PSC connection.
        #[serde(skip_serializing_if = "std::option::Option::is_none")]
        pub ip_version: std::option::Option<crate::model::IPVersion>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl PscConnection {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [state][crate::model::service_connection_policy::PscConnection::state].
        pub fn set_state<T: std::convert::Into<crate::model::service_connection_policy::State>>(
            mut self,
            v: T,
        ) -> Self {
            self.state = v.into();
            self
        }

        /// Sets the value of [consumer_forwarding_rule][crate::model::service_connection_policy::PscConnection::consumer_forwarding_rule].
        pub fn set_consumer_forwarding_rule<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.consumer_forwarding_rule = v.into();
            self
        }

        /// Sets the value of [consumer_address][crate::model::service_connection_policy::PscConnection::consumer_address].
        pub fn set_consumer_address<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.consumer_address = v.into();
            self
        }

        /// Sets the value of [error_type][crate::model::service_connection_policy::PscConnection::error_type].
        pub fn set_error_type<T: std::convert::Into<crate::model::ConnectionErrorType>>(
            mut self,
            v: T,
        ) -> Self {
            self.error_type = v.into();
            self
        }

        /// Sets the value of [error][crate::model::service_connection_policy::PscConnection::error].
        pub fn set_error<T: std::convert::Into<std::option::Option<rpc::model::Status>>>(
            mut self,
            v: T,
        ) -> Self {
            self.error = v.into();
            self
        }

        /// Sets the value of [gce_operation][crate::model::service_connection_policy::PscConnection::gce_operation].
        pub fn set_gce_operation<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.gce_operation = v.into();
            self
        }

        /// Sets the value of [consumer_target_project][crate::model::service_connection_policy::PscConnection::consumer_target_project].
        pub fn set_consumer_target_project<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.consumer_target_project = v.into();
            self
        }

        /// Sets the value of [psc_connection_id][crate::model::service_connection_policy::PscConnection::psc_connection_id].
        pub fn set_psc_connection_id<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.psc_connection_id = v.into();
            self
        }

        /// Sets the value of [error_info][crate::model::service_connection_policy::PscConnection::error_info].
        pub fn set_error_info<T: std::convert::Into<std::option::Option<rpc::model::ErrorInfo>>>(
            mut self,
            v: T,
        ) -> Self {
            self.error_info = v.into();
            self
        }

        /// Sets the value of [selected_subnetwork][crate::model::service_connection_policy::PscConnection::selected_subnetwork].
        pub fn set_selected_subnetwork<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.selected_subnetwork = v.into();
            self
        }

        /// Sets the value of [producer_instance_id][crate::model::service_connection_policy::PscConnection::producer_instance_id].
        pub fn set_producer_instance_id<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.producer_instance_id = v.into();
            self
        }

        /// Sets the value of [service_class][crate::model::service_connection_policy::PscConnection::service_class].
        pub fn set_service_class<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.service_class = v.into();
            self
        }

        /// Sets the value of [ip_version][crate::model::service_connection_policy::PscConnection::ip_version].
        pub fn set_ip_version<
            T: std::convert::Into<std::option::Option<crate::model::IPVersion>>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.ip_version = v.into();
            self
        }

        /// Sets the value of [producer_instance_metadata][crate::model::service_connection_policy::PscConnection::producer_instance_metadata].
        pub fn set_producer_instance_metadata<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.producer_instance_metadata =
                v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl wkt::message::Message for PscConnection {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkconnectivity.v1.ServiceConnectionPolicy.PscConnection"
        }
    }

    /// The state of the PSC connection.
    /// We reserve the right to add more states without notice in the future.
    /// Users should not use exhaustive switch statements on this enum.
    /// See <https://google.aip.dev/216>.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct State(i32);

    impl State {
        /// An invalid state as the default case.
        pub const STATE_UNSPECIFIED: State = State::new(0);

        /// The connection has been created successfully. However, for the
        /// up-to-date connection status, please use the created forwarding rule's
        /// "PscConnectionStatus" as the source of truth.
        pub const ACTIVE: State = State::new(1);

        /// The connection is not functional since some resources on the connection
        /// fail to be created.
        pub const FAILED: State = State::new(2);

        /// The connection is being created.
        pub const CREATING: State = State::new(3);

        /// The connection is being deleted.
        pub const DELETING: State = State::new(4);

        /// The connection is being repaired to complete creation.
        pub const CREATE_REPAIRING: State = State::new(5);

        /// The connection is being repaired to complete deletion.
        pub const DELETE_REPAIRING: State = State::new(6);

        /// Creates a new State instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("ACTIVE"),
                2 => std::borrow::Cow::Borrowed("FAILED"),
                3 => std::borrow::Cow::Borrowed("CREATING"),
                4 => std::borrow::Cow::Borrowed("DELETING"),
                5 => std::borrow::Cow::Borrowed("CREATE_REPAIRING"),
                6 => std::borrow::Cow::Borrowed("DELETE_REPAIRING"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
                "ACTIVE" => std::option::Option::Some(Self::ACTIVE),
                "FAILED" => std::option::Option::Some(Self::FAILED),
                "CREATING" => std::option::Option::Some(Self::CREATING),
                "DELETING" => std::option::Option::Some(Self::DELETING),
                "CREATE_REPAIRING" => std::option::Option::Some(Self::CREATE_REPAIRING),
                "DELETE_REPAIRING" => std::option::Option::Some(Self::DELETE_REPAIRING),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for State {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for State {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// Request for ListServiceConnectionPolicies.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListServiceConnectionPoliciesRequest {
    /// Required. The parent resource's name. ex. projects/123/locations/us-east1
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of results per page that should be returned.
    pub page_size: i32,

    /// The page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// A filter expression that filters the results listed in the response.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Sort the results by a certain order.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListServiceConnectionPoliciesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListServiceConnectionPoliciesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListServiceConnectionPoliciesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListServiceConnectionPoliciesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListServiceConnectionPoliciesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListServiceConnectionPoliciesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListServiceConnectionPoliciesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListServiceConnectionPoliciesRequest"
    }
}

/// Response for ListServiceConnectionPolicies.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListServiceConnectionPoliciesResponse {
    /// ServiceConnectionPolicies to be returned.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub service_connection_policies: std::vec::Vec<crate::model::ServiceConnectionPolicy>,

    /// The next pagination token in the List response. It should be used as
    /// page_token for the following request. An empty value means no more result.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListServiceConnectionPoliciesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListServiceConnectionPoliciesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [service_connection_policies][crate::model::ListServiceConnectionPoliciesResponse::service_connection_policies].
    pub fn set_service_connection_policies<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ServiceConnectionPolicy>,
    {
        use std::iter::Iterator;
        self.service_connection_policies = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListServiceConnectionPoliciesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListServiceConnectionPoliciesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListServiceConnectionPoliciesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListServiceConnectionPoliciesResponse {
    type PageItem = crate::model::ServiceConnectionPolicy;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.service_connection_policies
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request for GetServiceConnectionPolicy.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetServiceConnectionPolicyRequest {
    /// Required. Name of the ServiceConnectionPolicy to get.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetServiceConnectionPolicyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetServiceConnectionPolicyRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetServiceConnectionPolicyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.GetServiceConnectionPolicyRequest"
    }
}

/// Request for CreateServiceConnectionPolicy.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateServiceConnectionPolicyRequest {
    /// Required. The parent resource's name of the ServiceConnectionPolicy. ex.
    /// projects/123/locations/us-east1
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Resource ID
    /// (i.e. 'foo' in
    /// '[...]/projects/p/locations/l/serviceConnectionPolicies/foo') See
    /// <https://google.aip.dev/122#resource-id-segments> Unique per location.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_connection_policy_id: std::string::String,

    /// Required. Initial values for a new ServiceConnectionPolicies
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub service_connection_policy: std::option::Option<crate::model::ServiceConnectionPolicy>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateServiceConnectionPolicyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateServiceConnectionPolicyRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [service_connection_policy_id][crate::model::CreateServiceConnectionPolicyRequest::service_connection_policy_id].
    pub fn set_service_connection_policy_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.service_connection_policy_id = v.into();
        self
    }

    /// Sets the value of [service_connection_policy][crate::model::CreateServiceConnectionPolicyRequest::service_connection_policy].
    pub fn set_service_connection_policy<
        T: std::convert::Into<std::option::Option<crate::model::ServiceConnectionPolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.service_connection_policy = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateServiceConnectionPolicyRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateServiceConnectionPolicyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.CreateServiceConnectionPolicyRequest"
    }
}

/// Request for UpdateServiceConnectionPolicy.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateServiceConnectionPolicyRequest {
    /// Optional. Field mask is used to specify the fields to be overwritten in the
    /// ServiceConnectionPolicy resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. New values to be patched into the resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub service_connection_policy: std::option::Option<crate::model::ServiceConnectionPolicy>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateServiceConnectionPolicyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateServiceConnectionPolicyRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [service_connection_policy][crate::model::UpdateServiceConnectionPolicyRequest::service_connection_policy].
    pub fn set_service_connection_policy<
        T: std::convert::Into<std::option::Option<crate::model::ServiceConnectionPolicy>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.service_connection_policy = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateServiceConnectionPolicyRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateServiceConnectionPolicyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.UpdateServiceConnectionPolicyRequest"
    }
}

/// Request for DeleteServiceConnectionPolicy.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteServiceConnectionPolicyRequest {
    /// Required. The name of the ServiceConnectionPolicy to delete.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. The etag is computed by the server, and may be sent on update and
    /// delete requests to ensure the client has an up-to-date value before
    /// proceeding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub etag: std::option::Option<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteServiceConnectionPolicyRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteServiceConnectionPolicyRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteServiceConnectionPolicyRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::DeleteServiceConnectionPolicyRequest::etag].
    pub fn set_etag<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.etag = v.into();
        self
    }
}

impl wkt::message::Message for DeleteServiceConnectionPolicyRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.DeleteServiceConnectionPolicyRequest"
    }
}

/// The ServiceClass resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ServiceClass {
    /// Immutable. The name of a ServiceClass resource.
    /// Format:
    /// projects/{project}/locations/{location}/serviceClasses/{service_class}
    /// See: <https://google.aip.dev/122#fields-representing-resource-names>
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The generated service class name. Use this name to refer to
    /// the Service class in Service Connection Maps and Service Connection
    /// Policies.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_class: std::string::String,

    /// Output only. Time when the ServiceClass was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time when the ServiceClass was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// User-defined labels.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// A description of this resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Optional. The etag is computed by the server, and may be sent on update and
    /// delete requests to ensure the client has an up-to-date value before
    /// proceeding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub etag: std::option::Option<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ServiceClass {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ServiceClass::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [service_class][crate::model::ServiceClass::service_class].
    pub fn set_service_class<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.service_class = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ServiceClass::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::ServiceClass::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::ServiceClass::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::ServiceClass::etag].
    pub fn set_etag<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::ServiceClass::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for ServiceClass {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ServiceClass"
    }
}

/// Request for ListServiceClasses.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListServiceClassesRequest {
    /// Required. The parent resource's name. ex. projects/123/locations/us-east1
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of results per page that should be returned.
    pub page_size: i32,

    /// The page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// A filter expression that filters the results listed in the response.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Sort the results by a certain order.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListServiceClassesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListServiceClassesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListServiceClassesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListServiceClassesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListServiceClassesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListServiceClassesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListServiceClassesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListServiceClassesRequest"
    }
}

/// Response for ListServiceClasses.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListServiceClassesResponse {
    /// ServiceClasses to be returned.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub service_classes: std::vec::Vec<crate::model::ServiceClass>,

    /// The next pagination token in the List response. It should be used as
    /// page_token for the following request. An empty value means no more result.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListServiceClassesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListServiceClassesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [service_classes][crate::model::ListServiceClassesResponse::service_classes].
    pub fn set_service_classes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ServiceClass>,
    {
        use std::iter::Iterator;
        self.service_classes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListServiceClassesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListServiceClassesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListServiceClassesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListServiceClassesResponse {
    type PageItem = crate::model::ServiceClass;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.service_classes
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request for GetServiceClass.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetServiceClassRequest {
    /// Required. Name of the ServiceClass to get.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetServiceClassRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetServiceClassRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetServiceClassRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.GetServiceClassRequest"
    }
}

/// Request for UpdateServiceClass.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateServiceClassRequest {
    /// Optional. Field mask is used to specify the fields to be overwritten in the
    /// ServiceClass resource by the update.
    /// The fields specified in the update_mask are relative to the resource, not
    /// the full request. A field will be overwritten if it is in the mask. If the
    /// user does not provide a mask then all fields will be overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. New values to be patched into the resource.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub service_class: std::option::Option<crate::model::ServiceClass>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateServiceClassRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateServiceClassRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [service_class][crate::model::UpdateServiceClassRequest::service_class].
    pub fn set_service_class<
        T: std::convert::Into<std::option::Option<crate::model::ServiceClass>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.service_class = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateServiceClassRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateServiceClassRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.UpdateServiceClassRequest"
    }
}

/// Request for DeleteServiceClass.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteServiceClassRequest {
    /// Required. The name of the ServiceClass to delete.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. The etag is computed by the server, and may be sent on update and
    /// delete requests to ensure the client has an up-to-date value before
    /// proceeding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub etag: std::option::Option<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteServiceClassRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteServiceClassRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteServiceClassRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::DeleteServiceClassRequest::etag].
    pub fn set_etag<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.etag = v.into();
        self
    }
}

impl wkt::message::Message for DeleteServiceClassRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.DeleteServiceClassRequest"
    }
}

/// The ServiceConnectionToken resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ServiceConnectionToken {
    /// Immutable. The name of a ServiceConnectionToken.
    /// Format:
    /// projects/{project}/locations/{location}/ServiceConnectionTokens/{service_connection_token}
    /// See: <https://google.aip.dev/122#fields-representing-resource-names>
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Time when the ServiceConnectionToken was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time when the ServiceConnectionToken was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// User-defined labels.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// A description of this resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// The resource path of the network associated with this token.
    /// Example:
    /// projects/{projectNumOrId}/global/networks/{resourceId}.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub network: std::string::String,

    /// Output only. The token generated by Automation.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub token: std::string::String,

    /// Output only. The time to which this token is valid.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub expire_time: std::option::Option<wkt::Timestamp>,

    /// Optional. The etag is computed by the server, and may be sent on update and
    /// delete requests to ensure the client has an up-to-date value before
    /// proceeding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub etag: std::option::Option<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ServiceConnectionToken {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ServiceConnectionToken::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::ServiceConnectionToken::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::ServiceConnectionToken::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::ServiceConnectionToken::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [network][crate::model::ServiceConnectionToken::network].
    pub fn set_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.network = v.into();
        self
    }

    /// Sets the value of [token][crate::model::ServiceConnectionToken::token].
    pub fn set_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.token = v.into();
        self
    }

    /// Sets the value of [expire_time][crate::model::ServiceConnectionToken::expire_time].
    pub fn set_expire_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.expire_time = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::ServiceConnectionToken::etag].
    pub fn set_etag<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::ServiceConnectionToken::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for ServiceConnectionToken {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ServiceConnectionToken"
    }
}

/// Request for ListServiceConnectionTokens.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListServiceConnectionTokensRequest {
    /// Required. The parent resource's name. ex. projects/123/locations/us-east1
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of results per page that should be returned.
    pub page_size: i32,

    /// The page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// A filter expression that filters the results listed in the response.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Sort the results by a certain order.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListServiceConnectionTokensRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListServiceConnectionTokensRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListServiceConnectionTokensRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListServiceConnectionTokensRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListServiceConnectionTokensRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListServiceConnectionTokensRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListServiceConnectionTokensRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListServiceConnectionTokensRequest"
    }
}

/// Response for ListServiceConnectionTokens.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListServiceConnectionTokensResponse {
    /// ServiceConnectionTokens to be returned.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub service_connection_tokens: std::vec::Vec<crate::model::ServiceConnectionToken>,

    /// The next pagination token in the List response. It should be used as
    /// page_token for the following request. An empty value means no more result.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListServiceConnectionTokensResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListServiceConnectionTokensResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [service_connection_tokens][crate::model::ListServiceConnectionTokensResponse::service_connection_tokens].
    pub fn set_service_connection_tokens<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::ServiceConnectionToken>,
    {
        use std::iter::Iterator;
        self.service_connection_tokens = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListServiceConnectionTokensResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListServiceConnectionTokensResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListServiceConnectionTokensResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListServiceConnectionTokensResponse {
    type PageItem = crate::model::ServiceConnectionToken;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.service_connection_tokens
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request for GetServiceConnectionToken.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetServiceConnectionTokenRequest {
    /// Required. Name of the ServiceConnectionToken to get.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetServiceConnectionTokenRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetServiceConnectionTokenRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetServiceConnectionTokenRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.GetServiceConnectionTokenRequest"
    }
}

/// Request for CreateServiceConnectionToken.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateServiceConnectionTokenRequest {
    /// Required. The parent resource's name of the ServiceConnectionToken. ex.
    /// projects/123/locations/us-east1
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Optional. Resource ID
    /// (i.e. 'foo' in '[...]/projects/p/locations/l/ServiceConnectionTokens/foo')
    /// See <https://google.aip.dev/122#resource-id-segments>
    /// Unique per location.
    /// If one is not provided, one will be generated.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_connection_token_id: std::string::String,

    /// Required. Initial values for a new ServiceConnectionTokens
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub service_connection_token: std::option::Option<crate::model::ServiceConnectionToken>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateServiceConnectionTokenRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateServiceConnectionTokenRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [service_connection_token_id][crate::model::CreateServiceConnectionTokenRequest::service_connection_token_id].
    pub fn set_service_connection_token_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.service_connection_token_id = v.into();
        self
    }

    /// Sets the value of [service_connection_token][crate::model::CreateServiceConnectionTokenRequest::service_connection_token].
    pub fn set_service_connection_token<
        T: std::convert::Into<std::option::Option<crate::model::ServiceConnectionToken>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.service_connection_token = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateServiceConnectionTokenRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateServiceConnectionTokenRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.CreateServiceConnectionTokenRequest"
    }
}

/// Request for DeleteServiceConnectionToken.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteServiceConnectionTokenRequest {
    /// Required. The name of the ServiceConnectionToken to delete.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server will know to
    /// ignore the request if it has already been completed. The server will
    /// guarantee that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, will ignore the second request. This prevents
    /// clients from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. The etag is computed by the server, and may be sent on update and
    /// delete requests to ensure the client has an up-to-date value before
    /// proceeding.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub etag: std::option::Option<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteServiceConnectionTokenRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteServiceConnectionTokenRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteServiceConnectionTokenRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::DeleteServiceConnectionTokenRequest::etag].
    pub fn set_etag<T: std::convert::Into<std::option::Option<std::string::String>>>(
        mut self,
        v: T,
    ) -> Self {
        self.etag = v.into();
        self
    }
}

impl wkt::message::Message for DeleteServiceConnectionTokenRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.DeleteServiceConnectionTokenRequest"
    }
}

/// A Network Connectivity Center hub is a global management resource to which
/// you attach spokes. A single hub can contain spokes from multiple regions.
/// However, if any of a hub's spokes use the site-to-site data transfer feature,
/// the resources associated with those spokes must all be in the same VPC
/// network. Spokes that do not use site-to-site data transfer can be associated
/// with any VPC network in your project.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Hub {
    /// Immutable. The name of the hub. Hub names must be unique. They use the
    /// following form:
    /// `projects/{project_number}/locations/global/hubs/{hub_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The time the hub was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the hub was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional labels in key-value pair format. For more information about
    /// labels, see [Requirements for
    /// labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. An optional description of the hub.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. The Google-generated UUID for the hub. This value is unique
    /// across all hub resources. If a hub is deleted and another with the same
    /// name is created, the new hub is assigned a different unique_id.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub unique_id: std::string::String,

    /// Output only. The current lifecycle state of this hub.
    pub state: crate::model::State,

    /// The VPC networks associated with this hub's spokes.
    ///
    /// This field is read-only. Network Connectivity Center automatically
    /// populates it based on the set of spokes attached to the hub.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub routing_vpcs: std::vec::Vec<crate::model::RoutingVPC>,

    /// Output only. The route tables that belong to this hub. They use the
    /// following form:
    /// `projects/{project_number}/locations/global/hubs/{hub_id}/routeTables/{route_table_id}`
    ///
    /// This field is read-only. Network Connectivity Center automatically
    /// populates it based on the route tables nested under the hub.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub route_tables: std::vec::Vec<std::string::String>,

    /// Output only. A summary of the spokes associated with a hub. The
    /// summary includes a count of spokes according to type
    /// and according to state. If any spokes are inactive,
    /// the summary also lists the reasons they are inactive,
    /// including a count for each reason.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub spoke_summary: std::option::Option<crate::model::SpokeSummary>,

    /// Optional. The policy mode of this hub. This field can be either
    /// PRESET or CUSTOM. If unspecified, the
    /// policy_mode defaults to PRESET.
    pub policy_mode: crate::model::PolicyMode,

    /// Optional. The topology implemented in this hub. Currently, this field is
    /// only used when policy_mode = PRESET. The available preset topologies are
    /// MESH and STAR. If preset_topology is unspecified and policy_mode = PRESET,
    /// the preset_topology defaults to MESH. When policy_mode = CUSTOM,
    /// the preset_topology is set to PRESET_TOPOLOGY_UNSPECIFIED.
    pub preset_topology: crate::model::PresetTopology,

    /// Optional. Whether Private Service Connect connection propagation is enabled
    /// for the hub. If true, Private Service Connect endpoints in VPC spokes
    /// attached to the hub are made accessible to other VPC spokes attached to the
    /// hub. The default value is false.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub export_psc: std::option::Option<bool>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Hub {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Hub::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Hub::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Hub::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Hub::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [unique_id][crate::model::Hub::unique_id].
    pub fn set_unique_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.unique_id = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Hub::state].
    pub fn set_state<T: std::convert::Into<crate::model::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [spoke_summary][crate::model::Hub::spoke_summary].
    pub fn set_spoke_summary<
        T: std::convert::Into<std::option::Option<crate::model::SpokeSummary>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.spoke_summary = v.into();
        self
    }

    /// Sets the value of [policy_mode][crate::model::Hub::policy_mode].
    pub fn set_policy_mode<T: std::convert::Into<crate::model::PolicyMode>>(
        mut self,
        v: T,
    ) -> Self {
        self.policy_mode = v.into();
        self
    }

    /// Sets the value of [preset_topology][crate::model::Hub::preset_topology].
    pub fn set_preset_topology<T: std::convert::Into<crate::model::PresetTopology>>(
        mut self,
        v: T,
    ) -> Self {
        self.preset_topology = v.into();
        self
    }

    /// Sets the value of [export_psc][crate::model::Hub::export_psc].
    pub fn set_export_psc<T: std::convert::Into<std::option::Option<bool>>>(
        mut self,
        v: T,
    ) -> Self {
        self.export_psc = v.into();
        self
    }

    /// Sets the value of [routing_vpcs][crate::model::Hub::routing_vpcs].
    pub fn set_routing_vpcs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::RoutingVPC>,
    {
        use std::iter::Iterator;
        self.routing_vpcs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [route_tables][crate::model::Hub::route_tables].
    pub fn set_route_tables<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.route_tables = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::Hub::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Hub {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.Hub"
    }
}

/// RoutingVPC contains information about the VPC networks associated
/// with the spokes of a Network Connectivity Center hub.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RoutingVPC {
    /// The URI of the VPC network.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,

    /// Output only. If true, indicates that this VPC network is currently
    /// associated with spokes that use the data transfer feature (spokes where the
    /// site_to_site_data_transfer field is set to true). If you create new spokes
    /// that use data transfer, they must be associated with this VPC network. At
    /// most, one VPC network will have this field set to true.
    pub required_for_new_site_to_site_data_transfer_spokes: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RoutingVPC {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [uri][crate::model::RoutingVPC::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }

    /// Sets the value of [required_for_new_site_to_site_data_transfer_spokes][crate::model::RoutingVPC::required_for_new_site_to_site_data_transfer_spokes].
    pub fn set_required_for_new_site_to_site_data_transfer_spokes<T: std::convert::Into<bool>>(
        mut self,
        v: T,
    ) -> Self {
        self.required_for_new_site_to_site_data_transfer_spokes = v.into();
        self
    }
}

impl wkt::message::Message for RoutingVPC {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.RoutingVPC"
    }
}

/// A Network Connectivity Center spoke represents one or more network
/// connectivity resources.
///
/// When you create a spoke, you associate it with a hub. You must also
/// identify a value for exactly one of the following fields:
///
/// * linked_vpn_tunnels
/// * linked_interconnect_attachments
/// * linked_router_appliance_instances
/// * linked_vpc_network
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Spoke {
    /// Immutable. The name of the spoke. Spoke names must be unique. They use the
    /// following form:
    /// `projects/{project_number}/locations/{region}/spokes/{spoke_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The time the spoke was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the spoke was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional labels in key-value pair format. For more information about
    /// labels, see [Requirements for
    /// labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. An optional description of the spoke.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Immutable. The name of the hub that this spoke is attached to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub hub: std::string::String,

    /// Optional. The name of the group that this spoke is associated with.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub group: std::string::String,

    /// Optional. VPN tunnels that are associated with the spoke.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub linked_vpn_tunnels: std::option::Option<crate::model::LinkedVpnTunnels>,

    /// Optional. VLAN attachments that are associated with the spoke.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub linked_interconnect_attachments:
        std::option::Option<crate::model::LinkedInterconnectAttachments>,

    /// Optional. Router appliance instances that are associated with the spoke.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub linked_router_appliance_instances:
        std::option::Option<crate::model::LinkedRouterApplianceInstances>,

    /// Optional. VPC network that is associated with the spoke.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub linked_vpc_network: std::option::Option<crate::model::LinkedVpcNetwork>,

    /// Optional. The linked producer VPC that is associated with the spoke.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub linked_producer_vpc_network: std::option::Option<crate::model::LinkedProducerVpcNetwork>,

    /// Output only. The Google-generated UUID for the spoke. This value is unique
    /// across all spoke resources. If a spoke is deleted and another with the same
    /// name is created, the new spoke is assigned a different `unique_id`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub unique_id: std::string::String,

    /// Output only. The current lifecycle state of this spoke.
    pub state: crate::model::State,

    /// Output only. The reasons for current state of the spoke.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub reasons: std::vec::Vec<crate::model::spoke::StateReason>,

    /// Output only. The type of resource associated with the spoke.
    pub spoke_type: crate::model::SpokeType,

    /// Optional. This checksum is computed by the server based on the value of
    /// other fields, and may be sent on update and delete requests to ensure the
    /// client has an up-to-date value before proceeding.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub etag: std::string::String,

    /// Optional. The list of fields waiting for hub administration's approval.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub field_paths_pending_update: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Spoke {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Spoke::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Spoke::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Spoke::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Spoke::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [hub][crate::model::Spoke::hub].
    pub fn set_hub<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.hub = v.into();
        self
    }

    /// Sets the value of [group][crate::model::Spoke::group].
    pub fn set_group<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.group = v.into();
        self
    }

    /// Sets the value of [linked_vpn_tunnels][crate::model::Spoke::linked_vpn_tunnels].
    pub fn set_linked_vpn_tunnels<
        T: std::convert::Into<std::option::Option<crate::model::LinkedVpnTunnels>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.linked_vpn_tunnels = v.into();
        self
    }

    /// Sets the value of [linked_interconnect_attachments][crate::model::Spoke::linked_interconnect_attachments].
    pub fn set_linked_interconnect_attachments<
        T: std::convert::Into<std::option::Option<crate::model::LinkedInterconnectAttachments>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.linked_interconnect_attachments = v.into();
        self
    }

    /// Sets the value of [linked_router_appliance_instances][crate::model::Spoke::linked_router_appliance_instances].
    pub fn set_linked_router_appliance_instances<
        T: std::convert::Into<std::option::Option<crate::model::LinkedRouterApplianceInstances>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.linked_router_appliance_instances = v.into();
        self
    }

    /// Sets the value of [linked_vpc_network][crate::model::Spoke::linked_vpc_network].
    pub fn set_linked_vpc_network<
        T: std::convert::Into<std::option::Option<crate::model::LinkedVpcNetwork>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.linked_vpc_network = v.into();
        self
    }

    /// Sets the value of [linked_producer_vpc_network][crate::model::Spoke::linked_producer_vpc_network].
    pub fn set_linked_producer_vpc_network<
        T: std::convert::Into<std::option::Option<crate::model::LinkedProducerVpcNetwork>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.linked_producer_vpc_network = v.into();
        self
    }

    /// Sets the value of [unique_id][crate::model::Spoke::unique_id].
    pub fn set_unique_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.unique_id = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Spoke::state].
    pub fn set_state<T: std::convert::Into<crate::model::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [spoke_type][crate::model::Spoke::spoke_type].
    pub fn set_spoke_type<T: std::convert::Into<crate::model::SpokeType>>(mut self, v: T) -> Self {
        self.spoke_type = v.into();
        self
    }

    /// Sets the value of [etag][crate::model::Spoke::etag].
    pub fn set_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.etag = v.into();
        self
    }

    /// Sets the value of [reasons][crate::model::Spoke::reasons].
    pub fn set_reasons<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::spoke::StateReason>,
    {
        use std::iter::Iterator;
        self.reasons = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [field_paths_pending_update][crate::model::Spoke::field_paths_pending_update].
    pub fn set_field_paths_pending_update<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.field_paths_pending_update = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::Spoke::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Spoke {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.Spoke"
    }
}

/// Defines additional types related to [Spoke].
pub mod spoke {
    #[allow(unused_imports)]
    use super::*;

    /// The reason a spoke is inactive.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct StateReason {
        /// The code associated with this reason.
        pub code: crate::model::spoke::state_reason::Code,

        /// Human-readable details about this reason.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub message: std::string::String,

        /// Additional information provided by the user in the RejectSpoke call.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub user_details: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl StateReason {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [code][crate::model::spoke::StateReason::code].
        pub fn set_code<T: std::convert::Into<crate::model::spoke::state_reason::Code>>(
            mut self,
            v: T,
        ) -> Self {
            self.code = v.into();
            self
        }

        /// Sets the value of [message][crate::model::spoke::StateReason::message].
        pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.message = v.into();
            self
        }

        /// Sets the value of [user_details][crate::model::spoke::StateReason::user_details].
        pub fn set_user_details<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.user_details = v.into();
            self
        }
    }

    impl wkt::message::Message for StateReason {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkconnectivity.v1.Spoke.StateReason"
        }
    }

    /// Defines additional types related to [StateReason].
    pub mod state_reason {
        #[allow(unused_imports)]
        use super::*;

        /// The Code enum represents the various reasons a state can be `INACTIVE`.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct Code(i32);

        impl Code {
            /// No information available.
            pub const CODE_UNSPECIFIED: Code = Code::new(0);

            /// The proposed spoke is pending review.
            pub const PENDING_REVIEW: Code = Code::new(1);

            /// The proposed spoke has been rejected by the hub administrator.
            pub const REJECTED: Code = Code::new(2);

            /// The spoke has been deactivated internally.
            pub const PAUSED: Code = Code::new(3);

            /// Network Connectivity Center encountered errors while accepting
            /// the spoke.
            pub const FAILED: Code = Code::new(4);

            /// The proposed spoke update is pending review.
            pub const UPDATE_PENDING_REVIEW: Code = Code::new(5);

            /// The proposed spoke update has been rejected by the hub administrator.
            pub const UPDATE_REJECTED: Code = Code::new(6);

            /// Network Connectivity Center encountered errors while accepting
            /// the spoke update.
            pub const UPDATE_FAILED: Code = Code::new(7);

            /// Creates a new Code instance.
            pub(crate) const fn new(value: i32) -> Self {
                Self(value)
            }

            /// Gets the enum value.
            pub fn value(&self) -> i32 {
                self.0
            }

            /// Gets the enum value as a string.
            pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
                match self.0 {
                    0 => std::borrow::Cow::Borrowed("CODE_UNSPECIFIED"),
                    1 => std::borrow::Cow::Borrowed("PENDING_REVIEW"),
                    2 => std::borrow::Cow::Borrowed("REJECTED"),
                    3 => std::borrow::Cow::Borrowed("PAUSED"),
                    4 => std::borrow::Cow::Borrowed("FAILED"),
                    5 => std::borrow::Cow::Borrowed("UPDATE_PENDING_REVIEW"),
                    6 => std::borrow::Cow::Borrowed("UPDATE_REJECTED"),
                    7 => std::borrow::Cow::Borrowed("UPDATE_FAILED"),
                    _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
                }
            }

            /// Creates an enum value from the value name.
            pub fn from_str_name(name: &str) -> std::option::Option<Self> {
                match name {
                    "CODE_UNSPECIFIED" => std::option::Option::Some(Self::CODE_UNSPECIFIED),
                    "PENDING_REVIEW" => std::option::Option::Some(Self::PENDING_REVIEW),
                    "REJECTED" => std::option::Option::Some(Self::REJECTED),
                    "PAUSED" => std::option::Option::Some(Self::PAUSED),
                    "FAILED" => std::option::Option::Some(Self::FAILED),
                    "UPDATE_PENDING_REVIEW" => {
                        std::option::Option::Some(Self::UPDATE_PENDING_REVIEW)
                    }
                    "UPDATE_REJECTED" => std::option::Option::Some(Self::UPDATE_REJECTED),
                    "UPDATE_FAILED" => std::option::Option::Some(Self::UPDATE_FAILED),
                    _ => std::option::Option::None,
                }
            }
        }

        impl std::convert::From<i32> for Code {
            fn from(value: i32) -> Self {
                Self::new(value)
            }
        }

        impl std::default::Default for Code {
            fn default() -> Self {
                Self::new(0)
            }
        }
    }
}

#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RouteTable {
    /// Immutable. The name of the route table. Route table names must be unique.
    /// They use the following form:
    /// `projects/{project_number}/locations/global/hubs/{hub}/routeTables/{route_table_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The time the route table was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the route table was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional labels in key-value pair format. For more information about
    /// labels, see [Requirements for
    /// labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// An optional description of the route table.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. The Google-generated UUID for the route table. This value is
    /// unique across all route table resources. If a route table is deleted and
    /// another with the same name is created, the new route table is assigned
    /// a different `uid`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uid: std::string::String,

    /// Output only. The current lifecycle state of this route table.
    pub state: crate::model::State,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RouteTable {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::RouteTable::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::RouteTable::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::RouteTable::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::RouteTable::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [uid][crate::model::RouteTable::uid].
    pub fn set_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uid = v.into();
        self
    }

    /// Sets the value of [state][crate::model::RouteTable::state].
    pub fn set_state<T: std::convert::Into<crate::model::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::RouteTable::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for RouteTable {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.RouteTable"
    }
}

/// A route defines a path from VM instances within a spoke to a specific
/// destination resource. Only VPC spokes have routes.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Route {
    /// Immutable. The name of the route. Route names must be unique. Route names
    /// use the following form:
    /// `projects/{project_number}/locations/global/hubs/{hub}/routeTables/{route_table_id}/routes/{route_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The time the route was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the route was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// The destination IP address range.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub ip_cidr_range: std::string::String,

    /// Output only. The route's type. Its type is determined by the properties of
    /// its IP address range.
    #[serde(rename = "type")]
    pub r#type: crate::model::RouteType,

    /// Immutable. The destination VPC network for packets on this route.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub next_hop_vpc_network: std::option::Option<crate::model::NextHopVpcNetwork>,

    /// Optional labels in key-value pair format. For more information about
    /// labels, see [Requirements for
    /// labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// An optional description of the route.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. The Google-generated UUID for the route. This value is unique
    /// across all Network Connectivity Center route resources. If a
    /// route is deleted and another with the same name is created,
    /// the new route is assigned a different `uid`.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uid: std::string::String,

    /// Output only. The current lifecycle state of the route.
    pub state: crate::model::State,

    /// Immutable. The spoke that this route leads to.
    /// Example: projects/12345/locations/global/spokes/SPOKE
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub spoke: std::string::String,

    /// Output only. The origin location of the route.
    /// Uses the following form: "projects/{project}/locations/{location}"
    /// Example: projects/1234/locations/us-central1
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub location: std::string::String,

    /// Output only. The priority of this route. Priority is used to break ties in
    /// cases where a destination matches more than one route. In these cases the
    /// route with the lowest-numbered priority value wins.
    #[serde_as(as = "serde_with::DisplayFromStr")]
    pub priority: i64,

    /// Immutable. The next-hop VPN tunnel for packets on this route.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub next_hop_vpn_tunnel: std::option::Option<crate::model::NextHopVPNTunnel>,

    /// Immutable. The next-hop Router appliance instance for packets on this
    /// route.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub next_hop_router_appliance_instance:
        std::option::Option<crate::model::NextHopRouterApplianceInstance>,

    /// Immutable. The next-hop VLAN attachment for packets on this route.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub next_hop_interconnect_attachment:
        std::option::Option<crate::model::NextHopInterconnectAttachment>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Route {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Route::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Route::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Route::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [ip_cidr_range][crate::model::Route::ip_cidr_range].
    pub fn set_ip_cidr_range<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.ip_cidr_range = v.into();
        self
    }

    /// Sets the value of [r#type][crate::model::Route::type].
    pub fn set_type<T: std::convert::Into<crate::model::RouteType>>(mut self, v: T) -> Self {
        self.r#type = v.into();
        self
    }

    /// Sets the value of [next_hop_vpc_network][crate::model::Route::next_hop_vpc_network].
    pub fn set_next_hop_vpc_network<
        T: std::convert::Into<std::option::Option<crate::model::NextHopVpcNetwork>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.next_hop_vpc_network = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Route::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [uid][crate::model::Route::uid].
    pub fn set_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uid = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Route::state].
    pub fn set_state<T: std::convert::Into<crate::model::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [spoke][crate::model::Route::spoke].
    pub fn set_spoke<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.spoke = v.into();
        self
    }

    /// Sets the value of [location][crate::model::Route::location].
    pub fn set_location<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.location = v.into();
        self
    }

    /// Sets the value of [priority][crate::model::Route::priority].
    pub fn set_priority<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
        self.priority = v.into();
        self
    }

    /// Sets the value of [next_hop_vpn_tunnel][crate::model::Route::next_hop_vpn_tunnel].
    pub fn set_next_hop_vpn_tunnel<
        T: std::convert::Into<std::option::Option<crate::model::NextHopVPNTunnel>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.next_hop_vpn_tunnel = v.into();
        self
    }

    /// Sets the value of [next_hop_router_appliance_instance][crate::model::Route::next_hop_router_appliance_instance].
    pub fn set_next_hop_router_appliance_instance<
        T: std::convert::Into<std::option::Option<crate::model::NextHopRouterApplianceInstance>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.next_hop_router_appliance_instance = v.into();
        self
    }

    /// Sets the value of [next_hop_interconnect_attachment][crate::model::Route::next_hop_interconnect_attachment].
    pub fn set_next_hop_interconnect_attachment<
        T: std::convert::Into<std::option::Option<crate::model::NextHopInterconnectAttachment>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.next_hop_interconnect_attachment = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::Route::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Route {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.Route"
    }
}

/// A group represents a subset of spokes attached to a hub.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct Group {
    /// Immutable. The name of the group. Group names must be unique. They
    /// use the following form:
    /// `projects/{project_number}/locations/global/hubs/{hub}/groups/{group_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. The time the group was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. The time the group was last updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// Optional. Labels in key-value pair format. For more information about
    /// labels, see [Requirements for
    /// labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. The description of the group.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Output only. The Google-generated UUID for the group. This value is unique
    /// across all group resources. If a group is deleted and
    /// another with the same name is created, the new route table is assigned
    /// a different unique_id.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uid: std::string::String,

    /// Output only. The current lifecycle state of this group.
    pub state: crate::model::State,

    /// Optional. The auto-accept setting for this group.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub auto_accept: std::option::Option<crate::model::AutoAccept>,

    /// Output only. The name of the route table that corresponds to this group.
    /// They use the following form:
    /// `projects/{project_number}/locations/global/hubs/{hub_id}/routeTables/{route_table_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub route_table: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl Group {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::Group::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::Group::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::Group::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::Group::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [uid][crate::model::Group::uid].
    pub fn set_uid<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uid = v.into();
        self
    }

    /// Sets the value of [state][crate::model::Group::state].
    pub fn set_state<T: std::convert::Into<crate::model::State>>(mut self, v: T) -> Self {
        self.state = v.into();
        self
    }

    /// Sets the value of [auto_accept][crate::model::Group::auto_accept].
    pub fn set_auto_accept<T: std::convert::Into<std::option::Option<crate::model::AutoAccept>>>(
        mut self,
        v: T,
    ) -> Self {
        self.auto_accept = v.into();
        self
    }

    /// Sets the value of [route_table][crate::model::Group::route_table].
    pub fn set_route_table<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.route_table = v.into();
        self
    }

    /// Sets the value of [labels][crate::model::Group::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }
}

impl wkt::message::Message for Group {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.Group"
    }
}

/// The auto-accept setting for a group controls whether
/// proposed spokes are automatically attached to the hub. If auto-accept is
/// enabled, the spoke immediately is attached to the hub and becomes part of the
/// group. In this case, the new spoke is in the ACTIVE state.
/// If auto-accept is disabled, the spoke goes to the INACTIVE
/// state, and it must be reviewed and accepted by a hub
/// administrator.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AutoAccept {
    /// Optional. A list of project ids or project numbers for which you want
    /// to enable auto-accept. The auto-accept setting is applied to
    /// spokes being created or updated in these projects.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub auto_accept_projects: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AutoAccept {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [auto_accept_projects][crate::model::AutoAccept::auto_accept_projects].
    pub fn set_auto_accept_projects<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.auto_accept_projects = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for AutoAccept {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.AutoAccept"
    }
}

/// Request for
/// [HubService.ListHubs][google.cloud.networkconnectivity.v1.HubService.ListHubs]
/// method.
///
/// [google.cloud.networkconnectivity.v1.HubService.ListHubs]: crate::client::HubService::list_hubs
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListHubsRequest {
    /// Required. The parent resource's name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of results per page to return.
    pub page_size: i32,

    /// The page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// An expression that filters the list of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Sort the results by a certain order.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListHubsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListHubsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListHubsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListHubsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListHubsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListHubsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListHubsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListHubsRequest"
    }
}

/// Response for
/// [HubService.ListHubs][google.cloud.networkconnectivity.v1.HubService.ListHubs]
/// method.
///
/// [google.cloud.networkconnectivity.v1.HubService.ListHubs]: crate::client::HubService::list_hubs
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListHubsResponse {
    /// The requested hubs.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub hubs: std::vec::Vec<crate::model::Hub>,

    /// The token for the next page of the response. To see more results,
    /// use this value as the page_token for your next request. If this value
    /// is empty, there are no more results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListHubsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListHubsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [hubs][crate::model::ListHubsResponse::hubs].
    pub fn set_hubs<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Hub>,
    {
        use std::iter::Iterator;
        self.hubs = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListHubsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListHubsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListHubsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListHubsResponse {
    type PageItem = crate::model::Hub;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.hubs
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request for
/// [HubService.GetHub][google.cloud.networkconnectivity.v1.HubService.GetHub]
/// method.
///
/// [google.cloud.networkconnectivity.v1.HubService.GetHub]: crate::client::HubService::get_hub
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetHubRequest {
    /// Required. The name of the hub resource to get.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetHubRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetHubRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetHubRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.GetHubRequest"
    }
}

/// Request for
/// [HubService.CreateHub][google.cloud.networkconnectivity.v1.HubService.CreateHub]
/// method.
///
/// [google.cloud.networkconnectivity.v1.HubService.CreateHub]: crate::client::HubService::create_hub
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateHubRequest {
    /// Required. The parent resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. A unique identifier for the hub.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub hub_id: std::string::String,

    /// Required. The initial values for a new hub.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub hub: std::option::Option<crate::model::Hub>,

    /// Optional. A request ID to identify requests. Specify a unique request ID so
    /// that if you must retry your request, the server knows to ignore the request
    /// if it has already been completed. The server guarantees that a request
    /// doesn't result in creation of duplicate commitments for at least 60
    /// minutes.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check to see whether the original operation
    /// was received. If it was, the server ignores the second request. This
    /// behavior prevents clients from mistakenly creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID, with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateHubRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateHubRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [hub_id][crate::model::CreateHubRequest::hub_id].
    pub fn set_hub_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.hub_id = v.into();
        self
    }

    /// Sets the value of [hub][crate::model::CreateHubRequest::hub].
    pub fn set_hub<T: std::convert::Into<std::option::Option<crate::model::Hub>>>(
        mut self,
        v: T,
    ) -> Self {
        self.hub = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateHubRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateHubRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.CreateHubRequest"
    }
}

/// Request for
/// [HubService.UpdateHub][google.cloud.networkconnectivity.v1.HubService.UpdateHub]
/// method.
///
/// [google.cloud.networkconnectivity.v1.HubService.UpdateHub]: crate::client::HubService::update_hub
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateHubRequest {
    /// Optional. In the case of an update to an existing hub, field mask is used
    /// to specify the fields to be overwritten. The fields specified in the
    /// update_mask are relative to the resource, not the full request. A field is
    /// overwritten if it is in the mask. If the user does not provide a mask, then
    /// all fields are overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The state that the hub should be in after the update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub hub: std::option::Option<crate::model::Hub>,

    /// Optional. A request ID to identify requests. Specify a unique request ID so
    /// that if you must retry your request, the server knows to ignore the request
    /// if it has already been completed. The server guarantees that a request
    /// doesn't result in creation of duplicate commitments for at least 60
    /// minutes.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check to see whether the original operation
    /// was received. If it was, the server ignores the second request. This
    /// behavior prevents clients from mistakenly creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID, with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateHubRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateHubRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [hub][crate::model::UpdateHubRequest::hub].
    pub fn set_hub<T: std::convert::Into<std::option::Option<crate::model::Hub>>>(
        mut self,
        v: T,
    ) -> Self {
        self.hub = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateHubRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateHubRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.UpdateHubRequest"
    }
}

/// The request for
/// [HubService.DeleteHub][google.cloud.networkconnectivity.v1.HubService.DeleteHub].
///
/// [google.cloud.networkconnectivity.v1.HubService.DeleteHub]: crate::client::HubService::delete_hub
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteHubRequest {
    /// Required. The name of the hub to delete.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. A request ID to identify requests. Specify a unique request ID so
    /// that if you must retry your request, the server knows to ignore the request
    /// if it has already been completed. The server guarantees that a request
    /// doesn't result in creation of duplicate commitments for at least 60
    /// minutes.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check to see whether the original operation
    /// was received. If it was, the server ignores the second request. This
    /// behavior prevents clients from mistakenly creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID, with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteHubRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteHubRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteHubRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteHubRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.DeleteHubRequest"
    }
}

/// The request for
/// [HubService.ListHubSpokes][google.cloud.networkconnectivity.v1.HubService.ListHubSpokes].
///
/// [google.cloud.networkconnectivity.v1.HubService.ListHubSpokes]: crate::client::HubService::list_hub_spokes
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListHubSpokesRequest {
    /// Required. The name of the hub.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// A list of locations.
    /// Specify one of the following: `[global]`, a single region (for
    /// example, `[us-central1]`), or a combination of
    /// values (for example, `[global, us-central1, us-west1]`).
    /// If the spoke_locations field is populated, the list of results
    /// includes only spokes in the specified location.
    /// If the spoke_locations field is not populated, the list of results
    /// includes spokes in all locations.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub spoke_locations: std::vec::Vec<std::string::String>,

    /// The maximum number of results to return per page.
    pub page_size: i32,

    /// The page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// An expression that filters the list of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Sort the results by name or create_time.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    /// The view of the spoke to return.
    /// The view that you use determines which spoke fields are included in the
    /// response.
    pub view: crate::model::list_hub_spokes_request::SpokeView,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListHubSpokesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::ListHubSpokesRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListHubSpokesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListHubSpokesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListHubSpokesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListHubSpokesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }

    /// Sets the value of [view][crate::model::ListHubSpokesRequest::view].
    pub fn set_view<T: std::convert::Into<crate::model::list_hub_spokes_request::SpokeView>>(
        mut self,
        v: T,
    ) -> Self {
        self.view = v.into();
        self
    }

    /// Sets the value of [spoke_locations][crate::model::ListHubSpokesRequest::spoke_locations].
    pub fn set_spoke_locations<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.spoke_locations = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListHubSpokesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListHubSpokesRequest"
    }
}

/// Defines additional types related to [ListHubSpokesRequest].
pub mod list_hub_spokes_request {
    #[allow(unused_imports)]
    use super::*;

    /// Enum that controls which spoke fields are included in the response.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct SpokeView(i32);

    impl SpokeView {
        /// The spoke view is unspecified. When the spoke view is unspecified, the
        /// API returns the same fields as the `BASIC` view.
        pub const SPOKE_VIEW_UNSPECIFIED: SpokeView = SpokeView::new(0);

        /// Includes `name`, `create_time`, `hub`, `unique_id`, `state`, `reasons`,
        /// and `spoke_type`. This is the default value.
        pub const BASIC: SpokeView = SpokeView::new(1);

        /// Includes all spoke fields except `labels`.
        /// You can use the `DETAILED` view only when you set the `spoke_locations`
        /// field to `[global]`.
        pub const DETAILED: SpokeView = SpokeView::new(2);

        /// Creates a new SpokeView instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("SPOKE_VIEW_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("BASIC"),
                2 => std::borrow::Cow::Borrowed("DETAILED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "SPOKE_VIEW_UNSPECIFIED" => std::option::Option::Some(Self::SPOKE_VIEW_UNSPECIFIED),
                "BASIC" => std::option::Option::Some(Self::BASIC),
                "DETAILED" => std::option::Option::Some(Self::DETAILED),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for SpokeView {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for SpokeView {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// The response for
/// [HubService.ListHubSpokes][google.cloud.networkconnectivity.v1.HubService.ListHubSpokes].
///
/// [google.cloud.networkconnectivity.v1.HubService.ListHubSpokes]: crate::client::HubService::list_hub_spokes
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListHubSpokesResponse {
    /// The requested spokes.
    /// The spoke fields can be partially populated based on the `view` field in
    /// the request message.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub spokes: std::vec::Vec<crate::model::Spoke>,

    /// The token for the next page of the response. To see more results,
    /// use this value as the page_token for your next request. If this value
    /// is empty, there are no more results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListHubSpokesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListHubSpokesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [spokes][crate::model::ListHubSpokesResponse::spokes].
    pub fn set_spokes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Spoke>,
    {
        use std::iter::Iterator;
        self.spokes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListHubSpokesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListHubSpokesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListHubSpokesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListHubSpokesResponse {
    type PageItem = crate::model::Spoke;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.spokes
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request for
/// [HubService.QueryHubStatus][google.cloud.networkconnectivity.v1.HubService.QueryHubStatus].
///
/// [google.cloud.networkconnectivity.v1.HubService.QueryHubStatus]: crate::client::HubService::query_hub_status
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct QueryHubStatusRequest {
    /// Required. The name of the hub.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. The maximum number of results to return per page.
    pub page_size: i32,

    /// Optional. The page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// Optional. An expression that filters the list of results.
    /// The filter can be used to filter the results by the following fields:
    ///
    /// * `psc_propagation_status.source_spoke`
    /// * `psc_propagation_status.source_group`
    /// * `psc_propagation_status.source_forwarding_rule`
    /// * `psc_propagation_status.target_spoke`
    /// * `psc_propagation_status.target_group`
    /// * `psc_propagation_status.code`
    /// * `psc_propagation_status.message`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Optional. Sort the results in ascending order by the specified fields.
    /// A comma-separated list of any of these fields:
    ///
    /// * `psc_propagation_status.source_spoke`
    /// * `psc_propagation_status.source_group`
    /// * `psc_propagation_status.source_forwarding_rule`
    /// * `psc_propagation_status.target_spoke`
    /// * `psc_propagation_status.target_group`
    /// * `psc_propagation_status.code`
    ///   If `group_by` is set, the value of the `order_by` field must be the
    ///   same as or a subset of the `group_by` field.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    /// Optional. Aggregate the results by the specified fields.
    /// A comma-separated list of any of these fields:
    ///
    /// * `psc_propagation_status.source_spoke`
    /// * `psc_propagation_status.source_group`
    /// * `psc_propagation_status.source_forwarding_rule`
    /// * `psc_propagation_status.target_spoke`
    /// * `psc_propagation_status.target_group`
    /// * `psc_propagation_status.code`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub group_by: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl QueryHubStatusRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::QueryHubStatusRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::QueryHubStatusRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::QueryHubStatusRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::QueryHubStatusRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::QueryHubStatusRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }

    /// Sets the value of [group_by][crate::model::QueryHubStatusRequest::group_by].
    pub fn set_group_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.group_by = v.into();
        self
    }
}

impl wkt::message::Message for QueryHubStatusRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.QueryHubStatusRequest"
    }
}

/// The response for
/// [HubService.QueryHubStatus][google.cloud.networkconnectivity.v1.HubService.QueryHubStatus].
///
/// [google.cloud.networkconnectivity.v1.HubService.QueryHubStatus]: crate::client::HubService::query_hub_status
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct QueryHubStatusResponse {
    /// The list of hub status.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub hub_status_entries: std::vec::Vec<crate::model::HubStatusEntry>,

    /// The token for the next page of the response. To see more results,
    /// use this value as the page_token for your next request. If this value
    /// is empty, there are no more results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl QueryHubStatusResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::QueryHubStatusResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [hub_status_entries][crate::model::QueryHubStatusResponse::hub_status_entries].
    pub fn set_hub_status_entries<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::HubStatusEntry>,
    {
        use std::iter::Iterator;
        self.hub_status_entries = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for QueryHubStatusResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.QueryHubStatusResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for QueryHubStatusResponse {
    type PageItem = crate::model::HubStatusEntry;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.hub_status_entries
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// A hub status entry represents the status of a set of propagated Private
/// Service Connect connections grouped by certain fields.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct HubStatusEntry {
    /// The number of propagated Private Service Connect connections with this
    /// status. If the `group_by` field was not set in the request message, the
    /// value of this field is 1.
    pub count: i32,

    /// The fields that this entry is grouped by. This has the same value as the
    /// `group_by` field in the request message.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub group_by: std::string::String,

    /// The Private Service Connect propagation status.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub psc_propagation_status: std::option::Option<crate::model::PscPropagationStatus>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl HubStatusEntry {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [count][crate::model::HubStatusEntry::count].
    pub fn set_count<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.count = v.into();
        self
    }

    /// Sets the value of [group_by][crate::model::HubStatusEntry::group_by].
    pub fn set_group_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.group_by = v.into();
        self
    }

    /// Sets the value of [psc_propagation_status][crate::model::HubStatusEntry::psc_propagation_status].
    pub fn set_psc_propagation_status<
        T: std::convert::Into<std::option::Option<crate::model::PscPropagationStatus>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.psc_propagation_status = v.into();
        self
    }
}

impl wkt::message::Message for HubStatusEntry {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.HubStatusEntry"
    }
}

/// The status of one or more propagated Private Service Connect connections in a
/// hub.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PscPropagationStatus {
    /// The name of the spoke that the source forwarding rule belongs to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source_spoke: std::string::String,

    /// The name of the group that the source spoke belongs to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source_group: std::string::String,

    /// The name of the forwarding rule exported to the hub.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub source_forwarding_rule: std::string::String,

    /// The name of the spoke that the source forwarding rule propagates to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_spoke: std::string::String,

    /// The name of the group that the target spoke belongs to.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub target_group: std::string::String,

    /// The propagation status.
    pub code: crate::model::psc_propagation_status::Code,

    /// The human-readable summary of the Private Service Connect connection
    /// propagation status.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub message: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl PscPropagationStatus {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [source_spoke][crate::model::PscPropagationStatus::source_spoke].
    pub fn set_source_spoke<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source_spoke = v.into();
        self
    }

    /// Sets the value of [source_group][crate::model::PscPropagationStatus::source_group].
    pub fn set_source_group<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.source_group = v.into();
        self
    }

    /// Sets the value of [source_forwarding_rule][crate::model::PscPropagationStatus::source_forwarding_rule].
    pub fn set_source_forwarding_rule<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.source_forwarding_rule = v.into();
        self
    }

    /// Sets the value of [target_spoke][crate::model::PscPropagationStatus::target_spoke].
    pub fn set_target_spoke<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_spoke = v.into();
        self
    }

    /// Sets the value of [target_group][crate::model::PscPropagationStatus::target_group].
    pub fn set_target_group<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.target_group = v.into();
        self
    }

    /// Sets the value of [code][crate::model::PscPropagationStatus::code].
    pub fn set_code<T: std::convert::Into<crate::model::psc_propagation_status::Code>>(
        mut self,
        v: T,
    ) -> Self {
        self.code = v.into();
        self
    }

    /// Sets the value of [message][crate::model::PscPropagationStatus::message].
    pub fn set_message<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.message = v.into();
        self
    }
}

impl wkt::message::Message for PscPropagationStatus {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.PscPropagationStatus"
    }
}

/// Defines additional types related to [PscPropagationStatus].
pub mod psc_propagation_status {
    #[allow(unused_imports)]
    use super::*;

    /// The Code enum represents the state of the Private Service Connect
    /// propagation.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct Code(i32);

    impl Code {
        /// The code is unspecified.
        pub const CODE_UNSPECIFIED: Code = Code::new(0);

        /// The propagated Private Service Connect connection is ready.
        pub const READY: Code = Code::new(1);

        /// The Private Service Connect connection is propagating. This is a
        /// transient state.
        pub const PROPAGATING: Code = Code::new(2);

        /// The Private Service Connect connection propagation failed because the VPC
        /// network or the project of the target spoke has exceeded the connection
        /// limit set by the producer.
        pub const ERROR_PRODUCER_PROPAGATED_CONNECTION_LIMIT_EXCEEDED: Code = Code::new(3);

        /// The Private Service Connect connection propagation failed because the NAT
        /// IP subnet space has been exhausted. It is equivalent to the `Needs
        /// attention` status of the Private Service Connect connection. See
        /// <https://cloud.google.com/vpc/docs/about-accessing-vpc-hosted-services-endpoints#connection-statuses>.
        pub const ERROR_PRODUCER_NAT_IP_SPACE_EXHAUSTED: Code = Code::new(4);

        /// The Private Service Connect connection propagation failed because the
        /// `PSC_ILB_CONSUMER_FORWARDING_RULES_PER_PRODUCER_NETWORK` quota in the
        /// producer VPC network has been exceeded.
        pub const ERROR_PRODUCER_QUOTA_EXCEEDED: Code = Code::new(5);

        /// The Private Service Connect connection propagation failed because the
        /// `PSC_PROPAGATED_CONNECTIONS_PER_VPC_NETWORK` quota in the consumer
        /// VPC network has been exceeded.
        pub const ERROR_CONSUMER_QUOTA_EXCEEDED: Code = Code::new(6);

        /// Creates a new Code instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("CODE_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("READY"),
                2 => std::borrow::Cow::Borrowed("PROPAGATING"),
                3 => std::borrow::Cow::Borrowed(
                    "ERROR_PRODUCER_PROPAGATED_CONNECTION_LIMIT_EXCEEDED",
                ),
                4 => std::borrow::Cow::Borrowed("ERROR_PRODUCER_NAT_IP_SPACE_EXHAUSTED"),
                5 => std::borrow::Cow::Borrowed("ERROR_PRODUCER_QUOTA_EXCEEDED"),
                6 => std::borrow::Cow::Borrowed("ERROR_CONSUMER_QUOTA_EXCEEDED"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "CODE_UNSPECIFIED" => std::option::Option::Some(Self::CODE_UNSPECIFIED),
                "READY" => std::option::Option::Some(Self::READY),
                "PROPAGATING" => std::option::Option::Some(Self::PROPAGATING),
                "ERROR_PRODUCER_PROPAGATED_CONNECTION_LIMIT_EXCEEDED" => std::option::Option::Some(
                    Self::ERROR_PRODUCER_PROPAGATED_CONNECTION_LIMIT_EXCEEDED,
                ),
                "ERROR_PRODUCER_NAT_IP_SPACE_EXHAUSTED" => {
                    std::option::Option::Some(Self::ERROR_PRODUCER_NAT_IP_SPACE_EXHAUSTED)
                }
                "ERROR_PRODUCER_QUOTA_EXCEEDED" => {
                    std::option::Option::Some(Self::ERROR_PRODUCER_QUOTA_EXCEEDED)
                }
                "ERROR_CONSUMER_QUOTA_EXCEEDED" => {
                    std::option::Option::Some(Self::ERROR_CONSUMER_QUOTA_EXCEEDED)
                }
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for Code {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for Code {
        fn default() -> Self {
            Self::new(0)
        }
    }
}

/// The request for
/// [HubService.ListSpokes][google.cloud.networkconnectivity.v1.HubService.ListSpokes].
///
/// [google.cloud.networkconnectivity.v1.HubService.ListSpokes]: crate::client::HubService::list_spokes
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSpokesRequest {
    /// Required. The parent resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of results to return per page.
    pub page_size: i32,

    /// The page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// An expression that filters the list of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Sort the results by a certain order.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListSpokesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListSpokesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListSpokesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListSpokesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListSpokesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListSpokesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListSpokesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListSpokesRequest"
    }
}

/// The response for
/// [HubService.ListSpokes][google.cloud.networkconnectivity.v1.HubService.ListSpokes].
///
/// [google.cloud.networkconnectivity.v1.HubService.ListSpokes]: crate::client::HubService::list_spokes
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListSpokesResponse {
    /// The requested spokes.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub spokes: std::vec::Vec<crate::model::Spoke>,

    /// The token for the next page of the response. To see more results,
    /// use this value as the page_token for your next request. If this value
    /// is empty, there are no more results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListSpokesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListSpokesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [spokes][crate::model::ListSpokesResponse::spokes].
    pub fn set_spokes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Spoke>,
    {
        use std::iter::Iterator;
        self.spokes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListSpokesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListSpokesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListSpokesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListSpokesResponse {
    type PageItem = crate::model::Spoke;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.spokes
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// The request for
/// [HubService.GetSpoke][google.cloud.networkconnectivity.v1.HubService.GetSpoke].
///
/// [google.cloud.networkconnectivity.v1.HubService.GetSpoke]: crate::client::HubService::get_spoke
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetSpokeRequest {
    /// Required. The name of the spoke resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetSpokeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetSpokeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetSpokeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.GetSpokeRequest"
    }
}

/// The request for
/// [HubService.CreateSpoke][google.cloud.networkconnectivity.v1.HubService.CreateSpoke].
///
/// [google.cloud.networkconnectivity.v1.HubService.CreateSpoke]: crate::client::HubService::create_spoke
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreateSpokeRequest {
    /// Required. The parent resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Unique id for the spoke to create.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub spoke_id: std::string::String,

    /// Required. The initial values for a new spoke.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub spoke: std::option::Option<crate::model::Spoke>,

    /// Optional. A request ID to identify requests. Specify a unique request ID so
    /// that if you must retry your request, the server knows to ignore the request
    /// if it has already been completed. The server guarantees that a request
    /// doesn't result in creation of duplicate commitments for at least 60
    /// minutes.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check to see whether the original operation
    /// was received. If it was, the server ignores the second request. This
    /// behavior prevents clients from mistakenly creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID, with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreateSpokeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreateSpokeRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [spoke_id][crate::model::CreateSpokeRequest::spoke_id].
    pub fn set_spoke_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.spoke_id = v.into();
        self
    }

    /// Sets the value of [spoke][crate::model::CreateSpokeRequest::spoke].
    pub fn set_spoke<T: std::convert::Into<std::option::Option<crate::model::Spoke>>>(
        mut self,
        v: T,
    ) -> Self {
        self.spoke = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreateSpokeRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreateSpokeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.CreateSpokeRequest"
    }
}

/// Request for
/// [HubService.UpdateSpoke][google.cloud.networkconnectivity.v1.HubService.UpdateSpoke]
/// method.
///
/// [google.cloud.networkconnectivity.v1.HubService.UpdateSpoke]: crate::client::HubService::update_spoke
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateSpokeRequest {
    /// Optional. In the case of an update to an existing spoke, field mask is used
    /// to specify the fields to be overwritten. The fields specified in the
    /// update_mask are relative to the resource, not the full request. A field is
    /// overwritten if it is in the mask. If the user does not provide a mask, then
    /// all fields are overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The state that the spoke should be in after the update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub spoke: std::option::Option<crate::model::Spoke>,

    /// Optional. A request ID to identify requests. Specify a unique request ID so
    /// that if you must retry your request, the server knows to ignore the request
    /// if it has already been completed. The server guarantees that a request
    /// doesn't result in creation of duplicate commitments for at least 60
    /// minutes.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check to see whether the original operation
    /// was received. If it was, the server ignores the second request. This
    /// behavior prevents clients from mistakenly creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID, with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateSpokeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateSpokeRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [spoke][crate::model::UpdateSpokeRequest::spoke].
    pub fn set_spoke<T: std::convert::Into<std::option::Option<crate::model::Spoke>>>(
        mut self,
        v: T,
    ) -> Self {
        self.spoke = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateSpokeRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateSpokeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.UpdateSpokeRequest"
    }
}

/// The request for
/// [HubService.DeleteSpoke][google.cloud.networkconnectivity.v1.HubService.DeleteSpoke].
///
/// [google.cloud.networkconnectivity.v1.HubService.DeleteSpoke]: crate::client::HubService::delete_spoke
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeleteSpokeRequest {
    /// Required. The name of the spoke to delete.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. A request ID to identify requests. Specify a unique request ID so
    /// that if you must retry your request, the server knows to ignore the request
    /// if it has already been completed. The server guarantees that a request
    /// doesn't result in creation of duplicate commitments for at least 60
    /// minutes.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check to see whether the original operation
    /// was received. If it was, the server ignores the second request. This
    /// behavior prevents clients from mistakenly creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID, with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeleteSpokeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeleteSpokeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeleteSpokeRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeleteSpokeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.DeleteSpokeRequest"
    }
}

/// The request for
/// [HubService.AcceptHubSpoke][google.cloud.networkconnectivity.v1.HubService.AcceptHubSpoke].
///
/// [google.cloud.networkconnectivity.v1.HubService.AcceptHubSpoke]: crate::client::HubService::accept_hub_spoke
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AcceptHubSpokeRequest {
    /// Required. The name of the hub into which to accept the spoke.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The URI of the spoke to accept into the hub.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub spoke_uri: std::string::String,

    /// Optional. A request ID to identify requests. Specify a unique request ID so
    /// that if you must retry your request, the server knows to ignore the request
    /// if it has already been completed. The server guarantees that a request
    /// doesn't result in creation of duplicate commitments for at least 60
    /// minutes.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check to see whether the original operation
    /// was received. If it was, the server ignores the second request. This
    /// behavior prevents clients from mistakenly creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID, with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AcceptHubSpokeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::AcceptHubSpokeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [spoke_uri][crate::model::AcceptHubSpokeRequest::spoke_uri].
    pub fn set_spoke_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.spoke_uri = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::AcceptHubSpokeRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for AcceptHubSpokeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.AcceptHubSpokeRequest"
    }
}

/// The response for
/// [HubService.AcceptHubSpoke][google.cloud.networkconnectivity.v1.HubService.AcceptHubSpoke].
///
/// [google.cloud.networkconnectivity.v1.HubService.AcceptHubSpoke]: crate::client::HubService::accept_hub_spoke
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AcceptHubSpokeResponse {
    /// The spoke that was operated on.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub spoke: std::option::Option<crate::model::Spoke>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AcceptHubSpokeResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [spoke][crate::model::AcceptHubSpokeResponse::spoke].
    pub fn set_spoke<T: std::convert::Into<std::option::Option<crate::model::Spoke>>>(
        mut self,
        v: T,
    ) -> Self {
        self.spoke = v.into();
        self
    }
}

impl wkt::message::Message for AcceptHubSpokeResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.AcceptHubSpokeResponse"
    }
}

/// The request for
/// [HubService.RejectHubSpoke][google.cloud.networkconnectivity.v1.HubService.RejectHubSpoke].
///
/// [google.cloud.networkconnectivity.v1.HubService.RejectHubSpoke]: crate::client::HubService::reject_hub_spoke
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RejectHubSpokeRequest {
    /// Required. The name of the hub from which to reject the spoke.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The URI of the spoke to reject from the hub.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub spoke_uri: std::string::String,

    /// Optional. A request ID to identify requests. Specify a unique request ID so
    /// that if you must retry your request, the server knows to ignore the request
    /// if it has already been completed. The server guarantees that a request
    /// doesn't result in creation of duplicate commitments for at least 60
    /// minutes.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check to see whether the original operation
    /// was received. If it was, the server ignores the second request. This
    /// behavior prevents clients from mistakenly creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID, with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    /// Optional. Additional information provided by the hub administrator.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub details: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RejectHubSpokeRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::RejectHubSpokeRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [spoke_uri][crate::model::RejectHubSpokeRequest::spoke_uri].
    pub fn set_spoke_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.spoke_uri = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::RejectHubSpokeRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }

    /// Sets the value of [details][crate::model::RejectHubSpokeRequest::details].
    pub fn set_details<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.details = v.into();
        self
    }
}

impl wkt::message::Message for RejectHubSpokeRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.RejectHubSpokeRequest"
    }
}

/// The response for
/// [HubService.RejectHubSpoke][google.cloud.networkconnectivity.v1.HubService.RejectHubSpoke].
///
/// [google.cloud.networkconnectivity.v1.HubService.RejectHubSpoke]: crate::client::HubService::reject_hub_spoke
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RejectHubSpokeResponse {
    /// The spoke that was operated on.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub spoke: std::option::Option<crate::model::Spoke>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RejectHubSpokeResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [spoke][crate::model::RejectHubSpokeResponse::spoke].
    pub fn set_spoke<T: std::convert::Into<std::option::Option<crate::model::Spoke>>>(
        mut self,
        v: T,
    ) -> Self {
        self.spoke = v.into();
        self
    }
}

impl wkt::message::Message for RejectHubSpokeResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.RejectHubSpokeResponse"
    }
}

/// The request for
/// [HubService.AcceptSpokeUpdate][google.cloud.networkconnectivity.v1.HubService.AcceptSpokeUpdate].
///
/// [google.cloud.networkconnectivity.v1.HubService.AcceptSpokeUpdate]: crate::client::HubService::accept_spoke_update
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AcceptSpokeUpdateRequest {
    /// Required. The name of the hub to accept spoke update.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The URI of the spoke to accept update.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub spoke_uri: std::string::String,

    /// Required. The etag of the spoke to accept update.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub spoke_etag: std::string::String,

    /// Optional. A request ID to identify requests. Specify a unique request ID so
    /// that if you must retry your request, the server knows to ignore the request
    /// if it has already been completed. The server guarantees that a request
    /// doesn't result in creation of duplicate commitments for at least 60
    /// minutes.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check to see whether the original operation
    /// was received. If it was, the server ignores the second request. This
    /// behavior prevents clients from mistakenly creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID, with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AcceptSpokeUpdateRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::AcceptSpokeUpdateRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [spoke_uri][crate::model::AcceptSpokeUpdateRequest::spoke_uri].
    pub fn set_spoke_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.spoke_uri = v.into();
        self
    }

    /// Sets the value of [spoke_etag][crate::model::AcceptSpokeUpdateRequest::spoke_etag].
    pub fn set_spoke_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.spoke_etag = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::AcceptSpokeUpdateRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for AcceptSpokeUpdateRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.AcceptSpokeUpdateRequest"
    }
}

/// The response for
/// [HubService.AcceptSpokeUpdate][google.cloud.networkconnectivity.v1.HubService.AcceptSpokeUpdate].
///
/// [google.cloud.networkconnectivity.v1.HubService.AcceptSpokeUpdate]: crate::client::HubService::accept_spoke_update
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct AcceptSpokeUpdateResponse {
    /// The spoke that was operated on.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub spoke: std::option::Option<crate::model::Spoke>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl AcceptSpokeUpdateResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [spoke][crate::model::AcceptSpokeUpdateResponse::spoke].
    pub fn set_spoke<T: std::convert::Into<std::option::Option<crate::model::Spoke>>>(
        mut self,
        v: T,
    ) -> Self {
        self.spoke = v.into();
        self
    }
}

impl wkt::message::Message for AcceptSpokeUpdateResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.AcceptSpokeUpdateResponse"
    }
}

/// The request for
/// [HubService.RejectSpokeUpdate][google.cloud.networkconnectivity.v1.HubService.RejectSpokeUpdate].
///
/// [google.cloud.networkconnectivity.v1.HubService.RejectSpokeUpdate]: crate::client::HubService::reject_spoke_update
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RejectSpokeUpdateRequest {
    /// Required. The name of the hub to reject spoke update.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Required. The URI of the spoke to reject update.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub spoke_uri: std::string::String,

    /// Required. The etag of the spoke to reject update.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub spoke_etag: std::string::String,

    /// Optional. Additional information provided by the hub administrator.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub details: std::string::String,

    /// Optional. A request ID to identify requests. Specify a unique request ID so
    /// that if you must retry your request, the server knows to ignore the request
    /// if it has already been completed. The server guarantees that a request
    /// doesn't result in creation of duplicate commitments for at least 60
    /// minutes.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check to see whether the original operation
    /// was received. If it was, the server ignores the second request. This
    /// behavior prevents clients from mistakenly creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID, with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RejectSpokeUpdateRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::RejectSpokeUpdateRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [spoke_uri][crate::model::RejectSpokeUpdateRequest::spoke_uri].
    pub fn set_spoke_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.spoke_uri = v.into();
        self
    }

    /// Sets the value of [spoke_etag][crate::model::RejectSpokeUpdateRequest::spoke_etag].
    pub fn set_spoke_etag<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.spoke_etag = v.into();
        self
    }

    /// Sets the value of [details][crate::model::RejectSpokeUpdateRequest::details].
    pub fn set_details<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.details = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::RejectSpokeUpdateRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for RejectSpokeUpdateRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.RejectSpokeUpdateRequest"
    }
}

/// The response for
/// [HubService.RejectSpokeUpdate][google.cloud.networkconnectivity.v1.HubService.RejectSpokeUpdate].
///
/// [google.cloud.networkconnectivity.v1.HubService.RejectSpokeUpdate]: crate::client::HubService::reject_spoke_update
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RejectSpokeUpdateResponse {
    /// The spoke that was operated on.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub spoke: std::option::Option<crate::model::Spoke>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RejectSpokeUpdateResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [spoke][crate::model::RejectSpokeUpdateResponse::spoke].
    pub fn set_spoke<T: std::convert::Into<std::option::Option<crate::model::Spoke>>>(
        mut self,
        v: T,
    ) -> Self {
        self.spoke = v.into();
        self
    }
}

impl wkt::message::Message for RejectSpokeUpdateResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.RejectSpokeUpdateResponse"
    }
}

/// The request for
/// [HubService.GetRouteTable][google.cloud.networkconnectivity.v1.HubService.GetRouteTable].
///
/// [google.cloud.networkconnectivity.v1.HubService.GetRouteTable]: crate::client::HubService::get_route_table
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetRouteTableRequest {
    /// Required. The name of the route table resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetRouteTableRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetRouteTableRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetRouteTableRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.GetRouteTableRequest"
    }
}

/// The request for
/// [HubService.GetRoute][google.cloud.networkconnectivity.v1.HubService.GetRoute].
///
/// [google.cloud.networkconnectivity.v1.HubService.GetRoute]: crate::client::HubService::get_route
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetRouteRequest {
    /// Required. The name of the route resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetRouteRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.GetRouteRequest"
    }
}

/// Request for
/// [HubService.ListRoutes][google.cloud.networkconnectivity.v1.HubService.ListRoutes]
/// method.
///
/// [google.cloud.networkconnectivity.v1.HubService.ListRoutes]: crate::client::HubService::list_routes
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListRoutesRequest {
    /// Required. The parent resource's name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of results to return per page.
    pub page_size: i32,

    /// The page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// An expression that filters the list of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Sort the results by a certain order.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListRoutesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListRoutesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListRoutesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListRoutesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListRoutesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListRoutesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListRoutesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListRoutesRequest"
    }
}

/// Response for
/// [HubService.ListRoutes][google.cloud.networkconnectivity.v1.HubService.ListRoutes]
/// method.
///
/// [google.cloud.networkconnectivity.v1.HubService.ListRoutes]: crate::client::HubService::list_routes
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListRoutesResponse {
    /// The requested routes.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub routes: std::vec::Vec<crate::model::Route>,

    /// The token for the next page of the response. To see more results,
    /// use this value as the page_token for your next request. If this value
    /// is empty, there are no more results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// RouteTables that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListRoutesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListRoutesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [routes][crate::model::ListRoutesResponse::routes].
    pub fn set_routes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Route>,
    {
        use std::iter::Iterator;
        self.routes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListRoutesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListRoutesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListRoutesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListRoutesResponse {
    type PageItem = crate::model::Route;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.routes
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request for
/// [HubService.ListRouteTables][google.cloud.networkconnectivity.v1.HubService.ListRouteTables]
/// method.
///
/// [google.cloud.networkconnectivity.v1.HubService.ListRouteTables]: crate::client::HubService::list_route_tables
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListRouteTablesRequest {
    /// Required. The parent resource's name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of results to return per page.
    pub page_size: i32,

    /// The page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// An expression that filters the list of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Sort the results by a certain order.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListRouteTablesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListRouteTablesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListRouteTablesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListRouteTablesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListRouteTablesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListRouteTablesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListRouteTablesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListRouteTablesRequest"
    }
}

/// Response for
/// [HubService.ListRouteTables][google.cloud.networkconnectivity.v1.HubService.ListRouteTables]
/// method.
///
/// [google.cloud.networkconnectivity.v1.HubService.ListRouteTables]: crate::client::HubService::list_route_tables
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListRouteTablesResponse {
    /// The requested route tables.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub route_tables: std::vec::Vec<crate::model::RouteTable>,

    /// The token for the next page of the response. To see more results,
    /// use this value as the page_token for your next request. If this value
    /// is empty, there are no more results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Hubs that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListRouteTablesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListRouteTablesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [route_tables][crate::model::ListRouteTablesResponse::route_tables].
    pub fn set_route_tables<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::RouteTable>,
    {
        use std::iter::Iterator;
        self.route_tables = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListRouteTablesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListRouteTablesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListRouteTablesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListRouteTablesResponse {
    type PageItem = crate::model::RouteTable;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.route_tables
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request for
/// [HubService.ListGroups][google.cloud.networkconnectivity.v1.HubService.ListGroups]
/// method.
///
/// [google.cloud.networkconnectivity.v1.HubService.ListGroups]: crate::client::HubService::list_groups
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListGroupsRequest {
    /// Required. The parent resource's name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of results to return per page.
    pub page_size: i32,

    /// The page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// An expression that filters the list of results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Sort the results by a certain order.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListGroupsRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListGroupsRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListGroupsRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListGroupsRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListGroupsRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListGroupsRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListGroupsRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListGroupsRequest"
    }
}

/// Response for
/// [HubService.ListGroups][google.cloud.networkconnectivity.v1.HubService.ListGroups]
/// method.
///
/// [google.cloud.networkconnectivity.v1.HubService.ListGroups]: crate::client::HubService::list_groups
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListGroupsResponse {
    /// The requested groups.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub groups: std::vec::Vec<crate::model::Group>,

    /// The token for the next page of the response. To see more results,
    /// use this value as the page_token for your next request. If this value
    /// is empty, there are no more results.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Hubs that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListGroupsResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListGroupsResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [groups][crate::model::ListGroupsResponse::groups].
    pub fn set_groups<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::Group>,
    {
        use std::iter::Iterator;
        self.groups = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListGroupsResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListGroupsResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListGroupsResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListGroupsResponse {
    type PageItem = crate::model::Group;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.groups
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// A collection of Cloud VPN tunnel resources. These resources should be
/// redundant HA VPN tunnels that all advertise the same prefixes to Google
/// Cloud. Alternatively, in a passive/active configuration, all tunnels
/// should be capable of advertising the same prefixes.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LinkedVpnTunnels {
    /// The URIs of linked VPN tunnel resources.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub uris: std::vec::Vec<std::string::String>,

    /// A value that controls whether site-to-site data transfer is enabled for
    /// these resources. Data transfer is available only in [supported
    /// locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
    pub site_to_site_data_transfer: bool,

    /// Output only. The VPC network where these VPN tunnels are located.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub vpc_network: std::string::String,

    /// Optional. IP ranges allowed to be included during import from hub (does not
    /// control transit connectivity). The only allowed value for now is
    /// "ALL_IPV4_RANGES".
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub include_import_ranges: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl LinkedVpnTunnels {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [site_to_site_data_transfer][crate::model::LinkedVpnTunnels::site_to_site_data_transfer].
    pub fn set_site_to_site_data_transfer<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.site_to_site_data_transfer = v.into();
        self
    }

    /// Sets the value of [vpc_network][crate::model::LinkedVpnTunnels::vpc_network].
    pub fn set_vpc_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.vpc_network = v.into();
        self
    }

    /// Sets the value of [uris][crate::model::LinkedVpnTunnels::uris].
    pub fn set_uris<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.uris = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [include_import_ranges][crate::model::LinkedVpnTunnels::include_import_ranges].
    pub fn set_include_import_ranges<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.include_import_ranges = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for LinkedVpnTunnels {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.LinkedVpnTunnels"
    }
}

/// A collection of VLAN attachment resources. These resources should
/// be redundant attachments that all advertise the same prefixes to Google
/// Cloud. Alternatively, in active/passive configurations, all attachments
/// should be capable of advertising the same prefixes.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LinkedInterconnectAttachments {
    /// The URIs of linked interconnect attachment resources
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub uris: std::vec::Vec<std::string::String>,

    /// A value that controls whether site-to-site data transfer is enabled for
    /// these resources. Data transfer is available only in [supported
    /// locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
    pub site_to_site_data_transfer: bool,

    /// Output only. The VPC network where these VLAN attachments are located.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub vpc_network: std::string::String,

    /// Optional. IP ranges allowed to be included during import from hub (does not
    /// control transit connectivity). The only allowed value for now is
    /// "ALL_IPV4_RANGES".
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub include_import_ranges: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl LinkedInterconnectAttachments {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [site_to_site_data_transfer][crate::model::LinkedInterconnectAttachments::site_to_site_data_transfer].
    pub fn set_site_to_site_data_transfer<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.site_to_site_data_transfer = v.into();
        self
    }

    /// Sets the value of [vpc_network][crate::model::LinkedInterconnectAttachments::vpc_network].
    pub fn set_vpc_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.vpc_network = v.into();
        self
    }

    /// Sets the value of [uris][crate::model::LinkedInterconnectAttachments::uris].
    pub fn set_uris<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.uris = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [include_import_ranges][crate::model::LinkedInterconnectAttachments::include_import_ranges].
    pub fn set_include_import_ranges<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.include_import_ranges = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for LinkedInterconnectAttachments {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.LinkedInterconnectAttachments"
    }
}

/// A collection of router appliance instances. If you configure multiple router
/// appliance instances to receive data from the same set of sites outside of
/// Google Cloud, we recommend that you associate those instances with the same
/// spoke.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LinkedRouterApplianceInstances {
    /// The list of router appliance instances.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub instances: std::vec::Vec<crate::model::RouterApplianceInstance>,

    /// A value that controls whether site-to-site data transfer is enabled for
    /// these resources. Data transfer is available only in [supported
    /// locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
    pub site_to_site_data_transfer: bool,

    /// Output only. The VPC network where these router appliance instances are
    /// located.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub vpc_network: std::string::String,

    /// Optional. IP ranges allowed to be included during import from hub (does not
    /// control transit connectivity). The only allowed value for now is
    /// "ALL_IPV4_RANGES".
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub include_import_ranges: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl LinkedRouterApplianceInstances {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [site_to_site_data_transfer][crate::model::LinkedRouterApplianceInstances::site_to_site_data_transfer].
    pub fn set_site_to_site_data_transfer<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.site_to_site_data_transfer = v.into();
        self
    }

    /// Sets the value of [vpc_network][crate::model::LinkedRouterApplianceInstances::vpc_network].
    pub fn set_vpc_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.vpc_network = v.into();
        self
    }

    /// Sets the value of [instances][crate::model::LinkedRouterApplianceInstances::instances].
    pub fn set_instances<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::RouterApplianceInstance>,
    {
        use std::iter::Iterator;
        self.instances = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [include_import_ranges][crate::model::LinkedRouterApplianceInstances::include_import_ranges].
    pub fn set_include_import_ranges<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.include_import_ranges = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for LinkedRouterApplianceInstances {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.LinkedRouterApplianceInstances"
    }
}

/// An existing VPC network.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LinkedVpcNetwork {
    /// Required. The URI of the VPC network resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,

    /// Optional. IP ranges encompassing the subnets to be excluded from peering.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub exclude_export_ranges: std::vec::Vec<std::string::String>,

    /// Optional. IP ranges allowed to be included from peering.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub include_export_ranges: std::vec::Vec<std::string::String>,

    /// Optional. The proposed include export IP ranges waiting for hub
    /// administration's approval.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub proposed_include_export_ranges: std::vec::Vec<std::string::String>,

    /// Output only. The proposed exclude export IP ranges waiting for hub
    /// administration's approval.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub proposed_exclude_export_ranges: std::vec::Vec<std::string::String>,

    /// Output only. The list of Producer VPC spokes that this VPC spoke is a
    /// service consumer VPC spoke for. These producer VPCs are connected through
    /// VPC peering to this spoke's backing VPC network. Because they are directly
    /// connected throuh VPC peering, NCC export filters do not apply between the
    /// service consumer VPC spoke and any of its producer VPC spokes. This VPC
    /// spoke cannot be deleted as long as any of these producer VPC spokes are
    /// connected to the NCC Hub.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub producer_vpc_spokes: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl LinkedVpcNetwork {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [uri][crate::model::LinkedVpcNetwork::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }

    /// Sets the value of [exclude_export_ranges][crate::model::LinkedVpcNetwork::exclude_export_ranges].
    pub fn set_exclude_export_ranges<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.exclude_export_ranges = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [include_export_ranges][crate::model::LinkedVpcNetwork::include_export_ranges].
    pub fn set_include_export_ranges<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.include_export_ranges = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [proposed_include_export_ranges][crate::model::LinkedVpcNetwork::proposed_include_export_ranges].
    pub fn set_proposed_include_export_ranges<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.proposed_include_export_ranges = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [proposed_exclude_export_ranges][crate::model::LinkedVpcNetwork::proposed_exclude_export_ranges].
    pub fn set_proposed_exclude_export_ranges<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.proposed_exclude_export_ranges = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [producer_vpc_spokes][crate::model::LinkedVpcNetwork::producer_vpc_spokes].
    pub fn set_producer_vpc_spokes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.producer_vpc_spokes = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for LinkedVpcNetwork {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.LinkedVpcNetwork"
    }
}

#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LinkedProducerVpcNetwork {
    /// Immutable. The URI of the Service Consumer VPC that the Producer VPC is
    /// peered with.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub network: std::string::String,

    /// Output only. The Service Consumer Network spoke.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub service_consumer_vpc_spoke: std::string::String,

    /// Immutable. The name of the VPC peering between the Service Consumer VPC and
    /// the Producer VPC (defined in the Tenant project) which is added to the NCC
    /// hub. This peering must be in ACTIVE state.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub peering: std::string::String,

    /// Output only. The URI of the Producer VPC.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub producer_network: std::string::String,

    /// Optional. IP ranges encompassing the subnets to be excluded from peering.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub exclude_export_ranges: std::vec::Vec<std::string::String>,

    /// Optional. IP ranges allowed to be included from peering.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub include_export_ranges: std::vec::Vec<std::string::String>,

    /// Optional. The proposed include export IP ranges waiting for hub
    /// administration's approval.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub proposed_include_export_ranges: std::vec::Vec<std::string::String>,

    /// Output only. The proposed exclude export IP ranges waiting for hub
    /// administration's approval.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub proposed_exclude_export_ranges: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl LinkedProducerVpcNetwork {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [network][crate::model::LinkedProducerVpcNetwork::network].
    pub fn set_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.network = v.into();
        self
    }

    /// Sets the value of [service_consumer_vpc_spoke][crate::model::LinkedProducerVpcNetwork::service_consumer_vpc_spoke].
    pub fn set_service_consumer_vpc_spoke<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.service_consumer_vpc_spoke = v.into();
        self
    }

    /// Sets the value of [peering][crate::model::LinkedProducerVpcNetwork::peering].
    pub fn set_peering<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.peering = v.into();
        self
    }

    /// Sets the value of [producer_network][crate::model::LinkedProducerVpcNetwork::producer_network].
    pub fn set_producer_network<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.producer_network = v.into();
        self
    }

    /// Sets the value of [exclude_export_ranges][crate::model::LinkedProducerVpcNetwork::exclude_export_ranges].
    pub fn set_exclude_export_ranges<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.exclude_export_ranges = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [include_export_ranges][crate::model::LinkedProducerVpcNetwork::include_export_ranges].
    pub fn set_include_export_ranges<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.include_export_ranges = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [proposed_include_export_ranges][crate::model::LinkedProducerVpcNetwork::proposed_include_export_ranges].
    pub fn set_proposed_include_export_ranges<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.proposed_include_export_ranges = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [proposed_exclude_export_ranges][crate::model::LinkedProducerVpcNetwork::proposed_exclude_export_ranges].
    pub fn set_proposed_exclude_export_ranges<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.proposed_exclude_export_ranges = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for LinkedProducerVpcNetwork {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.LinkedProducerVpcNetwork"
    }
}

/// A router appliance instance is a Compute Engine virtual machine (VM) instance
/// that acts as a BGP speaker. A router appliance instance is specified by the
/// URI of the VM and the internal IP address of one of the VM's network
/// interfaces.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct RouterApplianceInstance {
    /// The URI of the VM.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub virtual_machine: std::string::String,

    /// The IP address on the VM to use for peering.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub ip_address: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl RouterApplianceInstance {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [virtual_machine][crate::model::RouterApplianceInstance::virtual_machine].
    pub fn set_virtual_machine<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.virtual_machine = v.into();
        self
    }

    /// Sets the value of [ip_address][crate::model::RouterApplianceInstance::ip_address].
    pub fn set_ip_address<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.ip_address = v.into();
        self
    }
}

impl wkt::message::Message for RouterApplianceInstance {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.RouterApplianceInstance"
    }
}

/// Metadata about locations
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct LocationMetadata {
    /// List of supported features
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub location_features: std::vec::Vec<crate::model::LocationFeature>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl LocationMetadata {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [location_features][crate::model::LocationMetadata::location_features].
    pub fn set_location_features<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::LocationFeature>,
    {
        use std::iter::Iterator;
        self.location_features = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for LocationMetadata {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.LocationMetadata"
    }
}

#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct NextHopVpcNetwork {
    /// The URI of the VPC network resource
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl NextHopVpcNetwork {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [uri][crate::model::NextHopVpcNetwork::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }
}

impl wkt::message::Message for NextHopVpcNetwork {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.NextHopVpcNetwork"
    }
}

/// A route next hop that leads to a VPN tunnel resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct NextHopVPNTunnel {
    /// The URI of the VPN tunnel resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,

    /// The VPC network where this VPN tunnel is located.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub vpc_network: std::string::String,

    /// Indicates whether site-to-site data transfer is allowed for this VPN tunnel
    /// resource. Data transfer is available only in [supported
    /// locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
    pub site_to_site_data_transfer: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl NextHopVPNTunnel {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [uri][crate::model::NextHopVPNTunnel::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }

    /// Sets the value of [vpc_network][crate::model::NextHopVPNTunnel::vpc_network].
    pub fn set_vpc_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.vpc_network = v.into();
        self
    }

    /// Sets the value of [site_to_site_data_transfer][crate::model::NextHopVPNTunnel::site_to_site_data_transfer].
    pub fn set_site_to_site_data_transfer<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.site_to_site_data_transfer = v.into();
        self
    }
}

impl wkt::message::Message for NextHopVPNTunnel {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.NextHopVPNTunnel"
    }
}

/// A route next hop that leads to a Router appliance instance.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct NextHopRouterApplianceInstance {
    /// The URI of the Router appliance instance.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,

    /// The VPC network where this VM is located.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub vpc_network: std::string::String,

    /// Indicates whether site-to-site data transfer is allowed for this Router
    /// appliance instance resource. Data transfer is available only in [supported
    /// locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
    pub site_to_site_data_transfer: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl NextHopRouterApplianceInstance {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [uri][crate::model::NextHopRouterApplianceInstance::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }

    /// Sets the value of [vpc_network][crate::model::NextHopRouterApplianceInstance::vpc_network].
    pub fn set_vpc_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.vpc_network = v.into();
        self
    }

    /// Sets the value of [site_to_site_data_transfer][crate::model::NextHopRouterApplianceInstance::site_to_site_data_transfer].
    pub fn set_site_to_site_data_transfer<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.site_to_site_data_transfer = v.into();
        self
    }
}

impl wkt::message::Message for NextHopRouterApplianceInstance {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.NextHopRouterApplianceInstance"
    }
}

/// A route next hop that leads to an interconnect attachment resource.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct NextHopInterconnectAttachment {
    /// The URI of the interconnect attachment resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub uri: std::string::String,

    /// The VPC network where this interconnect attachment is located.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub vpc_network: std::string::String,

    /// Indicates whether site-to-site data transfer is allowed for this
    /// interconnect attachment resource. Data transfer is available only in
    /// [supported
    /// locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
    pub site_to_site_data_transfer: bool,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl NextHopInterconnectAttachment {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [uri][crate::model::NextHopInterconnectAttachment::uri].
    pub fn set_uri<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.uri = v.into();
        self
    }

    /// Sets the value of [vpc_network][crate::model::NextHopInterconnectAttachment::vpc_network].
    pub fn set_vpc_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.vpc_network = v.into();
        self
    }

    /// Sets the value of [site_to_site_data_transfer][crate::model::NextHopInterconnectAttachment::site_to_site_data_transfer].
    pub fn set_site_to_site_data_transfer<T: std::convert::Into<bool>>(mut self, v: T) -> Self {
        self.site_to_site_data_transfer = v.into();
        self
    }
}

impl wkt::message::Message for NextHopInterconnectAttachment {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.NextHopInterconnectAttachment"
    }
}

/// Summarizes information about the spokes associated with a hub.
/// The summary includes a count of spokes according to type
/// and according to state. If any spokes are inactive,
/// the summary also lists the reasons they are inactive,
/// including a count for each reason.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct SpokeSummary {
    /// Output only. Counts the number of spokes of each type that are
    /// associated with a specific hub.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub spoke_type_counts: std::vec::Vec<crate::model::spoke_summary::SpokeTypeCount>,

    /// Output only. Counts the number of spokes that are in each state
    /// and associated with a given hub.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub spoke_state_counts: std::vec::Vec<crate::model::spoke_summary::SpokeStateCount>,

    /// Output only. Counts the number of spokes that are inactive for each
    /// possible reason and associated with a given hub.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub spoke_state_reason_counts:
        std::vec::Vec<crate::model::spoke_summary::SpokeStateReasonCount>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl SpokeSummary {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [spoke_type_counts][crate::model::SpokeSummary::spoke_type_counts].
    pub fn set_spoke_type_counts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::spoke_summary::SpokeTypeCount>,
    {
        use std::iter::Iterator;
        self.spoke_type_counts = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [spoke_state_counts][crate::model::SpokeSummary::spoke_state_counts].
    pub fn set_spoke_state_counts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::spoke_summary::SpokeStateCount>,
    {
        use std::iter::Iterator;
        self.spoke_state_counts = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [spoke_state_reason_counts][crate::model::SpokeSummary::spoke_state_reason_counts].
    pub fn set_spoke_state_reason_counts<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::spoke_summary::SpokeStateReasonCount>,
    {
        use std::iter::Iterator;
        self.spoke_state_reason_counts = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for SpokeSummary {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.SpokeSummary"
    }
}

/// Defines additional types related to [SpokeSummary].
pub mod spoke_summary {
    #[allow(unused_imports)]
    use super::*;

    /// The number of spokes of a given type that are associated
    /// with a specific hub. The type indicates what kind of
    /// resource is associated with the spoke.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SpokeTypeCount {
        /// Output only. The type of the spokes.
        pub spoke_type: crate::model::SpokeType,

        /// Output only. The total number of spokes of this type that are
        /// associated with the hub.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub count: i64,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SpokeTypeCount {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [spoke_type][crate::model::spoke_summary::SpokeTypeCount::spoke_type].
        pub fn set_spoke_type<T: std::convert::Into<crate::model::SpokeType>>(
            mut self,
            v: T,
        ) -> Self {
            self.spoke_type = v.into();
            self
        }

        /// Sets the value of [count][crate::model::spoke_summary::SpokeTypeCount::count].
        pub fn set_count<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.count = v.into();
            self
        }
    }

    impl wkt::message::Message for SpokeTypeCount {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkconnectivity.v1.SpokeSummary.SpokeTypeCount"
        }
    }

    /// The number of spokes that are in a particular state
    /// and associated with a given hub.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SpokeStateCount {
        /// Output only. The state of the spokes.
        pub state: crate::model::State,

        /// Output only. The total number of spokes that are in this state
        /// and associated with a given hub.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub count: i64,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SpokeStateCount {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [state][crate::model::spoke_summary::SpokeStateCount::state].
        pub fn set_state<T: std::convert::Into<crate::model::State>>(mut self, v: T) -> Self {
            self.state = v.into();
            self
        }

        /// Sets the value of [count][crate::model::spoke_summary::SpokeStateCount::count].
        pub fn set_count<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.count = v.into();
            self
        }
    }

    impl wkt::message::Message for SpokeStateCount {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkconnectivity.v1.SpokeSummary.SpokeStateCount"
        }
    }

    /// The number of spokes in the hub that are inactive for this reason.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct SpokeStateReasonCount {
        /// Output only. The reason that a spoke is inactive.
        pub state_reason_code: crate::model::spoke::state_reason::Code,

        /// Output only. The total number of spokes that are inactive for a
        /// particular reason and associated with a given hub.
        #[serde_as(as = "serde_with::DisplayFromStr")]
        pub count: i64,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl SpokeStateReasonCount {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [state_reason_code][crate::model::spoke_summary::SpokeStateReasonCount::state_reason_code].
        pub fn set_state_reason_code<
            T: std::convert::Into<crate::model::spoke::state_reason::Code>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.state_reason_code = v.into();
            self
        }

        /// Sets the value of [count][crate::model::spoke_summary::SpokeStateReasonCount::count].
        pub fn set_count<T: std::convert::Into<i64>>(mut self, v: T) -> Self {
            self.count = v.into();
            self
        }
    }

    impl wkt::message::Message for SpokeStateReasonCount {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkconnectivity.v1.SpokeSummary.SpokeStateReasonCount"
        }
    }
}

/// The request for
/// [HubService.GetGroup][google.cloud.networkconnectivity.v1.HubService.GetGroup].
///
/// [google.cloud.networkconnectivity.v1.HubService.GetGroup]: crate::client::HubService::get_group
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetGroupRequest {
    /// Required. The name of the route table resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetGroupRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetGroupRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetGroupRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.GetGroupRequest"
    }
}

/// Request for
/// [HubService.UpdateGroup][google.cloud.networkconnectivity.v1.HubService.UpdateGroup]
/// method.
///
/// [google.cloud.networkconnectivity.v1.HubService.UpdateGroup]: crate::client::HubService::update_group
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct UpdateGroupRequest {
    /// Optional. In the case of an update to an existing group, field mask is used
    /// to specify the fields to be overwritten. The fields specified in the
    /// update_mask are relative to the resource, not the full request. A field is
    /// overwritten if it is in the mask. If the user does not provide a mask, then
    /// all fields are overwritten.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_mask: std::option::Option<wkt::FieldMask>,

    /// Required. The state that the group should be in after the update.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub group: std::option::Option<crate::model::Group>,

    /// Optional. A request ID to identify requests. Specify a unique request ID so
    /// that if you must retry your request, the server knows to ignore the request
    /// if it has already been completed. The server guarantees that a request
    /// doesn't result in creation of duplicate commitments for at least 60
    /// minutes.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check to see whether the original operation
    /// was received. If it was, the server ignores the second request. This
    /// behavior prevents clients from mistakenly creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID, with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl UpdateGroupRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [update_mask][crate::model::UpdateGroupRequest::update_mask].
    pub fn set_update_mask<T: std::convert::Into<std::option::Option<wkt::FieldMask>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_mask = v.into();
        self
    }

    /// Sets the value of [group][crate::model::UpdateGroupRequest::group].
    pub fn set_group<T: std::convert::Into<std::option::Option<crate::model::Group>>>(
        mut self,
        v: T,
    ) -> Self {
        self.group = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::UpdateGroupRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for UpdateGroupRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.UpdateGroupRequest"
    }
}

/// Policy-based routes route L4 network traffic based on not just destination IP
/// address, but also source IP address, protocol, and more. If a policy-based
/// route conflicts with other types of routes, the policy-based route always
/// takes precedence.
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct PolicyBasedRoute {
    /// Immutable. A unique name of the resource in the form of
    /// `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Output only. Time when the policy-based route was created.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub create_time: std::option::Option<wkt::Timestamp>,

    /// Output only. Time when the policy-based route was updated.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub update_time: std::option::Option<wkt::Timestamp>,

    /// User-defined labels.
    #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
    pub labels: std::collections::HashMap<std::string::String, std::string::String>,

    /// Optional. An optional description of this resource. Provide this field when
    /// you create the resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub description: std::string::String,

    /// Required. Fully-qualified URL of the network that this route applies to,
    /// for example: projects/my-project/global/networks/my-network.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub network: std::string::String,

    /// Required. The filter to match L4 traffic.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub filter: std::option::Option<crate::model::policy_based_route::Filter>,

    /// Optional. The priority of this policy-based route. Priority is used to
    /// break ties in cases where there are more than one matching policy-based
    /// routes found. In cases where multiple policy-based routes are matched, the
    /// one with the lowest-numbered priority value wins. The default value is
    /// 1000. The priority value must be from 1 to 65535, inclusive.
    pub priority: i32,

    /// Output only. If potential misconfigurations are detected for this route,
    /// this field will be populated with warning messages.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub warnings: std::vec::Vec<crate::model::policy_based_route::Warnings>,

    /// Output only. Server-defined fully-qualified URL for this resource.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub self_link: std::string::String,

    /// Output only. Type of this resource. Always
    /// networkconnectivity#policyBasedRoute for policy-based Route resources.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub kind: std::string::String,

    /// Target specifies network endpoints that this policy-based route applies to.
    /// If no target is specified, the PBR will be installed on all network
    /// endpoints (e.g. VMs, VPNs, and Interconnects) in the VPC.
    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub target: std::option::Option<crate::model::policy_based_route::Target>,

    #[serde(flatten, skip_serializing_if = "std::option::Option::is_none")]
    pub next_hop: std::option::Option<crate::model::policy_based_route::NextHop>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl PolicyBasedRoute {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::PolicyBasedRoute::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [create_time][crate::model::PolicyBasedRoute::create_time].
    pub fn set_create_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.create_time = v.into();
        self
    }

    /// Sets the value of [update_time][crate::model::PolicyBasedRoute::update_time].
    pub fn set_update_time<T: std::convert::Into<std::option::Option<wkt::Timestamp>>>(
        mut self,
        v: T,
    ) -> Self {
        self.update_time = v.into();
        self
    }

    /// Sets the value of [description][crate::model::PolicyBasedRoute::description].
    pub fn set_description<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.description = v.into();
        self
    }

    /// Sets the value of [network][crate::model::PolicyBasedRoute::network].
    pub fn set_network<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.network = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::PolicyBasedRoute::filter].
    pub fn set_filter<
        T: std::convert::Into<std::option::Option<crate::model::policy_based_route::Filter>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [priority][crate::model::PolicyBasedRoute::priority].
    pub fn set_priority<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.priority = v.into();
        self
    }

    /// Sets the value of [self_link][crate::model::PolicyBasedRoute::self_link].
    pub fn set_self_link<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.self_link = v.into();
        self
    }

    /// Sets the value of [kind][crate::model::PolicyBasedRoute::kind].
    pub fn set_kind<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.kind = v.into();
        self
    }

    /// Sets the value of [warnings][crate::model::PolicyBasedRoute::warnings].
    pub fn set_warnings<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::policy_based_route::Warnings>,
    {
        use std::iter::Iterator;
        self.warnings = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [labels][crate::model::PolicyBasedRoute::labels].
    pub fn set_labels<T, K, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = (K, V)>,
        K: std::convert::Into<std::string::String>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.labels = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
        self
    }

    /// Sets the value of `target`.
    pub fn set_target<
        T: std::convert::Into<std::option::Option<crate::model::policy_based_route::Target>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.target = v.into();
        self
    }

    /// The value of [target][crate::model::PolicyBasedRoute::target]
    /// if it holds a `VirtualMachine`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_virtual_machine(
        &self,
    ) -> std::option::Option<&std::boxed::Box<crate::model::policy_based_route::VirtualMachine>>
    {
        #[allow(unreachable_patterns)]
        self.target.as_ref().and_then(|v| match v {
            crate::model::policy_based_route::Target::VirtualMachine(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [target][crate::model::PolicyBasedRoute::target]
    /// if it holds a `InterconnectAttachment`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_interconnect_attachment(
        &self,
    ) -> std::option::Option<
        &std::boxed::Box<crate::model::policy_based_route::InterconnectAttachment>,
    > {
        #[allow(unreachable_patterns)]
        self.target.as_ref().and_then(|v| match v {
            crate::model::policy_based_route::Target::InterconnectAttachment(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [target][crate::model::PolicyBasedRoute::target]
    /// to hold a `VirtualMachine`.
    ///
    /// Note that all the setters affecting `target` are
    /// mutually exclusive.
    pub fn set_virtual_machine<
        T: std::convert::Into<std::boxed::Box<crate::model::policy_based_route::VirtualMachine>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.target = std::option::Option::Some(
            crate::model::policy_based_route::Target::VirtualMachine(v.into()),
        );
        self
    }

    /// Sets the value of [target][crate::model::PolicyBasedRoute::target]
    /// to hold a `InterconnectAttachment`.
    ///
    /// Note that all the setters affecting `target` are
    /// mutually exclusive.
    pub fn set_interconnect_attachment<
        T: std::convert::Into<
                std::boxed::Box<crate::model::policy_based_route::InterconnectAttachment>,
            >,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.target = std::option::Option::Some(
            crate::model::policy_based_route::Target::InterconnectAttachment(v.into()),
        );
        self
    }

    /// Sets the value of `next_hop`.
    pub fn set_next_hop<
        T: std::convert::Into<std::option::Option<crate::model::policy_based_route::NextHop>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.next_hop = v.into();
        self
    }

    /// The value of [next_hop][crate::model::PolicyBasedRoute::next_hop]
    /// if it holds a `NextHopIlbIp`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_next_hop_ilb_ip(&self) -> std::option::Option<&std::string::String> {
        #[allow(unreachable_patterns)]
        self.next_hop.as_ref().and_then(|v| match v {
            crate::model::policy_based_route::NextHop::NextHopIlbIp(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// The value of [next_hop][crate::model::PolicyBasedRoute::next_hop]
    /// if it holds a `NextHopOtherRoutes`, `None` if the field is not set or
    /// holds a different branch.
    pub fn get_next_hop_other_routes(
        &self,
    ) -> std::option::Option<&crate::model::policy_based_route::OtherRoutes> {
        #[allow(unreachable_patterns)]
        self.next_hop.as_ref().and_then(|v| match v {
            crate::model::policy_based_route::NextHop::NextHopOtherRoutes(v) => {
                std::option::Option::Some(v)
            }
            _ => std::option::Option::None,
        })
    }

    /// Sets the value of [next_hop][crate::model::PolicyBasedRoute::next_hop]
    /// to hold a `NextHopIlbIp`.
    ///
    /// Note that all the setters affecting `next_hop` are
    /// mutually exclusive.
    pub fn set_next_hop_ilb_ip<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_hop = std::option::Option::Some(
            crate::model::policy_based_route::NextHop::NextHopIlbIp(v.into()),
        );
        self
    }

    /// Sets the value of [next_hop][crate::model::PolicyBasedRoute::next_hop]
    /// to hold a `NextHopOtherRoutes`.
    ///
    /// Note that all the setters affecting `next_hop` are
    /// mutually exclusive.
    pub fn set_next_hop_other_routes<
        T: std::convert::Into<crate::model::policy_based_route::OtherRoutes>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.next_hop = std::option::Option::Some(
            crate::model::policy_based_route::NextHop::NextHopOtherRoutes(v.into()),
        );
        self
    }
}

impl wkt::message::Message for PolicyBasedRoute {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.PolicyBasedRoute"
    }
}

/// Defines additional types related to [PolicyBasedRoute].
pub mod policy_based_route {
    #[allow(unused_imports)]
    use super::*;

    /// VM instances that this policy-based route applies to.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct VirtualMachine {
        /// Optional. A list of VM instance tags that this policy-based route applies
        /// to. VM instances that have ANY of tags specified here installs this PBR.
        #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
        pub tags: std::vec::Vec<std::string::String>,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl VirtualMachine {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [tags][crate::model::policy_based_route::VirtualMachine::tags].
        pub fn set_tags<T, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = V>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.tags = v.into_iter().map(|i| i.into()).collect();
            self
        }
    }

    impl wkt::message::Message for VirtualMachine {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkconnectivity.v1.PolicyBasedRoute.VirtualMachine"
        }
    }

    /// InterconnectAttachment that this route applies to.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct InterconnectAttachment {
        /// Optional. Cloud region to install this policy-based route on interconnect
        /// attachment. Use `all` to install it on all interconnect attachments.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub region: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl InterconnectAttachment {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [region][crate::model::policy_based_route::InterconnectAttachment::region].
        pub fn set_region<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.region = v.into();
            self
        }
    }

    impl wkt::message::Message for InterconnectAttachment {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkconnectivity.v1.PolicyBasedRoute.InterconnectAttachment"
        }
    }

    /// Filter matches L4 traffic.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Filter {
        /// Optional. The IP protocol that this policy-based route applies to. Valid
        /// values are 'TCP', 'UDP', and 'ALL'. Default is 'ALL'.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub ip_protocol: std::string::String,

        /// Optional. The source IP range of outgoing packets that this policy-based
        /// route applies to. Default is "0.0.0.0/0" if protocol version is IPv4.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub src_range: std::string::String,

        /// Optional. The destination IP range of outgoing packets that this
        /// policy-based route applies to. Default is "0.0.0.0/0" if protocol version
        /// is IPv4.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub dest_range: std::string::String,

        /// Required. Internet protocol versions this policy-based route applies to.
        /// For this version, only IPV4 is supported. IPV6 is supported in preview.
        pub protocol_version: crate::model::policy_based_route::filter::ProtocolVersion,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Filter {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [ip_protocol][crate::model::policy_based_route::Filter::ip_protocol].
        pub fn set_ip_protocol<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.ip_protocol = v.into();
            self
        }

        /// Sets the value of [src_range][crate::model::policy_based_route::Filter::src_range].
        pub fn set_src_range<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.src_range = v.into();
            self
        }

        /// Sets the value of [dest_range][crate::model::policy_based_route::Filter::dest_range].
        pub fn set_dest_range<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
            self.dest_range = v.into();
            self
        }

        /// Sets the value of [protocol_version][crate::model::policy_based_route::Filter::protocol_version].
        pub fn set_protocol_version<
            T: std::convert::Into<crate::model::policy_based_route::filter::ProtocolVersion>,
        >(
            mut self,
            v: T,
        ) -> Self {
            self.protocol_version = v.into();
            self
        }
    }

    impl wkt::message::Message for Filter {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkconnectivity.v1.PolicyBasedRoute.Filter"
        }
    }

    /// Defines additional types related to [Filter].
    pub mod filter {
        #[allow(unused_imports)]
        use super::*;

        /// The internet protocol version.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct ProtocolVersion(i32);

        impl ProtocolVersion {
            /// Default value.
            pub const PROTOCOL_VERSION_UNSPECIFIED: ProtocolVersion = ProtocolVersion::new(0);

            /// The PBR is for IPv4 internet protocol traffic.
            pub const IPV4: ProtocolVersion = ProtocolVersion::new(1);

            /// Creates a new ProtocolVersion instance.
            pub(crate) const fn new(value: i32) -> Self {
                Self(value)
            }

            /// Gets the enum value.
            pub fn value(&self) -> i32 {
                self.0
            }

            /// Gets the enum value as a string.
            pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
                match self.0 {
                    0 => std::borrow::Cow::Borrowed("PROTOCOL_VERSION_UNSPECIFIED"),
                    1 => std::borrow::Cow::Borrowed("IPV4"),
                    _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
                }
            }

            /// Creates an enum value from the value name.
            pub fn from_str_name(name: &str) -> std::option::Option<Self> {
                match name {
                    "PROTOCOL_VERSION_UNSPECIFIED" => {
                        std::option::Option::Some(Self::PROTOCOL_VERSION_UNSPECIFIED)
                    }
                    "IPV4" => std::option::Option::Some(Self::IPV4),
                    _ => std::option::Option::None,
                }
            }
        }

        impl std::convert::From<i32> for ProtocolVersion {
            fn from(value: i32) -> Self {
                Self::new(value)
            }
        }

        impl std::default::Default for ProtocolVersion {
            fn default() -> Self {
                Self::new(0)
            }
        }
    }

    /// Informational warning message.
    #[serde_with::serde_as]
    #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(default, rename_all = "camelCase")]
    #[non_exhaustive]
    pub struct Warnings {
        /// Output only. A warning code, if applicable.
        pub code: crate::model::policy_based_route::warnings::Code,

        /// Output only. Metadata about this warning in key: value format. The key
        /// should provides more detail on the warning being returned. For example,
        /// for warnings where there are no results in a list request for a
        /// particular zone, this key might be scope and the key value might be the
        /// zone name. Other examples might be a key indicating a deprecated resource
        /// and a suggested replacement.
        #[serde(skip_serializing_if = "std::collections::HashMap::is_empty")]
        pub data: std::collections::HashMap<std::string::String, std::string::String>,

        /// Output only. A human-readable description of the warning code.
        #[serde(skip_serializing_if = "std::string::String::is_empty")]
        pub warning_message: std::string::String,

        #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
        _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
    }

    impl Warnings {
        pub fn new() -> Self {
            std::default::Default::default()
        }

        /// Sets the value of [code][crate::model::policy_based_route::Warnings::code].
        pub fn set_code<T: std::convert::Into<crate::model::policy_based_route::warnings::Code>>(
            mut self,
            v: T,
        ) -> Self {
            self.code = v.into();
            self
        }

        /// Sets the value of [warning_message][crate::model::policy_based_route::Warnings::warning_message].
        pub fn set_warning_message<T: std::convert::Into<std::string::String>>(
            mut self,
            v: T,
        ) -> Self {
            self.warning_message = v.into();
            self
        }

        /// Sets the value of [data][crate::model::policy_based_route::Warnings::data].
        pub fn set_data<T, K, V>(mut self, v: T) -> Self
        where
            T: std::iter::IntoIterator<Item = (K, V)>,
            K: std::convert::Into<std::string::String>,
            V: std::convert::Into<std::string::String>,
        {
            use std::iter::Iterator;
            self.data = v.into_iter().map(|(k, v)| (k.into(), v.into())).collect();
            self
        }
    }

    impl wkt::message::Message for Warnings {
        fn typename() -> &'static str {
            "type.googleapis.com/google.cloud.networkconnectivity.v1.PolicyBasedRoute.Warnings"
        }
    }

    /// Defines additional types related to [Warnings].
    pub mod warnings {
        #[allow(unused_imports)]
        use super::*;

        /// Warning code for policy-based routing. Expect to add values in the
        /// future.
        #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
        pub struct Code(i32);

        impl Code {
            /// Default value.
            pub const WARNING_UNSPECIFIED: Code = Code::new(0);

            /// The policy-based route is not active and functioning. Common causes are
            /// that the dependent network was deleted or the resource project was
            /// turned off.
            pub const RESOURCE_NOT_ACTIVE: Code = Code::new(1);

            /// The policy-based route is being modified (e.g. created/deleted) at this
            /// time.
            pub const RESOURCE_BEING_MODIFIED: Code = Code::new(2);

            /// Creates a new Code instance.
            pub(crate) const fn new(value: i32) -> Self {
                Self(value)
            }

            /// Gets the enum value.
            pub fn value(&self) -> i32 {
                self.0
            }

            /// Gets the enum value as a string.
            pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
                match self.0 {
                    0 => std::borrow::Cow::Borrowed("WARNING_UNSPECIFIED"),
                    1 => std::borrow::Cow::Borrowed("RESOURCE_NOT_ACTIVE"),
                    2 => std::borrow::Cow::Borrowed("RESOURCE_BEING_MODIFIED"),
                    _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
                }
            }

            /// Creates an enum value from the value name.
            pub fn from_str_name(name: &str) -> std::option::Option<Self> {
                match name {
                    "WARNING_UNSPECIFIED" => std::option::Option::Some(Self::WARNING_UNSPECIFIED),
                    "RESOURCE_NOT_ACTIVE" => std::option::Option::Some(Self::RESOURCE_NOT_ACTIVE),
                    "RESOURCE_BEING_MODIFIED" => {
                        std::option::Option::Some(Self::RESOURCE_BEING_MODIFIED)
                    }
                    _ => std::option::Option::None,
                }
            }
        }

        impl std::convert::From<i32> for Code {
            fn from(value: i32) -> Self {
                Self::new(value)
            }
        }

        impl std::default::Default for Code {
            fn default() -> Self {
                Self::new(0)
            }
        }
    }

    /// The other routing cases.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    pub struct OtherRoutes(i32);

    impl OtherRoutes {
        /// Default value.
        pub const OTHER_ROUTES_UNSPECIFIED: OtherRoutes = OtherRoutes::new(0);

        /// Use the routes from the default routing tables (system-generated routes,
        /// custom routes, peering route) to determine the next hop. This effectively
        /// excludes matching packets being applied on other PBRs with a lower
        /// priority.
        pub const DEFAULT_ROUTING: OtherRoutes = OtherRoutes::new(1);

        /// Creates a new OtherRoutes instance.
        pub(crate) const fn new(value: i32) -> Self {
            Self(value)
        }

        /// Gets the enum value.
        pub fn value(&self) -> i32 {
            self.0
        }

        /// Gets the enum value as a string.
        pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
            match self.0 {
                0 => std::borrow::Cow::Borrowed("OTHER_ROUTES_UNSPECIFIED"),
                1 => std::borrow::Cow::Borrowed("DEFAULT_ROUTING"),
                _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
            }
        }

        /// Creates an enum value from the value name.
        pub fn from_str_name(name: &str) -> std::option::Option<Self> {
            match name {
                "OTHER_ROUTES_UNSPECIFIED" => {
                    std::option::Option::Some(Self::OTHER_ROUTES_UNSPECIFIED)
                }
                "DEFAULT_ROUTING" => std::option::Option::Some(Self::DEFAULT_ROUTING),
                _ => std::option::Option::None,
            }
        }
    }

    impl std::convert::From<i32> for OtherRoutes {
        fn from(value: i32) -> Self {
            Self::new(value)
        }
    }

    impl std::default::Default for OtherRoutes {
        fn default() -> Self {
            Self::new(0)
        }
    }

    /// Target specifies network endpoints that this policy-based route applies to.
    /// If no target is specified, the PBR will be installed on all network
    /// endpoints (e.g. VMs, VPNs, and Interconnects) in the VPC.
    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum Target {
        /// Optional. VM instances that this policy-based route applies to.
        VirtualMachine(std::boxed::Box<crate::model::policy_based_route::VirtualMachine>),
        /// Optional. The interconnect attachments that this policy-based route
        /// applies to.
        InterconnectAttachment(
            std::boxed::Box<crate::model::policy_based_route::InterconnectAttachment>,
        ),
    }

    #[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
    #[serde(rename_all = "camelCase")]
    #[non_exhaustive]
    pub enum NextHop {
        /// Optional. The IP address of a global-access-enabled L4 ILB that is the
        /// next hop for matching packets. For this version, only nextHopIlbIp is
        /// supported.
        NextHopIlbIp(std::string::String),
        /// Optional. Other routes that will be referenced to determine the next hop
        /// of the packet.
        NextHopOtherRoutes(crate::model::policy_based_route::OtherRoutes),
    }
}

/// Request for
/// [PolicyBasedRoutingService.ListPolicyBasedRoutes][google.cloud.networkconnectivity.v1.PolicyBasedRoutingService.ListPolicyBasedRoutes]
/// method.
///
/// [google.cloud.networkconnectivity.v1.PolicyBasedRoutingService.ListPolicyBasedRoutes]: crate::client::PolicyBasedRoutingService::list_policy_based_routes
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListPolicyBasedRoutesRequest {
    /// Required. The parent resource's name.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// The maximum number of results per page that should be returned.
    pub page_size: i32,

    /// The page token.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub page_token: std::string::String,

    /// A filter expression that filters the results listed in the response.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub filter: std::string::String,

    /// Sort the results by a certain order.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub order_by: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListPolicyBasedRoutesRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::ListPolicyBasedRoutesRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [page_size][crate::model::ListPolicyBasedRoutesRequest::page_size].
    pub fn set_page_size<T: std::convert::Into<i32>>(mut self, v: T) -> Self {
        self.page_size = v.into();
        self
    }

    /// Sets the value of [page_token][crate::model::ListPolicyBasedRoutesRequest::page_token].
    pub fn set_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.page_token = v.into();
        self
    }

    /// Sets the value of [filter][crate::model::ListPolicyBasedRoutesRequest::filter].
    pub fn set_filter<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.filter = v.into();
        self
    }

    /// Sets the value of [order_by][crate::model::ListPolicyBasedRoutesRequest::order_by].
    pub fn set_order_by<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.order_by = v.into();
        self
    }
}

impl wkt::message::Message for ListPolicyBasedRoutesRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListPolicyBasedRoutesRequest"
    }
}

/// Response for
/// [PolicyBasedRoutingService.ListPolicyBasedRoutes][google.cloud.networkconnectivity.v1.PolicyBasedRoutingService.ListPolicyBasedRoutes]
/// method.
///
/// [google.cloud.networkconnectivity.v1.PolicyBasedRoutingService.ListPolicyBasedRoutes]: crate::client::PolicyBasedRoutingService::list_policy_based_routes
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct ListPolicyBasedRoutesResponse {
    /// Policy-based routes to be returned.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub policy_based_routes: std::vec::Vec<crate::model::PolicyBasedRoute>,

    /// The next pagination token in the List response. It should be used as
    /// page_token for the following request. An empty value means no more result.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub next_page_token: std::string::String,

    /// Locations that could not be reached.
    #[serde(skip_serializing_if = "std::vec::Vec::is_empty")]
    pub unreachable: std::vec::Vec<std::string::String>,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl ListPolicyBasedRoutesResponse {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [next_page_token][crate::model::ListPolicyBasedRoutesResponse::next_page_token].
    pub fn set_next_page_token<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.next_page_token = v.into();
        self
    }

    /// Sets the value of [policy_based_routes][crate::model::ListPolicyBasedRoutesResponse::policy_based_routes].
    pub fn set_policy_based_routes<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<crate::model::PolicyBasedRoute>,
    {
        use std::iter::Iterator;
        self.policy_based_routes = v.into_iter().map(|i| i.into()).collect();
        self
    }

    /// Sets the value of [unreachable][crate::model::ListPolicyBasedRoutesResponse::unreachable].
    pub fn set_unreachable<T, V>(mut self, v: T) -> Self
    where
        T: std::iter::IntoIterator<Item = V>,
        V: std::convert::Into<std::string::String>,
    {
        use std::iter::Iterator;
        self.unreachable = v.into_iter().map(|i| i.into()).collect();
        self
    }
}

impl wkt::message::Message for ListPolicyBasedRoutesResponse {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.ListPolicyBasedRoutesResponse"
    }
}

#[doc(hidden)]
impl gax::paginator::internal::PageableResponse for ListPolicyBasedRoutesResponse {
    type PageItem = crate::model::PolicyBasedRoute;

    fn items(self) -> std::vec::Vec<Self::PageItem> {
        self.policy_based_routes
    }

    fn next_page_token(&self) -> std::string::String {
        use std::clone::Clone;
        self.next_page_token.clone()
    }
}

/// Request for
/// [PolicyBasedRoutingService.GetPolicyBasedRoute][google.cloud.networkconnectivity.v1.PolicyBasedRoutingService.GetPolicyBasedRoute]
/// method.
///
/// [google.cloud.networkconnectivity.v1.PolicyBasedRoutingService.GetPolicyBasedRoute]: crate::client::PolicyBasedRoutingService::get_policy_based_route
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct GetPolicyBasedRouteRequest {
    /// Required. Name of the PolicyBasedRoute resource to get.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl GetPolicyBasedRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::GetPolicyBasedRouteRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }
}

impl wkt::message::Message for GetPolicyBasedRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.GetPolicyBasedRouteRequest"
    }
}

/// Request for
/// [PolicyBasedRoutingService.CreatePolicyBasedRoute][google.cloud.networkconnectivity.v1.PolicyBasedRoutingService.CreatePolicyBasedRoute]
/// method.
///
/// [google.cloud.networkconnectivity.v1.PolicyBasedRoutingService.CreatePolicyBasedRoute]: crate::client::PolicyBasedRoutingService::create_policy_based_route
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct CreatePolicyBasedRouteRequest {
    /// Required. The parent resource's name of the PolicyBasedRoute.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub parent: std::string::String,

    /// Required. Unique id for the policy-based route to create. Provided by the
    /// client when the resource is created. The name must comply with
    /// <https://google.aip.dev/122#resource-id-segments>. Specifically, the name
    /// must be 1-63 characters long and match the regular expression
    /// [a-z]([a-z0-9-]*[a-z0-9])?. The first character must be a lowercase letter,
    /// and all following characters (except for the last character) must be a
    /// dash, lowercase letter, or digit. The last character must be a lowercase
    /// letter or digit.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub policy_based_route_id: std::string::String,

    /// Required. Initial values for a new policy-based route.
    #[serde(skip_serializing_if = "std::option::Option::is_none")]
    pub policy_based_route: std::option::Option<crate::model::PolicyBasedRoute>,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server knows to
    /// ignore the request if it has already been completed. The server guarantees
    /// that for at least 60 minutes since the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, ignores the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl CreatePolicyBasedRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [parent][crate::model::CreatePolicyBasedRouteRequest::parent].
    pub fn set_parent<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.parent = v.into();
        self
    }

    /// Sets the value of [policy_based_route_id][crate::model::CreatePolicyBasedRouteRequest::policy_based_route_id].
    pub fn set_policy_based_route_id<T: std::convert::Into<std::string::String>>(
        mut self,
        v: T,
    ) -> Self {
        self.policy_based_route_id = v.into();
        self
    }

    /// Sets the value of [policy_based_route][crate::model::CreatePolicyBasedRouteRequest::policy_based_route].
    pub fn set_policy_based_route<
        T: std::convert::Into<std::option::Option<crate::model::PolicyBasedRoute>>,
    >(
        mut self,
        v: T,
    ) -> Self {
        self.policy_based_route = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::CreatePolicyBasedRouteRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for CreatePolicyBasedRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.CreatePolicyBasedRouteRequest"
    }
}

/// Request for
/// [PolicyBasedRoutingService.DeletePolicyBasedRoute][google.cloud.networkconnectivity.v1.PolicyBasedRoutingService.DeletePolicyBasedRoute]
/// method.
///
/// [google.cloud.networkconnectivity.v1.PolicyBasedRoutingService.DeletePolicyBasedRoute]: crate::client::PolicyBasedRoutingService::delete_policy_based_route
#[serde_with::serde_as]
#[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
#[serde(default, rename_all = "camelCase")]
#[non_exhaustive]
pub struct DeletePolicyBasedRouteRequest {
    /// Required. Name of the policy-based route resource to delete.
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub name: std::string::String,

    /// Optional. An optional request ID to identify requests. Specify a unique
    /// request ID so that if you must retry your request, the server knows to
    /// ignore the request if it has already been completed. The server guarantees
    /// that for at least 60 minutes after the first request.
    ///
    /// For example, consider a situation where you make an initial request and
    /// the request times out. If you make the request again with the same request
    /// ID, the server can check if original operation with the same request ID
    /// was received, and if so, ignores the second request. This prevents clients
    /// from accidentally creating duplicate commitments.
    ///
    /// The request ID must be a valid UUID with the exception that zero UUID is
    /// not supported (00000000-0000-0000-0000-000000000000).
    #[serde(skip_serializing_if = "std::string::String::is_empty")]
    pub request_id: std::string::String,

    #[serde(flatten, skip_serializing_if = "serde_json::Map::is_empty")]
    _unknown_fields: serde_json::Map<std::string::String, serde_json::Value>,
}

impl DeletePolicyBasedRouteRequest {
    pub fn new() -> Self {
        std::default::Default::default()
    }

    /// Sets the value of [name][crate::model::DeletePolicyBasedRouteRequest::name].
    pub fn set_name<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.name = v.into();
        self
    }

    /// Sets the value of [request_id][crate::model::DeletePolicyBasedRouteRequest::request_id].
    pub fn set_request_id<T: std::convert::Into<std::string::String>>(mut self, v: T) -> Self {
        self.request_id = v.into();
        self
    }
}

impl wkt::message::Message for DeletePolicyBasedRouteRequest {
    fn typename() -> &'static str {
        "type.googleapis.com/google.cloud.networkconnectivity.v1.DeletePolicyBasedRouteRequest"
    }
}

/// The infrastructure used for connections between consumers/producers.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct Infrastructure(i32);

impl Infrastructure {
    /// An invalid infrastructure as the default case.
    pub const INFRASTRUCTURE_UNSPECIFIED: Infrastructure = Infrastructure::new(0);

    /// Private Service Connect is used for connections.
    pub const PSC: Infrastructure = Infrastructure::new(1);

    /// Creates a new Infrastructure instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("INFRASTRUCTURE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("PSC"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "INFRASTRUCTURE_UNSPECIFIED" => {
                std::option::Option::Some(Self::INFRASTRUCTURE_UNSPECIFIED)
            }
            "PSC" => std::option::Option::Some(Self::PSC),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for Infrastructure {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for Infrastructure {
    fn default() -> Self {
        Self::new(0)
    }
}

/// The error type indicates whether a connection error is consumer facing,
/// producer facing or system internal.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct ConnectionErrorType(i32);

impl ConnectionErrorType {
    /// An invalid error type as the default case.
    pub const CONNECTION_ERROR_TYPE_UNSPECIFIED: ConnectionErrorType = ConnectionErrorType::new(0);

    /// The error is due to Service Automation system internal.
    pub const ERROR_INTERNAL: ConnectionErrorType = ConnectionErrorType::new(1);

    /// The error is due to the setup on consumer side.
    pub const ERROR_CONSUMER_SIDE: ConnectionErrorType = ConnectionErrorType::new(2);

    /// The error is due to the setup on producer side.
    pub const ERROR_PRODUCER_SIDE: ConnectionErrorType = ConnectionErrorType::new(3);

    /// Creates a new ConnectionErrorType instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("CONNECTION_ERROR_TYPE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("ERROR_INTERNAL"),
            2 => std::borrow::Cow::Borrowed("ERROR_CONSUMER_SIDE"),
            3 => std::borrow::Cow::Borrowed("ERROR_PRODUCER_SIDE"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "CONNECTION_ERROR_TYPE_UNSPECIFIED" => {
                std::option::Option::Some(Self::CONNECTION_ERROR_TYPE_UNSPECIFIED)
            }
            "ERROR_INTERNAL" => std::option::Option::Some(Self::ERROR_INTERNAL),
            "ERROR_CONSUMER_SIDE" => std::option::Option::Some(Self::ERROR_CONSUMER_SIDE),
            "ERROR_PRODUCER_SIDE" => std::option::Option::Some(Self::ERROR_PRODUCER_SIDE),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for ConnectionErrorType {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for ConnectionErrorType {
    fn default() -> Self {
        Self::new(0)
    }
}

/// The requested IP version for the PSC connection.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct IPVersion(i32);

impl IPVersion {
    /// Default value. We will use IPv4 or IPv6 depending on the IP version of
    /// first available subnetwork.
    pub const IP_VERSION_UNSPECIFIED: IPVersion = IPVersion::new(0);

    /// Will use IPv4 only.
    pub const IPV4: IPVersion = IPVersion::new(1);

    /// Will use IPv6 only.
    pub const IPV6: IPVersion = IPVersion::new(2);

    /// Creates a new IPVersion instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("IP_VERSION_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("IPV4"),
            2 => std::borrow::Cow::Borrowed("IPV6"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "IP_VERSION_UNSPECIFIED" => std::option::Option::Some(Self::IP_VERSION_UNSPECIFIED),
            "IPV4" => std::option::Option::Some(Self::IPV4),
            "IPV6" => std::option::Option::Some(Self::IPV6),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for IPVersion {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for IPVersion {
    fn default() -> Self {
        Self::new(0)
    }
}

/// Supported features for a location
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct LocationFeature(i32);

impl LocationFeature {
    /// No publicly supported feature in this location
    pub const LOCATION_FEATURE_UNSPECIFIED: LocationFeature = LocationFeature::new(0);

    /// Site-to-cloud spokes are supported in this location
    pub const SITE_TO_CLOUD_SPOKES: LocationFeature = LocationFeature::new(1);

    /// Site-to-site spokes are supported in this location
    pub const SITE_TO_SITE_SPOKES: LocationFeature = LocationFeature::new(2);

    /// Creates a new LocationFeature instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("LOCATION_FEATURE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("SITE_TO_CLOUD_SPOKES"),
            2 => std::borrow::Cow::Borrowed("SITE_TO_SITE_SPOKES"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "LOCATION_FEATURE_UNSPECIFIED" => {
                std::option::Option::Some(Self::LOCATION_FEATURE_UNSPECIFIED)
            }
            "SITE_TO_CLOUD_SPOKES" => std::option::Option::Some(Self::SITE_TO_CLOUD_SPOKES),
            "SITE_TO_SITE_SPOKES" => std::option::Option::Some(Self::SITE_TO_SITE_SPOKES),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for LocationFeature {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for LocationFeature {
    fn default() -> Self {
        Self::new(0)
    }
}

/// The route's type
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct RouteType(i32);

impl RouteType {
    /// No route type information specified
    pub const ROUTE_TYPE_UNSPECIFIED: RouteType = RouteType::new(0);

    /// The route leads to a destination within the primary address range of the
    /// VPC network's subnet.
    pub const VPC_PRIMARY_SUBNET: RouteType = RouteType::new(1);

    /// The route leads to a destination within the secondary address range of the
    /// VPC network's subnet.
    pub const VPC_SECONDARY_SUBNET: RouteType = RouteType::new(2);

    /// The route leads to a destination in a dynamic route. Dynamic routes are
    /// derived from Border Gateway Protocol (BGP) advertisements received from an
    /// NCC hybrid spoke.
    pub const DYNAMIC_ROUTE: RouteType = RouteType::new(3);

    /// Creates a new RouteType instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("ROUTE_TYPE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("VPC_PRIMARY_SUBNET"),
            2 => std::borrow::Cow::Borrowed("VPC_SECONDARY_SUBNET"),
            3 => std::borrow::Cow::Borrowed("DYNAMIC_ROUTE"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "ROUTE_TYPE_UNSPECIFIED" => std::option::Option::Some(Self::ROUTE_TYPE_UNSPECIFIED),
            "VPC_PRIMARY_SUBNET" => std::option::Option::Some(Self::VPC_PRIMARY_SUBNET),
            "VPC_SECONDARY_SUBNET" => std::option::Option::Some(Self::VPC_SECONDARY_SUBNET),
            "DYNAMIC_ROUTE" => std::option::Option::Some(Self::DYNAMIC_ROUTE),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for RouteType {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for RouteType {
    fn default() -> Self {
        Self::new(0)
    }
}

/// The State enum represents the lifecycle stage of a Network Connectivity
/// Center resource.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct State(i32);

impl State {
    /// No state information available
    pub const STATE_UNSPECIFIED: State = State::new(0);

    /// The resource's create operation is in progress.
    pub const CREATING: State = State::new(1);

    /// The resource is active
    pub const ACTIVE: State = State::new(2);

    /// The resource's delete operation is in progress.
    pub const DELETING: State = State::new(3);

    /// The resource's accept operation is in progress.
    pub const ACCEPTING: State = State::new(8);

    /// The resource's reject operation is in progress.
    pub const REJECTING: State = State::new(9);

    /// The resource's update operation is in progress.
    pub const UPDATING: State = State::new(6);

    /// The resource is inactive.
    pub const INACTIVE: State = State::new(7);

    /// The hub associated with this spoke resource has been deleted.
    /// This state applies to spoke resources only.
    pub const OBSOLETE: State = State::new(10);

    /// The resource is in an undefined state due to resource creation or deletion
    /// failure. You can try to delete the resource later or contact support for
    /// help.
    pub const FAILED: State = State::new(11);

    /// Creates a new State instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("STATE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("CREATING"),
            2 => std::borrow::Cow::Borrowed("ACTIVE"),
            3 => std::borrow::Cow::Borrowed("DELETING"),
            6 => std::borrow::Cow::Borrowed("UPDATING"),
            7 => std::borrow::Cow::Borrowed("INACTIVE"),
            8 => std::borrow::Cow::Borrowed("ACCEPTING"),
            9 => std::borrow::Cow::Borrowed("REJECTING"),
            10 => std::borrow::Cow::Borrowed("OBSOLETE"),
            11 => std::borrow::Cow::Borrowed("FAILED"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "STATE_UNSPECIFIED" => std::option::Option::Some(Self::STATE_UNSPECIFIED),
            "CREATING" => std::option::Option::Some(Self::CREATING),
            "ACTIVE" => std::option::Option::Some(Self::ACTIVE),
            "DELETING" => std::option::Option::Some(Self::DELETING),
            "ACCEPTING" => std::option::Option::Some(Self::ACCEPTING),
            "REJECTING" => std::option::Option::Some(Self::REJECTING),
            "UPDATING" => std::option::Option::Some(Self::UPDATING),
            "INACTIVE" => std::option::Option::Some(Self::INACTIVE),
            "OBSOLETE" => std::option::Option::Some(Self::OBSOLETE),
            "FAILED" => std::option::Option::Some(Self::FAILED),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for State {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for State {
    fn default() -> Self {
        Self::new(0)
    }
}

/// The SpokeType enum represents the type of spoke. The type
/// reflects the kind of resource that a spoke is associated with.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct SpokeType(i32);

impl SpokeType {
    /// Unspecified spoke type.
    pub const SPOKE_TYPE_UNSPECIFIED: SpokeType = SpokeType::new(0);

    /// Spokes associated with VPN tunnels.
    pub const VPN_TUNNEL: SpokeType = SpokeType::new(1);

    /// Spokes associated with VLAN attachments.
    pub const INTERCONNECT_ATTACHMENT: SpokeType = SpokeType::new(2);

    /// Spokes associated with router appliance instances.
    pub const ROUTER_APPLIANCE: SpokeType = SpokeType::new(3);

    /// Spokes associated with VPC networks.
    pub const VPC_NETWORK: SpokeType = SpokeType::new(4);

    /// Spokes that are backed by a producer VPC network.
    pub const PRODUCER_VPC_NETWORK: SpokeType = SpokeType::new(7);

    /// Creates a new SpokeType instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("SPOKE_TYPE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("VPN_TUNNEL"),
            2 => std::borrow::Cow::Borrowed("INTERCONNECT_ATTACHMENT"),
            3 => std::borrow::Cow::Borrowed("ROUTER_APPLIANCE"),
            4 => std::borrow::Cow::Borrowed("VPC_NETWORK"),
            7 => std::borrow::Cow::Borrowed("PRODUCER_VPC_NETWORK"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "SPOKE_TYPE_UNSPECIFIED" => std::option::Option::Some(Self::SPOKE_TYPE_UNSPECIFIED),
            "VPN_TUNNEL" => std::option::Option::Some(Self::VPN_TUNNEL),
            "INTERCONNECT_ATTACHMENT" => std::option::Option::Some(Self::INTERCONNECT_ATTACHMENT),
            "ROUTER_APPLIANCE" => std::option::Option::Some(Self::ROUTER_APPLIANCE),
            "VPC_NETWORK" => std::option::Option::Some(Self::VPC_NETWORK),
            "PRODUCER_VPC_NETWORK" => std::option::Option::Some(Self::PRODUCER_VPC_NETWORK),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for SpokeType {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for SpokeType {
    fn default() -> Self {
        Self::new(0)
    }
}

/// This enum controls the policy mode used in a hub.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct PolicyMode(i32);

impl PolicyMode {
    /// Policy mode is unspecified. It defaults to PRESET
    /// with preset_topology = MESH.
    pub const POLICY_MODE_UNSPECIFIED: PolicyMode = PolicyMode::new(0);

    /// Hub uses one of the preset topologies.
    pub const PRESET: PolicyMode = PolicyMode::new(1);

    /// Creates a new PolicyMode instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("POLICY_MODE_UNSPECIFIED"),
            1 => std::borrow::Cow::Borrowed("PRESET"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "POLICY_MODE_UNSPECIFIED" => std::option::Option::Some(Self::POLICY_MODE_UNSPECIFIED),
            "PRESET" => std::option::Option::Some(Self::PRESET),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for PolicyMode {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for PolicyMode {
    fn default() -> Self {
        Self::new(0)
    }
}

/// The list of available preset topologies.
#[derive(Clone, Debug, PartialEq, serde::Deserialize, serde::Serialize)]
pub struct PresetTopology(i32);

impl PresetTopology {
    /// Preset topology is unspecified. When policy_mode = PRESET,
    /// it defaults to MESH.
    pub const PRESET_TOPOLOGY_UNSPECIFIED: PresetTopology = PresetTopology::new(0);

    /// Mesh topology is implemented. Group `default` is automatically created.
    /// All spokes in the hub are added to group `default`.
    pub const MESH: PresetTopology = PresetTopology::new(2);

    /// Star topology is implemented. Two groups, `center` and `edge`, are
    /// automatically created along with hub creation. Spokes have to join one of
    /// the groups during creation.
    pub const STAR: PresetTopology = PresetTopology::new(3);

    /// Creates a new PresetTopology instance.
    pub(crate) const fn new(value: i32) -> Self {
        Self(value)
    }

    /// Gets the enum value.
    pub fn value(&self) -> i32 {
        self.0
    }

    /// Gets the enum value as a string.
    pub fn as_str_name(&self) -> std::borrow::Cow<'static, str> {
        match self.0 {
            0 => std::borrow::Cow::Borrowed("PRESET_TOPOLOGY_UNSPECIFIED"),
            2 => std::borrow::Cow::Borrowed("MESH"),
            3 => std::borrow::Cow::Borrowed("STAR"),
            _ => std::borrow::Cow::Owned(std::format!("UNKNOWN-VALUE:{}", self.0)),
        }
    }

    /// Creates an enum value from the value name.
    pub fn from_str_name(name: &str) -> std::option::Option<Self> {
        match name {
            "PRESET_TOPOLOGY_UNSPECIFIED" => {
                std::option::Option::Some(Self::PRESET_TOPOLOGY_UNSPECIFIED)
            }
            "MESH" => std::option::Option::Some(Self::MESH),
            "STAR" => std::option::Option::Some(Self::STAR),
            _ => std::option::Option::None,
        }
    }
}

impl std::convert::From<i32> for PresetTopology {
    fn from(value: i32) -> Self {
        Self::new(value)
    }
}

impl std::default::Default for PresetTopology {
    fn default() -> Self {
        Self::new(0)
    }
}
