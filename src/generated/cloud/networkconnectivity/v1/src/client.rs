// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;
use std::sync::Arc;

/// Implements a client for the Network Connectivity API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_networkconnectivity_v1::client::HubService;
/// let client = HubService::builder().build().await?;
/// // use `client` to make requests to the {Codec.APITitle}}.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// Network Connectivity Center is a hub-and-spoke abstraction for network
/// connectivity management in Google Cloud. It reduces operational complexity
/// through a simple, centralized connectivity management model.
///
/// # Configuration
///
/// To configure `HubService` use the `with_*` methods in the type returned
/// by [builder()][HubService::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://networkconnectivity.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::hub_service::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::hub_service::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `HubService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `HubService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct HubService {
    inner: Arc<dyn super::stub::dynamic::HubService>,
}

impl HubService {
    /// Returns a builder for [HubService].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_networkconnectivity_v1::client::HubService;
    /// let client = HubService::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::hub_service::ClientBuilder {
        gax::client_builder::internal::new_builder(super::builder::hub_service::client::Factory)
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::HubService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stub::dynamic::HubService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stub::HubService> {
        super::transport::HubService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stub::HubService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::HubService::new)
    }

    /// Lists the Network Connectivity Center hubs associated with a given project.
    pub fn list_hubs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::hub_service::ListHubs {
        super::builder::hub_service::ListHubs::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Gets details about a Network Connectivity Center hub.
    pub fn get_hub(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::hub_service::GetHub {
        super::builder::hub_service::GetHub::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a new Network Connectivity Center hub in the specified project.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_hub(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::hub_service::CreateHub {
        super::builder::hub_service::CreateHub::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates the description and/or labels of a Network Connectivity Center
    /// hub.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_hub(
        &self,
        hub: impl Into<crate::model::Hub>,
    ) -> super::builder::hub_service::UpdateHub {
        super::builder::hub_service::UpdateHub::new(self.inner.clone()).set_hub(hub.into())
    }

    /// Deletes a Network Connectivity Center hub.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_hub(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::hub_service::DeleteHub {
        super::builder::hub_service::DeleteHub::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists the Network Connectivity Center spokes associated with a
    /// specified hub and location. The list includes both spokes that are attached
    /// to the hub and spokes that have been proposed but not yet accepted.
    pub fn list_hub_spokes(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::hub_service::ListHubSpokes {
        super::builder::hub_service::ListHubSpokes::new(self.inner.clone()).set_name(name.into())
    }

    /// Query the Private Service Connect propagation status of a Network
    /// Connectivity Center hub.
    pub fn query_hub_status(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::hub_service::QueryHubStatus {
        super::builder::hub_service::QueryHubStatus::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists the Network Connectivity Center spokes in a specified project and
    /// location.
    pub fn list_spokes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::hub_service::ListSpokes {
        super::builder::hub_service::ListSpokes::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Gets details about a Network Connectivity Center spoke.
    pub fn get_spoke(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::hub_service::GetSpoke {
        super::builder::hub_service::GetSpoke::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a Network Connectivity Center spoke.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_spoke(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::hub_service::CreateSpoke {
        super::builder::hub_service::CreateSpoke::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates the parameters of a Network Connectivity Center spoke.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_spoke(
        &self,
        spoke: impl Into<crate::model::Spoke>,
    ) -> super::builder::hub_service::UpdateSpoke {
        super::builder::hub_service::UpdateSpoke::new(self.inner.clone()).set_spoke(spoke.into())
    }

    /// Rejects a Network Connectivity Center spoke from being attached to a hub.
    /// If the spoke was previously in the `ACTIVE` state, it
    /// transitions to the `INACTIVE` state and is no longer able to
    /// connect to other spokes that are attached to the hub.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn reject_hub_spoke(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::hub_service::RejectHubSpoke {
        super::builder::hub_service::RejectHubSpoke::new(self.inner.clone()).set_name(name.into())
    }

    /// Accepts a proposal to attach a Network Connectivity Center spoke
    /// to a hub.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn accept_hub_spoke(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::hub_service::AcceptHubSpoke {
        super::builder::hub_service::AcceptHubSpoke::new(self.inner.clone()).set_name(name.into())
    }

    /// Deletes a Network Connectivity Center spoke.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_spoke(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::hub_service::DeleteSpoke {
        super::builder::hub_service::DeleteSpoke::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets details about a Network Connectivity Center route table.
    pub fn get_route_table(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::hub_service::GetRouteTable {
        super::builder::hub_service::GetRouteTable::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets details about the specified route.
    pub fn get_route(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::hub_service::GetRoute {
        super::builder::hub_service::GetRoute::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists routes in a given route table.
    pub fn list_routes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::hub_service::ListRoutes {
        super::builder::hub_service::ListRoutes::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Lists route tables in a given hub.
    pub fn list_route_tables(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::hub_service::ListRouteTables {
        super::builder::hub_service::ListRouteTables::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details about a Network Connectivity Center group.
    pub fn get_group(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::hub_service::GetGroup {
        super::builder::hub_service::GetGroup::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists groups in a given hub.
    pub fn list_groups(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::hub_service::ListGroups {
        super::builder::hub_service::ListGroups::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Updates the parameters of a Network Connectivity Center group.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn update_group(
        &self,
        group: impl Into<crate::model::Group>,
    ) -> super::builder::hub_service::UpdateGroup {
        super::builder::hub_service::UpdateGroup::new(self.inner.clone()).set_group(group.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::hub_service::ListLocations {
        super::builder::hub_service::ListLocations::new(self.inner.clone()).set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::hub_service::GetLocation {
        super::builder::hub_service::GetLocation::new(self.inner.clone()).set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::hub_service::SetIamPolicy {
        super::builder::hub_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::hub_service::GetIamPolicy {
        super::builder::hub_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::hub_service::TestIamPermissions {
        super::builder::hub_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::hub_service::ListOperations {
        super::builder::hub_service::ListOperations::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::hub_service::GetOperation {
        super::builder::hub_service::GetOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::hub_service::DeleteOperation {
        super::builder::hub_service::DeleteOperation::new(self.inner.clone()).set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::hub_service::CancelOperation {
        super::builder::hub_service::CancelOperation::new(self.inner.clone()).set_name(name.into())
    }
}

/// Implements a client for the Network Connectivity API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_networkconnectivity_v1::client::PolicyBasedRoutingService;
/// let client = PolicyBasedRoutingService::builder().build().await?;
/// // use `client` to make requests to the {Codec.APITitle}}.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// Policy-Based Routing allows GCP customers to specify flexibile routing
/// policies for Layer 4 traffic traversing through the connected service.
///
/// # Configuration
///
/// To configure `PolicyBasedRoutingService` use the `with_*` methods in the type returned
/// by [builder()][PolicyBasedRoutingService::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://networkconnectivity.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::policy_based_routing_service::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::policy_based_routing_service::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `PolicyBasedRoutingService` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `PolicyBasedRoutingService` in
/// an [Rc](std::rc::Rc) or [Arc] to reuse it, because it already uses an `Arc`
/// internally.
#[derive(Clone, Debug)]
pub struct PolicyBasedRoutingService {
    inner: Arc<dyn super::stub::dynamic::PolicyBasedRoutingService>,
}

impl PolicyBasedRoutingService {
    /// Returns a builder for [PolicyBasedRoutingService].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_networkconnectivity_v1::client::PolicyBasedRoutingService;
    /// let client = PolicyBasedRoutingService::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::policy_based_routing_service::ClientBuilder {
        gax::client_builder::internal::new_builder(
            super::builder::policy_based_routing_service::client::Factory,
        )
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::PolicyBasedRoutingService + 'static,
    {
        Self {
            inner: Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gax::options::ClientConfig,
    ) -> Result<Arc<dyn super::stub::dynamic::PolicyBasedRoutingService>> {
        if conf.tracing_enabled() {
            return Ok(Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stub::PolicyBasedRoutingService> {
        super::transport::PolicyBasedRoutingService::new(conf).await
    }

    async fn build_with_tracing(
        conf: gax::options::ClientConfig,
    ) -> Result<impl super::stub::PolicyBasedRoutingService> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::PolicyBasedRoutingService::new)
    }

    /// Lists PolicyBasedRoutes in a given project and location.
    pub fn list_policy_based_routes(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::policy_based_routing_service::ListPolicyBasedRoutes {
        super::builder::policy_based_routing_service::ListPolicyBasedRoutes::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Gets details of a single PolicyBasedRoute.
    pub fn get_policy_based_route(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::policy_based_routing_service::GetPolicyBasedRoute {
        super::builder::policy_based_routing_service::GetPolicyBasedRoute::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Creates a new PolicyBasedRoute in a given project and location.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn create_policy_based_route(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::policy_based_routing_service::CreatePolicyBasedRoute {
        super::builder::policy_based_routing_service::CreatePolicyBasedRoute::new(
            self.inner.clone(),
        )
        .set_parent(parent.into())
    }

    /// Deletes a single PolicyBasedRoute.
    ///
    /// # Long running operations
    ///
    /// This method is used to start, and/or poll a [long-running Operation].
    /// The [Working with long-running operations] chapter in the [user guide]
    /// covers these operations in detail.
    ///
    /// [long-running operation]: https://google.aip.dev/151
    /// [user guide]: https://googleapis.github.io/google-cloud-rust/
    /// [working with long-running operations]: https://googleapis.github.io/google-cloud-rust/working_with_long_running_operations.html
    pub fn delete_policy_based_route(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::policy_based_routing_service::DeletePolicyBasedRoute {
        super::builder::policy_based_routing_service::DeletePolicyBasedRoute::new(
            self.inner.clone(),
        )
        .set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::policy_based_routing_service::ListLocations {
        super::builder::policy_based_routing_service::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::policy_based_routing_service::GetLocation {
        super::builder::policy_based_routing_service::GetLocation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Sets the access control policy on the specified resource. Replaces
    /// any existing policy.
    ///
    /// Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED`
    /// errors.
    pub fn set_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::policy_based_routing_service::SetIamPolicy {
        super::builder::policy_based_routing_service::SetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Gets the access control policy for a resource. Returns an empty policy
    /// if the resource exists and does not have a policy set.
    pub fn get_iam_policy(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::policy_based_routing_service::GetIamPolicy {
        super::builder::policy_based_routing_service::GetIamPolicy::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Returns permissions that a caller has on the specified resource. If the
    /// resource does not exist, this will return an empty set of
    /// permissions, not a `NOT_FOUND` error.
    ///
    /// Note: This operation is designed to be used for building
    /// permission-aware UIs and command-line tools, not for authorization
    /// checking. This operation may "fail open" without warning.
    pub fn test_iam_permissions(
        &self,
        resource: impl Into<std::string::String>,
    ) -> super::builder::policy_based_routing_service::TestIamPermissions {
        super::builder::policy_based_routing_service::TestIamPermissions::new(self.inner.clone())
            .set_resource(resource.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn list_operations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::policy_based_routing_service::ListOperations {
        super::builder::policy_based_routing_service::ListOperations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn get_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::policy_based_routing_service::GetOperation {
        super::builder::policy_based_routing_service::GetOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn delete_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::policy_based_routing_service::DeleteOperation {
        super::builder::policy_based_routing_service::DeleteOperation::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Provides the [Operations][google.longrunning.Operations] service functionality in this service.
    ///
    /// [google.longrunning.Operations]: longrunning::client::Operations
    pub fn cancel_operation(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::policy_based_routing_service::CancelOperation {
        super::builder::policy_based_routing_service::CancelOperation::new(self.inner.clone())
            .set_name(name.into())
    }
}
