// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
#![allow(rustdoc::redundant_explicit_links)]
#![allow(rustdoc::broken_intra_doc_links)]

use crate::Result;

/// Implements a client for the Cloud Scheduler API.
///
/// # Example
/// ```
/// # tokio_test::block_on(async {
/// # use google_cloud_scheduler_v1::client::CloudScheduler;
/// let client = CloudScheduler::builder().build().await?;
/// // use `client` to make requests to the Cloud Scheduler API.
/// # gax::Result::<()>::Ok(()) });
/// ```
///
/// # Service Description
///
/// The Cloud Scheduler API allows external entities to reliably
/// schedule asynchronous jobs.
///
/// # Configuration
///
/// To configure `CloudScheduler` use the `with_*` methods in the type returned
/// by [builder()][CloudScheduler::builder]. The default configuration should
/// work for most applications. Common configuration changes include
///
/// * [with_endpoint()]: by default this client uses the global default endpoint
///   (`https://cloudscheduler.googleapis.com`). Applications using regional
///   endpoints or running in restricted networks (e.g. a network configured
//    with [Private Google Access with VPC Service Controls]) may want to
///   override this default.
/// * [with_credentials()]: by default this client uses
///   [Application Default Credentials]. Applications using custom
///   authentication may need to override this default.
///
/// [with_endpoint()]: super::builder::cloud_scheduler::ClientBuilder::with_endpoint
/// [with_credentials()]: super::builder::cloud_scheduler::ClientBuilder::credentials
/// [Private Google Access with VPC Service Controls]: https://cloud.google.com/vpc-service-controls/docs/private-connectivity
/// [Application Default Credentials]: https://cloud.google.com/docs/authentication#adc
///
/// # Pooling and Cloning
///
/// `CloudScheduler` holds a connection pool internally, it is advised to
/// create one and the reuse it.  You do not need to wrap `CloudScheduler` in
/// an [Rc](std::rc::Rc) or [Arc](std::sync::Arc) to reuse it, because it
/// already uses an `Arc` internally.
#[derive(Clone, Debug)]
pub struct CloudScheduler {
    inner: std::sync::Arc<dyn super::stub::dynamic::CloudScheduler>,
}

impl CloudScheduler {
    /// Returns a builder for [CloudScheduler].
    ///
    /// ```
    /// # tokio_test::block_on(async {
    /// # use google_cloud_scheduler_v1::client::CloudScheduler;
    /// let client = CloudScheduler::builder().build().await?;
    /// # gax::Result::<()>::Ok(()) });
    /// ```
    pub fn builder() -> super::builder::cloud_scheduler::ClientBuilder {
        gax::client_builder::internal::new_builder(super::builder::cloud_scheduler::client::Factory)
    }

    /// Creates a new client from the provided stub.
    ///
    /// The most common case for calling this function is in tests mocking the
    /// client's behavior.
    pub fn from_stub<T>(stub: T) -> Self
    where
        T: super::stub::CloudScheduler + 'static,
    {
        Self {
            inner: std::sync::Arc::new(stub),
        }
    }

    pub(crate) async fn new(config: gaxi::options::ClientConfig) -> Result<Self> {
        let inner = Self::build_inner(config).await?;
        Ok(Self { inner })
    }

    async fn build_inner(
        conf: gaxi::options::ClientConfig,
    ) -> Result<std::sync::Arc<dyn super::stub::dynamic::CloudScheduler>> {
        if gaxi::options::tracing_enabled(&conf) {
            return Ok(std::sync::Arc::new(Self::build_with_tracing(conf).await?));
        }
        Ok(std::sync::Arc::new(Self::build_transport(conf).await?))
    }

    async fn build_transport(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::CloudScheduler> {
        super::transport::CloudScheduler::new(conf).await
    }

    async fn build_with_tracing(
        conf: gaxi::options::ClientConfig,
    ) -> Result<impl super::stub::CloudScheduler> {
        Self::build_transport(conf)
            .await
            .map(super::tracing::CloudScheduler::new)
    }

    /// Lists jobs.
    pub fn list_jobs(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::cloud_scheduler::ListJobs {
        super::builder::cloud_scheduler::ListJobs::new(self.inner.clone()).set_parent(parent.into())
    }

    /// Gets a job.
    pub fn get_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::cloud_scheduler::GetJob {
        super::builder::cloud_scheduler::GetJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Creates a job.
    pub fn create_job(
        &self,
        parent: impl Into<std::string::String>,
    ) -> super::builder::cloud_scheduler::CreateJob {
        super::builder::cloud_scheduler::CreateJob::new(self.inner.clone())
            .set_parent(parent.into())
    }

    /// Updates a job.
    ///
    /// If successful, the updated [Job][google.cloud.scheduler.v1.Job] is
    /// returned. If the job does not exist, `NOT_FOUND` is returned.
    ///
    /// If UpdateJob does not successfully return, it is possible for the
    /// job to be in an
    /// [Job.State.UPDATE_FAILED][google.cloud.scheduler.v1.Job.State.UPDATE_FAILED]
    /// state. A job in this state may not be executed. If this happens, retry the
    /// UpdateJob request until a successful response is received.
    ///
    /// [google.cloud.scheduler.v1.Job]: crate::model::Job
    /// [google.cloud.scheduler.v1.Job.State.UPDATE_FAILED]: crate::model::job::State::UpdateFailed
    pub fn update_job(
        &self,
        job: impl Into<crate::model::Job>,
    ) -> super::builder::cloud_scheduler::UpdateJob {
        super::builder::cloud_scheduler::UpdateJob::new(self.inner.clone()).set_job(job.into())
    }

    /// Deletes a job.
    pub fn delete_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::cloud_scheduler::DeleteJob {
        super::builder::cloud_scheduler::DeleteJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Pauses a job.
    ///
    /// If a job is paused then the system will stop executing the job
    /// until it is re-enabled via
    /// [ResumeJob][google.cloud.scheduler.v1.CloudScheduler.ResumeJob]. The state
    /// of the job is stored in [state][google.cloud.scheduler.v1.Job.state]; if
    /// paused it will be set to
    /// [Job.State.PAUSED][google.cloud.scheduler.v1.Job.State.PAUSED]. A job must
    /// be in [Job.State.ENABLED][google.cloud.scheduler.v1.Job.State.ENABLED] to
    /// be paused.
    ///
    /// [google.cloud.scheduler.v1.CloudScheduler.ResumeJob]: crate::client::CloudScheduler::resume_job
    /// [google.cloud.scheduler.v1.Job.State.ENABLED]: crate::model::job::State::Enabled
    /// [google.cloud.scheduler.v1.Job.State.PAUSED]: crate::model::job::State::Paused
    /// [google.cloud.scheduler.v1.Job.state]: crate::model::Job::state
    pub fn pause_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::cloud_scheduler::PauseJob {
        super::builder::cloud_scheduler::PauseJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Resume a job.
    ///
    /// This method reenables a job after it has been
    /// [Job.State.PAUSED][google.cloud.scheduler.v1.Job.State.PAUSED]. The state
    /// of a job is stored in [Job.state][google.cloud.scheduler.v1.Job.state];
    /// after calling this method it will be set to
    /// [Job.State.ENABLED][google.cloud.scheduler.v1.Job.State.ENABLED]. A job
    /// must be in [Job.State.PAUSED][google.cloud.scheduler.v1.Job.State.PAUSED]
    /// to be resumed.
    ///
    /// [google.cloud.scheduler.v1.Job.State.ENABLED]: crate::model::job::State::Enabled
    /// [google.cloud.scheduler.v1.Job.State.PAUSED]: crate::model::job::State::Paused
    /// [google.cloud.scheduler.v1.Job.state]: crate::model::Job::state
    pub fn resume_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::cloud_scheduler::ResumeJob {
        super::builder::cloud_scheduler::ResumeJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Forces a job to run now.
    ///
    /// When this method is called, Cloud Scheduler will dispatch the job, even
    /// if the job is already running.
    pub fn run_job(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::cloud_scheduler::RunJob {
        super::builder::cloud_scheduler::RunJob::new(self.inner.clone()).set_name(name.into())
    }

    /// Lists information about the supported locations for this service.
    pub fn list_locations(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::cloud_scheduler::ListLocations {
        super::builder::cloud_scheduler::ListLocations::new(self.inner.clone())
            .set_name(name.into())
    }

    /// Gets information about a location.
    pub fn get_location(
        &self,
        name: impl Into<std::string::String>,
    ) -> super::builder::cloud_scheduler::GetLocation {
        super::builder::cloud_scheduler::GetLocation::new(self.inner.clone()).set_name(name.into())
    }
}
