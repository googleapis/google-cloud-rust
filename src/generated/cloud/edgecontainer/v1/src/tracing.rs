// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.
use crate::Result;

/// Implements a [EdgeContainer](crate::stubs::EdgeContainer) decorator for logging and tracing.
#[derive(Clone, Debug)]
pub struct EdgeContainer<T>
where
    T: crate::stubs::EdgeContainer + std::fmt::Debug + Send + Sync,
{
    inner: T,
}

impl<T> EdgeContainer<T>
where
    T: crate::stubs::EdgeContainer + std::fmt::Debug + Send + Sync,
{
    pub fn new(inner: T) -> Self {
        Self { inner }
    }
}

impl<T> crate::stubs::EdgeContainer for EdgeContainer<T>
where
    T: crate::stubs::EdgeContainer + std::fmt::Debug + Send + Sync,
{
    #[tracing::instrument(ret)]
    async fn list_clusters(
        &self,
        req: crate::model::ListClustersRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListClustersResponse> {
        self.inner.list_clusters(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_cluster(
        &self,
        req: crate::model::GetClusterRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Cluster> {
        self.inner.get_cluster(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_cluster(
        &self,
        req: crate::model::CreateClusterRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.create_cluster(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_cluster(
        &self,
        req: crate::model::UpdateClusterRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.update_cluster(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn upgrade_cluster(
        &self,
        req: crate::model::UpgradeClusterRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.upgrade_cluster(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_cluster(
        &self,
        req: crate::model::DeleteClusterRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_cluster(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn generate_access_token(
        &self,
        req: crate::model::GenerateAccessTokenRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::GenerateAccessTokenResponse> {
        self.inner.generate_access_token(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn generate_offline_credential(
        &self,
        req: crate::model::GenerateOfflineCredentialRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::GenerateOfflineCredentialResponse> {
        self.inner.generate_offline_credential(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_node_pools(
        &self,
        req: crate::model::ListNodePoolsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListNodePoolsResponse> {
        self.inner.list_node_pools(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_node_pool(
        &self,
        req: crate::model::GetNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::NodePool> {
        self.inner.get_node_pool(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_node_pool(
        &self,
        req: crate::model::CreateNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.create_node_pool(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn update_node_pool(
        &self,
        req: crate::model::UpdateNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.update_node_pool(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_node_pool(
        &self,
        req: crate::model::DeleteNodePoolRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_node_pool(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_machines(
        &self,
        req: crate::model::ListMachinesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListMachinesResponse> {
        self.inner.list_machines(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_machine(
        &self,
        req: crate::model::GetMachineRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::Machine> {
        self.inner.get_machine(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_vpn_connections(
        &self,
        req: crate::model::ListVpnConnectionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ListVpnConnectionsResponse> {
        self.inner.list_vpn_connections(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_vpn_connection(
        &self,
        req: crate::model::GetVpnConnectionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::VpnConnection> {
        self.inner.get_vpn_connection(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn create_vpn_connection(
        &self,
        req: crate::model::CreateVpnConnectionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.create_vpn_connection(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_vpn_connection(
        &self,
        req: crate::model::DeleteVpnConnectionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.delete_vpn_connection(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_server_config(
        &self,
        req: crate::model::GetServerConfigRequest,
        options: gax::options::RequestOptions,
    ) -> Result<crate::model::ServerConfig> {
        self.inner.get_server_config(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<location::model::ListLocationsResponse> {
        self.inner.list_locations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<location::model::Location> {
        self.inner.get_location(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::ListOperationsResponse> {
        self.inner.list_operations(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<longrunning::model::Operation> {
        self.inner.get_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.delete_operation(req, options).await
    }

    #[tracing::instrument(ret)]
    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<wkt::Empty> {
        self.inner.cancel_operation(req, options).await
    }

    fn get_polling_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_policy::PollingPolicy> {
        self.inner.get_polling_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}
