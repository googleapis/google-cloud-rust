// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

//! Traits to mock the clients in this library.
//!
//! Application developers may need to mock the clients in this library to test
//! how their application works with different (and sometimes hard to trigger)
//! client and service behavior. Such test can define mocks implementing the
//! trait(s) defined in this module, initialize the client with an instance of
//! this mock in their tests, and verify their application responds as expected.

#![allow(rustdoc::broken_intra_doc_links)]

use gax::error::Error;

pub(crate) mod dynamic;

/// Defines the trait used to implement [super::client::CaseAttachmentService].
///
/// Application developers may need to implement this trait to mock
/// `client::CaseAttachmentService`.  In other use-cases, application developers only
/// use `client::CaseAttachmentService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait CaseAttachmentService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::CaseAttachmentService::list_attachments].
    fn list_attachments(
        &self,
        _req: crate::model::ListAttachmentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListAttachmentsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListAttachmentsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }
}

/// Defines the trait used to implement [super::client::CaseService].
///
/// Application developers may need to implement this trait to mock
/// `client::CaseService`.  In other use-cases, application developers only
/// use `client::CaseService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait CaseService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::CaseService::get_case].
    fn get_case(
        &self,
        _req: crate::model::GetCaseRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Case>> + Send {
        std::future::ready::<crate::Result<crate::model::Case>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CaseService::list_cases].
    fn list_cases(
        &self,
        _req: crate::model::ListCasesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListCasesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListCasesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CaseService::search_cases].
    fn search_cases(
        &self,
        _req: crate::model::SearchCasesRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::SearchCasesResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::SearchCasesResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CaseService::create_case].
    fn create_case(
        &self,
        _req: crate::model::CreateCaseRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Case>> + Send {
        std::future::ready::<crate::Result<crate::model::Case>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CaseService::update_case].
    fn update_case(
        &self,
        _req: crate::model::UpdateCaseRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Case>> + Send {
        std::future::ready::<crate::Result<crate::model::Case>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CaseService::escalate_case].
    fn escalate_case(
        &self,
        _req: crate::model::EscalateCaseRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Case>> + Send {
        std::future::ready::<crate::Result<crate::model::Case>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CaseService::close_case].
    fn close_case(
        &self,
        _req: crate::model::CloseCaseRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Case>> + Send {
        std::future::ready::<crate::Result<crate::model::Case>>(Err(Error::other("unimplemented")))
    }

    /// Implements [super::client::CaseService::search_case_classifications].
    fn search_case_classifications(
        &self,
        _req: crate::model::SearchCaseClassificationsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<
        Output = crate::Result<crate::model::SearchCaseClassificationsResponse>,
    > + Send {
        std::future::ready::<crate::Result<crate::model::SearchCaseClassificationsResponse>>(Err(
            Error::other("unimplemented"),
        ))
    }
}

/// Defines the trait used to implement [super::client::CommentService].
///
/// Application developers may need to implement this trait to mock
/// `client::CommentService`.  In other use-cases, application developers only
/// use `client::CommentService` and need not be concerned with this trait or
/// its implementations.
///
/// Services gain new RPCs routinely. Consequently, this trait gains new methods
/// too. To avoid breaking applications the trait provides a default
/// implementation of each method. Most of these implementations just return an
/// error.
pub trait CommentService: std::fmt::Debug + Send + Sync {
    /// Implements [super::client::CommentService::list_comments].
    fn list_comments(
        &self,
        _req: crate::model::ListCommentsRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::ListCommentsResponse>> + Send
    {
        std::future::ready::<crate::Result<crate::model::ListCommentsResponse>>(Err(Error::other(
            "unimplemented",
        )))
    }

    /// Implements [super::client::CommentService::create_comment].
    fn create_comment(
        &self,
        _req: crate::model::CreateCommentRequest,
        _options: gax::options::RequestOptions,
    ) -> impl std::future::Future<Output = crate::Result<crate::model::Comment>> + Send {
        std::future::ready::<crate::Result<crate::model::Comment>>(Err(Error::other(
            "unimplemented",
        )))
    }
}
